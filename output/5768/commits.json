[
  {
    "sha": "f48d61ca8554440e5949233fb7cc33f361978892",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDhkNjFjYTg1NTQ0NDBlNTk0OTIzM2ZiN2NjMzNmMzYxOTc4ODky",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T14:29:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:31:27Z"
      },
      "message": "Consensus: Create consensus/consensus.h with some constants",
      "tree": {
        "sha": "077618439d9eef527370a27dd7ce6480bbe36d23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/077618439d9eef527370a27dd7ce6480bbe36d23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f48d61ca8554440e5949233fb7cc33f361978892",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f48d61ca8554440e5949233fb7cc33f361978892",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f48d61ca8554440e5949233fb7cc33f361978892",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f48d61ca8554440e5949233fb7cc33f361978892/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15facb4aca75122b6ae0dcc6f6e112127e6a0e59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15facb4aca75122b6ae0dcc6f6e112127e6a0e59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15facb4aca75122b6ae0dcc6f6e112127e6a0e59"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 35,
      "deletions": 18
    },
    "files": [
      {
        "sha": "72d79619b246da4df43a52c31849336f7c17bd04",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -87,6 +87,7 @@ BITCOIN_CORE_H = \\\n   coins.h \\\n   compat.h \\\n   compressor.h \\\n+  consensus/consensus.h \\\n   consensus/params.h \\\n   core_io.h \\\n   wallet/db.h \\"
      },
      {
        "sha": "f1c1c0ff8bffea7af2a5f44f70d0faf1d8892d85",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -4,18 +4,18 @@\n \n #include \"base58.h\"\n #include \"clientversion.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n-#include \"primitives/transaction.h\"\n-#include \"core_io.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n+#include \"core_io.h\"\n #include \"keystore.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"ui_interface.h\" // for _(...)\n #include \"univalue/univalue.h\"\n #include \"util.h\"\n-#include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdio.h>\n "
      },
      {
        "sha": "9c5b7d4ffb0ea7179ad0ff6a8c5b2b4688aef144",
        "filename": "src/consensus/consensus.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n+#define BITCOIN_CONSENSUS_CONSENSUS_H\n+\n+/** The maximum allowed size for a serialized block, in bytes (network rule) */\n+static const unsigned int MAX_BLOCK_SIZE = 1000000;\n+/** The maximum allowed number of signature check operations in a block (network rule) */\n+static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n+/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n+static const int COINBASE_MATURITY = 100;\n+/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n+static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+\n+#endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "a4c34c5345e00c0735206e5be32e35196c1b5944",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -14,9 +14,10 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n+#include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n-#include \"net.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n@@ -53,8 +54,6 @@ static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** The maximum allowed number of signature check operations in a block (network rule) */\n-static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n@@ -67,10 +66,6 @@ static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n-/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n-static const int COINBASE_MATURITY = 100;\n-/** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n-static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n /** -par default (number of script-checking threads, 0 = auto) */"
      },
      {
        "sha": "c48d8cd508db4bbe928c9ca68d5d0b99bf8e7bbc",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -6,7 +6,7 @@\n #include \"merkleblock.h\"\n \n #include \"hash.h\"\n-#include \"primitives/block.h\" // for MAX_BLOCK_SIZE\n+#include \"consensus/consensus.h\"\n #include \"utilstrencodings.h\"\n \n using namespace std;"
      },
      {
        "sha": "48575bf7026b39b0a2bbe62382a52d71adfd3dee",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -6,11 +6,12 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n-#include \"primitives/transaction.h\"\n+#include \"consensus/consensus.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"pow.h\"\n+#include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "59f46deb1c420d8aef28a85a0d144a06259d3a18",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -10,9 +10,6 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n-/** The maximum allowed size for a serialized block, in bytes (network rule) */\n-static const unsigned int MAX_BLOCK_SIZE = 1000000;\n-\n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n  * requirements.  When they solve the proof-of-work, they broadcast the block"
      },
      {
        "sha": "721424943551880acc9c9764af65ed605b0e7535",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -10,12 +10,13 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n-#include \"wallet/db.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "7f1db58e5d815e77f517e2bb1399ac7061461a10",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -5,6 +5,7 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"timedata.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "2d3e6da25560103273d3b2f68a72d5cdbbe48a06",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -5,11 +5,12 @@\n \n #include \"amount.h\"\n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n-#include \"net.h\"\n #include \"main.h\"\n #include \"miner.h\"\n+#include \"net.h\"\n #include \"pow.h\"\n #include \"rpcserver.h\"\n #include \"util.h\""
      },
      {
        "sha": "f8f18c1395aac50b716538ce389873793167dbba",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txmempool.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "241a5201f6002d9bf7c036a008a2b15d7da434f9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48d61ca8554440e5949233fb7cc33f361978892/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48d61ca8554440e5949233fb7cc33f361978892/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f48d61ca8554440e5949233fb7cc33f361978892",
        "patch": "@@ -8,6 +8,7 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\""
      }
    ]
  },
  {
    "sha": "49fd398fa9d1ec4aee9ad7feb55838c7c82d575b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWZkMzk4ZmE5ZDFlYzRhZWU5YWQ3ZmViNTU4MzhjN2M4MmQ1NzVi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-16T23:57:14Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:31:27Z"
      },
      "message": "Consensus: Refactor: Decouple CValidationState from main::AbortNode()",
      "tree": {
        "sha": "1d0346217d8efb30189817a54e345ec702121f01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d0346217d8efb30189817a54e345ec702121f01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f48d61ca8554440e5949233fb7cc33f361978892",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f48d61ca8554440e5949233fb7cc33f361978892",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f48d61ca8554440e5949233fb7cc33f361978892"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 27,
      "deletions": 32
    },
    "files": [
      {
        "sha": "63616d960eb8ef3bfbe12b37f7b27ff07094db0c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=49fd398fa9d1ec4aee9ad7feb55838c7c82d575b",
        "patch": "@@ -1537,6 +1537,24 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     return true;\n }\n \n+/** Abort with a message */\n+bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n+{\n+    strMiscWarning = strMessage;\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+    return false;\n+}\n+\n+bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage=\"\")\n+{\n+    AbortNode(strMessage, userMessage);\n+    return state.Error(strMessage);\n+}\n+\n } // anon namespace\n \n /**\n@@ -1815,7 +1833,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n                 return error(\"ConnectBlock(): FindUndoPos failed\");\n             if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash()))\n-                return state.Abort(\"Failed to write undo data\");\n+                return AbortNode(state, \"Failed to write undo data\");\n \n             // update nUndoPos in block index\n             pindex->nUndoPos = pos.nPos;\n@@ -1828,7 +1846,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (fTxIndex)\n         if (!pblocktree->WriteTxIndex(vPos))\n-            return state.Abort(\"Failed to write transaction index\");\n+            return AbortNode(state, \"Failed to write transaction index\");\n \n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n@@ -1889,20 +1907,20 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n                 setDirtyBlockIndex.erase(it++);\n             }\n             if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n-                return state.Abort(\"Files to write to block index database\");\n+                return AbortNode(state, \"Files to write to block index database\");\n             }\n         }\n         // Finally flush the chainstate (which may refer to block index entries).\n         if (!pcoinsTip->Flush())\n-            return state.Abort(\"Failed to write to coin database\");\n+            return AbortNode(state, \"Failed to write to coin database\");\n         // Update best block in wallet (so we can detect restored wallets).\n         if (mode != FLUSH_STATE_IF_NEEDED) {\n             GetMainSignals().SetBestChain(chainActive.GetLocator());\n         }\n         nLastWrite = GetTimeMicros();\n     }\n     } catch (const std::runtime_error& e) {\n-        return state.Abort(std::string(\"System error while flushing: \") + e.what());\n+        return AbortNode(state, std::string(\"System error while flushing: \") + e.what());\n     }\n     return true;\n }\n@@ -1959,7 +1977,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete))\n-        return state.Abort(\"Failed to read block\");\n+        return AbortNode(state, \"Failed to read block\");\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n@@ -2010,7 +2028,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     CBlock block;\n     if (!pblock) {\n         if (!ReadBlockFromDisk(block, pindexNew))\n-            return state.Abort(\"Failed to read block\");\n+            return AbortNode(state, \"Failed to read block\");\n         pblock = &block;\n     }\n     // Apply the block atomically to the chain state.\n@@ -2688,11 +2706,11 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n             return error(\"AcceptBlock(): FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n-                return state.Abort(\"Failed to write block\");\n+                AbortNode(state, \"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n             return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n-        return state.Abort(std::string(\"System error: \") + e.what());\n+        return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n     return true;\n@@ -2765,23 +2783,6 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     return true;\n }\n \n-\n-\n-\n-\n-\n-\n-\n-bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n-    strMiscWarning = strMessage;\n-    LogPrintf(\"*** %s\\n\", strMessage);\n-    uiInterface.ThreadSafeMessageBox(\n-        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n-        \"\", CClientUIInterface::MSG_ERROR);\n-    StartShutdown();\n-    return false;\n-}\n-\n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n     uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;"
      },
      {
        "sha": "a9e1dff76b36dc2c367adcc8a624aef82890146d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=49fd398fa9d1ec4aee9ad7feb55838c7c82d575b",
        "patch": "@@ -183,8 +183,6 @@ CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n-/** Abort with a message */\n-bool AbortNode(const std::string &msg, const std::string &userMessage=\"\");\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n@@ -449,10 +447,6 @@ class CValidationState {\n         mode = MODE_ERROR;\n         return false;\n     }\n-    bool Abort(const std::string &msg) {\n-        AbortNode(msg);\n-        return Error(msg);\n-    }\n     bool IsValid() const {\n         return mode == MODE_VALID;\n     }"
      }
    ]
  },
  {
    "sha": "b746d48478ae855344ae10cb8ac78ff206ed68b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzQ2ZDQ4NDc4YWU4NTUzNDRhZTEwY2I4YWM3OGZmMjA2ZWQ2OGI3",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T14:57:12Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:31:27Z"
      },
      "message": "Consensus: MOVEONLY: Move CValidationState from main consensus/validation",
      "tree": {
        "sha": "9a31d872b3a30bba75db637e26717e35c718cb54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a31d872b3a30bba75db637e26717e35c718cb54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b746d48478ae855344ae10cb8ac78ff206ed68b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b746d48478ae855344ae10cb8ac78ff206ed68b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b746d48478ae855344ae10cb8ac78ff206ed68b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b746d48478ae855344ae10cb8ac78ff206ed68b7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49fd398fa9d1ec4aee9ad7feb55838c7c82d575b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49fd398fa9d1ec4aee9ad7feb55838c7c82d575b"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 101,
      "deletions": 81
    },
    "files": [
      {
        "sha": "580fc6549ac0f740fdb85e77182b974fd1602d1b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -89,6 +89,7 @@ BITCOIN_CORE_H = \\\n   compressor.h \\\n   consensus/consensus.h \\\n   consensus/params.h \\\n+  consensus/validation.h \\\n   core_io.h \\\n   wallet/db.h \\\n   eccryptoverify.h \\"
      },
      {
        "sha": "c92bec4fae5a8db11e3a0fc3adbf406ad1ed061f",
        "filename": "src/consensus/validation.h",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_VALIDATION_H\n+#define BITCOIN_CONSENSUS_VALIDATION_H\n+\n+#include <string>\n+\n+/** \"reject\" message codes */\n+static const unsigned char REJECT_MALFORMED = 0x01;\n+static const unsigned char REJECT_INVALID = 0x10;\n+static const unsigned char REJECT_OBSOLETE = 0x11;\n+static const unsigned char REJECT_DUPLICATE = 0x12;\n+static const unsigned char REJECT_NONSTANDARD = 0x40;\n+static const unsigned char REJECT_DUST = 0x41;\n+static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n+static const unsigned char REJECT_CHECKPOINT = 0x43;\n+\n+/** Capture information about block/transaction validation */\n+class CValidationState {\n+private:\n+    enum mode_state {\n+        MODE_VALID,   //! everything ok\n+        MODE_INVALID, //! network rule violation (DoS value may be set)\n+        MODE_ERROR,   //! run-time error\n+    } mode;\n+    int nDoS;\n+    std::string strRejectReason;\n+    unsigned char chRejectCode;\n+    bool corruptionPossible;\n+public:\n+    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n+    bool DoS(int level, bool ret = false,\n+             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n+             bool corruptionIn=false) {\n+        chRejectCode = chRejectCodeIn;\n+        strRejectReason = strRejectReasonIn;\n+        corruptionPossible = corruptionIn;\n+        if (mode == MODE_ERROR)\n+            return ret;\n+        nDoS += level;\n+        mode = MODE_INVALID;\n+        return ret;\n+    }\n+    bool Invalid(bool ret = false,\n+                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason);\n+    }\n+    bool Error(std::string strRejectReasonIn=\"\") {\n+        if (mode == MODE_VALID)\n+            strRejectReason = strRejectReasonIn;\n+        mode = MODE_ERROR;\n+        return false;\n+    }\n+    bool IsValid() const {\n+        return mode == MODE_VALID;\n+    }\n+    bool IsInvalid() const {\n+        return mode == MODE_INVALID;\n+    }\n+    bool IsError() const {\n+        return mode == MODE_ERROR;\n+    }\n+    bool IsInvalid(int &nDoSOut) const {\n+        if (IsInvalid()) {\n+            nDoSOut = nDoS;\n+            return true;\n+        }\n+        return false;\n+    }\n+    bool CorruptionPossible() const {\n+        return corruptionPossible;\n+    }\n+    unsigned char GetRejectCode() const { return chRejectCode; }\n+    std::string GetRejectReason() const { return strRejectReason; }\n+};\n+\n+#endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "91ef98645d70fc6a61847b002e284d9cb84a80d4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -13,6 +13,7 @@\n #include \"amount.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"main.h\"\n #include \"miner.h\""
      },
      {
        "sha": "9ff47a81c9583869b022131f856abd0e132001b3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -11,6 +11,7 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\""
      },
      {
        "sha": "f2bc8959e0e56a11c51ee88c007343737879f2ae",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 69,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -87,16 +87,6 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 3600;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n \n-/** \"reject\" message codes */\n-static const unsigned char REJECT_MALFORMED = 0x01;\n-static const unsigned char REJECT_INVALID = 0x10;\n-static const unsigned char REJECT_OBSOLETE = 0x11;\n-static const unsigned char REJECT_DUPLICATE = 0x12;\n-static const unsigned char REJECT_NONSTANDARD = 0x40;\n-static const unsigned char REJECT_DUST = 0x41;\n-static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n-static const unsigned char REJECT_CHECKPOINT = 0x43;\n-\n struct BlockHasher\n {\n     size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n@@ -411,65 +401,6 @@ class CBlockFileInfo\n      }\n };\n \n-/** Capture information about block/transaction validation */\n-class CValidationState {\n-private:\n-    enum mode_state {\n-        MODE_VALID,   //! everything ok\n-        MODE_INVALID, //! network rule violation (DoS value may be set)\n-        MODE_ERROR,   //! run-time error\n-    } mode;\n-    int nDoS;\n-    std::string strRejectReason;\n-    unsigned char chRejectCode;\n-    bool corruptionPossible;\n-public:\n-    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n-    bool DoS(int level, bool ret = false,\n-             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n-             bool corruptionIn=false) {\n-        chRejectCode = chRejectCodeIn;\n-        strRejectReason = strRejectReasonIn;\n-        corruptionPossible = corruptionIn;\n-        if (mode == MODE_ERROR)\n-            return ret;\n-        nDoS += level;\n-        mode = MODE_INVALID;\n-        return ret;\n-    }\n-    bool Invalid(bool ret = false,\n-                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason);\n-    }\n-    bool Error(std::string strRejectReasonIn=\"\") {\n-        if (mode == MODE_VALID)\n-            strRejectReason = strRejectReasonIn;\n-        mode = MODE_ERROR;\n-        return false;\n-    }\n-    bool IsValid() const {\n-        return mode == MODE_VALID;\n-    }\n-    bool IsInvalid() const {\n-        return mode == MODE_INVALID;\n-    }\n-    bool IsError() const {\n-        return mode == MODE_ERROR;\n-    }\n-    bool IsInvalid(int &nDoSOut) const {\n-        if (IsInvalid()) {\n-            nDoSOut = nDoS;\n-            return true;\n-        }\n-        return false;\n-    }\n-    bool CorruptionPossible() const {\n-        return corruptionPossible;\n-    }\n-    unsigned char GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-};\n-\n /** RAII wrapper for VerifyDB: Verify consistency of the block and coin databases */\n class CVerifyDB {\n public:"
      },
      {
        "sha": "414391951810cf53ea9794f89c42f9e636538639",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"amount.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "148409c1f65bcf1ac3adc8e6bb18fe36ed1263a7",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -4,7 +4,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"checkpoints.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"sync.h\"\n #include \"util.h\""
      },
      {
        "sha": "1fcbd3f4f6a71a348d8f30bef5ca10e63e7da7eb",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -6,6 +6,7 @@\n #include \"amount.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\""
      },
      {
        "sha": "64450db74a5f0a275281001d00479ce4c2b18228",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -4,12 +4,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n-#include \"primitives/transaction.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "51530c4de5a02873c1df19cff4c35d927f76a9d4",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -2,16 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n-// Unit tests for block.CheckBlock()\n-//\n-\n-\n-\n #include \"clientversion.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n-#include \"utiltime.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"utiltime.h\"\n \n #include <cstdio>\n "
      },
      {
        "sha": "08993b58c0623c2f56b8fa720a2f5a9a25a1e617",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"pubkey.h\""
      },
      {
        "sha": "87be2217c456fd2916724a5ab6a9636c985e37f4",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -2,15 +2,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"main.h\"\n #include \"random.h\"\n-#include \"serialize.h\"\n-#include \"script/script.h\"\n #include \"script/interpreter.h\"\n+#include \"script/script.h\"\n+#include \"serialize.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"util.h\"\n #include \"version.h\"\n-#include \"test/test_bitcoin.h\"\n \n #include <iostream>\n "
      },
      {
        "sha": "d12535e43854bbafa1342878689ee60e4f63247c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -7,12 +7,13 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/validation.h\"\n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n-#include \"core_io.h\"\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "99e14b97d54a6a24d5b8dd541d67f32c3657c107",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "98b462500633cb0f26785b8e0f0067b54b0ce9f6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -9,6 +9,7 @@\n #include \"checkpoints.h\"\n #include \"coincontrol.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "d16e7825d60b2796f2e0280b880a42e586d06f8c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b746d48478ae855344ae10cb8ac78ff206ed68b7/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "patch": "@@ -6,6 +6,7 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"protocol.h\"\n #include \"serialize.h\""
      }
    ]
  },
  {
    "sha": "809373969f8d71d377ea30e74d8cd64a6b41c6d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDkzNzM5NjlmOGQ3MWQzNzdlYTMwZTc0ZDhjZDY0YTZiNDFjNmQz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T14:03:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:31:27Z"
      },
      "message": "Consensus: Refactor: turn main::GetBlockValue() into GetBlockSubsidy(Consensus::Params)",
      "tree": {
        "sha": "81cb94850bd488a712ab304871ca6076bcccc89b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81cb94850bd488a712ab304871ca6076bcccc89b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/809373969f8d71d377ea30e74d8cd64a6b41c6d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/809373969f8d71d377ea30e74d8cd64a6b41c6d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/809373969f8d71d377ea30e74d8cd64a6b41c6d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/809373969f8d71d377ea30e74d8cd64a6b41c6d3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b746d48478ae855344ae10cb8ac78ff206ed68b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b746d48478ae855344ae10cb8ac78ff206ed68b7"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 17,
      "deletions": 14
    },
    "files": [
      {
        "sha": "09c478501063f010f2688ac1ed3f0129e5f1c2b9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/809373969f8d71d377ea30e74d8cd64a6b41c6d3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/809373969f8d71d377ea30e74d8cd64a6b41c6d3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=809373969f8d71d377ea30e74d8cd64a6b41c6d3",
        "patch": "@@ -1177,19 +1177,17 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     return true;\n }\n \n-CAmount GetBlockValue(int nHeight, const CAmount& nFees)\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& params)\n {\n-    CAmount nSubsidy = 50 * COIN;\n-    int halvings = nHeight / Params().SubsidyHalvingInterval();\n-\n+    int halvings = nHeight / params.nSubsidyHalvingInterval;\n     // Force block reward to zero when right shift is undefined.\n     if (halvings >= 64)\n-        return nFees;\n+        return 0;\n \n+    CAmount nSubsidy = 50 * COIN;\n     // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n     nSubsidy >>= halvings;\n-\n-    return nSubsidy + nFees;\n+    return nSubsidy;\n }\n \n bool IsInitialBlockDownload()\n@@ -1700,6 +1698,7 @@ static int64_t nTimeTotal = 0;\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n+    const Consensus::Params& params = Params().GetConsensus();\n     // Check it again in case a previous version let a bad block in\n     if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n         return false;\n@@ -1812,10 +1811,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     int64_t nTime1 = GetTimeMicros(); nTimeConnect += nTime1 - nTimeStart;\n     LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime1 - nTimeStart), 0.001 * (nTime1 - nTimeStart) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime1 - nTimeStart) / (nInputs-1), nTimeConnect * 0.000001);\n \n-    if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+    CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, params);\n+    if (block.vtx[0].GetValueOut() > blockReward)\n         return state.DoS(100,\n                          error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n-                               block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n+                               block.vtx[0].GetValueOut(), blockReward),\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n     if (!control.Wait())"
      },
      {
        "sha": "96c6bbbcea63a981341026916a1c53a94beba510",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/809373969f8d71d377ea30e74d8cd64a6b41c6d3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/809373969f8d71d377ea30e74d8cd64a6b41c6d3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=809373969f8d71d377ea30e74d8cd64a6b41c6d3",
        "patch": "@@ -169,7 +169,7 @@ std::string GetWarnings(std::string strFor);\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n-CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& params);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);"
      },
      {
        "sha": "59fe75f9714096496b86bd3a30dbf9a24b86aeda",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/809373969f8d71d377ea30e74d8cd64a6b41c6d3/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/809373969f8d71d377ea30e74d8cd64a6b41c6d3/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=809373969f8d71d377ea30e74d8cd64a6b41c6d3",
        "patch": "@@ -96,6 +96,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     if(!pblocktemplate.get())\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n@@ -320,15 +321,15 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         LogPrintf(\"CreateNewBlock(): total size %u\\n\", nBlockSize);\n \n         // Compute final coinbase transaction.\n-        txNew.vout[0].nValue = GetBlockValue(nHeight, nFees);\n+        txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, params);\n         txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n         pblock->vtx[0] = txNew;\n         pblocktemplate->vTxFees[0] = -nFees;\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n         UpdateTime(pblock, pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, params);\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n "
      },
      {
        "sha": "534676ceb1764f3986678521ee281eaa8ccb49b2",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/809373969f8d71d377ea30e74d8cd64a6b41c6d3/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/809373969f8d71d377ea30e74d8cd64a6b41c6d3/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=809373969f8d71d377ea30e74d8cd64a6b41c6d3",
        "patch": "@@ -2,20 +2,22 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"primitives/transaction.h\"\n+#include \"chainparams.h\"\n #include \"main.h\"\n \n #include \"test/test_bitcoin.h\"\n \n+#include <boost/signals2/signal.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(main_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n+    const Consensus::Params& params = Params(CBaseChainParams::MAIN).GetConsensus();\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        CAmount nSubsidy = GetBlockValue(nHeight, 0);\n+        CAmount nSubsidy = GetBlockSubsidy(nHeight, params);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));"
      }
    ]
  },
  {
    "sha": "52d1b8c291162142e854ac9d058ab08ea9dcda58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmQxYjhjMjkxMTYyMTQyZTg1NGFjOWQwNThhYjA4ZWE5ZGNkYTU4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T14:10:37Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:36:35Z"
      },
      "message": "Consensus: Refactor: Decouple IsSuperMajority from Params()",
      "tree": {
        "sha": "12533edb5cd3ce94ac33599fdc5a9c67b9296354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12533edb5cd3ce94ac33599fdc5a9c67b9296354"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52d1b8c291162142e854ac9d058ab08ea9dcda58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52d1b8c291162142e854ac9d058ab08ea9dcda58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52d1b8c291162142e854ac9d058ab08ea9dcda58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52d1b8c291162142e854ac9d058ab08ea9dcda58/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "809373969f8d71d377ea30e74d8cd64a6b41c6d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/809373969f8d71d377ea30e74d8cd64a6b41c6d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/809373969f8d71d377ea30e74d8cd64a6b41c6d3"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "6d28c3d5db7c60b8efe1c71a8d2c5064c2094a2e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52d1b8c291162142e854ac9d058ab08ea9dcda58/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52d1b8c291162142e854ac9d058ab08ea9dcda58/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=52d1b8c291162142e854ac9d058ab08ea9dcda58",
        "patch": "@@ -72,10 +72,9 @@ void EraseOrphansFor(NodeId peer);\n \n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Params().ToCheckBlockUpgradeMajority() blocks, starting at pstart \n- * and going backwards.\n+ * in the last nToCheck blocks, starting at pstart and going backwards.\n  */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired);\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck);\n static void CheckBlockIndex();\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -1748,7 +1747,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, Params().EnforceBlockUpgradeMajority())) {\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, params.nMajorityEnforceBlockUpgrade, params.nMajorityWindow)) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n@@ -2560,8 +2559,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n+    const Consensus::Params& params = Params().GetConsensus();\n     uint256 hash = block.GetHash();\n-    if (hash == Params().HashGenesisBlock())\n+    if (hash == params.hashGenesisBlock)\n         return true;\n \n     assert(pindexPrev);\n@@ -2589,14 +2589,14 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, params.nMajorityRejectBlockOutdated, params.nMajorityWindow))\n     {\n         return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n     // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, params.nMajorityRejectBlockOutdated, params.nMajorityWindow))\n     {\n         return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n@@ -2607,6 +2607,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n \n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n+    const Consensus::Params& params = Params().GetConsensus();\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n \n     // Check that all transactions are finalized\n@@ -2617,7 +2618,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, Params().EnforceBlockUpgradeMajority()))\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, params.nMajorityEnforceBlockUpgrade, params.nMajorityWindow))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -2717,9 +2718,8 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired)\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n {\n-    unsigned int nToCheck = Params().ToCheckBlockUpgradeMajority();\n     unsigned int nFound = 0;\n     for (unsigned int i = 0; i < nToCheck && nFound < nRequired && pstart != NULL; i++)\n     {"
      }
    ]
  },
  {
    "sha": "bc7a24024d914163d608a224020c88e54770f6de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzdhMjQwMjRkOTE0MTYzZDYwOGEyMjQwMjBjODhlNTQ3NzBmNmRl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T19:29:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:40:31Z"
      },
      "message": "Consensus: SQUASHME: Cleanup: remove Consensus::Params getters from CChainParams",
      "tree": {
        "sha": "2d921e185172c797f6b6dde2095485c447e41276",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d921e185172c797f6b6dde2095485c447e41276"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc7a24024d914163d608a224020c88e54770f6de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc7a24024d914163d608a224020c88e54770f6de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc7a24024d914163d608a224020c88e54770f6de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc7a24024d914163d608a224020c88e54770f6de/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52d1b8c291162142e854ac9d058ab08ea9dcda58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52d1b8c291162142e854ac9d058ab08ea9dcda58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52d1b8c291162142e854ac9d058ab08ea9dcda58"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b0a8642411256c183fb79ec9402f8897c7b177af",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc7a24024d914163d608a224020c88e54770f6de/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc7a24024d914163d608a224020c88e54770f6de/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bc7a24024d914163d608a224020c88e54770f6de",
        "patch": "@@ -608,6 +608,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 2: parameter interactions\n \n+    const Consensus::Params& params = Params().GetConsensus();\n     // Set this early so that parameter interactions go to console\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n@@ -1043,7 +1044,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                if (!mapBlockIndex.empty() && mapBlockIndex.count(Params().HashGenesisBlock()) == 0)\n+                if (!mapBlockIndex.empty() && mapBlockIndex.count(params.hashGenesisBlock) == 0)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n                 // Initialize the block index (no-op if non-empty database was already loaded)"
      },
      {
        "sha": "d63c0cacd16fa57f97dc4e4e8ed4be1aa6908602",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc7a24024d914163d608a224020c88e54770f6de/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc7a24024d914163d608a224020c88e54770f6de/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bc7a24024d914163d608a224020c88e54770f6de",
        "patch": "@@ -1708,7 +1708,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n-    if (block.GetHash() == Params().HashGenesisBlock()) {\n+    if (block.GetHash() == params.hashGenesisBlock) {\n         if (!fJustCheck)\n             view.SetBestBlock(pindex->GetBlockHash());\n         return true;\n@@ -2633,6 +2633,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n+    const Consensus::Params& params = Params().GetConsensus();\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n     BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n@@ -2652,7 +2653,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n \n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;\n-    if (hash != Params().HashGenesisBlock()) {\n+    if (hash != params.hashGenesisBlock) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n@@ -3121,6 +3122,7 @@ bool InitBlockIndex() {\n \n bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n {\n+    const Consensus::Params& params = Params().GetConsensus();\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n@@ -3166,7 +3168,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n \n                 // detect out of order blocks, and store them for later\n                 uint256 hash = block.GetHash();\n-                if (hash != Params().HashGenesisBlock() && mapBlockIndex.find(block.hashPrevBlock) == mapBlockIndex.end()) {\n+                if (hash != params.hashGenesisBlock && mapBlockIndex.find(block.hashPrevBlock) == mapBlockIndex.end()) {\n                     LogPrint(\"reindex\", \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                             block.hashPrevBlock.ToString());\n                     if (dbp)\n@@ -3181,7 +3183,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n-                } else if (hash != Params().HashGenesisBlock() && mapBlockIndex[hash]->nHeight % 1000 == 0) {\n+                } else if (hash != params.hashGenesisBlock && mapBlockIndex[hash]->nHeight % 1000 == 0) {\n                     LogPrintf(\"Block Import: already had block %s at height %d\\n\", hash.ToString(), mapBlockIndex[hash]->nHeight);\n                 }\n \n@@ -3572,6 +3574,7 @@ void static ProcessGetData(CNode* pfrom)\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n {\n     RandAddSeedPerfmon();\n+    const Consensus::Params& params = Params().GetConsensus();\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n@@ -3830,7 +3833,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // not a direct successor.\n                     pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n-                    if (chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - Params().TargetSpacing() * 20 &&\n+                    if (chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - params.nPowTargetSpacing * 20 &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n@@ -4493,6 +4496,7 @@ bool ProcessMessages(CNode* pfrom)\n \n bool SendMessages(CNode* pto, bool fSendTrickle)\n {\n+    const Consensus::Params& params = Params().GetConsensus();\n     {\n         // Don't send anything until we get their version message\n         if (pto->nVersion == 0)\n@@ -4680,7 +4684,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertize nonexisting block hashes\n         // to unreasonably increase our timeout.\n-        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (4 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n+        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * params.nPowTargetSpacing * (4 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n             LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", state.vBlocksInFlight.front().hash.ToString(), pto->id);\n             pto->fDisconnect = true;\n         }"
      },
      {
        "sha": "79a54a7031dbf95474b39df41a3bfaff12ee79ea",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc7a24024d914163d608a224020c88e54770f6de/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc7a24024d914163d608a224020c88e54770f6de/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=bc7a24024d914163d608a224020c88e54770f6de",
        "patch": "@@ -82,10 +82,11 @@ class TxPriorityCompare\n \n void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n {\n+    const Consensus::Params& params = Params().GetConsensus();\n     pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n-    if (Params().AllowMinDifficultyBlocks())\n+    if (params.fPowAllowMinDifficultyBlocks)\n         pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n }\n \n@@ -443,6 +444,7 @@ void static BitcoinMiner(CWallet *pwallet)\n     LogPrintf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     RenameThread(\"bitcoin-miner\");\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     // Each thread has its own key and counter\n     CReserveKey reservekey(pwallet);\n@@ -520,7 +522,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n                 // Update nTime every few seconds\n                 UpdateTime(pblock, pindexPrev);\n-                if (Params().AllowMinDifficultyBlocks())\n+                if (params.fPowAllowMinDifficultyBlocks)\n                 {\n                     // Changing pblock->nTime can change work required on testnet:\n                     hashTarget.SetCompact(pblock->nBits);"
      },
      {
        "sha": "b3d6e974ac0e00eb6558db69ccf84475a7dd4183",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc7a24024d914163d608a224020c88e54770f6de/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc7a24024d914163d608a224020c88e54770f6de/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=bc7a24024d914163d608a224020c88e54770f6de",
        "patch": "@@ -38,6 +38,7 @@ using namespace std;\n  */\n Value GetNetworkHashPS(int lookup, int height) {\n     CBlockIndex *pb = chainActive.Tip();\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     if (height >= 0 && height < chainActive.Height())\n         pb = chainActive[height];\n@@ -47,7 +48,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n \n     // If lookup is -1, then use blocks since last difficulty change.\n     if (lookup <= 0)\n-        lookup = pb->nHeight % Params().DifficultyAdjustmentInterval() + 1;\n+        lookup = pb->nHeight % consensusParams.DifficultyAdjustmentInterval() + 1;\n \n     // If lookup is larger than chain, then set it to chain length.\n     if (lookup > pb->nHeight)"
      }
    ]
  },
  {
    "sha": "9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjE3NWNjNzM3YTc4MWVhMDFmNmI4Y2MyOGFiOGE0YjNhZWQ3YjFm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-31T18:23:27Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:14Z"
      },
      "message": "Consensus: Cleanup: remove Consensus::Params getters from CChainParams\n\ns/Params().HashGenesisBlock()/params.hashGenesisBlock",
      "tree": {
        "sha": "522e4ee16a08e90b1b918893b56458b452092239",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/522e4ee16a08e90b1b918893b56458b452092239"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc7a24024d914163d608a224020c88e54770f6de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc7a24024d914163d608a224020c88e54770f6de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc7a24024d914163d608a224020c88e54770f6de"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 2,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f9a08314a6fdae05f2fb617077fd8f31dfe52c4a",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f",
        "patch": "@@ -41,15 +41,9 @@ class CChainParams\n     };\n \n     const Consensus::Params& GetConsensus() const { return consensus; }\n-    const uint256& HashGenesisBlock() const { return consensus.hashGenesisBlock; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n-    const arith_uint256& ProofOfWorkLimit() const { return consensus.powLimit; }\n-    int SubsidyHalvingInterval() const { return consensus.nSubsidyHalvingInterval; }\n-    int EnforceBlockUpgradeMajority() const { return consensus.nMajorityEnforceBlockUpgrade; }\n-    int RejectBlockOutdatedMajority() const { return consensus.nMajorityRejectBlockOutdated; }\n-    int ToCheckBlockUpgradeMajority() const { return consensus.nMajorityWindow; }\n \n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }\n@@ -59,13 +53,8 @@ class CChainParams\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n     /** Default value for -checkmempool and -checkblockindex argument */\n     bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n-    /** Allow mining of a min-difficulty block */\n-    bool AllowMinDifficultyBlocks() const { return consensus.fPowAllowMinDifficultyBlocks; }\n     /** Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n-    int64_t TargetTimespan() const { return consensus.nPowTargetTimespan; }\n-    int64_t TargetSpacing() const { return consensus.nPowTargetSpacing; }\n-    int64_t DifficultyAdjustmentInterval() const { return consensus.nPowTargetTimespan / consensus.nPowTargetSpacing; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */"
      },
      {
        "sha": "fd0607786f64472f928831ba7409a9380ed69d29",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f",
        "patch": "@@ -3228,6 +3228,7 @@ void static CheckBlockIndex()\n     if (!fCheckBlockIndex) {\n         return;\n     }\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     LOCK(cs_main);\n \n@@ -3265,7 +3266,7 @@ void static CheckBlockIndex()\n         // Begin: actual consistency checks.\n         if (pindex->pprev == NULL) {\n             // Genesis block checks.\n-            assert(pindex->GetBlockHash() == Params().HashGenesisBlock()); // Genesis block's hash must match.\n+            assert(pindex->GetBlockHash() == params.hashGenesisBlock); // Genesis block's hash must match.\n             assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n         }\n         assert((pindexFirstMissing != NULL) == (pindex->nChainTx == 0)); // nChainTx == 0 is used to signal that all parent block's transaction data is available."
      }
    ]
  },
  {
    "sha": "15610220a4a5dd6c02e6f0b9852ae131ed3b7b85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTYxMDIyMGE0YTVkZDZjMDJlNmYwYjk4NTJhZTEzMWVkM2I3Yjg1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T19:47:10Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:16Z"
      },
      "message": "Consensus: Refactor: Decouple from CChainParams: CheckBlockHeader,\nCheckBlock, ContextualCheckBlockHeader and ContextualCheckBlock",
      "tree": {
        "sha": "7e04a06bcd0010f33aac780ec006b2f035e60528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e04a06bcd0010f33aac780ec006b2f035e60528"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f175cc737a781ea01f6b8cc28ab8a4b3aed7b1f"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 25,
      "deletions": 22
    },
    "files": [
      {
        "sha": "8f84cbe35dd39daa1117ce7a10cf4312b6eb9d5f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=15610220a4a5dd6c02e6f0b9852ae131ed3b7b85",
        "patch": "@@ -1699,7 +1699,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     AssertLockHeld(cs_main);\n     const Consensus::Params& params = Params().GetConsensus();\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n+    if (!CheckBlock(block, state, params, !fJustCheck, !fJustCheck))\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n@@ -2482,10 +2482,10 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, params))\n         return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n@@ -2497,13 +2497,13 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n     return true;\n }\n \n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context.\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, fCheckPOW))\n+    if (!CheckBlockHeader(block, state, params, fCheckPOW))\n         return false;\n \n     // Check the merkle root.\n@@ -2557,9 +2557,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, CBlockIndex * const pindexPrev)\n {\n-    const Consensus::Params& params = Params().GetConsensus();\n     uint256 hash = block.GetHash();\n     if (hash == params.hashGenesisBlock)\n         return true;\n@@ -2605,9 +2604,8 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex * const pindexPrev)\n {\n-    const Consensus::Params& params = Params().GetConsensus();\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n \n     // Check that all transactions are finalized\n@@ -2648,7 +2646,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         return true;\n     }\n \n-    if (!CheckBlockHeader(block, state))\n+    if (!CheckBlockHeader(block, state, params))\n         return false;\n \n     // Get prev block index\n@@ -2662,7 +2660,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n \n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+    if (!ContextualCheckBlockHeader(block, state, params, pindexPrev))\n         return false;\n \n     if (pindex == NULL)\n@@ -2677,6 +2675,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, CDiskBlockPos* dbp)\n {\n     AssertLockHeld(cs_main);\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     CBlockIndex *&pindex = *ppindex;\n \n@@ -2689,7 +2688,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         return true;\n     }\n \n-    if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n+    if ((!CheckBlock(block, state, params)) || !ContextualCheckBlock(block, state, params, pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n@@ -2735,7 +2734,8 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n     // Preliminary checks\n-    bool checked = CheckBlock(*pblock, state);\n+    const Consensus::Params& params = Params().GetConsensus();\n+    bool checked = CheckBlock(*pblock, state, params);\n \n     {\n         LOCK(cs_main);\n@@ -2765,18 +2765,19 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev == chainActive.Tip());\n+    const Consensus::Params& params = Params().GetConsensus();\n \n     CCoinsViewCache viewNew(pcoinsTip);\n     CBlockIndex indexDummy(block);\n     indexDummy.pprev = pindexPrev;\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+    if (!ContextualCheckBlockHeader(block, state, params, pindexPrev))\n         return false;\n-    if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n+    if (!CheckBlock(block, state, params, fCheckPOW, fCheckMerkleRoot))\n         return false;\n-    if (!ContextualCheckBlock(block, state, pindexPrev))\n+    if (!ContextualCheckBlock(block, state, params, pindexPrev))\n         return false;\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, true))\n         return false;\n@@ -2966,6 +2967,7 @@ CVerifyDB::~CVerifyDB()\n \n bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n+    const Consensus::Params& params = Params().GetConsensus();\n     LOCK(cs_main);\n     if (chainActive.Tip() == NULL || chainActive.Tip()->pprev == NULL)\n         return true;\n@@ -2993,7 +2995,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         if (!ReadBlockFromDisk(block, pindex))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state))\n+        if (nCheckLevel >= 1 && !CheckBlock(block, state, params))\n             return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {"
      },
      {
        "sha": "5685dfb8f22cf9c5e35b6132afe6d69ca5ffcab7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=15610220a4a5dd6c02e6f0b9852ae131ed3b7b85",
        "patch": "@@ -331,12 +331,12 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true);\n+bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex *pindexPrev);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);"
      },
      {
        "sha": "67f747ab6b058a4a560518e4dd58c275b61441c8",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=15610220a4a5dd6c02e6f0b9852ae131ed3b7b85",
        "patch": "@@ -42,6 +42,7 @@ bool read_block(const std::string& filename, CBlock& block)\n \n BOOST_AUTO_TEST_CASE(May15)\n {\n+    const Consensus::Params& params = Params(CBaseChainParams::MAIN).GetConsensus();\n     // Putting a 1MB binary file in the git repository is not a great\n     // idea, so this test is only run if you manually download\n     // test/data/Mar12Fork.dat from\n@@ -56,7 +57,7 @@ BOOST_AUTO_TEST_CASE(May15)\n \n         // After May 15'th, big blocks are OK:\n         forkingBlock.nTime = tMay15; // Invalidates PoW\n-        BOOST_CHECK(CheckBlock(forkingBlock, state, false, false));\n+        BOOST_CHECK(CheckBlock(forkingBlock, state, params, false, false));\n     }\n \n     SetMockTime(0);"
      }
    ]
  },
  {
    "sha": "46d3ce3eb105ac82649e4f82e1dd69381359ec1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmQzY2UzZWIxMDVhYzgyNjQ5ZTRmODJlMWRkNjkzODEzNTllYzFj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T19:49:23Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:37Z"
      },
      "message": "Consensus: Tests: Correct pow tests",
      "tree": {
        "sha": "1fa6661e7e9fcbb1022e6b1654dd0d736817b311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fa6661e7e9fcbb1022e6b1654dd0d736817b311"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46d3ce3eb105ac82649e4f82e1dd69381359ec1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d3ce3eb105ac82649e4f82e1dd69381359ec1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46d3ce3eb105ac82649e4f82e1dd69381359ec1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d3ce3eb105ac82649e4f82e1dd69381359ec1c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15610220a4a5dd6c02e6f0b9852ae131ed3b7b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15610220a4a5dd6c02e6f0b9852ae131ed3b7b85"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 4,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c203bd3cf7db3610c3e2b18b5f0c0dbf87e470de",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46d3ce3eb105ac82649e4f82e1dd69381359ec1c/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46d3ce3eb105ac82649e4f82e1dd69381359ec1c/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=46d3ce3eb105ac82649e4f82e1dd69381359ec1c",
        "patch": "@@ -16,9 +16,7 @@ BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const Consensus::Params& params = Params(CBaseChainParams::MAIN).GetConsensus();\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n@@ -30,9 +28,7 @@ BOOST_AUTO_TEST_CASE(get_next_work)\n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const Consensus::Params& params = Params(CBaseChainParams::MAIN).GetConsensus();\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n@@ -44,9 +40,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const Consensus::Params& params = Params(CBaseChainParams::MAIN).GetConsensus();\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n@@ -58,9 +52,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const Consensus::Params& params = Params(CBaseChainParams::MAIN).GetConsensus();\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;"
      }
    ]
  },
  {
    "sha": "42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmEzZjY1MGJmOWRlZjM5NzRhOGFkMDc2NThhZTc4YjNmMGQzZWY0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T15:44:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:37Z"
      },
      "message": "Consensus: Move Params().GetConsensus() up",
      "tree": {
        "sha": "fe544d443928c1e4b07ae68c63d5f220b9df86f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe544d443928c1e4b07ae68c63d5f220b9df86f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46d3ce3eb105ac82649e4f82e1dd69381359ec1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46d3ce3eb105ac82649e4f82e1dd69381359ec1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46d3ce3eb105ac82649e4f82e1dd69381359ec1c"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 57,
      "deletions": 57
    },
    "files": [
      {
        "sha": "9985df9d9323bfd9a5ae3369c151cca2d4f792d1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 21,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
        "patch": "@@ -1694,10 +1694,9 @@ static int64_t nTimeIndex = 0;\n static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n \n-bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n+bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck)\n {\n     AssertLockHeld(cs_main);\n-    const Consensus::Params& params = Params().GetConsensus();\n     // Check it again in case a previous version let a bad block in\n     if (!CheckBlock(block, state, params, !fJustCheck, !fJustCheck))\n         return false;\n@@ -2023,6 +2022,7 @@ static int64_t nTimePostConnect = 0;\n bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *pblock) {\n     assert(pindexNew->pprev == chainActive.Tip());\n     mempool.check(pcoinsTip);\n+    const Consensus::Params& params = Params().GetConsensus();\n     // Read block from disk.\n     int64_t nTime1 = GetTimeMicros();\n     CBlock block;\n@@ -2038,7 +2038,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     {\n         CCoinsViewCache view(pcoinsTip);\n         CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n-        bool rv = ConnectBlock(*pblock, state, pindexNew, view);\n+        bool rv = ConnectBlock(*pblock, state, params, pindexNew, view);\n         GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n@@ -2568,7 +2568,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus()))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, params))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n@@ -2628,10 +2628,9 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     return true;\n }\n \n-bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)\n+bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);\n-    const Consensus::Params& params = Params().GetConsensus();\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n     BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n@@ -2672,14 +2671,13 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     return true;\n }\n \n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, CDiskBlockPos* dbp)\n+bool AcceptBlock(CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex** ppindex, CDiskBlockPos* dbp)\n {\n     AssertLockHeld(cs_main);\n-    const Consensus::Params& params = Params().GetConsensus();\n \n     CBlockIndex *&pindex = *ppindex;\n \n-    if (!AcceptBlockHeader(block, state, &pindex))\n+    if (!AcceptBlockHeader(block, state, params, &pindex))\n         return false;\n \n     if (pindex->nStatus & BLOCK_HAVE_DATA) {\n@@ -2731,10 +2729,9 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n }\n \n \n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n+bool ProcessNewBlock(CValidationState &state, const Consensus::Params& params, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n     // Preliminary checks\n-    const Consensus::Params& params = Params().GetConsensus();\n     bool checked = CheckBlock(*pblock, state, params);\n \n     {\n@@ -2746,7 +2743,7 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n-        bool ret = AcceptBlock(*pblock, state, &pindex, dbp);\n+        bool ret = AcceptBlock(*pblock, state, params, &pindex, dbp);\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n@@ -2779,7 +2776,7 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n         return false;\n     if (!ContextualCheckBlock(block, state, params, pindexPrev))\n         return false;\n-    if (!ConnectBlock(block, state, &indexDummy, viewNew, true))\n+    if (!ConnectBlock(block, state, params, &indexDummy, viewNew, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -3034,7 +3031,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!ConnectBlock(block, state, pindex, coins))\n+            if (!ConnectBlock(block, state, params, pindex, coins))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n@@ -3181,7 +3178,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 // process in case the block isn't known yet\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     CValidationState state;\n-                    if (ProcessNewBlock(state, NULL, &block, dbp))\n+                    if (ProcessNewBlock(state, params, NULL, &block, dbp))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -3203,7 +3200,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                             LogPrintf(\"%s: Processing out of order child %s of %s\\n\", __func__, block.GetHash().ToString(),\n                                     head.ToString());\n                             CValidationState dummy;\n-                            if (ProcessNewBlock(dummy, NULL, &block, &it->second))\n+                            if (ProcessNewBlock(dummy, params, NULL, &block, &it->second))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(block.GetHash());\n@@ -3574,10 +3571,9 @@ void static ProcessGetData(CNode* pfrom)\n     }\n }\n \n-bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n+bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const Consensus::Params& params)\n {\n     RandAddSeedPerfmon();\n-    const Consensus::Params& params = Params().GetConsensus();\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n@@ -4095,7 +4091,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 Misbehaving(pfrom->GetId(), 20);\n                 return error(\"non-continuous headers sequence\");\n             }\n-            if (!AcceptBlockHeader(header, state, &pindexLast)) {\n+            if (!AcceptBlockHeader(header, state, params, &pindexLast)) {\n                 int nDoS;\n                 if (state.IsInvalid(nDoS)) {\n                     if (nDoS > 0)\n@@ -4130,7 +4126,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->AddInventoryKnown(inv);\n \n         CValidationState state;\n-        ProcessNewBlock(state, pfrom, &block);\n+        ProcessNewBlock(state, params, pfrom, &block);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n@@ -4453,7 +4449,7 @@ bool ProcessMessages(CNode* pfrom)\n         bool fRet = false;\n         try\n         {\n-            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime);\n+            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, Params().GetConsensus());\n             boost::this_thread::interruption_point();\n         }\n         catch (const std::ios_base::failure& e)"
      },
      {
        "sha": "892e3fc12035c303552390d0c8a9fc6e92fb7336",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
        "patch": "@@ -133,7 +133,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n+bool ProcessNewBlock(CValidationState &state, const Consensus::Params& params, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -328,7 +328,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n-bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n+bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n /** Context-independent validity checks */\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true);\n@@ -342,8 +342,8 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Store block on disk. If dbp is provided, the file is known to already reside on disk */\n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex **pindex, CDiskBlockPos* dbp = NULL);\n-bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex **ppindex= NULL);\n+bool AcceptBlock(CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex **pindex, CDiskBlockPos* dbp = NULL);\n+bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, CBlockIndex **ppindex= NULL);\n \n \n "
      },
      {
        "sha": "659a776e47968d3e053847b14605ba2cb1edcb3f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
        "patch": "@@ -80,24 +80,22 @@ class TxPriorityCompare\n     }\n };\n \n-void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n+void UpdateTime(CBlockHeader* pblock, const Consensus::Params params, const CBlockIndex* pindexPrev)\n {\n-    const Consensus::Params& params = Params().GetConsensus();\n     pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n     if (params.fPowAllowMinDifficultyBlocks)\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n+        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, params);\n }\n \n-CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n+CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& scriptPubKeyIn)\n {\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n-    const Consensus::Params& params = Params().GetConsensus();\n \n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n@@ -329,7 +327,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, pindexPrev);\n+        UpdateTime(pblock, params, pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, params);\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n@@ -402,15 +400,16 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n \n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n {\n+    const Consensus::Params& params = Params().GetConsensus();\n     CPubKey pubkey;\n     if (!reservekey.GetReservedKey(pubkey))\n         return NULL;\n \n     CScript scriptPubKey = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-    return CreateNewBlock(scriptPubKey);\n+    return CreateNewBlock(params, scriptPubKey);\n }\n \n-static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n+static bool ProcessBlockFound(CBlock* pblock, const Consensus::Params& params, CWallet& wallet, CReserveKey& reservekey)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));\n@@ -433,7 +432,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n \n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n-    if (!ProcessNewBlock(state, NULL, pblock))\n+    if (!ProcessNewBlock(state, params, NULL, pblock))\n         return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n \n     return true;\n@@ -497,7 +496,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                         LogPrintf(\"BitcoinMiner:\\n\");\n                         LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                        ProcessBlockFound(pblock, *pwallet, reservekey);\n+                        ProcessBlockFound(pblock, params, *pwallet, reservekey);\n                         SetThreadPriority(THREAD_PRIORITY_LOWEST);\n \n                         // In regression test mode, stop mining after a block is found.\n@@ -521,7 +520,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                     break;\n \n                 // Update nTime every few seconds\n-                UpdateTime(pblock, pindexPrev);\n+                UpdateTime(pblock, params, pindexPrev);\n                 if (params.fPowAllowMinDifficultyBlocks)\n                 {\n                     // Changing pblock->nTime can change work required on testnet:"
      },
      {
        "sha": "4f4e0b7bdb870bbc443ed14ed5a16abebadb088e",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n+#include \"consensus/params.h\"\n #include \"primitives/block.h\"\n \n #include <stdint.h>\n@@ -25,10 +26,10 @@ struct CBlockTemplate\n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n /** Generate a new block, without valid proof-of-work */\n-CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n+CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& scriptPubKeyIn);\n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n-void UpdateTime(CBlockHeader* block, const CBlockIndex* pindexPrev);\n+void UpdateTime(CBlockHeader* block, const Consensus::Params params, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "b87db4f4fb253aecec14a5d7256352a1ce316c7c",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
        "patch": "@@ -145,6 +145,7 @@ Value setgenerate(const Array& params, bool fHelp)\n     if (pwalletMain == NULL)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n \n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n     bool fGenerate = true;\n     if (params.size() > 0)\n         fGenerate = params[0].get_bool();\n@@ -184,13 +185,13 @@ Value setgenerate(const Array& params, bool fHelp)\n                 LOCK(cs_main);\n                 IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n             }\n-            while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+            while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, consensusParams)) {\n                 // Yes, there is a chance every nonce could fail to satisfy the -regtest\n                 // target -- 1 in 2^(2^32). That ain't gonna happen.\n                 ++pblock->nNonce;\n             }\n             CValidationState state;\n-            if (!ProcessNewBlock(state, NULL, pblock))\n+            if (!ProcessNewBlock(state, consensusParams, NULL, pblock))\n                 throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n             ++nHeight;\n             blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -368,6 +369,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n          );\n \n     LOCK(cs_main);\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     std::string strMode = \"template\";\n     Value lpval = Value::null;\n@@ -495,7 +497,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             pblocktemplate = NULL;\n         }\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = CreateNewBlock(scriptDummy);\n+        pblocktemplate = CreateNewBlock(consensusParams, scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n@@ -505,7 +507,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Update nTime\n-    UpdateTime(pblock, pindexPrev);\n+    UpdateTime(pblock, consensusParams, pindexPrev);\n     pblock->nNonce = 0;\n \n     static const Array aCaps = boost::assign::list_of(\"proposal\");\n@@ -614,6 +616,7 @@ Value submitblock(const Array& params, bool fHelp)\n             + HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n         );\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     CBlock block;\n     if (!DecodeHexBlk(block, params[0].get_str()))\n@@ -633,7 +636,7 @@ Value submitblock(const Array& params, bool fHelp)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, NULL, &block);\n+    bool fAccepted = ProcessNewBlock(state, consensusParams, NULL, &block);\n     UnregisterValidationInterface(&sc);\n     if (mi != mapBlockIndex.end())\n     {"
      },
      {
        "sha": "c7272011c8665ee7173cc9932ea63a28e1e7fa9e",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
        "patch": "@@ -53,6 +53,7 @@ struct {\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    const Consensus::Params& params = Params(CBaseChainParams::MAIN).GetConsensus();\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n     CMutableTransaction tx,tx2;\n@@ -63,7 +64,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     Checkpoints::fEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -84,14 +85,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, NULL, pblock));\n+        BOOST_CHECK(ProcessNewBlock(state, params, NULL, pblock));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n     delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n@@ -109,7 +110,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -129,14 +130,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -154,7 +155,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -165,7 +166,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -183,7 +184,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -197,17 +198,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n     chainActive.Tip()->nHeight = 209999;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = 210000;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = nHeight;\n \n@@ -239,7 +240,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n \n     // Neither tx should have make it into the template.\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n@@ -252,7 +253,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n     BOOST_CHECK(IsFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n "
      }
    ]
  },
  {
    "sha": "39fd953ca5c452860b4955f9448d7cf3f8ae888b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWZkOTUzY2E1YzQ1Mjg2MGI0OTU1Zjk0NDhkN2NmM2Y4YWU4ODhi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-08T21:44:09Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:37Z"
      },
      "message": "Consensus: Refactor: Consensus version of CheckBlockHeader()",
      "tree": {
        "sha": "babbcba5a50dab1d9ec7d0a1f054885ac9171950",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/babbcba5a50dab1d9ec7d0a1f054885ac9171950"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39fd953ca5c452860b4955f9448d7cf3f8ae888b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39fd953ca5c452860b4955f9448d7cf3f8ae888b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39fd953ca5c452860b4955f9448d7cf3f8ae888b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39fd953ca5c452860b4955f9448d7cf3f8ae888b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42a3f650bf9def3974a8ad07658ae78b3f0d3ef4"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 25,
      "deletions": 11
    },
    "files": [
      {
        "sha": "b5c1520d13c410bfb9e5082807cad93cc2f25a04",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39fd953ca5c452860b4955f9448d7cf3f8ae888b/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39fd953ca5c452860b4955f9448d7cf3f8ae888b/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=39fd953ca5c452860b4955f9448d7cf3f8ae888b",
        "patch": "@@ -6,6 +6,11 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include \"consensus/params.h\"\n+\n+class CBlockHeader;\n+class CValidationState;\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n@@ -15,4 +20,16 @@ static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n \n+/**\n+ * Consensus validations:\n+ * Check_ means checking everything possible with the data provided.\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n+namespace Consensus {\n+\n+/** Context-independent validity checks */\n+bool CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true);\n+\n+} // namespace Consensus\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "4700b0eeba4954e175a742ee8224a4e4fc6d3a48",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39fd953ca5c452860b4955f9448d7cf3f8ae888b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39fd953ca5c452860b4955f9448d7cf3f8ae888b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=39fd953ca5c452860b4955f9448d7cf3f8ae888b",
        "patch": "@@ -2482,17 +2482,15 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW)\n+bool Consensus::CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, params))\n-        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n-                         REJECT_INVALID, \"high-hash\");\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n-    if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n-                             REJECT_INVALID, \"time-too-new\");\n+    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-new\");\n \n     return true;\n }\n@@ -2503,8 +2501,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, params, fCheckPOW))\n-        return false;\n+    if (!Consensus::CheckBlockHeader(block, GetAdjustedTime(), state, params, fCheckPOW))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n@@ -2645,8 +2643,8 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const\n         return true;\n     }\n \n-    if (!CheckBlockHeader(block, state, params))\n-        return false;\n+    if (!Consensus::CheckBlockHeader(block, GetAdjustedTime(), state, params))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;"
      },
      {
        "sha": "6ef7a14c54b2e5294e3d0427af2910e764c2b44e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39fd953ca5c452860b4955f9448d7cf3f8ae888b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39fd953ca5c452860b4955f9448d7cf3f8ae888b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=39fd953ca5c452860b4955f9448d7cf3f8ae888b",
        "patch": "@@ -331,7 +331,6 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */"
      }
    ]
  },
  {
    "sha": "18a0234e084622a8efb741c0001510744837011b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGEwMjM0ZTA4NDYyMmE4ZWZiNzQxYzAwMDE1MTA3NDQ4MzcwMTFi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-30T11:48:04Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:37Z"
      },
      "message": "Consensus: Separate CheckIndexAgainstCheckpoint() from ContextualCheckBlockHeader",
      "tree": {
        "sha": "156da072bb42dae383ed1a916d4b089f497ff14a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/156da072bb42dae383ed1a916d4b089f497ff14a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18a0234e084622a8efb741c0001510744837011b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18a0234e084622a8efb741c0001510744837011b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18a0234e084622a8efb741c0001510744837011b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18a0234e084622a8efb741c0001510744837011b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39fd953ca5c452860b4955f9448d7cf3f8ae888b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39fd953ca5c452860b4955f9448d7cf3f8ae888b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39fd953ca5c452860b4955f9448d7cf3f8ae888b"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 21,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e7a9555a1b5dff5cc9341d5a3d7eca948ea0eae4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 16,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18a0234e084622a8efb741c0001510744837011b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18a0234e084622a8efb741c0001510744837011b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=18a0234e084622a8efb741c0001510744837011b",
        "patch": "@@ -2555,16 +2555,27 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, CBlockIndex * const pindexPrev)\n+static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidationState& state, const uint256& hashGenesisBlock, BlockMap& mapBlockIndex)\n {\n-    uint256 hash = block.GetHash();\n-    if (hash == params.hashGenesisBlock)\n-        return true;\n-\n     assert(pindexPrev);\n+    if (*pindexPrev->phashBlock == hashGenesisBlock)\n+        return true;\n \n     int nHeight = pindexPrev->nHeight+1;\n+    // Check that the block chain matches the known block chain up to a checkpoint\n+    if (!Checkpoints::CheckBlock(nHeight, *pindexPrev->phashBlock))\n+        return state.DoS(100, false, REJECT_CHECKPOINT, strprintf(\"checkpoint mismatch (height %d)\", nHeight));\n \n+    // Don't accept any forks from the main chain prior to last checkpoint\n+    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n+        return state.DoS(100, false, REJECT_INVALID, strprintf(\"forked-chain-older-checkpoint (height %d)\", nHeight));\n+\n+    return true;\n+}\n+\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, CBlockIndex * const pindexPrev)\n+{\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, params))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n@@ -2575,16 +2586,6 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n-    // Check that the block chain matches the known block chain up to a checkpoint\n-    if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n-                         REJECT_CHECKPOINT, \"checkpoint mismatch\");\n-\n-    // Don't accept any forks from the main chain prior to last checkpoint\n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n-    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n-\n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n     if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, params.nMajorityRejectBlockOutdated, params.nMajorityWindow))\n     {\n@@ -2656,6 +2657,8 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n+    if (!CheckIndexAgainstCheckpoint(pindexPrev, state, params.hashGenesisBlock, mapBlockIndex))\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n \n     if (!ContextualCheckBlockHeader(block, state, params, pindexPrev))\n         return false;\n@@ -2714,7 +2717,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, const Consensus::Params\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n {\n     unsigned int nFound = 0;\n     for (unsigned int i = 0; i < nToCheck && nFound < nRequired && pstart != NULL; i++)\n@@ -2761,6 +2764,8 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     AssertLockHeld(cs_main);\n     assert(pindexPrev == chainActive.Tip());\n     const Consensus::Params& params = Params().GetConsensus();\n+    if (!CheckIndexAgainstCheckpoint(pindexPrev, state, params.hashGenesisBlock, mapBlockIndex))\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n \n     CCoinsViewCache viewNew(pcoinsTip);\n     CBlockIndex indexDummy(block);"
      }
    ]
  },
  {
    "sha": "73fd4854ff37eb52ac58058dfd64cb8785d96dc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2ZkNDg1NGZmMzdlYjUyYWM1ODA1OGRmZDY0Y2I4Nzg1ZDk2ZGMz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-11T07:37:22Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:37Z"
      },
      "message": "Consensus: Refactor: Consensus version of ContextualCheckBlockHeader()",
      "tree": {
        "sha": "d8e55f0d799a3d94172a38579c45d256e3749ece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8e55f0d799a3d94172a38579c45d256e3749ece"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73fd4854ff37eb52ac58058dfd64cb8785d96dc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fd4854ff37eb52ac58058dfd64cb8785d96dc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73fd4854ff37eb52ac58058dfd64cb8785d96dc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fd4854ff37eb52ac58058dfd64cb8785d96dc3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18a0234e084622a8efb741c0001510744837011b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18a0234e084622a8efb741c0001510744837011b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18a0234e084622a8efb741c0001510744837011b"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 15,
      "deletions": 23
    },
    "files": [
      {
        "sha": "527272170ff7c87b4583e755d94a721e54993690",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73fd4854ff37eb52ac58058dfd64cb8785d96dc3/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73fd4854ff37eb52ac58058dfd64cb8785d96dc3/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=73fd4854ff37eb52ac58058dfd64cb8785d96dc3",
        "patch": "@@ -9,6 +9,7 @@\n #include \"consensus/params.h\"\n \n class CBlockHeader;\n+class CBlockIndex;\n class CValidationState;\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n@@ -30,6 +31,9 @@ namespace Consensus {\n /** Context-independent validity checks */\n bool CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true);\n \n+/** Context-dependent validity checks */\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n } // namespace Consensus\n \n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "3f95fd52f2ade22d06ea6ef6efe1d5b262453c11",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 22,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73fd4854ff37eb52ac58058dfd64cb8785d96dc3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73fd4854ff37eb52ac58058dfd64cb8785d96dc3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=73fd4854ff37eb52ac58058dfd64cb8785d96dc3",
        "patch": "@@ -2574,31 +2574,20 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, CBlockIndex * const pindexPrev)\n+bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, params))\n-        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n-                         REJECT_INVALID, \"bad-diffbits\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n-                             REJECT_INVALID, \"time-too-old\");\n-\n-    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, params.nMajorityRejectBlockOutdated, params.nMajorityWindow))\n-    {\n-        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n-    }\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n \n-    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, params.nMajorityRejectBlockOutdated, params.nMajorityWindow))\n-    {\n-        return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n-    }\n+    // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded, last version=3:\n+    for (unsigned int i = 2; i <= 3; i++)\n+        if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, params.nMajorityRejectBlockOutdated, params.nMajorityWindow))\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n \n     return true;\n }\n@@ -2660,8 +2649,8 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const\n     if (!CheckIndexAgainstCheckpoint(pindexPrev, state, params.hashGenesisBlock, mapBlockIndex))\n         return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n \n-    if (!ContextualCheckBlockHeader(block, state, params, pindexPrev))\n-        return false;\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, pindexPrev, params))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n \n     if (pindex == NULL)\n         pindex = AddToBlockIndex(block);\n@@ -2773,8 +2762,8 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, params, pindexPrev))\n-        return false;\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, pindexPrev, params))\n+        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n     if (!CheckBlock(block, state, params, fCheckPOW, fCheckMerkleRoot))\n         return false;\n     if (!ContextualCheckBlock(block, state, params, pindexPrev))"
      },
      {
        "sha": "edfbe18d075d8ff20a2d50d41ce47cc9d33a08a6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73fd4854ff37eb52ac58058dfd64cb8785d96dc3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73fd4854ff37eb52ac58058dfd64cb8785d96dc3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=73fd4854ff37eb52ac58058dfd64cb8785d96dc3",
        "patch": "@@ -334,7 +334,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, CBlockIndex *pindexPrev);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex *pindexPrev);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */"
      }
    ]
  },
  {
    "sha": "a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmI5ZGFjOTg3NzMxZTYzZTE2ZDdlMDJlZWRiYzQ2MmZjZGY0NmZm",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-23T10:39:46Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:38Z"
      },
      "message": "Policy: Create policy.o with some constants and globals",
      "tree": {
        "sha": "8f0b7e54ed91b20bbedb69f144bd99cd1bbacf89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f0b7e54ed91b20bbedb69f144bd99cd1bbacf89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73fd4854ff37eb52ac58058dfd64cb8785d96dc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73fd4854ff37eb52ac58058dfd64cb8785d96dc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73fd4854ff37eb52ac58058dfd64cb8785d96dc3"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 87,
      "deletions": 47
    },
    "files": [
      {
        "sha": "b84a6e45b014e6f8e059b6060e67f4c4b15f07d6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -107,6 +107,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   net.h \\\n   noui.h \\\n+  policy/policy.h \\\n   pow.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n@@ -183,6 +184,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n+  policy/policy.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\"
      },
      {
        "sha": "f5e3efa31015196e09280e5e6a753fac409308bb",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -8,6 +8,7 @@\n #include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"keystore.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "23b5d0b35957bc1b2382d2280048c460d2d6af3d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -18,6 +18,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n #include \"txdb.h\""
      },
      {
        "sha": "ee22e80e95fc6c19b25352550f65ee5feb694342",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -11,10 +11,12 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n@@ -53,13 +55,9 @@ int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n bool fTxIndex = false;\n-bool fIsBareMultisigStd = true;\n bool fCheckBlockIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n-/** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-CFeeRate minRelayTxFee = CFeeRate(1000);\n-\n CTxMemPool mempool(::minRelayTxFee);\n \n struct COrphanTx {"
      },
      {
        "sha": "7abfaddf08aaa8f18de206eea554a33295726893",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -14,7 +14,6 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n-#include \"consensus/consensus.h\"\n #include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n@@ -47,17 +46,6 @@ class CValidationState;\n \n struct CNodeStateStats;\n \n-/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n-static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n-/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n-static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n-/** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** Maximum number of signature check operations in an IsStandard() P2SH script */\n-static const unsigned int MAX_P2SH_SIGOPS = 15;\n-/** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n@@ -106,10 +94,8 @@ extern bool fImporting;\n extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n-extern bool fIsBareMultisigStd;\n extern bool fCheckBlockIndex;\n extern unsigned int nCoinCacheSize;\n-extern CFeeRate minRelayTxFee;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;"
      },
      {
        "sha": "72253248a515343a556b6b4797e984afefdbcd0f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -11,6 +11,7 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\""
      },
      {
        "sha": "62015c4cfcb00ef60e29cc10d1065c4d19f71b1a",
        "filename": "src/policy/policy.cpp",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"amount.h\"\n+\n+bool fIsBareMultisigStd = true;\n+/** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n+CFeeRate minRelayTxFee = CFeeRate(1000);"
      },
      {
        "sha": "7be8e72ea8e092c25e7ff8d49e84fafc3c37a72e",
        "filename": "src/policy/policy.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_H\n+#define BITCOIN_POLICY_H\n+\n+#include \"consensus/consensus.h\"\n+#include \"script/interpreter.h\"\n+\n+class CFeeRate;\n+\n+/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n+static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n+/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n+static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n+/** The maximum size for transactions we're willing to relay/mine */\n+static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n+/** Maximum number of signature check operations in an IsStandard() P2SH script */\n+static const unsigned int MAX_P2SH_SIGOPS = 15;\n+/** The maximum number of sigops we're willing to relay/mine in a single tx */\n+static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+/**\n+ * Mandatory script verification flags that all new blocks must comply with for\n+ * them to be valid. (but old blocks may not comply with) Currently just P2SH,\n+ * but in the future other flags may be added, such as a soft-fork to enforce\n+ * strict DER encoding.\n+ * \n+ * Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n+ * details.\n+ */\n+static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n+/**\n+ * Standard script verification flags that standard transactions will comply\n+ * with. However scripts violating these flags may still be present in valid\n+ * blocks and we must accept those blocks.\n+ */\n+static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_DERSIG |\n+                                                         SCRIPT_VERIFY_STRICTENC |\n+                                                         SCRIPT_VERIFY_MINIMALDATA |\n+                                                         SCRIPT_VERIFY_NULLDUMMY |\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                                         SCRIPT_VERIFY_CLEANSTACK;\n+/** For convenience, standard but not mandatory verify flags. */\n+static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n+\n+/** GLOBALS: These variables are supposed to become CStandardPolicy attributes */\n+\n+extern bool fIsBareMultisigStd;\n+extern CFeeRate minRelayTxFee;\n+\n+#endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "33d766cd8eb0370b547abfa97a3670365ec8709c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -15,6 +15,7 @@\n \n #include \"coincontrol.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'"
      },
      {
        "sha": "3dd1cf712b6c026e072de86e542eed2b9b33071e",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -9,9 +9,10 @@\n #include \"qvalidatedlineedit.h\"\n #include \"walletmodel.h\"\n \n-#include \"primitives/transaction.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n #include \"protocol.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "21afdbeabe277032cff56538c69c1bb98d18f35f",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -11,6 +11,7 @@\n #include \"base58.h\"\n #include \"chainparams.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "2cc74e267f839ed520b6a4fb9e3bbf4c47e76ef9",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -9,6 +9,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"timedata.h\"\n #include \"util.h\""
      },
      {
        "sha": "d25f90ad78607ca9a4f87cf1545f202e7359795d",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -8,6 +8,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"policy/policy.h\"\n #include \"protocol.h\"\n #include \"sync.h\"\n #include \"timedata.h\""
      },
      {
        "sha": "f0a5269995ce882de31122a4c04dd8c6c265b362",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -10,6 +10,7 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "3217285221af3e5ae480df704aafe2b0029856a8",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -5,9 +5,10 @@\n \n #include \"script/sign.h\"\n \n-#include \"primitives/transaction.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "c3e21f16d19f394722688728f0bf7ebaa15d42a5",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -28,33 +28,6 @@ class CScriptID : public uint160\n static const unsigned int MAX_OP_RETURN_RELAY = 80;      //! bytes\n extern unsigned nMaxDatacarrierBytes;\n \n-/**\n- * Mandatory script verification flags that all new blocks must comply with for\n- * them to be valid. (but old blocks may not comply with) Currently just P2SH,\n- * but in the future other flags may be added, such as a soft-fork to enforce\n- * strict DER encoding.\n- * \n- * Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n- * details.\n- */\n-static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n-\n-/**\n- * Standard script verification flags that standard transactions will comply\n- * with. However scripts violating these flags may still be present in valid\n- * blocks and we must accept those blocks.\n- */\n-static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n-                                                         SCRIPT_VERIFY_DERSIG |\n-                                                         SCRIPT_VERIFY_STRICTENC |\n-                                                         SCRIPT_VERIFY_MINIMALDATA |\n-                                                         SCRIPT_VERIFY_NULLDUMMY |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n-                                                         SCRIPT_VERIFY_CLEANSTACK;\n-\n-/** For convenience, standard but not mandatory verify flags. */\n-static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n-\n enum txnouttype\n {\n     TX_NONSTANDARD,"
      },
      {
        "sha": "16c9a4a868e9af296279afaa1625f596af5072f4",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "2a4f47c2e6c8139a49ebb0a30e87169b7817169c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b9dac987731e63e16d7e02eedbc462fcdf46ff/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\""
      }
    ]
  },
  {
    "sha": "ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTRkMWE2MjFhNzI2OTRkZTdiYzRhOTNkNTlhNmIyYjg4ZGI2YTkw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-31T22:45:27Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:51Z"
      },
      "message": "Consensus: MOVEONLY: Move CheckBlockHeader, IsSuperMajority and ContextualCheckBlockHeader() to consensus.o",
      "tree": {
        "sha": "b57c8257ca7153dfe039b09b81c0e9eaf9b910f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b57c8257ca7153dfe039b09b81c0e9eaf9b910f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b9dac987731e63e16d7e02eedbc462fcdf46ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6b9dac987731e63e16d7e02eedbc462fcdf46ff"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 63,
      "deletions": 53
    },
    "files": [
      {
        "sha": "7e48f8799e003f28058a49aab6971377a1427eae",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
        "patch": "@@ -242,14 +242,13 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n-  arith_uint256.cpp \\\n   amount.cpp \\\n+  arith_uint256.cpp \\\n   base58.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\\n-  primitives/block.cpp \\\n-  primitives/transaction.cpp \\\n+  consensus/consensus.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n   eccryptoverify.cpp \\\n@@ -258,13 +257,15 @@ libbitcoin_common_a_SOURCES = \\\n   key.cpp \\\n   keystore.cpp \\\n   netbase.cpp \\\n+  primitives/block.cpp \\\n+  primitives/transaction.cpp \\\n   protocol.cpp \\\n   pubkey.cpp \\\n   script/interpreter.cpp \\\n   script/script.cpp \\\n+  script/script_error.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n-  script/script_error.cpp \\\n   $(BITCOIN_CORE_H)\n \n # util: shared between all executables."
      },
      {
        "sha": "46df011778f7a8acab112753615b9f6a271a1a12",
        "filename": "src/consensus/consensus.cpp",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
        "patch": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/consensus.h\"\n+\n+#include \"chain.h\"\n+#include \"consensus/validation.h\"\n+\n+bool Consensus::CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW)\n+{\n+    // Check proof of work matches claimed amount\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, params))\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\");\n+\n+    // Check timestamp\n+    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-new\");\n+\n+    return true;\n+}\n+\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n+{\n+    unsigned int nFound = 0;\n+    for (unsigned int i = 0; i < nToCheck && nFound < nRequired && pstart != NULL; i++)\n+    {\n+        if (pstart->nVersion >= minVersion)\n+            ++nFound;\n+        pstart = pstart->pprev;\n+    }\n+    return (nFound >= nRequired);\n+}\n+\n+bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    // Check proof of work\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, params))\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n+\n+    // Check timestamp against prev\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n+\n+    // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded, last version=3:\n+    for (unsigned int i = 2; i <= 3; i++)\n+        if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, params.nMajorityRejectBlockOutdated, params.nMajorityWindow))\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n+\n+    return true;\n+}"
      },
      {
        "sha": "b2bff64edd5bd8f497396c60ef9f05732179964d",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
        "patch": "@@ -36,4 +36,10 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n \n } // namespace Consensus\n \n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last nToCheck blocks, starting at pstart and going backwards.\n+ */\n+bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck);\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "82badaa810018c1672bba90320865698abac08c7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 49,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
        "patch": "@@ -68,11 +68,6 @@ map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n void EraseOrphansFor(NodeId peer);\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last nToCheck blocks, starting at pstart and going backwards.\n- */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck);\n static void CheckBlockIndex();\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -2480,19 +2475,6 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool Consensus::CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW)\n-{\n-    // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, params))\n-        return state.DoS(50, false, REJECT_INVALID, \"high-hash\");\n-\n-    // Check timestamp\n-    if (block.GetBlockTime() > nTime + 2 * 60 * 60)\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-new\");\n-\n-    return true;\n-}\n-\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context.\n@@ -2572,24 +2554,6 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, params))\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\");\n-\n-    // Check timestamp against prev\n-    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(false, REJECT_INVALID, \"time-too-old\");\n-\n-    // Reject block.nVersion=n blocks when 95% (75% on testnet) of the network has upgraded, last version=3:\n-    for (unsigned int i = 2; i <= 3; i++)\n-        if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, params.nMajorityRejectBlockOutdated, params.nMajorityWindow))\n-            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version nVersion=%d\", i-1));\n-\n-    return true;\n-}\n-\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex * const pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n@@ -2704,19 +2668,6 @@ bool AcceptBlock(CBlock& block, CValidationState& state, const Consensus::Params\n     return true;\n }\n \n-bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n-{\n-    unsigned int nFound = 0;\n-    for (unsigned int i = 0; i < nToCheck && nFound < nRequired && pstart != NULL; i++)\n-    {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n-    }\n-    return (nFound >= nRequired);\n-}\n-\n-\n bool ProcessNewBlock(CValidationState &state, const Consensus::Params& params, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n     // Preliminary checks"
      }
    ]
  },
  {
    "sha": "cac7f8846288d696e2900e0dfdc934208a92b10e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWM3Zjg4NDYyODhkNjk2ZTI5MDBlMGRmZGM5MzQyMDhhOTJiMTBl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-15T07:48:09Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:52Z"
      },
      "message": "Consensus: MOVEONLY: move pow.o to consensus dir",
      "tree": {
        "sha": "6888a1fc67a3769d0dbc94dcf485e519a7a09da9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6888a1fc67a3769d0dbc94dcf485e519a7a09da9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cac7f8846288d696e2900e0dfdc934208a92b10e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cac7f8846288d696e2900e0dfdc934208a92b10e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cac7f8846288d696e2900e0dfdc934208a92b10e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cac7f8846288d696e2900e0dfdc934208a92b10e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce4d1a621a72694de7bc4a93d59a6b2b88db6a90"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "b30e44de18934efea365de32360427f6803726c0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "patch": "@@ -89,6 +89,7 @@ BITCOIN_CORE_H = \\\n   compressor.h \\\n   consensus/consensus.h \\\n   consensus/params.h \\\n+  consensus/pow.h \\\n   consensus/validation.h \\\n   core_io.h \\\n   wallet/db.h \\\n@@ -108,7 +109,6 @@ BITCOIN_CORE_H = \\\n   net.h \\\n   noui.h \\\n   policy/policy.h \\\n-  pow.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n   protocol.h \\\n@@ -185,7 +185,6 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   noui.cpp \\\n   policy/policy.cpp \\\n-  pow.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\\n   rpcmining.cpp \\\n@@ -249,6 +248,7 @@ libbitcoin_common_a_SOURCES = \\\n   coins.cpp \\\n   compressor.cpp \\\n   consensus/consensus.cpp \\\n+  consensus/pow.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n   eccryptoverify.cpp \\"
      },
      {
        "sha": "b72f4f290dbb2da8a5782ebb9164698d7d8f4e04",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "patch": "@@ -7,8 +7,8 @@\n #define BITCOIN_CHAIN_H\n \n #include \"arith_uint256.h\"\n+#include \"consensus/pow.h\"\n #include \"primitives/block.h\"\n-#include \"pow.h\"\n #include \"tinyformat.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "976c5562ba03a4abfe92cf538145f97fecaa8f8f",
        "filename": "src/consensus/pow.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/consensus/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/consensus/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/pow.cpp?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"pow.h\"\n+#include \"consensus/pow.h\"\n \n #include \"arith_uint256.h\"\n #include \"chain.h\"",
        "previous_filename": "src/pow.cpp"
      },
      {
        "sha": "a5d32db178e079ab0a6f2e11e6c7f11ac9a4f729",
        "filename": "src/consensus/pow.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/consensus/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/consensus/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/pow.h?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "previous_filename": "src/pow.h"
      },
      {
        "sha": "053275a20edc770f733e264e2b8149eb9ad3d5f7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "patch": "@@ -12,12 +12,12 @@\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/pow.h\"\n #include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n-#include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "af587132e12cf1802ca437e1073f5d475817aed2",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "patch": "@@ -7,12 +7,12 @@\n \n #include \"amount.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/pow.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n-#include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\"\n #include \"util.h\""
      },
      {
        "sha": "92d99702b255a5a916ec02a85b78a3c63a391887",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "patch": "@@ -6,13 +6,13 @@\n #include \"amount.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/pow.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"rpcserver.h\"\n #include \"util.h\"\n #include \"validationinterface.h\""
      },
      {
        "sha": "6d2e489b6cd05a05f719d072e4d629e0ec762d37",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "patch": "@@ -8,10 +8,10 @@\n \n \n \n+#include \"consensus/pow.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"script/sign.h\"\n #include \"serialize.h\"\n #include \"util.h\""
      },
      {
        "sha": "cf36da81084a0b2aa4e73fde3bd3831a24bc165e",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/pow.h\"\n #include \"main.h\"\n-#include \"pow.h\"\n-#include \"util.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"util.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "30a6a0698316f29a8163a919d591a3939042fc80",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac7f8846288d696e2900e0dfdc934208a92b10e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac7f8846288d696e2900e0dfdc934208a92b10e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=cac7f8846288d696e2900e0dfdc934208a92b10e",
        "patch": "@@ -6,9 +6,9 @@\n #include \"txdb.h\"\n \n #include \"chainparams.h\"\n+#include \"consensus/pow.h\"\n #include \"hash.h\"\n #include \"main.h\"\n-#include \"pow.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>"
      }
    ]
  },
  {
    "sha": "14f1c4c9a1119491e6ae8ca08263dca75632d2e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGYxYzRjOWExMTE5NDkxZTZhZThjYTA4MjYzZGNhNzU2MzJkMmU4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-28T12:53:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:52Z"
      },
      "message": "Consensus: Introduce Consensus::VerifyBlockHeader()",
      "tree": {
        "sha": "6ac18e5bcc8877e874bd5fd1757f5fbb2cfa202d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ac18e5bcc8877e874bd5fd1757f5fbb2cfa202d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14f1c4c9a1119491e6ae8ca08263dca75632d2e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f1c4c9a1119491e6ae8ca08263dca75632d2e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14f1c4c9a1119491e6ae8ca08263dca75632d2e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f1c4c9a1119491e6ae8ca08263dca75632d2e8/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cac7f8846288d696e2900e0dfdc934208a92b10e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cac7f8846288d696e2900e0dfdc934208a92b10e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cac7f8846288d696e2900e0dfdc934208a92b10e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7cfe7bd81522b802702704f59c3b03de3b27b2c6",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f1c4c9a1119491e6ae8ca08263dca75632d2e8/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f1c4c9a1119491e6ae8ca08263dca75632d2e8/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=14f1c4c9a1119491e6ae8ca08263dca75632d2e8",
        "patch": "@@ -50,3 +50,12 @@ bool Consensus::ContextualCheckBlockHeader(const CBlockHeader& block, CValidatio\n \n     return true;\n }\n+\n+bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev)\n+{\n+    if (!Consensus::CheckBlockHeader(block, nTime, state, params, true))\n+        return false;\n+    if (!Consensus::ContextualCheckBlockHeader(block, state, pindexPrev, params))\n+        return false;\n+    return true;\n+}"
      },
      {
        "sha": "cb88cd897b1ac2e62642a0bf70781af5699c2ae5",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f1c4c9a1119491e6ae8ca08263dca75632d2e8/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f1c4c9a1119491e6ae8ca08263dca75632d2e8/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=14f1c4c9a1119491e6ae8ca08263dca75632d2e8",
        "patch": "@@ -28,6 +28,9 @@ static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20\n  */\n namespace Consensus {\n \n+/** Full verification functions */\n+bool VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev);\n+\n /** Context-independent validity checks */\n bool CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true);\n "
      }
    ]
  },
  {
    "sha": "5862fb1c7ccdc6441383ae782f82e067a16deb11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODYyZmIxYzdjY2RjNjQ0MTM4M2FlNzgyZjgyZTA2N2ExNmRlYjEx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-15T18:48:47Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:52Z"
      },
      "message": "Consensus: Refactor: CheckTransaction() -> Consensus::CheckTx()\n\nDecouple it from util.h [bool error(char*)] and BOOST_FOREACH",
      "tree": {
        "sha": "f5e10e89255905adb52b44a8e4a9abe38e29e7bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5e10e89255905adb52b44a8e4a9abe38e29e7bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5862fb1c7ccdc6441383ae782f82e067a16deb11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5862fb1c7ccdc6441383ae782f82e067a16deb11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5862fb1c7ccdc6441383ae782f82e067a16deb11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5862fb1c7ccdc6441383ae782f82e067a16deb11/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14f1c4c9a1119491e6ae8ca08263dca75632d2e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f1c4c9a1119491e6ae8ca08263dca75632d2e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14f1c4c9a1119491e6ae8ca08263dca75632d2e8"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 42,
      "deletions": 50
    },
    "files": [
      {
        "sha": "6f24472a3e150dd923c3f146663250b6ac6da72a",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "patch": "@@ -10,6 +10,7 @@\n \n class CBlockHeader;\n class CBlockIndex;\n+class CTransaction;\n class CValidationState;\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n@@ -32,6 +33,7 @@ namespace Consensus {\n bool VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev);\n \n /** Context-independent validity checks */\n+bool CheckTx(const CTransaction& tx, CValidationState &state);\n bool CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true);\n \n /** Context-dependent validity checks */"
      },
      {
        "sha": "14eee172982b6922d3ecfa632ea596a5f1b7d53a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 37,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "patch": "@@ -759,60 +759,48 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n \n \n \n-bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n+bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n-                         REJECT_INVALID, \"bad-txns-vin-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n-                         REJECT_INVALID, \"bad-txns-vout-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-txns-oversize\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n-                             REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n-                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += txout.nValue;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        if (tx.vout[i].nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (tx.vout[i].nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += tx.vout[i].nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n-                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n     // Check for duplicate inputs\n-    set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n-                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(txin.prevout);\n+    std::set<COutPoint> vInOutPoints;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        if (vInOutPoints.count(tx.vin[i].prevout))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        vInOutPoints.insert(tx.vin[i].prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n-                             REJECT_INVALID, \"bad-cb-length\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n-                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+            if (tx.vin[i].prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n-\n     return true;\n }\n \n@@ -853,14 +841,14 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n-    if (!CheckTransaction(tx, state))\n-        return error(\"AcceptToMemoryPool: CheckTransaction failed\");\n-\n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n         return state.DoS(100, error(\"AcceptToMemoryPool: coinbase as individual tx\"),\n                          REJECT_INVALID, \"coinbase\");\n \n+    if (!Consensus::CheckTx(tx, state))\n+        return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n+\n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n     if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n@@ -2520,8 +2508,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock(): CheckTransaction failed\");\n+        if (!Consensus::CheckTx(tx, state))\n+            return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)"
      },
      {
        "sha": "b9741d3a7661d69c8291555be536820ae975445c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "patch": "@@ -254,9 +254,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n-\n /** Check for standard transaction types\n  * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n  */"
      },
      {
        "sha": "d3330623b3196e368e8c4cea9c02901cbebb913f",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "patch": "@@ -23,7 +23,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000009085768617420697320ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n-[\"Tests for CheckTransaction()\"],\n+[\"Tests for Consensus::CheckTx()\"],\n [\"No inputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n \"0100000000010000000000000000015100000000\", \"P2SH\"],"
      },
      {
        "sha": "101f0fd942df76e25ddf0ff4eb8838fe041274af",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "patch": "@@ -64,7 +64,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x8febbed40483661de6958d957412f82deed8e2f7 EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100c66c9cdf4c43609586d15424c54707156e316d88b0a1534c9e6b0d4f311406310221009c0fe51dbc9c4ab7cc25d3fdbeccf6679fe6827f08edf2b4a9f16ee3eb0e438a0123210338e8034509af564c62644c07691942e0c056752008a173c89f60ab2a88ac2ebfacffffffff010000000000000000015100000000\", \"P2SH\"],\n \n-[\"Tests for CheckTransaction()\"],\n+[\"Tests for Consensus::CheckTx()\"],\n [\"MAX_MONEY output\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x32afac281462b822adbec5094b8d4d337dd5bd6a EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006e493046022100e1eadba00d9296c743cb6ecc703fd9ddc9b3cd12906176a226ae4c18d6b00796022100a71aef7d2874deff681ba6080f1b278bac7bb99c61b08a85f4311970ffe7f63f012321030c0588dc44d92bdcbf8e72093466766fdc265ead8db64517b0c542275b70fffbacffffffff010040075af0750700015100000000\", \"P2SH\"],"
      },
      {
        "sha": "944e835607f3ce348d3e1116ca96b8c2333a9aaa",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "patch": "@@ -2,15 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n-#include \"main.h\"\n #include \"random.h\"\n+#include \"hash.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"test/test_bitcoin.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <iostream>\n@@ -200,7 +202,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           stream >> tx;\n \n           CValidationState state;\n-          BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+          BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state), strTest);\n           BOOST_CHECK(state.IsValid());\n \n           std::vector<unsigned char> raw = ParseHex(raw_script);"
      },
      {
        "sha": "c8792beb86f2153a2d2b90443cd9afd9e205464f",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "patch": "@@ -7,6 +7,7 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n@@ -134,7 +135,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             stream >> tx;\n \n             CValidationState state;\n-            BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n+            BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state), strTest);\n             BOOST_CHECK(state.IsValid());\n \n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -210,7 +211,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             stream >> tx;\n \n             CValidationState state;\n-            fValid = CheckTransaction(tx, state) && state.IsValid();\n+            fValid = Consensus::CheckTx(tx, state) && state.IsValid();\n \n             for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n             {\n@@ -239,11 +240,11 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     CMutableTransaction tx;\n     stream >> tx;\n     CValidationState state;\n-    BOOST_CHECK_MESSAGE(CheckTransaction(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n+    BOOST_CHECK_MESSAGE(Consensus::CheckTx(tx, state) && state.IsValid(), \"Simple deserialized transaction should be valid.\");\n \n     // Check that duplicate txins fail\n     tx.vin.push_back(tx.vin[0]);\n-    BOOST_CHECK_MESSAGE(!CheckTransaction(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n+    BOOST_CHECK_MESSAGE(!Consensus::CheckTx(tx, state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n }\n \n //"
      },
      {
        "sha": "96011bc6983815dbc4332dfa5164298349b066c6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5862fb1c7ccdc6441383ae782f82e067a16deb11/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "patch": "@@ -6,8 +6,8 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n@@ -371,8 +371,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CWalletTx wtx;\n             ssValue >> wtx;\n             CValidationState state;\n-            if (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n+            if (!(Consensus::CheckTx(wtx, state) && (wtx.GetHash() == hash) && state.IsValid())) {\n+                strErr = strprintf(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n                 return false;\n+            }\n \n             // Undo serialize changes in 31600\n             if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)"
      }
    ]
  },
  {
    "sha": "ea9760918a5ee0c29b564afda4848ae892212687",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTk3NjA5MThhNWVlMGMyOWI1NjRhZmRhNDg0OGFlODkyMjEyNjg3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-09T01:50:33Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:52Z"
      },
      "message": "Consensus: MOVEONLY-ish: Move GetLegacySigOpCount() from main to consensus",
      "tree": {
        "sha": "851cb4591feed6033b7dc0b726dd8e8c11cb1747",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/851cb4591feed6033b7dc0b726dd8e8c11cb1747"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea9760918a5ee0c29b564afda4848ae892212687",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea9760918a5ee0c29b564afda4848ae892212687",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea9760918a5ee0c29b564afda4848ae892212687",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea9760918a5ee0c29b564afda4848ae892212687/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5862fb1c7ccdc6441383ae782f82e067a16deb11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5862fb1c7ccdc6441383ae782f82e067a16deb11"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "06d3ce566b8ac6df04e6ce5cbeae6a586646d4fa",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea9760918a5ee0c29b564afda4848ae892212687/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea9760918a5ee0c29b564afda4848ae892212687/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=ea9760918a5ee0c29b564afda4848ae892212687",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"chain.h\"\n #include \"consensus/validation.h\"\n+#include \"primitives/transaction.h\"\n \n bool Consensus::CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW)\n {\n@@ -59,3 +60,15 @@ bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& s\n         return false;\n     return true;\n }\n+\n+unsigned int Consensus::GetLegacySigOpCount(const CTransaction& tx)\n+{\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        nSigOps += tx.vin[i].scriptSig.GetSigOpCount(false);\n+\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+        nSigOps += tx.vout[i].scriptPubKey.GetSigOpCount(false);\n+\n+    return nSigOps;\n+}"
      },
      {
        "sha": "d28f87e5f743520aabf57bb0b2bec7d1ae9f3ae0",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea9760918a5ee0c29b564afda4848ae892212687/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea9760918a5ee0c29b564afda4848ae892212687/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=ea9760918a5ee0c29b564afda4848ae892212687",
        "patch": "@@ -39,6 +39,14 @@ bool CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState\n /** Context-dependent validity checks */\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n+/** Utility functions */\n+/**\n+ * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n+ * @return number of sigops this transaction's outputs will produce when spent\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetLegacySigOpCount(const CTransaction& tx);\n+\n } // namespace Consensus\n \n /**"
      },
      {
        "sha": "64d3c37822fc142c5891f5bffae5b56676cfc683",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 17,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea9760918a5ee0c29b564afda4848ae892212687/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea9760918a5ee0c29b564afda4848ae892212687/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ea9760918a5ee0c29b564afda4848ae892212687",
        "patch": "@@ -723,20 +723,6 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-unsigned int GetLegacySigOpCount(const CTransaction& tx)\n-{\n-    unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        nSigOps += txin.scriptSig.GetSigOpCount(false);\n-    }\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n-    }\n-    return nSigOps;\n-}\n-\n unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n {\n     if (tx.IsCoinBase())\n@@ -943,7 +929,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n+        unsigned int nSigOps = Consensus::GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n@@ -1748,7 +1734,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n         const CTransaction &tx = block.vtx[i];\n \n         nInputs += tx.vin.size();\n-        nSigOps += GetLegacySigOpCount(tx);\n+        nSigOps += Consensus::GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n@@ -2514,7 +2500,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n-        nSigOps += GetLegacySigOpCount(tx);\n+        nSigOps += Consensus::GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n         return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),"
      },
      {
        "sha": "256b9881623ba9c3fd36401326aae4310f05f61f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea9760918a5ee0c29b564afda4848ae892212687/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea9760918a5ee0c29b564afda4848ae892212687/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ea9760918a5ee0c29b564afda4848ae892212687",
        "patch": "@@ -226,13 +226,6 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n-/** \n- * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n- * @return number of sigops this transaction's outputs will produce when spent\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetLegacySigOpCount(const CTransaction& tx);\n-\n /**\n  * Count ECDSA signature operations in pay-to-script-hash inputs.\n  * "
      },
      {
        "sha": "5dccea147e448cd4cc0eb43114377e38839a8b5f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea9760918a5ee0c29b564afda4848ae892212687/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea9760918a5ee0c29b564afda4848ae892212687/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ea9760918a5ee0c29b564afda4848ae892212687",
        "patch": "@@ -243,7 +243,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n                 continue;\n \n             // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = GetLegacySigOpCount(tx);\n+            unsigned int nTxSigOps = Consensus::GetLegacySigOpCount(tx);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n@@ -331,7 +331,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n         UpdateTime(pblock, params, pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, params);\n         pblock->nNonce         = 0;\n-        pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n+        pblocktemplate->vTxSigOps[0] = Consensus::GetLegacySigOpCount(pblock->vtx[0]);\n \n         CValidationState state;\n         if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))"
      }
    ]
  },
  {
    "sha": "5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjRmZDBjZGY3MjBmZDhjYzQ4NTBjNzZiMDM3YWVhNjg1N2EwMzA5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-08T22:08:20Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:52Z"
      },
      "message": "Consensus: Refactor: Turn main::CheckBlock() into Consensus::CheckBlock()",
      "tree": {
        "sha": "072497cd541231dc61122ae6118c5de7744b4d6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/072497cd541231dc61122ae6118c5de7744b4d6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b4fd0cdf720fd8cc4850c76b037aea6857a0309/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea9760918a5ee0c29b564afda4848ae892212687",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea9760918a5ee0c29b564afda4848ae892212687",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea9760918a5ee0c29b564afda4848ae892212687"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 32,
      "deletions": 41
    },
    "files": [
      {
        "sha": "0b70984a9d2a59d93324550b021595ea5f043e28",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b4fd0cdf720fd8cc4850c76b037aea6857a0309/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b4fd0cdf720fd8cc4850c76b037aea6857a0309/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"consensus/params.h\"\n \n+class CBlock;\n class CBlockHeader;\n class CBlockIndex;\n class CTransaction;\n@@ -35,6 +36,7 @@ bool VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const\n /** Context-independent validity checks */\n bool CheckTx(const CTransaction& tx, CValidationState &state);\n bool CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true);\n+bool CheckBlock(const CBlock& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex* pindexPrev, const Consensus::Params& params);"
      },
      {
        "sha": "40f8d2e536c8f996d2732215eb8204e29fcadab7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 36,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b4fd0cdf720fd8cc4850c76b037aea6857a0309/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b4fd0cdf720fd8cc4850c76b037aea6857a0309/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
        "patch": "@@ -1665,8 +1665,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n {\n     AssertLockHeld(cs_main);\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, params, !fJustCheck, !fJustCheck))\n-        return false;\n+    if (!Consensus::CheckBlock(block, GetAdjustedTime(), state, params, !fJustCheck, !fJustCheck))\n+        return error(\"%s: Consensus::CheckBlock(): %s\", __func__, state.GetRejectReason().c_str());\n \n     // verify that the view's current state corresponds to the previous block\n     uint256 hashPrevBlock = pindex->pprev == NULL ? uint256() : pindex->pprev->GetBlockHash();\n@@ -2449,29 +2449,25 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool Consensus::CheckBlock(const CBlock& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n-    // These are checks that are independent of context.\n-\n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!Consensus::CheckBlockHeader(block, GetAdjustedTime(), state, params, fCheckPOW))\n-        return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n+    if (!Consensus::CheckBlockHeader(block, nTime, state, params, fCheckPOW))\n+        return false;\n \n     // Check the merkle root.\n     if (fCheckMerkleRoot) {\n         bool mutated;\n         uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n-                             REJECT_INVALID, \"bad-txnmrklroot\", true);\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true);\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n         if (mutated)\n-            return state.DoS(100, error(\"CheckBlock(): duplicate transaction\"),\n-                             REJECT_INVALID, \"bad-txns-duplicate\", true);\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true);\n     }\n \n     // All potential-corruption validation must be done before we do any\n@@ -2480,31 +2476,25 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-blk-length\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, error(\"CheckBlock(): first tx is not coinbase\"),\n-                         REJECT_INVALID, \"bad-cb-missing\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, error(\"CheckBlock(): more than one coinbase\"),\n-                             REJECT_INVALID, \"bad-cb-multiple\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\");\n \n     // Check transactions\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!Consensus::CheckTx(tx, state))\n-            return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        if (!Consensus::CheckTx(block.vtx[i], state))\n+            return false;\n \n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-    {\n-        nSigOps += Consensus::GetLegacySigOpCount(tx);\n-    }\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        nSigOps += Consensus::GetLegacySigOpCount(block.vtx[i]);\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n-                         REJECT_INVALID, \"bad-blk-sigops\", true);\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     return true;\n }\n@@ -2612,12 +2602,12 @@ bool AcceptBlock(CBlock& block, CValidationState& state, const Consensus::Params\n         return true;\n     }\n \n-    if ((!CheckBlock(block, state, params)) || !ContextualCheckBlock(block, state, params, pindex->pprev)) {\n+    if ((!Consensus::CheckBlock(block, GetAdjustedTime(), state, params)) || !ContextualCheckBlock(block, state, params, pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n         }\n-        return false;\n+        return error(\"%s: Consensus::CheckBlock || ContextualCheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n     }\n \n     int nHeight = pindex->nHeight;\n@@ -2645,14 +2635,13 @@ bool AcceptBlock(CBlock& block, CValidationState& state, const Consensus::Params\n bool ProcessNewBlock(CValidationState &state, const Consensus::Params& params, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n     // Preliminary checks\n-    bool checked = CheckBlock(*pblock, state, params);\n+    bool checked = Consensus::CheckBlock(*pblock, GetAdjustedTime(), state, params);\n \n     {\n         LOCK(cs_main);\n         MarkBlockAsReceived(pblock->GetHash());\n-        if (!checked) {\n-            return error(\"%s: CheckBlock FAILED\", __func__);\n-        }\n+        if (!checked)\n+            return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n@@ -2687,8 +2676,8 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!Consensus::ContextualCheckBlockHeader(block, state, pindexPrev, params))\n         return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n-    if (!CheckBlock(block, state, params, fCheckPOW, fCheckMerkleRoot))\n-        return false;\n+    if (!Consensus::CheckBlock(block, GetAdjustedTime(), state, params, fCheckPOW, fCheckMerkleRoot))\n+        return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n     if (!ContextualCheckBlock(block, state, params, pindexPrev))\n         return false;\n     if (!ConnectBlock(block, state, params, &indexDummy, viewNew, true))\n@@ -2907,8 +2896,8 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         if (!ReadBlockFromDisk(block, pindex))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state, params))\n-            return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+        if (nCheckLevel >= 1 && !Consensus::CheckBlock(block, GetAdjustedTime(), state, params))\n+            return error(\"VerifyDB(): *** found bad block at %d, reason=%s, hash=%s\\n\", pindex->nHeight, state.GetRejectReason().c_str(), pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;"
      },
      {
        "sha": "5c33f5bbfa388009925b3fb5f0be1169ad715224",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b4fd0cdf720fd8cc4850c76b037aea6857a0309/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b4fd0cdf720fd8cc4850c76b037aea6857a0309/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
        "patch": "@@ -306,9 +306,6 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n-/** Context-independent validity checks */\n-bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n-\n /** Context-dependent validity checks */\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex *pindexPrev);\n "
      },
      {
        "sha": "188e5cc8db7b5d25d9ecc36670f90ea9a4aa9f88",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b4fd0cdf720fd8cc4850c76b037aea6857a0309/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b4fd0cdf720fd8cc4850c76b037aea6857a0309/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
        "patch": "@@ -2,10 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"primitives/block.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"timedata.h\"\n #include \"utiltime.h\"\n \n #include <cstdio>\n@@ -57,7 +60,7 @@ BOOST_AUTO_TEST_CASE(May15)\n \n         // After May 15'th, big blocks are OK:\n         forkingBlock.nTime = tMay15; // Invalidates PoW\n-        BOOST_CHECK(CheckBlock(forkingBlock, state, params, false, false));\n+        BOOST_CHECK(Consensus::CheckBlock(forkingBlock, GetAdjustedTime(), state, params, false, false));\n     }\n \n     SetMockTime(0);"
      }
    ]
  },
  {
    "sha": "f79543aa1800a12d4ad01d68dec8319f2a91303c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzk1NDNhYTE4MDBhMTJkNGFkMDFkNjhkZWM4MzE5ZjJhOTEzMDNj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T15:38:19Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:53Z"
      },
      "message": "Consensus: MOVEONLY: Move CheckTx and CheckBlock from main to consensus",
      "tree": {
        "sha": "ff86f83f558d112b0ebda70fd026fabc8765a85c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff86f83f558d112b0ebda70fd026fabc8765a85c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f79543aa1800a12d4ad01d68dec8319f2a91303c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f79543aa1800a12d4ad01d68dec8319f2a91303c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f79543aa1800a12d4ad01d68dec8319f2a91303c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f79543aa1800a12d4ad01d68dec8319f2a91303c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b4fd0cdf720fd8cc4850c76b037aea6857a0309",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b4fd0cdf720fd8cc4850c76b037aea6857a0309"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 98,
      "deletions": 102
    },
    "files": [
      {
        "sha": "6e3626985397ff643f2b82ed0ecc905861aebd4d",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f79543aa1800a12d4ad01d68dec8319f2a91303c/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f79543aa1800a12d4ad01d68dec8319f2a91303c/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=f79543aa1800a12d4ad01d68dec8319f2a91303c",
        "patch": "@@ -7,7 +7,55 @@\n \n #include \"chain.h\"\n #include \"consensus/validation.h\"\n+#include \"pow.h\"\n+#include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"version.h\"\n+\n+bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n+{\n+    // Basic checks that don't depend on any context\n+    if (tx.vin.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n+    if (tx.vout.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n+    // Size limits\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n+\n+    // Check for negative or overflow output values\n+    CAmount nValueOut = 0;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        if (tx.vout[i].nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (tx.vout[i].nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += tx.vout[i].nValue;\n+        if (!MoneyRange(nValueOut))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+    }\n+\n+    // Check for duplicate inputs\n+    std::set<COutPoint> vInOutPoints;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        if (vInOutPoints.count(tx.vin[i].prevout))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        vInOutPoints.insert(tx.vin[i].prevout);\n+    }\n+\n+    if (tx.IsCoinBase())\n+    {\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n+    }\n+    else\n+    {\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+            if (tx.vin[i].prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+    }\n+    return true;\n+}\n \n bool Consensus::CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW)\n {\n@@ -22,6 +70,56 @@ bool Consensus::CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CVali\n     return true;\n }\n \n+bool Consensus::CheckBlock(const CBlock& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW, bool fCheckMerkleRoot)\n+{\n+    // Check that the header is valid (particularly PoW).  This is mostly\n+    // redundant with the call in AcceptBlockHeader.\n+    if (!Consensus::CheckBlockHeader(block, nTime, state, params, fCheckPOW))\n+        return false;\n+\n+    // Check the merkle root.\n+    if (fCheckMerkleRoot) {\n+        bool mutated;\n+        uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n+        if (block.hashMerkleRoot != hashMerkleRoot2)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true);\n+\n+        // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+        // of transactions in a block without affecting the merkle root of a block,\n+        // while still invalidating it.\n+        if (mutated)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true);\n+    }\n+\n+    // All potential-corruption validation must be done before we do any\n+    // transaction validation, as otherwise we may mark the header as invalid\n+    // because we receive the wrong transactions for it.\n+\n+    // Size limits\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\");\n+\n+    // First transaction must be coinbase, the rest must not be\n+    if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\");\n+    for (unsigned int i = 1; i < block.vtx.size(); i++)\n+        if (block.vtx[i].IsCoinBase())\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\");\n+\n+    // Check transactions\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        if (!Consensus::CheckTx(block.vtx[i], state))\n+            return false;\n+\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+        nSigOps += Consensus::GetLegacySigOpCount(block.vtx[i]);\n+    if (nSigOps > MAX_BLOCK_SIGOPS)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", true);\n+\n+    return true;\n+}\n+\n bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n {\n     unsigned int nFound = 0;"
      },
      {
        "sha": "fdf18d312e4b368c98a2923691ab1647f9eb7902",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 102,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f79543aa1800a12d4ad01d68dec8319f2a91303c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f79543aa1800a12d4ad01d68dec8319f2a91303c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f79543aa1800a12d4ad01d68dec8319f2a91303c",
        "patch": "@@ -738,58 +738,6 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& in\n     return nSigOps;\n }\n \n-\n-\n-\n-\n-\n-\n-\n-bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n-{\n-    // Basic checks that don't depend on any context\n-    if (tx.vin.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n-    if (tx.vout.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n-\n-    // Check for negative or overflow output values\n-    CAmount nValueOut = 0;\n-    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-        if (tx.vout[i].nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (tx.vout[i].nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += tx.vout[i].nValue;\n-        if (!MoneyRange(nValueOut))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n-    }\n-\n-    // Check for duplicate inputs\n-    std::set<COutPoint> vInOutPoints;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-        if (vInOutPoints.count(tx.vin[i].prevout))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        vInOutPoints.insert(tx.vin[i].prevout);\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n-        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            if (tx.vin[i].prevout.IsNull())\n-                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n-    }\n-    return true;\n-}\n-\n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {\n@@ -2449,56 +2397,6 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool Consensus::CheckBlock(const CBlock& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW, bool fCheckMerkleRoot)\n-{\n-    // Check that the header is valid (particularly PoW).  This is mostly\n-    // redundant with the call in AcceptBlockHeader.\n-    if (!Consensus::CheckBlockHeader(block, nTime, state, params, fCheckPOW))\n-        return false;\n-\n-    // Check the merkle root.\n-    if (fCheckMerkleRoot) {\n-        bool mutated;\n-        uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n-        if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true);\n-\n-        // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n-        // of transactions in a block without affecting the merkle root of a block,\n-        // while still invalidating it.\n-        if (mutated)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true);\n-    }\n-\n-    // All potential-corruption validation must be done before we do any\n-    // transaction validation, as otherwise we may mark the header as invalid\n-    // because we receive the wrong transactions for it.\n-\n-    // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\");\n-\n-    // First transaction must be coinbase, the rest must not be\n-    if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\");\n-    for (unsigned int i = 1; i < block.vtx.size(); i++)\n-        if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\");\n-\n-    // Check transactions\n-    for (unsigned int i = 0; i < block.vtx.size(); i++)\n-        if (!Consensus::CheckTx(block.vtx[i], state))\n-            return false;\n-\n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < block.vtx.size(); i++)\n-        nSigOps += Consensus::GetLegacySigOpCount(block.vtx[i]);\n-    if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", true);\n-\n-    return true;\n-}\n-\n static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidationState& state, const uint256& hashGenesisBlock, BlockMap& mapBlockIndex)\n {\n     assert(pindexPrev);"
      }
    ]
  },
  {
    "sha": "23d448b244681dff163c7ceaa6d5af060fff9a37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2Q0NDhiMjQ0NjgxZGZmMTYzYzdjZWFhNmQ1YWYwNjBmZmY5YTM3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-24T17:44:10Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:53Z"
      },
      "message": "Includes: fix hidden dependencies",
      "tree": {
        "sha": "6b4aad8de83018831627ccc1e14acb9ee8c7bbca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b4aad8de83018831627ccc1e14acb9ee8c7bbca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23d448b244681dff163c7ceaa6d5af060fff9a37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23d448b244681dff163c7ceaa6d5af060fff9a37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23d448b244681dff163c7ceaa6d5af060fff9a37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23d448b244681dff163c7ceaa6d5af060fff9a37/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f79543aa1800a12d4ad01d68dec8319f2a91303c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f79543aa1800a12d4ad01d68dec8319f2a91303c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f79543aa1800a12d4ad01d68dec8319f2a91303c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4cb9694555cc60171735652671fff69f5804454e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23d448b244681dff163c7ceaa6d5af060fff9a37/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23d448b244681dff163c7ceaa6d5af060fff9a37/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=23d448b244681dff163c7ceaa6d5af060fff9a37",
        "patch": "@@ -6,6 +6,8 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/pow.h\"\n #include \"consensus/validation.h\""
      },
      {
        "sha": "3e081edef57dbfa54d2e9d508dfd0adb0e69178c",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23d448b244681dff163c7ceaa6d5af060fff9a37/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23d448b244681dff163c7ceaa6d5af060fff9a37/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=23d448b244681dff163c7ceaa6d5af060fff9a37",
        "patch": "@@ -5,6 +5,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n+#include \"hash.h\"\n #include \"random.h\"\n #include \"hash.h\"\n #include \"script/interpreter.h\""
      },
      {
        "sha": "aa7bb139c691060440814faf119a37f38f15d9e5",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23d448b244681dff163c7ceaa6d5af060fff9a37/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23d448b244681dff163c7ceaa6d5af060fff9a37/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=23d448b244681dff163c7ceaa6d5af060fff9a37",
        "patch": "@@ -15,6 +15,7 @@\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n+#include \"utilstrencodings.h\"\n \n #include <map>\n #include <string>"
      }
    ]
  },
  {
    "sha": "f0ee3f0b0c251788dac3055c8b93345a5f1dbd78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGVlM2YwYjBjMjUxNzg4ZGFjMzA1NWM4YjkzMzQ1YTVmMWRiZDc4",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-17T16:49:53Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:53Z"
      },
      "message": "Coins: Refactor: Separate CCoinsViewEfficient abstract class from CCoinsViewCache (make parent its class)",
      "tree": {
        "sha": "f05f0d1e75022223ad9290ddf5b429912bff5011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f05f0d1e75022223ad9290ddf5b429912bff5011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23d448b244681dff163c7ceaa6d5af060fff9a37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23d448b244681dff163c7ceaa6d5af060fff9a37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23d448b244681dff163c7ceaa6d5af060fff9a37"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 41,
      "deletions": 26
    },
    "files": [
      {
        "sha": "57c81a94f3066a6366ae1d45825aae1191f86eb0",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=f0ee3f0b0c251788dac3055c8b93345a5f1dbd78",
        "patch": "@@ -57,7 +57,9 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStat\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false) { }\n+CCoinsViewEfficient::CCoinsViewEfficient(CCoinsView* baseIn) : CCoinsViewBacked(baseIn) {}\n+\n+CCoinsViewCache::CCoinsViewCache(CCoinsView* baseIn) : CCoinsViewEfficient(baseIn), hasModifier(false) { }\n \n CCoinsViewCache::~CCoinsViewCache()\n {\n@@ -182,14 +184,14 @@ unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }\n \n-const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n+const CTxOut& CCoinsViewEfficient::GetOutputFor(const CTxIn& input) const\n {\n     const CCoins* coins = AccessCoins(input.prevout.hash);\n     assert(coins && coins->IsAvailable(input.prevout.n));\n     return coins->vout[input.prevout.n];\n }\n \n-CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n+CAmount CCoinsViewEfficient::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n@@ -201,7 +203,7 @@ CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n     return nResult;\n }\n \n-bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n+bool CCoinsViewEfficient::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n@@ -215,7 +217,7 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n+double CCoinsViewEfficient::GetPriority(const CTransaction &tx, int nHeight) const\n {\n     if (tx.IsCoinBase())\n         return 0.0;"
      },
      {
        "sha": "1330281862dce3640bd5082a83f6a82cf0e062bf",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 34,
        "deletions": 21,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=f0ee3f0b0c251788dac3055c8b93345a5f1dbd78",
        "patch": "@@ -344,6 +344,37 @@ class CCoinsViewBacked : public CCoinsView\n };\n \n \n+/** Abstract view with more efficient access and some dependent functions. */\n+class CCoinsViewEfficient : public CCoinsViewBacked\n+{\n+public:\n+    CCoinsViewEfficient(CCoinsView* viewIn);\n+    virtual ~CCoinsViewEfficient() {};\n+    /**\n+     * Return a pointer to CCoins, or NULL if not found. This is\n+     * more efficient than GetCoins.\n+     */\n+    virtual const CCoins* AccessCoins(const uint256& txid) const = 0;\n+\n+    //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n+    bool HaveInputs(const CTransaction& tx) const;\n+\n+    /** \n+     * Amount of bitcoins coming in to a transaction\n+     * Note that lightweight clients may not know anything besides the hash of previous transactions,\n+     * so may not be able to calculate this.\n+     *\n+     * @param[in] tx\ttransaction for which we are checking input total\n+     * @return\tSum of value of all inputs (scriptSigs)\n+     */\n+    CAmount GetValueIn(const CTransaction& tx) const;\n+\n+    //! Return priority of tx at height nHeight\n+    double GetPriority(const CTransaction& tx, int nHeight) const;\n+\n+    const CTxOut& GetOutputFor(const CTxIn& input) const;\n+};\n+\n class CCoinsViewCache;\n \n /** \n@@ -366,7 +397,7 @@ class CCoinsModifier\n };\n \n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n-class CCoinsViewCache : public CCoinsViewBacked\n+class CCoinsViewCache : public CCoinsViewEfficient\n {\n protected:\n     /* Whether this cache has an active modifier. */\n@@ -381,7 +412,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n-    ~CCoinsViewCache();\n+    virtual ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n@@ -395,7 +426,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * more efficient than GetCoins. Modifications to other cache entries are\n      * allowed while accessing the returned pointer.\n      */\n-    const CCoins* AccessCoins(const uint256 &txid) const;\n+    virtual const CCoins* AccessCoins(const uint256 &txid) const;\n \n     /**\n      * Return a modifiable reference to a CCoins. If no entry with the given\n@@ -414,24 +445,6 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Calculate the size of the cache (in number of transactions)\n     unsigned int GetCacheSize() const;\n \n-    /** \n-     * Amount of bitcoins coming in to a transaction\n-     * Note that lightweight clients may not know anything besides the hash of previous transactions,\n-     * so may not be able to calculate this.\n-     *\n-     * @param[in] tx\ttransaction for which we are checking input total\n-     * @return\tSum of value of all inputs (scriptSigs)\n-     */\n-    CAmount GetValueIn(const CTransaction& tx) const;\n-\n-    //! Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n-    bool HaveInputs(const CTransaction& tx) const;\n-\n-    //! Return priority of tx at height nHeight\n-    double GetPriority(const CTransaction &tx, int nHeight) const;\n-\n-    const CTxOut &GetOutputFor(const CTxIn& input) const;\n-\n     friend class CCoinsModifier;\n \n private:"
      }
    ]
  },
  {
    "sha": "d2ca5ae82069cc24986d6876464fbf495d28f9d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmNhNWFlODIwNjljYzI0OTg2ZDY4NzY0NjRmYmY0OTVkMjhmOWQx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-18T13:02:55Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:53Z"
      },
      "message": "Coins: MOVEONLY: Move CCoinsViewCache and CCoinsModifier to coinscache.o",
      "tree": {
        "sha": "57d9d63435313566c1d4b338d204b37255488c27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57d9d63435313566c1d4b338d204b37255488c27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2ca5ae82069cc24986d6876464fbf495d28f9d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ca5ae82069cc24986d6876464fbf495d28f9d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ca5ae82069cc24986d6876464fbf495d28f9d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ca5ae82069cc24986d6876464fbf495d28f9d1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0ee3f0b0c251788dac3055c8b93345a5f1dbd78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0ee3f0b0c251788dac3055c8b93345a5f1dbd78"
      }
    ],
    "stats": {
      "total": 482,
      "additions": 259,
      "deletions": 223
    },
    "files": [
      {
        "sha": "f31bd92f074030ce59d9811957a640615565f560",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -85,6 +85,7 @@ BITCOIN_CORE_H = \\\n   clientversion.h \\\n   coincontrol.h \\\n   coins.h \\\n+  coinscache.h \\\n   compat.h \\\n   compressor.h \\\n   consensus/consensus.h \\\n@@ -246,6 +247,7 @@ libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n+  coinscache.cpp \\\n   compressor.cpp \\\n   consensus/consensus.cpp \\\n   consensus/pow.cpp \\"
      },
      {
        "sha": "a2ebcd09bcd8fe648bbf15861cce2f267bb56064",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -5,6 +5,7 @@\n #include \"base58.h\"\n #include \"clientversion.h\"\n #include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"keystore.h\""
      },
      {
        "sha": "6b3353bc39c04b9e93033a10e345d2247b77eaf6",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 140,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -59,131 +59,6 @@ CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n CCoinsViewEfficient::CCoinsViewEfficient(CCoinsView* baseIn) : CCoinsViewBacked(baseIn) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView* baseIn) : CCoinsViewEfficient(baseIn), hasModifier(false) { }\n-\n-CCoinsViewCache::~CCoinsViewCache()\n-{\n-    assert(!hasModifier);\n-}\n-\n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    CCoinsMap::iterator it = cacheCoins.find(txid);\n-    if (it != cacheCoins.end())\n-        return it;\n-    CCoins tmp;\n-    if (!base->GetCoins(txid, tmp))\n-        return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n-    tmp.swap(ret->second.coins);\n-    if (ret->second.coins.IsPruned()) {\n-        // The parent only has an empty entry for this txid; we can consider our\n-        // version as fresh.\n-        ret->second.flags = CCoinsCacheEntry::FRESH;\n-    }\n-    return ret;\n-}\n-\n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n-    if (it != cacheCoins.end()) {\n-        coins = it->second.coins;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    if (ret.second) {\n-        if (!base->GetCoins(txid, ret.first->second.coins)) {\n-            // The parent view does not have this entry; mark it as fresh.\n-            ret.first->second.coins.Clear();\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        } else if (ret.first->second.coins.IsPruned()) {\n-            // The parent view only has a pruned entry for this; mark it as fresh.\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        }\n-    }\n-    // Assume that whenever ModifyCoins is called, the entry will be modified.\n-    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n-    return CCoinsModifier(*this, ret.first);\n-}\n-\n-const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n-    if (it == cacheCoins.end()) {\n-        return NULL;\n-    } else {\n-        return &it->second.coins;\n-    }\n-}\n-\n-bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n-    // We're using vtx.empty() instead of IsPruned here for performance reasons,\n-    // as we only care about the case where a transaction was replaced entirely\n-    // in a reorganization (which wipes vout entirely, as opposed to spending\n-    // which just cleans individual outputs).\n-    return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n-}\n-\n-uint256 CCoinsViewCache::GetBestBlock() const {\n-    if (hashBlock.IsNull())\n-        hashBlock = base->GetBestBlock();\n-    return hashBlock;\n-}\n-\n-void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n-    hashBlock = hashBlockIn;\n-}\n-\n-bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n-    assert(!hasModifier);\n-    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n-            CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n-            if (itUs == cacheCoins.end()) {\n-                if (!it->second.coins.IsPruned()) {\n-                    // The parent cache does not have an entry, while the child\n-                    // cache does have (a non-pruned) one. Move the data up, and\n-                    // mark it as fresh (if the grandparent did have it, we\n-                    // would have pulled it in at first GetCoins).\n-                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n-                    CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                    entry.coins.swap(it->second.coins);\n-                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n-                }\n-            } else {\n-                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n-                    // The grandparent does not have an entry, and the child is\n-                    // modified and being pruned. This means we can just delete\n-                    // it from the parent.\n-                    cacheCoins.erase(itUs);\n-                } else {\n-                    // A normal modification.\n-                    itUs->second.coins.swap(it->second.coins);\n-                    itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n-                }\n-            }\n-        }\n-        CCoinsMap::iterator itOld = it++;\n-        mapCoins.erase(itOld);\n-    }\n-    hashBlock = hashBlockIn;\n-    return true;\n-}\n-\n-bool CCoinsViewCache::Flush() {\n-    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n-    cacheCoins.clear();\n-    return fOk;\n-}\n-\n-unsigned int CCoinsViewCache::GetCacheSize() const {\n-    return cacheCoins.size();\n-}\n-\n const CTxOut& CCoinsViewEfficient::GetOutputFor(const CTxIn& input) const\n {\n     const CCoins* coins = AccessCoins(input.prevout.hash);\n@@ -233,18 +108,3 @@ double CCoinsViewEfficient::GetPriority(const CTransaction &tx, int nHeight) con\n     }\n     return tx.ComputePriority(dResult);\n }\n-\n-CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {\n-    assert(!cache.hasModifier);\n-    cache.hasModifier = true;\n-}\n-\n-CCoinsModifier::~CCoinsModifier()\n-{\n-    assert(cache.hasModifier);\n-    cache.hasModifier = false;\n-    it->second.coins.Cleanup();\n-    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n-        cache.cacheCoins.erase(it);\n-    }\n-}"
      },
      {
        "sha": "cddc12c95af8ba425202830c3d5c6eb95f1fb97f",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 0,
        "deletions": 82,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -375,86 +375,4 @@ class CCoinsViewEfficient : public CCoinsViewBacked\n     const CTxOut& GetOutputFor(const CTxIn& input) const;\n };\n \n-class CCoinsViewCache;\n-\n-/** \n- * A reference to a mutable cache entry. Encapsulating it allows us to run\n- *  cleanup code after the modification is finished, and keeping track of\n- *  concurrent modifications. \n- */\n-class CCoinsModifier\n-{\n-private:\n-    CCoinsViewCache& cache;\n-    CCoinsMap::iterator it;\n-    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n-\n-public:\n-    CCoins* operator->() { return &it->second.coins; }\n-    CCoins& operator*() { return it->second.coins; }\n-    ~CCoinsModifier();\n-    friend class CCoinsViewCache;\n-};\n-\n-/** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n-class CCoinsViewCache : public CCoinsViewEfficient\n-{\n-protected:\n-    /* Whether this cache has an active modifier. */\n-    bool hasModifier;\n-\n-    /**\n-     * Make mutable so that we can \"fill the cache\" even from Get-methods\n-     * declared as \"const\".  \n-     */\n-    mutable uint256 hashBlock;\n-    mutable CCoinsMap cacheCoins;\n-\n-public:\n-    CCoinsViewCache(CCoinsView *baseIn);\n-    virtual ~CCoinsViewCache();\n-\n-    // Standard CCoinsView methods\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n-    void SetBestBlock(const uint256 &hashBlock);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-\n-    /**\n-     * Return a pointer to CCoins in the cache, or NULL if not found. This is\n-     * more efficient than GetCoins. Modifications to other cache entries are\n-     * allowed while accessing the returned pointer.\n-     */\n-    virtual const CCoins* AccessCoins(const uint256 &txid) const;\n-\n-    /**\n-     * Return a modifiable reference to a CCoins. If no entry with the given\n-     * txid exists, a new one is created. Simultaneous modifications are not\n-     * allowed.\n-     */\n-    CCoinsModifier ModifyCoins(const uint256 &txid);\n-\n-    /**\n-     * Push the modifications applied to this cache to its base.\n-     * Failure to call this method before destruction will cause the changes to be forgotten.\n-     * If false is returned, the state of this cache (and its backing view) will be undefined.\n-     */\n-    bool Flush();\n-\n-    //! Calculate the size of the cache (in number of transactions)\n-    unsigned int GetCacheSize() const;\n-\n-    friend class CCoinsModifier;\n-\n-private:\n-    CCoinsMap::iterator FetchCoins(const uint256 &txid);\n-    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n-\n-    /**\n-     * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n-     */\n-    CCoinsViewCache(const CCoinsViewCache &);\n-};\n-\n #endif // BITCOIN_COINS_H"
      },
      {
        "sha": "57ea550f71b73337900c2cdaf7055c10fa95ea41",
        "filename": "src/coinscache.cpp",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/coinscache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/coinscache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinscache.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2012-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coinscache.h\"\n+\n+CCoinsViewCache::CCoinsViewCache(CCoinsView* baseIn) : CCoinsViewEfficient(baseIn), hasModifier(false) { }\n+\n+CCoinsViewCache::~CCoinsViewCache()\n+{\n+    assert(!hasModifier);\n+}\n+\n+CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n+    CCoinsMap::iterator it = cacheCoins.find(txid);\n+    if (it != cacheCoins.end())\n+        return it;\n+    CCoins tmp;\n+    if (!base->GetCoins(txid, tmp))\n+        return cacheCoins.end();\n+    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n+    tmp.swap(ret->second.coins);\n+    if (ret->second.coins.IsPruned()) {\n+        // The parent only has an empty entry for this txid; we can consider our\n+        // version as fresh.\n+        ret->second.flags = CCoinsCacheEntry::FRESH;\n+    }\n+    return ret;\n+}\n+\n+bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    if (it != cacheCoins.end()) {\n+        coins = it->second.coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n+    assert(!hasModifier);\n+    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n+    if (ret.second) {\n+        if (!base->GetCoins(txid, ret.first->second.coins)) {\n+            // The parent view does not have this entry; mark it as fresh.\n+            ret.first->second.coins.Clear();\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        } else if (ret.first->second.coins.IsPruned()) {\n+            // The parent view only has a pruned entry for this; mark it as fresh.\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        }\n+    }\n+    // Assume that whenever ModifyCoins is called, the entry will be modified.\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n+    return CCoinsModifier(*this, ret.first);\n+}\n+\n+const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    if (it == cacheCoins.end()) {\n+        return NULL;\n+    } else {\n+        return &it->second.coins;\n+    }\n+}\n+\n+bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    // We're using vtx.empty() instead of IsPruned here for performance reasons,\n+    // as we only care about the case where a transaction was replaced entirely\n+    // in a reorganization (which wipes vout entirely, as opposed to spending\n+    // which just cleans individual outputs).\n+    return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n+}\n+\n+uint256 CCoinsViewCache::GetBestBlock() const {\n+    if (hashBlock.IsNull())\n+        hashBlock = base->GetBestBlock();\n+    return hashBlock;\n+}\n+\n+void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n+    hashBlock = hashBlockIn;\n+}\n+\n+bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+    assert(!hasModifier);\n+    for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n+        if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n+            CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n+            if (itUs == cacheCoins.end()) {\n+                if (!it->second.coins.IsPruned()) {\n+                    // The parent cache does not have an entry, while the child\n+                    // cache does have (a non-pruned) one. Move the data up, and\n+                    // mark it as fresh (if the grandparent did have it, we\n+                    // would have pulled it in at first GetCoins).\n+                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n+                    CCoinsCacheEntry& entry = cacheCoins[it->first];\n+                    entry.coins.swap(it->second.coins);\n+                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n+                }\n+            } else {\n+                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+                    // The grandparent does not have an entry, and the child is\n+                    // modified and being pruned. This means we can just delete\n+                    // it from the parent.\n+                    cacheCoins.erase(itUs);\n+                } else {\n+                    // A normal modification.\n+                    itUs->second.coins.swap(it->second.coins);\n+                    itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n+                }\n+            }\n+        }\n+        CCoinsMap::iterator itOld = it++;\n+        mapCoins.erase(itOld);\n+    }\n+    hashBlock = hashBlockIn;\n+    return true;\n+}\n+\n+bool CCoinsViewCache::Flush() {\n+    bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n+    cacheCoins.clear();\n+    return fOk;\n+}\n+\n+unsigned int CCoinsViewCache::GetCacheSize() const {\n+    return cacheCoins.size();\n+}\n+\n+CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {\n+    assert(!cache.hasModifier);\n+    cache.hasModifier = true;\n+}\n+\n+CCoinsModifier::~CCoinsModifier()\n+{\n+    assert(cache.hasModifier);\n+    cache.hasModifier = false;\n+    it->second.coins.Cleanup();\n+    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+        cache.cacheCoins.erase(it);\n+    }\n+}"
      },
      {
        "sha": "94ddd5b12272045aa524d44ea8268c62e9eeefcb",
        "filename": "src/coinscache.h",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/coinscache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/coinscache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coinscache.h?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -0,0 +1,93 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSCACHE_H\n+#define BITCOIN_COINSCACHE_H\n+\n+#include \"coins.h\"\n+\n+class CCoinsViewCache;\n+\n+/** \n+ * A reference to a mutable cache entry. Encapsulating it allows us to run\n+ *  cleanup code after the modification is finished, and keeping track of\n+ *  concurrent modifications. \n+ */\n+class CCoinsModifier\n+{\n+private:\n+    CCoinsViewCache& cache;\n+    CCoinsMap::iterator it;\n+    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n+\n+public:\n+    CCoins* operator->() { return &it->second.coins; }\n+    CCoins& operator*() { return it->second.coins; }\n+    ~CCoinsModifier();\n+    friend class CCoinsViewCache;\n+};\n+\n+/** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n+class CCoinsViewCache : public CCoinsViewEfficient\n+{\n+protected:\n+    /* Whether this cache has an active modifier. */\n+    bool hasModifier;\n+\n+    /**\n+     * Make mutable so that we can \"fill the cache\" even from Get-methods\n+     * declared as \"const\".  \n+     */\n+    mutable uint256 hashBlock;\n+    mutable CCoinsMap cacheCoins;\n+\n+public:\n+    CCoinsViewCache(CCoinsView *baseIn);\n+    virtual ~CCoinsViewCache();\n+\n+    // Standard CCoinsView methods\n+    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    bool HaveCoins(const uint256 &txid) const;\n+    uint256 GetBestBlock() const;\n+    void SetBestBlock(const uint256 &hashBlock);\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+\n+    /**\n+     * Return a pointer to CCoins in the cache, or NULL if not found. This is\n+     * more efficient than GetCoins. Modifications to other cache entries are\n+     * allowed while accessing the returned pointer.\n+     */\n+    virtual const CCoins* AccessCoins(const uint256 &txid) const;\n+\n+    /**\n+     * Return a modifiable reference to a CCoins. If no entry with the given\n+     * txid exists, a new one is created. Simultaneous modifications are not\n+     * allowed.\n+     */\n+    CCoinsModifier ModifyCoins(const uint256 &txid);\n+\n+    /**\n+     * Push the modifications applied to this cache to its base.\n+     * Failure to call this method before destruction will cause the changes to be forgotten.\n+     * If false is returned, the state of this cache (and its backing view) will be undefined.\n+     */\n+    bool Flush();\n+\n+    //! Calculate the size of the cache (in number of transactions)\n+    unsigned int GetCacheSize() const;\n+\n+    friend class CCoinsModifier;\n+\n+private:\n+    CCoinsMap::iterator FetchCoins(const uint256 &txid);\n+    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n+\n+    /**\n+     * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n+     */\n+    CCoinsViewCache(const CCoinsViewCache &);\n+};\n+\n+#endif // BITCOIN_COINSCACHE_H"
      },
      {
        "sha": "8b5c8d01abf2b26f1945ce0a947f6d55d43b195d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -12,6 +12,8 @@\n #include \"addrman.h\"\n #include \"amount.h\"\n #include \"checkpoints.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n #include \"key.h\""
      },
      {
        "sha": "b0aef8d5da8e73a85785597d8b58b6786e483481",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -11,6 +11,8 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/pow.h\"\n #include \"consensus/validation.h\""
      },
      {
        "sha": "35c892d44586cd6f1d14a1aeea73e8391627eb48",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -13,7 +13,6 @@\n #include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n-#include \"coins.h\"\n #include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\""
      },
      {
        "sha": "02ec6f0139399624cbb8dfb65a49054926e29f34",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -8,6 +8,7 @@\n #include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n+#include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/pow.h\"\n #include \"consensus/validation.h\""
      },
      {
        "sha": "24c3c7986d14035bead3d35970a833afe318c6af",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -10,6 +10,7 @@\n #include \"transactionrecord.h\"\n \n #include \"base58.h\"\n+#include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n #include \"main.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "5cc0c318900e45459bd9b20b8cc828129a6865eb",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"checkpoints.h\"\n+#include \"coinscache.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"primitives/transaction.h\""
      },
      {
        "sha": "56c5fb8fc116dd900f4b50a430976948f978b721",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -4,6 +4,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\""
      },
      {
        "sha": "98735edc90be70e30965da77d48297f7d5b85ab0",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"random.h\"\n #include \"uint256.h\"\n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "16e6c4647fa0133d68875675731af842a5824cd6",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -2,6 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\""
      },
      {
        "sha": "07be93477e8b0bb6b39cdfba07c3147d751ca58b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"test_bitcoin.h\"\n \n+#include \"coinscache.h\"\n #include \"main.h\"\n #include \"random.h\"\n #include \"txdb.h\""
      },
      {
        "sha": "d1fd4c014af472ecf83d02f487ccf1184c88f057",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -7,6 +7,8 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\""
      },
      {
        "sha": "c5e8bf2b289984b3a4db045960e0bfba427a4360",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -6,6 +6,8 @@\n #include \"txmempool.h\"\n \n #include \"clientversion.h\"\n+#include \"coins.h\"\n+#include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\""
      },
      {
        "sha": "cc3d1127430055e3a72440d9d9f74458b393ba7c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ca5ae82069cc24986d6876464fbf495d28f9d1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "patch": "@@ -14,6 +14,7 @@\n #include \"sync.h\"\n \n class CAutoFile;\n+class CCoinsViewCache;\n \n inline double AllowFreeThreshold()\n {"
      }
    ]
  },
  {
    "sha": "fb7bf067983515e0ec4f82280eeaaefe2c639a16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjdiZjA2Nzk4MzUxNWUwZWM0ZjgyMjgwZWVhYWVmZTJjNjM5YTE2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T01:09:35Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:53Z"
      },
      "message": "move Consensus::GetBlockSubsidy",
      "tree": {
        "sha": "3e7895786e90e1a4593d8a001714e87abf1d6e4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e7895786e90e1a4593d8a001714e87abf1d6e4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb7bf067983515e0ec4f82280eeaaefe2c639a16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7bf067983515e0ec4f82280eeaaefe2c639a16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7bf067983515e0ec4f82280eeaaefe2c639a16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7bf067983515e0ec4f82280eeaaefe2c639a16/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ca5ae82069cc24986d6876464fbf495d28f9d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ca5ae82069cc24986d6876464fbf495d28f9d1"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c3c6618ff235a53b65c03e268da21fb3a2840de8",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7bf067983515e0ec4f82280eeaaefe2c639a16/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7bf067983515e0ec4f82280eeaaefe2c639a16/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=fb7bf067983515e0ec4f82280eeaaefe2c639a16",
        "patch": "@@ -170,3 +170,16 @@ unsigned int Consensus::GetLegacySigOpCount(const CTransaction& tx)\n \n     return nSigOps;\n }\n+\n+CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& params)\n+{\n+    int halvings = nHeight / params.nSubsidyHalvingInterval;\n+    // Force block reward to zero when right shift is undefined.\n+    if (halvings >= 64)\n+        return 0;\n+\n+    CAmount nSubsidy = 50 * COIN;\n+    // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n+    nSubsidy >>= halvings;\n+    return nSubsidy;\n+}"
      },
      {
        "sha": "5b3f7165650196efc7c2d5b5562f2daf2f648dd9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7bf067983515e0ec4f82280eeaaefe2c639a16/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7bf067983515e0ec4f82280eeaaefe2c639a16/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fb7bf067983515e0ec4f82280eeaaefe2c639a16",
        "patch": "@@ -1093,19 +1093,6 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     return true;\n }\n \n-CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& params)\n-{\n-    int halvings = nHeight / params.nSubsidyHalvingInterval;\n-    // Force block reward to zero when right shift is undefined.\n-    if (halvings >= 64)\n-        return 0;\n-\n-    CAmount nSubsidy = 50 * COIN;\n-    // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n-    nSubsidy >>= halvings;\n-    return nSubsidy;\n-}\n-\n bool IsInitialBlockDownload()\n {\n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "219904943e98eaded7b75c348ff861bdba2533ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTk5MDQ5NDNlOThlYWRlZDdiNzVjMzQ4ZmY4NjFiZGJhMjUzM2Fk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-17T02:39:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:53Z"
      },
      "message": "Consensus: MOVEONLY: GetP2SHSigOpCount() from main to consensus",
      "tree": {
        "sha": "c58c0080a94291f322383a41bc356c14db01cf89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c58c0080a94291f322383a41bc356c14db01cf89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/219904943e98eaded7b75c348ff861bdba2533ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219904943e98eaded7b75c348ff861bdba2533ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/219904943e98eaded7b75c348ff861bdba2533ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219904943e98eaded7b75c348ff861bdba2533ad/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb7bf067983515e0ec4f82280eeaaefe2c639a16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7bf067983515e0ec4f82280eeaaefe2c639a16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7bf067983515e0ec4f82280eeaaefe2c639a16"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 31,
      "deletions": 31
    },
    "files": [
      {
        "sha": "b3ef96578e2fbaab26d5ad3542f106224b744f1e",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219904943e98eaded7b75c348ff861bdba2533ad/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219904943e98eaded7b75c348ff861bdba2533ad/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=219904943e98eaded7b75c348ff861bdba2533ad",
        "patch": "@@ -6,6 +6,7 @@\n #include \"consensus/consensus.h\"\n \n #include \"chain.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"pow.h\"\n #include \"primitives/block.h\"\n@@ -171,6 +172,21 @@ unsigned int Consensus::GetLegacySigOpCount(const CTransaction& tx)\n     return nSigOps;\n }\n \n+unsigned int Consensus::GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewEfficient& inputs)\n+{\n+    if (tx.IsCoinBase())\n+        return 0;\n+\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        if (prevout.scriptPubKey.IsPayToScriptHash())\n+            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+    }\n+    return nSigOps;\n+}\n+\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& params)\n {\n     int halvings = nHeight / params.nSubsidyHalvingInterval;"
      },
      {
        "sha": "b067f37e6530e86d635ff6d6ec759520aa161d8e",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219904943e98eaded7b75c348ff861bdba2533ad/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219904943e98eaded7b75c348ff861bdba2533ad/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=219904943e98eaded7b75c348ff861bdba2533ad",
        "patch": "@@ -11,6 +11,7 @@\n class CBlock;\n class CBlockHeader;\n class CBlockIndex;\n+class CCoinsViewEfficient;\n class CTransaction;\n class CValidationState;\n \n@@ -48,6 +49,13 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n  * @see CTransaction::FetchInputs\n  */\n unsigned int GetLegacySigOpCount(const CTransaction& tx);\n+/**\n+ * Count ECDSA signature operations in pay-to-script-hash inputs.\n+ * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n+ * @return maximum number of sigops required to validate this transaction's inputs\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewEfficient& mapInputs);\n \n } // namespace Consensus\n "
      },
      {
        "sha": "6fc06da7d0e06045b890a7a83d8aee6968d55cd1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219904943e98eaded7b75c348ff861bdba2533ad/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219904943e98eaded7b75c348ff861bdba2533ad/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=219904943e98eaded7b75c348ff861bdba2533ad",
        "patch": "@@ -725,21 +725,6 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n-{\n-    if (tx.IsCoinBase())\n-        return 0;\n-\n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n-    }\n-    return nSigOps;\n-}\n-\n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {\n@@ -880,7 +865,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n         unsigned int nSigOps = Consensus::GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n+        nSigOps += Consensus::GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n                              error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n@@ -1687,7 +1672,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n                 // Add in sigops done by pay-to-script-hash inputs;\n                 // this is to prevent a \"rogue miner\" from creating\n                 // an incredibly-expensive-to-validate block.\n-                nSigOps += GetP2SHSigOpCount(tx, view);\n+                nSigOps += Consensus::GetP2SHSigOpCount(tx, view);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n                     return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                                      REJECT_INVALID, \"bad-blk-sigops\");"
      },
      {
        "sha": "1a475e791019b463e3b0deffcfd2129e90f531fd",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219904943e98eaded7b75c348ff861bdba2533ad/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219904943e98eaded7b75c348ff861bdba2533ad/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=219904943e98eaded7b75c348ff861bdba2533ad",
        "patch": "@@ -225,16 +225,6 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n-/**\n- * Count ECDSA signature operations in pay-to-script-hash inputs.\n- * \n- * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n- * @return maximum number of sigops required to validate this transaction's inputs\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n-\n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it"
      },
      {
        "sha": "e43cbb5b1ddc55c57922f9b0839a2b350eecea34",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219904943e98eaded7b75c348ff861bdba2533ad/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219904943e98eaded7b75c348ff861bdba2533ad/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=219904943e98eaded7b75c348ff861bdba2533ad",
        "patch": "@@ -273,7 +273,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n \n             CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n-            nTxSigOps += GetP2SHSigOpCount(tx, view);\n+            nTxSigOps += Consensus::GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n "
      },
      {
        "sha": "519a06fa588ed9d1dfbcfd192a8dc3f47587dff5",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219904943e98eaded7b75c348ff861bdba2533ad/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219904943e98eaded7b75c348ff861bdba2533ad/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=219904943e98eaded7b75c348ff861bdba2533ad",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"coins.h\"\n #include \"coinscache.h\"\n+#include \"consensus/consensus.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n@@ -346,7 +347,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     BOOST_CHECK(::AreInputsStandard(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n-    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 22U);\n+    BOOST_CHECK_EQUAL(Consensus::GetP2SHSigOpCount(txTo, coins), 22U);\n \n     // Make sure adding crap to the scriptSigs makes them non-standard:\n     for (int i = 0; i < 3; i++)\n@@ -367,7 +368,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n \n     BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n-    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n+    BOOST_CHECK_EQUAL(Consensus::GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n     txToNonStd2.vout.resize(1);\n@@ -379,7 +380,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n \n     BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n-    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd2, coins), 20U);\n+    BOOST_CHECK_EQUAL(Consensus::GetP2SHSigOpCount(txToNonStd2, coins), 20U);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "f848147e9ff621edf103ddd2f61c819d822a0cec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODQ4MTQ3ZTlmZjYyMWVkZjEwM2RkZDJmNjFjODE5ZDgyMmEwY2Vj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-10T19:29:05Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:54Z"
      },
      "message": "Consensus: Introduce Consensus::GetSigOpCount(CTransaction, CCoinsViewEfficient)",
      "tree": {
        "sha": "366cac079379544b1bae536a3427adc250ef503f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/366cac079379544b1bae536a3427adc250ef503f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f848147e9ff621edf103ddd2f61c819d822a0cec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f848147e9ff621edf103ddd2f61c819d822a0cec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f848147e9ff621edf103ddd2f61c819d822a0cec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f848147e9ff621edf103ddd2f61c819d822a0cec/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "219904943e98eaded7b75c348ff861bdba2533ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219904943e98eaded7b75c348ff861bdba2533ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/219904943e98eaded7b75c348ff861bdba2533ad"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 13,
      "deletions": 20
    },
    "files": [
      {
        "sha": "ebe3781b9006362b8199d15a166249e9835818d1",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f848147e9ff621edf103ddd2f61c819d822a0cec/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f848147e9ff621edf103ddd2f61c819d822a0cec/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=f848147e9ff621edf103ddd2f61c819d822a0cec",
        "patch": "@@ -187,6 +187,11 @@ unsigned int Consensus::GetP2SHSigOpCount(const CTransaction& tx, const CCoinsVi\n     return nSigOps;\n }\n \n+unsigned int Consensus::GetSigOpCount(const CTransaction& tx, const CCoinsViewEfficient& inputs)\n+{\n+    return Consensus::GetLegacySigOpCount(tx) + Consensus::GetP2SHSigOpCount(tx, inputs);\n+}\n+\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& params)\n {\n     int halvings = nHeight / params.nSubsidyHalvingInterval;"
      },
      {
        "sha": "8bd56ea9e02f93365103703201bc41747c2fe5ac",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f848147e9ff621edf103ddd2f61c819d822a0cec/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f848147e9ff621edf103ddd2f61c819d822a0cec/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=f848147e9ff621edf103ddd2f61c819d822a0cec",
        "patch": "@@ -56,6 +56,11 @@ unsigned int GetLegacySigOpCount(const CTransaction& tx);\n  * @see CTransaction::FetchInputs\n  */\n unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewEfficient& mapInputs);\n+/**\n+ * Count ECDSA signature operations.\n+ * @see Consensus::GetLegacySigOpCount and Consensus::GetP2SHSigOpCount\n+ */\n+unsigned int GetSigOpCount(const CTransaction&, const CCoinsViewEfficient&);\n \n } // namespace Consensus\n "
      },
      {
        "sha": "6a7aa4b41b7d5d47b5321664a6af3aab7ea4f906",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 14,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f848147e9ff621edf103ddd2f61c819d822a0cec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f848147e9ff621edf103ddd2f61c819d822a0cec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f848147e9ff621edf103ddd2f61c819d822a0cec",
        "patch": "@@ -864,8 +864,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n-        unsigned int nSigOps = Consensus::GetLegacySigOpCount(tx);\n-        nSigOps += Consensus::GetP2SHSigOpCount(tx, view);\n+        unsigned int nSigOps = Consensus::GetSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n                              error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n@@ -1656,7 +1655,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n         const CTransaction &tx = block.vtx[i];\n \n         nInputs += tx.vin.size();\n-        nSigOps += Consensus::GetLegacySigOpCount(tx);\n+        nSigOps += Consensus::GetSigOpCount(tx, view);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n@@ -1667,17 +1666,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n-            if (fStrictPayToScriptHash)\n-            {\n-                // Add in sigops done by pay-to-script-hash inputs;\n-                // this is to prevent a \"rogue miner\" from creating\n-                // an incredibly-expensive-to-validate block.\n-                nSigOps += Consensus::GetP2SHSigOpCount(tx, view);\n-                if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n-                                     REJECT_INVALID, \"bad-blk-sigops\");\n-            }\n-\n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;"
      },
      {
        "sha": "a5bbaf8aed6888d64c4a08a3cb78a2744c8a2021",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f848147e9ff621edf103ddd2f61c819d822a0cec/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f848147e9ff621edf103ddd2f61c819d822a0cec/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f848147e9ff621edf103ddd2f61c819d822a0cec",
        "patch": "@@ -245,11 +245,6 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n             if (nBlockSize + nTxSize >= nBlockMaxSize)\n                 continue;\n \n-            // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = Consensus::GetLegacySigOpCount(tx);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n-                continue;\n-\n             // Skip free transactions if we're past the minimum block size:\n             const uint256& hash = tx.GetHash();\n             double dPriorityDelta = 0;\n@@ -273,7 +268,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n \n             CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n-            nTxSigOps += Consensus::GetP2SHSigOpCount(tx, view);\n+            unsigned int nTxSigOps = Consensus::GetSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n "
      }
    ]
  },
  {
    "sha": "4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDE0ZmEzOTcwYzNhNDVmNGI1MjFmMTNiZjg5YzFiZjI4ZTE2ZmU2",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-18T22:35:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:54Z"
      },
      "message": "Consensus: Refactor: Separate Consensus::CheckTxInputs from CheckInputs",
      "tree": {
        "sha": "b32786a23c5c777182296b47ec21c2a6255b03ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b32786a23c5c777182296b47ec21c2a6255b03ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f848147e9ff621edf103ddd2f61c819d822a0cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f848147e9ff621edf103ddd2f61c819d822a0cec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f848147e9ff621edf103ddd2f61c819d822a0cec"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 31,
      "deletions": 26
    },
    "files": [
      {
        "sha": "49ea6cc941709816e1a77d9a62556ea04bf25a6d",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6",
        "patch": "@@ -41,6 +41,11 @@ bool CheckBlock(const CBlock& block, int64_t nTime, CValidationState& state, con\n \n /** Context-dependent validity checks */\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex* pindexPrev, const Consensus::Params& params);\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, int nSpendHeight);\n \n /** Utility functions */\n /**"
      },
      {
        "sha": "a73b91a64c60a986ef1416c051335f24222841b6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6",
        "patch": "@@ -1265,22 +1265,13 @@ bool CScriptCheck::operator()() {\n     return true;\n }\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, int nSpendHeight)\n {\n-    if (!tx.IsCoinBase())\n-    {\n-        if (pvChecks)\n-            pvChecks->reserve(tx.vin.size());\n-\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-unavailable\");\n \n-        // While checking, GetBestBlock() refers to the parent block.\n-        // This is also true for mempool checks.\n-        CBlockIndex *pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n-        int nSpendHeight = pindexPrev->nHeight + 1;\n         CAmount nValueIn = 0;\n         CAmount nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -1290,35 +1281,44 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n             assert(coins);\n \n             // If prev is coinbase, check that it's matured\n-            if (coins->IsCoinBase()) {\n+            if (coins->IsCoinBase())\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(\n-                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n-            }\n+                    return state.Invalid(false, REJECT_INVALID, strprintf(\"bad-txns-premature-spend-of-coinbase (depth %d)\", nSpendHeight - coins->nHeight));\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n-                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n-\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n-                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n-                             REJECT_INVALID, \"bad-txns-in-belowout\");\n+            return state.DoS(100, false, REJECT_INVALID, strprintf(\"bad-txns-in-belowout (%s < %s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"bad-txns-fee-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n+\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n-                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+\n+    return true;\n+}\n+\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+{\n+    if (!tx.IsCoinBase())\n+    {\n+        // While checking, GetBestBlock() refers to the parent block.\n+        // This is also true for mempool checks.\n+        CBlockIndex *pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n+        int nSpendHeight = pindexPrev->nHeight + 1;\n+        if (!Consensus::CheckTxInputs(tx, state, inputs, nSpendHeight))\n+            return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n+\n+        if (pvChecks)\n+            pvChecks->reserve(tx.vin.size());\n \n         // The first loop above does all the inexpensive checks.\n         // Only if ALL inputs pass do we perform expensive ECDSA signature checks."
      }
    ]
  },
  {
    "sha": "b11d3eea2e1af616df455bd0a1e36328884bcdf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTFkM2VlYTJlMWFmNjE2ZGY0NTViZDBhMWUzNjMyODg4NGJjZGY3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-24T00:10:37Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:54Z"
      },
      "message": "Consensus: Refactor: Move  CTransaction::GetValueOut() to Consensus",
      "tree": {
        "sha": "1f66a37c3a506734f646223c3fb437db68651a4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f66a37c3a506734f646223c3fb437db68651a4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b11d3eea2e1af616df455bd0a1e36328884bcdf7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11d3eea2e1af616df455bd0a1e36328884bcdf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b11d3eea2e1af616df455bd0a1e36328884bcdf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11d3eea2e1af616df455bd0a1e36328884bcdf7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d14fa3970c3a45f4b521f13bf89c1bf28e16fe6"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 35,
      "deletions": 31
    },
    "files": [
      {
        "sha": "82102b273f842517d323667fef3560ae53714323",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -121,6 +121,18 @@ bool Consensus::CheckBlock(const CBlock& block, int64_t nTime, CValidationState&\n     return true;\n }\n \n+CAmount Consensus::GetValueOut(const CTransaction& tx)\n+{\n+    CAmount nValueOut = 0;\n+    for (std::vector<CTxOut>::const_iterator it(tx.vout.begin()); it != tx.vout.end(); ++it)\n+    {\n+        nValueOut += it->nValue;\n+        if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n+            throw std::runtime_error(\"CTransaction::GetValueOut(): value out of range\");\n+    }\n+    return nValueOut;\n+}\n+\n bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n {\n     unsigned int nFound = 0;"
      },
      {
        "sha": "6977a29a27f3674a64797fd25b485d4724732136",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -66,6 +66,12 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewEfficient\n  * @see Consensus::GetLegacySigOpCount and Consensus::GetP2SHSigOpCount\n  */\n unsigned int GetSigOpCount(const CTransaction&, const CCoinsViewEfficient&);\n+/**\n+ * Return sum of txouts for a given transaction.\n+ * GetValueIn() is a method on CCoinsViewCache, because\n+ * inputs must be known to compute value in.\n+ */\n+CAmount GetValueOut(const CTransaction& tx);\n \n } // namespace Consensus\n "
      },
      {
        "sha": "c940d0dec60e85c9cb51aa574c3ee9ed77f07f2d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -871,7 +871,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                                    hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n-        CAmount nValueOut = tx.GetValueOut();\n+        CAmount nValueOut = Consensus::GetValueOut(tx);\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n@@ -1291,11 +1291,12 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n                 return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n         }\n \n-        if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, false, REJECT_INVALID, strprintf(\"bad-txns-in-belowout (%s < %s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n+        CAmount nValueOut = Consensus::GetValueOut(tx);\n+        if (nValueIn < nValueOut)\n+            return state.DoS(100, false, REJECT_INVALID, strprintf(\"bad-txns-in-belowout (%s < %s)\", FormatMoney(nValueIn), FormatMoney(nValueOut)));\n \n         // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n+        CAmount nTxFee = nValueIn - nValueOut;\n         if (nTxFee < 0)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n \n@@ -1666,7 +1667,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n-            nFees += view.GetValueIn(tx)-tx.GetValueOut();\n+            nFees += view.GetValueIn(tx) - Consensus::GetValueOut(tx);\n \n             std::vector<CScriptCheck> vChecks;\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n@@ -1687,10 +1688,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n     LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime1 - nTimeStart), 0.001 * (nTime1 - nTimeStart) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime1 - nTimeStart) / (nInputs-1), nTimeConnect * 0.000001);\n \n     CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, params);\n-    if (block.vtx[0].GetValueOut() > blockReward)\n+    CAmount nValueOut = Consensus::GetValueOut(block.vtx[0]);\n+    if (nValueOut > blockReward)\n         return state.DoS(100,\n                          error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n-                               block.vtx[0].GetValueOut(), blockReward),\n+                               nValueOut, blockReward),\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n     if (!control.Wait())"
      },
      {
        "sha": "931b25ace3f051d188d027a7fb5bc453d6e31aa5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -210,7 +210,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n             uint256 hash = tx.GetHash();\n             mempool.ApplyDeltas(hash, dPriority, nTotalIn);\n \n-            CFeeRate feeRate(nTotalIn-tx.GetValueOut(), nTxSize);\n+            CFeeRate feeRate(nTotalIn - Consensus::GetValueOut(tx), nTxSize);\n \n             if (porphan)\n             {\n@@ -266,7 +266,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n             if (!view.HaveInputs(tx))\n                 continue;\n \n-            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n+            CAmount nTxFees = view.GetValueIn(tx) - Consensus::GetValueOut(tx);\n \n             unsigned int nTxSigOps = Consensus::GetSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)"
      },
      {
        "sha": "58b5cd2cbc76950679445d9162b1f0064880d207",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -87,18 +87,6 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     return *this;\n }\n \n-CAmount CTransaction::GetValueOut() const\n-{\n-    CAmount nValueOut = 0;\n-    for (std::vector<CTxOut>::const_iterator it(vout.begin()); it != vout.end(); ++it)\n-    {\n-        nValueOut += it->nValue;\n-        if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"CTransaction::GetValueOut(): value out of range\");\n-    }\n-    return nValueOut;\n-}\n-\n double CTransaction::ComputePriority(double dPriorityInputs, unsigned int nTxSize) const\n {\n     nTxSize = CalculateModifiedSize(nTxSize);"
      },
      {
        "sha": "f20b07f44a2b0925c1f52b5e381f72ed595ca5ee",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -222,11 +222,6 @@ class CTransaction\n         return hash;\n     }\n \n-    // Return sum of txouts.\n-    CAmount GetValueOut() const;\n-    // GetValueIn() is a method on CCoinsViewCache, because\n-    // inputs must be known to compute value in.\n-\n     // Compute priority, given priority of inputs and (optionally) tx size\n     double ComputePriority(double dPriorityInputs, unsigned int nTxSize=0) const;\n "
      },
      {
        "sha": "03e0d298edc2458afceca7246a9689226883067a",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -214,7 +214,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                 strHTML += \"<b>\" + tr(\"Total credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nValue) + \"<br>\";\n             }\n \n-            CAmount nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - Consensus::GetValueOut(wtx);\n             if (nTxFee > 0)\n                 strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nTxFee) + \"<br>\";\n         }"
      },
      {
        "sha": "ce8ce302189931079161fe0e5f3018679736a4ec",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -112,7 +112,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            CAmount nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - Consensus::GetValueOut(wtx);\n \n             for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {"
      },
      {
        "sha": "a3fe4204be3ed22c85d452ee86afa330a1e7c0ed",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -44,7 +44,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    CAmount nValueIn = tx.GetValueOut()+nFee;\n+    CAmount nValueIn = Consensus::GetValueOut(tx) + nFee;\n     double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n     double dResult = dPriority + deltaPriority;\n     return dResult;"
      },
      {
        "sha": "6dc078caf246f80b33c059a058347ec863a09f32",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"amount.h\"\n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\"\n@@ -1634,7 +1635,7 @@ Value gettransaction(const Array& params, bool fHelp)\n     CAmount nCredit = wtx.GetCredit(filter);\n     CAmount nDebit = wtx.GetDebit(filter);\n     CAmount nNet = nCredit - nDebit;\n-    CAmount nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = (wtx.IsFromMe(filter) ? Consensus::GetValueOut(wtx) - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe(filter))"
      },
      {
        "sha": "0f75abe20bb22e30694e3449c0d3f7a1ae647f78",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11d3eea2e1af616df455bd0a1e36328884bcdf7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "patch": "@@ -968,7 +968,7 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n     CAmount nDebit = GetDebit(filter);\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        CAmount nValueOut = GetValueOut();\n+        CAmount nValueOut = Consensus::GetValueOut(*this);\n         nFee = nDebit - nValueOut;\n     }\n "
      }
    ]
  },
  {
    "sha": "a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2ZhMmUzN2I2NTJiNWQyN2IyN2ZlZGQzMzg3MTNmYzE4ZWQ1YjBi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-10T14:14:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:54Z"
      },
      "message": "Consensus: MOVEONLY-ish: Move MAX_MONEY and MoneyRange() [renamed VerifyAmount] from amount.h to consensus.h",
      "tree": {
        "sha": "d8845bd41410109aa04bc1b871fd12917ca1fd91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8845bd41410109aa04bc1b871fd12917ca1fd91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11d3eea2e1af616df455bd0a1e36328884bcdf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b11d3eea2e1af616df455bd0a1e36328884bcdf7"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "68d634423369c23972ca11ea74dfebd9ae63799a",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "patch": "@@ -16,10 +16,6 @@ typedef int64_t CAmount;\n static const CAmount COIN = 100000000;\n static const CAmount CENT = 1000000;\n \n-/** No amount larger than this (in satoshi) is valid */\n-static const CAmount MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n-\n /** Type-safe wrapper class to for fee rates\n  * (how much to pay based on transaction size)\n  */"
      },
      {
        "sha": "68ddeac10beb2cd53771e386fad3eaa5cb0a7fb2",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "patch": "@@ -27,12 +27,10 @@ bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-        if (tx.vout[i].nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (tx.vout[i].nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        if (!Consensus::VerifyAmount(tx.vout[i].nValue))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-outofrange\");\n         nValueOut += tx.vout[i].nValue;\n-        if (!MoneyRange(nValueOut))\n+        if (!Consensus::VerifyAmount(nValueOut))\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n@@ -127,7 +125,7 @@ CAmount Consensus::GetValueOut(const CTransaction& tx)\n     for (std::vector<CTxOut>::const_iterator it(tx.vout.begin()); it != tx.vout.end(); ++it)\n     {\n         nValueOut += it->nValue;\n-        if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n+        if (!Consensus::VerifyAmount(it->nValue) || !Consensus::VerifyAmount(nValueOut))\n             throw std::runtime_error(\"CTransaction::GetValueOut(): value out of range\");\n     }\n     return nValueOut;"
      },
      {
        "sha": "8f677b645f397f6dc9150c5e724ac5f2f431c18a",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include \"amount.h\"\n #include \"consensus/params.h\"\n \n class CBlock;\n@@ -23,6 +24,8 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n+/** No amount larger than this (in satoshi) is valid */\n+static const CAmount MAX_MONEY = 21000000 * COIN;\n \n /**\n  * Consensus validations:\n@@ -35,6 +38,7 @@ namespace Consensus {\n bool VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev);\n \n /** Context-independent validity checks */\n+inline bool VerifyAmount(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n bool CheckTx(const CTransaction& tx, CValidationState &state);\n bool CheckBlockHeader(const CBlockHeader& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true);\n bool CheckBlock(const CBlock& block, int64_t nTime, CValidationState& state, const Consensus::Params& params, bool fCheckPOW = true, bool fCheckMerkleRoot = true);"
      },
      {
        "sha": "c030801a0014311c2a68b4b7169acd5229e8ff87",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "patch": "@@ -749,7 +749,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n             nMinFee = 0;\n     }\n \n-    if (!MoneyRange(nMinFee))\n+    if (!Consensus::VerifyAmount(nMinFee))\n         nMinFee = MAX_MONEY;\n     return nMinFee;\n }\n@@ -1287,7 +1287,7 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n-            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n+            if (!Consensus::VerifyAmount(coins->vout[prevout.n].nValue) || !Consensus::VerifyAmount(nValueIn))\n                 return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n         }\n \n@@ -1301,7 +1301,7 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n \n         nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n+        if (!Consensus::VerifyAmount(nFees))\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n \n     return true;"
      },
      {
        "sha": "a4efc349a7373f9c532c25a7fa0364248de22428",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"bitcoinunits.h\"\n \n-#include \"primitives/transaction.h\"\n+#include \"consensus/consensus.h\"\n \n #include <QStringList>\n "
      },
      {
        "sha": "5285182d4c64cb2dd41322f1618b25abc7bf0609",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "patch": "@@ -785,7 +785,7 @@ bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails\n \n bool PaymentServer::verifyAmount(const CAmount& requestAmount)\n {\n-    bool fVerified = MoneyRange(requestAmount);\n+    bool fVerified = Consensus::VerifyAmount(requestAmount);\n     if (!fVerified) {\n         qWarning() << QString(\"PaymentServer::%1: Payment request amount out of allowed range (%2, allowed 0 - %3).\")\n             .arg(__func__)"
      },
      {
        "sha": "639be598f199a8d7dbf29dd65372eef24abfd3f6",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "patch": "@@ -6,6 +6,7 @@\n #include \"rpcserver.h\"\n \n #include \"base58.h\"\n+#include \"consensus/consensus.h\"\n #include \"init.h\"\n #include \"random.h\"\n #include \"sync.h\"\n@@ -129,7 +130,7 @@ CAmount AmountFromValue(const Value& value)\n     if (dAmount <= 0.0 || dAmount > 21000000.0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     CAmount nAmount = roundint64(dAmount * COIN);\n-    if (!MoneyRange(nAmount))\n+    if (!Consensus::VerifyAmount(nAmount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     return nAmount;\n }"
      },
      {
        "sha": "64ab3ad6eab865a1adb5eaf16d9db38738958b1a",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n #include \"main.h\"\n \n #include \"test/test_bitcoin.h\"\n@@ -20,7 +21,7 @@ BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n         CAmount nSubsidy = GetBlockSubsidy(nHeight, params);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n-        BOOST_CHECK(MoneyRange(nSum));\n+        BOOST_CHECK(Consensus::VerifyAmount(nSum));\n     }\n     BOOST_CHECK(nSum == 2099999997690000ULL);\n }"
      },
      {
        "sha": "b7dd1aebf16b0e84687f39d7f060ace0e075f1ea",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "patch": "@@ -828,7 +828,7 @@ isminetype CWallet::IsMine(const CTxOut& txout) const\n \n CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const\n {\n-    if (!MoneyRange(txout.nValue))\n+    if (!Consensus::VerifyAmount(txout.nValue))\n         throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n     return ((IsMine(txout) & filter) ? txout.nValue : 0);\n }\n@@ -857,7 +857,7 @@ bool CWallet::IsChange(const CTxOut& txout) const\n \n CAmount CWallet::GetChange(const CTxOut& txout) const\n {\n-    if (!MoneyRange(txout.nValue))\n+    if (!Consensus::VerifyAmount(txout.nValue))\n         throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n     return (IsChange(txout) ? txout.nValue : 0);\n }\n@@ -881,7 +881,7 @@ CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) co\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         nDebit += GetDebit(txin, filter);\n-        if (!MoneyRange(nDebit))\n+        if (!Consensus::VerifyAmount(nDebit))\n             throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n     }\n     return nDebit;\n@@ -893,7 +893,7 @@ CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) c\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         nCredit += GetCredit(txout, filter);\n-        if (!MoneyRange(nCredit))\n+        if (!Consensus::VerifyAmount(nCredit))\n             throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n     }\n     return nCredit;\n@@ -905,7 +905,7 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         nChange += GetChange(txout);\n-        if (!MoneyRange(nChange))\n+        if (!Consensus::VerifyAmount(nChange))\n             throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n     }\n     return nChange;\n@@ -1240,7 +1240,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n         {\n             const CTxOut &txout = vout[i];\n             nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n-            if (!MoneyRange(nCredit))\n+            if (!Consensus::VerifyAmount(nCredit))\n                 throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n         }\n     }\n@@ -1283,7 +1283,7 @@ CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n         {\n             const CTxOut &txout = vout[i];\n             nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n-            if (!MoneyRange(nCredit))\n+            if (!Consensus::VerifyAmount(nCredit))\n                 throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n         }\n     }"
      }
    ]
  },
  {
    "sha": "1431ccb37979ec147eaf1f9308ad661567ba4632",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDMxY2NiMzc5NzllYzE0N2VhZjFmOTMwOGFkNjYxNTY3YmE0NjMy",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-26T00:39:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:54Z"
      },
      "message": "Consensus: Refactor: Introduce GetSpendHeight()",
      "tree": {
        "sha": "ddcf45fa7a7e93edcf621ab8fd721248b3ecbc92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddcf45fa7a7e93edcf621ab8fd721248b3ecbc92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1431ccb37979ec147eaf1f9308ad661567ba4632",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1431ccb37979ec147eaf1f9308ad661567ba4632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1431ccb37979ec147eaf1f9308ad661567ba4632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1431ccb37979ec147eaf1f9308ad661567ba4632/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7fa2e37b652b5d27b27fedd338713fc18ed5b0b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "23e9ee8b3dd0cf3273cc57f0f566b2c368f6b8b1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1431ccb37979ec147eaf1f9308ad661567ba4632/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1431ccb37979ec147eaf1f9308ad661567ba4632/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1431ccb37979ec147eaf1f9308ad661567ba4632",
        "patch": "@@ -1307,15 +1307,18 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n     return true;\n }\n \n+int GetSpendHeight(const CCoinsViewEfficient& inputs)\n+{\n+    LOCK(cs_main);\n+    CBlockIndex* pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n+    return pindexPrev->nHeight + 1;\n+}\n+\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n-        // While checking, GetBestBlock() refers to the parent block.\n-        // This is also true for mempool checks.\n-        CBlockIndex *pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n-        int nSpendHeight = pindexPrev->nHeight + 1;\n-        if (!Consensus::CheckTxInputs(tx, state, inputs, nSpendHeight))\n+        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n             return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n \n         if (pvChecks)"
      },
      {
        "sha": "efaf93e6fefa60013353f871a29de9b87b531240",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1431ccb37979ec147eaf1f9308ad661567ba4632/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1431ccb37979ec147eaf1f9308ad661567ba4632/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1431ccb37979ec147eaf1f9308ad661567ba4632",
        "patch": "@@ -387,4 +387,10 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n+/** \n+ * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)\n+ * This is also true for mempool checks.\n+ */\n+int GetSpendHeight(const CCoinsViewEfficient& inputs);\n+\n #endif // BITCOIN_MAIN_H"
      }
    ]
  },
  {
    "sha": "0d8182daed962551a5626ddfa0dce2abfeb7d8c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDgxODJkYWVkOTYyNTUxYTU2MjZkZGZhMGRjZTJhYmZlYjdkOGM2",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-25T22:03:19Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:55Z"
      },
      "message": "Consensus: Refactor: Safely remove !tx.IsCoinBase() check from main::CheckInputs()",
      "tree": {
        "sha": "9faf52412225975d95c16dde41042f42948ea40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9faf52412225975d95c16dde41042f42948ea40c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d8182daed962551a5626ddfa0dce2abfeb7d8c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d8182daed962551a5626ddfa0dce2abfeb7d8c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d8182daed962551a5626ddfa0dce2abfeb7d8c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d8182daed962551a5626ddfa0dce2abfeb7d8c6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1431ccb37979ec147eaf1f9308ad661567ba4632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1431ccb37979ec147eaf1f9308ad661567ba4632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1431ccb37979ec147eaf1f9308ad661567ba4632"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "dc417a16a800326672efd11bbf7add7020008d8a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8182daed962551a5626ddfa0dce2abfeb7d8c6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8182daed962551a5626ddfa0dce2abfeb7d8c6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0d8182daed962551a5626ddfa0dce2abfeb7d8c6",
        "patch": "@@ -1316,8 +1316,6 @@ int GetSpendHeight(const CCoinsViewEfficient& inputs)\n \n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n-    if (!tx.IsCoinBase())\n-    {\n         if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n             return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n \n@@ -1366,7 +1364,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 }\n             }\n         }\n-    }\n \n     return true;\n }"
      },
      {
        "sha": "27ced6dd082a96592473f6444ef35a3af91838e9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8182daed962551a5626ddfa0dce2abfeb7d8c6/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8182daed962551a5626ddfa0dce2abfeb7d8c6/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0d8182daed962551a5626ddfa0dce2abfeb7d8c6",
        "patch": "@@ -229,6 +229,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n  * instead of being performed inline.\n+ * Preconditions: tx.IsCoinBase() is false\n  */\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n                  unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);"
      },
      {
        "sha": "44d734b249f2fbd41e340795a839a842f07282e4",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8182daed962551a5626ddfa0dce2abfeb7d8c6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8182daed962551a5626ddfa0dce2abfeb7d8c6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0d8182daed962551a5626ddfa0dce2abfeb7d8c6",
        "patch": "@@ -590,22 +590,25 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             waitingOnDependants.push_back(&it->second);\n         else {\n             CValidationState state;\n-            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n+            assert(tx.IsCoinBase() || \n+                   Consensus::CheckTxInputs(tx, state, mempoolDuplicate, GetSpendHeight(mempoolDuplicate)));\n             UpdateCoins(tx, state, mempoolDuplicate, 1000000);\n         }\n     }\n     unsigned int stepsSinceLastRemove = 0;\n     while (!waitingOnDependants.empty()) {\n         const CTxMemPoolEntry* entry = waitingOnDependants.front();\n         waitingOnDependants.pop_front();\n+        const CTransaction& tx = entry->GetTx();\n         CValidationState state;\n-        if (!mempoolDuplicate.HaveInputs(entry->GetTx())) {\n+        if (!mempoolDuplicate.HaveInputs(tx)) {\n             waitingOnDependants.push_back(entry);\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n-            UpdateCoins(entry->GetTx(), state, mempoolDuplicate, 1000000);\n+            assert(tx.IsCoinBase() || \n+                   Consensus::CheckTxInputs(tx, state, mempoolDuplicate, GetSpendHeight(mempoolDuplicate)));\n+            UpdateCoins(tx, state, mempoolDuplicate, 1000000);\n             stepsSinceLastRemove = 0;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "d5b606dd86d97ce590fe19a6c60f1f823150e912",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWI2MDZkZDg2ZDk3Y2U1OTBmZTE5YTZjNjBmMWY4MjMxNTBlOTEy",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-18T21:02:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:55Z"
      },
      "message": "Consensus: MOVEONLY: Consensus::CheckTxInputs() from main to consensus",
      "tree": {
        "sha": "236833b3fc53c40d078a495daf954ac661392692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/236833b3fc53c40d078a495daf954ac661392692"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5b606dd86d97ce590fe19a6c60f1f823150e912",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b606dd86d97ce590fe19a6c60f1f823150e912",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5b606dd86d97ce590fe19a6c60f1f823150e912",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b606dd86d97ce590fe19a6c60f1f823150e912/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d8182daed962551a5626ddfa0dce2abfeb7d8c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d8182daed962551a5626ddfa0dce2abfeb7d8c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d8182daed962551a5626ddfa0dce2abfeb7d8c6"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 44,
      "deletions": 42
    },
    "files": [
      {
        "sha": "6bd333a6b17938c6c606368bc132954d8d327eb8",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b606dd86d97ce590fe19a6c60f1f823150e912/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b606dd86d97ce590fe19a6c60f1f823150e912/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=d5b606dd86d97ce590fe19a6c60f1f823150e912",
        "patch": "@@ -11,6 +11,8 @@\n #include \"pow.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"tinyformat.h\"\n+#include \"utilmoneystr.h\"\n #include \"version.h\"\n \n bool Consensus::CheckTx(const CTransaction& tx, CValidationState &state)\n@@ -131,6 +133,48 @@ CAmount Consensus::GetValueOut(const CTransaction& tx)\n     return nValueOut;\n }\n \n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, int nSpendHeight)\n+{\n+        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n+        // for an attacker to attempt to split the network.\n+        if (!inputs.HaveInputs(tx))\n+            return state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-unavailable\");\n+\n+        CAmount nValueIn = 0;\n+        CAmount nFees = 0;\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        {\n+            const COutPoint &prevout = tx.vin[i].prevout;\n+            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n+            assert(coins);\n+\n+            // If prev is coinbase, check that it's matured\n+            if (coins->IsCoinBase())\n+                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n+                    return state.Invalid(false, REJECT_INVALID, strprintf(\"bad-txns-premature-spend-of-coinbase (depth %d)\", nSpendHeight - coins->nHeight));\n+\n+            // Check for negative or overflow input values\n+            nValueIn += coins->vout[prevout.n].nValue;\n+            if (!Consensus::VerifyAmount(coins->vout[prevout.n].nValue) || !Consensus::VerifyAmount(nValueIn))\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+        }\n+\n+        CAmount nValueOut = Consensus::GetValueOut(tx);\n+        if (nValueIn < nValueOut)\n+            return state.DoS(100, false, REJECT_INVALID, strprintf(\"bad-txns-in-belowout (%s < %s)\", FormatMoney(nValueIn), FormatMoney(nValueOut)));\n+\n+        // Tally transaction fees\n+        CAmount nTxFee = nValueIn - nValueOut;\n+        if (nTxFee < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n+\n+        nFees += nTxFee;\n+        if (!Consensus::VerifyAmount(nFees))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+\n+    return true;\n+}\n+\n bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n {\n     unsigned int nFound = 0;"
      },
      {
        "sha": "992048a511b769d8f9113f8ba69c7fa29b5cfd76",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 42,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b606dd86d97ce590fe19a6c60f1f823150e912/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b606dd86d97ce590fe19a6c60f1f823150e912/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d5b606dd86d97ce590fe19a6c60f1f823150e912",
        "patch": "@@ -1265,48 +1265,6 @@ bool CScriptCheck::operator()() {\n     return true;\n }\n \n-bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, int nSpendHeight)\n-{\n-        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n-        // for an attacker to attempt to split the network.\n-        if (!inputs.HaveInputs(tx))\n-            return state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-unavailable\");\n-\n-        CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n-            assert(coins);\n-\n-            // If prev is coinbase, check that it's matured\n-            if (coins->IsCoinBase())\n-                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(false, REJECT_INVALID, strprintf(\"bad-txns-premature-spend-of-coinbase (depth %d)\", nSpendHeight - coins->nHeight));\n-\n-            // Check for negative or overflow input values\n-            nValueIn += coins->vout[prevout.n].nValue;\n-            if (!Consensus::VerifyAmount(coins->vout[prevout.n].nValue) || !Consensus::VerifyAmount(nValueIn))\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n-        }\n-\n-        CAmount nValueOut = Consensus::GetValueOut(tx);\n-        if (nValueIn < nValueOut)\n-            return state.DoS(100, false, REJECT_INVALID, strprintf(\"bad-txns-in-belowout (%s < %s)\", FormatMoney(nValueIn), FormatMoney(nValueOut)));\n-\n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - nValueOut;\n-        if (nTxFee < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n-\n-        nFees += nTxFee;\n-        if (!Consensus::VerifyAmount(nFees))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n-\n-    return true;\n-}\n-\n int GetSpendHeight(const CCoinsViewEfficient& inputs)\n {\n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "3cef0c309388243c15285f812dc3859b29c0e078",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2VmMGMzMDkzODgyNDNjMTUyODVmODEyZGMzODU5YjI5YzBlMDc4",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-21T16:16:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:55Z"
      },
      "message": "Consensus: Refactor: Separate CheckInputs() into CheckInputsScripts and Consensus::CheckTxInputs()",
      "tree": {
        "sha": "e9db75d6b4cbbf4eb0e6879a3d4a6deacd144dc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9db75d6b4cbbf4eb0e6879a3d4a6deacd144dc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cef0c309388243c15285f812dc3859b29c0e078",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cef0c309388243c15285f812dc3859b29c0e078",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cef0c309388243c15285f812dc3859b29c0e078",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cef0c309388243c15285f812dc3859b29c0e078/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5b606dd86d97ce590fe19a6c60f1f823150e912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b606dd86d97ce590fe19a6c60f1f823150e912",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5b606dd86d97ce590fe19a6c60f1f823150e912"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 27,
      "deletions": 26
    },
    "files": [
      {
        "sha": "026585b295f19eaa7352548d34d15b5907cc1fae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 16,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cef0c309388243c15285f812dc3859b29c0e078/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cef0c309388243c15285f812dc3859b29c0e078/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3cef0c309388243c15285f812dc3859b29c0e078",
        "patch": "@@ -855,6 +855,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         view.SetBackend(dummy);\n         }\n \n+        if (!tx.IsCoinBase() && !Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view)))\n+            return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n+\n         // Check for non-standard pay-to-script-hash in inputs\n         if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n             return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n@@ -921,10 +924,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n-        {\n-            return error(\"AcceptToMemoryPool: ConnectInputs failed %s\", hash.ToString());\n-        }\n+        if (!CheckInputsScripts(tx, state, view, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n+            return error(\"%s: CheckInputsScripts failed with STANDARD flags %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -935,10 +936,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // There is a similar check in CreateNewBlock() to prevent creating\n         // invalid blocks, however allowing such transactions into the mempool\n         // can be exploited as a DoS attack.\n-        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n-        {\n-            return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n-        }\n+        if (!CheckInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+            return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputsScripts failed against MANDATORY but not STANDARD flags %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry);\n@@ -1272,11 +1271,8 @@ int GetSpendHeight(const CCoinsViewEfficient& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, unsigned int flags, bool cacheStore, std::vector<CScriptCheck>* pvChecks)\n {\n-        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n-            return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n-\n         if (pvChecks)\n             pvChecks->reserve(tx.vin.size());\n \n@@ -1287,7 +1283,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Skip ECDSA signature verification when connecting blocks\n         // before the last block chain checkpoint. This is safe because block merkle hashes are\n         // still computed and checked, and any change will be caught at the next checkpoint.\n-        if (fScriptChecks) {\n             for (unsigned int i = 0; i < tx.vin.size(); i++) {\n                 const COutPoint &prevout = tx.vin[i].prevout;\n                 const CCoins* coins = inputs.AccessCoins(prevout.hash);\n@@ -1321,7 +1316,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     return state.DoS(100,false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n                 }\n             }\n-        }\n \n     return true;\n }\n@@ -1621,15 +1615,18 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n \n         if (!tx.IsCoinBase())\n         {\n+            // This check will be repeated in Consensus::CheckTxInputs, but scoring DoS 0 if fails instead of 100\n             if (!view.HaveInputs(tx))\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n+            if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view)))\n+                return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n \n             nFees += view.GetValueIn(tx) - Consensus::GetValueOut(tx);\n \n             std::vector<CScriptCheck> vChecks;\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n-                return false;\n+            if (fScriptChecks && !CheckInputsScripts(tx, state, view, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n+                return error(\"%s: CheckInputsScripts failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n             control.Add(vChecks);\n         }\n "
      },
      {
        "sha": "3ff18ea2f0ddd3a99251d8bcd86804e966ec181a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cef0c309388243c15285f812dc3859b29c0e078/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cef0c309388243c15285f812dc3859b29c0e078/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3cef0c309388243c15285f812dc3859b29c0e078",
        "patch": "@@ -226,13 +226,13 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n /**\n- * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n+ * Check whether all inputs of this transaction are valid (scripts and sigs)\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n- * instead of being performed inline.\n+ * instead of being performed inline. This does not check double spends and amounts.\n  * Preconditions: tx.IsCoinBase() is false\n  */\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n-                 unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n+bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& view, \n+                        unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n \n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);"
      },
      {
        "sha": "a098cf518cc5de6a6a6c32079b724c093e3534fe",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cef0c309388243c15285f812dc3859b29c0e078/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cef0c309388243c15285f812dc3859b29c0e078/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3cef0c309388243c15285f812dc3859b29c0e078",
        "patch": "@@ -263,10 +263,11 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n                 std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             }\n \n-            if (!view.HaveInputs(tx))\n+            CValidationState state;\n+            if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view))) {\n+                error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n                 continue;\n-\n-            CAmount nTxFees = view.GetValueIn(tx) - Consensus::GetValueOut(tx);\n+            }\n \n             unsigned int nTxSigOps = Consensus::GetSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n@@ -275,9 +276,12 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n             // Note that flags: we don't want to set mempool/IsStandard()\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n-            CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+            if (!CheckInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true)) {\n+                error(\"%s: CheckInputsScripts failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n                 continue;\n+            }\n+\n+            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n             UpdateCoins(tx, state, view, nHeight);\n "
      },
      {
        "sha": "8952414b3f57bc60795785df1f68f214bb1bb88d",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cef0c309388243c15285f812dc3859b29c0e078/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cef0c309388243c15285f812dc3859b29c0e078/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=3cef0c309388243c15285f812dc3859b29c0e078",
        "patch": "@@ -28,7 +28,7 @@ static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n  * but in the future other flags may be added, such as a soft-fork to enforce\n  * strict DER encoding.\n  * \n- * Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n+ * Failing one of these tests may trigger a DoS ban - see CheckInputsScripts() for\n  * details.\n  */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;"
      }
    ]
  },
  {
    "sha": "808fd8a9ee296b501ac7fc6a1e51ba68a564ba90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDhmZDhhOWVlMjk2YjUwMWFjN2ZjNmExZTUxYmE2OGE1NjRiYTkw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-28T12:54:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:55Z"
      },
      "message": "fix Consensus::GetValueOut",
      "tree": {
        "sha": "46b9e451e4e5bb242fa73150bcf54c89d333c840",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46b9e451e4e5bb242fa73150bcf54c89d333c840"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/808fd8a9ee296b501ac7fc6a1e51ba68a564ba90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/808fd8a9ee296b501ac7fc6a1e51ba68a564ba90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/808fd8a9ee296b501ac7fc6a1e51ba68a564ba90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/808fd8a9ee296b501ac7fc6a1e51ba68a564ba90/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cef0c309388243c15285f812dc3859b29c0e078",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cef0c309388243c15285f812dc3859b29c0e078",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cef0c309388243c15285f812dc3859b29c0e078"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2f0d51e390555fba4a9786bf5cc5663d372311a2",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/808fd8a9ee296b501ac7fc6a1e51ba68a564ba90/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/808fd8a9ee296b501ac7fc6a1e51ba68a564ba90/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=808fd8a9ee296b501ac7fc6a1e51ba68a564ba90",
        "patch": "@@ -281,7 +281,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n                 continue;\n             }\n \n-            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n+            CAmount nTxFees = view.GetValueIn(tx) - Consensus::GetValueOut(tx);\n \n             UpdateCoins(tx, state, view, nHeight);\n "
      }
    ]
  },
  {
    "sha": "d97d8a57af623d5458adab14d9e939f13536f7aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTdkOGE1N2FmNjIzZDU0NThhZGFiMTRkOWU5MzlmMTM1MzZmN2Fh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-02T00:16:34Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:55Z"
      },
      "message": "Consensus: Refactor: Decouple CheckInputsScripts() from global nScriptCheckThreads (remove pvChecks param)",
      "tree": {
        "sha": "41fea55c7fca101fd7309342991428ed114b6bb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41fea55c7fca101fd7309342991428ed114b6bb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d97d8a57af623d5458adab14d9e939f13536f7aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d97d8a57af623d5458adab14d9e939f13536f7aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d97d8a57af623d5458adab14d9e939f13536f7aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d97d8a57af623d5458adab14d9e939f13536f7aa/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "808fd8a9ee296b501ac7fc6a1e51ba68a564ba90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/808fd8a9ee296b501ac7fc6a1e51ba68a564ba90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/808fd8a9ee296b501ac7fc6a1e51ba68a564ba90"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 24,
      "deletions": 15
    },
    "files": [
      {
        "sha": "9275cc9a61cacaa05a3e89274b8845af0ce89912",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 12,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97d8a57af623d5458adab14d9e939f13536f7aa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97d8a57af623d5458adab14d9e939f13536f7aa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d97d8a57af623d5458adab14d9e939f13536f7aa",
        "patch": "@@ -1271,11 +1271,8 @@ int GetSpendHeight(const CCoinsViewEfficient& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, unsigned int flags, bool cacheStore, std::vector<CScriptCheck>* pvChecks)\n+bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, unsigned int flags, bool cacheStore)\n {\n-        if (pvChecks)\n-            pvChecks->reserve(tx.vin.size());\n-\n         // The first loop above does all the inexpensive checks.\n         // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n         // Helps prevent CPU exhaustion attacks.\n@@ -1290,10 +1287,7 @@ bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const C\n \n                 // Verify signature\n                 CScriptCheck check(*coins, tx, i, flags, cacheStore);\n-                if (pvChecks) {\n-                    pvChecks->push_back(CScriptCheck());\n-                    check.swap(pvChecks->back());\n-                } else if (!check()) {\n+                if (!check()) {\n                     if (flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) {\n                         // Check whether the failure was caused by a\n                         // non-mandatory script verification check, such as\n@@ -1624,10 +1618,26 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n \n             nFees += view.GetValueIn(tx) - Consensus::GetValueOut(tx);\n \n-            std::vector<CScriptCheck> vChecks;\n-            if (fScriptChecks && !CheckInputsScripts(tx, state, view, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n-                return error(\"%s: CheckInputsScripts failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n-            control.Add(vChecks);\n+            if (fScriptChecks) {\n+                // If nScriptCheckThreads, script checks are pushed onto it instead of being performed inline. \n+                if (nScriptCheckThreads) {\n+                    std::vector<CScriptCheck> vChecks;\n+                    vChecks.reserve(tx.vin.size());\n+\n+                    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+                        const COutPoint &prevout = tx.vin[i].prevout;\n+                        const CCoins* coins = view.AccessCoins(prevout.hash);\n+                        assert(coins);\n+\n+                        // Verify signature\n+                        CScriptCheck check(*coins, tx, i, flags, false);\n+                        vChecks.push_back(CScriptCheck());\n+                        check.swap(vChecks.back());\n+                    }\n+                    control.Add(vChecks);\n+                } else if (!CheckInputsScripts(tx, state, view, flags, false))\n+                    return error(\"%s: CheckInputsScripts failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n+            }\n         }\n \n         CTxUndo undoDummy;"
      },
      {
        "sha": "e6c5c132afb2232caaa1ffdad5dbde11dbd53c76",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97d8a57af623d5458adab14d9e939f13536f7aa/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97d8a57af623d5458adab14d9e939f13536f7aa/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d97d8a57af623d5458adab14d9e939f13536f7aa",
        "patch": "@@ -227,12 +227,11 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n \n /**\n  * Check whether all inputs of this transaction are valid (scripts and sigs)\n- * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n- * instead of being performed inline. This does not check double spends and amounts.\n+ * This does not modify the UTXO set. This does not check double spends and amounts.\n  * Preconditions: tx.IsCoinBase() is false\n  */\n bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& view, \n-                        unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n+                        unsigned int flags, bool cacheStore);\n \n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);"
      }
    ]
  },
  {
    "sha": "0715b2387ef972b4e9509fbfb94a70733cb5e571",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzE1YjIzODdlZjk3MmI0ZTk1MDlmYmZiOTRhNzA3MzNjYjVlNTcx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-01T19:55:16Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:56Z"
      },
      "message": "Consensus: Introduce Consensus::CheckTxInputsScripts() and use it instead of CheckInputsScripts() when possible",
      "tree": {
        "sha": "4da6667fc992ab2f73831be3db5602b359263d53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4da6667fc992ab2f73831be3db5602b359263d53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0715b2387ef972b4e9509fbfb94a70733cb5e571",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0715b2387ef972b4e9509fbfb94a70733cb5e571",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0715b2387ef972b4e9509fbfb94a70733cb5e571",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0715b2387ef972b4e9509fbfb94a70733cb5e571/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d97d8a57af623d5458adab14d9e939f13536f7aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d97d8a57af623d5458adab14d9e939f13536f7aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d97d8a57af623d5458adab14d9e939f13536f7aa"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 30,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e55fe5cf86cdac1e6c099ad46190d102bb2f63ec",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0715b2387ef972b4e9509fbfb94a70733cb5e571/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0715b2387ef972b4e9509fbfb94a70733cb5e571/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=0715b2387ef972b4e9509fbfb94a70733cb5e571",
        "patch": "@@ -11,6 +11,7 @@\n #include \"pow.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"script/sigcache.h\"\n #include \"tinyformat.h\"\n #include \"utilmoneystr.h\"\n #include \"version.h\"\n@@ -175,6 +176,23 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, c\n     return true;\n }\n \n+bool Consensus::CheckTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, bool cacheStore, unsigned int flags)\n+{\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        const COutPoint& prevout = tx.vin[i].prevout;\n+        const CCoins* coins = inputs.AccessCoins(prevout.hash);\n+        assert(coins);\n+\n+        const CScript& scriptPubKey = coins->vout[prevout.n].scriptPubKey;\n+        CachingTransactionSignatureChecker checker(&tx, i, cacheStore);\n+        ScriptError scriptError(SCRIPT_ERR_UNKNOWN_ERROR);\n+        if (!VerifyScript(scriptPubKey, tx.vin[i].scriptSig, flags, checker, &scriptError))\n+            return state.DoS(100, false, REJECT_INVALID, \n+                             strprintf(\"script-verify-failed (in input %d: %s)\", i, ScriptErrorString(scriptError)));\n+    }\n+    return true;\n+}\n+\n bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n {\n     unsigned int nFound = 0;"
      },
      {
        "sha": "3dd54a4003401a7b6e3245637d3c5e227251cf44",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0715b2387ef972b4e9509fbfb94a70733cb5e571/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0715b2387ef972b4e9509fbfb94a70733cb5e571/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=0715b2387ef972b4e9509fbfb94a70733cb5e571",
        "patch": "@@ -50,6 +50,13 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n  * This does not modify the UTXO set. This does not check scripts and sigs.\n  */\n bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, int nSpendHeight);\n+/**\n+ * Preconditions: tx.IsCoinBase() is false.\n+ * Check whether all inputs of this transaction are valid (scripts and sigs)\n+ * This does not modify the UTXO set. This does not check double spends and amounts.\n+ * This is the more expensive consensus check for a transaction, do it last.\n+ */\n+bool CheckTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, bool cacheStore, unsigned int flags);\n \n /** Utility functions */\n /**"
      },
      {
        "sha": "1b9705a0eb80823075790293e0b950b6d515a7f2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0715b2387ef972b4e9509fbfb94a70733cb5e571/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0715b2387ef972b4e9509fbfb94a70733cb5e571/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0715b2387ef972b4e9509fbfb94a70733cb5e571",
        "patch": "@@ -936,7 +936,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // There is a similar check in CreateNewBlock() to prevent creating\n         // invalid blocks, however allowing such transactions into the mempool\n         // can be exploited as a DoS attack.\n-        if (!CheckInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+        if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n             return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputsScripts failed against MANDATORY but not STANDARD flags %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Store transaction in memory\n@@ -1635,8 +1635,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n                         check.swap(vChecks.back());\n                     }\n                     control.Add(vChecks);\n-                } else if (!CheckInputsScripts(tx, state, view, flags, false))\n-                    return error(\"%s: CheckInputsScripts failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n+                } else if (!Consensus::CheckTxInputsScripts(tx, state, view, false, flags))\n+                    return error(\"%s: Consensus::CheckTxInputsScripts failed %s %s\", __func__, state.GetRejectReason(), tx.GetHash().ToString());\n             }\n         }\n "
      },
      {
        "sha": "3e9bd8ca1d8742e3fb8607ef9b892523b83f778f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0715b2387ef972b4e9509fbfb94a70733cb5e571/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0715b2387ef972b4e9509fbfb94a70733cb5e571/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0715b2387ef972b4e9509fbfb94a70733cb5e571",
        "patch": "@@ -276,8 +276,8 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n             // Note that flags: we don't want to set mempool/IsStandard()\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n-            if (!CheckInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true)) {\n-                error(\"%s: CheckInputsScripts failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n+            if (!Consensus::CheckTxInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true)) {\n+                error(\"%s: Consensus::CheckTxInputsScripts failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n                 continue;\n             }\n "
      }
    ]
  },
  {
    "sha": "0f8d996645bebc2253e1645ff165a51510cf4bd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjhkOTk2NjQ1YmViYzIyNTNlMTY0NWZmMTY1YTUxNTEwY2Y0YmQ4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-15T05:57:16Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:56Z"
      },
      "message": "Consensus: Refactor: Introduce Consensus::GetFlags\n\nand use it instead of MANDATORY_SCRIPT_VERIFY_FLAGS in miner::CreateNewBlock()",
      "tree": {
        "sha": "7f0f2f20a51f22bf854591bb3c8036a7af53bbc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f0f2f20a51f22bf854591bb3c8036a7af53bbc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f8d996645bebc2253e1645ff165a51510cf4bd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8d996645bebc2253e1645ff165a51510cf4bd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f8d996645bebc2253e1645ff165a51510cf4bd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8d996645bebc2253e1645ff165a51510cf4bd8/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0715b2387ef972b4e9509fbfb94a70733cb5e571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0715b2387ef972b4e9509fbfb94a70733cb5e571",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0715b2387ef972b4e9509fbfb94a70733cb5e571"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 20,
      "deletions": 13
    },
    "files": [
      {
        "sha": "29299c5637b17c3d77b3e7c1e0a7e6c39ae89afc",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8d996645bebc2253e1645ff165a51510cf4bd8/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8d996645bebc2253e1645ff165a51510cf4bd8/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=0f8d996645bebc2253e1645ff165a51510cf4bd8",
        "patch": "@@ -11,6 +11,7 @@\n #include \"pow.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"script/interpreter.h\"\n #include \"script/sigcache.h\"\n #include \"tinyformat.h\"\n #include \"utilmoneystr.h\"\n@@ -232,6 +233,17 @@ bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& s\n     return true;\n }\n \n+unsigned Consensus::GetFlags(const CBlock& block, CBlockIndex* pindex, const Consensus::Params& params)\n+{\n+    int64_t nBIP16SwitchTime = 1333238400;\n+    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n+    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n+\n+    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, params.nMajorityEnforceBlockUpgrade, params.nMajorityWindow))\n+        flags |= SCRIPT_VERIFY_DERSIG;\n+    return flags;\n+}\n+\n unsigned int Consensus::GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;"
      },
      {
        "sha": "c007bdeb3d0c405e6fbea51fd31a03785a0c9500",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8d996645bebc2253e1645ff165a51510cf4bd8/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8d996645bebc2253e1645ff165a51510cf4bd8/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=0f8d996645bebc2253e1645ff165a51510cf4bd8",
        "patch": "@@ -59,6 +59,11 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n bool CheckTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, bool cacheStore, unsigned int flags);\n \n /** Utility functions */\n+/**\n+ * BIP16 didn't become active until Apr 1 2012\n+ * Starts enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded\n+ */\n+unsigned int GetFlags(const CBlock& block, CBlockIndex* pindex, const Consensus::Params& params);\n /**\n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n  * @return number of sigops this transaction's outputs will produce when spent"
      },
      {
        "sha": "65dc7d5d05ce52bfd887b0e2a4bc75a33829ae7d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8d996645bebc2253e1645ff165a51510cf4bd8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8d996645bebc2253e1645ff165a51510cf4bd8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0f8d996645bebc2253e1645ff165a51510cf4bd8",
        "patch": "@@ -1573,22 +1573,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n         }\n     }\n-\n-    // BIP16 didn't become active until Apr 1 2012\n-    int64_t nBIP16SwitchTime = 1333238400;\n-    bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n-\n-    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n-\n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, params.nMajorityEnforceBlockUpgrade, params.nMajorityWindow)) {\n-        flags |= SCRIPT_VERIFY_DERSIG;\n-    }\n-\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n+    unsigned int flags = Consensus::GetFlags(block, pindex, Params().GetConsensus());\n     int64_t nTimeStart = GetTimeMicros();\n     CAmount nFees = 0;\n     int nInputs = 0;"
      },
      {
        "sha": "3ddad4162c2b03b7ed93fd83dc36c6bc843e875f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8d996645bebc2253e1645ff165a51510cf4bd8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8d996645bebc2253e1645ff165a51510cf4bd8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0f8d996645bebc2253e1645ff165a51510cf4bd8",
        "patch": "@@ -229,6 +229,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n \n         TxPriorityCompare comparer(fSortedByFee);\n         std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n+        unsigned int flags = Consensus::GetFlags(*pblock, pindexPrev, Params().GetConsensus());\n \n         while (!vecPriority.empty())\n         {\n@@ -276,7 +277,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n             // Note that flags: we don't want to set mempool/IsStandard()\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n-            if (!Consensus::CheckTxInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true)) {\n+            if (!Consensus::CheckTxInputsScripts(tx, state, view, flags, true)) {\n                 error(\"%s: Consensus::CheckTxInputsScripts failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n                 continue;\n             }"
      }
    ]
  },
  {
    "sha": "658bd6f61babb0070dbdaa4e7bb107f5bc130ac2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NThiZDZmNjFiYWJiMDA3MGRiZGFhNGU3YmIxMDdmNWJjMTMwYWMy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-11T08:19:56Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:56Z"
      },
      "message": "Consensus: Refactor: Separate consensus version of IsFinalTx()",
      "tree": {
        "sha": "5b698f676dea0144ebcb92f759759af0964871b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b698f676dea0144ebcb92f759759af0964871b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f8d996645bebc2253e1645ff165a51510cf4bd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8d996645bebc2253e1645ff165a51510cf4bd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f8d996645bebc2253e1645ff165a51510cf4bd8"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6b808ed8cafc303775ebc1ac47bbbe10575afe28",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=658bd6f61babb0070dbdaa4e7bb107f5bc130ac2",
        "patch": "@@ -45,6 +45,7 @@ bool CheckBlock(const CBlock& block, int64_t nTime, CValidationState& state, con\n \n /** Context-dependent validity checks */\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex* pindexPrev, const Consensus::Params& params);\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n /**\n  * Check whether all inputs of this transaction are valid (no double spends and amounts)\n  * This does not modify the UTXO set. This does not check scripts and sigs."
      },
      {
        "sha": "2618e53572bac9d07212aa168f652c59adf90d76",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=658bd6f61babb0070dbdaa4e7bb107f5bc130ac2",
        "patch": "@@ -649,10 +649,15 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         nBlockHeight = chainActive.Height();\n     if (nBlockTime == 0)\n         nBlockTime = GetAdjustedTime();\n+    return Consensus::IsFinalTx(tx, nBlockHeight, nBlockTime);\n+}\n+\n+bool Consensus::IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        if (!txin.IsFinal())\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        if (!tx.vin[i].IsFinal())\n             return false;\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "d183008475239d000aa74d831fdc563774396993",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTgzMDA4NDc1MjM5ZDAwMGFhNzRkODMxZmRjNTYzNzc0Mzk2OTkz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-11T09:05:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:56Z"
      },
      "message": "Consensus: Refactor: Consensus version of Consensus::ContextualCheckBlock()",
      "tree": {
        "sha": "4cf38d24e0626def70a9e2675d1283c38994f89a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cf38d24e0626def70a9e2675d1283c38994f89a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d183008475239d000aa74d831fdc563774396993",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d183008475239d000aa74d831fdc563774396993",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d183008475239d000aa74d831fdc563774396993",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d183008475239d000aa74d831fdc563774396993/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "658bd6f61babb0070dbdaa4e7bb107f5bc130ac2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/658bd6f61babb0070dbdaa4e7bb107f5bc130ac2"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 12,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e435f6e982571779c02cb98d77d1e42a50b6b5a4",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d183008475239d000aa74d831fdc563774396993/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d183008475239d000aa74d831fdc563774396993/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=d183008475239d000aa74d831fdc563774396993",
        "patch": "@@ -58,6 +58,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n  * This is the more expensive consensus check for a transaction, do it last.\n  */\n bool CheckTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, bool cacheStore, unsigned int flags);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, const CBlockIndex* pindexPrev);\n \n /** Utility functions */\n /**"
      },
      {
        "sha": "0db58d2550dd54906ce1050f73b477db04ac6a92",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d183008475239d000aa74d831fdc563774396993/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d183008475239d000aa74d831fdc563774396993/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d183008475239d000aa74d831fdc563774396993",
        "patch": "@@ -2339,15 +2339,13 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex * const pindexPrev)\n+bool Consensus::ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, const CBlockIndex* pindexPrev)\n {\n-    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n-\n+    const int nHeight = pindexPrev->nHeight + 1;\n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n-        }\n+    for (unsigned int i = 1; i < block.vtx.size(); i++)\n+        if (!Consensus::IsFinalTx(block.vtx[i], nHeight, block.GetBlockTime()))\n+            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\");\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n@@ -2356,7 +2354,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, error(\"%s: block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\");\n         }\n     }\n \n@@ -2423,12 +2421,13 @@ bool AcceptBlock(CBlock& block, CValidationState& state, const Consensus::Params\n         return true;\n     }\n \n-    if ((!Consensus::CheckBlock(block, GetAdjustedTime(), state, params)) || !ContextualCheckBlock(block, state, params, pindex->pprev)) {\n+    if (!Consensus::CheckBlock(block, GetAdjustedTime(), state, params) || \n+        !Consensus::ContextualCheckBlock(block, state, params, pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n         }\n-        return error(\"%s: Consensus::CheckBlock || ContextualCheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n+        return error(\"%s: Consensus::CheckBlock || Consensus::ContextualCheckBlock: \", __func__, state.GetRejectReason().c_str());\n     }\n \n     int nHeight = pindex->nHeight;\n@@ -2499,8 +2498,8 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n         return error(\"%s: Consensus::CheckBlockHeader(): \", __func__, state.GetRejectReason().c_str());\n     if (!Consensus::CheckBlock(block, GetAdjustedTime(), state, params, fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n-    if (!ContextualCheckBlock(block, state, params, pindexPrev))\n-        return false;\n+    if (!Consensus::ContextualCheckBlock(block, state, params, pindexPrev))\n+        return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, state.GetRejectReason().c_str());\n     if (!ConnectBlock(block, state, params, &indexDummy, viewNew, true))\n         return false;\n     assert(state.IsValid());"
      },
      {
        "sha": "fff059ac2ea44e2ccdd15d90ce10b43a0a40aad7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d183008475239d000aa74d831fdc563774396993/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d183008475239d000aa74d831fdc563774396993/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d183008475239d000aa74d831fdc563774396993",
        "patch": "@@ -295,9 +295,6 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n-/** Context-dependent validity checks */\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, CBlockIndex *pindexPrev);\n-\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n "
      }
    ]
  },
  {
    "sha": "7f61727b724a14af1b5f6642936862fb7b51cebd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjYxNzI3YjcyNGExNGFmMWI1ZjY2NDI5MzY4NjJmYjdiNTFjZWJk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-15T00:21:12Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:56Z"
      },
      "message": "Consensus: MOVEONLY: Move IsFinalTx and ContextualCheckBlock to consensus.o and hide IsSuperMajority()",
      "tree": {
        "sha": "6d695448b247f399acbca761b9e56c23a827c9e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d695448b247f399acbca761b9e56c23a827c9e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f61727b724a14af1b5f6642936862fb7b51cebd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f61727b724a14af1b5f6642936862fb7b51cebd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f61727b724a14af1b5f6642936862fb7b51cebd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f61727b724a14af1b5f6642936862fb7b51cebd/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d183008475239d000aa74d831fdc563774396993",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d183008475239d000aa74d831fdc563774396993",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d183008475239d000aa74d831fdc563774396993"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 36,
      "deletions": 39
    },
    "files": [
      {
        "sha": "8a8f6f22a4966f946e98f12df22d1797ef893377",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 1,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f61727b724a14af1b5f6642936862fb7b51cebd/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f61727b724a14af1b5f6642936862fb7b51cebd/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=7f61727b724a14af1b5f6642936862fb7b51cebd",
        "patch": "@@ -194,7 +194,11 @@ bool Consensus::CheckTxInputsScripts(const CTransaction& tx, CValidationState& s\n     return true;\n }\n \n-bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n+/**\n+ * Returns true if there are nRequired or more blocks of minVersion or above\n+ * in the last nToCheck blocks, starting at pstart and going backwards.\n+ */\n+static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck)\n {\n     unsigned int nFound = 0;\n     for (unsigned int i = 0; i < nToCheck && nFound < nRequired && pstart != NULL; i++)\n@@ -233,6 +237,37 @@ bool Consensus::VerifyBlockHeader(const CBlockHeader& block, CValidationState& s\n     return true;\n }\n \n+bool Consensus::IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n+    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n+        return true;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        if (!tx.vin[i].IsFinal())\n+            return false;\n+    return true;\n+}\n+\n+bool Consensus::ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, const CBlockIndex* pindexPrev)\n+{\n+    const int nHeight = pindexPrev->nHeight + 1;\n+    // Check that all transactions are finalized\n+    for (unsigned int i = 1; i < block.vtx.size(); i++)\n+        if (!Consensus::IsFinalTx(block.vtx[i], nHeight, block.GetBlockTime()))\n+            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\");\n+\n+    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n+    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n+    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, params.nMajorityEnforceBlockUpgrade, params.nMajorityWindow))\n+    {\n+        CScript expect = CScript() << nHeight;\n+        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n+            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\");\n+        }\n+    }\n+    return true;\n+}\n+\n unsigned Consensus::GetFlags(const CBlock& block, CBlockIndex* pindex, const Consensus::Params& params)\n {\n     int64_t nBIP16SwitchTime = 1333238400;"
      },
      {
        "sha": "58b8169550c38576c3171c39858f478e4238408b",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f61727b724a14af1b5f6642936862fb7b51cebd/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f61727b724a14af1b5f6642936862fb7b51cebd/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=7f61727b724a14af1b5f6642936862fb7b51cebd",
        "patch": "@@ -93,10 +93,4 @@ CAmount GetValueOut(const CTransaction& tx);\n \n } // namespace Consensus\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last nToCheck blocks, starting at pstart and going backwards.\n- */\n-bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, unsigned nToCheck);\n-\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "6f224b766c5ed821608580b5ad958679bbcfd20a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f61727b724a14af1b5f6642936862fb7b51cebd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f61727b724a14af1b5f6642936862fb7b51cebd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7f61727b724a14af1b5f6642936862fb7b51cebd",
        "patch": "@@ -652,16 +652,6 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return Consensus::IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-bool Consensus::IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n-{\n-    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n-        return true;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        if (!tx.vin[i].IsFinal())\n-            return false;\n-    return true;\n-}\n-\n /**\n  * Check transaction inputs to mitigate two\n  * potential denial-of-service attacks:\n@@ -2339,28 +2329,6 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n-bool Consensus::ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, const CBlockIndex* pindexPrev)\n-{\n-    const int nHeight = pindexPrev->nHeight + 1;\n-    // Check that all transactions are finalized\n-    for (unsigned int i = 1; i < block.vtx.size(); i++)\n-        if (!Consensus::IsFinalTx(block.vtx[i], nHeight, block.GetBlockTime()))\n-            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\");\n-\n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, params.nMajorityEnforceBlockUpgrade, params.nMajorityWindow))\n-    {\n-        CScript expect = CScript() << nHeight;\n-        if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n-            !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\");\n-        }\n-    }\n-\n-    return true;\n-}\n-\n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, CBlockIndex** ppindex)\n {\n     AssertLockHeld(cs_main);"
      }
    ]
  },
  {
    "sha": "48a2a4fc3c69ea70bf0acda7c61df0d4b9581047",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGEyYTRmYzNjNjllYTcwYmYwYWNkYTdjNjFkZjBkNGI5NTgxMDQ3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-28T13:10:19Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:57Z"
      },
      "message": "Consensus: Introduce Consensus::VerifyTx()",
      "tree": {
        "sha": "9e03e7e7ae25037daf785be42604c734334debee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e03e7e7ae25037daf785be42604c734334debee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f61727b724a14af1b5f6642936862fb7b51cebd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f61727b724a14af1b5f6642936862fb7b51cebd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f61727b724a14af1b5f6642936862fb7b51cebd"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "59fb819ecbbbc02864e69a44b2954bbef1ec9381",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=48a2a4fc3c69ea70bf0acda7c61df0d4b9581047",
        "patch": "@@ -194,6 +194,21 @@ bool Consensus::CheckTxInputsScripts(const CTransaction& tx, CValidationState& s\n     return true;\n }\n \n+bool Consensus::VerifyTx(const CTransaction& tx, CValidationState &state, int nBlockHeight, int64_t nBlockTime, const CCoinsViewEfficient& inputs, int nSpendHeight, bool cacheStore, unsigned int flags)\n+{\n+    if (!CheckTx(tx, state))\n+        return false;\n+    if (!IsFinalTx(tx, nBlockHeight, nBlockTime))\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n+    if (!CheckTxInputs(tx, state, inputs, nSpendHeight))\n+        return false;\n+    if (GetSigOpCount(tx, inputs) > MAX_BLOCK_SIGOPS)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n+    if (!CheckTxInputsScripts(tx, state, inputs, cacheStore, flags))\n+        return false;        \n+    return true;\n+}\n+\n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n  * in the last nToCheck blocks, starting at pstart and going backwards."
      },
      {
        "sha": "faf3d9560720633ada455758d7de5c58224a5850",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=48a2a4fc3c69ea70bf0acda7c61df0d4b9581047",
        "patch": "@@ -35,6 +35,7 @@ static const CAmount MAX_MONEY = 21000000 * COIN;\n namespace Consensus {\n \n /** Full verification functions */\n+bool VerifyTx(const CTransaction& tx, CValidationState &state, int nBlockHeight, int64_t nBlockTime, const CCoinsViewEfficient& inputs, int nSpendHeight, bool cacheStore, unsigned int flags);\n bool VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev);\n \n /** Context-independent validity checks */"
      }
    ]
  },
  {
    "sha": "4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzBlMzAxNGYzYzQ2ZDZiYTI1NzliYTk4NmJjNmVkZDZiMTZhM2Vl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-15T06:35:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:57Z"
      },
      "message": "Consensus: Refactor: Introduce Consensus::EnforceBIP30",
      "tree": {
        "sha": "1d3c1cf3ce1114f4e20c3e961f1f0257a64a16ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d3c1cf3ce1114f4e20c3e961f1f0257a64a16ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48a2a4fc3c69ea70bf0acda7c61df0d4b9581047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48a2a4fc3c69ea70bf0acda7c61df0d4b9581047"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 30,
      "deletions": 26
    },
    "files": [
      {
        "sha": "2b45e5ac5d3ede52856f7c54877dde5c0d42d75d",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee",
        "patch": "@@ -294,6 +294,18 @@ unsigned Consensus::GetFlags(const CBlock& block, CBlockIndex* pindex, const Con\n     return flags;\n }\n \n+bool Consensus::EnforceBIP30(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev, const CCoinsViewEfficient& inputs)\n+{\n+    if (!(pindexPrev->nHeight==91842 && pindexPrev->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n+        (pindexPrev->nHeight==91880 && pindexPrev->GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")))\n+        for (unsigned int i = 1; i < block.vtx.size(); i++) {\n+            const CCoins* coins = inputs.AccessCoins(block.vtx[i].GetHash());\n+            if (coins && !coins->IsPruned())\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-BIP30\");\n+        }\n+    return true;\n+}\n+\n unsigned int Consensus::GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;"
      },
      {
        "sha": "a38dee5b5f375311958609be97e34c30503fa66c",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee",
        "patch": "@@ -60,6 +60,21 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n  */\n bool CheckTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, bool cacheStore, unsigned int flags);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, const CBlockIndex* pindexPrev);\n+/**\n+ * Do not allow blocks that contain transactions which 'overwrite' older transactions,\n+ * unless those are already completely spent.\n+ * If such overwrites are allowed, coinbases and transactions depending upon those\n+ * can be duplicated to remove the ability to spend the first instance -- even after\n+ * being sent to another address.\n+ * See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n+ * This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n+ * already refuses previously-known transaction ids entirely.\n+ * This rule was originally applied all blocks whose timestamp was after March 15, 2012, 0:00 UTC.\n+ * Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n+ * two in the chain that violate it. This prevents exploiting the issue against nodes in their\n+ * initial block download.\n+ */\n+bool EnforceBIP30(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev, const CCoinsViewEfficient& inputs);\n \n /** Utility functions */\n /**"
      },
      {
        "sha": "5e7470c38135994473848ccc43efcdccdffe60a4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 26,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee",
        "patch": "@@ -1542,34 +1542,10 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n             view.SetBestBlock(pindex->GetBlockHash());\n         return true;\n     }\n+    if (!Consensus::EnforceBIP30(block, state, pindex, view))\n+        return error(\"ConnectBlock(): tried to overwrite transaction\");\n \n     bool fScriptChecks = pindex->nHeight >= Checkpoints::GetTotalBlocksEstimate();\n-\n-    // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n-    // unless those are already completely spent.\n-    // If such overwrites are allowed, coinbases and transactions depending upon those\n-    // can be duplicated to remove the ability to spend the first instance -- even after\n-    // being sent to another address.\n-    // See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n-    // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n-    // already refuses previously-known transaction ids entirely.\n-    // This rule was originally applied all blocks whose timestamp was after March 15, 2012, 0:00 UTC.\n-    // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n-    // two in the chain that violate it. This prevents exploiting the issue against nodes in their\n-    // initial block download.\n-    bool fEnforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n-                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n-                           (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n-    if (fEnforceBIP30) {\n-        BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-            const CCoins* coins = view.AccessCoins(tx.GetHash());\n-            if (coins && !coins->IsPruned())\n-                return state.DoS(100, error(\"ConnectBlock(): tried to overwrite transaction\"),\n-                                 REJECT_INVALID, \"bad-txns-BIP30\");\n-        }\n-    }\n-    CBlockUndo blockundo;\n-\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     unsigned int flags = Consensus::GetFlags(block, pindex, Params().GetConsensus());\n@@ -1580,6 +1556,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, const Consensus:\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n+    CBlockUndo blockundo;\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {"
      }
    ]
  },
  {
    "sha": "19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWRhN2RkMWNjOTE4ZTdkNTQ1Y2JjNWFhNjBhOWRhYmI1YmUwZWQw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-28T13:17:32Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T23:52:57Z"
      },
      "message": "Consensus: Introduce Consensus::VerifyBlock()",
      "tree": {
        "sha": "c8b102ae84970b654a83729d2a7c3e4319c1c6fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8b102ae84970b654a83729d2a7c3e4319c1c6fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c0e3014f3c46d6ba2579ba986bc6edd6b16a3ee"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4718a7cc907f372530dbf7a1b01bcbd957e817a7",
        "filename": "src/consensus/consensus.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0/src/consensus/consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0/src/consensus/consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.cpp?ref=19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0",
        "patch": "@@ -283,6 +283,16 @@ bool Consensus::ContextualCheckBlock(const CBlock& block, CValidationState& stat\n     return true;\n }\n \n+bool Consensus::VerifyBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, const CBlockIndex* pindexPrev)\n+{\n+    if (!CheckBlock(block, nTime, state, params, true, true))\n+        return false;\n+    if (!ContextualCheckBlock(block, state, params, pindexPrev))\n+        return false;\n+    return true;    \n+}\n+\n+\n unsigned Consensus::GetFlags(const CBlock& block, CBlockIndex* pindex, const Consensus::Params& params)\n {\n     int64_t nBIP16SwitchTime = 1333238400;"
      },
      {
        "sha": "0a034e3ed5cdcf23301a84eb017a7203626f89d2",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0",
        "patch": "@@ -37,6 +37,7 @@ namespace Consensus {\n /** Full verification functions */\n bool VerifyTx(const CTransaction& tx, CValidationState &state, int nBlockHeight, int64_t nBlockTime, const CCoinsViewEfficient& inputs, int nSpendHeight, bool cacheStore, unsigned int flags);\n bool VerifyBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, CBlockIndex* pindexPrev);\n+bool VerifyBlock(const CBlock& block, CValidationState& state, const Consensus::Params& params, int64_t nTime, const CBlockIndex* pindexPrev);\n \n /** Context-independent validity checks */\n inline bool VerifyAmount(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }"
      }
    ]
  },
  {
    "sha": "aa77acdc0072806036168cc1b96f978a45ed1cc0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTc3YWNkYzAwNzI4MDYwMzYxNjhjYzFiOTZmOTc4YTQ1ZWQxY2Mw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T22:26:31Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:06:50Z"
      },
      "message": "Policy: Prepare utils for policy",
      "tree": {
        "sha": "1b8085af1a3c376a76b8952697583875f4a447aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b8085af1a3c376a76b8952697583875f4a447aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa77acdc0072806036168cc1b96f978a45ed1cc0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa77acdc0072806036168cc1b96f978a45ed1cc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa77acdc0072806036168cc1b96f978a45ed1cc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa77acdc0072806036168cc1b96f978a45ed1cc0/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19da7dd1cc918e7d545cbc5aa60a9dabb5be0ed0"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 47,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c53f539fd98b413438aab504e02fffb3d2edaddf",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 12,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa77acdc0072806036168cc1b96f978a45ed1cc0/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa77acdc0072806036168cc1b96f978a45ed1cc0/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=aa77acdc0072806036168cc1b96f978a45ed1cc0",
        "patch": "@@ -305,31 +305,49 @@ void ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n-std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+int64_t GetArg(const std::string& strArg, int64_t nDefault, const std::map<std::string, std::string>& mapArgs)\n {\n-    if (mapArgs.count(strArg))\n-        return mapArgs[strArg];\n-    return strDefault;\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return atoi64(it->second);\n+    return nDefault;\n }\n \n-int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+std::string GetArg(const std::string& strArg, const std::string strDefault, const std::map<std::string, std::string>& mapArgs)\n {\n-    if (mapArgs.count(strArg))\n-        return atoi64(mapArgs[strArg]);\n-    return nDefault;\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return it->second;\n+    return strDefault;\n }\n \n-bool GetBoolArg(const std::string& strArg, bool fDefault)\n+bool GetBoolArg(const std::string& strArg, bool fDefault, const std::map<std::string, std::string>& mapArgs)\n {\n-    if (mapArgs.count(strArg))\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n     {\n-        if (mapArgs[strArg].empty())\n+        if (it->second.empty())\n             return true;\n-        return (atoi(mapArgs[strArg]) != 0);\n+        return (atoi(it->second) != 0);\n     }\n     return fDefault;\n }\n \n+std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+{\n+    return GetArg(strArg, strDefault, mapArgs);\n+}\n+\n+int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+{\n+    return GetArg(strArg, nDefault, mapArgs);\n+}\n+\n+bool GetBoolArg(const std::string& strArg, bool fDefault)\n+{\n+    return GetBoolArg(strArg, fDefault, mapArgs);\n+}\n+\n bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     if (mapArgs.count(strArg))\n@@ -361,6 +379,14 @@ std::string HelpMessageOpt(const std::string &option, const std::string &message\n            std::string(\"\\n\\n\");\n }\n \n+std::string HelpMessagesOpt(std::vector<std::pair<std::string, std::string> > optionsHelp)\n+{\n+    std::string strUsage;\n+    for (unsigned int i=0; i < optionsHelp.size(); i++)\n+        strUsage += HelpMessageOpt(optionsHelp[i].first, optionsHelp[i].second);\n+    return strUsage;\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "6cf0a7b0f736f111069ba2a9d2e8daca64ac1706",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa77acdc0072806036168cc1b96f978a45ed1cc0/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa77acdc0072806036168cc1b96f978a45ed1cc0/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=aa77acdc0072806036168cc1b96f978a45ed1cc0",
        "patch": "@@ -125,6 +125,7 @@ inline bool IsSwitchChar(char c)\n  * @return command-line argument or default value\n  */\n std::string GetArg(const std::string& strArg, const std::string& strDefault);\n+std::string GetArg(const std::string& strArg, const std::string strDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Return integer argument or default value\n@@ -134,6 +135,7 @@ std::string GetArg(const std::string& strArg, const std::string& strDefault);\n  * @return command-line argument (0 if invalid number) or default value\n  */\n int64_t GetArg(const std::string& strArg, int64_t nDefault);\n+int64_t GetArg(const std::string& strArg, int64_t nDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Return boolean argument or default value\n@@ -143,6 +145,7 @@ int64_t GetArg(const std::string& strArg, int64_t nDefault);\n  * @return command-line argument or default value\n  */\n bool GetBoolArg(const std::string& strArg, bool fDefault);\n+bool GetBoolArg(const std::string& strArg, bool fDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Set an argument if it doesn't already have a value\n@@ -179,6 +182,12 @@ std::string HelpMessageGroup(const std::string& message);\n  */\n std::string HelpMessageOpt(const std::string& option, const std::string& message);\n \n+/**\n+ * @param optionsHelp a vector of string pairs to iteratively call HelpMessageOpt\n+ * @return the formatted string with all pairs\n+ */\n+std::string HelpMessagesOpt(std::vector<std::pair<std::string, std::string> > optionsHelp);\n+\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n "
      }
    ]
  },
  {
    "sha": "ee7c6e743cf85ba432f237ebc315a99ff16ab381",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTdjNmU3NDNjZjg1YmE0MzJmMjM3ZWJjMzE1YTk5ZmYxNmFiMzgx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-01T22:27:15Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:06:50Z"
      },
      "message": "Policy: Create CPolicy interface and CStandardPolicy implementation",
      "tree": {
        "sha": "5c0ae9511a528f93e2f3fea5ce9d78ad154a6ac5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c0ae9511a528f93e2f3fea5ce9d78ad154a6ac5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee7c6e743cf85ba432f237ebc315a99ff16ab381",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee7c6e743cf85ba432f237ebc315a99ff16ab381",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee7c6e743cf85ba432f237ebc315a99ff16ab381",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee7c6e743cf85ba432f237ebc315a99ff16ab381/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa77acdc0072806036168cc1b96f978a45ed1cc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa77acdc0072806036168cc1b96f978a45ed1cc0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa77acdc0072806036168cc1b96f978a45ed1cc0"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 109,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a1b5a6cb72c68899788a585541c8ae5599660a0f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee7c6e743cf85ba432f237ebc315a99ff16ab381/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee7c6e743cf85ba432f237ebc315a99ff16ab381/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ee7c6e743cf85ba432f237ebc315a99ff16ab381",
        "patch": "@@ -390,6 +390,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n+    strUsage += GetPolicyUsageStr(GetArg(\"-policy\", \"standard\"));\n+\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n@@ -731,6 +733,13 @@ bool AppInit2(boost::thread_group& threadGroup)\n     const char* pszP2SH = \"/P2SH/\";\n     COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n \n+    // Init Policy\n+    try {\n+        InitPolicyFromArgs(mapArgs);\n+    } catch(std::exception &e) {\n+        return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n+    }\n+\n     // Fee-per-kilobyte amount considered the same as \"free\"\n     // If you are mining, be careful setting this:\n     // if you set it to zero then"
      },
      {
        "sha": "5e3fbef43d952e1ee0c10944867bad2fcf1b9ba0",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee7c6e743cf85ba432f237ebc315a99ff16ab381/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee7c6e743cf85ba432f237ebc315a99ff16ab381/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=ee7c6e743cf85ba432f237ebc315a99ff16ab381",
        "patch": "@@ -8,7 +8,75 @@\n #include \"policy/policy.h\"\n \n #include \"amount.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n bool fIsBareMultisigStd = true;\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+public:\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)\n+{\n+    pCurrentPolicy = &Policy(policy);\n+}\n+\n+const CPolicy& Policy()\n+{\n+    assert(pCurrentPolicy);\n+    return *pCurrentPolicy;\n+}\n+\n+std::string GetPolicyUsageStr(std::string selectedPolicy)\n+{\n+    CPolicy& policy = standardPolicy;\n+    try {\n+        policy = Policy(selectedPolicy);\n+    } catch(std::exception &e) {\n+        selectedPolicy = \"standard\";\n+    }\n+    std::string strUsage = HelpMessageGroup(strprintf(_(\"Policy options (for policy: %s):\"), selectedPolicy));\n+    strUsage += HelpMessageOpt(\"-policy\", strprintf(_(\"Select a specific type of policy (default: %s)\"), \"standard\"));\n+    strUsage += HelpMessagesOpt(policy.GetOptionsHelp());\n+    return strUsage;\n+}\n+\n+void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs)\n+{\n+    SelectPolicy(GetArg(\"-policy\", \"standard\", mapArgs));\n+    pCurrentPolicy->InitFromArgs(mapArgs);\n+}\n+\n+/** CStandardPolicy implementation */\n+\n+std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHelp() const\n+{\n+    std::vector<std::pair<std::string, std::string> > optionsHelp;\n+    return optionsHelp;\n+}\n+\n+void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n+{\n+}"
      },
      {
        "sha": "4b919d4d0c71a1c07fad6f80210d8a90c876bb44",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee7c6e743cf85ba432f237ebc315a99ff16ab381/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee7c6e743cf85ba432f237ebc315a99ff16ab381/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=ee7c6e743cf85ba432f237ebc315a99ff16ab381",
        "patch": "@@ -9,6 +9,9 @@\n #include \"consensus/consensus.h\"\n #include \"script/interpreter.h\"\n \n+#include <map>\n+#include <string>\n+\n class CFeeRate;\n \n /** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n@@ -52,4 +55,31 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n extern bool fIsBareMultisigStd;\n extern CFeeRate minRelayTxFee;\n \n+/** Abstract interface for Policy */\n+class CPolicy\n+{\n+public:\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const = 0;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&) = 0;\n+};\n+\n+/** Return a CPolicy of the type described in the parameter string */\n+CPolicy& Policy(std::string);\n+/** Returns the current CPolicy. Requires calling SelectPolicy() or InitPolicyFromArgs() first */\n+const CPolicy& Policy();\n+/** Selects the current CPolicy of the type described in the parameter string */\n+void SelectPolicy(std::string);\n+/**\n+ * Returns a HelpMessage string with policy options\n+ *\n+ * @param selectedPolicy select a policy to show its options\n+ * @return the formatted string\n+ */\n+std::string GetPolicyUsageStr(std::string selectedPolicy);\n+/**\n+ * Selects the current CPolicy of the type described in the string on key \"-policy\" mapArgs\n+ * and calls CPolicy::InitFromArgs() with mapArgs.\n+ */\n+void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs);\n+\n #endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "cf435c37d7f501c7a8867ce7869163210e624937",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee7c6e743cf85ba432f237ebc315a99ff16ab381/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee7c6e743cf85ba432f237ebc315a99ff16ab381/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ee7c6e743cf85ba432f237ebc315a99ff16ab381",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"coinscache.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n@@ -33,6 +34,7 @@ BasicTestingSetup::BasicTestingSetup()\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n         SelectParams(CBaseChainParams::MAIN);\n+        SelectPolicy(\"standard\");\n }\n BasicTestingSetup::~BasicTestingSetup()\n {"
      }
    ]
  },
  {
    "sha": "551c7420360c550f4b0ea3fbf96b5b9131359feb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTFjNzQyMDM2MGM1NTBmNGIwZWEzZmJmOTZiNWI5MTMxMzU5ZmVi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-11T22:41:05Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:06:51Z"
      },
      "message": "Policy: MOVEONLY: script/standard.o::IsStandard() -> CPolicy::ApproveScript()",
      "tree": {
        "sha": "65a12f42413fd3e1ca21beb2005842ee0241bc89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65a12f42413fd3e1ca21beb2005842ee0241bc89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/551c7420360c550f4b0ea3fbf96b5b9131359feb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/551c7420360c550f4b0ea3fbf96b5b9131359feb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/551c7420360c550f4b0ea3fbf96b5b9131359feb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/551c7420360c550f4b0ea3fbf96b5b9131359feb/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee7c6e743cf85ba432f237ebc315a99ff16ab381",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee7c6e743cf85ba432f237ebc315a99ff16ab381",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee7c6e743cf85ba432f237ebc315a99ff16ab381"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 33,
      "deletions": 30
    },
    "files": [
      {
        "sha": "cf90c909e58756f1449249065317d0e1e598e8c0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=551c7420360c550f4b0ea3fbf96b5b9131359feb",
        "patch": "@@ -614,7 +614,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+        if (!Policy().ApproveScript(txout.scriptPubKey, whichType)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }"
      },
      {
        "sha": "819cf86534bf45f2db11e158dfcb76aa0ed0ffbd",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=551c7420360c550f4b0ea3fbf96b5b9131359feb",
        "patch": "@@ -23,6 +23,7 @@ class CStandardPolicy : public CPolicy\n public:\n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n     virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n };\n \n /** Global variables and their interfaces */\n@@ -80,3 +81,23 @@ std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHel\n void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n }\n+\n+bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType) const\n+{\n+    std::vector<std::vector<unsigned char> > vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n+}"
      },
      {
        "sha": "8a9ba05fb072fbccced49ef354338ebb331ed448",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=551c7420360c550f4b0ea3fbf96b5b9131359feb",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"consensus/consensus.h\"\n #include \"script/interpreter.h\"\n+#include \"script/standard.h\"\n \n #include <map>\n #include <string>\n@@ -61,6 +62,7 @@ class CPolicy\n public:\n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const = 0;\n     virtual void InitFromArgs(const std::map<std::string, std::string>&) = 0;\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const = 0;\n };\n \n /** Return a CPolicy of the type described in the parameter string */"
      },
      {
        "sha": "66657127ab85cf47c5c63ad8ea960a16978d2035",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=551c7420360c550f4b0ea3fbf96b5b9131359feb",
        "patch": "@@ -180,26 +180,6 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n     return -1;\n }\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n-{\n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n-\n-    if (whichType == TX_MULTISIG)\n-    {\n-        unsigned char m = vSolutions.front()[0];\n-        unsigned char n = vSolutions.back()[0];\n-        // Support up to x-of-3 multisig txns as standard\n-        if (n < 1 || n > 3)\n-            return false;\n-        if (m < 1 || m > n)\n-            return false;\n-    }\n-\n-    return whichType != TX_NONSTANDARD;\n-}\n-\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     vector<valtype> vSolutions;"
      },
      {
        "sha": "23c95c3683509a40905b7e440f416484e68a7a76",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=551c7420360c550f4b0ea3fbf96b5b9131359feb",
        "patch": "@@ -58,7 +58,6 @@ const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      },
      {
        "sha": "15d28fe815f43e8b3d37e32a327a27db7d2dbbb1",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551c7420360c550f4b0ea3fbf96b5b9131359feb/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=551c7420360c550f4b0ea3fbf96b5b9131359feb",
        "patch": "@@ -4,13 +4,13 @@\n \n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"policy/policy.h\"\n+#include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n-#include \"script/interpreter.h\"\n #include \"script/sign.h\"\n-#include \"uint256.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"uint256.h\"\n \n #ifdef ENABLE_WALLET\n #include \"wallet/wallet_ismine.h\"\n@@ -143,6 +143,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n \n BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n {\n+    const CPolicy& policy = Policy(\"standard\");\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n@@ -151,19 +152,19 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n \n     CScript a_and_b;\n     a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_and_b, whichType));\n+    BOOST_CHECK(policy.ApproveScript(a_and_b, whichType));\n \n     CScript a_or_b;\n     a_or_b  << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_or_b, whichType));\n+    BOOST_CHECK(policy.ApproveScript(a_or_b, whichType));\n \n     CScript escrow;\n     escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(escrow, whichType));\n+    BOOST_CHECK(policy.ApproveScript(escrow, whichType));\n \n     CScript one_of_four;\n     one_of_four << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << ToByteVector(key[3].GetPubKey()) << OP_4 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!::IsStandard(one_of_four, whichType));\n+    BOOST_CHECK(!policy.ApproveScript(one_of_four, whichType));\n \n     CScript malformed[6];\n     malformed[0] << OP_3 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n@@ -174,7 +175,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     malformed[5] << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey());\n \n     for (int i = 0; i < 6; i++)\n-        BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n+        BOOST_CHECK(!policy.ApproveScript(malformed[i], whichType));\n }\n \n BOOST_AUTO_TEST_CASE(multisig_Solver1)"
      }
    ]
  },
  {
    "sha": "ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDdjMWQ1MTMwYzk3OGM1ODVlNTliNWM0NGNjMGY5ODJmZGQwNzY0",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2014-10-30T12:26:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "Policy: Refactor: CTxOut::IsDust(CFeeRate) -> CPolicy::ApproveOutput(CTxOut)\n\nDecouples CTxOut from CFeeRate\nSimplifies IsDust() interface encapsulating the access to global minRelayTxFee\nAlso move the new GetDustThreshold() from CTxOut to Policy",
      "tree": {
        "sha": "1d20b9bf43c3712b2b17f6335e5e0d2aa3a29a19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d20b9bf43c3712b2b17f6335e5e0d2aa3a29a19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "551c7420360c550f4b0ea3fbf96b5b9131359feb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/551c7420360c550f4b0ea3fbf96b5b9131359feb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/551c7420360c550f4b0ea3fbf96b5b9131359feb"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 38,
      "deletions": 31
    },
    "files": [
      {
        "sha": "644d7968f5387f458083fb5e1d9e5a204bffdba9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "patch": "@@ -624,7 +624,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n         else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n             reason = \"bare-multisig\";\n             return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n+        } else if (Policy().ApproveOutput(txout)) {\n             reason = \"dust\";\n             return false;\n         }"
      },
      {
        "sha": "b0fcb460021620026672a129332e634f1a334e0f",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "patch": "@@ -8,6 +8,7 @@\n #include \"policy/policy.h\"\n \n #include \"amount.h\"\n+#include \"primitives/transaction.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n@@ -24,6 +25,18 @@ class CStandardPolicy : public CPolicy\n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n     virtual void InitFromArgs(const std::map<std::string, std::string>&);\n     virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    /**\n+     * \"Dust\" is defined in terms of CTransaction::minRelayTxFee,\n+     * which has units satoshis-per-kilobyte.\n+     * If you'd pay more than 1/3 in fees\n+     * to spend something, then we consider it dust.\n+     * A typical txout is 34 bytes big, and will\n+     * need a CTxIn of at least 148 bytes to spend:\n+     * so dust is a txout less than 546 satoshis \n+     * with default minRelayTxFee.\n+     */\n+    virtual CAmount GetDustThreshold(const CTxOut& txout) const;\n+    virtual bool ApproveOutput(const CTxOut& txout) const;\n };\n \n /** Global variables and their interfaces */\n@@ -101,3 +114,14 @@ bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whi\n \n     return whichType != TX_NONSTANDARD;\n }\n+\n+CAmount CStandardPolicy::GetDustThreshold(const CTxOut& txout) const\n+{\n+    size_t nSize = txout.GetSerializeSize(SER_DISK,0) + 148u;\n+    return 3 * minRelayTxFee.GetFee(nSize);\n+}\n+\n+bool CStandardPolicy::ApproveOutput(const CTxOut& txout) const\n+{\n+    return txout.nValue < GetDustThreshold(txout);\n+}"
      },
      {
        "sha": "c52bf17771611bee940bc3cc915d2fccfdd61751",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "patch": "@@ -14,6 +14,7 @@\n #include <string>\n \n class CFeeRate;\n+class CTxOut;\n \n /** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n@@ -63,6 +64,8 @@ class CPolicy\n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const = 0;\n     virtual void InitFromArgs(const std::map<std::string, std::string>&) = 0;\n     virtual bool ApproveScript(const CScript&, txnouttype&) const = 0;\n+    virtual CAmount GetDustThreshold(const CTxOut& txout) const = 0;\n+    virtual bool ApproveOutput(const CTxOut& txout) const = 0;\n };\n \n /** Return a CPolicy of the type described in the parameter string */"
      },
      {
        "sha": "ab11bc0376db57ecf569a5ceb9a7164157f7d0ed",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "patch": "@@ -135,25 +135,6 @@ class CTxOut\n \n     uint256 GetHash() const;\n \n-    CAmount GetDustThreshold(const CFeeRate &minRelayTxFee) const\n-    {\n-        // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,\n-        // which has units satoshis-per-kilobyte.\n-        // If you'd pay more than 1/3 in fees\n-        // to spend something, then we consider it dust.\n-        // A typical txout is 34 bytes big, and will\n-        // need a CTxIn of at least 148 bytes to spend:\n-        // so dust is a txout less than 546 satoshis \n-        // with default minRelayTxFee.\n-        size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n-        return 3*minRelayTxFee.GetFee(nSize);\n-    }\n-\n-    bool IsDust(const CFeeRate &minRelayTxFee) const\n-    {\n-        return (nValue < GetDustThreshold(minRelayTxFee));\n-    }\n-\n     friend bool operator==(const CTxOut& a, const CTxOut& b)\n     {\n         return (a.nValue       == b.nValue &&"
      },
      {
        "sha": "261c009a98a72fe440b6cf6a48d579811437b4e5",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "patch": "@@ -470,7 +470,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CTxOut txout(amount, (CScript)vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n-            if (txout.IsDust(::minRelayTxFee))\n+            if (Policy().ApproveOutput(txout))\n                fDust = true;\n         }\n     }\n@@ -571,10 +571,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (nChange > 0 && nChange < CENT)\n             {\n                 CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n-                if (txout.IsDust(::minRelayTxFee))\n+                if (Policy().ApproveOutput(txout))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n-                        nChange = txout.GetDustThreshold(::minRelayTxFee);\n+                        nChange = Policy().GetDustThreshold(txout);\n                     else\n                     {\n                         nPayFee += nChange;"
      },
      {
        "sha": "d318b20c4acea5c05927dd25eef681b66732751f",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "patch": "@@ -231,7 +231,7 @@ bool isDust(const QString& address, const CAmount& amount)\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n-    return txOut.IsDust(::minRelayTxFee);\n+    return Policy().ApproveOutput(txOut);\n }\n \n QString HtmlEscape(const QString& str, bool fMultiLine)"
      },
      {
        "sha": "3415cc538a5ed30fcbf4614302955f0a7097576f",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "patch": "@@ -10,7 +10,6 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n-#include \"main.h\"\n #include \"policy/policy.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n@@ -580,7 +579,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (txOut.IsDust(::minRelayTxFee)) {\n+        if (Policy().ApproveOutput(txOut)) {\n             emit message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "9e47e0938be34051c9b2f140f7ff4dcad90f655d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7c1d5130c978c585e59b5c44cc0f982fdd0764/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "patch": "@@ -1766,7 +1766,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                         }\n                     }\n \n-                    if (txout.IsDust(::minRelayTxFee))\n+                    if (Policy().ApproveOutput(txout))\n                     {\n                         if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n@@ -1842,16 +1842,16 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                     // We do not move dust-change to fees, because the sender would end up paying more than requested.\n                     // This would be against the purpose of the all-inclusive feature.\n                     // So instead we raise the change and deduct from the recipient.\n-                    if (nSubtractFeeFromAmount > 0 && newTxOut.IsDust(::minRelayTxFee))\n+                    if (nSubtractFeeFromAmount > 0 && Policy().ApproveOutput(newTxOut))\n                     {\n-                        CAmount nDust = newTxOut.GetDustThreshold(::minRelayTxFee) - newTxOut.nValue;\n+                        CAmount nDust = Policy().GetDustThreshold(newTxOut) - newTxOut.nValue;\n                         newTxOut.nValue += nDust; // raise change until no more dust\n                         for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n                         {\n                             if (vecSend[i].fSubtractFeeFromAmount)\n                             {\n                                 txNew.vout[i].nValue -= nDust;\n-                                if (txNew.vout[i].IsDust(::minRelayTxFee))\n+                                if (Policy().ApproveOutput(txNew.vout[i]))\n                                 {\n                                     strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                                     return false;\n@@ -1863,7 +1863,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (newTxOut.IsDust(::minRelayTxFee))\n+                    if (Policy().ApproveOutput(newTxOut))\n                     {\n                         nFeeRet += nChange;\n                         reservekey.ReturnKey();"
      }
    ]
  },
  {
    "sha": "981a922e14205b1fa991bb4c6d4aa186f6cb340c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODFhOTIyZTE0MjA1YjFmYTk5MWJiNGM2ZDRhYTE4NmY2Y2IzNDBj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T16:15:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "Policy: Refactor: Create CPolicy::ApproveTx(tx, state) from main::IsStandardTx(tx, reason)",
      "tree": {
        "sha": "0685d4e36db0133be593b787303ad19dd01c84bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0685d4e36db0133be593b787303ad19dd01c84bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/981a922e14205b1fa991bb4c6d4aa186f6cb340c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/981a922e14205b1fa991bb4c6d4aa186f6cb340c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/981a922e14205b1fa991bb4c6d4aa186f6cb340c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/981a922e14205b1fa991bb4c6d4aa186f6cb340c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed7c1d5130c978c585e59b5c44cc0f982fdd0764",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed7c1d5130c978c585e59b5c44cc0f982fdd0764"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 80,
      "deletions": 98
    },
    "files": [
      {
        "sha": "4126a357ff22081de8e2ccf0d6879428ca28c77e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 76,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=981a922e14205b1fa991bb4c6d4aa186f6cb340c",
        "patch": "@@ -569,76 +569,6 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-\n-\n-\n-\n-\n-\n-bool IsStandardTx(const CTransaction& tx, string& reason)\n-{\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n-        reason = \"version\";\n-        return false;\n-    }\n-\n-    // Extremely large transactions with lots of inputs can cost the network\n-    // almost as much to process as they cost the sender in fees, because\n-    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n-    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE) {\n-        reason = \"tx-size\";\n-        return false;\n-    }\n-\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n-        // keys. (remember the 520 byte limit on redeemScript size) That works\n-        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n-        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n-        // future-proofing. That's also enough to spend a 20-of-20\n-        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n-        // considered standard)\n-        if (txin.scriptSig.size() > 1650) {\n-            reason = \"scriptsig-size\";\n-            return false;\n-        }\n-        if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n-        }\n-    }\n-\n-    unsigned int nDataOut = 0;\n-    txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!Policy().ApproveScript(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n-        }\n-\n-        if (whichType == TX_NULL_DATA)\n-            nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n-            reason = \"bare-multisig\";\n-            return false;\n-        } else if (Policy().ApproveOutput(txout)) {\n-            reason = \"dust\";\n-            return false;\n-        }\n-    }\n-\n-    // only one OP_RETURN txout is permitted\n-    if (nDataOut > 1) {\n-        reason = \"multi-op-return\";\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     AssertLockHeld(cs_main);\n@@ -684,7 +614,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // non-standard. Note that this EvalScript() call will\n         // be quick, because if there are any operations\n         // beside \"push data\" in the scriptSig\n-        // IsStandardTx() will have already returned false\n+        // Policy().ValidateTx() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n@@ -766,11 +696,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    string reason;\n-    if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n-        return state.DoS(0,\n-                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n-                         REJECT_NONSTANDARD, reason);\n+    if (!Policy().ApproveTx(tx, state))\n+        return error(\"%s: CPolicy::ApproveTx: %s\", __func__, state.GetRejectReason().c_str());\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't"
      },
      {
        "sha": "7f1accafd613ef19f821906cbb89bce14a40376d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=981a922e14205b1fa991bb4c6d4aa186f6cb340c",
        "patch": "@@ -236,11 +236,6 @@ bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const C\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n \n-/** Check for standard transaction types\n- * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n- */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n-\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64_t nBlockTime = 0);\n \n /** "
      },
      {
        "sha": "f9e649ba75c93b67cb5864065ef485c1f38f0cae",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=981a922e14205b1fa991bb4c6d4aa186f6cb340c",
        "patch": "@@ -8,6 +8,7 @@\n #include \"policy/policy.h\"\n \n #include \"amount.h\"\n+#include \"consensus/validation.h\"\n #include \"primitives/transaction.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n@@ -37,6 +38,7 @@ class CStandardPolicy : public CPolicy\n      */\n     virtual CAmount GetDustThreshold(const CTxOut& txout) const;\n     virtual bool ApproveOutput(const CTxOut& txout) const;\n+    virtual bool ApproveTx(const CTransaction&, CValidationState&) const;\n };\n \n /** Global variables and their interfaces */\n@@ -125,3 +127,52 @@ bool CStandardPolicy::ApproveOutput(const CTxOut& txout) const\n {\n     return txout.nValue < GetDustThreshold(txout);\n }\n+\n+bool CStandardPolicy::ApproveTx(const CTransaction& tx, CValidationState& state) const\n+{\n+    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"version\");\n+\n+    // Extremely large transactions with lots of inputs can cost the network\n+    // almost as much to process as they cost the sender in fees, because\n+    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n+    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz >= MAX_STANDARD_TX_SIZE)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"tx-size\");\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n+        // keys. (remember the 520 byte limit on redeemScript size) That works\n+        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n+        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n+        // future-proofing. That's also enough to spend a 20-of-20\n+        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n+        // considered standard)\n+        if (tx.vin[i].scriptSig.size() > 1650)\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptsig-size\");\n+\n+        if (!tx.vin[i].scriptSig.IsPushOnly())\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptsig-not-pushonly\");\n+    }\n+\n+    unsigned int nDataOut = 0;\n+    txnouttype whichType;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        if (!ApproveScript(tx.vout[i].scriptPubKey, whichType))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptpubkey\");\n+\n+        if (whichType == TX_NULL_DATA)\n+            nDataOut++;\n+        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bare-multisig\");\n+        else if (ApproveOutput(tx.vout[i]))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"dust\");\n+    }\n+\n+    // only one OP_RETURN txout is permitted\n+    if (nDataOut > 1)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"multi-op-return\");\n+\n+    return true;\n+}"
      },
      {
        "sha": "a3bce953df4277f7515fb66ad2d24d9af1b426e6",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=981a922e14205b1fa991bb4c6d4aa186f6cb340c",
        "patch": "@@ -14,7 +14,9 @@\n #include <string>\n \n class CFeeRate;\n+class CTransaction;\n class CTxOut;\n+class CValidationState;\n \n /** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n@@ -66,6 +68,11 @@ class CPolicy\n     virtual bool ApproveScript(const CScript&, txnouttype&) const = 0;\n     virtual CAmount GetDustThreshold(const CTxOut& txout) const = 0;\n     virtual bool ApproveOutput(const CTxOut& txout) const = 0;\n+    /**\n+     * Check for standard transaction types\n+     * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n+     */\n+    virtual bool ApproveTx(const CTransaction&, CValidationState&) const = 0;\n };\n \n /** Return a CPolicy of the type described in the parameter string */"
      },
      {
        "sha": "394cdf6b7d74a0a11903e17232d0f9cf22b23e0a",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=981a922e14205b1fa991bb4c6d4aa186f6cb340c",
        "patch": "@@ -581,7 +581,7 @@ class CScript : public std::vector<unsigned char>\n \n     bool IsPayToScriptHash() const;\n \n-    /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n+    /** Called by CStandardPolicy::ApproveTx() and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n     bool IsPushOnly() const;\n \n     /**"
      },
      {
        "sha": "ef47cf3aeec66028e970002148a0dbaf33d0b677",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=981a922e14205b1fa991bb4c6d4aa186f6cb340c",
        "patch": "@@ -5,6 +5,7 @@\n #include \"coins.h\"\n #include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n@@ -85,7 +86,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n-    string reason;\n+    CValidationState state;\n     txFrom.vout.resize(8);\n     for (int i = 0; i < 4; i++)\n     {\n@@ -94,7 +95,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(Policy(\"standard\").ApproveTx(txFrom, state));\n \n     CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -183,14 +184,14 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n-    string reason;\n+    CValidationState state;\n     txFrom.vout.resize(4);\n     for (int i = 0; i < 4; i++)\n     {\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(Policy(\"standard\").ApproveTx(txFrom, state));\n \n     CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -208,7 +209,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(Policy(\"standard\").ApproveTx(txTo[i], state), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n "
      },
      {
        "sha": "f2c35c463d3387638243683f55972d62b84b3971",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981a922e14205b1fa991bb4c6d4aa186f6cb340c/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=981a922e14205b1fa991bb4c6d4aa186f6cb340c",
        "patch": "@@ -15,6 +15,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"utilstrencodings.h\"\n@@ -341,44 +342,44 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     key.MakeNewKey(true);\n     t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n-    string reason;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    CValidationState state;\n+    BOOST_CHECK(Policy(\"standard\").ApproveTx(t, state));\n \n     t.vout[0].nValue = 501; // dust\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n \n     t.vout[0].nValue = 601; // not dust\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(Policy(\"standard\").ApproveTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n \n     // 80-byte TX_NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(Policy(\"standard\").ApproveTx(t, state));\n \n     // 81-byte TX_NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n \n     // TX_NULL_DATA w/o PUSHDATA\n     t.vout.resize(1);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(Policy(\"standard\").ApproveTx(t, state));\n \n     // Only one TX_NULL_DATA permitted in all cases\n     t.vout.resize(2);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "db55bc7333006d65740784ad967e822c97cbbe51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjU1YmM3MzMzMDA2ZDY1NzQwNzg0YWQ5NjdlODIyYzk3Y2JiZTUx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2014-12-29T16:05:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "Policy: MOVEONLY: main::AreInputsStandard() -> CPolicy::ApproveTxInputs()",
      "tree": {
        "sha": "ccaf14dcb4112a1eff3524e57c7e58615cce309f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccaf14dcb4112a1eff3524e57c7e58615cce309f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db55bc7333006d65740784ad967e822c97cbbe51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db55bc7333006d65740784ad967e822c97cbbe51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db55bc7333006d65740784ad967e822c97cbbe51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db55bc7333006d65740784ad967e822c97cbbe51/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "981a922e14205b1fa991bb4c6d4aa186f6cb340c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/981a922e14205b1fa991bb4c6d4aa186f6cb340c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/981a922e14205b1fa991bb4c6d4aa186f6cb340c"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 88,
      "deletions": 84
    },
    "files": [
      {
        "sha": "e9c7f0444f2db2665d8627e7f2424f61c2d425e5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 69,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db55bc7333006d65740784ad967e822c97cbbe51/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db55bc7333006d65740784ad967e822c97cbbe51/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=db55bc7333006d65740784ad967e822c97cbbe51",
        "patch": "@@ -582,73 +582,6 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return Consensus::IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-/**\n- * Check transaction inputs to mitigate two\n- * potential denial-of-service attacks:\n- * \n- * 1. scriptSigs with extra data stuffed into them,\n- *    not consumed by scriptPubKey (or P2SH script)\n- * 2. P2SH scripts with a crazy number of expensive\n- *    CHECKSIG/CHECKMULTISIG operations\n- */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n-{\n-    if (tx.IsCoinBase())\n-        return true; // Coinbases don't use vin normally\n-\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n-\n-        vector<vector<unsigned char> > vSolutions;\n-        txnouttype whichType;\n-        // get the scriptPubKey corresponding to this input:\n-        const CScript& prevScript = prev.scriptPubKey;\n-        if (!Solver(prevScript, whichType, vSolutions))\n-            return false;\n-        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n-        if (nArgsExpected < 0)\n-            return false;\n-\n-        // Transactions with extra stuff in their scriptSigs are\n-        // non-standard. Note that this EvalScript() call will\n-        // be quick, because if there are any operations\n-        // beside \"push data\" in the scriptSig\n-        // Policy().ValidateTx() will have already returned false\n-        // and this method isn't called.\n-        vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n-            return false;\n-\n-        if (whichType == TX_SCRIPTHASH)\n-        {\n-            if (stack.empty())\n-                return false;\n-            CScript subscript(stack.back().begin(), stack.back().end());\n-            vector<vector<unsigned char> > vSolutions2;\n-            txnouttype whichType2;\n-            if (Solver(subscript, whichType2, vSolutions2))\n-            {\n-                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n-                if (tmpExpected < 0)\n-                    return false;\n-                nArgsExpected += tmpExpected;\n-            }\n-            else\n-            {\n-                // Any other Script with less than 15 sigops OK:\n-                unsigned int sigops = subscript.GetSigOpCount(true);\n-                // ... extra data left on the stack after execution is OK, too:\n-                return (sigops <= MAX_P2SH_SIGOPS);\n-            }\n-        }\n-\n-        if (stack.size() != (unsigned int)nArgsExpected)\n-            return false;\n-    }\n-\n-    return true;\n-}\n \n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n@@ -781,8 +714,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n+        if (!Policy().ApproveTxInputs(tx, view))\n+            return error(\"%s: CPolicy::ApproveTxInputs failed %s\", __func__, hash.ToString());\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction"
      },
      {
        "sha": "5c1278ae8497dfea296913cc6cb1b87c2abfffaf",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db55bc7333006d65740784ad967e822c97cbbe51/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db55bc7333006d65740784ad967e822c97cbbe51/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=db55bc7333006d65740784ad967e822c97cbbe51",
        "patch": "@@ -218,12 +218,6 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n  *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n  */\n \n-/** \n- * Check for standard transaction types\n- * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n- * @return True if all inputs (scriptSigs) use only standard transaction forms\n- */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n /**\n  * Check whether all inputs of this transaction are valid (scripts and sigs)"
      },
      {
        "sha": "84423bb989b007c7abd9c29d670571f045365f33",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db55bc7333006d65740784ad967e822c97cbbe51/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db55bc7333006d65740784ad967e822c97cbbe51/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=db55bc7333006d65740784ad967e822c97cbbe51",
        "patch": "@@ -8,6 +8,7 @@\n #include \"policy/policy.h\"\n \n #include \"amount.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"primitives/transaction.h\"\n #include \"tinyformat.h\"\n@@ -39,6 +40,16 @@ class CStandardPolicy : public CPolicy\n     virtual CAmount GetDustThreshold(const CTxOut& txout) const;\n     virtual bool ApproveOutput(const CTxOut& txout) const;\n     virtual bool ApproveTx(const CTransaction&, CValidationState&) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewEfficient& mapInputs) const;\n };\n \n /** Global variables and their interfaces */\n@@ -176,3 +187,62 @@ bool CStandardPolicy::ApproveTx(const CTransaction& tx, CValidationState& state)\n \n     return true;\n }\n+\n+bool CStandardPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewEfficient& mapInputs) const\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases don't use vin normally\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        std::vector<std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        const CScript& prevScript = prev.scriptPubKey;\n+        if (!Solver(prevScript, whichType, vSolutions))\n+            return false;\n+        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n+        if (nArgsExpected < 0)\n+            return false;\n+\n+        // Transactions with extra stuff in their scriptSigs are\n+        // non-standard. Note that this EvalScript() call will\n+        // be quick, because if there are any operations\n+        // beside \"push data\" in the scriptSig\n+        // Policy().ValidateTx() will have already returned false\n+        // and this method isn't called.\n+        std::vector<std::vector<unsigned char> > stack;\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n+            return false;\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            if (stack.empty())\n+                return false;\n+            CScript subscript(stack.back().begin(), stack.back().end());\n+            std::vector<std::vector<unsigned char> > vSolutions2;\n+            txnouttype whichType2;\n+            if (Solver(subscript, whichType2, vSolutions2))\n+            {\n+                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n+                if (tmpExpected < 0)\n+                    return false;\n+                nArgsExpected += tmpExpected;\n+            }\n+            else\n+            {\n+                // Any other Script with less than 15 sigops OK:\n+                unsigned int sigops = subscript.GetSigOpCount(true);\n+                // ... extra data left on the stack after execution is OK, too:\n+                return (sigops <= MAX_P2SH_SIGOPS);\n+            }\n+        }\n+\n+        if (stack.size() != (unsigned int)nArgsExpected)\n+            return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "fd055cbfed4231a7b67abc672df74c947114c0e8",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db55bc7333006d65740784ad967e822c97cbbe51/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db55bc7333006d65740784ad967e822c97cbbe51/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=db55bc7333006d65740784ad967e822c97cbbe51",
        "patch": "@@ -13,6 +13,7 @@\n #include <map>\n #include <string>\n \n+class CCoinsViewEfficient;\n class CFeeRate;\n class CTransaction;\n class CTxOut;\n@@ -25,7 +26,7 @@ static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** Maximum number of signature check operations in an IsStandard() P2SH script */\n+/** Maximum number of signature check operations in an Standard P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n@@ -73,6 +74,12 @@ class CPolicy\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n     virtual bool ApproveTx(const CTransaction&, CValidationState&) const = 0;\n+    /**\n+     * Check for standard transaction types\n+     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n+     * @return True if all inputs (scriptSigs) use only standard transaction forms\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction&, const CCoinsViewEfficient&) const = 0;\n };\n \n /** Return a CPolicy of the type described in the parameter string */"
      },
      {
        "sha": "7dcfb0d90de7766fa87c92318d688a4a55036e29",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db55bc7333006d65740784ad967e822c97cbbe51/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db55bc7333006d65740784ad967e822c97cbbe51/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=db55bc7333006d65740784ad967e822c97cbbe51",
        "patch": "@@ -264,7 +264,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EQUALVERIFY, ScriptErrorString(err));\n }\n \n-BOOST_AUTO_TEST_CASE(AreInputsStandard)\n+BOOST_AUTO_TEST_CASE(Policy_ApproveTxInputs)\n {\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n@@ -346,7 +346,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n     txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n \n-    BOOST_CHECK(::AreInputsStandard(txTo, coins));\n+    BOOST_CHECK(Policy(\"standard\").ApproveTxInputs(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(Consensus::GetP2SHSigOpCount(txTo, coins), 22U);\n \n@@ -355,7 +355,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     {\n         CScript t = txTo.vin[i].scriptSig;\n         txTo.vin[i].scriptSig = (CScript() << 11) + t;\n-        BOOST_CHECK(!::AreInputsStandard(txTo, coins));\n+        BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(txTo, coins));\n         txTo.vin[i].scriptSig = t;\n     }\n \n@@ -368,7 +368,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(txToNonStd1, coins));\n     BOOST_CHECK_EQUAL(Consensus::GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -380,7 +380,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(txToNonStd2, coins));\n     BOOST_CHECK_EQUAL(Consensus::GetP2SHSigOpCount(txToNonStd2, coins), 20U);\n }\n "
      },
      {
        "sha": "a6ea69dbf6bddf0ec52cb0d7e1a45c091f1da680",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db55bc7333006d65740784ad967e822c97cbbe51/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db55bc7333006d65740784ad967e822c97cbbe51/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=db55bc7333006d65740784ad967e822c97cbbe51",
        "patch": "@@ -311,16 +311,16 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(AreInputsStandard(t1, coins));\n+    BOOST_CHECK(Policy(\"standard\").ApproveTxInputs(t1, coins));\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n \n     // Adding extra junk to the scriptSig should make it non-standard:\n     t1.vin[0].scriptSig << OP_11;\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(t1, coins));\n \n     // ... as should not having enough:\n     t1.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(t1, coins));\n }\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)"
      }
    ]
  },
  {
    "sha": "ca8a76b79f6efa242980399049be608a093622be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYThhNzZiNzlmNmVmYTI0Mjk4MDM5OTA0OWJlNjA4YTA5MzYyMmJl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-05T00:22:12Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "Includes: Cleanup includes",
      "tree": {
        "sha": "5007cf50fa61ee0df4d3308ba86a063e4395618a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5007cf50fa61ee0df4d3308ba86a063e4395618a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca8a76b79f6efa242980399049be608a093622be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca8a76b79f6efa242980399049be608a093622be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca8a76b79f6efa242980399049be608a093622be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca8a76b79f6efa242980399049be608a093622be/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db55bc7333006d65740784ad967e822c97cbbe51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db55bc7333006d65740784ad967e822c97cbbe51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db55bc7333006d65740784ad967e822c97cbbe51"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 86,
      "deletions": 42
    },
    "files": [
      {
        "sha": "c08f4de551204262bbc482fefea9fa4520518155",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -3,11 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n-#include \"rpcserver.h\"\n #include \"init.h\"\n-#include \"main.h\"\n #include \"noui.h\"\n+#include \"rpcserver.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "8647244baaca28258299881e3860da3832ab3494",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"checkpoints.h\"\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"main.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "97c441401b63cd60740c58086c4d6b391e40a987",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -11,6 +11,7 @@\n \n #include \"addrman.h\"\n #include \"amount.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"coins.h\"\n #include \"coinscache.h\"\n@@ -24,6 +25,7 @@\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n #include \"txdb.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "1459650ef46b9961a4bd28b5c465d99a4a071c93",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"addrman.h\"\n #include \"alert.h\"\n+#include \"amount.h\"\n #include \"arith_uint256.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n@@ -18,11 +19,17 @@\n #include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n-#include \"net.h\"\n #include \"policy/policy.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/script.h\"\n+#include \"script/sigcache.h\"\n+#include \"script/standard.h\"\n+#include \"tinyformat.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n+#include \"uint256.h\"\n #include \"undo.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -1111,6 +1118,10 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n     UpdateCoins(tx, state, inputs, txundo, nHeight);\n }\n \n+CScriptCheck::CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n+    scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n+    ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n+\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {"
      },
      {
        "sha": "31557c656bd3412e28035591570c27acdbe268fc",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 16,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -10,19 +10,9 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n-#include \"amount.h\"\n #include \"chain.h\"\n-#include \"chainparams.h\"\n #include \"net.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n-#include \"script/sigcache.h\"\n-#include \"script/standard.h\"\n-#include \"sync.h\"\n-#include \"tinyformat.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n+#include \"script/script_error.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -33,13 +23,18 @@\n #include <utility>\n #include <vector>\n \n+#include <boost/filesystem/path.hpp>\n #include <boost/unordered_map.hpp>\n \n-class CBlockIndex;\n class CBlockTreeDB;\n class CBloomFilter;\n+class CCoins;\n+class CCoinsView;\n+class CCoinsViewCache;\n+class CCoinsViewEfficient;\n class CInv;\n class CScriptCheck;\n+class CTxMemPool;\n class CValidationInterface;\n class CValidationState;\n \n@@ -248,10 +243,7 @@ class CScriptCheck\n \n public:\n     CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n-        scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR) { }\n-\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn);\n     bool operator()();\n \n     void swap(CScriptCheck &check) {"
      },
      {
        "sha": "9cc681df35b61f0ef2365f75bdb655fd0724c53a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -16,8 +16,12 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n+#include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"pubkey.h\"\n+#include \"script/standard.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "97e128797b262f609ff3a394c4025f667bb1717c",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -23,8 +23,8 @@\n #include \"walletmodel.h\"\n #endif\n \n+#include \"chainparams.h\"\n #include \"init.h\"\n-#include \"main.h\"\n #include \"rpcserver.h\"\n #include \"ui_interface.h\"\n #include \"util.h\""
      },
      {
        "sha": "358b49a8a4fa5af5489cc65cb1065b7e531c6c38",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -14,8 +14,8 @@\n #include \"walletmodel.h\"\n \n #include \"coincontrol.h\"\n-#include \"main.h\"\n #include \"policy/policy.h\"\n+#include \"txmempool.h\"\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'"
      },
      {
        "sha": "a7918d07b8ba2f62d835a6bac33d85b3440c8f87",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -10,7 +10,6 @@\n #include \"walletmodel.h\"\n \n #include \"init.h\"\n-#include \"main.h\"\n #include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"protocol.h\""
      },
      {
        "sha": "c97ceacb30731402b09ddf99a09c986b9138d1e7",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -13,7 +13,7 @@\n \n #include \"amount.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For DEFAULT_SCRIPTCHECK_THREADS\n #include \"net.h\"\n #include \"txdb.h\" // for -dbcache defaults\n "
      },
      {
        "sha": "96af27239269e66b0b3a2f4693e96465393cbf46",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -10,7 +10,6 @@\n #include \"peertablemodel.h\"\n #include \"scicon.h\"\n \n-#include \"main.h\"\n #include \"chainparams.h\"\n #include \"rpcserver.h\"\n #include \"rpcclient.h\""
      },
      {
        "sha": "800e673edd5af1dd0b6ff14080785d60d1bdab22",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -18,6 +18,7 @@\n #include \"base58.h\"\n #include \"coincontrol.h\"\n #include \"main.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"wallet/wallet.h\"\n "
      },
      {
        "sha": "36efbbe6cfd93e89a18d01c9e19141c5c3d9d6a4",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -12,7 +12,6 @@\n #include \"base58.h\"\n #include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n-#include \"main.h\"\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "84e2440aa96bfe550656009509692a9a70887167",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -26,6 +26,8 @@\n #include <QSet>\n #include <QTimer>\n \n+#include <boost/foreach.hpp>\n+\n using namespace std;\n \n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :"
      },
      {
        "sha": "5cea051a6c1fa592201f7cf8b219d321408364df",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -3,9 +3,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"main.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n-#include \"main.h\"\n #include \"rpcserver.h\"\n #include \"streams.h\"\n #include \"sync.h\""
      },
      {
        "sha": "2c0f477cad36c71a8670c09fea91757ce807c174",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -3,13 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"coinscache.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"sync.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "9d42b517cae841b52042aa84f4d811a9a0b21314",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -14,6 +14,7 @@\n #include \"miner.h\"\n #include \"net.h\"\n #include \"rpcserver.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "09061fa74cd21f68366d9968abc540f43bb2eac9",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"rpcserver.h\"\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "f439085ee36bd825cd1b6037db537e6983774685",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -18,6 +18,7 @@\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "8a0a8d9a88e70ce697577a9c12cfb2abf69a3fa1",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -2,17 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n-// Unit tests for denial-of-service detection/prevention code\n-//\n-\n-\n-\n+#include \"chainparams.h\"\n #include \"consensus/pow.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/sign.h\"\n+#include \"script/standard.h\"\n #include \"serialize.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "bf6c7d68f4d28273c3d2bea2687b7106136dd3ec",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -7,6 +7,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"primitives/block.h\"\n+#include \"streams.h\"\n #include \"test/test_bitcoin.h\"\n #include \"timedata.h\"\n #include \"utiltime.h\""
      },
      {
        "sha": "9e585ec189bc6b1bfb26277c4d52316897da0b0e",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -11,6 +11,7 @@\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n \n+#include <stdio.h>\n #include <string>\n #include <vector>\n "
      },
      {
        "sha": "521ae74e6580352fadbd99e483c720e31783575e",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -2,12 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"checkpoints.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n+#include \"primitives/transaction.h\"\n #include \"pubkey.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "890f70c98495f0046f5efd699d1e8e161fa74219",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -5,11 +5,14 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"tinyformat.h\"\n+#include \"uint256.h\"\n #include \"uint256.h\"\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "cf75dc897d37dcbe809ea41b9ff1a7dd1872d79e",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -2,8 +2,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"consensus/pow.h\"\n-#include \"main.h\"\n #include \"test/test_bitcoin.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "17f6ee81e3664bcbfe1b7955ed28f4f5c2325c66",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -10,9 +10,11 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n+#include \"script/standard.h\"\n #include \"test/test_bitcoin.h\"\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "53dad6f2281ad41663859e8ca5ca93ba78a69bb1",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -8,12 +8,15 @@\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n+#include \"script/standard.h\"\n+#include \"streams.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"utilstrencodings.h\"\n \n #if defined(HAVE_CONSENSUS_LIB)\n #include \"script/bitcoinconsensus.h\""
      },
      {
        "sha": "a7a5900abb2796bbdd69d291283edf15e8e1d263",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -6,18 +6,21 @@\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n-#include \"random.h\"\n #include \"hash.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n+#include \"streams.h\"\n #include \"test/test_bitcoin.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"version.h\"\n \n-#include <iostream>\n+#include <stdio.h>\n \n+#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_reader_template.h\"\n #include \"json/json_spirit_utils.h\""
      },
      {
        "sha": "a904e3862fe78393b8ac7b7c5257f4319dad38a9",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n+#include \"chain.h\"\n #include \"random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "32621fb945cbd82c691dd9ecfed45e43b1fd07e8",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"test_bitcoin.h\"\n \n+#include \"chainparams.h\"\n #include \"coinscache.h\"\n #include \"main.h\"\n #include \"policy/policy.h\""
      },
      {
        "sha": "cbc550985a1dbf5b8e94dd3292c4bfa76294685c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -16,17 +16,22 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n+#include \"script/standard.h\"\n+#include \"streams.h\"\n #include \"utilstrencodings.h\"\n \n #include <map>\n #include <string>\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n-#include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace std;"
      },
      {
        "sha": "3b927eb3e8322dbc4eb1517edd48d91550504459",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"txmempool.h\"\n \n+#include \"chain.h\"\n #include \"clientversion.h\"\n #include \"coins.h\"\n #include \"coinscache.h\""
      },
      {
        "sha": "77794f967dadcb44344a9c697d939af0be78ebdf",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -3,9 +3,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n-#include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"rpcserver.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"sync.h\"\n@@ -18,6 +18,7 @@\n \n #include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n+#include <boost/foreach.hpp>\n \n #include \"json/json_spirit_value.h\"\n "
      },
      {
        "sha": "a53469d648f5dcc3d150e37bc37f45bac191df51",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -21,6 +21,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n \n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\""
      },
      {
        "sha": "6c0fd09cef51c6f70cebb81d65b40ab5f92be7e7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -10,19 +10,24 @@\n #include \"coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"key.h\"\n+#include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n+#include \"primitives/block.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n \n #include <assert.h>\n \n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n+#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n using namespace std;"
      },
      {
        "sha": "d17278934c9eb172de6d16927ef6db2feb50dd80",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca8a76b79f6efa242980399049be608a093622be/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca8a76b79f6efa242980399049be608a093622be/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ca8a76b79f6efa242980399049be608a093622be",
        "patch": "@@ -7,9 +7,6 @@\n #define BITCOIN_WALLET_H\n \n #include \"amount.h\"\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\""
      }
    ]
  },
  {
    "sha": "563fadbb8f501efa58205fff773ed81121515fc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjNmYWRiYjhmNTAxZWZhNTgyMDVmZmY3NzNlZDgxMTIxNTE1ZmMz",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-19T00:26:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "LOCAL: notes on include main.h",
      "tree": {
        "sha": "ecd3d4e2cf7e7aa618275a8bfc353f66bccd47f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecd3d4e2cf7e7aa618275a8bfc353f66bccd47f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/563fadbb8f501efa58205fff773ed81121515fc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/563fadbb8f501efa58205fff773ed81121515fc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/563fadbb8f501efa58205fff773ed81121515fc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/563fadbb8f501efa58205fff773ed81121515fc3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca8a76b79f6efa242980399049be608a093622be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca8a76b79f6efa242980399049be608a093622be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca8a76b79f6efa242980399049be608a093622be"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 29,
      "deletions": 26
    },
    "files": [
      {
        "sha": "eabc037f9db53e1c8674b51f157397b0b6545254",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"chain.h\"\n #include \"chainparams.h\"\n-#include \"main.h\"\n+#include \"main.h\" // mapBlockIndex\n #include \"uint256.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "5b7b8c63c69c59af77c0cf14b223ff332f5810d2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -18,7 +18,7 @@\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n #include \"key.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"miner.h\"\n #include \"net.h\"\n #include \"policy/policy.h\""
      },
      {
        "sha": "3c77bff713d7949e167e15d960c9b3532b6b499c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -13,7 +13,7 @@\n #include \"consensus/pow.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"primitives/block.h\""
      },
      {
        "sha": "d8f6ce0b3298425290454c1adbf707408ab76be6",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -11,7 +11,7 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"clientversion.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"net.h\"\n #include \"ui_interface.h\"\n #include \"util.h\""
      },
      {
        "sha": "1970e4d22b1c8bbaae8c68ea03d4a1f96b786f64",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -14,6 +14,7 @@\n #include \"walletmodel.h\"\n \n #include \"coincontrol.h\"\n+// #include \"main.h\" // mempool\n #include \"policy/policy.h\"\n #include \"txmempool.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "c9b45af41d5d7709604b541251bb47c6a789caee",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -8,7 +8,8 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n \n-#include \"net.h\"\n+// #include \"net.h\"\n+// #include \"main.h\" // cs_main\n #include \"sync.h\"\n \n #include <QDebug>"
      },
      {
        "sha": "6a0b4a2675b46b9dcdcd3379d54bed3304c0e361",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -17,7 +17,7 @@\n \n #include \"base58.h\"\n #include \"coincontrol.h\"\n-#include \"main.h\"\n+#include \"main.h\" // mempool\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "f79309b3ed5982e65b0a5f50d3c63a08ec370a9e",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -12,6 +12,7 @@\n #include \"base58.h\"\n #include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n+// #include \"main.h\" // cs_main\n #include \"script/script.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "b213a94d0671c8f3304b08d516bf8160d99bd9ad",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"base58.h\"\n #include \"consensus/consensus.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"timedata.h\"\n #include \"wallet/wallet.h\"\n "
      },
      {
        "sha": "d0f098d18a050d292b7aef64de1f6cd291379120",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -13,7 +13,7 @@\n #include \"transactionrecord.h\"\n #include \"walletmodel.h\"\n \n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\""
      },
      {
        "sha": "77979ded61c59552be8d0440c4791bac160a7a5b",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -14,7 +14,7 @@\n #include \"base58.h\"\n #include \"wallet/db.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "1849f77a74810e5e4eadd35938cf8e91e7d14b1d",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\""
      },
      {
        "sha": "aeeeaedcce03bbf25ab0eaf3d56639c9568641de",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -8,7 +8,7 @@\n #include \"checkpoints.h\"\n #include \"coinscache.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"main.h\" // chainActive\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"sync.h\""
      },
      {
        "sha": "48c4799bf41d640697d9535788964176c3c45033",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -10,7 +10,7 @@\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // chainActive\n #include \"miner.h\"\n #include \"net.h\"\n #include \"rpcserver.h\""
      },
      {
        "sha": "6136fc7606a7848930e30e74568111cc0acdf8bf",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -6,7 +6,7 @@\n #include \"base58.h\"\n #include \"clientversion.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // chainActive\n #include \"net.h\"\n #include \"netbase.h\"\n #include \"policy/policy.h\""
      },
      {
        "sha": "bbb17e059a2f7acc27597cde37d8a5d7859980e7",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"chainparams.h\"\n #include \"clientversion.h\"\n-#include \"main.h\"\n+#include \"main.h\" // GetNodeStateStats()\n #include \"net.h\"\n #include \"netbase.h\"\n #include \"policy/policy.h\""
      },
      {
        "sha": "ac741ac6939ba2c46c7462c12dbf03d762ffff5b",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -10,7 +10,7 @@\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"main.h\" // mapBlockIndex\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"primitives/transaction.h\""
      },
      {
        "sha": "a6d290fd8989e9607dbf73c67345a2f74f5bf812",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -5,7 +5,7 @@\n #include \"chainparams.h\"\n #include \"consensus/pow.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"main.h\" // SendMessages()\n #include \"net.h\"\n #include \"primitives/transaction.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "45c9d69bce3101af54701b8153109a996c1a7dd6",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"checkpoints.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"miner.h\"\n #include \"primitives/transaction.h\"\n #include \"pubkey.h\""
      },
      {
        "sha": "2b37c65f7afdb552e4fa74d4762d9ffe62140cf5",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -6,7 +6,7 @@\n #include \"rpcclient.h\"\n \n #include \"base58.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"wallet/wallet.h\"\n \n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "89d4ce810fe4048a82f29053d94838c22fde65c0",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -8,7 +8,7 @@\n #include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "56b2c7c092e31d05bc277072be37082cd3d4e195",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -8,7 +8,7 @@\n \n #include \"chainparams.h\"\n #include \"coinscache.h\"\n-#include \"main.h\"\n+#include \"main.h\" // pblocktree, pcoinsdbview, pcoinsTip\n #include \"policy/policy.h\"\n #include \"random.h\"\n #include \"txdb.h\""
      },
      {
        "sha": "38456446a5f7ab6511a63829609e6fa7693708ae",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -14,7 +14,7 @@\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/interpreter.h\""
      },
      {
        "sha": "437bfac9e638bed6e6d08f8dabc083b552168877",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -8,7 +8,7 @@\n #include \"chainparams.h\"\n #include \"consensus/pow.h\"\n #include \"hash.h\"\n-#include \"main.h\"\n+#include \"main.h\" // mapBlockIndex\n #include \"uint256.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "adab184925c4dc7f38190289758d1ea465248f5f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -11,7 +11,7 @@\n #include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"main.h\" // mapBlockIndex\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "78a0b7e2d8f8eca877fd1e26408e618506e4d286",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"base58.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // chainActive\n #include \"rpcserver.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "3fc14a01e6849588549b0341a8611a0d2b1fcc4b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -8,7 +8,7 @@\n #include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // mapBlockIndex\n #include \"net.h\"\n #include \"netbase.h\"\n #include \"rpcserver.h\""
      },
      {
        "sha": "c6672e049f4311d9ce8cb225fad2f1adfac0c2b0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/563fadbb8f501efa58205fff773ed81121515fc3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/563fadbb8f501efa58205fff773ed81121515fc3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=563fadbb8f501efa58205fff773ed81121515fc3",
        "patch": "@@ -12,7 +12,7 @@\n #include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"main.h\" // cs_main\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"primitives/block.h\""
      }
    ]
  },
  {
    "sha": "630a594f9863659e4d28edda812fdd0dd10d2351",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzBhNTk0Zjk4NjM2NTllNGQyOGVkZGE4MTJmZGQwZGQxMGQyMzUx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-10T16:05:28Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "Policy: Replace STANDARD script flags with ALL (which adds SCRIPT_VERIFY_LOW_S) for signing\n\nThe new ALL_SCRIPT_VERIFY_FLAGS in script/interpreter is independent from policy",
      "tree": {
        "sha": "6c3d194800c641b310b586d0be9a9ff5dc8391c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c3d194800c641b310b586d0be9a9ff5dc8391c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/630a594f9863659e4d28edda812fdd0dd10d2351",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/630a594f9863659e4d28edda812fdd0dd10d2351",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/630a594f9863659e4d28edda812fdd0dd10d2351",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/630a594f9863659e4d28edda812fdd0dd10d2351/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "563fadbb8f501efa58205fff773ed81121515fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/563fadbb8f501efa58205fff773ed81121515fc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/563fadbb8f501efa58205fff773ed81121515fc3"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d895fb8b978233d8cd6673d1996ce096bd248270",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/630a594f9863659e4d28edda812fdd0dd10d2351/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/630a594f9863659e4d28edda812fdd0dd10d2351/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=630a594f9863659e4d28edda812fdd0dd10d2351",
        "patch": "@@ -434,7 +434,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, ALL_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "570535d0298a428be3c53a7d4ca8d924027cfbc7",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/630a594f9863659e4d28edda812fdd0dd10d2351/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/630a594f9863659e4d28edda812fdd0dd10d2351/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=630a594f9863659e4d28edda812fdd0dd10d2351",
        "patch": "@@ -704,7 +704,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, ALL_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "f21d718335db305c91ff2f27a685e10f0ac08cd0",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/630a594f9863659e4d28edda812fdd0dd10d2351/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/630a594f9863659e4d28edda812fdd0dd10d2351/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=630a594f9863659e4d28edda812fdd0dd10d2351",
        "patch": "@@ -78,6 +78,15 @@ enum\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n };\n \n+static const unsigned int ALL_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH |\n+                                                    SCRIPT_VERIFY_STRICTENC |\n+                                                    SCRIPT_VERIFY_DERSIG |                                                    \n+                                                    SCRIPT_VERIFY_LOW_S |\n+                                                    SCRIPT_VERIFY_NULLDUMMY |\n+                                                    SCRIPT_VERIFY_MINIMALDATA |\n+                                                    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                                    SCRIPT_VERIFY_CLEANSTACK;\n+\n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n class BaseSignatureChecker"
      },
      {
        "sha": "849ad42c3735d13163b9d1076feb6fe7ef0f2f3b",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/630a594f9863659e4d28edda812fdd0dd10d2351/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/630a594f9863659e4d28edda812fdd0dd10d2351/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=630a594f9863659e4d28edda812fdd0dd10d2351",
        "patch": "@@ -123,7 +123,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     }\n \n     // Test solution\n-    return VerifyScript(scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return VerifyScript(scriptSig, fromPubKey, ALL_SCRIPT_VERIFY_FLAGS, creator.Checker());\n }\n \n bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)"
      }
    ]
  },
  {
    "sha": "59b7145c9053880d553d3015174d9c22a1d829c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWI3MTQ1YzkwNTM4ODBkNTUzZDMwMTUxNzRkOWMyMmExZDgyOWMx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-24T02:35:03Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "Policy: MOVEONLY: Move CFeeRate to policy",
      "tree": {
        "sha": "2e328dee128d72ad96e47db898aba3446b428470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e328dee128d72ad96e47db898aba3446b428470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59b7145c9053880d553d3015174d9c22a1d829c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b7145c9053880d553d3015174d9c22a1d829c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59b7145c9053880d553d3015174d9c22a1d829c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b7145c9053880d553d3015174d9c22a1d829c1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "630a594f9863659e4d28edda812fdd0dd10d2351",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/630a594f9863659e4d28edda812fdd0dd10d2351",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/630a594f9863659e4d28edda812fdd0dd10d2351"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 54,
      "deletions": 37
    },
    "files": [
      {
        "sha": "9e569e82510cb0c49dc7d06276a269695a1f1cb1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -109,6 +109,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   net.h \\\n   noui.h \\\n+  policy/feerate.h \\\n   policy/policy.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\\n@@ -185,6 +186,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n+  policy/feerate.cpp \\\n   policy/policy.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\\n@@ -242,7 +244,6 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n-  amount.cpp \\\n   arith_uint256.cpp \\\n   base58.cpp \\\n   chainparams.cpp \\"
      },
      {
        "sha": "acee3aabe5c1e8898d4f3c98888ea32440cd5922",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -6,45 +6,11 @@\n #ifndef BITCOIN_AMOUNT_H\n #define BITCOIN_AMOUNT_H\n \n-#include \"serialize.h\"\n-\n #include <stdlib.h>\n-#include <string>\n \n typedef int64_t CAmount;\n \n static const CAmount COIN = 100000000;\n static const CAmount CENT = 1000000;\n \n-/** Type-safe wrapper class to for fee rates\n- * (how much to pay based on transaction size)\n- */\n-class CFeeRate\n-{\n-private:\n-    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n-public:\n-    CFeeRate() : nSatoshisPerK(0) { }\n-    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n-    CFeeRate(const CAmount& nFeePaid, size_t nSize);\n-    CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n-\n-    CAmount GetFee(size_t size) const; // unit returned is satoshis\n-    CAmount GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n-\n-    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n-    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n-    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n-    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n-    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n-    std::string ToString() const;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(nSatoshisPerK);\n-    }\n-};\n-\n #endif //  BITCOIN_AMOUNT_H"
      },
      {
        "sha": "3c2db2a2e9eb778a7a1f568c5647ae9a7b3ce95c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -15,6 +15,7 @@\n #include \"hash.h\"\n #include \"main.h\" // cs_main\n #include \"net.h\"\n+#include \"policy/feerate.h\"\n #include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\""
      },
      {
        "sha": "ff99d4da688d8d7e6013224b9880b15273088661",
        "filename": "src/policy/feerate.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"amount.h\"\n+#include \"policy/feerate.h\"\n \n #include \"tinyformat.h\"\n ",
        "previous_filename": "src/amount.cpp"
      },
      {
        "sha": "7b0e443cc030201b726d4258af06f1ac8361d4a8",
        "filename": "src/policy/feerate.h",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_FEERATE_H\n+#define BITCOIN_POLICY_FEERATE_H\n+\n+#include \"amount.h\"\n+#include \"serialize.h\"\n+\n+#include <string>\n+\n+/** Type-safe wrapper class to for fee rates\n+ * (how much to pay based on transaction size)\n+ */\n+class CFeeRate\n+{\n+private:\n+    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+public:\n+    CFeeRate() : nSatoshisPerK(0) { }\n+    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n+    CFeeRate(const CAmount& nFeePaid, size_t nSize);\n+    CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n+\n+    CAmount GetFee(size_t size) const; // unit returned is satoshis\n+    CAmount GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n+\n+    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n+    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n+    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n+    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n+    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    std::string ToString() const;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(nSatoshisPerK);\n+    }\n+};\n+\n+#endif //  BITCOIN_POLICY_FEERATE_H"
      },
      {
        "sha": "c5ed2992dd474a7b264d5fb919017c00608c8a9e",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -10,6 +10,7 @@\n #include \"amount.h\"\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n+#include \"policy/feerate.h\"\n #include \"primitives/transaction.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "4da621e541d49a3f3dd00030af85475f26ae1bfd",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -9,6 +9,7 @@\n #include \"main.h\" // chainActive\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"policy/feerate.h\"\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"timedata.h\""
      },
      {
        "sha": "f01c194564308cdb50866f84dcf1c92657688add",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -9,6 +9,7 @@\n #include \"main.h\" // GetNodeStateStats()\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"policy/feerate.h\"\n #include \"policy/policy.h\"\n #include \"protocol.h\"\n #include \"sync.h\""
      },
      {
        "sha": "4a1f2db6cfce344d2303dd1f5dd002298d2190e5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -8,8 +8,8 @@\n \n #include <list>\n \n-#include \"amount.h\"\n #include \"coins.h\"\n+#include \"policy/feerate.h\"\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n "
      },
      {
        "sha": "3d06dde89a735fa02ea29f5e229fb3be23e7e614",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b7145c9053880d553d3015174d9c22a1d829c1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b7145c9053880d553d3015174d9c22a1d829c1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=59b7145c9053880d553d3015174d9c22a1d829c1",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_H\n \n #include \"amount.h\"\n+#include \"policy/feerate.h\"\n #include \"primitives/transaction.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\""
      }
    ]
  },
  {
    "sha": "afe977f0c18ad4f93325fe971d3ff7a74f682d48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmU5NzdmMGMxOGFkNGY5MzMyNWZlOTcxZDNmZjdhNzRmNjgyZDQ4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-03T13:57:46Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "Policy: MOVEONLY-ish: Move CMinerPolicyEstimator out of txmempool.o (CTxMemPoolEntry has to be separated temporarily as well)",
      "tree": {
        "sha": "eb1c1d255f8a79754b18aedb78225c018bd513f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb1c1d255f8a79754b18aedb78225c018bd513f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afe977f0c18ad4f93325fe971d3ff7a74f682d48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afe977f0c18ad4f93325fe971d3ff7a74f682d48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afe977f0c18ad4f93325fe971d3ff7a74f682d48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afe977f0c18ad4f93325fe971d3ff7a74f682d48/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59b7145c9053880d553d3015174d9c22a1d829c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b7145c9053880d553d3015174d9c22a1d829c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59b7145c9053880d553d3015174d9c22a1d829c1"
      }
    ],
    "stats": {
      "total": 883,
      "additions": 482,
      "deletions": 401
    },
    "files": [
      {
        "sha": "7372a0631c7d5267c701f17c056e35121d5a842a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "patch": "@@ -109,6 +109,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   net.h \\\n   noui.h \\\n+  policy/estimator.h \\\n   policy/feerate.h \\\n   policy/policy.h \\\n   primitives/block.h \\\n@@ -137,6 +138,7 @@ BITCOIN_CORE_H = \\\n   tinyformat.h \\\n   txdb.h \\\n   txmempool.h \\\n+  txmempoolentry.h \\\n   ui_interface.h \\\n   uint256.h \\\n   undo.h \\\n@@ -186,6 +188,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n+  policy/estimator.cpp \\\n   policy/feerate.cpp \\\n   policy/policy.cpp \\\n   rest.cpp \\\n@@ -199,6 +202,7 @@ libbitcoin_server_a_SOURCES = \\\n   timedata.cpp \\\n   txdb.cpp \\\n   txmempool.cpp \\\n+  txmempoolentry.cpp \\\n   validationinterface.cpp \\\n   $(JSON_H) \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "692df348600aba9f0e2a53de070e65b3c00b0cea",
        "filename": "src/policy/estimator.cpp",
        "status": "added",
        "additions": 300,
        "deletions": 0,
        "changes": 300,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/policy/estimator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/policy/estimator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/estimator.cpp?ref=afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "patch": "@@ -0,0 +1,300 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"policy/estimator.h\"\n+\n+#include \"policy/policy.h\"\n+#include \"streams.h\"\n+#include \"util.h\"\n+#include \"version.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+using namespace std;\n+\n+void CBlockAverage::RecordFee(const CFeeRate& feeRate) {\n+    feeSamples.push_back(feeRate);\n+}\n+\n+void CBlockAverage::RecordPriority(double priority) {\n+    prioritySamples.push_back(priority);\n+}\n+\n+size_t CBlockAverage::FeeSamples() const { return feeSamples.size(); }\n+\n+size_t CBlockAverage::GetFeeSamples(std::vector<CFeeRate>& insertInto) const\n+{\n+    BOOST_FOREACH(const CFeeRate& f, feeSamples)\n+        insertInto.push_back(f);\n+    return feeSamples.size();\n+}\n+\n+size_t CBlockAverage::PrioritySamples() const { return prioritySamples.size(); }\n+\n+size_t CBlockAverage::GetPrioritySamples(std::vector<double>& insertInto) const\n+{\n+    BOOST_FOREACH(double d, prioritySamples)\n+        insertInto.push_back(d);\n+    return prioritySamples.size();\n+}\n+\n+bool CBlockAverage::AreSane(const CFeeRate fee, const CFeeRate& minRelayFee)\n+{\n+    if (fee < CFeeRate(0))\n+        return false;\n+    if (fee.GetFeePerK() > minRelayFee.GetFeePerK() * 10000)\n+        return false;\n+    return true;\n+}\n+\n+bool CBlockAverage::AreSane(const std::vector<CFeeRate>& vecFee, const CFeeRate& minRelayFee)\n+{\n+    BOOST_FOREACH(CFeeRate fee, vecFee)\n+    {\n+        if (!AreSane(fee, minRelayFee))\n+            return false;\n+    }\n+    return true;\n+}\n+\n+bool CBlockAverage::AreSane(const double priority)\n+{\n+    return priority >= 0;\n+}\n+\n+bool CBlockAverage::AreSane(const std::vector<double> vecPriority)\n+{\n+    BOOST_FOREACH(double priority, vecPriority)\n+    {\n+        if (!AreSane(priority))\n+            return false;\n+    }\n+    return true;\n+}\n+\n+void CBlockAverage::Write(CAutoFile& fileout) const\n+{\n+    std::vector<CFeeRate> vecFee = buf2vec(feeSamples);\n+    fileout << vecFee;\n+    std::vector<double> vecPriority = buf2vec(prioritySamples);\n+    fileout << vecPriority;\n+}\n+\n+void CBlockAverage::Read(CAutoFile& filein, const CFeeRate& minRelayFee)\n+{\n+    std::vector<CFeeRate> vecFee;\n+    filein >> vecFee;\n+    if (AreSane(vecFee, minRelayFee))\n+        feeSamples.insert(feeSamples.end(), vecFee.begin(), vecFee.end());\n+    else\n+        throw runtime_error(\"Corrupt fee value in estimates file.\");\n+    std::vector<double> vecPriority;\n+    filein >> vecPriority;\n+    if (AreSane(vecPriority))\n+        prioritySamples.insert(prioritySamples.end(), vecPriority.begin(), vecPriority.end());\n+    else\n+        throw runtime_error(\"Corrupt priority value in estimates file.\");\n+    if (feeSamples.size() + prioritySamples.size() > 0)\n+        LogPrint(\"estimatefee\", \"Read %d fee samples and %d priority samples\\n\",\n+                 feeSamples.size(), prioritySamples.size());\n+}\n+\n+CMinerPolicyEstimator::CMinerPolicyEstimator(int nEntries) : nBestSeenHeight(0)\n+{\n+    history.resize(nEntries);\n+}\n+\n+void CMinerPolicyEstimator::seenTxConfirm(const CFeeRate& feeRate, const CFeeRate& minRelayFee, double dPriority, int nBlocksAgo)\n+{\n+    // Last entry records \"everything else\".\n+    int nBlocksTruncated = min(nBlocksAgo, (int) history.size() - 1);\n+    assert(nBlocksTruncated >= 0);\n+\n+    // We need to guess why the transaction was included in a block-- either\n+    // because it is high-priority or because it has sufficient fees.\n+    bool sufficientFee = (feeRate > minRelayFee);\n+    bool sufficientPriority = AllowFree(dPriority);\n+    const char* assignedTo = \"unassigned\";\n+    if (sufficientFee && !sufficientPriority && CBlockAverage::AreSane(feeRate, minRelayFee))\n+    {\n+        history[nBlocksTruncated].RecordFee(feeRate);\n+        assignedTo = \"fee\";\n+    }\n+    else if (sufficientPriority && !sufficientFee && CBlockAverage::AreSane(dPriority))\n+    {\n+        history[nBlocksTruncated].RecordPriority(dPriority);\n+        assignedTo = \"priority\";\n+    }\n+    else {\n+        // Neither or both fee and priority sufficient to get confirmed:\n+        // don't know why they got confirmed.\n+    }\n+    LogPrint(\"estimatefee\", \"Seen TX confirm: %s: %s fee/%g priority, took %d blocks\\n\",\n+             assignedTo, feeRate.ToString(), dPriority, nBlocksAgo);\n+}\n+\n+void CMinerPolicyEstimator::seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight, const CFeeRate minRelayFee)\n+{\n+    if (nBlockHeight <= nBestSeenHeight) {\n+        // Ignore side chains and re-orgs; assuming they are random\n+        // they don't affect the estimate.\n+        // And if an attacker can re-org the chain at will, then\n+        // you've got much bigger problems than \"attacker can influence\n+        // transaction fees.\"\n+        return;\n+    }\n+    nBestSeenHeight = nBlockHeight;\n+\n+    // Fill up the history buckets based on how long transactions took\n+    // to confirm.\n+    std::vector<std::vector<const CTxMemPoolEntry*> > entriesByConfirmations;\n+    entriesByConfirmations.resize(history.size());\n+    BOOST_FOREACH(const CTxMemPoolEntry& entry, entries)\n+    {\n+        // How many blocks did it take for miners to include this transaction?\n+        int delta = nBlockHeight - entry.GetHeight();\n+        if (delta <= 0) {\n+            // Re-org made us lose height, this should only happen if we happen\n+            // to re-org on a difficulty transition point: very rare!\n+            continue;\n+        }\n+        if ((delta-1) >= (int)history.size())\n+            delta = history.size(); // Last bucket is catch-all\n+        entriesByConfirmations.at(delta-1).push_back(&entry);\n+    }\n+    for (size_t i = 0; i < entriesByConfirmations.size(); i++) {\n+\n+        std::vector<const CTxMemPoolEntry*> &e = entriesByConfirmations.at(i);\n+        // Insert at most 10 random entries per bucket, otherwise a single block\n+        // can dominate an estimate:\n+        if (e.size() > 10) {\n+            std::random_shuffle(e.begin(), e.end());\n+            e.resize(10);\n+        }\n+        BOOST_FOREACH(const CTxMemPoolEntry* entry, e)\n+        {\n+            // Fees are stored and reported as BTC-per-kb:\n+            CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n+            double dPriority = entry->GetPriority(entry->GetHeight()); // Want priority when it went IN\n+            seenTxConfirm(feeRate, minRelayFee, dPriority, i);\n+        }\n+    }\n+\n+    // After new samples are added, we have to clear the sorted lists,\n+    // so they'll be resorted the next time someone asks for an estimate\n+    sortedFeeSamples.clear();\n+    sortedPrioritySamples.clear();\n+\n+    for (size_t i = 0; i < history.size(); i++) {\n+        if (history[i].FeeSamples() + history[i].PrioritySamples() > 0)\n+            LogPrint(\"estimatefee\", \"estimates: for confirming within %d blocks based on %d/%d samples, fee=%s, prio=%g\\n\", \n+                     i,\n+                     history[i].FeeSamples(), history[i].PrioritySamples(),\n+                     estimateFee(i+1).ToString(), estimatePriority(i+1));\n+    }\n+}\n+\n+CFeeRate CMinerPolicyEstimator::estimateFee(int nBlocksToConfirm)\n+{\n+    nBlocksToConfirm--;\n+\n+    if (nBlocksToConfirm < 0 || nBlocksToConfirm >= (int)history.size())\n+        return CFeeRate(0);\n+\n+    if (sortedFeeSamples.size() == 0)\n+    {\n+        for (size_t i = 0; i < history.size(); i++)\n+            history.at(i).GetFeeSamples(sortedFeeSamples);\n+        std::sort(sortedFeeSamples.begin(), sortedFeeSamples.end(),\n+                  std::greater<CFeeRate>());\n+    }\n+    if (sortedFeeSamples.size() < 11)\n+    {\n+        // Eleven is Gavin's Favorite Number\n+        // ... but we also take a maximum of 10 samples per block so eleven means\n+        // we're getting samples from at least two different blocks\n+        return CFeeRate(0);\n+    }\n+\n+    int nBucketSize = history.at(nBlocksToConfirm).FeeSamples();\n+\n+    // Estimates should not increase as number of confirmations goes up,\n+    // but the estimates are noisy because confirmations happen discretely\n+    // in blocks. To smooth out the estimates, use all samples in the history\n+    // and use the nth highest where n is (number of samples in previous bucket +\n+    // half the samples in nBlocksToConfirm bucket):\n+    size_t nPrevSize = 0;\n+    for (int i = 0; i < nBlocksToConfirm; i++)\n+        nPrevSize += history.at(i).FeeSamples();\n+    size_t index = min(nPrevSize + nBucketSize/2, sortedFeeSamples.size()-1);\n+    return sortedFeeSamples[index];\n+}\n+\n+double CMinerPolicyEstimator::estimatePriority(int nBlocksToConfirm)\n+{\n+    nBlocksToConfirm--;\n+\n+    if (nBlocksToConfirm < 0 || nBlocksToConfirm >= (int)history.size())\n+        return -1;\n+\n+    if (sortedPrioritySamples.size() == 0)\n+    {\n+        for (size_t i = 0; i < history.size(); i++)\n+            history.at(i).GetPrioritySamples(sortedPrioritySamples);\n+        std::sort(sortedPrioritySamples.begin(), sortedPrioritySamples.end(),\n+                  std::greater<double>());\n+    }\n+\n+    if (sortedPrioritySamples.size() < 11)\n+        return -1.0;\n+\n+    int nBucketSize = history.at(nBlocksToConfirm).PrioritySamples();\n+\n+    // Estimates should not increase as number of confirmations needed goes up,\n+    // but the estimates are noisy because confirmations happen discretely\n+    // in blocks. To smooth out the estimates, use all samples in the history\n+    // and use the nth highest where n is (number of samples in previous buckets +\n+    // half the samples in nBlocksToConfirm bucket).\n+    size_t nPrevSize = 0;\n+    for (int i = 0; i < nBlocksToConfirm; i++)\n+        nPrevSize += history.at(i).PrioritySamples();\n+    size_t index = min(nPrevSize + nBucketSize/2, sortedPrioritySamples.size()-1);\n+    return sortedPrioritySamples[index];\n+}\n+\n+void CMinerPolicyEstimator::Write(CAutoFile& fileout) const\n+{\n+    fileout << nBestSeenHeight;\n+    fileout << (uint32_t)history.size();\n+    BOOST_FOREACH(const CBlockAverage& entry, history)\n+    {\n+        entry.Write(fileout);\n+    }\n+}\n+\n+void CMinerPolicyEstimator::Read(CAutoFile& filein, const CFeeRate& minRelayFee)\n+{\n+    int nFileBestSeenHeight;\n+    filein >> nFileBestSeenHeight;\n+    uint32_t numEntries;\n+    filein >> numEntries;\n+    if (numEntries <= 0 || numEntries > 10000)\n+        throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");\n+\n+    std::vector<CBlockAverage> fileHistory;\n+        \n+    for (size_t i = 0; i < numEntries; i++)\n+    {\n+        CBlockAverage entry;\n+        entry.Read(filein, minRelayFee);\n+        fileHistory.push_back(entry);\n+    }\n+\n+    // Now that we've processed the entire fee estimate data file and not\n+    // thrown any errors, we can copy it to our history\n+    nBestSeenHeight = nFileBestSeenHeight;\n+    history = fileHistory;\n+    assert(history.size() > 0);\n+}"
      },
      {
        "sha": "19768bed91b71b9324f8efc4a0061722f241a7f2",
        "filename": "src/policy/estimator.h",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/policy/estimator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/policy/estimator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/estimator.h?ref=afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "patch": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MINER_POLICY_ESTIMATOR_H\n+#define BITCOIN_MINER_POLICY_ESTIMATOR_H\n+\n+#include \"policy/feerate.h\"\n+#include \"txmempoolentry.h\"\n+\n+#include <boost/circular_buffer.hpp>\n+\n+class CAutoFile;\n+\n+/**\n+ * Keep track of fee/priority for transactions confirmed within N blocks\n+ */\n+class CBlockAverage\n+{\n+private:\n+    boost::circular_buffer<CFeeRate> feeSamples;\n+    boost::circular_buffer<double> prioritySamples;\n+\n+    template<typename T> \n+    std::vector<T> buf2vec(boost::circular_buffer<T> buf) const\n+    {\n+        std::vector<T> vec(buf.begin(), buf.end());\n+        return vec;\n+    }\n+\n+public:\n+    CBlockAverage() : feeSamples(100), prioritySamples(100) { }\n+\n+    void RecordFee(const CFeeRate& feeRate);\n+    void RecordPriority(double priority);\n+    size_t FeeSamples() const;\n+    size_t GetFeeSamples(std::vector<CFeeRate>& insertInto) const;\n+    size_t PrioritySamples() const;\n+    size_t GetPrioritySamples(std::vector<double>& insertInto) const;\n+    /**\n+     * Used as belt-and-suspenders check when reading to detect\n+     * file corruption\n+     */\n+    static bool AreSane(const CFeeRate fee, const CFeeRate& minRelayFee);\n+    static bool AreSane(const std::vector<CFeeRate>& vecFee, const CFeeRate& minRelayFee);\n+    static bool AreSane(const double priority);\n+    static bool AreSane(const std::vector<double> vecPriority);\n+    void Write(CAutoFile& fileout) const;\n+    void Read(CAutoFile& filein, const CFeeRate& minRelayFee);\n+};\n+\n+class CMinerPolicyEstimator\n+{\n+private:\n+    /**\n+     * Records observed averages transactions that confirmed within one block, two blocks,\n+     * three blocks etc.\n+     */\n+    std::vector<CBlockAverage> history;\n+    std::vector<CFeeRate> sortedFeeSamples;\n+    std::vector<double> sortedPrioritySamples;\n+\n+    int nBestSeenHeight;\n+\n+    /**\n+     * nBlocksAgo is 0 based, i.e. transactions that confirmed in the highest seen block are\n+     * nBlocksAgo == 0, transactions in the block before that are nBlocksAgo == 1 etc.\n+     */\n+    void seenTxConfirm(const CFeeRate& feeRate, const CFeeRate& minRelayFee, double dPriority, int nBlocksAgo);\n+\n+public:\n+    CMinerPolicyEstimator(int nEntries);\n+    void seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight, const CFeeRate minRelayFee);\n+    /**\n+     * Can return CFeeRate(0) if we don't have any data for that many blocks back. nBlocksToConfirm is 1 based.\n+     */\n+    CFeeRate estimateFee(int nBlocksToConfirm);\n+    double estimatePriority(int nBlocksToConfirm);\n+    void Write(CAutoFile& fileout) const;\n+    void Read(CAutoFile& filein, const CFeeRate& minRelayFee);\n+};\n+\n+#endif // BITCOIN_MINER_POLICY_ESTIMATOR_H"
      },
      {
        "sha": "ad233c3ae9c8aaebd658451535257785c5a79bf6",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "patch": "@@ -60,6 +60,18 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n extern bool fIsBareMultisigStd;\n extern CFeeRate minRelayTxFee;\n \n+inline double AllowFreeThreshold()\n+{\n+    return COIN * 144 / 250;\n+}\n+\n+inline bool AllowFree(double dPriority)\n+{\n+    // Large (in bytes) low-priority (new, small-coin) transactions\n+    // need a fee.\n+    return dPriority > AllowFreeThreshold();\n+}\n+\n /** Abstract interface for Policy */\n class CPolicy\n {"
      },
      {
        "sha": "95739e3f293e0a7f863cfe63a872b613d19366d9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 355,
        "changes": 355,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "patch": "@@ -21,361 +21,6 @@\n \n using namespace std;\n \n-CTxMemPoolEntry::CTxMemPoolEntry():\n-    nFee(0), nTxSize(0), nModSize(0), nTime(0), dPriority(0.0)\n-{\n-    nHeight = MEMPOOL_HEIGHT;\n-}\n-\n-CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                                 int64_t _nTime, double _dPriority,\n-                                 unsigned int _nHeight):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight)\n-{\n-    nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-\n-    nModSize = tx.CalculateModifiedSize(nTxSize);\n-}\n-\n-CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n-{\n-    *this = other;\n-}\n-\n-double\n-CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n-{\n-    CAmount nValueIn = Consensus::GetValueOut(tx) + nFee;\n-    double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n-    double dResult = dPriority + deltaPriority;\n-    return dResult;\n-}\n-\n-/**\n- * Keep track of fee/priority for transactions confirmed within N blocks\n- */\n-class CBlockAverage\n-{\n-private:\n-    boost::circular_buffer<CFeeRate> feeSamples;\n-    boost::circular_buffer<double> prioritySamples;\n-\n-    template<typename T> std::vector<T> buf2vec(boost::circular_buffer<T> buf) const\n-    {\n-        std::vector<T> vec(buf.begin(), buf.end());\n-        return vec;\n-    }\n-\n-public:\n-    CBlockAverage() : feeSamples(100), prioritySamples(100) { }\n-\n-    void RecordFee(const CFeeRate& feeRate) {\n-        feeSamples.push_back(feeRate);\n-    }\n-\n-    void RecordPriority(double priority) {\n-        prioritySamples.push_back(priority);\n-    }\n-\n-    size_t FeeSamples() const { return feeSamples.size(); }\n-    size_t GetFeeSamples(std::vector<CFeeRate>& insertInto) const\n-    {\n-        BOOST_FOREACH(const CFeeRate& f, feeSamples)\n-            insertInto.push_back(f);\n-        return feeSamples.size();\n-    }\n-    size_t PrioritySamples() const { return prioritySamples.size(); }\n-    size_t GetPrioritySamples(std::vector<double>& insertInto) const\n-    {\n-        BOOST_FOREACH(double d, prioritySamples)\n-            insertInto.push_back(d);\n-        return prioritySamples.size();\n-    }\n-\n-    /**\n-     * Used as belt-and-suspenders check when reading to detect\n-     * file corruption\n-     */\n-    static bool AreSane(const CFeeRate fee, const CFeeRate& minRelayFee)\n-    {\n-        if (fee < CFeeRate(0))\n-            return false;\n-        if (fee.GetFeePerK() > minRelayFee.GetFeePerK() * 10000)\n-            return false;\n-        return true;\n-    }\n-    static bool AreSane(const std::vector<CFeeRate>& vecFee, const CFeeRate& minRelayFee)\n-    {\n-        BOOST_FOREACH(CFeeRate fee, vecFee)\n-        {\n-            if (!AreSane(fee, minRelayFee))\n-                return false;\n-        }\n-        return true;\n-    }\n-    static bool AreSane(const double priority)\n-    {\n-        return priority >= 0;\n-    }\n-    static bool AreSane(const std::vector<double> vecPriority)\n-    {\n-        BOOST_FOREACH(double priority, vecPriority)\n-        {\n-            if (!AreSane(priority))\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    void Write(CAutoFile& fileout) const\n-    {\n-        std::vector<CFeeRate> vecFee = buf2vec(feeSamples);\n-        fileout << vecFee;\n-        std::vector<double> vecPriority = buf2vec(prioritySamples);\n-        fileout << vecPriority;\n-    }\n-\n-    void Read(CAutoFile& filein, const CFeeRate& minRelayFee) {\n-        std::vector<CFeeRate> vecFee;\n-        filein >> vecFee;\n-        if (AreSane(vecFee, minRelayFee))\n-            feeSamples.insert(feeSamples.end(), vecFee.begin(), vecFee.end());\n-        else\n-            throw runtime_error(\"Corrupt fee value in estimates file.\");\n-        std::vector<double> vecPriority;\n-        filein >> vecPriority;\n-        if (AreSane(vecPriority))\n-            prioritySamples.insert(prioritySamples.end(), vecPriority.begin(), vecPriority.end());\n-        else\n-            throw runtime_error(\"Corrupt priority value in estimates file.\");\n-        if (feeSamples.size() + prioritySamples.size() > 0)\n-            LogPrint(\"estimatefee\", \"Read %d fee samples and %d priority samples\\n\",\n-                     feeSamples.size(), prioritySamples.size());\n-    }\n-};\n-\n-class CMinerPolicyEstimator\n-{\n-private:\n-    /**\n-     * Records observed averages transactions that confirmed within one block, two blocks,\n-     * three blocks etc.\n-     */\n-    std::vector<CBlockAverage> history;\n-    std::vector<CFeeRate> sortedFeeSamples;\n-    std::vector<double> sortedPrioritySamples;\n-\n-    int nBestSeenHeight;\n-\n-    /**\n-     * nBlocksAgo is 0 based, i.e. transactions that confirmed in the highest seen block are\n-     * nBlocksAgo == 0, transactions in the block before that are nBlocksAgo == 1 etc.\n-     */\n-    void seenTxConfirm(const CFeeRate& feeRate, const CFeeRate& minRelayFee, double dPriority, int nBlocksAgo)\n-    {\n-        // Last entry records \"everything else\".\n-        int nBlocksTruncated = min(nBlocksAgo, (int) history.size() - 1);\n-        assert(nBlocksTruncated >= 0);\n-\n-        // We need to guess why the transaction was included in a block-- either\n-        // because it is high-priority or because it has sufficient fees.\n-        bool sufficientFee = (feeRate > minRelayFee);\n-        bool sufficientPriority = AllowFree(dPriority);\n-        const char* assignedTo = \"unassigned\";\n-        if (sufficientFee && !sufficientPriority && CBlockAverage::AreSane(feeRate, minRelayFee))\n-        {\n-            history[nBlocksTruncated].RecordFee(feeRate);\n-            assignedTo = \"fee\";\n-        }\n-        else if (sufficientPriority && !sufficientFee && CBlockAverage::AreSane(dPriority))\n-        {\n-            history[nBlocksTruncated].RecordPriority(dPriority);\n-            assignedTo = \"priority\";\n-        }\n-        else\n-        {\n-            // Neither or both fee and priority sufficient to get confirmed:\n-            // don't know why they got confirmed.\n-        }\n-        LogPrint(\"estimatefee\", \"Seen TX confirm: %s: %s fee/%g priority, took %d blocks\\n\",\n-                 assignedTo, feeRate.ToString(), dPriority, nBlocksAgo);\n-    }\n-\n-public:\n-    CMinerPolicyEstimator(int nEntries) : nBestSeenHeight(0)\n-    {\n-        history.resize(nEntries);\n-    }\n-\n-    void seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight, const CFeeRate minRelayFee)\n-    {\n-        if (nBlockHeight <= nBestSeenHeight)\n-        {\n-            // Ignore side chains and re-orgs; assuming they are random\n-            // they don't affect the estimate.\n-            // And if an attacker can re-org the chain at will, then\n-            // you've got much bigger problems than \"attacker can influence\n-            // transaction fees.\"\n-            return;\n-        }\n-        nBestSeenHeight = nBlockHeight;\n-\n-        // Fill up the history buckets based on how long transactions took\n-        // to confirm.\n-        std::vector<std::vector<const CTxMemPoolEntry*> > entriesByConfirmations;\n-        entriesByConfirmations.resize(history.size());\n-        BOOST_FOREACH(const CTxMemPoolEntry& entry, entries)\n-        {\n-            // How many blocks did it take for miners to include this transaction?\n-            int delta = nBlockHeight - entry.GetHeight();\n-            if (delta <= 0)\n-            {\n-                // Re-org made us lose height, this should only happen if we happen\n-                // to re-org on a difficulty transition point: very rare!\n-                continue;\n-            }\n-            if ((delta-1) >= (int)history.size())\n-                delta = history.size(); // Last bucket is catch-all\n-            entriesByConfirmations.at(delta-1).push_back(&entry);\n-        }\n-        for (size_t i = 0; i < entriesByConfirmations.size(); i++)\n-        {\n-            std::vector<const CTxMemPoolEntry*> &e = entriesByConfirmations.at(i);\n-            // Insert at most 10 random entries per bucket, otherwise a single block\n-            // can dominate an estimate:\n-            if (e.size() > 10) {\n-                std::random_shuffle(e.begin(), e.end());\n-                e.resize(10);\n-            }\n-            BOOST_FOREACH(const CTxMemPoolEntry* entry, e)\n-            {\n-                // Fees are stored and reported as BTC-per-kb:\n-                CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n-                double dPriority = entry->GetPriority(entry->GetHeight()); // Want priority when it went IN\n-                seenTxConfirm(feeRate, minRelayFee, dPriority, i);\n-            }\n-        }\n-\n-        // After new samples are added, we have to clear the sorted lists,\n-        // so they'll be resorted the next time someone asks for an estimate\n-        sortedFeeSamples.clear();\n-        sortedPrioritySamples.clear();\n-\n-        for (size_t i = 0; i < history.size(); i++) {\n-            if (history[i].FeeSamples() + history[i].PrioritySamples() > 0)\n-                LogPrint(\"estimatefee\", \"estimates: for confirming within %d blocks based on %d/%d samples, fee=%s, prio=%g\\n\", \n-                         i,\n-                         history[i].FeeSamples(), history[i].PrioritySamples(),\n-                         estimateFee(i+1).ToString(), estimatePriority(i+1));\n-        }\n-    }\n-\n-    /**\n-     * Can return CFeeRate(0) if we don't have any data for that many blocks back. nBlocksToConfirm is 1 based.\n-     */\n-    CFeeRate estimateFee(int nBlocksToConfirm)\n-    {\n-        nBlocksToConfirm--;\n-\n-        if (nBlocksToConfirm < 0 || nBlocksToConfirm >= (int)history.size())\n-            return CFeeRate(0);\n-\n-        if (sortedFeeSamples.size() == 0)\n-        {\n-            for (size_t i = 0; i < history.size(); i++)\n-                history.at(i).GetFeeSamples(sortedFeeSamples);\n-            std::sort(sortedFeeSamples.begin(), sortedFeeSamples.end(),\n-                      std::greater<CFeeRate>());\n-        }\n-        if (sortedFeeSamples.size() < 11)\n-        {\n-            // Eleven is Gavin's Favorite Number\n-            // ... but we also take a maximum of 10 samples per block so eleven means\n-            // we're getting samples from at least two different blocks\n-            return CFeeRate(0);\n-        }\n-\n-        int nBucketSize = history.at(nBlocksToConfirm).FeeSamples();\n-\n-        // Estimates should not increase as number of confirmations goes up,\n-        // but the estimates are noisy because confirmations happen discretely\n-        // in blocks. To smooth out the estimates, use all samples in the history\n-        // and use the nth highest where n is (number of samples in previous bucket +\n-        // half the samples in nBlocksToConfirm bucket):\n-        size_t nPrevSize = 0;\n-        for (int i = 0; i < nBlocksToConfirm; i++)\n-            nPrevSize += history.at(i).FeeSamples();\n-        size_t index = min(nPrevSize + nBucketSize/2, sortedFeeSamples.size()-1);\n-        return sortedFeeSamples[index];\n-    }\n-    double estimatePriority(int nBlocksToConfirm)\n-    {\n-        nBlocksToConfirm--;\n-\n-        if (nBlocksToConfirm < 0 || nBlocksToConfirm >= (int)history.size())\n-            return -1;\n-\n-        if (sortedPrioritySamples.size() == 0)\n-        {\n-            for (size_t i = 0; i < history.size(); i++)\n-                history.at(i).GetPrioritySamples(sortedPrioritySamples);\n-            std::sort(sortedPrioritySamples.begin(), sortedPrioritySamples.end(),\n-                      std::greater<double>());\n-        }\n-        if (sortedPrioritySamples.size() < 11)\n-            return -1.0;\n-\n-        int nBucketSize = history.at(nBlocksToConfirm).PrioritySamples();\n-\n-        // Estimates should not increase as number of confirmations needed goes up,\n-        // but the estimates are noisy because confirmations happen discretely\n-        // in blocks. To smooth out the estimates, use all samples in the history\n-        // and use the nth highest where n is (number of samples in previous buckets +\n-        // half the samples in nBlocksToConfirm bucket).\n-        size_t nPrevSize = 0;\n-        for (int i = 0; i < nBlocksToConfirm; i++)\n-            nPrevSize += history.at(i).PrioritySamples();\n-        size_t index = min(nPrevSize + nBucketSize/2, sortedPrioritySamples.size()-1);\n-        return sortedPrioritySamples[index];\n-    }\n-\n-    void Write(CAutoFile& fileout) const\n-    {\n-        fileout << nBestSeenHeight;\n-        fileout << (uint32_t)history.size();\n-        BOOST_FOREACH(const CBlockAverage& entry, history)\n-        {\n-            entry.Write(fileout);\n-        }\n-    }\n-\n-    void Read(CAutoFile& filein, const CFeeRate& minRelayFee)\n-    {\n-        int nFileBestSeenHeight;\n-        filein >> nFileBestSeenHeight;\n-        uint32_t numEntries;\n-        filein >> numEntries;\n-        if (numEntries <= 0 || numEntries > 10000)\n-            throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");\n-\n-        std::vector<CBlockAverage> fileHistory;\n-        \n-        for (size_t i = 0; i < numEntries; i++)\n-        {\n-            CBlockAverage entry;\n-            entry.Read(filein, minRelayFee);\n-            fileHistory.push_back(entry);\n-        }\n-\n-        // Now that we've processed the entire fee estimate data file and not\n-        // thrown any errors, we can copy it to our history\n-        nBestSeenHeight = nFileBestSeenHeight;\n-        history = fileHistory;\n-        assert(history.size() > 0);\n-    }\n-};\n-\n-\n CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) :\n     nTransactionsUpdated(0),\n     minRelayFee(_minRelayFee)"
      },
      {
        "sha": "a907f8324cd60186c351ffe21a0c3159930a8f26",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 46,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "patch": "@@ -9,58 +9,13 @@\n #include <list>\n \n #include \"coins.h\"\n-#include \"policy/feerate.h\"\n+#include \"policy/estimator.h\"\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n \n class CAutoFile;\n class CCoinsViewCache;\n \n-inline double AllowFreeThreshold()\n-{\n-    return COIN * 144 / 250;\n-}\n-\n-inline bool AllowFree(double dPriority)\n-{\n-    // Large (in bytes) low-priority (new, small-coin) transactions\n-    // need a fee.\n-    return dPriority > AllowFreeThreshold();\n-}\n-\n-/** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n-static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n-\n-/**\n- * CTxMemPool stores these:\n- */\n-class CTxMemPoolEntry\n-{\n-private:\n-    CTransaction tx;\n-    CAmount nFee; //! Cached to avoid expensive parent-transaction lookups\n-    size_t nTxSize; //! ... and avoid recomputing tx size\n-    size_t nModSize; //! ... and modified size for priority\n-    int64_t nTime; //! Local time when entering the mempool\n-    double dPriority; //! Priority when entering the mempool\n-    unsigned int nHeight; //! Chain height when entering the mempool\n-\n-public:\n-    CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _dPriority, unsigned int _nHeight);\n-    CTxMemPoolEntry();\n-    CTxMemPoolEntry(const CTxMemPoolEntry& other);\n-\n-    const CTransaction& GetTx() const { return this->tx; }\n-    double GetPriority(unsigned int currentHeight) const;\n-    CAmount GetFee() const { return nFee; }\n-    size_t GetTxSize() const { return nTxSize; }\n-    int64_t GetTime() const { return nTime; }\n-    unsigned int GetHeight() const { return nHeight; }\n-};\n-\n-class CMinerPolicyEstimator;\n-\n /** An inpoint - a combination of a transaction and an index n into its vin */\n class CInPoint\n {"
      },
      {
        "sha": "f9d219715fa921e089a52bde78d2c59118c9e682",
        "filename": "src/txmempoolentry.cpp",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/txmempoolentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/txmempoolentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempoolentry.cpp?ref=afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"txmempoolentry.h\"\n+\n+#include \"consensus/consensus.h\"\n+#include \"version.h\"\n+\n+CTxMemPoolEntry::CTxMemPoolEntry():\n+    nFee(0), nTxSize(0), nModSize(0), nTime(0), dPriority(0.0)\n+{\n+    nHeight = MEMPOOL_HEIGHT;\n+}\n+\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n+                                 int64_t _nTime, double _dPriority,\n+                                 unsigned int _nHeight):\n+    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight)\n+{\n+    nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+\n+    nModSize = tx.CalculateModifiedSize(nTxSize);\n+}\n+\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n+{\n+    *this = other;\n+}\n+\n+double CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n+{\n+    CAmount nValueIn = Consensus::GetValueOut(tx) + nFee;\n+    double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n+    double dResult = dPriority + deltaPriority;\n+    return dResult;\n+}"
      },
      {
        "sha": "dfa2b822e2815de4586390f2d4773336d3337c98",
        "filename": "src/txmempoolentry.h",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/txmempoolentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afe977f0c18ad4f93325fe971d3ff7a74f682d48/src/txmempoolentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempoolentry.h?ref=afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXMEMPOOLENTRY_H\n+#define BITCOIN_TXMEMPOOLENTRY_H\n+\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+\n+/** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n+static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n+\n+/**\n+ * CTxMemPool stores these:\n+ */\n+class CTxMemPoolEntry\n+{\n+private:\n+    CTransaction tx;\n+    CAmount nFee; //! Cached to avoid expensive parent-transaction lookups\n+    size_t nTxSize; //! ... and avoid recomputing tx size\n+    size_t nModSize; //! ... and modified size for priority\n+    int64_t nTime; //! Local time when entering the mempool\n+    double dPriority; //! Priority when entering the mempool\n+    unsigned int nHeight; //! Chain height when entering the mempool\n+\n+public:\n+    CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n+                    int64_t _nTime, double _dPriority, unsigned int _nHeight);\n+    CTxMemPoolEntry();\n+    CTxMemPoolEntry(const CTxMemPoolEntry& other);\n+\n+    const CTransaction& GetTx() const { return this->tx; }\n+    double GetPriority(unsigned int currentHeight) const;\n+    CAmount GetFee() const { return nFee; }\n+    size_t GetTxSize() const { return nTxSize; }\n+    int64_t GetTime() const { return nTime; }\n+    unsigned int GetHeight() const { return nHeight; }\n+};\n+\n+#endif // BITCOIN_TXMEMPOOLENTRY_H"
      }
    ]
  },
  {
    "sha": "8714d8e08eff0e59ec341ffec7e629d145d7f3c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzE0ZDhlMDhlZmYwZTU5ZWMzNDFmZmVjN2U2MjlkMTQ1ZDdmM2M5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-07T02:52:57Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "Policy: Refactor: Don't pass a CTxMemPool param to CWallet::GetMinimumFee()",
      "tree": {
        "sha": "9c30794e2240243474912791b11423c365044c6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c30794e2240243474912791b11423c365044c6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8714d8e08eff0e59ec341ffec7e629d145d7f3c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8714d8e08eff0e59ec341ffec7e629d145d7f3c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8714d8e08eff0e59ec341ffec7e629d145d7f3c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8714d8e08eff0e59ec341ffec7e629d145d7f3c9/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afe977f0c18ad4f93325fe971d3ff7a74f682d48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afe977f0c18ad4f93325fe971d3ff7a74f682d48"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4dc34685f470649ced558104ea4a685c5c45dc84",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8714d8e08eff0e59ec341ffec7e629d145d7f3c9/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8714d8e08eff0e59ec341ffec7e629d145d7f3c9/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=8714d8e08eff0e59ec341ffec7e629d145d7f3c9",
        "patch": "@@ -550,7 +550,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget);\n \n         // Allow free?\n         double dPriorityNeeded = mempoolEstimatePriority;"
      },
      {
        "sha": "3980bb3e2b87efedf8bdc2e5a6932df42fefb010",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8714d8e08eff0e59ec341ffec7e629d145d7f3c9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8714d8e08eff0e59ec341ffec7e629d145d7f3c9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8714d8e08eff0e59ec341ffec7e629d145d7f3c9",
        "patch": "@@ -1927,7 +1927,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                         break;\n                 }\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget);\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n@@ -1999,7 +1999,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n     return true;\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget)\n {\n     // payTxFee is user-set \"I want to pay this much\"\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n@@ -2008,7 +2008,7 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n         nFeeNeeded = payTxFee.GetFeePerK();\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0)\n-        nFeeNeeded = pool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n+        nFeeNeeded = mempool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n     // ... unless we don't have enough mempool data, in which case fall\n     // back to a hard-coded fee\n     if (nFeeNeeded == 0)"
      },
      {
        "sha": "78d3f9c250782a36e471af0f75487e4f5e9dfc39",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8714d8e08eff0e59ec341ffec7e629d145d7f3c9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8714d8e08eff0e59ec341ffec7e629d145d7f3c9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8714d8e08eff0e59ec341ffec7e629d145d7f3c9",
        "patch": "@@ -625,7 +625,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);"
      }
    ]
  },
  {
    "sha": "ba88aa141985bfba94a67289cf176e3a562971da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTg4YWExNDE5ODViZmJhOTRhNjcyODljZjE3NmUzYTU2Mjk3MWRh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-07T07:29:22Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:46Z"
      },
      "message": "Policy: Refactor: Decouple CTxMemPool from CMinerPolicyEstimator and policy::minRelayTxFee",
      "tree": {
        "sha": "0cc0b347b05a218c4b22715c49359b398e724cb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cc0b347b05a218c4b22715c49359b398e724cb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba88aa141985bfba94a67289cf176e3a562971da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba88aa141985bfba94a67289cf176e3a562971da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba88aa141985bfba94a67289cf176e3a562971da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba88aa141985bfba94a67289cf176e3a562971da/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8714d8e08eff0e59ec341ffec7e629d145d7f3c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8714d8e08eff0e59ec341ffec7e629d145d7f3c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8714d8e08eff0e59ec341ffec7e629d145d7f3c9"
      }
    ],
    "stats": {
      "total": 218,
      "additions": 97,
      "deletions": 121
    },
    "files": [
      {
        "sha": "618c105ff5d7abe6539a34f8c0c8050ae7d2ad13",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -21,6 +21,7 @@\n #include \"main.h\" // cs_main\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/estimator.h\"\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n@@ -168,7 +169,7 @@ void Shutdown()\n         boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())\n-            mempool.WriteFeeEstimates(est_fileout);\n+            minerPolicyEstimator.Write(est_fileout);\n         else\n             LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n         fFeeEstimatesInitialized = false;\n@@ -1121,7 +1122,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     CAutoFile est_filein(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (!est_filein.IsNull())\n-        mempool.ReadFeeEstimates(est_filein);\n+        minerPolicyEstimator.Read(est_filein);\n     fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: load wallet"
      },
      {
        "sha": "87b0237f07d18303568a3fb6b045fa89b2faa3c3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -19,6 +19,7 @@\n #include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n+#include \"policy/estimator.h\"\n #include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n@@ -67,7 +68,7 @@ bool fTxIndex = false;\n bool fCheckBlockIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n-CTxMemPool mempool(::minRelayTxFee);\n+CTxMemPool mempool;\n \n struct COrphanTx {\n     CTransaction tx;\n@@ -1735,7 +1736,9 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     LogPrint(\"bench\", \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n     // Remove conflicting transactions from the mempool.\n     list<CTransaction> txConflicted;\n-    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted);\n+    std::vector<CTxMemPoolEntry> entries;\n+    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, entries);\n+    minerPolicyEstimator.seenBlock(entries, pindexNew->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);"
      },
      {
        "sha": "a6f018989cb6beac066f0a45b0dac52cfe232b64",
        "filename": "src/policy/estimator.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 28,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/policy/estimator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/policy/estimator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/estimator.cpp?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"policy/estimator.h\"\n \n+#include \"clientversion.h\"\n #include \"policy/policy.h\"\n #include \"streams.h\"\n #include \"util.h\"\n@@ -14,6 +15,15 @@\n \n using namespace std;\n \n+/**\n+ * 25 blocks is a compromise between using a lot of disk/memory and\n+ * trying to give accurate estimates to people who might be willing\n+ * to wait a day or two to save a fraction of a penny in fees.\n+ * Confirmation times for very-low-fee transactions that take more\n+ * than an hour or three to confirm are highly variable.\n+ */\n+CMinerPolicyEstimator minerPolicyEstimator(25);\n+\n void CBlockAverage::RecordFee(const CFeeRate& feeRate) {\n     feeSamples.push_back(feeRate);\n }\n@@ -108,6 +118,7 @@ CMinerPolicyEstimator::CMinerPolicyEstimator(int nEntries) : nBestSeenHeight(0)\n \n void CMinerPolicyEstimator::seenTxConfirm(const CFeeRate& feeRate, const CFeeRate& minRelayFee, double dPriority, int nBlocksAgo)\n {\n+    LOCK(cs);\n     // Last entry records \"everything else\".\n     int nBlocksTruncated = min(nBlocksAgo, (int) history.size() - 1);\n     assert(nBlocksTruncated >= 0);\n@@ -135,8 +146,9 @@ void CMinerPolicyEstimator::seenTxConfirm(const CFeeRate& feeRate, const CFeeRat\n              assignedTo, feeRate.ToString(), dPriority, nBlocksAgo);\n }\n \n-void CMinerPolicyEstimator::seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight, const CFeeRate minRelayFee)\n+void CMinerPolicyEstimator::seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight)\n {\n+    LOCK(cs);\n     if (nBlockHeight <= nBestSeenHeight) {\n         // Ignore side chains and re-orgs; assuming they are random\n         // they don't affect the estimate.\n@@ -178,7 +190,7 @@ void CMinerPolicyEstimator::seenBlock(const std::vector<CTxMemPoolEntry>& entrie\n             // Fees are stored and reported as BTC-per-kb:\n             CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n             double dPriority = entry->GetPriority(entry->GetHeight()); // Want priority when it went IN\n-            seenTxConfirm(feeRate, minRelayFee, dPriority, i);\n+            seenTxConfirm(feeRate, minRelayTxFee, dPriority, i);\n         }\n     }\n \n@@ -198,6 +210,7 @@ void CMinerPolicyEstimator::seenBlock(const std::vector<CTxMemPoolEntry>& entrie\n \n CFeeRate CMinerPolicyEstimator::estimateFee(int nBlocksToConfirm)\n {\n+    LOCK(cs);\n     nBlocksToConfirm--;\n \n     if (nBlocksToConfirm < 0 || nBlocksToConfirm >= (int)history.size())\n@@ -234,6 +247,7 @@ CFeeRate CMinerPolicyEstimator::estimateFee(int nBlocksToConfirm)\n \n double CMinerPolicyEstimator::estimatePriority(int nBlocksToConfirm)\n {\n+    LOCK(cs);\n     nBlocksToConfirm--;\n \n     if (nBlocksToConfirm < 0 || nBlocksToConfirm >= (int)history.size())\n@@ -264,37 +278,57 @@ double CMinerPolicyEstimator::estimatePriority(int nBlocksToConfirm)\n     return sortedPrioritySamples[index];\n }\n \n-void CMinerPolicyEstimator::Write(CAutoFile& fileout) const\n+bool CMinerPolicyEstimator::Write(CAutoFile& fileout) const\n {\n-    fileout << nBestSeenHeight;\n-    fileout << (uint32_t)history.size();\n-    BOOST_FOREACH(const CBlockAverage& entry, history)\n-    {\n-        entry.Write(fileout);\n+    try {\n+        LOCK(cs);\n+        fileout << 99900; // version required to read: 0.9.99 or later\n+        fileout << CLIENT_VERSION; // version that wrote the file\n+        fileout << nBestSeenHeight;\n+        fileout << (uint32_t)history.size();\n+        BOOST_FOREACH(const CBlockAverage& entry, history)\n+            entry.Write(fileout);\n+    }\n+    catch (const std::exception&) {\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\", __func__);\n+        return false;\n     }\n+    return true;\n }\n \n-void CMinerPolicyEstimator::Read(CAutoFile& filein, const CFeeRate& minRelayFee)\n+bool CMinerPolicyEstimator::Read(CAutoFile& filein)\n {\n-    int nFileBestSeenHeight;\n-    filein >> nFileBestSeenHeight;\n-    uint32_t numEntries;\n-    filein >> numEntries;\n-    if (numEntries <= 0 || numEntries > 10000)\n-        throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");\n-\n-    std::vector<CBlockAverage> fileHistory;\n+    try {\n+        int nVersionRequired, nVersionThatWrote;\n+        filein >> nVersionRequired >> nVersionThatWrote;\n+        if (nVersionRequired > CLIENT_VERSION)\n+            return error(\"%s: up-version (%d) fee estimate file\", __func__, nVersionRequired);\n+\n+        LOCK(cs);\n+        int nFileBestSeenHeight;\n+        filein >> nFileBestSeenHeight;\n+        uint32_t numEntries;\n+        filein >> numEntries;\n+        if (numEntries <= 0 || numEntries > 10000)\n+            throw runtime_error(\"Corrupt estimates file. Must have between 1 and 10k entries.\");\n+\n+        std::vector<CBlockAverage> fileHistory;\n         \n-    for (size_t i = 0; i < numEntries; i++)\n-    {\n-        CBlockAverage entry;\n-        entry.Read(filein, minRelayFee);\n-        fileHistory.push_back(entry);\n-    }\n+        for (size_t i = 0; i < numEntries; i++) {\n+            CBlockAverage entry;\n+            entry.Read(filein, minRelayTxFee);\n+            fileHistory.push_back(entry);\n+        }\n \n-    // Now that we've processed the entire fee estimate data file and not\n-    // thrown any errors, we can copy it to our history\n-    nBestSeenHeight = nFileBestSeenHeight;\n-    history = fileHistory;\n-    assert(history.size() > 0);\n+        // Now that we've processed the entire fee estimate data file and not\n+        // thrown any errors, we can copy it to our history\n+        nBestSeenHeight = nFileBestSeenHeight;\n+        history = fileHistory;\n+        assert(history.size() > 0);\n+    }\n+    catch (const std::exception&) {\n+        LogPrintf(\"%s: unable to read policy estimator data (non-fatal)\", __func__);\n+        return false;\n+    }\n+    return true;\n }"
      },
      {
        "sha": "bddd0aa8ec379390adf49b486b658d2e1b836fe8",
        "filename": "src/policy/estimator.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/policy/estimator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/policy/estimator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/estimator.h?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_MINER_POLICY_ESTIMATOR_H\n \n #include \"policy/feerate.h\"\n+#include \"sync.h\"\n #include \"txmempoolentry.h\"\n \n #include <boost/circular_buffer.hpp>\n@@ -53,6 +54,7 @@ class CBlockAverage\n class CMinerPolicyEstimator\n {\n private:\n+    mutable CCriticalSection cs;\n     /**\n      * Records observed averages transactions that confirmed within one block, two blocks,\n      * three blocks etc.\n@@ -71,14 +73,18 @@ class CMinerPolicyEstimator\n \n public:\n     CMinerPolicyEstimator(int nEntries);\n-    void seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight, const CFeeRate minRelayFee);\n+    void seenBlock(const std::vector<CTxMemPoolEntry>& entries, int nBlockHeight);\n     /**\n+     * Estimate fee rate needed to get into the next nBlocks.\n      * Can return CFeeRate(0) if we don't have any data for that many blocks back. nBlocksToConfirm is 1 based.\n      */\n     CFeeRate estimateFee(int nBlocksToConfirm);\n+    /** Estimate priority needed to get into the next nBlocks */\n     double estimatePriority(int nBlocksToConfirm);\n-    void Write(CAutoFile& fileout) const;\n-    void Read(CAutoFile& filein, const CFeeRate& minRelayFee);\n+    bool Write(CAutoFile& fileout) const;\n+    bool Read(CAutoFile& filein);\n };\n \n+extern CMinerPolicyEstimator minerPolicyEstimator;\n+\n #endif // BITCOIN_MINER_POLICY_ESTIMATOR_H"
      },
      {
        "sha": "28106e8d9e370bbf622c1201963ed1d8b3f36ae0",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -14,7 +14,7 @@\n #include \"walletmodel.h\"\n \n #include \"coincontrol.h\"\n-// #include \"main.h\" // mempool\n+#include \"policy/estimator.h\"\n #include \"policy/policy.h\"\n #include \"txmempool.h\"\n #include \"wallet/wallet.h\"\n@@ -540,7 +540,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         nBytes = nBytesInputs + ((CoinControlDialog::payAmounts.size() > 0 ? CoinControlDialog::payAmounts.size() + 1 : 2) * 34) + 10; // always assume +1 output for change here\n \n         // Priority\n-        double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n+        double mempoolEstimatePriority = minerPolicyEstimator.estimatePriority(nTxConfirmTarget);\n         dPriority = dPriorityInputs / (nBytes - nBytesInputs + (nQuantityUncompressed * 29)); // 29 = 180 - 151 (uncompressed public keys are over the limit. max 151 bytes of the input are ignored for priority)\n         sPriorityLabel = CoinControlDialog::getPriorityLabel(dPriority, mempoolEstimatePriority);\n \n@@ -652,7 +652,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::minTxFee.GetFeePerK(), payTxFee.GetFeePerK()) / 1000;\n     else\n-        dFeeVary = (double)std::max(CWallet::minTxFee.GetFeePerK(), mempool.estimateFee(nTxConfirmTarget).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::minTxFee.GetFeePerK(), minerPolicyEstimator.estimateFee(nTxConfirmTarget).GetFeePerK()) / 1000;\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n \n     l3->setToolTip(toolTip4);\n@@ -688,7 +688,7 @@ void CoinControlDialog::updateView()\n     QFlags<Qt::ItemFlag> flgTristate = Qt::ItemIsSelectable | Qt::ItemIsEnabled | Qt::ItemIsUserCheckable | Qt::ItemIsTristate;\n \n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n-    double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n+    double mempoolEstimatePriority = minerPolicyEstimator.estimatePriority(nTxConfirmTarget);\n \n     map<QString, vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);"
      },
      {
        "sha": "94b9ba17279e6151b7f3148d3ec278a24598f712",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -17,7 +17,7 @@\n \n #include \"base58.h\"\n #include \"coincontrol.h\"\n-#include \"main.h\" // mempool\n+#include \"policy/estimator.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"wallet/wallet.h\"\n@@ -631,7 +631,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n         return;\n \n     int nBlocksToConfirm = (int)25 - (int)std::max(0, std::min(24, ui->sliderSmartFee->value()));\n-    CFeeRate feeRate = mempool.estimateFee(nBlocksToConfirm);\n+    CFeeRate feeRate = minerPolicyEstimator.estimateFee(nBlocksToConfirm);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), CWallet::minTxFee.GetFeePerK()) + \"/kB\");"
      },
      {
        "sha": "4543f19c4f5c066f83aef32a20e074110b531ec6",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -13,6 +13,7 @@\n #include \"main.h\" // chainActive\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/estimator.h\"\n #include \"rpcserver.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n@@ -679,7 +680,7 @@ Value estimatefee(const Array& params, bool fHelp)\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n-    CFeeRate feeRate = mempool.estimateFee(nBlocks);\n+    CFeeRate feeRate = minerPolicyEstimator.estimateFee(nBlocks);\n     if (feeRate == CFeeRate(0))\n         return -1.0;\n \n@@ -711,5 +712,5 @@ Value estimatepriority(const Array& params, bool fHelp)\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n-    return mempool.estimatePriority(nBlocks);\n+    return minerPolicyEstimator.estimatePriority(nBlocks);\n }"
      },
      {
        "sha": "49b2c23c0360d376d048e18689cf243dddd570cb",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 61,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -6,7 +6,6 @@\n #include \"txmempool.h\"\n \n #include \"chain.h\"\n-#include \"clientversion.h\"\n #include \"coins.h\"\n #include \"coinscache.h\"\n #include \"consensus/consensus.h\"\n@@ -21,26 +20,17 @@\n \n using namespace std;\n \n-CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) :\n-    nTransactionsUpdated(0),\n-    minRelayFee(_minRelayFee)\n+CTxMemPool::CTxMemPool() :\n+    nTransactionsUpdated(0)\n {\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n     fSanityCheck = false;\n-\n-    // 25 blocks is a compromise between using a lot of disk/memory and\n-    // trying to give accurate estimates to people who might be willing\n-    // to wait a day or two to save a fraction of a penny in fees.\n-    // Confirmation times for very-low-fee transactions that take more\n-    // than an hour or three to confirm are highly variable.\n-    minerPolicyEstimator = new CMinerPolicyEstimator(25);\n }\n \n CTxMemPool::~CTxMemPool()\n {\n-    delete minerPolicyEstimator;\n }\n \n void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n@@ -166,17 +156,15 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n  * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                                std::list<CTransaction>& conflicts)\n+                                std::list<CTransaction>& conflicts, std::vector<CTxMemPoolEntry>& entries)\n {\n     LOCK(cs);\n-    std::vector<CTxMemPoolEntry> entries;\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n         uint256 hash = tx.GetHash();\n         if (mapTx.count(hash))\n             entries.push_back(mapTx[hash]);\n     }\n-    minerPolicyEstimator->seenBlock(entries, nBlockHeight, minRelayFee);\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n         std::list<CTransaction> dummy;\n@@ -290,52 +278,6 @@ bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n     return true;\n }\n \n-CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n-{\n-    LOCK(cs);\n-    return minerPolicyEstimator->estimateFee(nBlocks);\n-}\n-double CTxMemPool::estimatePriority(int nBlocks) const\n-{\n-    LOCK(cs);\n-    return minerPolicyEstimator->estimatePriority(nBlocks);\n-}\n-\n-bool\n-CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n-{\n-    try {\n-        LOCK(cs);\n-        fileout << 99900; // version required to read: 0.9.99 or later\n-        fileout << CLIENT_VERSION; // version that wrote the file\n-        minerPolicyEstimator->Write(fileout);\n-    }\n-    catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\");\n-        return false;\n-    }\n-    return true;\n-}\n-\n-bool\n-CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n-{\n-    try {\n-        int nVersionRequired, nVersionThatWrote;\n-        filein >> nVersionRequired >> nVersionThatWrote;\n-        if (nVersionRequired > CLIENT_VERSION)\n-            return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n-\n-        LOCK(cs);\n-        minerPolicyEstimator->Read(filein, minRelayFee);\n-    }\n-    catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\");\n-        return false;\n-    }\n-    return true;\n-}\n-\n void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {"
      },
      {
        "sha": "ba4a50418da4f172783995d0c79cba8dc44bc829",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -9,9 +9,9 @@\n #include <list>\n \n #include \"coins.h\"\n-#include \"policy/estimator.h\"\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n+#include \"txmempoolentry.h\"\n \n class CAutoFile;\n class CCoinsViewCache;\n@@ -44,9 +44,7 @@ class CTxMemPool\n private:\n     bool fSanityCheck; //! Normally false, true if -checkmempool or -regtest\n     unsigned int nTransactionsUpdated;\n-    CMinerPolicyEstimator* minerPolicyEstimator;\n \n-    CFeeRate minRelayFee; //! Passed to constructor to avoid dependency on main\n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n \n public:\n@@ -55,7 +53,7 @@ class CTxMemPool\n     std::map<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n-    CTxMemPool(const CFeeRate& _minRelayFee);\n+    CTxMemPool();\n     ~CTxMemPool();\n \n     /**\n@@ -72,7 +70,7 @@ class CTxMemPool\n     void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                        std::list<CTransaction>& conflicts);\n+                        std::list<CTransaction>& conflicts, std::vector<CTxMemPoolEntry>& entries);\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n@@ -102,16 +100,6 @@ class CTxMemPool\n     }\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n-\n-    /** Estimate fee rate needed to get into the next nBlocks */\n-    CFeeRate estimateFee(int nBlocks) const;\n-\n-    /** Estimate priority needed to get into the next nBlocks */\n-    double estimatePriority(int nBlocks) const;\n-    \n-    /** Write/Read estimates to disk */\n-    bool WriteFeeEstimates(CAutoFile& fileout) const;\n-    bool ReadFeeEstimates(CAutoFile& filein);\n };\n \n /** "
      },
      {
        "sha": "495ba9f449b8068dfe3fd187e42ede3ec31b586a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba88aa141985bfba94a67289cf176e3a562971da/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba88aa141985bfba94a67289cf176e3a562971da/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ba88aa141985bfba94a67289cf176e3a562971da",
        "patch": "@@ -14,6 +14,7 @@\n #include \"keystore.h\"\n #include \"main.h\" // cs_main\n #include \"net.h\"\n+#include \"policy/estimator.h\"\n #include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"script/script.h\"\n@@ -1917,7 +1918,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                 if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n                 {\n                     // Not enough fee: enough priority?\n-                    double dPriorityNeeded = mempool.estimatePriority(nTxConfirmTarget);\n+                    double dPriorityNeeded = minerPolicyEstimator.estimatePriority(nTxConfirmTarget);\n                     // Not enough mempool history to estimate: use hard-coded AllowFree.\n                     if (dPriorityNeeded <= 0 && AllowFree(dPriority))\n                         break;\n@@ -2008,7 +2009,7 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n         nFeeNeeded = payTxFee.GetFeePerK();\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0)\n-        nFeeNeeded = mempool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n+        nFeeNeeded = minerPolicyEstimator.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n     // ... unless we don't have enough mempool data, in which case fall\n     // back to a hard-coded fee\n     if (nFeeNeeded == 0)"
      }
    ]
  },
  {
    "sha": "db84bc13a950c7bd28562662614ae50a484dc2ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjg0YmMxM2E5NTBjN2JkMjg1NjI2NjI2MTRhZTUwYTQ4NGRjMmVl",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T21:05:32Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Refactor: SQUASHED: inline GetMinRelayFee() in AcceptToMemoryPool()",
      "tree": {
        "sha": "b1cc73ab6624b9149e62167d01d59807031285fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1cc73ab6624b9149e62167d01d59807031285fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db84bc13a950c7bd28562662614ae50a484dc2ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db84bc13a950c7bd28562662614ae50a484dc2ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db84bc13a950c7bd28562662614ae50a484dc2ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db84bc13a950c7bd28562662614ae50a484dc2ee/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba88aa141985bfba94a67289cf176e3a562971da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba88aa141985bfba94a67289cf176e3a562971da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba88aa141985bfba94a67289cf176e3a562971da"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 41,
      "deletions": 66
    },
    "files": [
      {
        "sha": "5d17edd109ce27bf6ff1544c8bd30c898a5f0a5a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 63,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db84bc13a950c7bd28562662614ae50a484dc2ee/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db84bc13a950c7bd28562662614ae50a484dc2ee/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=db84bc13a950c7bd28562662614ae50a484dc2ee",
        "patch": "@@ -68,6 +68,8 @@ bool fTxIndex = false;\n bool fCheckBlockIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n+bool fAllowFree = true;\n+\n CTxMemPool mempool;\n \n struct COrphanTx {\n@@ -590,37 +592,6 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return Consensus::IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-\n-CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n-{\n-    {\n-        LOCK(mempool.cs);\n-        uint256 hash = tx.GetHash();\n-        double dPriorityDelta = 0;\n-        CAmount nFeeDelta = 0;\n-        mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-        if (dPriorityDelta > 0 || nFeeDelta > 0)\n-            return 0;\n-    }\n-\n-    CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n-\n-    if (fAllowFree)\n-    {\n-        // There is a free transaction area in blocks created by most miners,\n-        // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n-        //   to be considered to fall into this category. We don't want to encourage sending\n-        //   multiple transactions instead of one big transaction to avoid fees.\n-        if (nBytes < (DEFAULT_BLOCK_PRIORITY_SIZE - 1000))\n-            nMinFee = 0;\n-    }\n-\n-    if (!Consensus::VerifyAmount(nMinFee))\n-        nMinFee = MAX_MONEY;\n-    return nMinFee;\n-}\n-\n-\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n@@ -744,41 +715,48 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n         unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+        bool fValidateFee = nFees >= ::minRelayTxFee.GetFee(nSize);\n+        if (fLimitFree && !fValidateFee) {\n+            double dPriorityDelta = 0;\n+            CAmount nFeeDelta = 0;\n+            mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n+            if (!(dPriorityDelta > 0 || nFeeDelta > 0 ||\n+                // There is a free transaction area in blocks created by most miners,\n+                // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n+                //   to be considered to fall into this category. We don't want to encourage sending\n+                //   multiple transactions instead of one big transaction to avoid fees.\n+                  (fAllowFree && nSize < DEFAULT_BLOCK_PRIORITY_SIZE - 1000)))\n+                return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n+                                          hash.ToString(), nFees, ::minRelayTxFee.GetFee(nSize)),\n+                                 REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+\n+            // Continuously rate-limit free (really, very-low-fee) transactions\n+            // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n+            // be annoying or make others' transactions take longer to confirm.\n+            {\n+                static CCriticalSection csFreeLimiter;\n+                static double dFreeCount;\n+                static int64_t nLastTime;\n+                int64_t nNow = GetTime();\n+\n+                LOCK(csFreeLimiter);\n+\n+                // Use an exponentially decaying ~10-minute window:\n+                dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+                nLastTime = nNow;\n+                // -limitfreerelay unit is thousand-bytes-per-minute\n+                // At default rate it would take over a month to fill 1GB\n+                if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+                    return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n+                                     REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+                LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+                dFreeCount += nSize;\n+            }\n+        }\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        if (GetBoolArg(\"-relaypriority\", true) && !fValidateFee && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1)))\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-        }\n-\n-        // Continuously rate-limit free (really, very-low-fee) transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n             return error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\","
      },
      {
        "sha": "099a540240d9fe0dfcfdd24644b22b0db4e3833f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db84bc13a950c7bd28562662614ae50a484dc2ee/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db84bc13a950c7bd28562662614ae50a484dc2ee/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=db84bc13a950c7bd28562662614ae50a484dc2ee",
        "patch": "@@ -198,9 +198,6 @@ struct CDiskTxPos : public CDiskBlockPos\n     }\n };\n \n-\n-CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n-\n /**\n  * Check transaction inputs, and make sure any\n  * pay-to-script-hash transactions are evaluating IsStandard scripts"
      }
    ]
  },
  {
    "sha": "0c93f9b003c727af62697d9fd5bec2bdfbda500a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzkzZjliMDAzYzcyN2FmNjI2OTdkOWZkNWJlYzJiZGZiZGE1MDBh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-05T18:18:45Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Refactor: Simplify CheckInputsScripts",
      "tree": {
        "sha": "5d0f1a068016f06f1bf895a6acbd1f4f0efc6b05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d0f1a068016f06f1bf895a6acbd1f4f0efc6b05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c93f9b003c727af62697d9fd5bec2bdfbda500a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c93f9b003c727af62697d9fd5bec2bdfbda500a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c93f9b003c727af62697d9fd5bec2bdfbda500a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c93f9b003c727af62697d9fd5bec2bdfbda500a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db84bc13a950c7bd28562662614ae50a484dc2ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db84bc13a950c7bd28562662614ae50a484dc2ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db84bc13a950c7bd28562662614ae50a484dc2ee"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 7,
      "deletions": 18
    },
    "files": [
      {
        "sha": "5f41a1e6b505b3c012ed9ee6729b3a7a8777f02c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 18,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c93f9b003c727af62697d9fd5bec2bdfbda500a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c93f9b003c727af62697d9fd5bec2bdfbda500a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0c93f9b003c727af62697d9fd5bec2bdfbda500a",
        "patch": "@@ -1116,7 +1116,7 @@ int GetSpendHeight(const CCoinsViewEfficient& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& inputs, unsigned int flags, bool cacheStore)\n+bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& view, unsigned int flags, bool cacheStore)\n {\n         // The first loop above does all the inexpensive checks.\n         // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n@@ -1125,36 +1125,25 @@ bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const C\n         // Skip ECDSA signature verification when connecting blocks\n         // before the last block chain checkpoint. This is safe because block merkle hashes are\n         // still computed and checked, and any change will be caught at the next checkpoint.\n-            for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-                const COutPoint &prevout = tx.vin[i].prevout;\n-                const CCoins* coins = inputs.AccessCoins(prevout.hash);\n-                assert(coins);\n-\n-                // Verify signature\n-                CScriptCheck check(*coins, tx, i, flags, cacheStore);\n-                if (!check()) {\n-                    if (flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) {\n+    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, flags)) {\n                         // Check whether the failure was caused by a\n                         // non-mandatory script verification check, such as\n                         // non-standard DER encodings or non-null dummy\n                         // arguments; if so, don't trigger DoS protection to\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n-                        CScriptCheck check(*coins, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore);\n-                        if (check())\n-                            return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n-                    }\n+        if ((flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) &&\n+            Consensus::CheckTxInputsScripts(tx, state, view, true, flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS))\n+            return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"with flags: STANDARD_NOT_MANDATORY (%s)\", state.GetRejectReason()));\n                     // Failures of other flags indicate a transaction that is\n                     // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n                     // such nodes as they are not following the protocol. That\n                     // said during an upgrade careful thought should be taken\n                     // as to the correct behavior - we may want to continue\n                     // peering with non-upgraded nodes even after a soft-fork\n                     // super-majority vote has passed.\n-                    return state.DoS(100,false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n-                }\n-            }\n+        return state.DoS(100,false, REJECT_INVALID, strprintf(\"with flags: MANDATORY (%s)\", state.GetRejectReason()));\n+    }\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTk0YzhlNWE0MmMzYTQ5ZWE0ZWVjYmMwMTE0ODkxZDNhMWE1NWNk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-05T18:20:28Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: SQUASHME: Refactor: Simplify CheckInputsScripts",
      "tree": {
        "sha": "d78331e816f3c88c9373a14edca199ef2a0bdcd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d78331e816f3c88c9373a14edca199ef2a0bdcd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c93f9b003c727af62697d9fd5bec2bdfbda500a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c93f9b003c727af62697d9fd5bec2bdfbda500a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c93f9b003c727af62697d9fd5bec2bdfbda500a"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 29,
      "deletions": 39
    },
    "files": [
      {
        "sha": "72683838faf07de7c967656c4a07a270dfb9efa0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 39,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd",
        "patch": "@@ -765,21 +765,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputsScripts(tx, state, view, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n+        if (!CheckInputsScripts(tx, state, view, true))\n             return error(\"%s: CheckInputsScripts failed with STANDARD flags %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n-        // Check again against just the consensus-critical mandatory script\n-        // verification flags, in case of bugs in the standard flags that cause\n-        // transactions to pass as valid when they're actually invalid. For\n-        // instance the STRICTENC flag was incorrectly allowing certain\n-        // CHECKSIG NOT scripts to pass, even though they were invalid.\n-        //\n-        // There is a similar check in CreateNewBlock() to prevent creating\n-        // invalid blocks, however allowing such transactions into the mempool\n-        // can be exploited as a DoS attack.\n-        if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n-            return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputsScripts failed against MANDATORY but not STANDARD flags %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n-\n         // Store transaction in memory\n         pool.addUnchecked(hash, entry);\n     }\n@@ -1116,34 +1104,36 @@ int GetSpendHeight(const CCoinsViewEfficient& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& view, unsigned int flags, bool cacheStore)\n+bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& view, bool cacheStore)\n {\n-        // The first loop above does all the inexpensive checks.\n-        // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n-        // Helps prevent CPU exhaustion attacks.\n-\n-        // Skip ECDSA signature verification when connecting blocks\n-        // before the last block chain checkpoint. This is safe because block merkle hashes are\n-        // still computed and checked, and any change will be caught at the next checkpoint.\n-    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, flags)) {\n-                        // Check whether the failure was caused by a\n-                        // non-mandatory script verification check, such as\n-                        // non-standard DER encodings or non-null dummy\n-                        // arguments; if so, don't trigger DoS protection to\n-                        // avoid splitting the network between upgraded and\n-                        // non-upgraded nodes.\n-        if ((flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) &&\n-            Consensus::CheckTxInputsScripts(tx, state, view, true, flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS))\n-            return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"with flags: STANDARD_NOT_MANDATORY (%s)\", state.GetRejectReason()));\n-                    // Failures of other flags indicate a transaction that is\n-                    // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n-                    // such nodes as they are not following the protocol. That\n-                    // said during an upgrade careful thought should be taken\n-                    // as to the correct behavior - we may want to continue\n-                    // peering with non-upgraded nodes even after a soft-fork\n-                    // super-majority vote has passed.\n+    // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n+    // Helps prevent CPU exhaustion attacks.\n+\n+    // Skip ECDSA signature verification when connecting blocks\n+    // before the last block chain checkpoint. This is safe because block merkle hashes are\n+    // still computed and checked, and any change will be caught at the next checkpoint.\n+    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n+        // Failures of non-policy flags indicate a transaction that is\n+        // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n+        // such nodes as they are not following the protocol. That\n+        // said during an upgrade careful thought should be taken\n+        // as to the correct behavior - we may want to continue\n+        // peering with non-upgraded nodes even after a soft-fork\n+        // super-majority vote has passed.\n         return state.DoS(100,false, REJECT_INVALID, strprintf(\"with flags: MANDATORY (%s)\", state.GetRejectReason()));\n-    }\n+\n+    // Check again against just the non-consensus-critical policy but\n+    // not mandatory script verification flags, such as\n+    // non-standard DER encodings or non-null dummy\n+    // arguments; if so, don't trigger DoS protection to\n+    // avoid splitting the network between upgraded and\n+    // non-upgraded nodes.\n+    // This is done later in case of bugs in the standard flags that cause\n+    // transactions to pass as valid when they're actually invalid. For\n+    // instance the STRICTENC flag was incorrectly allowing certain\n+    // CHECKSIG NOT scripts to pass, even though they were invalid.\n+    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS | STANDARD_NOT_MANDATORY_VERIFY_FLAGS))\n+        return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"with flags: STANDARD_NOT_MANDATORY (%s)\", state.GetRejectReason()));\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "b50257bcaabada9a6e7f283f6a323e057e0f5f30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTAyNTdiY2FhYmFkYTlhNmU3ZjI4M2Y2YTMyM2UwNTdlMGY1ZjMw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-09T13:01:38Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: MOVEONLY: CPolicy::ApproveTxInputsScripts from main::CheckInputsScripts",
      "tree": {
        "sha": "08292ec4622694379ec8f8ee98458461d37ea857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08292ec4622694379ec8f8ee98458461d37ea857"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b50257bcaabada9a6e7f283f6a323e057e0f5f30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50257bcaabada9a6e7f283f6a323e057e0f5f30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b50257bcaabada9a6e7f283f6a323e057e0f5f30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50257bcaabada9a6e7f283f6a323e057e0f5f30/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a94c8e5a42c3a49ea4eecbc0114891d3a1a55cd"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 43,
      "deletions": 45
    },
    "files": [
      {
        "sha": "05fa5c34a8558053a2180946ec24dffac2a665ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 36,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50257bcaabada9a6e7f283f6a323e057e0f5f30/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50257bcaabada9a6e7f283f6a323e057e0f5f30/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b50257bcaabada9a6e7f283f6a323e057e0f5f30",
        "patch": "@@ -765,8 +765,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputsScripts(tx, state, view, true))\n-            return error(\"%s: CheckInputsScripts failed with STANDARD flags %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n+        if (!Policy().ApproveTxInputsScripts(tx, state, view, true))\n+            return error(\"%s: CPolicy::ApproveTxInputsScripts failed: %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry);\n@@ -1104,40 +1104,6 @@ int GetSpendHeight(const CCoinsViewEfficient& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& view, bool cacheStore)\n-{\n-    // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n-    // Helps prevent CPU exhaustion attacks.\n-\n-    // Skip ECDSA signature verification when connecting blocks\n-    // before the last block chain checkpoint. This is safe because block merkle hashes are\n-    // still computed and checked, and any change will be caught at the next checkpoint.\n-    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n-        // Failures of non-policy flags indicate a transaction that is\n-        // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n-        // such nodes as they are not following the protocol. That\n-        // said during an upgrade careful thought should be taken\n-        // as to the correct behavior - we may want to continue\n-        // peering with non-upgraded nodes even after a soft-fork\n-        // super-majority vote has passed.\n-        return state.DoS(100,false, REJECT_INVALID, strprintf(\"with flags: MANDATORY (%s)\", state.GetRejectReason()));\n-\n-    // Check again against just the non-consensus-critical policy but\n-    // not mandatory script verification flags, such as\n-    // non-standard DER encodings or non-null dummy\n-    // arguments; if so, don't trigger DoS protection to\n-    // avoid splitting the network between upgraded and\n-    // non-upgraded nodes.\n-    // This is done later in case of bugs in the standard flags that cause\n-    // transactions to pass as valid when they're actually invalid. For\n-    // instance the STRICTENC flag was incorrectly allowing certain\n-    // CHECKSIG NOT scripts to pass, even though they were invalid.\n-    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS | STANDARD_NOT_MANDATORY_VERIFY_FLAGS))\n-        return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"with flags: STANDARD_NOT_MANDATORY (%s)\", state.GetRejectReason()));\n-\n-    return true;\n-}\n-\n namespace {\n \n bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint256& hashBlock)"
      },
      {
        "sha": "3f0bbe67fb9c248e934c9c7d26c20c49b50fe216",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50257bcaabada9a6e7f283f6a323e057e0f5f30/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50257bcaabada9a6e7f283f6a323e057e0f5f30/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b50257bcaabada9a6e7f283f6a323e057e0f5f30",
        "patch": "@@ -210,15 +210,6 @@ struct CDiskTxPos : public CDiskBlockPos\n  *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n  */\n \n-\n-/**\n- * Check whether all inputs of this transaction are valid (scripts and sigs)\n- * This does not modify the UTXO set. This does not check double spends and amounts.\n- * Preconditions: tx.IsCoinBase() is false\n- */\n-bool CheckInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& view, \n-                        unsigned int flags, bool cacheStore);\n-\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight);\n "
      },
      {
        "sha": "1138ef0a93bf5ca2f8a43e833e087f9ff4b273ac",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50257bcaabada9a6e7f283f6a323e057e0f5f30/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50257bcaabada9a6e7f283f6a323e057e0f5f30/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=b50257bcaabada9a6e7f283f6a323e057e0f5f30",
        "patch": "@@ -51,6 +51,7 @@ class CStandardPolicy : public CPolicy\n      *    CHECKSIG/CHECKMULTISIG operations\n      */\n     virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewEfficient& mapInputs) const;\n+    virtual bool ApproveTxInputsScripts(const CTransaction&, CValidationState&, const CCoinsViewEfficient&, bool cacheStore) const;\n };\n \n /** Global variables and their interfaces */\n@@ -247,3 +248,37 @@ bool CStandardPolicy::ApproveTxInputs(const CTransaction& tx, const CCoinsViewEf\n \n     return true;\n }\n+\n+bool CStandardPolicy::ApproveTxInputsScripts(const CTransaction& tx, CValidationState& state, const CCoinsViewEfficient& view, bool cacheStore) const\n+{\n+    // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n+    // Helps prevent CPU exhaustion attacks.\n+\n+    // Skip ECDSA signature verification when connecting blocks\n+    // before the last block chain checkpoint. This is safe because block merkle hashes are\n+    // still computed and checked, and any change will be caught at the next checkpoint.\n+    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n+        // Failures of non-policy flags indicate a transaction that is\n+        // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n+        // such nodes as they are not following the protocol. That\n+        // said during an upgrade careful thought should be taken\n+        // as to the correct behavior - we may want to continue\n+        // peering with non-upgraded nodes even after a soft-fork\n+        // super-majority vote has passed.\n+        return state.DoS(100,false, REJECT_INVALID, strprintf(\"with flags: MANDATORY (%s)\", state.GetRejectReason()));\n+\n+    // Check again against just the non-consensus-critical policy but\n+    // not mandatory script verification flags, such as\n+    // non-standard DER encodings or non-null dummy\n+    // arguments; if so, don't trigger DoS protection to\n+    // avoid splitting the network between upgraded and\n+    // non-upgraded nodes.\n+    // This is done later in case of bugs in the standard flags that cause\n+    // transactions to pass as valid when they're actually invalid. For\n+    // instance the STRICTENC flag was incorrectly allowing certain\n+    // CHECKSIG NOT scripts to pass, even though they were invalid.\n+    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS | STANDARD_NOT_MANDATORY_VERIFY_FLAGS))\n+        return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"with flags: STANDARD_NOT_MANDATORY (%s)\", state.GetRejectReason()));\n+\n+    return true;\n+}"
      },
      {
        "sha": "6c45841352307992503e95278bf800c4c5431a62",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50257bcaabada9a6e7f283f6a323e057e0f5f30/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50257bcaabada9a6e7f283f6a323e057e0f5f30/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=b50257bcaabada9a6e7f283f6a323e057e0f5f30",
        "patch": "@@ -92,6 +92,12 @@ class CPolicy\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n     virtual bool ApproveTxInputs(const CTransaction&, const CCoinsViewEfficient&) const = 0;\n+    /**\n+     * Check whether all inputs of this transaction are valid (scripts and sigs)\n+     * This does not modify the UTXO set. This does not check double spends and amounts.\n+     * Preconditions: tx.IsCoinBase() is false\n+     */\n+    virtual bool ApproveTxInputsScripts(const CTransaction&, CValidationState&, const CCoinsViewEfficient&, bool cacheStore) const = 0;\n };\n \n /** Return a CPolicy of the type described in the parameter string */"
      }
    ]
  },
  {
    "sha": "d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTk0ZDZiMWE2NDY4NmRiYzAyYzBiOTNhNGFkODJhZDRkYWMyM2E4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-11T23:03:23Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Refactor: Move datacarrier policy logic to policy.o",
      "tree": {
        "sha": "6aef2ee9c0185460774b2abe2664e2000a051e9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6aef2ee9c0185460774b2abe2664e2000a051e9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b50257bcaabada9a6e7f283f6a323e057e0f5f30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50257bcaabada9a6e7f283f6a323e057e0f5f30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b50257bcaabada9a6e7f283f6a323e057e0f5f30"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 49,
      "deletions": 25
    },
    "files": [
      {
        "sha": "885b159a00d5eaa7ce4865f395a1c21fc7f0cfa7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
        "patch": "@@ -395,10 +395,6 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     strUsage += GetPolicyUsageStr(GetArg(\"-policy\", \"standard\"));\n \n-    strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n-    strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n-\n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n     strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n@@ -803,7 +799,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n #endif // ENABLE_WALLET\n \n     fIsBareMultisigStd = GetArg(\"-permitbaremultisig\", true) != 0;\n-    nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n "
      },
      {
        "sha": "c33fa9c4fc35259f6a38733fa4c2bcaad72ab8a0",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 8,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
        "patch": "@@ -20,11 +20,17 @@\n bool fIsBareMultisigStd = true;\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n+/** The maximum number of bytes in OP_RETURN outputs that we're willing to relay/mine */\n+static const unsigned int MAX_OP_RETURN_RELAY = 80;\n \n /** Declaration of Standard Policy implementing CPolicy */\n class CStandardPolicy : public CPolicy\n {\n+protected:\n+    unsigned nMaxDatacarrierBytes;\n public:\n+    CStandardPolicy() : nMaxDatacarrierBytes(MAX_OP_RETURN_RELAY) {};\n+\n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n     virtual void InitFromArgs(const std::map<std::string, std::string>&);\n     virtual bool ApproveScript(const CScript&, txnouttype&) const;\n@@ -103,11 +109,17 @@ void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs)\n std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHelp() const\n {\n     std::vector<std::pair<std::string, std::string> > optionsHelp;\n+    optionsHelp.push_back(std::make_pair(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1)));\n+    optionsHelp.push_back(std::make_pair(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY)));\n     return optionsHelp;\n }\n \n void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n+    if (GetArg(\"-datacarrier\", true, mapArgs))\n+        nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes, mapArgs);\n+    else\n+        nMaxDatacarrierBytes = 0;\n }\n \n bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType) const\n@@ -116,15 +128,37 @@ bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whi\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    if (whichType == TX_MULTISIG)\n+    switch (whichType)\n     {\n-        unsigned char m = vSolutions.front()[0];\n-        unsigned char n = vSolutions.back()[0];\n-        // Support up to x-of-3 multisig txns as standard\n-        if (n < 1 || n > 3)\n-            return false;\n-        if (m < 1 || m > n)\n-            return false;\n+        case TX_MULTISIG:\n+        {\n+            unsigned char m = vSolutions.front()[0];\n+            unsigned char n = vSolutions.back()[0];\n+            // Support up to x-of-3 multisig txns as standard\n+            if (n < 1 || n > 3)\n+                return false;\n+            if (m < 1 || m > n)\n+                return false;\n+            break;\n+        }\n+\n+        case TX_NULL_DATA:\n+            // TX_NULL_DATA without any vSolutions is a lone OP_RETURN, which traditionally is accepted regardless of the -datacarrier option, so we skip the check.\n+            // If you want to filter lone OP_RETURNs, be sure to handle vSolutions being empty below where vSolutions.front() is accessed!\n+            if (vSolutions.size())\n+            {\n+                if (!nMaxDatacarrierBytes)\n+                    return false;\n+\n+                if (vSolutions.front().size() > nMaxDatacarrierBytes)\n+                    return false;\n+            }\n+\n+            break;\n+\n+        default:\n+            // no other restrictions on standard scripts\n+            break;\n     }\n \n     return whichType != TX_NONSTANDARD;"
      },
      {
        "sha": "c0aa442343863f3741b53526d75a0f43c9e5c9e2",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
        "patch": "@@ -154,7 +154,7 @@ const char* GetOpName(opcodetype opcode)\n     case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n \n     // Note:\n-    //  The template matching params OP_SMALLDATA/etc are defined in opcodetype enum\n+    //  The template matching params OP_DATA/etc are defined in opcodetype enum\n     //  as kind of implementation hack, they are *NOT* real opcodes.  If found in real\n     //  Script, just let the default: case deal with them.\n "
      },
      {
        "sha": "a170517f631c426bdff5827c5c01ef7e9fbb1a35",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
        "patch": "@@ -161,7 +161,7 @@ enum opcodetype\n \n \n     // template matching params\n-    OP_SMALLDATA = 0xf9,\n+    OP_DATA = 0xf9,\n     OP_SMALLINTEGER = 0xfa,\n     OP_PUBKEYS = 0xfb,\n     OP_PUBKEYHASH = 0xfd,"
      },
      {
        "sha": "693ed7410c33cc57353d05ff0ae0ceadd60d1a62",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
        "patch": "@@ -16,8 +16,6 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n-unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n-\n CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}\n \n const char* GetTxnOutputType(txnouttype t)\n@@ -53,8 +51,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n         mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n \n         // Empty, provably prunable, data-carrying output\n-        if (GetBoolArg(\"-datacarrier\", true))\n-            mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_SMALLDATA));\n+        mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_DATA));\n         mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN));\n     }\n \n@@ -140,11 +137,12 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n                 else\n                     break;\n             }\n-            else if (opcode2 == OP_SMALLDATA)\n+            else if (opcode2 == OP_DATA)\n             {\n-                // small pushdata, <= nMaxDatacarrierBytes\n-                if (vch1.size() > nMaxDatacarrierBytes)\n+                // any pushdata\n+                if (opcode1 > OP_PUSHDATA4)\n                     break;\n+                vSolutionsRet.push_back(vch1);\n             }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {"
      },
      {
        "sha": "2b939d4aee53e51da8b788788a7682d4871c6d31",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
        "patch": "@@ -25,9 +25,6 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 80;      //! bytes\n-extern unsigned nMaxDatacarrierBytes;\n-\n enum txnouttype\n {\n     TX_NONSTANDARD,"
      }
    ]
  },
  {
    "sha": "e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGZmMGQyYmYyNmFmNGIyODYwYWQ4ZmE2M2FkYjJkNjNiNmRmNGRm",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T16:19:48Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: MOVEONLY: Turn fIsBareMultisigStd global into a CStandardPolicy attribute",
      "tree": {
        "sha": "3bde75dd4493991b0287ddd2ef60dbabec4bc19e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bde75dd4493991b0287ddd2ef60dbabec4bc19e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d994d6b1a64686dbc02c0b93a4ad82ad4dac23a8"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d3d2a1f0a5c6fa1a52dd66b25da63cebac5597d4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df",
        "patch": "@@ -310,7 +310,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n@@ -798,8 +797,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif // ENABLE_WALLET\n \n-    fIsBareMultisigStd = GetArg(\"-permitbaremultisig\", true) != 0;\n-\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Sanity check"
      },
      {
        "sha": "16b8f681737fcc34787ad0d6462676a4c95944ca",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df",
        "patch": "@@ -17,7 +17,6 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-bool fIsBareMultisigStd = true;\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n /** The maximum number of bytes in OP_RETURN outputs that we're willing to relay/mine */\n@@ -28,8 +27,10 @@ class CStandardPolicy : public CPolicy\n {\n protected:\n     unsigned nMaxDatacarrierBytes;\n+    bool fIsBareMultisigStd;\n public:\n-    CStandardPolicy() : nMaxDatacarrierBytes(MAX_OP_RETURN_RELAY) {};\n+    CStandardPolicy() : nMaxDatacarrierBytes(MAX_OP_RETURN_RELAY),\n+                        fIsBareMultisigStd(true) {};\n \n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n     virtual void InitFromArgs(const std::map<std::string, std::string>&);\n@@ -111,6 +112,7 @@ std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHel\n     std::vector<std::pair<std::string, std::string> > optionsHelp;\n     optionsHelp.push_back(std::make_pair(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1)));\n     optionsHelp.push_back(std::make_pair(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY)));\n+    optionsHelp.push_back(std::make_pair(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1)));\n     return optionsHelp;\n }\n \n@@ -120,6 +122,7 @@ void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& map\n         nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes, mapArgs);\n     else\n         nMaxDatacarrierBytes = 0;\n+    fIsBareMultisigStd = GetArg(\"-permitbaremultisig\", fIsBareMultisigStd, mapArgs);\n }\n \n bool CStandardPolicy::ApproveScript(const CScript& scriptPubKey, txnouttype& whichType) const"
      },
      {
        "sha": "981e34547d1e11d3946ce43ff1a725bba57fd0ea",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df",
        "patch": "@@ -57,7 +57,6 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n \n /** GLOBALS: These variables are supposed to become CStandardPolicy attributes */\n \n-extern bool fIsBareMultisigStd;\n extern CFeeRate minRelayTxFee;\n \n inline double AllowFreeThreshold()"
      }
    ]
  },
  {
    "sha": "3b9614c593acd9755adab62b0b68ebbdc2364413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjk2MTRjNTkzYWNkOTc1NWFkYWI2MmIwYjY4ZWJiZGMyMzY0NDEz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-27T13:47:41Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Introduce CPolicy attribute in CWallet",
      "tree": {
        "sha": "86e08f64bec742d4dc03cb424ea6c8edc79bd7bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86e08f64bec742d4dc03cb424ea6c8edc79bd7bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b9614c593acd9755adab62b0b68ebbdc2364413",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b9614c593acd9755adab62b0b68ebbdc2364413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b9614c593acd9755adab62b0b68ebbdc2364413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b9614c593acd9755adab62b0b68ebbdc2364413/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0ff0d2bf26af4b2860ad8fa63adb2d63b6df4df"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 22,
      "deletions": 20
    },
    "files": [
      {
        "sha": "f187eb9a122604c27236e014165d33e856ba5f21",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9614c593acd9755adab62b0b68ebbdc2364413/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9614c593acd9755adab62b0b68ebbdc2364413/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3b9614c593acd9755adab62b0b68ebbdc2364413",
        "patch": "@@ -1130,7 +1130,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         if (GetBoolArg(\"-zapwallettxes\", false)) {\n             uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n-            pwalletMain = new CWallet(strWalletFile);\n+            pwalletMain = new CWallet(Policy(), strWalletFile);\n             DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(vWtx);\n             if (nZapWalletRet != DB_LOAD_OK) {\n                 uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n@@ -1145,7 +1145,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n         nStart = GetTimeMillis();\n         bool fFirstRun = true;\n-        pwalletMain = new CWallet(strWalletFile);\n+        pwalletMain = new CWallet(Policy(), strWalletFile);\n         DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n         if (nLoadWalletRet != DB_LOAD_OK)\n         {"
      },
      {
        "sha": "dd6cd3983dda15190fcf2555b2b27c036d3b67cf",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9614c593acd9755adab62b0b68ebbdc2364413/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9614c593acd9755adab62b0b68ebbdc2364413/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=3b9614c593acd9755adab62b0b68ebbdc2364413",
        "patch": "@@ -56,7 +56,7 @@ TestingSetup::TestingSetup()\n         InitBlockIndex();\n #ifdef ENABLE_WALLET\n         bool fFirstRun;\n-        pwalletMain = new CWallet(\"wallet.dat\");\n+        pwalletMain = new CWallet(Policy(\"standard\"), \"wallet.dat\");\n         pwalletMain->LoadWallet(fFirstRun);\n         RegisterValidationInterface(pwalletMain);\n #endif"
      },
      {
        "sha": "c3dc826532f1b9c3e92142af8ebd1a9e8ca2fc35",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9614c593acd9755adab62b0b68ebbdc2364413/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9614c593acd9755adab62b0b68ebbdc2364413/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=3b9614c593acd9755adab62b0b68ebbdc2364413",
        "patch": "@@ -27,7 +27,7 @@ typedef set<pair<const CWalletTx*,unsigned int> > CoinSet;\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, TestingSetup)\n \n-static CWallet wallet;\n+static CWallet wallet(Policy(\"standard\"));\n static vector<COutput> vCoins;\n \n static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)"
      },
      {
        "sha": "e2a1a94f4926426895bb7d839f311de69a2bfd23",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9614c593acd9755adab62b0b68ebbdc2364413/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9614c593acd9755adab62b0b68ebbdc2364413/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3b9614c593acd9755adab62b0b68ebbdc2364413",
        "patch": "@@ -15,7 +15,6 @@\n #include \"main.h\" // cs_main\n #include \"net.h\"\n #include \"policy/estimator.h\"\n-#include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n@@ -1118,7 +1117,7 @@ void CWallet::ReacceptWalletTransactions()\n         {\n             // Try to add to memory pool\n             LOCK(mempool.cs);\n-            wtx.AcceptToMemoryPool(false);\n+            wtx.AcceptToMemoryPool(policy, false);\n         }\n     }\n }\n@@ -1772,7 +1771,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                         }\n                     }\n \n-                    if (Policy().ApproveOutput(txout))\n+                    if (policy.ApproveOutput(txout))\n                     {\n                         if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n@@ -1848,16 +1847,16 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                     // We do not move dust-change to fees, because the sender would end up paying more than requested.\n                     // This would be against the purpose of the all-inclusive feature.\n                     // So instead we raise the change and deduct from the recipient.\n-                    if (nSubtractFeeFromAmount > 0 && Policy().ApproveOutput(newTxOut))\n+                    if (nSubtractFeeFromAmount > 0 && policy.ApproveOutput(newTxOut))\n                     {\n-                        CAmount nDust = Policy().GetDustThreshold(newTxOut) - newTxOut.nValue;\n+                        CAmount nDust = policy.GetDustThreshold(newTxOut) - newTxOut.nValue;\n                         newTxOut.nValue += nDust; // raise change until no more dust\n                         for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n                         {\n                             if (vecSend[i].fSubtractFeeFromAmount)\n                             {\n                                 txNew.vout[i].nValue -= nDust;\n-                                if (Policy().ApproveOutput(txNew.vout[i]))\n+                                if (policy.ApproveOutput(txNew.vout[i]))\n                                 {\n                                     strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                                     return false;\n@@ -1869,7 +1868,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (Policy().ApproveOutput(newTxOut))\n+                    if (policy.ApproveOutput(newTxOut))\n                     {\n                         nFeeRet += nChange;\n                         reservekey.ReturnKey();\n@@ -1928,7 +1927,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n                         break;\n                 }\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget);\n+                CAmount nFeeNeeded = GetMinimumFee(policy, nBytes, nTxConfirmTarget);\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n@@ -1989,7 +1988,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         mapRequestCount[wtxNew.GetHash()] = 0;\n \n         // Broadcast\n-        if (!wtxNew.AcceptToMemoryPool(false))\n+        if (!wtxNew.AcceptToMemoryPool(policy, false))\n         {\n             // This must not fail. The transaction has already been signed and recorded.\n             LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n@@ -2000,7 +1999,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n     return true;\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget)\n+CAmount CWallet::GetMinimumFee(const CPolicy& policy, unsigned int nTxBytes, unsigned int nConfirmTarget)\n {\n     // payTxFee is user-set \"I want to pay this much\"\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n@@ -2741,7 +2740,7 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n+bool CMerkleTx::AcceptToMemoryPool(const CPolicy& policy, bool fLimitFree, bool fRejectAbsurdFee)\n {\n     CValidationState state;\n     return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);"
      },
      {
        "sha": "a348cbfbf7f1f6ac6db8e8332308e9e82b1b0ba5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9614c593acd9755adab62b0b68ebbdc2364413/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9614c593acd9755adab62b0b68ebbdc2364413/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3b9614c593acd9755adab62b0b68ebbdc2364413",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"amount.h\"\n #include \"policy/feerate.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n@@ -196,7 +197,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(bool fLimitFree=true, bool fRejectAbsurdFee=true);\n+    bool AcceptToMemoryPool(const CPolicy& policy, bool fLimitFree=true, bool fRejectAbsurdFee=true);\n };\n \n /** \n@@ -454,6 +455,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     int64_t nNextResend;\n     int64_t nLastResend;\n \n+    const CPolicy& policy;\n+\n     /**\n      * Used to keep track of spent outpoints, and\n      * detect and report conflicts (double-spends or\n@@ -486,12 +489,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID;\n \n-    CWallet()\n+    CWallet(const CPolicy& policyIn) : policy(policyIn)\n     {\n         SetNull();\n     }\n \n-    CWallet(std::string strWalletFileIn)\n+    CWallet(const CPolicy& policyIn, std::string strWalletFileIn) : policy(policyIn)\n     {\n         SetNull();\n \n@@ -625,7 +628,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     static CFeeRate minTxFee;\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget);\n+    static CAmount GetMinimumFee(const CPolicy& policy, unsigned int nTxBytes, unsigned int nConfirmTarget);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);"
      },
      {
        "sha": "23ce2a87b5d8079318aec818e9785077782730d2",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b9614c593acd9755adab62b0b68ebbdc2364413/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b9614c593acd9755adab62b0b68ebbdc2364413/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3b9614c593acd9755adab62b0b68ebbdc2364413",
        "patch": "@@ -939,7 +939,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKe\n         LogPrintf(\"Cannot create database file %s\\n\", filename);\n         return false;\n     }\n-    CWallet dummyWallet;\n+    CWallet dummyWallet(Policy());\n     CWalletScanState wss;\n \n     DbTxn* ptxn = dbenv.TxnBegin();"
      }
    ]
  },
  {
    "sha": "8c11a398b53e2866528028770cdf1341decd3fd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzExYTM5OGI1M2UyODY2NTI4MDI4NzcwY2RmMTM0MWRlY2QzZmQ1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-09T18:32:22Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Encapsulate policy script verify flags as CStandardPolicy parameters",
      "tree": {
        "sha": "da1342962e59a70ca52cf48e98d36ade340e4c7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da1342962e59a70ca52cf48e98d36ade340e4c7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c11a398b53e2866528028770cdf1341decd3fd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c11a398b53e2866528028770cdf1341decd3fd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c11a398b53e2866528028770cdf1341decd3fd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c11a398b53e2866528028770cdf1341decd3fd5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b9614c593acd9755adab62b0b68ebbdc2364413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b9614c593acd9755adab62b0b68ebbdc2364413",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b9614c593acd9755adab62b0b68ebbdc2364413"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 26,
      "deletions": 27
    },
    "files": [
      {
        "sha": "ac82b7e4cf67ae928026382de9377955b6797d60",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c11a398b53e2866528028770cdf1341decd3fd5/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c11a398b53e2866528028770cdf1341decd3fd5/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=8c11a398b53e2866528028770cdf1341decd3fd5",
        "patch": "@@ -28,9 +28,32 @@ class CStandardPolicy : public CPolicy\n protected:\n     unsigned nMaxDatacarrierBytes;\n     bool fIsBareMultisigStd;\n+    /**\n+     * Mandatory script verification flags that all new blocks must comply with for\n+     * them to be valid. (but old blocks may not comply with) Currently just P2SH,\n+     * but in the future other flags may be added, such as a soft-fork to enforce\n+     * strict DER encoding.\n+     * Failing one of these tests may trigger a DoS ban - see ApproveTxInputsScripts() for\n+     * details.\n+     */\n+    unsigned int mandatoryScriptFlags;\n+    /**\n+     * Standard script verification flags that standard transactions will comply\n+     * with. However scripts violating these flags may still be present in valid\n+     * blocks and we must accept those blocks.\n+     */\n+    unsigned int policyScriptFlags;\n public:\n     CStandardPolicy() : nMaxDatacarrierBytes(MAX_OP_RETURN_RELAY),\n-                        fIsBareMultisigStd(true) {};\n+                        fIsBareMultisigStd(true),\n+                        mandatoryScriptFlags(SCRIPT_VERIFY_P2SH),\n+                        policyScriptFlags(SCRIPT_VERIFY_DERSIG |\n+                                          SCRIPT_VERIFY_STRICTENC |\n+                                          SCRIPT_VERIFY_MINIMALDATA |\n+                                          SCRIPT_VERIFY_NULLDUMMY |\n+                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                          SCRIPT_VERIFY_CLEANSTACK)\n+    {};\n \n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n     virtual void InitFromArgs(const std::map<std::string, std::string>&);\n@@ -294,7 +317,7 @@ bool CStandardPolicy::ApproveTxInputsScripts(const CTransaction& tx, CValidation\n     // Skip ECDSA signature verification when connecting blocks\n     // before the last block chain checkpoint. This is safe because block merkle hashes are\n     // still computed and checked, and any change will be caught at the next checkpoint.\n-    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n+    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, mandatoryScriptFlags))\n         // Failures of non-policy flags indicate a transaction that is\n         // invalid in new blocks, e.g. a invalid P2SH. We DoS ban\n         // such nodes as they are not following the protocol. That\n@@ -314,7 +337,7 @@ bool CStandardPolicy::ApproveTxInputsScripts(const CTransaction& tx, CValidation\n     // transactions to pass as valid when they're actually invalid. For\n     // instance the STRICTENC flag was incorrectly allowing certain\n     // CHECKSIG NOT scripts to pass, even though they were invalid.\n-    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS | STANDARD_NOT_MANDATORY_VERIFY_FLAGS))\n+    if (!Consensus::CheckTxInputsScripts(tx, state, view, true, mandatoryScriptFlags | policyScriptFlags))\n         return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"with flags: STANDARD_NOT_MANDATORY (%s)\", state.GetRejectReason()));\n \n     return true;"
      },
      {
        "sha": "4646b6f1997b5692ebc8eba3eb8006c90ac83162",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c11a398b53e2866528028770cdf1341decd3fd5/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c11a398b53e2866528028770cdf1341decd3fd5/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=8c11a398b53e2866528028770cdf1341decd3fd5",
        "patch": "@@ -30,30 +30,6 @@ static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n-/**\n- * Mandatory script verification flags that all new blocks must comply with for\n- * them to be valid. (but old blocks may not comply with) Currently just P2SH,\n- * but in the future other flags may be added, such as a soft-fork to enforce\n- * strict DER encoding.\n- * \n- * Failing one of these tests may trigger a DoS ban - see CheckInputsScripts() for\n- * details.\n- */\n-static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n-/**\n- * Standard script verification flags that standard transactions will comply\n- * with. However scripts violating these flags may still be present in valid\n- * blocks and we must accept those blocks.\n- */\n-static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n-                                                         SCRIPT_VERIFY_DERSIG |\n-                                                         SCRIPT_VERIFY_STRICTENC |\n-                                                         SCRIPT_VERIFY_MINIMALDATA |\n-                                                         SCRIPT_VERIFY_NULLDUMMY |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n-                                                         SCRIPT_VERIFY_CLEANSTACK;\n-/** For convenience, standard but not mandatory verify flags. */\n-static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n /** GLOBALS: These variables are supposed to become CStandardPolicy attributes */\n "
      }
    ]
  },
  {
    "sha": "a4f59952363ff38a3db4095b6f60a4f213d45c09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGY1OTk1MjM2M2ZmMzhhM2RiNDA5NWI2ZjYwYTRmMjEzZDQ1YzA5",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2014-12-31T14:35:00Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: MOVEONLY: initialize global minRelayTxFee in InitPolicyFromArgs())",
      "tree": {
        "sha": "4ee47c649ce1334c45e722444132f7b80ad42c4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ee47c649ce1334c45e722444132f7b80ad42c4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4f59952363ff38a3db4095b6f60a4f213d45c09",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f59952363ff38a3db4095b6f60a4f213d45c09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f59952363ff38a3db4095b6f60a4f213d45c09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f59952363ff38a3db4095b6f60a4f213d45c09/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c11a398b53e2866528028770cdf1341decd3fd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c11a398b53e2866528028770cdf1341decd3fd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c11a398b53e2866528028770cdf1341decd3fd5"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 15,
      "deletions": 16
    },
    "files": [
      {
        "sha": "86656a21a9b17b0c3051d3702b96c1bbae04ad35",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4f59952363ff38a3db4095b6f60a4f213d45c09/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4f59952363ff38a3db4095b6f60a4f213d45c09/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a4f59952363ff38a3db4095b6f60a4f213d45c09",
        "patch": "@@ -379,7 +379,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000));\n     }\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n@@ -738,21 +737,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n         return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n     }\n \n-    // Fee-per-kilobyte amount considered the same as \"free\"\n-    // If you are mining, be careful setting this:\n-    // if you set it to zero then\n-    // a transaction spammer can cheaply fill blocks using\n-    // 1-satoshi-fee transactions. It should be set above the real\n-    // cost to you of processing a transaction.\n-    if (mapArgs.count(\"-minrelaytxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n-            ::minRelayTxFee = CFeeRate(n);\n-        else\n-            return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n-    }\n-\n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n     {"
      },
      {
        "sha": "f69797b59265c001526a2de325539c029d161ca2",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4f59952363ff38a3db4095b6f60a4f213d45c09/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4f59952363ff38a3db4095b6f60a4f213d45c09/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=a4f59952363ff38a3db4095b6f60a4f213d45c09",
        "patch": "@@ -15,10 +15,12 @@\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n CFeeRate minRelayTxFee = CFeeRate(1000);\n+static const std::string defaultMinRelayTxFee = \"0.00001000\";\n /** The maximum number of bytes in OP_RETURN outputs that we're willing to relay/mine */\n static const unsigned int MAX_OP_RETURN_RELAY = 80;\n \n@@ -136,6 +138,7 @@ std::vector<std::pair<std::string, std::string> > CStandardPolicy::GetOptionsHel\n     optionsHelp.push_back(std::make_pair(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1)));\n     optionsHelp.push_back(std::make_pair(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY)));\n     optionsHelp.push_back(std::make_pair(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1)));\n+    optionsHelp.push_back(std::make_pair(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), defaultMinRelayTxFee)));\n     return optionsHelp;\n }\n \n@@ -145,6 +148,18 @@ void CStandardPolicy::InitFromArgs(const std::map<std::string, std::string>& map\n         nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes, mapArgs);\n     else\n         nMaxDatacarrierBytes = 0;\n+    // Fee-per-kilobyte amount considered the same as \"free\"\n+    // If you are mining, be careful setting this:\n+    // if you set it to zero then\n+    // a transaction spammer can cheaply fill blocks using\n+    // 1-satoshi-fee transactions. It should be set above the real\n+    // cost to you of processing a transaction.\n+    std::string strRelayFee = GetArg(\"-minrelaytxfee\", defaultMinRelayTxFee, mapArgs);\n+    CAmount n = 0;\n+    if (ParseMoney(strRelayFee, n) && Consensus::VerifyAmount(n))\n+        minRelayTxFee = CFeeRate(n);\n+    else\n+        throw std::runtime_error(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), strRelayFee));\n     fIsBareMultisigStd = GetArg(\"-permitbaremultisig\", fIsBareMultisigStd, mapArgs);\n }\n "
      }
    ]
  },
  {
    "sha": "48ade7190352490cebaf20a909370c733393dfc7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGFkZTcxOTAzNTI0OTBjZWJhZjIwYTkwOTM3MGM3MzMzOTNkZmM3",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2015-01-24T22:57:32Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Refactor: int nHeight = chainActive.Height()",
      "tree": {
        "sha": "a4dceb9f4f1b75c4393dc34063b754a5c93f74db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4dceb9f4f1b75c4393dc34063b754a5c93f74db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48ade7190352490cebaf20a909370c733393dfc7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48ade7190352490cebaf20a909370c733393dfc7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48ade7190352490cebaf20a909370c733393dfc7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48ade7190352490cebaf20a909370c733393dfc7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4f59952363ff38a3db4095b6f60a4f213d45c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f59952363ff38a3db4095b6f60a4f213d45c09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f59952363ff38a3db4095b6f60a4f213d45c09"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ec4a757cd722cf7c1f9491a63855027b3a7bdd83",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48ade7190352490cebaf20a909370c733393dfc7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48ade7190352490cebaf20a909370c733393dfc7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=48ade7190352490cebaf20a909370c733393dfc7",
        "patch": "@@ -611,6 +611,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (!Policy().ApproveTx(tx, state))\n         return error(\"%s: CPolicy::ApproveTx: %s\", __func__, state.GetRejectReason().c_str());\n \n+    int nHeight = chainActive.Height();\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n@@ -626,7 +627,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // Timestamps on the other hand don't get any special treatment, because we\n     // can't know what timestamp the next block will have, and there aren't\n     // timestamp applications where it matters.\n-    if (!IsFinalTx(tx, chainActive.Height() + 1))\n+    if (!IsFinalTx(tx, nHeight + 1))\n         return state.DoS(0,\n                          error(\"AcceptToMemoryPool: non-final\"),\n                          REJECT_NONSTANDARD, \"non-final\");\n@@ -710,9 +711,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         CAmount nValueOut = Consensus::GetValueOut(tx);\n         CAmount nFees = nValueIn-nValueOut;\n-        double dPriority = view.GetPriority(tx, chainActive.Height());\n-\n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n+        double dPriority = view.GetPriority(tx, nHeight);\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, nHeight);\n         unsigned int nSize = entry.GetTxSize();\n \n         bool fValidateFee = nFees >= ::minRelayTxFee.GetFee(nSize);\n@@ -755,7 +755,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && !fValidateFee && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1)))\n+        if (GetBoolArg(\"-relaypriority\", true) && !fValidateFee && !AllowFree(view.GetPriority(tx, nHeight + 1)))\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)"
      }
    ]
  },
  {
    "sha": "41ddb0568aeb1a82b415a6f04b47e80407d82cc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWRkYjA1NjhhZWIxYTgyYjQxNWE2ZjA0YjQ3ZTgwNDA3ZDgyY2My",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-06T23:15:45Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Separate CPolicy::ValidateTxFee() from main::AcceptToMemoryPool()",
      "tree": {
        "sha": "e43006dfe0a86be838bb39aa7c912f0e4b126f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e43006dfe0a86be838bb39aa7c912f0e4b126f59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41ddb0568aeb1a82b415a6f04b47e80407d82cc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ddb0568aeb1a82b415a6f04b47e80407d82cc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41ddb0568aeb1a82b415a6f04b47e80407d82cc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ddb0568aeb1a82b415a6f04b47e80407d82cc2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48ade7190352490cebaf20a909370c733393dfc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48ade7190352490cebaf20a909370c733393dfc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48ade7190352490cebaf20a909370c733393dfc7"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 61,
      "deletions": 52
    },
    "files": [
      {
        "sha": "ba410f36ad76de850e9bd06414d80462fdd398ce",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 51,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41ddb0568aeb1a82b415a6f04b47e80407d82cc2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41ddb0568aeb1a82b415a6f04b47e80407d82cc2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=41ddb0568aeb1a82b415a6f04b47e80407d82cc2",
        "patch": "@@ -68,8 +68,6 @@ bool fTxIndex = false;\n bool fCheckBlockIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n-bool fAllowFree = true;\n-\n CTxMemPool mempool;\n \n struct COrphanTx {\n@@ -713,55 +711,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, nHeight);\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, nHeight);\n-        unsigned int nSize = entry.GetTxSize();\n-\n-        bool fValidateFee = nFees >= ::minRelayTxFee.GetFee(nSize);\n-        if (fLimitFree && !fValidateFee) {\n-            double dPriorityDelta = 0;\n-            CAmount nFeeDelta = 0;\n-            mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-            if (!(dPriorityDelta > 0 || nFeeDelta > 0 ||\n-                // There is a free transaction area in blocks created by most miners,\n-                // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n-                //   to be considered to fall into this category. We don't want to encourage sending\n-                //   multiple transactions instead of one big transaction to avoid fees.\n-                  (fAllowFree && nSize < DEFAULT_BLOCK_PRIORITY_SIZE - 1000)))\n-                return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                          hash.ToString(), nFees, ::minRelayTxFee.GetFee(nSize)),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-            // Continuously rate-limit free (really, very-low-fee) transactions\n-            // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-            // be annoying or make others' transactions take longer to confirm.\n-            {\n-                static CCriticalSection csFreeLimiter;\n-                static double dFreeCount;\n-                static int64_t nLastTime;\n-                int64_t nNow = GetTime();\n-\n-                LOCK(csFreeLimiter);\n-\n-                // Use an exponentially decaying ~10-minute window:\n-                dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-                nLastTime = nNow;\n-                // -limitfreerelay unit is thousand-bytes-per-minute\n-                // At default rate it would take over a month to fill 1GB\n-                if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                    return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n-                                     REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n-                LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-                dFreeCount += nSize;\n-            }\n-        }\n-\n-        // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && !fValidateFee && !AllowFree(view.GetPriority(tx, nHeight + 1)))\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-\n-        if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n-                         hash.ToString(),\n-                         nFees, ::minRelayTxFee.GetFee(nSize) * 10000);\n+        if (!Policy().ValidateTxFee(nFees, entry.GetTxSize(), tx, nHeight, fRejectAbsurdFee, fLimitFree, view, mempool, state))\n+            return error(\"%s: CPolicy::ValidateFee failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks."
      },
      {
        "sha": "b9a515e2f5ae74336f561cffb91134f0fb49e403",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 1,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41ddb0568aeb1a82b415a6f04b47e80407d82cc2/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41ddb0568aeb1a82b415a6f04b47e80407d82cc2/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=41ddb0568aeb1a82b415a6f04b47e80407d82cc2",
        "patch": "@@ -13,6 +13,7 @@\n #include \"policy/feerate.h\"\n #include \"primitives/transaction.h\"\n #include \"tinyformat.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -45,6 +46,7 @@ class CStandardPolicy : public CPolicy\n      * blocks and we must accept those blocks.\n      */\n     unsigned int policyScriptFlags;\n+    bool fAllowFree;\n public:\n     CStandardPolicy() : nMaxDatacarrierBytes(MAX_OP_RETURN_RELAY),\n                         fIsBareMultisigStd(true),\n@@ -54,7 +56,8 @@ class CStandardPolicy : public CPolicy\n                                           SCRIPT_VERIFY_MINIMALDATA |\n                                           SCRIPT_VERIFY_NULLDUMMY |\n                                           SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n-                                          SCRIPT_VERIFY_CLEANSTACK)\n+                                          SCRIPT_VERIFY_CLEANSTACK),\n+                        fAllowFree(true)\n     {};\n \n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n@@ -84,6 +87,7 @@ class CStandardPolicy : public CPolicy\n      */\n     virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewEfficient& mapInputs) const;\n     virtual bool ApproveTxInputsScripts(const CTransaction&, CValidationState&, const CCoinsViewEfficient&, bool cacheStore) const;\n+    virtual bool ValidateTxFee(const CAmount&, size_t, const CTransaction&, int nHeight, bool fRejectAbsurdFee, bool fLimitFree, const CCoinsViewEfficient&, CTxMemPool&, CValidationState&) const;\n };\n \n /** Global variables and their interfaces */\n@@ -357,3 +361,55 @@ bool CStandardPolicy::ApproveTxInputsScripts(const CTransaction& tx, CValidation\n \n     return true;\n }\n+\n+bool CStandardPolicy::ValidateTxFee(const CAmount& nFees, size_t nSize, const CTransaction& tx, int nHeight, bool fRejectAbsurdFee, bool fLimitFree, const CCoinsViewEfficient& view, CTxMemPool& mempool, CValidationState& state) const\n+{\n+    bool fValidateFee = nFees >= minRelayTxFee.GetFee(nSize);\n+    if (fLimitFree && !fValidateFee) {\n+        double dPriorityDelta = 0;\n+        CAmount nFeeDelta = 0;\n+        mempool.ApplyDeltas(tx.GetHash(), dPriorityDelta, nFeeDelta);\n+        if (!(dPriorityDelta > 0 || nFeeDelta > 0 ||\n+              // There is a free transaction area in blocks created by most miners,\n+              // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n+              //   to be considered to fall into this category. We don't want to encourage sending\n+              //   multiple transactions instead of one big transaction to avoid fees.\n+              (fAllowFree && nSize < DEFAULT_BLOCK_PRIORITY_SIZE - 1000)))\n+            return state.DoS(0, error(\"%s: not enough fees, %d < %d\",\n+                                      __func__, nFees, minRelayTxFee.GetFee(nSize)),\n+                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+\n+        // Continuously rate-limit free (really, very-low-fee) transactions\n+        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n+        // be annoying or make others' transactions take longer to confirm.\n+        {\n+            static CCriticalSection csFreeLimiter;\n+            static double dFreeCount;\n+            static int64_t nLastTime;\n+            int64_t nNow = GetTime();\n+\n+            LOCK(csFreeLimiter);\n+\n+            // Use an exponentially decaying ~10-minute window:\n+            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+            nLastTime = nNow;\n+            // -limitfreerelay unit is thousand-bytes-per-minute\n+            // At default rate it would take over a month to fill 1GB\n+            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+                return state.DoS(0, error(\"%s: free transaction rejected by rate limiter\", __func__),\n+                                 REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+            dFreeCount += nSize;\n+        }\n+    }\n+\n+    // Require that free transactions have sufficient priority to be mined in the next block.\n+    if (GetBoolArg(\"-relaypriority\", true) && !fValidateFee && !AllowFree(view.GetPriority(tx, nHeight + 1)))\n+        return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+\n+    if (fRejectAbsurdFee && nFees > minRelayTxFee.GetFee(nSize) * 10000)\n+        return error(\"%s: absurdly high fees %s, %d > %d\", __func__,\n+                     nFees, minRelayTxFee.GetFee(nSize) * 10000);\n+\n+    return true;\n+}"
      },
      {
        "sha": "16f438b1c972fceedb4629c808930046b6a686e0",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41ddb0568aeb1a82b415a6f04b47e80407d82cc2/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41ddb0568aeb1a82b415a6f04b47e80407d82cc2/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=41ddb0568aeb1a82b415a6f04b47e80407d82cc2",
        "patch": "@@ -16,6 +16,7 @@\n class CCoinsViewEfficient;\n class CFeeRate;\n class CTransaction;\n+class CTxMemPool;\n class CTxOut;\n class CValidationState;\n \n@@ -73,6 +74,7 @@ class CPolicy\n      * Preconditions: tx.IsCoinBase() is false\n      */\n     virtual bool ApproveTxInputsScripts(const CTransaction&, CValidationState&, const CCoinsViewEfficient&, bool cacheStore) const = 0;\n+    virtual bool ValidateTxFee(const CAmount&, size_t, const CTransaction&, int nHeight, bool fRejectAbsurdFee, bool fLimitFree, const CCoinsViewEfficient&, CTxMemPool&, CValidationState&) const = 0;\n };\n \n /** Return a CPolicy of the type described in the parameter string */"
      }
    ]
  },
  {
    "sha": "143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDNkMTdjZTc5YThjZTg0OThiOWU4ZmI0MWY4YTdlN2E5NmEzM2Rk",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2014-12-29T19:29:14Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Separate Standard and test policies to select them independently of the network",
      "tree": {
        "sha": "0a0cdee4a7b394dfed9711ab118f5c4e8f0d5814",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a0cdee4a7b394dfed9711ab118f5c4e8f0d5814"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41ddb0568aeb1a82b415a6f04b47e80407d82cc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41ddb0568aeb1a82b415a6f04b47e80407d82cc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41ddb0568aeb1a82b415a6f04b47e80407d82cc2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 20,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4ac513fe077e3560d532fdae3f4191a91891ddec",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd",
        "patch": "@@ -730,7 +730,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     const char* pszP2SH = \"/P2SH/\";\n     COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n \n-    // Init Policy\n+    // Init Policy from arguments or use the network default accessing Params()\n     try {\n         InitPolicyFromArgs(mapArgs);\n     } catch(std::exception &e) {"
      },
      {
        "sha": "251bf5a07e34010a2a02d1654f5653aa1004b415",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd",
        "patch": "@@ -8,6 +8,7 @@\n #include \"policy/policy.h\"\n \n #include \"amount.h\"\n+#include \"chainparams.h\"\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"policy/feerate.h\"\n@@ -90,16 +91,33 @@ class CStandardPolicy : public CPolicy\n     virtual bool ValidateTxFee(const CAmount&, size_t, const CTransaction&, int nHeight, bool fRejectAbsurdFee, bool fLimitFree, const CCoinsViewEfficient&, CTxMemPool&, CValidationState&) const;\n };\n \n+/** Default Policy for testnet and regtest */\n+class CTestPolicy : public CStandardPolicy \n+{\n+public:\n+    virtual bool ValidateTx(const CTransaction& tx, std::string& reason) const\n+    {\n+        return true;\n+    }\n+    virtual bool ValidateTxInputs(const CTransaction& tx, const CCoinsViewEfficient& mapInputs) const\n+    {\n+        return true;\n+    }\n+};\n+\n /** Global variables and their interfaces */\n \n static CStandardPolicy standardPolicy;\n+static CTestPolicy testPolicy;\n \n static CPolicy* pCurrentPolicy = 0;\n \n CPolicy& Policy(std::string policy)\n {\n     if (policy == \"standard\")\n         return standardPolicy;\n+    else if (policy == \"test\")\n+        return testPolicy;\n     throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n }\n \n@@ -130,7 +148,7 @@ std::string GetPolicyUsageStr(std::string selectedPolicy)\n \n void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n-    SelectPolicy(GetArg(\"-policy\", \"standard\", mapArgs));\n+    SelectPolicy(GetArg(\"-policy\", Params().RequireStandard() ? \"standard\" : \"test\", mapArgs));\n     pCurrentPolicy->InitFromArgs(mapArgs);\n }\n "
      }
    ]
  },
  {
    "sha": "3b88a863cfb0544c1c45d61b574b8b7e7f067e88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjg4YTg2M2NmYjA1NDRjMWM0NWQ2MWI1NzRiOGI3ZTdmMDY3ZTg4",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@jtimon.cc",
        "date": "2014-12-29T20:19:09Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Replace CChainParams::fRequireStandard with CChainParams::strDefaultPolicy",
      "tree": {
        "sha": "a53572ebf7f3a481573359fe5ac89869cbe637b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a53572ebf7f3a481573359fe5ac89869cbe637b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b88a863cfb0544c1c45d61b574b8b7e7f067e88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b88a863cfb0544c1c45d61b574b8b7e7f067e88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b88a863cfb0544c1c45d61b574b8b7e7f067e88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b88a863cfb0544c1c45d61b574b8b7e7f067e88/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/143d17ce79a8ce8498b9e8fb41f8a7e7a96a33dd"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d83c94f949eaea0817ee64cb0e6a5cbaa78aefed",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b88a863cfb0544c1c45d61b574b8b7e7f067e88/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b88a863cfb0544c1c45d61b574b8b7e7f067e88/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3b88a863cfb0544c1c45d61b574b8b7e7f067e88",
        "patch": "@@ -101,6 +101,7 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = \"main\";\n+        strDefaultPolicy = \"standard\";\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;\n@@ -168,7 +169,6 @@ class CMainParams : public CChainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n-        fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n     }\n@@ -187,6 +187,7 @@ class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n+        strDefaultPolicy = \"test\";\n         consensus.nMajorityEnforceBlockUpgrade = 51;\n         consensus.nMajorityRejectBlockOutdated = 75;\n         consensus.nMajorityWindow = 100;\n@@ -223,7 +224,6 @@ class CTestNetParams : public CMainParams {\n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n-        fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n     }\n@@ -241,6 +241,7 @@ class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n+        strDefaultPolicy = \"test\";\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;\n@@ -264,7 +265,6 @@ class CRegTestParams : public CTestNetParams {\n         fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n         fDefaultConsistencyChecks = true;\n-        fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;\n     }"
      },
      {
        "sha": "91b36aa83a3935795291451ed796bacbfeecba7d",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b88a863cfb0544c1c45d61b574b8b7e7f067e88/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b88a863cfb0544c1c45d61b574b8b7e7f067e88/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=3b88a863cfb0544c1c45d61b574b8b7e7f067e88",
        "patch": "@@ -45,6 +45,7 @@ class CChainParams\n     const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n     int GetDefaultPort() const { return nDefaultPort; }\n \n+    std::string DefaultPolicy() const { return strDefaultPolicy; }\n     /** Used if GenerateBitcoins is called with a negative number of threads */\n     int DefaultMinerThreads() const { return nMinerThreads; }\n     const CBlock& GenesisBlock() const { return genesis; }\n@@ -53,8 +54,6 @@ class CChainParams\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n     /** Default value for -checkmempool and -checkblockindex argument */\n     bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n-    /** Make standard checks */\n-    bool RequireStandard() const { return fRequireStandard; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */\n@@ -77,12 +76,12 @@ class CChainParams\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n     std::string strNetworkID;\n+    std::string strDefaultPolicy;\n     CBlock genesis;\n     std::vector<CAddress> vFixedSeeds;\n     bool fRequireRPCPassword;\n     bool fMiningRequiresPeers;\n     bool fDefaultConsistencyChecks;\n-    bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fTestnetToBeDeprecatedFieldRPC;\n };"
      },
      {
        "sha": "a726c320d530a21f71295c4d4520a1c6675aacc8",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b88a863cfb0544c1c45d61b574b8b7e7f067e88/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b88a863cfb0544c1c45d61b574b8b7e7f067e88/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=3b88a863cfb0544c1c45d61b574b8b7e7f067e88",
        "patch": "@@ -148,7 +148,7 @@ std::string GetPolicyUsageStr(std::string selectedPolicy)\n \n void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n-    SelectPolicy(GetArg(\"-policy\", Params().RequireStandard() ? \"standard\" : \"test\", mapArgs));\n+    SelectPolicy(GetArg(\"-policy\", Params().DefaultPolicy(), mapArgs));\n     pCurrentPolicy->InitFromArgs(mapArgs);\n }\n "
      }
    ]
  },
  {
    "sha": "3a7b66da4f19f5888e5c9785975e182aedcfbd63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTdiNjZkYTRmMTlmNTg4OGU1Yzk3ODU5NzVlMTgyYWVkY2ZiZDYz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-06T23:27:34Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Introduce CPolicy::ValidateFee(CAmount, size_t)",
      "tree": {
        "sha": "a087bd6731211e2169769ee72648bb603114fd2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a087bd6731211e2169769ee72648bb603114fd2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a7b66da4f19f5888e5c9785975e182aedcfbd63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a7b66da4f19f5888e5c9785975e182aedcfbd63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a7b66da4f19f5888e5c9785975e182aedcfbd63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a7b66da4f19f5888e5c9785975e182aedcfbd63/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b88a863cfb0544c1c45d61b574b8b7e7f067e88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b88a863cfb0544c1c45d61b574b8b7e7f067e88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b88a863cfb0544c1c45d61b574b8b7e7f067e88"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6793eb66cd9525c6a09159d6fcf1094bc6861f15",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a7b66da4f19f5888e5c9785975e182aedcfbd63/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a7b66da4f19f5888e5c9785975e182aedcfbd63/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=3a7b66da4f19f5888e5c9785975e182aedcfbd63",
        "patch": "@@ -76,6 +76,7 @@ class CStandardPolicy : public CPolicy\n      */\n     virtual CAmount GetDustThreshold(const CTxOut& txout) const;\n     virtual bool ApproveOutput(const CTxOut& txout) const;\n+    virtual bool ApproveFee(const CAmount&, size_t) const;\n     virtual bool ApproveTx(const CTransaction&, CValidationState&) const;\n     /**\n      * Check transaction inputs to mitigate two\n@@ -238,6 +239,11 @@ bool CStandardPolicy::ApproveOutput(const CTxOut& txout) const\n     return txout.nValue < GetDustThreshold(txout);\n }\n \n+bool CStandardPolicy::ApproveFee(const CAmount& nFees, size_t nSize) const\n+{\n+    return nFees >= minRelayTxFee.GetFee(nSize);\n+}\n+\n bool CStandardPolicy::ApproveTx(const CTransaction& tx, CValidationState& state) const\n {\n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1)"
      },
      {
        "sha": "0b25fcddb9220fc3431b6b05e5396f1b6c4651a1",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a7b66da4f19f5888e5c9785975e182aedcfbd63/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a7b66da4f19f5888e5c9785975e182aedcfbd63/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=3a7b66da4f19f5888e5c9785975e182aedcfbd63",
        "patch": "@@ -57,6 +57,7 @@ class CPolicy\n     virtual bool ApproveScript(const CScript&, txnouttype&) const = 0;\n     virtual CAmount GetDustThreshold(const CTxOut& txout) const = 0;\n     virtual bool ApproveOutput(const CTxOut& txout) const = 0;\n+    virtual bool ApproveFee(const CAmount&, size_t) const = 0;\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms"
      },
      {
        "sha": "6023b2ec4f677b3f94c725c21a5b1cbc4eb00d0a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a7b66da4f19f5888e5c9785975e182aedcfbd63/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a7b66da4f19f5888e5c9785975e182aedcfbd63/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3a7b66da4f19f5888e5c9785975e182aedcfbd63",
        "patch": "@@ -1931,7 +1931,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend,\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n-                if (nFeeNeeded < ::minRelayTxFee.GetFee(nBytes))\n+                if (!policy.ApproveFee(nFeeNeeded, nBytes))\n                 {\n                     strFailReason = _(\"Transaction too large for fee policy\");\n                     return false;\n@@ -2014,7 +2014,7 @@ CAmount CWallet::GetMinimumFee(const CPolicy& policy, unsigned int nTxBytes, uns\n     if (nFeeNeeded == 0)\n         nFeeNeeded = minTxFee.GetFee(nTxBytes);\n     // prevent user from paying a non-sense fee (like 1 satoshi): 0 < fee < minRelayFee\n-    if (nFeeNeeded < ::minRelayTxFee.GetFee(nTxBytes))\n+    if (!policy.ApproveFee(nFeeNeeded, nTxBytes))\n         nFeeNeeded = ::minRelayTxFee.GetFee(nTxBytes);\n     // But always obey the maximum\n     if (nFeeNeeded > maxTxFee)"
      }
    ]
  },
  {
    "sha": "04b651ba3adf3fff7d9333fbb951a4e889d09646",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGI2NTFiYTNhZGYzZmZmN2Q5MzMzZmJiOTUxYTRlODg5ZDA5NjQ2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-06T23:43:33Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:07:47Z"
      },
      "message": "Policy: Introduce CPolicy::ValidateFeeRate(CFeeRate)",
      "tree": {
        "sha": "d9e7932e8b7eff79ca2ba94c840dd0925f495104",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9e7932e8b7eff79ca2ba94c840dd0925f495104"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04b651ba3adf3fff7d9333fbb951a4e889d09646",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b651ba3adf3fff7d9333fbb951a4e889d09646",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04b651ba3adf3fff7d9333fbb951a4e889d09646",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b651ba3adf3fff7d9333fbb951a4e889d09646/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a7b66da4f19f5888e5c9785975e182aedcfbd63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a7b66da4f19f5888e5c9785975e182aedcfbd63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a7b66da4f19f5888e5c9785975e182aedcfbd63"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d284bb6f77e05782b5a345f878332e630e282edf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b651ba3adf3fff7d9333fbb951a4e889d09646/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b651ba3adf3fff7d9333fbb951a4e889d09646/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=04b651ba3adf3fff7d9333fbb951a4e889d09646",
        "patch": "@@ -754,11 +754,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n         if (nFeePerK > nHighTransactionFeeWarning)\n             InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n         payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < ::minRelayTxFee)\n-        {\n+        if (!Policy().ApproveFeeRate(payTxFee))\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n                                        mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n-        }\n     }\n     if (mapArgs.count(\"-maxtxfee\"))\n     {\n@@ -768,11 +766,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n         if (nMaxFee > nHighTransactionMaxFeeWarning)\n             InitWarning(_(\"Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-        {\n+        if (!Policy().ApproveFeeRate(CFeeRate(maxTxFee, 1000)))\n             return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n                                        mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n-        }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", 1);\n     bSpendZeroConfChange = GetArg(\"-spendzeroconfchange\", true);"
      },
      {
        "sha": "98d42eeb5c2f3756deec5b18f51a32bf8bf3dc57",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b651ba3adf3fff7d9333fbb951a4e889d09646/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b651ba3adf3fff7d9333fbb951a4e889d09646/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=04b651ba3adf3fff7d9333fbb951a4e889d09646",
        "patch": "@@ -256,7 +256,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n             double dPriorityDelta = 0;\n             CAmount nFeeDelta = 0;\n             mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-            if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && (feeRate < ::minRelayTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n+            if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && !Policy().ApproveFeeRate(feeRate) && (nBlockSize + nTxSize >= nBlockMinSize))\n                 continue;\n \n             // Prioritise by fee once past the priority size or we run out of high-priority"
      },
      {
        "sha": "c888822af872b0698b5ba9d3d6570df84696f64e",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b651ba3adf3fff7d9333fbb951a4e889d09646/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b651ba3adf3fff7d9333fbb951a4e889d09646/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=04b651ba3adf3fff7d9333fbb951a4e889d09646",
        "patch": "@@ -77,6 +77,7 @@ class CStandardPolicy : public CPolicy\n     virtual CAmount GetDustThreshold(const CTxOut& txout) const;\n     virtual bool ApproveOutput(const CTxOut& txout) const;\n     virtual bool ApproveFee(const CAmount&, size_t) const;\n+    virtual bool ApproveFeeRate(const CFeeRate&) const;\n     virtual bool ApproveTx(const CTransaction&, CValidationState&) const;\n     /**\n      * Check transaction inputs to mitigate two\n@@ -244,6 +245,11 @@ bool CStandardPolicy::ApproveFee(const CAmount& nFees, size_t nSize) const\n     return nFees >= minRelayTxFee.GetFee(nSize);\n }\n \n+bool CStandardPolicy::ApproveFeeRate(const CFeeRate& rate) const\n+{\n+    return rate >= minRelayTxFee;\n+}\n+\n bool CStandardPolicy::ApproveTx(const CTransaction& tx, CValidationState& state) const\n {\n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1)"
      },
      {
        "sha": "c1afc2a6d054d3e818e08f264c04494433af1941",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b651ba3adf3fff7d9333fbb951a4e889d09646/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b651ba3adf3fff7d9333fbb951a4e889d09646/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=04b651ba3adf3fff7d9333fbb951a4e889d09646",
        "patch": "@@ -58,6 +58,7 @@ class CPolicy\n     virtual CAmount GetDustThreshold(const CTxOut& txout) const = 0;\n     virtual bool ApproveOutput(const CTxOut& txout) const = 0;\n     virtual bool ApproveFee(const CAmount&, size_t) const = 0;\n+    virtual bool ApproveFeeRate(const CFeeRate&) const = 0;\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms"
      }
    ]
  },
  {
    "sha": "b9fb65776b83c905db418414feed4cf3da4afa87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWZiNjU3NzZiODNjOTA1ZGI0MTg0MTRmZWVkNGNmM2RhNGFmYTg3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-03-27T12:24:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:08:55Z"
      },
      "message": "Policy: Pass policy as parameter in many main and miner functions",
      "tree": {
        "sha": "b36843f9719561da02c94e5ebac544dd2a207b9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b36843f9719561da02c94e5ebac544dd2a207b9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9fb65776b83c905db418414feed4cf3da4afa87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9fb65776b83c905db418414feed4cf3da4afa87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9fb65776b83c905db418414feed4cf3da4afa87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9fb65776b83c905db418414feed4cf3da4afa87/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04b651ba3adf3fff7d9333fbb951a4e889d09646",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b651ba3adf3fff7d9333fbb951a4e889d09646",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04b651ba3adf3fff7d9333fbb951a4e889d09646"
      }
    ],
    "stats": {
      "total": 208,
      "additions": 113,
      "deletions": 95
    },
    "files": [
      {
        "sha": "bc720ab1bfdf4365eae43ec951e9a1931e14ae6a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -467,6 +467,7 @@ struct CImportingNow\n void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n {\n     RenameThread(\"bitcoin-loadblk\");\n+    const CPolicy& policy = Policy();\n \n     // -reindex\n     if (fReindex) {\n@@ -480,14 +481,14 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             if (!file)\n                 break; // This error is logged in OpenBlockFile\n             LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-            LoadExternalBlockFile(file, &pos);\n+            LoadExternalBlockFile(policy, file, &pos);\n             nFile++;\n         }\n         pblocktree->WriteReindexing(false);\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-        InitBlockIndex();\n+        InitBlockIndex(policy);\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n@@ -498,7 +499,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n             CImportingNow imp;\n             boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n-            LoadExternalBlockFile(file);\n+            LoadExternalBlockFile(policy, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n         } else {\n             LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n@@ -511,7 +512,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         if (file) {\n             CImportingNow imp;\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-            LoadExternalBlockFile(file);\n+            LoadExternalBlockFile(policy, file);\n         } else {\n             LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }\n@@ -1035,7 +1036,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n \n                 // Initialize the block index (no-op if non-empty database was already loaded)\n-                if (!InitBlockIndex()) {\n+                if (!InitBlockIndex(Policy())) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n@@ -1243,7 +1244,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n     CValidationState state;\n-    if (!ActivateBestChain(state))\n+    if (!ActivateBestChain(Policy(), state))\n         strErrors << \"Failed to connect best block\";\n \n     std::vector<boost::filesystem::path> vImportFiles;"
      },
      {
        "sha": "2a896a431f35fa8b64c4d13d00792e5b5f8286e6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 27,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -20,7 +20,6 @@\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"policy/estimator.h\"\n-#include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n@@ -590,7 +589,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return Consensus::IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+bool AcceptToMemoryPool(const CPolicy& policy, CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n     AssertLockHeld(cs_main);\n@@ -606,7 +605,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return error(\"%s: Consensus::CheckTx(): \", __func__, state.GetRejectReason().c_str());\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    if (!Policy().ApproveTx(tx, state))\n+    if (!policy.ApproveTx(tx, state))\n         return error(\"%s: CPolicy::ApproveTx: %s\", __func__, state.GetRejectReason().c_str());\n \n     int nHeight = chainActive.Height();\n@@ -692,7 +691,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"%s: Consensus::CheckTxInputs failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!Policy().ApproveTxInputs(tx, view))\n+        if (!policy.ApproveTxInputs(tx, view))\n             return error(\"%s: CPolicy::ApproveTxInputs failed %s\", __func__, hash.ToString());\n \n         // Check that the transaction doesn't have an excessive number of\n@@ -711,12 +710,12 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, nHeight);\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, nHeight);\n-        if (!Policy().ValidateTxFee(nFees, entry.GetTxSize(), tx, nHeight, fRejectAbsurdFee, fLimitFree, view, mempool, state))\n+        if (!policy.ValidateTxFee(nFees, entry.GetTxSize(), tx, nHeight, fRejectAbsurdFee, fLimitFree, view, mempool, state))\n             return error(\"%s: CPolicy::ValidateFee failed %s %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!Policy().ApproveTxInputsScripts(tx, state, view, true))\n+        if (!policy.ApproveTxInputsScripts(tx, state, view, true))\n             return error(\"%s: CPolicy::ApproveTxInputsScripts failed: %s\", __func__, state.GetRejectReason(), hash.ToString());\n \n         // Store transaction in memory\n@@ -1520,7 +1519,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n }\n \n /** Disconnect chainActive's tip. */\n-bool static DisconnectTip(CValidationState &state) {\n+bool static DisconnectTip(const CPolicy& policy, CValidationState &state) {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n     mempool.check(pcoinsTip);\n@@ -1545,7 +1544,7 @@ bool static DisconnectTip(CValidationState &state) {\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy;\n-        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n+        if (tx.IsCoinBase() || !AcceptToMemoryPool(policy, mempool, stateDummy, tx, false, NULL))\n             mempool.remove(tx, removed, true);\n     }\n     mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n@@ -1692,15 +1691,15 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, CBlock *pblock) {\n+static bool ActivateBestChainStep(const CPolicy& policy, CValidationState &state, CBlockIndex *pindexMostWork, CBlock *pblock) {\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n     const CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n     // Disconnect active blocks which are no longer in the best chain.\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n-        if (!DisconnectTip(state))\n+        if (!DisconnectTip(policy, state))\n             return false;\n     }\n \n@@ -1761,7 +1760,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n+bool ActivateBestChain(const CPolicy& policy, CValidationState &state, CBlock *pblock) {\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n     do {\n@@ -1776,7 +1775,7 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n             if (pindexMostWork == NULL || pindexMostWork == chainActive.Tip())\n                 return true;\n \n-            if (!ActivateBestChainStep(state, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n+            if (!ActivateBestChainStep(policy, state, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL))\n                 return false;\n \n             pindexNewTip = chainActive.Tip();\n@@ -1809,7 +1808,7 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n     return true;\n }\n \n-bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n+bool InvalidateBlock(const CPolicy& policy, CValidationState& state, CBlockIndex *pindex) {\n     AssertLockHeld(cs_main);\n \n     // Mark the block itself as invalid.\n@@ -1824,7 +1823,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n         setBlockIndexCandidates.erase(pindexWalk);\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state)) {\n+        if (!DisconnectTip(policy, state)) {\n             return false;\n         }\n     }\n@@ -2145,7 +2144,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, const Consensus::Params\n     return true;\n }\n \n-bool ProcessNewBlock(CValidationState &state, const Consensus::Params& params, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n+bool ProcessNewBlock(const CPolicy& policy, CValidationState &state, const Consensus::Params& params, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n     // Preliminary checks\n     bool checked = Consensus::CheckBlock(*pblock, GetAdjustedTime(), state, params);\n@@ -2167,7 +2166,7 @@ bool ProcessNewBlock(CValidationState &state, const Consensus::Params& params, C\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n-    if (!ActivateBestChain(state, pblock))\n+    if (!ActivateBestChain(policy, state, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -2496,7 +2495,7 @@ bool LoadBlockIndex()\n }\n \n \n-bool InitBlockIndex() {\n+bool InitBlockIndex(const CPolicy& policy) {\n     LOCK(cs_main);\n     // Check whether we're already initialized\n     if (chainActive.Genesis() != NULL)\n@@ -2522,7 +2521,7 @@ bool InitBlockIndex() {\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n-            if (!ActivateBestChain(state, &block))\n+            if (!ActivateBestChain(policy, state, &block))\n                 return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n@@ -2536,7 +2535,7 @@ bool InitBlockIndex() {\n \n \n \n-bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n+bool LoadExternalBlockFile(const CPolicy& policy, FILE* fileIn, CDiskBlockPos *dbp)\n {\n     const Consensus::Params& params = Params().GetConsensus();\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n@@ -2595,7 +2594,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 // process in case the block isn't known yet\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     CValidationState state;\n-                    if (ProcessNewBlock(state, params, NULL, &block, dbp))\n+                    if (ProcessNewBlock(policy, state, params, NULL, &block, dbp))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -2617,7 +2616,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                             LogPrintf(\"%s: Processing out of order child %s of %s\\n\", __func__, block.GetHash().ToString(),\n                                     head.ToString());\n                             CValidationState dummy;\n-                            if (ProcessNewBlock(dummy, params, NULL, &block, &it->second))\n+                            if (ProcessNewBlock(policy, dummy, params, NULL, &block, &it->second))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(block.GetHash());\n@@ -2988,7 +2987,7 @@ void static ProcessGetData(CNode* pfrom)\n     }\n }\n \n-bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const Consensus::Params& params)\n+bool static ProcessMessage(const CPolicy& policy, CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const Consensus::Params& params)\n {\n     RandAddSeedPerfmon();\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n@@ -3387,7 +3386,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         mapAlreadyAskedFor.erase(inv);\n \n-        if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n+        if (AcceptToMemoryPool(policy, mempool, state, tx, true, &fMissingInputs))\n         {\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx);\n@@ -3423,7 +3422,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n+                    if (AcceptToMemoryPool(policy, mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n                     {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx);\n@@ -3543,7 +3542,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->AddInventoryKnown(inv);\n \n         CValidationState state;\n-        ProcessNewBlock(state, params, pfrom, &block);\n+        ProcessNewBlock(policy, state, params, pfrom, &block);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n@@ -3792,6 +3791,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n // requires LOCK(cs_vRecvMsg)\n bool ProcessMessages(CNode* pfrom)\n {\n+    const CChainParams& params = Params();\n+    const CPolicy& policy = Policy();\n     //if (fDebug)\n     //    LogPrintf(\"ProcessMessages(%u messages)\\n\", pfrom->vRecvMsg.size());\n \n@@ -3833,7 +3834,7 @@ bool ProcessMessages(CNode* pfrom)\n         it++;\n \n         // Scan for message start\n-        if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n+        if (memcmp(msg.hdr.pchMessageStart, params.MessageStart(), MESSAGE_START_SIZE) != 0) {\n             LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n             fOk = false;\n             break;\n@@ -3866,7 +3867,7 @@ bool ProcessMessages(CNode* pfrom)\n         bool fRet = false;\n         try\n         {\n-            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, Params().GetConsensus());\n+            fRet = ProcessMessage(policy, pfrom, strCommand, vRecv, msg.nTime, params.GetConsensus());\n             boost::this_thread::interruption_point();\n         }\n         catch (const std::ios_base::failure& e)"
      },
      {
        "sha": "83189daa31a1f509f61e2753d01726ca4a5e9e42",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -12,6 +12,7 @@\n \n #include \"chain.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"script/script_error.h\"\n \n #include <algorithm>\n@@ -113,7 +114,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState &state, const Consensus::Params& params, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n+bool ProcessNewBlock(const CPolicy& policy, CValidationState &state, const Consensus::Params& params, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -123,9 +124,9 @@ FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n-bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n+bool LoadExternalBlockFile(const CPolicy& policy, FILE* fileIn, CDiskBlockPos *dbp = NULL);\n /** Initialize a new block tree database + block data on disk */\n-bool InitBlockIndex();\n+bool InitBlockIndex(const CPolicy& policy);\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex();\n /** Unload database information */\n@@ -148,7 +149,7 @@ std::string GetWarnings(std::string strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n+bool ActivateBestChain(const CPolicy& policy, CValidationState &state, CBlock *pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& params);\n \n /** Create a new block index entry for a given block hash */\n@@ -162,7 +163,7 @@ void FlushStateToDisk();\n \n \n /** (try to) add transaction to memory pool **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+bool AcceptToMemoryPool(const CPolicy& policy, CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee=false);\n \n \n@@ -339,7 +340,7 @@ class CVerifyDB {\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex);\n+bool InvalidateBlock(const CPolicy& policy, CValidationState& state, CBlockIndex *pindex);\n \n /** Remove invalidity status from a block and its descendants. */\n bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex);"
      },
      {
        "sha": "6c23265ae8f4b36d23f1d68eb5103f6e7d96502a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -16,7 +16,6 @@\n #include \"main.h\" // cs_main\n #include \"net.h\"\n #include \"policy/feerate.h\"\n-#include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"pubkey.h\"\n@@ -98,7 +97,7 @@ void UpdateTime(CBlockHeader* pblock, const Consensus::Params params, const CBlo\n         pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, params);\n }\n \n-CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& scriptPubKeyIn)\n+CBlockTemplate* CreateNewBlock(const CPolicy& policy, const Consensus::Params& params, const CScript& scriptPubKeyIn)\n {\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n@@ -256,7 +255,7 @@ CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& s\n             double dPriorityDelta = 0;\n             CAmount nFeeDelta = 0;\n             mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-            if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && !Policy().ApproveFeeRate(feeRate) && (nBlockSize + nTxSize >= nBlockMinSize))\n+            if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && !policy.ApproveFeeRate(feeRate) && (nBlockSize + nTxSize >= nBlockMinSize))\n                 continue;\n \n             // Prioritise by fee once past the priority size or we run out of high-priority\n@@ -407,18 +406,18 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     }\n }\n \n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n+CBlockTemplate* CreateNewBlockWithKey(const CPolicy& policy, CReserveKey& reservekey)\n {\n     const Consensus::Params& params = Params().GetConsensus();\n     CPubKey pubkey;\n     if (!reservekey.GetReservedKey(pubkey))\n         return NULL;\n \n     CScript scriptPubKey = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-    return CreateNewBlock(params, scriptPubKey);\n+    return CreateNewBlock(policy, params, scriptPubKey);\n }\n \n-static bool ProcessBlockFound(CBlock* pblock, const Consensus::Params& params, CWallet& wallet, CReserveKey& reservekey)\n+static bool ProcessBlockFound(const CPolicy& policy, CBlock* pblock, const Consensus::Params& params, CWallet& wallet, CReserveKey& reservekey)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));\n@@ -441,14 +440,16 @@ static bool ProcessBlockFound(CBlock* pblock, const Consensus::Params& params, C\n \n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n-    if (!ProcessNewBlock(state, params, NULL, pblock))\n+    if (!ProcessNewBlock(policy, state, params, NULL, pblock))\n         return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n \n     return true;\n }\n \n void static BitcoinMiner(CWallet *pwallet)\n {\n+    const CPolicy& policy = Policy();\n+\n     LogPrintf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     RenameThread(\"bitcoin-miner\");\n@@ -473,7 +474,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n             CBlockIndex* pindexPrev = chainActive.Tip();\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(policy, reservekey));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");\n@@ -505,7 +506,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                         LogPrintf(\"BitcoinMiner:\\n\");\n                         LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                        ProcessBlockFound(pblock, params, *pwallet, reservekey);\n+                        ProcessBlockFound(policy, pblock, params, *pwallet, reservekey);\n                         SetThreadPriority(THREAD_PRIORITY_LOWEST);\n \n                         // In regression test mode, stop mining after a block is found."
      },
      {
        "sha": "d372c721fb7c58bff1edf211b2027879ee902210",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_MINER_H\n \n #include \"consensus/params.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/block.h\"\n \n #include <stdint.h>\n@@ -26,8 +27,8 @@ struct CBlockTemplate\n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n /** Generate a new block, without valid proof-of-work */\n-CBlockTemplate* CreateNewBlock(const Consensus::Params& params, const CScript& scriptPubKeyIn);\n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n+CBlockTemplate* CreateNewBlock(const CPolicy& policy, const Consensus::Params& params, const CScript& scriptPubKeyIn);\n+CBlockTemplate* CreateNewBlockWithKey(const CPolicy& policy, CReserveKey& reservekey);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void UpdateTime(CBlockHeader* block, const Consensus::Params params, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "0e07c6fa9059dcdd8e09213cbe3e17457153431d",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -642,6 +642,7 @@ Value invalidateblock(const Array& params, bool fHelp)\n             + HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n         );\n+    const CPolicy& policy = Policy();\n \n     std::string strHash = params[0].get_str();\n     uint256 hash(uint256S(strHash));\n@@ -653,11 +654,11 @@ Value invalidateblock(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n \n         CBlockIndex* pblockindex = mapBlockIndex[hash];\n-        InvalidateBlock(state, pblockindex);\n+        InvalidateBlock(policy, state, pblockindex);\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state);\n+        ActivateBestChain(policy, state);\n     }\n \n     if (!state.IsValid()) {\n@@ -685,6 +686,7 @@ Value reconsiderblock(const Array& params, bool fHelp)\n     std::string strHash = params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     CValidationState state;\n+    const CPolicy& policy = Policy();\n \n     {\n         LOCK(cs_main);\n@@ -696,7 +698,7 @@ Value reconsiderblock(const Array& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state);\n+        ActivateBestChain(policy, state);\n     }\n \n     if (!state.IsValid()) {"
      },
      {
        "sha": "86eb360f0cf460bd75779efa2ca66775ebcff50d",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -148,6 +148,7 @@ Value setgenerate(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n+    const CPolicy& policy = Policy();\n     bool fGenerate = true;\n     if (params.size() > 0)\n         fGenerate = params[0].get_bool();\n@@ -179,7 +180,7 @@ Value setgenerate(const Array& params, bool fHelp)\n         Array blockHashes;\n         while (nHeight < nHeightEnd)\n         {\n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(Policy(), reservekey));\n             if (!pblocktemplate.get())\n                 throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet keypool empty\");\n             CBlock *pblock = &pblocktemplate->block;\n@@ -193,7 +194,7 @@ Value setgenerate(const Array& params, bool fHelp)\n                 ++pblock->nNonce;\n             }\n             CValidationState state;\n-            if (!ProcessNewBlock(state, consensusParams, NULL, pblock))\n+            if (!ProcessNewBlock(policy, state, consensusParams, NULL, pblock))\n                 throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n             ++nHeight;\n             blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -372,6 +373,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n \n     LOCK(cs_main);\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n+    const CPolicy& policy = Policy();\n \n     std::string strMode = \"template\";\n     Value lpval = Value::null;\n@@ -499,7 +501,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             pblocktemplate = NULL;\n         }\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = CreateNewBlock(consensusParams, scriptDummy);\n+        pblocktemplate = CreateNewBlock(policy, consensusParams, scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n@@ -619,6 +621,7 @@ Value submitblock(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n         );\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n+    const CPolicy& policy = Policy();\n \n     CBlock block;\n     if (!DecodeHexBlk(block, params[0].get_str()))\n@@ -638,7 +641,7 @@ Value submitblock(const Array& params, bool fHelp)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, consensusParams, NULL, &block);\n+    bool fAccepted = ProcessNewBlock(policy, state, consensusParams, NULL, &block);\n     UnregisterValidationInterface(&sc);\n     if (mi != mapBlockIndex.end())\n     {"
      },
      {
        "sha": "a5003e894616e0419335d7a16e15e6c4aaa4e638",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -758,7 +758,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n     if (!fHaveMempool && !fHaveChain) {\n         // push to local node and sync with wallets\n         CValidationState state;\n-        if (!AcceptToMemoryPool(mempool, state, tx, false, NULL, !fOverrideFees)) {\n+        if (!AcceptToMemoryPool(Policy(), mempool, state, tx, false, NULL, !fOverrideFees)) {\n             if(state.IsInvalid())\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             else"
      },
      {
        "sha": "ee59c7ae7e59803b72780c9cfb1c2aa759453e86",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\" // cs_main\n@@ -60,6 +61,7 @@ struct {\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     const Consensus::Params& params = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const CPolicy& policy = Policy(\"standard\");\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n     CMutableTransaction tx,tx2;\n@@ -70,7 +72,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     Checkpoints::fEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -91,14 +93,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, params, NULL, pblock));\n+        BOOST_CHECK(ProcessNewBlock(policy, state, params, NULL, pblock));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n     delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n@@ -116,7 +118,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -136,14 +138,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -161,7 +163,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -172,7 +174,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -190,7 +192,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -204,17 +206,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n     chainActive.Tip()->nHeight = 209999;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = 210000;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = nHeight;\n \n@@ -246,7 +248,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n \n     // Neither tx should have make it into the template.\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n@@ -259,7 +261,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n     BOOST_CHECK(IsFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(params, scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(policy, params, scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n "
      },
      {
        "sha": "4268ea2b53f9df6eeb713e90cf7d059171e81c6e",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -60,6 +60,7 @@ BOOST_FIXTURE_TEST_SUITE(script_P2SH_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(sign)\n {\n     LOCK(cs_main);\n+    const CPolicy& policy = Policy(\"standard\");\n     // Pay-to-script-hash looks like this:\n     // scriptSig:    <sig> <sig...> <serialized_script>\n     // scriptPubKey: HASH160 <hash> EQUAL\n@@ -97,7 +98,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(Policy(\"standard\").ApproveTx(txFrom, state));\n+    BOOST_CHECK(policy.ApproveTx(txFrom, state));\n \n     CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -161,6 +162,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n BOOST_AUTO_TEST_CASE(set)\n {\n     LOCK(cs_main);\n+    const CPolicy& policy = Policy(\"standard\");\n     // Test the CScript::Set* methods\n     CBasicKeyStore keystore;\n     CKey key[4];\n@@ -193,7 +195,7 @@ BOOST_AUTO_TEST_CASE(set)\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(Policy(\"standard\").ApproveTx(txFrom, state));\n+    BOOST_CHECK(policy.ApproveTx(txFrom, state));\n \n     CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -211,7 +213,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(Policy(\"standard\").ApproveTx(txTo[i], state), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(policy.ApproveTx(txTo[i], state), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n \n@@ -269,6 +271,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n BOOST_AUTO_TEST_CASE(Policy_ApproveTxInputs)\n {\n     LOCK(cs_main);\n+    const CPolicy& policy = Policy(\"standard\");\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n     CBasicKeyStore keystore;\n@@ -348,7 +351,7 @@ BOOST_AUTO_TEST_CASE(Policy_ApproveTxInputs)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n     txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n \n-    BOOST_CHECK(Policy(\"standard\").ApproveTxInputs(txTo, coins));\n+    BOOST_CHECK(policy.ApproveTxInputs(txTo, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(Consensus::GetP2SHSigOpCount(txTo, coins), 22U);\n \n@@ -357,7 +360,7 @@ BOOST_AUTO_TEST_CASE(Policy_ApproveTxInputs)\n     {\n         CScript t = txTo.vin[i].scriptSig;\n         txTo.vin[i].scriptSig = (CScript() << 11) + t;\n-        BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(txTo, coins));\n+        BOOST_CHECK(!policy.ApproveTxInputs(txTo, coins));\n         txTo.vin[i].scriptSig = t;\n     }\n \n@@ -370,7 +373,7 @@ BOOST_AUTO_TEST_CASE(Policy_ApproveTxInputs)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n \n-    BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(txToNonStd1, coins));\n+    BOOST_CHECK(!policy.ApproveTxInputs(txToNonStd1, coins));\n     BOOST_CHECK_EQUAL(Consensus::GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -382,7 +385,7 @@ BOOST_AUTO_TEST_CASE(Policy_ApproveTxInputs)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n \n-    BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(txToNonStd2, coins));\n+    BOOST_CHECK(!policy.ApproveTxInputs(txToNonStd2, coins));\n     BOOST_CHECK_EQUAL(Consensus::GetP2SHSigOpCount(txToNonStd2, coins), 20U);\n }\n "
      },
      {
        "sha": "b35f8c0b599e3217737625182adb858870b970d5",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -43,6 +43,7 @@ BasicTestingSetup::~BasicTestingSetup()\n \n TestingSetup::TestingSetup()\n {\n+    const CPolicy& policy = Policy(\"standard\");\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n #endif\n@@ -53,10 +54,10 @@ TestingSetup::TestingSetup()\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n-        InitBlockIndex();\n+        InitBlockIndex(policy);\n #ifdef ENABLE_WALLET\n         bool fFirstRun;\n-        pwalletMain = new CWallet(Policy(\"standard\"), \"wallet.dat\");\n+        pwalletMain = new CWallet(policy, \"wallet.dat\");\n         pwalletMain->LoadWallet(fFirstRun);\n         RegisterValidationInterface(pwalletMain);\n #endif"
      },
      {
        "sha": "a0d4b2f4fed04bac32e23acdad066314ec7484ed",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -296,6 +296,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n BOOST_AUTO_TEST_CASE(test_Get)\n {\n+    const CPolicy& policy = Policy(\"standard\");\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -316,21 +317,22 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(Policy(\"standard\").ApproveTxInputs(t1, coins));\n+    BOOST_CHECK(policy.ApproveTxInputs(t1, coins));\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n \n     // Adding extra junk to the scriptSig should make it non-standard:\n     t1.vin[0].scriptSig << OP_11;\n-    BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(t1, coins));\n+    BOOST_CHECK(!policy.ApproveTxInputs(t1, coins));\n \n     // ... as should not having enough:\n     t1.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!Policy(\"standard\").ApproveTxInputs(t1, coins));\n+    BOOST_CHECK(!policy.ApproveTxInputs(t1, coins));\n }\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n     LOCK(cs_main);\n+    const CPolicy& policy = Policy(\"standard\");\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -348,43 +350,43 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n     CValidationState state;\n-    BOOST_CHECK(Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(policy.ApproveTx(t, state));\n \n     t.vout[0].nValue = 501; // dust\n-    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(!policy.ApproveTx(t, state));\n \n     t.vout[0].nValue = 601; // not dust\n-    BOOST_CHECK(Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(policy.ApproveTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(!policy.ApproveTx(t, state));\n \n     // 80-byte TX_NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(policy.ApproveTx(t, state));\n \n     // 81-byte TX_NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n-    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(!policy.ApproveTx(t, state));\n \n     // TX_NULL_DATA w/o PUSHDATA\n     t.vout.resize(1);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(policy.ApproveTx(t, state));\n \n     // Only one TX_NULL_DATA permitted in all cases\n     t.vout.resize(2);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(!policy.ApproveTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(!policy.ApproveTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!Policy(\"standard\").ApproveTx(t, state));\n+    BOOST_CHECK(!policy.ApproveTx(t, state));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "6bee0a3b496d88e6df44babcd7513ddf05d27aef",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9fb65776b83c905db418414feed4cf3da4afa87/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9fb65776b83c905db418414feed4cf3da4afa87/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b9fb65776b83c905db418414feed4cf3da4afa87",
        "patch": "@@ -2743,6 +2743,6 @@ int CMerkleTx::GetBlocksToMaturity() const\n bool CMerkleTx::AcceptToMemoryPool(const CPolicy& policy, bool fLimitFree, bool fRejectAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n+    return ::AcceptToMemoryPool(policy, mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n }\n "
      }
    ]
  },
  {
    "sha": "61145b4817963da2f03b623db7991461867f8d70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTE0NWI0ODE3OTYzZGEyZjAzYjYyM2RiNzk5MTQ2MTg2N2Y4ZDcw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-02-07T00:24:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-02T00:08:58Z"
      },
      "message": "Policy: Introduce CPolicy::GetMinRelayFeeRate()",
      "tree": {
        "sha": "87ad9b1ca7cbb302db58f4c71d9ac16705a9be92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87ad9b1ca7cbb302db58f4c71d9ac16705a9be92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61145b4817963da2f03b623db7991461867f8d70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61145b4817963da2f03b623db7991461867f8d70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61145b4817963da2f03b623db7991461867f8d70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61145b4817963da2f03b623db7991461867f8d70/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9fb65776b83c905db418414feed4cf3da4afa87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9fb65776b83c905db418414feed4cf3da4afa87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9fb65776b83c905db418414feed4cf3da4afa87"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 20,
      "deletions": 15
    },
    "files": [
      {
        "sha": "49d16203863182e66e9ab5dd84e0af084fa15d9d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61145b4817963da2f03b623db7991461867f8d70/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61145b4817963da2f03b623db7991461867f8d70/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=61145b4817963da2f03b623db7991461867f8d70",
        "patch": "@@ -757,7 +757,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         payTxFee = CFeeRate(nFeePerK, 1000);\n         if (!Policy().ApproveFeeRate(payTxFee))\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n+                                       mapArgs[\"-paytxfee\"], Policy().GetMinRelayFeeRate().ToString()));\n     }\n     if (mapArgs.count(\"-maxtxfee\"))\n     {\n@@ -769,7 +769,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         maxTxFee = nMaxFee;\n         if (!Policy().ApproveFeeRate(CFeeRate(maxTxFee, 1000)))\n             return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n+                                       mapArgs[\"-maxtxfee\"], Policy().GetMinRelayFeeRate().ToString()));\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", 1);\n     bSpendZeroConfChange = GetArg(\"-spendzeroconfchange\", true);"
      },
      {
        "sha": "6a38ba839e10d7ffcbf33f7d4696abad7f2d789a",
        "filename": "src/policy/estimator.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61145b4817963da2f03b623db7991461867f8d70/src/policy/estimator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61145b4817963da2f03b623db7991461867f8d70/src/policy/estimator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/estimator.cpp?ref=61145b4817963da2f03b623db7991461867f8d70",
        "patch": "@@ -190,7 +190,7 @@ void CMinerPolicyEstimator::seenBlock(const std::vector<CTxMemPoolEntry>& entrie\n             // Fees are stored and reported as BTC-per-kb:\n             CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n             double dPriority = entry->GetPriority(entry->GetHeight()); // Want priority when it went IN\n-            seenTxConfirm(feeRate, minRelayTxFee, dPriority, i);\n+            seenTxConfirm(feeRate, Policy().GetMinRelayFeeRate(), dPriority, i);\n         }\n     }\n \n@@ -316,7 +316,7 @@ bool CMinerPolicyEstimator::Read(CAutoFile& filein)\n         \n         for (size_t i = 0; i < numEntries; i++) {\n             CBlockAverage entry;\n-            entry.Read(filein, minRelayTxFee);\n+            entry.Read(filein, Policy().GetMinRelayFeeRate());\n             fileHistory.push_back(entry);\n         }\n "
      },
      {
        "sha": "28f1ba91a688b2dbea003a4483f003c0c367e6c4",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61145b4817963da2f03b623db7991461867f8d70/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61145b4817963da2f03b623db7991461867f8d70/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=61145b4817963da2f03b623db7991461867f8d70",
        "patch": "@@ -20,8 +20,6 @@\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n-/** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-CFeeRate minRelayTxFee = CFeeRate(1000);\n static const std::string defaultMinRelayTxFee = \"0.00001000\";\n /** The maximum number of bytes in OP_RETURN outputs that we're willing to relay/mine */\n static const unsigned int MAX_OP_RETURN_RELAY = 80;\n@@ -48,6 +46,8 @@ class CStandardPolicy : public CPolicy\n      */\n     unsigned int policyScriptFlags;\n     bool fAllowFree;\n+    /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n+    CFeeRate minRelayTxFee;\n public:\n     CStandardPolicy() : nMaxDatacarrierBytes(MAX_OP_RETURN_RELAY),\n                         fIsBareMultisigStd(true),\n@@ -58,7 +58,8 @@ class CStandardPolicy : public CPolicy\n                                           SCRIPT_VERIFY_NULLDUMMY |\n                                           SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n                                           SCRIPT_VERIFY_CLEANSTACK),\n-                        fAllowFree(true)\n+                        fAllowFree(true),\n+                        minRelayTxFee(1000)\n     {};\n \n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n@@ -78,6 +79,7 @@ class CStandardPolicy : public CPolicy\n     virtual bool ApproveOutput(const CTxOut& txout) const;\n     virtual bool ApproveFee(const CAmount&, size_t) const;\n     virtual bool ApproveFeeRate(const CFeeRate&) const;\n+    virtual const CFeeRate& GetMinRelayFeeRate() const;\n     virtual bool ApproveTx(const CTransaction&, CValidationState&) const;\n     /**\n      * Check transaction inputs to mitigate two\n@@ -250,6 +252,11 @@ bool CStandardPolicy::ApproveFeeRate(const CFeeRate& rate) const\n     return rate >= minRelayTxFee;\n }\n \n+const CFeeRate& CStandardPolicy::GetMinRelayFeeRate() const\n+{\n+    return minRelayTxFee;\n+}\n+\n bool CStandardPolicy::ApproveTx(const CTransaction& tx, CValidationState& state) const\n {\n     if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1)"
      },
      {
        "sha": "01375ab5409b28597fc46a7d292a43e8707c4d19",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61145b4817963da2f03b623db7991461867f8d70/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61145b4817963da2f03b623db7991461867f8d70/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=61145b4817963da2f03b623db7991461867f8d70",
        "patch": "@@ -32,10 +32,6 @@ static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n \n-/** GLOBALS: These variables are supposed to become CStandardPolicy attributes */\n-\n-extern CFeeRate minRelayTxFee;\n-\n inline double AllowFreeThreshold()\n {\n     return COIN * 144 / 250;\n@@ -59,6 +55,8 @@ class CPolicy\n     virtual bool ApproveOutput(const CTxOut& txout) const = 0;\n     virtual bool ApproveFee(const CAmount&, size_t) const = 0;\n     virtual bool ApproveFeeRate(const CFeeRate&) const = 0;\n+    /** DEPRECATED: avoid using this method when possible */\n+    virtual const CFeeRate& GetMinRelayFeeRate() const = 0;\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms"
      },
      {
        "sha": "a479310449583bba8459c36975aee2790eade973",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61145b4817963da2f03b623db7991461867f8d70/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61145b4817963da2f03b623db7991461867f8d70/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=61145b4817963da2f03b623db7991461867f8d70",
        "patch": "@@ -645,7 +645,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     toolTip2 += tr(\"This label turns red, if the priority is smaller than \\\"medium\\\".\") + \"<br /><br />\";\n     toolTip2 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK()));\n \n-    QString toolTip3 = tr(\"This label turns red, if any recipient receives an amount smaller than %1.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, ::minRelayTxFee.GetFee(546)));\n+    QString toolTip3 = tr(\"This label turns red, if any recipient receives an amount smaller than %1.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, Policy().GetMinRelayFeeRate().GetFee(546)));\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n     double dFeeVary;"
      },
      {
        "sha": "0151adbe27501a2870bef048f309d486abb13bc0",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61145b4817963da2f03b623db7991461867f8d70/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61145b4817963da2f03b623db7991461867f8d70/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=61145b4817963da2f03b623db7991461867f8d70",
        "patch": "@@ -104,7 +104,7 @@ Value getinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n #endif\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(Policy().GetMinRelayFeeRate().GetFeePerK())));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }"
      },
      {
        "sha": "154e75f6da6614a6bce31dbb137c25b02371cab6",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61145b4817963da2f03b623db7991461867f8d70/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61145b4817963da2f03b623db7991461867f8d70/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=61145b4817963da2f03b623db7991461867f8d70",
        "patch": "@@ -429,7 +429,7 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(Policy().GetMinRelayFeeRate().GetFeePerK())));\n     Array localAddresses;\n     {\n         LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "ebee12c0417363ceafa6970d690774c0240df5cb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61145b4817963da2f03b623db7991461867f8d70/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61145b4817963da2f03b623db7991461867f8d70/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=61145b4817963da2f03b623db7991461867f8d70",
        "patch": "@@ -2015,7 +2015,7 @@ CAmount CWallet::GetMinimumFee(const CPolicy& policy, unsigned int nTxBytes, uns\n         nFeeNeeded = minTxFee.GetFee(nTxBytes);\n     // prevent user from paying a non-sense fee (like 1 satoshi): 0 < fee < minRelayFee\n     if (!policy.ApproveFee(nFeeNeeded, nTxBytes))\n-        nFeeNeeded = ::minRelayTxFee.GetFee(nTxBytes);\n+        nFeeNeeded = policy.GetMinRelayFeeRate().GetFee(nTxBytes);\n     // But always obey the maximum\n     if (nFeeNeeded > maxTxFee)\n         nFeeNeeded = maxTxFee;"
      }
    ]
  }
]