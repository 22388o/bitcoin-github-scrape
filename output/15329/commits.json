[
  {
    "sha": "fa24aff95e6259b2590c6405c225431599e05042",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI0YWZmOTVlNjI1OWIyNTkwYzY0MDVjMjI1NDMxNTk5ZTA1MDQy",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-02-02T20:43:20Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-04-23T18:51:39Z"
      },
      "message": "Translate appropriate InitError() content",
      "tree": {
        "sha": "13e19590fa7c1a037cdff8645fb99fbc7172cbe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13e19590fa7c1a037cdff8645fb99fbc7172cbe2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa24aff95e6259b2590c6405c225431599e05042",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAly/XrsACgkQQQEIES5+\nqB8pvhAAs5Ud8kLJlX5YzNgoe379DIYhjlahEMSdx5zhG36xSv14kQz4VqFiGXb5\nn6Bq1RHC4tkxf8JoYAXmReNEws9dd3nUxCPkI4FTLPBJ4VsKovw2Lt78YzhlgtNJ\nMhbBJggI/HToFJek0MLYA1MJbM1nX7B0hoegZ4qbeIbPwRxJgyMUPBax7mHHK/bx\nSuiYg9El73yZPOScBrxa0t+2g0eNadAzz+K0K/J7L8qOONOLxldrThdzbMY1LByv\nIIxjXvYjSyOwqvE605pO+jiJz1Wuy8X4xjIJGj5KMWxRefWOYD2eIkWLctnnQ4iQ\nxk/9/dhJ77q7bIU/r2/HkApm3RjnJa5YyiNXdrdAnjKSIP2VymeabgtytuBAS9a1\nJzcYhZWP12hVnFNOEZ8NRefaYn8LS+x2RNG6ot95+h/Fw3dAnqiu4g3kqbpn1dHh\nO73ZI00muVeDZepJxEnbEKSCbXvpRw1TqyxdsmiuINIxIysDf04XguunYPTLoxKr\nxQZhIuc4hod4mjSbmTD2qFk8ghH/u6TB3o1vC8PGs4cpAeKQ6TJI9s1MMyQOIyI4\nUofS5FYM7OVMkltXCPnLOriIXgpN15MEva9BfNLDPPLMNeIg80DehUMcb/AHm8Cb\noT0j/0NPNw0nIm+C04fZgrJrl1Q7BvEbuj8ZcSMl/RvkL9uo9cA=\n=dvXg\n-----END PGP SIGNATURE-----",
        "payload": "tree 13e19590fa7c1a037cdff8645fb99fbc7172cbe2\nparent 40a720acb8472f6e8afdf8b8d1897f35d58daf1f\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1549140200 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1556045499 +0300\n\nTranslate appropriate InitError() content\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa24aff95e6259b2590c6405c225431599e05042",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa24aff95e6259b2590c6405c225431599e05042",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa24aff95e6259b2590c6405c225431599e05042/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40a720acb8472f6e8afdf8b8d1897f35d58daf1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a720acb8472f6e8afdf8b8d1897f35d58daf1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40a720acb8472f6e8afdf8b8d1897f35d58daf1f"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 20,
      "deletions": 22
    },
    "files": [
      {
        "sha": "d06f329ce458585baaddc618bca5c1623aab9a66",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa24aff95e6259b2590c6405c225431599e05042/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa24aff95e6259b2590c6405c225431599e05042/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa24aff95e6259b2590c6405c225431599e05042",
        "patch": "@@ -917,7 +917,7 @@ bool AppInitBasicSetup()\n #endif\n \n     if (!SetupNetworking())\n-        return InitError(\"Initializing networking failed\");\n+        return InitError(_(\"Initializing networking failed\"));\n \n #ifndef WIN32\n     if (!gArgs.GetBoolArg(\"-sysperms\", false)) {\n@@ -994,7 +994,7 @@ bool AppInitParameterInteraction()\n     // -bind and -whitebind can't be set when not listening\n     size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n     if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n-        return InitError(\"Cannot set -bind or -whitebind together with -listen=0\");\n+        return InitError(_(\"Cannot set -bind or -whitebind together with -listen=0\"));\n     }\n \n     // Make sure enough file descriptors are available\n@@ -1057,7 +1057,7 @@ bool AppInitParameterInteraction()\n     if (gArgs.IsArgSet(\"-minimumchainwork\")) {\n         const std::string minChainWorkStr = gArgs.GetArg(\"-minimumchainwork\", \"\");\n         if (!IsHexNumber(minChainWorkStr)) {\n-            return InitError(strprintf(\"Invalid non-hex (%s) minimum chain work value specified\", minChainWorkStr));\n+            return InitError(strprintf(_(\"Invalid non-hex (%s) minimum chain work value specified\"), minChainWorkStr));\n         }\n         nMinimumChainWork = UintToArith256(uint256S(minChainWorkStr));\n     } else {\n@@ -1117,7 +1117,7 @@ bool AppInitParameterInteraction()\n \n     peer_connect_timeout = gArgs.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n-        return InitError(\"peertimeout cannot be configured with a negative value.\");\n+        return InitError(_(\"peertimeout cannot be configured with a negative value.\"));\n     }\n \n     if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n@@ -1170,7 +1170,7 @@ bool AppInitParameterInteraction()\n \n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n-        return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n+        return InitError(strprintf(_(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n@@ -1186,10 +1186,10 @@ bool AppInitParameterInteraction()\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n-        return InitError(\"rpcserialversion must be non-negative.\");\n+        return InitError(_(\"rpcserialversion must be non-negative.\"));\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n-        return InitError(\"unknown rpcserialversion requested.\");\n+        return InitError(_(\"unknown rpcserialversion requested.\"));\n \n     nMaxTipAge = gArgs.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n@@ -1266,8 +1266,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n             LogInstance().ShrinkDebugFile();\n         }\n         if (!LogInstance().OpenDebugLog()) {\n-            return InitError(strprintf(\"Could not open debug log file %s\",\n-                LogInstance().m_file_path.string()));\n+            return InitError(strprintf(_(\"Could not open debug log file %s\"), LogInstance().m_file_path.string()));\n         }\n     }\n \n@@ -1651,7 +1650,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n             if (!fReset) {\n                 bool fRet = uiInterface.ThreadSafeQuestion(\n                     strLoadError + \".\\n\\n\" + _(\"Do you want to rebuild the block database now?\"),\n-                    strLoadError + \".\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n+                    strLoadError + \".\\n\" + _(\"Please restart with -reindex or -reindex-chainstate to recover.\"),\n                     \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n                 if (fRet) {\n                     fReindex = true;"
      },
      {
        "sha": "ae82bea8eab2a77b41d4bc20d4bfeba9062970f6",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa24aff95e6259b2590c6405c225431599e05042/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa24aff95e6259b2590c6405c225431599e05042/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=fa24aff95e6259b2590c6405c225431599e05042",
        "patch": "@@ -89,7 +89,7 @@ bool WalletInit::ParameterInteraction() const\n \n     if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n         if (is_multiwallet) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-salvagewallet\"));\n+            return InitError(strprintf(_(\"%s is only allowed with a single wallet file\"), \"-salvagewallet\"));\n         }\n         // Rewrite just private keys: rescan to find transactions\n         if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n@@ -106,7 +106,7 @@ bool WalletInit::ParameterInteraction() const\n     // -zapwallettxes implies a rescan\n     if (zapwallettxes) {\n         if (is_multiwallet) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n+            return InitError(strprintf(_(\"%s is only allowed with a single wallet file\"), \"-zapwallettxes\"));\n         }\n         if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n             LogPrintf(\"%s: parameter interaction: -zapwallettxes enabled -> setting -rescan=1\\n\", __func__);\n@@ -115,18 +115,17 @@ bool WalletInit::ParameterInteraction() const\n \n     if (is_multiwallet) {\n         if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-upgradewallet\"));\n+            return InitError(strprintf(_(\"%s is only allowed with a single wallet file\"), \"-upgradewallet\"));\n         }\n     }\n \n     if (gArgs.GetBoolArg(\"-sysperms\", false))\n-        return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n+        return InitError(_(\"-sysperms is not allowed in combination with enabled wallet functionality\"));\n     if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n         return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n \n     if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n-        InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n-                    _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n+        InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" + _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n     return true;\n }"
      },
      {
        "sha": "7ff3c3c4faed6f4b9810fc6e64fcd50255d05c4a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa24aff95e6259b2590c6405c225431599e05042/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa24aff95e6259b2590c6405c225431599e05042/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa24aff95e6259b2590c6405c225431599e05042",
        "patch": "@@ -3910,17 +3910,17 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n           (path_type == fs::regular_file && fs::path(location.GetName()).filename() == location.GetName()))) {\n-        error_string = strprintf(\n+        error_string = strprintf(_(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n-              \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\",\n+              \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\"),\n               location.GetName(), GetWalletDir());\n         return false;\n     }\n \n     // Make sure that the wallet path doesn't clash with an existing wallet path\n     if (IsWalletLoaded(wallet_path)) {\n-        error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", location.GetName());\n+        error_string = strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), location.GetName());\n         return false;\n     }\n \n@@ -3932,7 +3932,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n             return false;\n         }\n     } catch (const fs::filesystem_error& e) {\n-        error_string = strprintf(\"Error loading wallet %s. %s\", location.GetName(), fsbridge::get_filesystem_error_message(e));\n+        error_string = strprintf(_(\"Error loading wallet %s. %s\"), location.GetName(), fsbridge::get_filesystem_error_message(e));\n         return false;\n     }\n \n@@ -4098,12 +4098,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n-        chain.initError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n+        chain.initError(strprintf(_(\"Unknown address type '%s'\"), gArgs.GetArg(\"-addresstype\", \"\")));\n         return nullptr;\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n-        chain.initError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n+        chain.initError(strprintf(_(\"Unknown change type '%s'\"), gArgs.GetArg(\"-changetype\", \"\")));\n         return nullptr;\n     }\n "
      }
    ]
  },
  {
    "sha": "71fcc30b95936ed12ccd4b9fa5df8936a5b853b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWZjYzMwYjk1OTM2ZWQxMmNjZDRiOWZhNWRmODkzNmE1Yjg1M2Ix",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-02-02T23:49:53Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-04-23T18:58:53Z"
      },
      "message": "Never translate option names",
      "tree": {
        "sha": "7f606f58e264dcec3d8d7f68ab164bdf021cd34e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f606f58e264dcec3d8d7f68ab164bdf021cd34e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAly/YG0ACgkQQQEIES5+\nqB+aORAAulPI6JNNxmyUnT99JX8S/NArK2ppQNwQ2PWc0TPn94uJDb4JpOK5MxYb\nhTcsZEkNINmLqJlnWdYoKxUMKjrwmowtwAI5DjPuHQOMXFQwEMQZNg5N4MolXBuH\nm5bMD5fDrvSK+O1DaC9KrujxkYEQSsPoPWinh2HISEp3um0q2IexBXyRcuOpnwit\n/JG/1KdZGhsj0OQhLsiQ6BnXDiEj9rokIyVQhto4n9rdk7ZLaPXU8TTva96XPpEf\nK45/jgOPZ/KPwFXR16Dx3mnQjNMklt5SHT8THbWY3dKTDW6Bk5ZhAwsbQTTVJ2+W\n/bLJrVr7Sk/JkxYJajsrZTgWMmmcoHXfDglYRJno8nfXOsOcLrrgPZ4bvVV6EW22\n+PsuTXrrDJfYwAsTsK52F5wZFfCWwHW+wMlHKHEJSlfYeYGj0s9e/LhznV+1ZiCK\nDFVckLeieXHZWh9S6iJsFoxXVGJckhHuGB0y8sWnQ314zm4odvqOaAwnP/igfz8u\nuOLhTPZ4JynYqMqyPmaPhQ6gr70NiqVRN74u8fotVT+nUnkzfBbHy8+skd3KjPFZ\nUjrJRuMUAFlcfBDonrqI8yWqf8Dw02hxc5uc5yhvyQnSpizNwap5oQ60xvVyNt0g\n3LTq1S2YHGEpp+IbVxu34l/d+NNj68VFdqrcM1EEvfNuZ2wGh8k=\n=9/ed\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f606f58e264dcec3d8d7f68ab164bdf021cd34e\nparent fa24aff95e6259b2590c6405c225431599e05042\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1549151393 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1556045933 +0300\n\nNever translate option names\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa24aff95e6259b2590c6405c225431599e05042",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa24aff95e6259b2590c6405c225431599e05042",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa24aff95e6259b2590c6405c225431599e05042"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 34,
      "deletions": 33
    },
    "files": [
      {
        "sha": "0c3f6d43bd661fcdbd04791f7bb596f75a3d4465",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=71fcc30b95936ed12ccd4b9fa5df8936a5b853b1",
        "patch": "@@ -985,16 +985,16 @@ bool AppInitParameterInteraction()\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n-            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+            return InitError(strprintf(_(\"Prune mode is incompatible with %s.\"), \"-txindex\"));\n         if (!g_enabled_filter_types.empty()) {\n-            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n+            return InitError(strprintf(_(\"Prune mode is incompatible with %s.\"), \"-blockfilterindex\"));\n         }\n     }\n \n     // -bind and -whitebind can't be set when not listening\n     size_t nUserBind = gArgs.GetArgs(\"-bind\").size() + gArgs.GetArgs(\"-whitebind\").size();\n     if (nUserBind != 0 && !gArgs.GetBoolArg(\"-listen\", DEFAULT_LISTEN)) {\n-        return InitError(_(\"Cannot set -bind or -whitebind together with -listen=0\"));\n+        return InitError(strprintf(_(\"Cannot set %s or %s together with %s=0\"), \"-bind\", \"-whitebind\", \"-listen\"));\n     }\n \n     // Make sure enough file descriptors are available\n@@ -1016,7 +1016,7 @@ bool AppInitParameterInteraction()\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n \n     if (nMaxConnections < nUserMaxConnections)\n-        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n+        InitWarning(strprintf(_(\"Reducing %s from %d to %d, because of system limitations.\"), \"-maxconnections\", nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n     if (gArgs.IsArgSet(\"-debug\")) {\n@@ -1072,7 +1072,7 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n+        return InitError(strprintf(_(\"%s must be at least %d MB\"), \"-maxmempool\", std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (gArgs.IsArgSet(\"-incrementalrelayfee\"))\n@@ -1117,7 +1117,7 @@ bool AppInitParameterInteraction()\n \n     peer_connect_timeout = gArgs.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n-        return InitError(_(\"peertimeout cannot be configured with a negative value.\"));\n+        return InitError(strprintf(_(\"%s cannot be configured with a negative value.\"), \"-peertimeout\"));\n     }\n \n     if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n@@ -1170,7 +1170,7 @@ bool AppInitParameterInteraction()\n \n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n-        return InitError(strprintf(_(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n+        return InitError(strprintf(_(\"%s is not currently supported for %s chain\"), \"-acceptnonstdtxn\", chainparams.NetworkIDString()));\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n@@ -1186,10 +1186,10 @@ bool AppInitParameterInteraction()\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n-        return InitError(_(\"rpcserialversion must be non-negative.\"));\n+        return InitError(strprintf(_(\"%s must be non-negative.\"), \"-rpcserialversion\"));\n \n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n-        return InitError(_(\"unknown rpcserialversion requested.\"));\n+        return InitError(strprintf(_(\"Unknown %s requested.\"), \"-rpcserialversion\"));\n \n     nMaxTipAge = gArgs.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n@@ -1383,7 +1383,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         for (const std::string& snet : gArgs.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n+                return InitError(strprintf(_(\"Unknown network specified in %s: '%s'\"), \"-onlynet\", snet));\n             nets.insert(net);\n         }\n         for (int n = 0; n < NET_MAX; n++) {\n@@ -1404,12 +1404,12 @@ bool AppInitMain(InitInterfaces& interfaces)\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n         if (!Lookup(proxyArg.c_str(), proxyAddr, 9050, fNameLookup)) {\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+            return InitError(strprintf(_(\"Invalid %s address or hostname: '%s'\"), \"-proxy\", proxyArg));\n         }\n \n         proxyType addrProxy = proxyType(proxyAddr, proxyRandomize);\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+            return InitError(strprintf(_(\"Invalid %s address or hostname: '%s'\"), \"-proxy\", proxyArg));\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n@@ -1428,11 +1428,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n         } else {\n             CService onionProxy;\n             if (!Lookup(onionArg.c_str(), onionProxy, 9050, fNameLookup)) {\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+                return InitError(strprintf(_(\"Invalid %s address or hostname: '%s'\"), \"-onion\", onionArg));\n             }\n             proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n             if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+                return InitError(strprintf(_(\"Invalid %s address or hostname: '%s'\"), \"-onion\", onionArg));\n             SetProxy(NET_ONION, addrOnion);\n             SetReachable(NET_ONION, true);\n         }\n@@ -1550,7 +1550,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n                 // in the past, but is now trying to run unpruned.\n                 if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                    strLoadError = strprintf(_(\"You need to rebuild the database using %s to go back to unpruned mode.  This will redownload the entire blockchain\"), \"-reindex\");\n                     break;\n                 }\n \n@@ -1578,7 +1578,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n                 // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                 if (!ReplayBlocks(chainparams, pcoinsdbview.get())) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                    strLoadError = strprintf(_(\"Unable to replay blocks. You will need to rebuild the database using %s.\"), \"-reindex-chainstate\");\n                     break;\n                 }\n \n@@ -1650,7 +1650,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n             if (!fReset) {\n                 bool fRet = uiInterface.ThreadSafeQuestion(\n                     strLoadError + \".\\n\\n\" + _(\"Do you want to rebuild the block database now?\"),\n-                    strLoadError + \".\\n\" + _(\"Please restart with -reindex or -reindex-chainstate to recover.\"),\n+                    strLoadError + \".\\n\" + strprintf(_(\"Please restart with %s or %s to recover.\"), \"-reindex\", \"-reindex-chainstate\"),\n                     \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n                 if (fRet) {\n                     fReindex = true;\n@@ -1819,7 +1819,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n             return InitError(ResolveErrMsg(\"whitebind\", strBind));\n         }\n         if (addrBind.GetPort() == 0) {\n-            return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n+            return InitError(strprintf(_(\"Need to specify a port with %s: '%s'\"), \"-whitebind\", strBind));\n         }\n         connOptions.vWhiteBinds.push_back(addrBind);\n     }\n@@ -1828,7 +1828,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         CSubNet subnet;\n         LookupSubNet(net.c_str(), subnet);\n         if (!subnet.IsValid())\n-            return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+            return InitError(strprintf(_(\"Invalid netmask specified in %s: '%s'\"), \"-whitelist\", net));\n         connOptions.vWhitelistedRange.push_back(subnet);\n     }\n "
      },
      {
        "sha": "80d0dc6d9b59e3b98314e1e7f8c0b6d7025ff6a7",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=71fcc30b95936ed12ccd4b9fa5df8936a5b853b1",
        "patch": "@@ -120,12 +120,13 @@ bool WalletInit::ParameterInteraction() const\n     }\n \n     if (gArgs.GetBoolArg(\"-sysperms\", false))\n-        return InitError(_(\"-sysperms is not allowed in combination with enabled wallet functionality\"));\n+        return InitError(strprintf(_(\"%s is not allowed in combination with enabled wallet functionality\"), \"-sysperms\"));\n     if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n-        return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n+        return InitError(strprintf(_(\"Rescans are not possible in pruned mode. You will need to use %s which will download the whole blockchain again.\"), \"-reindex\"));\n \n     if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n-        InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" + _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n+        InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n+                    _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n     return true;\n }"
      },
      {
        "sha": "b1bc2cf9528d1c14ae0f8e84fa1b9b3492c8b003",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fcc30b95936ed12ccd4b9fa5df8936a5b853b1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=71fcc30b95936ed12ccd4b9fa5df8936a5b853b1",
        "patch": "@@ -3911,16 +3911,16 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n           (path_type == fs::regular_file && fs::path(location.GetName()).filename() == location.GetName()))) {\n         error_string = strprintf(_(\n-              \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n-              \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n-              \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\"),\n-              location.GetName(), GetWalletDir());\n+              \"Invalid %s path '%s'. %s path should point to a directory where %s and \"\n+              \"%s files can be stored, a location where such a directory could be created, \"\n+              \"or (for backwards compatibility) the name of an existing data file in %s (%s)\"),\n+              \"-wallet\", location.GetName(), \"-wallet\", \"wallet.dat\", \"database/log.??????????\", \"-walletdir\", GetWalletDir());\n         return false;\n     }\n \n     // Make sure that the wallet path doesn't clash with an existing wallet path\n     if (IsWalletLoaded(wallet_path)) {\n-        error_string = strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), location.GetName());\n+        error_string = strprintf(_(\"Error loading wallet %s. Duplicate %s filename specified.\"), location.GetName(), \"-wallet\");\n         return false;\n     }\n \n@@ -4028,7 +4028,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n         int max_version = walletInstance->GetVersion();\n         if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n+            chain.initError(strprintf(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use %s or %s with no version specified.\"), \"-upgradewallet=169900\", \"-upgradewallet\"));\n             return nullptr;\n         }\n \n@@ -4124,7 +4124,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for %s=<amount>: '%s'\"), \"-fallbackfee\", gArgs.GetArg(\"-fallbackfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n@@ -4137,7 +4137,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for %s=<amount>: '%s'\"), \"-discardfee\", gArgs.GetArg(\"-discardfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n@@ -4158,8 +4158,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n-            chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString()));\n+            chain.initError(strprintf(_(\"Invalid amount for %s=<amount>: '%s' (must be at least %s)\"),\n+                \"-paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString()));\n             return nullptr;\n         }\n     }\n@@ -4206,7 +4206,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             }\n \n             if (rescan_height != block_height) {\n-                chain.initError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+                chain.initError(strprintf(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to %s (download the whole blockchain again in case of pruned node)\"), \"-reindex\"));\n                 return nullptr;\n             }\n         }"
      }
    ]
  }
]