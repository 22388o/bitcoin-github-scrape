[
  {
    "sha": "63d4ee1968144cc3d115f92baef95785abf813ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2Q0ZWUxOTY4MTQ0Y2MzZDExNWY5MmJhZWY5NTc4NWFiZjgxM2Fj",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-11-20T00:01:35Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-01-31T16:07:46Z"
      },
      "message": "refactor: iterate arrays via C++11 range-based for loops if idx is not needed",
      "tree": {
        "sha": "8a06b6882e8e57e1978b521158c288ff6c8f2dd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a06b6882e8e57e1978b521158c288ff6c8f2dd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63d4ee1968144cc3d115f92baef95785abf813ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63d4ee1968144cc3d115f92baef95785abf813ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63d4ee1968144cc3d115f92baef95785abf813ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63d4ee1968144cc3d115f92baef95785abf813ac/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c55f92c7644c267997c7ddab37d195216d6cf39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c55f92c7644c267997c7ddab37d195216d6cf39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c55f92c7644c267997c7ddab37d195216d6cf39"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 25,
      "deletions": 30
    },
    "files": [
      {
        "sha": "ee70c1bc30b5bbc739120bc79ed665e6fddfd3e6",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63d4ee1968144cc3d115f92baef95785abf813ac/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63d4ee1968144cc3d115f92baef95785abf813ac/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=63d4ee1968144cc3d115f92baef95785abf813ac",
        "patch": "@@ -22,7 +22,6 @@ static const struct {\n     {\"signet\", QAPP_APP_NAME_SIGNET, 35, 15},\n     {\"regtest\", QAPP_APP_NAME_REGTEST, 160, 30},\n };\n-static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n \n // titleAddText needs to be const char* for tr()\n NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift, const int iconColorSaturationReduction, const char *_titleAddText):\n@@ -81,14 +80,12 @@ NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift,\n const NetworkStyle* NetworkStyle::instantiate(const std::string& networkId)\n {\n     std::string titleAddText = networkId == CBaseChainParams::MAIN ? \"\" : strprintf(\"[%s]\", networkId);\n-    for (unsigned x=0; x<network_styles_count; ++x)\n-    {\n-        if (networkId == network_styles[x].networkId)\n-        {\n+    for (const auto& network_style : network_styles) {\n+        if (networkId == network_style.networkId) {\n             return new NetworkStyle(\n-                    network_styles[x].appName,\n-                    network_styles[x].iconColorHueShift,\n-                    network_styles[x].iconColorSaturationReduction,\n+                    network_style.appName,\n+                    network_style.iconColorHueShift,\n+                    network_style.iconColorSaturationReduction,\n                     titleAddText.c_str());\n         }\n     }"
      },
      {
        "sha": "aab8d8e4affee2d403f174c88da5693478a3aec5",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63d4ee1968144cc3d115f92baef95785abf813ac/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63d4ee1968144cc3d115f92baef95785abf813ac/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=63d4ee1968144cc3d115f92baef95785abf813ac",
        "patch": "@@ -23,7 +23,6 @@ static const struct {\n     /* Other: linux, unix, ... */\n     {\"other\", true, true, false}\n };\n-static const unsigned platform_styles_count = sizeof(platform_styles)/sizeof(*platform_styles);\n \n namespace {\n /* Local functions for colorizing single-color images */\n@@ -121,15 +120,13 @@ QIcon PlatformStyle::TextColorIcon(const QIcon& icon) const\n \n const PlatformStyle *PlatformStyle::instantiate(const QString &platformId)\n {\n-    for (unsigned x=0; x<platform_styles_count; ++x)\n-    {\n-        if (platformId == platform_styles[x].platformId)\n-        {\n+    for (const auto& platform_style : platform_styles) {\n+        if (platformId == platform_style.platformId) {\n             return new PlatformStyle(\n-                    platform_styles[x].platformId,\n-                    platform_styles[x].imagesOnButtons,\n-                    platform_styles[x].colorizeIcons,\n-                    platform_styles[x].useExtraSpacing);\n+                    platform_style.platformId,\n+                    platform_style.imagesOnButtons,\n+                    platform_style.colorizeIcons,\n+                    platform_style.useExtraSpacing);\n         }\n     }\n     return nullptr;"
      },
      {
        "sha": "8e306ef6d658e6c9e51c4e736cc592e840d06d43",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63d4ee1968144cc3d115f92baef95785abf813ac/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63d4ee1968144cc3d115f92baef95785abf813ac/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=63d4ee1968144cc3d115f92baef95785abf813ac",
        "patch": "@@ -19,7 +19,6 @@\n #include <txmempool.h>\n #include <util/check.h>\n #include <util/ref.h>\n-#include <util/strencodings.h>\n #include <validation.h>\n #include <version.h>\n \n@@ -117,9 +116,10 @@ static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n     param = strReq.substr(0, pos);\n     const std::string suff(strReq, pos + 1);\n \n-    for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n-        if (suff == rf_names[i].name)\n-            return rf_names[i].rf;\n+    for (const auto& rf_name : rf_names) {\n+        if (suff == rf_name.name)\n+            return rf_name.rf;\n+    }\n \n     /* If no suffix is found, return original string.  */\n     param = strReq;\n@@ -129,12 +129,13 @@ static RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n static std::string AvailableDataFormatsString()\n {\n     std::string formats;\n-    for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n-        if (strlen(rf_names[i].name) > 0) {\n+    for (const auto& rf_name : rf_names) {\n+        if (strlen(rf_name.name) > 0) {\n             formats.append(\".\");\n-            formats.append(rf_names[i].name);\n+            formats.append(rf_name.name);\n             formats.append(\", \");\n         }\n+    }\n \n     if (formats.length() > 0)\n         return formats.substr(0, formats.length() - 2);\n@@ -695,6 +696,7 @@ void InterruptREST()\n \n void StopREST()\n {\n-    for (unsigned int i = 0; i < ARRAYLEN(uri_prefixes); i++)\n-        UnregisterHTTPHandler(uri_prefixes[i].prefix, false);\n+    for (const auto& up : uri_prefixes) {\n+        UnregisterHTTPHandler(up.prefix, false);\n+    }\n }"
      },
      {
        "sha": "3e90bb054bfa3510f6a84d1851111c41ca592275",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63d4ee1968144cc3d115f92baef95785abf813ac/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63d4ee1968144cc3d115f92baef95785abf813ac/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=63d4ee1968144cc3d115f92baef95785abf813ac",
        "patch": "@@ -219,8 +219,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     static_assert(sizeof(blockinfo) / sizeof(*blockinfo) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n-    for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n-    {\n+    for (const auto& bi : blockinfo) {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         {\n             LOCK(cs_main);\n@@ -229,7 +228,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             CMutableTransaction txCoinbase(*pblock->vtx[0]);\n             txCoinbase.nVersion = 1;\n             txCoinbase.vin[0].scriptSig = CScript();\n-            txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n+            txCoinbase.vin[0].scriptSig.push_back(bi.extranonce);\n             txCoinbase.vin[0].scriptSig.push_back(::ChainActive().Height());\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n@@ -239,7 +238,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             if (txFirst.size() < 4)\n                 txFirst.push_back(pblock->vtx[0]);\n             pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = blockinfo[i].nonce;\n+            pblock->nNonce = bi.nonce;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n         BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(chainparams, shared_pblock, true, nullptr));"
      }
    ]
  },
  {
    "sha": "365539c84691d470b44d35df374d8c049f8c1192",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjU1MzljODQ2OTFkNDcwYjQ0ZDM1ZGYzNzRkOGMwNDlmOGMxMTky",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-01-31T16:28:23Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-01-31T16:35:01Z"
      },
      "message": "refactor: init vectors via std::{begin,end} to avoid pointer arithmetic",
      "tree": {
        "sha": "5f2644692ed3076d35347bc79cef5790681165e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f2644692ed3076d35347bc79cef5790681165e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/365539c84691d470b44d35df374d8c049f8c1192",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/365539c84691d470b44d35df374d8c049f8c1192",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/365539c84691d470b44d35df374d8c049f8c1192",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/365539c84691d470b44d35df374d8c049f8c1192/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63d4ee1968144cc3d115f92baef95785abf813ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63d4ee1968144cc3d115f92baef95785abf813ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63d4ee1968144cc3d115f92baef95785abf813ac"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "481e3721057ea133c6229fc0a607786651b97a4c",
        "filename": "src/bench/data.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/365539c84691d470b44d35df374d8c049f8c1192/src/bench/data.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/365539c84691d470b44d35df374d8c049f8c1192/src/bench/data.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/data.cpp?ref=365539c84691d470b44d35df374d8c049f8c1192",
        "patch": "@@ -8,7 +8,7 @@ namespace benchmark {\n namespace data {\n \n #include <bench/data/block413567.raw.h>\n-const std::vector<uint8_t> block413567{block413567_raw, block413567_raw + sizeof(block413567_raw) / sizeof(block413567_raw[0])};\n+const std::vector<uint8_t> block413567{std::begin(block413567_raw), std::end(block413567_raw)};\n \n } // namespace data\n } // namespace benchmark"
      },
      {
        "sha": "a991922d58d47c191e9468bfa496f74b26d82676",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/365539c84691d470b44d35df374d8c049f8c1192/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/365539c84691d470b44d35df374d8c049f8c1192/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=365539c84691d470b44d35df374d8c049f8c1192",
        "patch": "@@ -10,7 +10,6 @@\n #include <hash.h> // for signet block challenge hash\n #include <tinyformat.h>\n #include <util/system.h>\n-#include <util/strencodings.h>\n #include <versionbitsinfo.h>\n \n #include <assert.h>\n@@ -136,7 +135,7 @@ class CMainParams : public CChainParams {\n \n         bech32_hrp = \"bc\";\n \n-        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n+        vFixedSeeds = std::vector<SeedSpec6>(std::begin(pnSeed6_main), std::end(pnSeed6_main));\n \n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n@@ -237,7 +236,7 @@ class CTestNetParams : public CChainParams {\n \n         bech32_hrp = \"tb\";\n \n-        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n+        vFixedSeeds = std::vector<SeedSpec6>(std::begin(pnSeed6_test), std::end(pnSeed6_test));\n \n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;"
      },
      {
        "sha": "0b893b9272aea9513672ee244868832098d20f51",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/365539c84691d470b44d35df374d8c049f8c1192/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/365539c84691d470b44d35df374d8c049f8c1192/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=365539c84691d470b44d35df374d8c049f8c1192",
        "patch": "@@ -5,7 +5,6 @@\n \n #include <protocol.h>\n \n-#include <util/strencodings.h>\n #include <util/system.h>\n \n static std::atomic<bool> g_initial_block_download_completed(false);\n@@ -86,7 +85,7 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::CFCHECKPT,\n     NetMsgType::WTXIDRELAY,\n };\n-const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n+const static std::vector<std::string> allNetMessageTypesVec(std::begin(allNetMessageTypes), std::end(allNetMessageTypes));\n \n CMessageHeader::CMessageHeader()\n {"
      }
    ]
  },
  {
    "sha": "e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODI5YzlhZmJmNzVlOTMwZGI2YzNmZTc3YTI2OWIwYWY1ZTdhM2Fk",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-11-19T23:14:32Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-01-31T16:35:16Z"
      },
      "message": "refactor: replace sizeof(a)/sizeof(a[0]) by std::size (C++17)\n\nRemoves the macro ARRAYLEN and also substitutes all other uses of the same\n\"sizeof(a)/sizeof(a[0])\" pattern by std::size, available since C++17.",
      "tree": {
        "sha": "6623bb198d779b51ebf6611c8a01709dba9a50d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6623bb198d779b51ebf6611c8a01709dba9a50d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "365539c84691d470b44d35df374d8c049f8c1192",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/365539c84691d470b44d35df374d8c049f8c1192",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/365539c84691d470b44d35df374d8c049f8c1192"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 12,
      "deletions": 15
    },
    "files": [
      {
        "sha": "fb04673c5c8bdb50f5d1213f5db6f050da7a7260",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
        "patch": "@@ -52,7 +52,7 @@ static const int8_t mapBase58[256] = {\n     int size = strlen(psz) * 733 /1000 + 1; // log(58) / log(256), rounded up.\n     std::vector<unsigned char> b256(size);\n     // Process the characters.\n-    static_assert(sizeof(mapBase58)/sizeof(mapBase58[0]) == 256, \"mapBase58.size() should be 256\"); // guarantee not out of range\n+    static_assert(std::size(mapBase58) == 256, \"mapBase58.size() should be 256\"); // guarantee not out of range\n     while (*psz && !IsSpace(*psz)) {\n         // Decode base58 character\n         int carry = mapBase58[(uint8_t)*psz];"
      },
      {
        "sha": "9900825abb6d27def6d74ad9701d145584e5ab6d",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
        "patch": "@@ -38,7 +38,6 @@\n #include <sys/random.h>\n #endif\n #ifdef HAVE_SYSCTL_ARND\n-#include <util/strencodings.h> // for ARRAYLEN\n #include <sys/sysctl.h>\n #endif\n \n@@ -333,7 +332,7 @@ void GetOSRand(unsigned char *ent32)\n     int have = 0;\n     do {\n         size_t len = NUM_OS_RANDOM_BYTES - have;\n-        if (sysctl(name, ARRAYLEN(name), ent32 + have, &len, nullptr, 0) != 0) {\n+        if (sysctl(name, std::size(name), ent32 + have, &len, nullptr, 0) != 0) {\n             RandFailure();\n         }\n         have += len;"
      },
      {
        "sha": "3b44564ddbc706c67b6d524151af8a27de5785b3",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
        "patch": "@@ -17,7 +17,7 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n     static const std::string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n     static const std::string vstrOut[] = {\"\",\"my======\",\"mzxq====\",\"mzxw6===\",\"mzxw6yq=\",\"mzxw6ytb\",\"mzxw6ytboi======\"};\n     static const std::string vstrOutNoPadding[] = {\"\",\"my\",\"mzxq\",\"mzxw6\",\"mzxw6yq\",\"mzxw6ytb\",\"mzxw6ytboi\"};\n-    for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    for (unsigned int i=0; i<std::size(vstrIn); i++)\n     {\n         std::string strEnc = EncodeBase32(vstrIn[i]);\n         BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);"
      },
      {
        "sha": "714fccffaac63bceaddd5d939d765340d84d5900",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
        "patch": "@@ -16,7 +16,7 @@ BOOST_AUTO_TEST_CASE(base64_testvectors)\n {\n     static const std::string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n     static const std::string vstrOut[] = {\"\",\"Zg==\",\"Zm8=\",\"Zm9v\",\"Zm9vYg==\",\"Zm9vYmE=\",\"Zm9vYmFy\"};\n-    for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    for (unsigned int i=0; i<std::size(vstrIn); i++)\n     {\n         std::string strEnc = EncodeBase64(vstrIn[i]);\n         BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);"
      },
      {
        "sha": "41a626c0eaf862a3352fef4e361df2c388705224",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
        "patch": "@@ -107,14 +107,14 @@ BOOST_AUTO_TEST_CASE(siphash)\n \n     // Check test vectors from spec, one byte at a time\n     CSipHasher hasher2(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n-    for (uint8_t x=0; x<ARRAYLEN(siphash_4_2_testvec); ++x)\n+    for (uint8_t x=0; x<std::size(siphash_4_2_testvec); ++x)\n     {\n         BOOST_CHECK_EQUAL(hasher2.Finalize(), siphash_4_2_testvec[x]);\n         hasher2.Write(&x, 1);\n     }\n     // Check test vectors from spec, eight bytes at a time\n     CSipHasher hasher3(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n-    for (uint8_t x=0; x<ARRAYLEN(siphash_4_2_testvec); x+=8)\n+    for (uint8_t x=0; x<std::size(siphash_4_2_testvec); x+=8)\n     {\n         BOOST_CHECK_EQUAL(hasher3.Finalize(), siphash_4_2_testvec[x]);\n         hasher3.Write(uint64_t(x)|(uint64_t(x+1)<<8)|(uint64_t(x+2)<<16)|(uint64_t(x+3)<<24)|"
      },
      {
        "sha": "80382be682cf803e815cb74a376aa1cba6a74126",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
        "patch": "@@ -216,7 +216,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n-    static_assert(sizeof(blockinfo) / sizeof(*blockinfo) == 110, \"Should have 110 blocks to import\");\n+    static_assert(std::size(blockinfo) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : blockinfo) {"
      },
      {
        "sha": "746d4d3c6b8c5d173ead810f599aa2a8003aa426",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
        "patch": "@@ -164,9 +164,9 @@ static void RunOperators(const int64_t& num1, const int64_t& num2)\n \n BOOST_AUTO_TEST_CASE(creation)\n {\n-    for(size_t i = 0; i < sizeof(values) / sizeof(values[0]); ++i)\n+    for(size_t i = 0; i < std::size(values); ++i)\n     {\n-        for(size_t j = 0; j < sizeof(offsets) / sizeof(offsets[0]); ++j)\n+        for(size_t j = 0; j < std::size(offsets); ++j)\n         {\n             RunCreate(values[i]);\n             RunCreate(values[i] + offsets[j]);\n@@ -177,9 +177,9 @@ BOOST_AUTO_TEST_CASE(creation)\n \n BOOST_AUTO_TEST_CASE(operators)\n {\n-    for(size_t i = 0; i < sizeof(values) / sizeof(values[0]); ++i)\n+    for(size_t i = 0; i < std::size(values); ++i)\n     {\n-        for(size_t j = 0; j < sizeof(offsets) / sizeof(offsets[0]); ++j)\n+        for(size_t j = 0; j < std::size(offsets); ++j)\n         {\n             RunOperators(values[i], values[i]);\n             RunOperators(values[i], -values[i]);"
      },
      {
        "sha": "2eb980e8cde078dc098acf4a88009e96fbad8362",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
        "patch": "@@ -88,7 +88,7 @@ void static RandomScript(CScript &script) {\n     script = CScript();\n     int ops = (InsecureRandRange(10));\n     for (int i=0; i<ops; i++)\n-        script << oplist[InsecureRandRange(sizeof(oplist)/sizeof(oplist[0]))];\n+        script << oplist[InsecureRandRange(std::size(oplist))];\n }\n \n void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {"
      },
      {
        "sha": "98379e91383b14cd45025d64459d74792e1f566f",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e829c9afbf75e930db6c3fe77a269b0af5e7a3ad/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=e829c9afbf75e930db6c3fe77a269b0af5e7a3ad",
        "patch": "@@ -17,8 +17,6 @@\n #include <string>\n #include <vector>\n \n-#define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n-\n /** Used by SanitizeString() */\n enum SafeChars\n {"
      }
    ]
  }
]