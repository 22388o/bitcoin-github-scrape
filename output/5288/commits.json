[
  {
    "sha": "e3cae525382520ddbef92bf86f43eaf0521f4325",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2NhZTUyNTM4MjUyMGRkYmVmOTJiZjg2ZjQzZWFmMDUyMWY0MzI1",
    "commit": {
      "author": {
        "name": "Josh Lehan",
        "email": "krellan@krellan.net",
        "date": "2014-11-16T11:19:23Z"
      },
      "committer": {
        "name": "Josh Lehan",
        "email": "krellan@krellan.net",
        "date": "2015-06-14T09:07:15Z"
      },
      "message": "Added -whiteconnections=<n> option\n\nThis sets aside a number of connection slots for whitelisted peers,\nuseful for ensuring your local users and miners can always get in,\neven if your limit on inbound connections has already been reached.",
      "tree": {
        "sha": "15309359eda1a6cfed1a50ef74c45eaa17a04c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15309359eda1a6cfed1a50ef74c45eaa17a04c09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3cae525382520ddbef92bf86f43eaf0521f4325",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3cae525382520ddbef92bf86f43eaf0521f4325",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3cae525382520ddbef92bf86f43eaf0521f4325",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3cae525382520ddbef92bf86f43eaf0521f4325/comments",
    "author": {
      "login": "Krellan",
      "id": 4563817,
      "node_id": "MDQ6VXNlcjQ1NjM4MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4563817?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Krellan",
      "html_url": "https://github.com/Krellan",
      "followers_url": "https://api.github.com/users/Krellan/followers",
      "following_url": "https://api.github.com/users/Krellan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Krellan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Krellan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Krellan/subscriptions",
      "organizations_url": "https://api.github.com/users/Krellan/orgs",
      "repos_url": "https://api.github.com/users/Krellan/repos",
      "events_url": "https://api.github.com/users/Krellan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Krellan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Krellan",
      "id": 4563817,
      "node_id": "MDQ6VXNlcjQ1NjM4MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4563817?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Krellan",
      "html_url": "https://github.com/Krellan",
      "followers_url": "https://api.github.com/users/Krellan/followers",
      "following_url": "https://api.github.com/users/Krellan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Krellan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Krellan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Krellan/subscriptions",
      "organizations_url": "https://api.github.com/users/Krellan/orgs",
      "repos_url": "https://api.github.com/users/Krellan/repos",
      "events_url": "https://api.github.com/users/Krellan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Krellan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab0ec6790355473e96176ec3c2c2b1564ddb296d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab0ec6790355473e96176ec3c2c2b1564ddb296d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab0ec6790355473e96176ec3c2c2b1564ddb296d"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 68,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9d140c8e25157ca6b8db629798f146b41e1129bd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 10,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3cae525382520ddbef92bf86f43eaf0521f4325/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3cae525382520ddbef92bf86f43eaf0521f4325/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e3cae525382520ddbef92bf86f43eaf0521f4325",
        "patch": "@@ -328,6 +328,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    strUsage += HelpMessageOpt(\"-whiteconnections=<n>\", strprintf(_(\"Reserve this many inbound connections for whitelisted peers (default: %d)\"), 0));\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -723,16 +724,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n     }\n \n-    // Make sure enough file descriptors are available\n-    int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n-    nMaxConnections = GetArg(\"-maxconnections\", 125);\n-    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n-    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n-    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n-        return InitError(_(\"Not enough file descriptors available.\"));\n-    if (nFD - MIN_CORE_FILEDESCRIPTORS < nMaxConnections)\n-        nMaxConnections = nFD - MIN_CORE_FILEDESCRIPTORS;\n-\n     // if using block pruning, then disable txindex\n     if (GetArg(\"-prune\", 0)) {\n         if (GetBoolArg(\"-txindex\", false))\n@@ -743,6 +734,47 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n #endif\n     }\n+    \n+    // Make sure enough file descriptors are available\n+    int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n+    int nUserMaxConnections = GetArg(\"-maxconnections\", 125);\n+    nMaxConnections = std::max(nUserMaxConnections, 0);\n+    int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n+    nWhiteConnections = std::max(nUserWhiteConnections, 0);\n+\n+    if ((mapArgs.count(\"-whitelist\")) || (mapArgs.count(\"-whitebind\"))) {\n+        if (!(mapArgs.count(\"-maxconnections\"))) {\n+            // User is using whitelist feature,\n+            // but did not specify -maxconnections parameter.\n+            // Silently increase the default to compensate,\n+            // so that the whitelist connection reservation feature\n+            // does not inadvertently reduce the default\n+            // inbound connection capacity of the network.\n+            nMaxConnections += nWhiteConnections;\n+        }\n+    } else {\n+        // User not using whitelist feature.\n+        // Silently disable connection reservation,\n+        // for the same reason as above.\n+        nWhiteConnections = 0;\n+    }\n+\n+    // Trim requested connection counts, to fit into system limitations\n+    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n+    int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n+    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n+        return InitError(_(\"Not enough file descriptors available.\"));\n+    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS, nMaxConnections);\n+\n+    if (nMaxConnections < nUserMaxConnections)\n+        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n+\n+    // Connection capacity is prioritized in this order:\n+    // outbound connections (hardcoded to 8),\n+    // then whitelisted connections,\n+    // then non-whitelisted connections get whatever's left (if any).\n+    if ((nWhiteConnections > 0) && (nWhiteConnections >= (nMaxConnections - 8)))\n+        InitWarning(strprintf(_(\"All non-whitelisted incoming connections will be dropped, because -whiteconnections is %d and -maxconnections is only %d.\"), nWhiteConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n@@ -910,6 +942,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Using data directory %s\\n\", strDataDir);\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile().string());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n+    if (nWhiteConnections > 0)\n+        LogPrintf(\"Reserving %i of these connections for whitelisted inbound peers\\n\", nWhiteConnections);\n     std::ostringstream strErrors;\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);"
      },
      {
        "sha": "541318e743759e70a51445ffeb6b40d9ddc9a570",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3cae525382520ddbef92bf86f43eaf0521f4325/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3cae525382520ddbef92bf86f43eaf0521f4325/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e3cae525382520ddbef92bf86f43eaf0521f4325",
        "patch": "@@ -79,6 +79,7 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n+int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n \n vector<CNode*> vNodes;\n@@ -827,6 +828,7 @@ void ThreadSocketHandler()\n                 SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n                 CAddress addr;\n                 int nInbound = 0;\n+                int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n \n                 if (hSocket != INVALID_SOCKET)\n                     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n@@ -846,8 +848,14 @@ void ThreadSocketHandler()\n                     if (nErr != WSAEWOULDBLOCK)\n                         LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n                 }\n-                else if (nInbound >= nMaxConnections - MAX_OUTBOUND_CONNECTIONS)\n+                else if (nInbound >= nMaxInbound)\n                 {\n+                    LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n+                    CloseSocket(hSocket);\n+                }\n+                else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n+                {\n+                    LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n                     CloseSocket(hSocket);\n                 }\n                 else if (CNode::IsBanned(addr) && !whitelisted)\n@@ -861,6 +869,8 @@ void ThreadSocketHandler()\n                     pnode->AddRef();\n                     pnode->fWhitelisted = whitelisted;\n \n+                    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n+\n                     {\n                         LOCK(cs_vNodes);\n                         vNodes.push_back(pnode);"
      },
      {
        "sha": "bd360276abd4ae92d323a0f58de41652bd76846f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3cae525382520ddbef92bf86f43eaf0521f4325/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3cae525382520ddbef92bf86f43eaf0521f4325/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e3cae525382520ddbef92bf86f43eaf0521f4325",
        "patch": "@@ -140,7 +140,20 @@ extern bool fListen;\n extern uint64_t nLocalServices;\n extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n+\n+// The allocation of connections against the maximum allowed (nMaxConnections)\n+// is prioritized as follows:\n+// 1st: Outbound connections (MAX_OUTBOUND_CONNECTIONS)\n+// 2nd: Inbound connections from whitelisted peers (nWhiteConnections)\n+// 3rd: Inbound connections from non-whitelisted peers\n+// Thus, the number of connection slots for the general public to use is:\n+// nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + nWhiteConnections)\n+// Any additional inbound connections beyond limits will be immediately closed\n+\n+/** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n+/** Number of connection slots to reserve for inbound from whitelisted peers */\n+extern int nWhiteConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;"
      }
    ]
  }
]