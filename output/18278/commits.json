[
  {
    "sha": "77e4b0657298c715c835d8d2eb11e173852e6815",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2U0YjA2NTcyOThjNzE1YzgzNWQ4ZDJlYjExZTE3Mzg1MmU2ODE1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-19T20:26:04Z"
      },
      "message": "refactor: Get rid of Wallet::IsWalletFlagSet method\n\nReplace by privateKeysDisabled method to avoid need for GUI to reference\ninternal wallet flags.\n\nAlso remove adjacent WalletModel canGetAddresses wrapper that serves no purpose\nand make Wallet::canGetAddresses non-const so it can be implemented by IPC\nclasses in #10102.",
      "tree": {
        "sha": "545497b4cde5a179ba09fdfc5ecdacfd0e423ecf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/545497b4cde5a179ba09fdfc5ecdacfd0e423ecf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77e4b0657298c715c835d8d2eb11e173852e6815",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77e4b0657298c715c835d8d2eb11e173852e6815",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77e4b0657298c715c835d8d2eb11e173852e6815",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77e4b0657298c715c835d8d2eb11e173852e6815/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 24,
      "deletions": 36
    },
    "files": [
      {
        "sha": "c2d42d78d3eeacc4ad6414e8fefa18b43ef85613",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77e4b0657298c715c835d8d2eb11e173852e6815/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77e4b0657298c715c835d8d2eb11e173852e6815/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=77e4b0657298c715c835d8d2eb11e173852e6815",
        "patch": "@@ -463,8 +463,8 @@ class WalletImpl : public Wallet\n     }\n     unsigned int getConfirmTarget() override { return m_wallet->m_confirm_target; }\n     bool hdEnabled() override { return m_wallet->IsHDEnabled(); }\n-    bool canGetAddresses() const override { return m_wallet->CanGetAddresses(); }\n-    bool IsWalletFlagSet(uint64_t flag) override { return m_wallet->IsWalletFlagSet(flag); }\n+    bool canGetAddresses() override { return m_wallet->CanGetAddresses(); }\n+    bool privateKeysDisabled() override { return m_wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS); }\n     OutputType getDefaultAddressType() override { return m_wallet->m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet->m_default_change_type; }\n     CAmount getDefaultMaxTxFee() override { return m_wallet->m_default_max_tx_fee; }"
      },
      {
        "sha": "56829289b2e93c08805bc3a6b57dc1fe703f8f0e",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77e4b0657298c715c835d8d2eb11e173852e6815/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77e4b0657298c715c835d8d2eb11e173852e6815/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=77e4b0657298c715c835d8d2eb11e173852e6815",
        "patch": "@@ -247,10 +247,10 @@ class Wallet\n     virtual bool hdEnabled() = 0;\n \n     // Return whether the wallet is blank.\n-    virtual bool canGetAddresses() const = 0;\n+    virtual bool canGetAddresses() = 0;\n \n-    // check if a certain wallet flag is set.\n-    virtual bool IsWalletFlagSet(uint64_t flag) = 0;\n+    // Return whether private keys enabled.\n+    virtual bool privateKeysDisabled() = 0;\n \n     // Get default address type.\n     virtual OutputType getDefaultAddressType() = 0;"
      },
      {
        "sha": "2918676c22281762a2b3a8ca7f1ab2ead32a9787",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=77e4b0657298c715c835d8d2eb11e173852e6815",
        "patch": "@@ -1258,7 +1258,7 @@ void BitcoinGUI::updateWalletStatus()\n     }\n     WalletModel * const walletModel = walletView->getWalletModel();\n     setEncryptionStatus(walletModel->getEncryptionStatus());\n-    setHDStatus(walletModel->privateKeysDisabled(), walletModel->wallet().hdEnabled());\n+    setHDStatus(walletModel->wallet().privateKeysDisabled(), walletModel->wallet().hdEnabled());\n }\n #endif // ENABLE_WALLET\n "
      },
      {
        "sha": "c376921b72f35ceea836e24236c35b398120e14a",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=77e4b0657298c715c835d8d2eb11e173852e6815",
        "patch": "@@ -161,7 +161,7 @@ void OverviewPage::setBalance(const interfaces::WalletBalances& balances)\n {\n     int unit = walletModel->getOptionsModel()->getDisplayUnit();\n     m_balances = balances;\n-    if (walletModel->privateKeysDisabled()) {\n+    if (walletModel->wallet().privateKeysDisabled()) {\n         ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n         ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n         ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n@@ -184,7 +184,7 @@ void OverviewPage::setBalance(const interfaces::WalletBalances& balances)\n     // for symmetry reasons also show immature label when the watch-only one is shown\n     ui->labelImmature->setVisible(showImmature || showWatchOnlyImmature);\n     ui->labelImmatureText->setVisible(showImmature || showWatchOnlyImmature);\n-    ui->labelWatchImmature->setVisible(!walletModel->privateKeysDisabled() && showWatchOnlyImmature); // show watch-only immature balance\n+    ui->labelWatchImmature->setVisible(!walletModel->wallet().privateKeysDisabled() && showWatchOnlyImmature); // show watch-only immature balance\n }\n \n // show/hide watch-only labels\n@@ -236,9 +236,9 @@ void OverviewPage::setWalletModel(WalletModel *model)\n \n         connect(model->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &OverviewPage::updateDisplayUnit);\n \n-        updateWatchOnlyLabels(wallet.haveWatchOnly() && !model->privateKeysDisabled());\n+        updateWatchOnlyLabels(wallet.haveWatchOnly() && !model->wallet().privateKeysDisabled());\n         connect(model, &WalletModel::notifyWatchonlyChanged, [this](bool showWatchOnly) {\n-            updateWatchOnlyLabels(showWatchOnly && !walletModel->privateKeysDisabled());\n+            updateWatchOnlyLabels(showWatchOnly && !walletModel->wallet().privateKeysDisabled());\n         });\n     }\n "
      },
      {
        "sha": "180550c5ae49344913c14a7825127dd0e310da5e",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=77e4b0657298c715c835d8d2eb11e173852e6815",
        "patch": "@@ -99,11 +99,11 @@ void ReceiveCoinsDialog::setModel(WalletModel *_model)\n         }\n \n         // Set the button to be enabled or disabled based on whether the wallet can give out new addresses.\n-        ui->receiveButton->setEnabled(model->canGetAddresses());\n+        ui->receiveButton->setEnabled(model->wallet().canGetAddresses());\n \n         // Enable/disable the receive button if the wallet is now able/unable to give out new addresses.\n         connect(model, &WalletModel::canGetAddressesChanged, [this] {\n-            ui->receiveButton->setEnabled(model->canGetAddresses());\n+            ui->receiveButton->setEnabled(model->wallet().canGetAddresses());\n         });\n     }\n }"
      },
      {
        "sha": "7dc3e996d405d170d5038f3d9260e6d9242901f7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=77e4b0657298c715c835d8d2eb11e173852e6815",
        "patch": "@@ -187,7 +187,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         // set default rbf checkbox state\n         ui->optInRBF->setCheckState(Qt::Checked);\n \n-        if (model->privateKeysDisabled()) {\n+        if (model->wallet().privateKeysDisabled()) {\n             ui->sendButton->setText(tr(\"Cr&eate Unsigned\"));\n             ui->sendButton->setToolTip(tr(\"Creates a Partially Signed Bitcoin Transaction (PSBT) for use with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n         }\n@@ -312,14 +312,14 @@ void SendCoinsDialog::on_sendButton_clicked()\n     }\n \n     QString questionString;\n-    if (model->privateKeysDisabled()) {\n+    if (model->wallet().privateKeysDisabled()) {\n         questionString.append(tr(\"Do you want to draft this transaction?\"));\n     } else {\n         questionString.append(tr(\"Are you sure you want to send?\"));\n     }\n \n     questionString.append(\"<br /><span style='font-size:10pt;'>\");\n-    if (model->privateKeysDisabled()) {\n+    if (model->wallet().privateKeysDisabled()) {\n         questionString.append(tr(\"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet.\").arg(PACKAGE_NAME));\n     } else {\n         questionString.append(tr(\"Please, review your transaction.\"));\n@@ -374,8 +374,8 @@ void SendCoinsDialog::on_sendButton_clicked()\n     } else {\n         questionString = questionString.arg(\"<br /><br />\" + formatted.at(0));\n     }\n-    const QString confirmation = model->privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n-    const QString confirmButtonText = model->privateKeysDisabled() ? tr(\"Copy PSBT to clipboard\") : tr(\"Send\");\n+    const QString confirmation = model->wallet().privateKeysDisabled() ? tr(\"Confirm transaction proposal\") : tr(\"Confirm send coins\");\n+    const QString confirmButtonText = model->wallet().privateKeysDisabled() ? tr(\"Copy PSBT to clipboard\") : tr(\"Send\");\n     SendConfirmationDialog confirmationDialog(confirmation, questionString, informative_text, detailed_text, SEND_CONFIRM_DELAY, confirmButtonText, this);\n     confirmationDialog.exec();\n     QMessageBox::StandardButton retval = static_cast<QMessageBox::StandardButton>(confirmationDialog.result());\n@@ -387,7 +387,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     }\n \n     bool send_failure = false;\n-    if (model->privateKeysDisabled()) {\n+    if (model->wallet().privateKeysDisabled()) {\n         CMutableTransaction mtx = CMutableTransaction{*(currentTransaction.getWtx())};\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n@@ -562,7 +562,7 @@ void SendCoinsDialog::setBalance(const interfaces::WalletBalances& balances)\n     if(model && model->getOptionsModel())\n     {\n         CAmount balance = balances.balance;\n-        if (model->privateKeysDisabled()) {\n+        if (model->wallet().privateKeysDisabled()) {\n             balance = balances.watch_only_balance;\n             ui->labelBalanceName->setText(tr(\"Watch-only balance:\"));\n         }\n@@ -652,7 +652,7 @@ void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n     }\n \n     // Include watch-only for wallets without private key\n-    coin_control.fAllowWatchOnly = model->privateKeysDisabled();\n+    coin_control.fAllowWatchOnly = model->wallet().privateKeysDisabled();\n \n     // Calculate available amount to send.\n     CAmount amount = model->wallet().getAvailableBalance(coin_control);\n@@ -707,7 +707,7 @@ void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n     ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n     ctrl.m_signal_bip125_rbf = ui->optInRBF->isChecked();\n     // Include watch-only for wallets without private key\n-    ctrl.fAllowWatchOnly = model->privateKeysDisabled();\n+    ctrl.fAllowWatchOnly = model->wallet().privateKeysDisabled();\n }\n \n void SendCoinsDialog::updateSmartFeeLabel()"
      },
      {
        "sha": "642dce4ba93f3d441e77a044035818025ae15ab1",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=77e4b0657298c715c835d8d2eb11e173852e6815",
        "patch": "@@ -23,7 +23,7 @@\n #include <ui_interface.h>\n #include <util/system.h> // for GetBoolArg\n #include <wallet/coincontrol.h>\n-#include <wallet/wallet.h>\n+#include <wallet/wallet.h> // for CRecipient\n \n #include <stdint.h>\n \n@@ -184,7 +184,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         std::string strFailReason;\n \n         auto& newTx = transaction.getWtx();\n-        newTx = m_wallet->createTransaction(vecSend, coinControl, !privateKeysDisabled() /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n+        newTx = m_wallet->createTransaction(vecSend, coinControl, !wallet().privateKeysDisabled() /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n         transaction.setTransactionFee(nFeeRequired);\n         if (fSubtractFeeFromAmount && newTx)\n             transaction.reassignAmounts(nChangePosRet);\n@@ -488,7 +488,7 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n          return false;\n     }\n \n-    const bool create_psbt = privateKeysDisabled();\n+    const bool create_psbt = m_wallet->privateKeysDisabled();\n \n     // allow a user based fee verification\n     QString questionString = create_psbt ? tr(\"Do you want to draft a transaction with fee increase?\") : tr(\"Do you want to increase the fee?\");\n@@ -558,16 +558,6 @@ bool WalletModel::isWalletEnabled()\n    return !gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET);\n }\n \n-bool WalletModel::privateKeysDisabled() const\n-{\n-    return m_wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n-}\n-\n-bool WalletModel::canGetAddresses() const\n-{\n-    return m_wallet->canGetAddresses();\n-}\n-\n QString WalletModel::getWalletName() const\n {\n     return QString::fromStdString(m_wallet->getWalletName());"
      },
      {
        "sha": "7936014af9455e5ccd7d4f3af8153b30a5901caa",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77e4b0657298c715c835d8d2eb11e173852e6815/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=77e4b0657298c715c835d8d2eb11e173852e6815",
        "patch": "@@ -140,8 +140,6 @@ class WalletModel : public QObject\n     bool bumpFee(uint256 hash, uint256& new_hash);\n \n     static bool isWalletEnabled();\n-    bool privateKeysDisabled() const;\n-    bool canGetAddresses() const;\n \n     interfaces::Node& node() const { return m_node; }\n     interfaces::Wallet& wallet() const { return *m_wallet; }"
      }
    ]
  },
  {
    "sha": "1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzJhYjFhNmQyOWYyYzZjMDY1ZGFlNGY0YTRlMmFkMTI4NjMxMWIz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-19T20:26:04Z"
      },
      "message": "refactor: Rename Node::disconnect methods\n\nAvoid overloading method name to work more easily with IPC framework",
      "tree": {
        "sha": "5bb8f9e4a1d0a97323b50ff91b01f6e061eab257",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bb8f9e4a1d0a97323b50ff91b01f6e061eab257"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77e4b0657298c715c835d8d2eb11e173852e6815",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77e4b0657298c715c835d8d2eb11e173852e6815",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77e4b0657298c715c835d8d2eb11e173852e6815"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "25e5b0f7e4a55ec857a87d054f65922ee0a470a3",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3",
        "patch": "@@ -152,14 +152,14 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n-    bool disconnect(const CNetAddr& net_addr) override\n+    bool disconnectByAddress(const CNetAddr& net_addr) override\n     {\n         if (m_context.connman) {\n             return m_context.connman->DisconnectNode(net_addr);\n         }\n         return false;\n     }\n-    bool disconnect(NodeId id) override\n+    bool disconnectById(NodeId id) override\n     {\n         if (m_context.connman) {\n             return m_context.connman->DisconnectNode(id);"
      },
      {
        "sha": "a0466bd297aba0d0db5c06af2b254c57b47a9129",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3",
        "patch": "@@ -124,10 +124,10 @@ class Node\n     virtual bool unban(const CSubNet& ip) = 0;\n \n     //! Disconnect node by address.\n-    virtual bool disconnect(const CNetAddr& net_addr) = 0;\n+    virtual bool disconnectByAddress(const CNetAddr& net_addr) = 0;\n \n     //! Disconnect node by id.\n-    virtual bool disconnect(NodeId id) = 0;\n+    virtual bool disconnectById(NodeId id) = 0;\n \n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;"
      },
      {
        "sha": "0ff0bb323ea00b49b50946e69d36611654d984ae",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3",
        "patch": "@@ -1191,7 +1191,7 @@ void RPCConsole::disconnectSelectedNode()\n         // Get currently selected peer address\n         NodeId id = nodes.at(i).data().toLongLong();\n         // Find the node, disconnect it and clear the selected node\n-        if(m_node.disconnect(id))\n+        if(m_node.disconnectById(id))\n             clearSelectedNode();\n     }\n }\n@@ -1216,7 +1216,7 @@ void RPCConsole::banSelectedNode(int bantime)\n         const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n         if (stats) {\n             m_node.ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n-            m_node.disconnect(stats->nodeStats.addr);\n+            m_node.disconnectByAddress(stats->nodeStats.addr);\n         }\n     }\n     clearSelectedNode();"
      }
    ]
  },
  {
    "sha": "6ceb21909ce66b7b4762a855889acd46bb6b77f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2ViMjE5MDljZTY2YjdiNDc2MmE4NTU4ODlhY2Q0NmJiNmI3N2Yz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-02-26T21:05:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-19T20:26:04Z"
      },
      "message": "refactor: Rename Chain::Notifications methods to be consistent with other interfaces methods\n\nThis also simplifies #10102 removing overrides needed to deal with inconsistent\ncase convention",
      "tree": {
        "sha": "3cedbd0f3f73aca226bb964316b5110d3b0506f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cedbd0f3f73aca226bb964316b5110d3b0506f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ceb21909ce66b7b4762a855889acd46bb6b77f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ceb21909ce66b7b4762a855889acd46bb6b77f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ceb21909ce66b7b4762a855889acd46bb6b77f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ceb21909ce66b7b4762a855889acd46bb6b77f3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2ab1a6d29f2c6c065dae4f4a4e2ad1286311b3"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 29,
      "deletions": 29
    },
    "files": [
      {
        "sha": "da11c63883b139d677fc56b310153129cb129f9a",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ceb21909ce66b7b4762a855889acd46bb6b77f3/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ceb21909ce66b7b4762a855889acd46bb6b77f3/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=6ceb21909ce66b7b4762a855889acd46bb6b77f3",
        "patch": "@@ -166,25 +166,25 @@ class NotificationsHandlerImpl : public Handler, CValidationInterface\n     }\n     void TransactionAddedToMempool(const CTransactionRef& tx) override\n     {\n-        m_notifications->TransactionAddedToMempool(tx);\n+        m_notifications->transactionAddedToMempool(tx);\n     }\n     void TransactionRemovedFromMempool(const CTransactionRef& tx) override\n     {\n-        m_notifications->TransactionRemovedFromMempool(tx);\n+        m_notifications->transactionRemovedFromMempool(tx);\n     }\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {\n-        m_notifications->BlockConnected(*block, index->nHeight);\n+        m_notifications->blockConnected(*block, index->nHeight);\n     }\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index) override\n     {\n-        m_notifications->BlockDisconnected(*block, index->nHeight);\n+        m_notifications->blockDisconnected(*block, index->nHeight);\n     }\n     void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n     {\n-        m_notifications->UpdatedBlockTip();\n+        m_notifications->updatedBlockTip();\n     }\n-    void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->ChainStateFlushed(locator); }\n+    void ChainStateFlushed(const CBlockLocator& locator) override { m_notifications->chainStateFlushed(locator); }\n     Chain& m_chain;\n     Chain::Notifications* m_notifications;\n };\n@@ -366,7 +366,7 @@ class ChainImpl : public Chain\n     {\n         LOCK2(::cs_main, ::mempool.cs);\n         for (const CTxMemPoolEntry& entry : ::mempool.mapTx) {\n-            notifications.TransactionAddedToMempool(entry.GetSharedTx());\n+            notifications.transactionAddedToMempool(entry.GetSharedTx());\n         }\n     }\n     NodeContext& m_node;"
      },
      {
        "sha": "dc0dcfb0d45cfd25db55c68e8b79053dfcd8bb71",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ceb21909ce66b7b4762a855889acd46bb6b77f3/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ceb21909ce66b7b4762a855889acd46bb6b77f3/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=6ceb21909ce66b7b4762a855889acd46bb6b77f3",
        "patch": "@@ -217,12 +217,12 @@ class Chain\n     {\n     public:\n         virtual ~Notifications() {}\n-        virtual void TransactionAddedToMempool(const CTransactionRef& tx) {}\n-        virtual void TransactionRemovedFromMempool(const CTransactionRef& ptx) {}\n-        virtual void BlockConnected(const CBlock& block, int height) {}\n-        virtual void BlockDisconnected(const CBlock& block, int height) {}\n-        virtual void UpdatedBlockTip() {}\n-        virtual void ChainStateFlushed(const CBlockLocator& locator) {}\n+        virtual void transactionAddedToMempool(const CTransactionRef& tx) {}\n+        virtual void transactionRemovedFromMempool(const CTransactionRef& ptx) {}\n+        virtual void blockConnected(const CBlock& block, int height) {}\n+        virtual void blockDisconnected(const CBlock& block, int height) {}\n+        virtual void updatedBlockTip() {}\n+        virtual void chainStateFlushed(const CBlockLocator& locator) {}\n     };\n \n     //! Register handler for notifications.\n@@ -245,7 +245,7 @@ class Chain\n     //! Current RPC serialization flags.\n     virtual int rpcSerializationFlags() = 0;\n \n-    //! Synchronously send TransactionAddedToMempool notifications about all\n+    //! Synchronously send transactionAddedToMempool notifications about all\n     //! current mempool transactions to the specified handler and return after\n     //! the last one is sent. These notifications aren't coordinated with async\n     //! notifications sent by handleNotifications, so out of date async"
      },
      {
        "sha": "922b50f5e232630ab22bc4f927b95e7a7329cbc1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ceb21909ce66b7b4762a855889acd46bb6b77f3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ceb21909ce66b7b4762a855889acd46bb6b77f3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6ceb21909ce66b7b4762a855889acd46bb6b77f3",
        "patch": "@@ -344,7 +344,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n     return false;\n }\n \n-void CWallet::ChainStateFlushed(const CBlockLocator& loc)\n+void CWallet::chainStateFlushed(const CBlockLocator& loc)\n {\n     WalletBatch batch(*database);\n     batch.WriteBestBlock(loc);\n@@ -1089,7 +1089,7 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmatio\n     MarkInputsDirty(ptx);\n }\n \n-void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n+void CWallet::transactionAddedToMempool(const CTransactionRef& ptx) {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n     CWalletTx::Confirmation confirm(CWalletTx::Status::UNCONFIRMED, /* block_height */ 0, {}, /* nIndex */ 0);\n@@ -1101,15 +1101,15 @@ void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n     }\n }\n \n-void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+void CWallet::transactionRemovedFromMempool(const CTransactionRef &ptx) {\n     LOCK(cs_wallet);\n     auto it = mapWallet.find(ptx->GetHash());\n     if (it != mapWallet.end()) {\n         it->second.fInMempool = false;\n     }\n }\n \n-void CWallet::BlockConnected(const CBlock& block, int height)\n+void CWallet::blockConnected(const CBlock& block, int height)\n {\n     const uint256& block_hash = block.GetHash();\n     auto locked_chain = chain().lock();\n@@ -1120,11 +1120,11 @@ void CWallet::BlockConnected(const CBlock& block, int height)\n     for (size_t index = 0; index < block.vtx.size(); index++) {\n         CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, block_hash, index);\n         SyncTransaction(block.vtx[index], confirm);\n-        TransactionRemovedFromMempool(block.vtx[index]);\n+        transactionRemovedFromMempool(block.vtx[index]);\n     }\n }\n \n-void CWallet::BlockDisconnected(const CBlock& block, int height)\n+void CWallet::blockDisconnected(const CBlock& block, int height)\n {\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n@@ -1141,7 +1141,7 @@ void CWallet::BlockDisconnected(const CBlock& block, int height)\n     }\n }\n \n-void CWallet::UpdatedBlockTip()\n+void CWallet::updatedBlockTip()\n {\n     m_best_block_time = GetTime();\n }\n@@ -3875,7 +3875,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n \n         auto locked_chain = chain.lock();\n-        walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n+        walletInstance->chainStateFlushed(locked_chain->getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n         error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile);\n@@ -4056,7 +4056,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n                 return nullptr;\n             }\n         }\n-        walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n+        walletInstance->chainStateFlushed(locked_chain->getTipLocator());\n         walletInstance->database->IncrementUpdateCounter();\n \n         // Restore wallet transaction metadata after -zapwallettxes=1"
      },
      {
        "sha": "75fd14a80e1618bdd77a163f4bbd14780c811115",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ceb21909ce66b7b4762a855889acd46bb6b77f3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ceb21909ce66b7b4762a855889acd46bb6b77f3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6ceb21909ce66b7b4762a855889acd46bb6b77f3",
        "patch": "@@ -875,10 +875,10 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     void LoadToWallet(CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const CBlock& block, int height) override;\n-    void BlockDisconnected(const CBlock& block, int height) override;\n-    void UpdatedBlockTip() override;\n+    void transactionAddedToMempool(const CTransactionRef& tx) override;\n+    void blockConnected(const CBlock& block, int height) override;\n+    void blockDisconnected(const CBlock& block, int height) override;\n+    void updatedBlockTip() override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n \n     struct ScanResult {\n@@ -897,7 +897,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n         uint256 last_failed_block;\n     };\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n-    void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n+    void transactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();\n     struct Balance {\n@@ -1033,7 +1033,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetChange(const CTransaction& tx) const;\n-    void ChainStateFlushed(const CBlockLocator& loc) override;\n+    void chainStateFlushed(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);"
      }
    ]
  },
  {
    "sha": "96dfe5ced64979e51649d20555aa182defc80119",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmRmZTVjZWQ2NDk3OWU1MTY0OWQyMDU1NWFhMTgyZGVmYzgwMTE5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-19T20:26:04Z"
      },
      "message": "refactor: Change Chain::broadcastTransaction param order\n\nMake output argument last argument so it works more easily with IPC framework\nin #10102, and for consistency with other methods",
      "tree": {
        "sha": "0aa7daa25668b6895ff19a582958c5c63aa6f0cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aa7daa25668b6895ff19a582958c5c63aa6f0cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96dfe5ced64979e51649d20555aa182defc80119",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dfe5ced64979e51649d20555aa182defc80119",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96dfe5ced64979e51649d20555aa182defc80119",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dfe5ced64979e51649d20555aa182defc80119/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ceb21909ce66b7b4762a855889acd46bb6b77f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ceb21909ce66b7b4762a855889acd46bb6b77f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ceb21909ce66b7b4762a855889acd46bb6b77f3"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9dc0d37cd92427f253fe375108cd34a7365fc116",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96dfe5ced64979e51649d20555aa182defc80119/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96dfe5ced64979e51649d20555aa182defc80119/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=96dfe5ced64979e51649d20555aa182defc80119",
        "patch": "@@ -278,7 +278,10 @@ class ChainImpl : public Chain\n         auto it = ::mempool.GetIter(txid);\n         return it && (*it)->GetCountWithDescendants() > 1;\n     }\n-    bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) override\n+    bool broadcastTransaction(const CTransactionRef& tx,\n+        const CAmount& max_tx_fee,\n+        bool relay,\n+        std::string& err_string) override\n     {\n         const TransactionError err = BroadcastTransaction(m_node, tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n         // Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures."
      },
      {
        "sha": "caefa87e1179b0b50618f61cd2f8d4a5eda32c3c",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96dfe5ced64979e51649d20555aa182defc80119/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96dfe5ced64979e51649d20555aa182defc80119/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=96dfe5ced64979e51649d20555aa182defc80119",
        "patch": "@@ -154,7 +154,10 @@ class Chain\n     //! Transaction is added to memory pool, if the transaction fee is below the\n     //! amount specified by max_tx_fee, and broadcast to all peers if relay is set to true.\n     //! Return false if the transaction could not be added due to the fee or for another reason.\n-    virtual bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) = 0;\n+    virtual bool broadcastTransaction(const CTransactionRef& tx,\n+        const CAmount& max_tx_fee,\n+        bool relay,\n+        std::string& err_string) = 0;\n \n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;"
      },
      {
        "sha": "9a972febab12cde4992596c81efab09848cbf9a7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96dfe5ced64979e51649d20555aa182defc80119/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96dfe5ced64979e51649d20555aa182defc80119/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=96dfe5ced64979e51649d20555aa182defc80119",
        "patch": "@@ -1785,7 +1785,7 @@ bool CWalletTx::SubmitMemoryPoolAndRelay(std::string& err_string, bool relay)\n     // Irrespective of the failure reason, un-marking fInMempool\n     // out-of-order is incorrect - it should be unmarked when\n     // TransactionRemovedFromMempool fires.\n-    bool ret = pwallet->chain().broadcastTransaction(tx, err_string, pwallet->m_default_max_tx_fee, relay);\n+    bool ret = pwallet->chain().broadcastTransaction(tx, pwallet->m_default_max_tx_fee, relay, err_string);\n     fInMempool |= ret;\n     return ret;\n }"
      }
    ]
  },
  {
    "sha": "1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGNhOWRjNGM3NzJmYTBhNGVjNTJjNGQ4OGI3Y2QzZDI0M2FlYTdi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-19T20:26:04Z"
      },
      "message": "refactor: Change createWallet, fillPSBT argument order\n\nMove output arguments after input arguments for consistency with other methods,\nand to work more easily with IPC framework in #10102",
      "tree": {
        "sha": "4b7b9bfbf86e7b77674f26145d504be993357522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b7b9bfbf86e7b77674f26145d504be993357522"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96dfe5ced64979e51649d20555aa182defc80119",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dfe5ced64979e51649d20555aa182defc80119",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96dfe5ced64979e51649d20555aa182defc80119"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 18,
      "deletions": 19
    },
    "files": [
      {
        "sha": "905173d20b7c1d360fa8ab4bad11abd1513e4529",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
        "patch": "@@ -262,12 +262,11 @@ class NodeImpl : public Node\n     {\n         return MakeWallet(LoadWallet(*m_context.chain, name, error, warnings));\n     }\n-    WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::unique_ptr<Wallet>& result) override\n+    std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, WalletCreationStatus& status) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        WalletCreationStatus status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n-        result = MakeWallet(wallet);\n-        return status;\n+        status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n+        return MakeWallet(wallet);\n     }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {"
      },
      {
        "sha": "53a20886cd16bd9f14e28ff754154e50eea5c3b4",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
        "patch": "@@ -204,7 +204,7 @@ class Node\n     virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) = 0;\n \n     //! Create a wallet from file\n-    virtual WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::unique_ptr<Wallet>& result) = 0;\n+    virtual std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, WalletCreationStatus& status) = 0;\n \n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;"
      },
      {
        "sha": "c3a62cf73dce7f56dbf21fd3cd64953e8ae1a11f",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
        "patch": "@@ -352,11 +352,11 @@ class WalletImpl : public Wallet\n         }\n         return {};\n     }\n-    TransactionError fillPSBT(PartiallySignedTransaction& psbtx,\n-        bool& complete,\n-        int sighash_type = 1 /* SIGHASH_ALL */,\n-        bool sign = true,\n-        bool bip32derivs = false) const override\n+    TransactionError fillPSBT(int sighash_type,\n+        bool sign,\n+        bool bip32derivs,\n+        PartiallySignedTransaction& psbtx,\n+        bool& complete) override\n     {\n         return m_wallet->FillPSBT(psbtx, complete, sighash_type, sign, bip32derivs);\n     }"
      },
      {
        "sha": "487a7c3a5a704a06c1a745ca61bffc4d225f5785",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
        "patch": "@@ -193,11 +193,11 @@ class Wallet\n         int& num_blocks) = 0;\n \n     //! Fill PSBT.\n-    virtual TransactionError fillPSBT(PartiallySignedTransaction& psbtx,\n-        bool& complete,\n-        int sighash_type = 1 /* SIGHASH_ALL */,\n-        bool sign = true,\n-        bool bip32derivs = false) const = 0;\n+    virtual TransactionError fillPSBT(int sighash_type,\n+        bool sign,\n+        bool bip32derivs,\n+        PartiallySignedTransaction& psbtx,\n+        bool& complete) = 0;\n \n     //! Get balances.\n     virtual WalletBalances getBalances() = 0;"
      },
      {
        "sha": "a8c82aaf6c48a43997e6a8e3e8df5c91f0af499a",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
        "patch": "@@ -391,7 +391,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         CMutableTransaction mtx = CMutableTransaction{*(currentTransaction.getWtx())};\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n-        const TransactionError err = model->wallet().fillPSBT(psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+        const TransactionError err = model->wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete);\n         assert(!complete);\n         assert(err == TransactionError::OK);\n         // Serialize the PSBT"
      },
      {
        "sha": "233c0ab6be52068a7814785188607e66f0871deb",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
        "patch": "@@ -218,8 +218,8 @@ void CreateWalletActivity::createWallet()\n     }\n \n     QTimer::singleShot(500, worker(), [this, name, flags] {\n-        std::unique_ptr<interfaces::Wallet> wallet;\n-        WalletCreationStatus status = node().createWallet(m_passphrase, flags, name, m_error_message, m_warning_message, wallet);\n+        WalletCreationStatus status;\n+        std::unique_ptr<interfaces::Wallet> wallet = node().createWallet(m_passphrase, flags, name, m_error_message, m_warning_message, status);\n \n         if (status == WalletCreationStatus::SUCCESS) m_wallet_model = m_wallet_controller->getOrCreateWallet(std::move(wallet));\n "
      },
      {
        "sha": "94e7a05e40161610d4f5833a2da4315d62161859",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
        "patch": "@@ -526,7 +526,7 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n     if (create_psbt) {\n         PartiallySignedTransaction psbtx(mtx);\n         bool complete = false;\n-        const TransactionError err = wallet().fillPSBT(psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+        const TransactionError err = wallet().fillPSBT(SIGHASH_ALL, false /* sign */, true /* bip32derivs */, psbtx, complete);\n         if (err != TransactionError::OK || complete) {\n             QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Can't draft transaction.\"));\n             return false;"
      }
    ]
  },
  {
    "sha": "3dc27a15242a22b5301904375e5880372e9b7f4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGMyN2ExNTI0MmEyMmI1MzAxOTA0Mzc1ZTU4ODAzNzJlOWI3ZjRk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-06T13:47:16Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-19T20:26:04Z"
      },
      "message": "doc: Add internal interface conventions to developer notes",
      "tree": {
        "sha": "2638c42337b6fd9c882a3e401e5ac18fbd7c485a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2638c42337b6fd9c882a3e401e5ac18fbd7c485a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dc27a15242a22b5301904375e5880372e9b7f4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dc27a15242a22b5301904375e5880372e9b7f4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dc27a15242a22b5301904375e5880372e9b7f4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dc27a15242a22b5301904375e5880372e9b7f4d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1dca9dc4c772fa0a4ec52c4d88b7cd3d243aea7b"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 122,
      "deletions": 0
    },
    "files": [
      {
        "sha": "da07080724b417ae8679bfd5d91fb0d65052a466",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dc27a15242a22b5301904375e5880372e9b7f4d/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dc27a15242a22b5301904375e5880372e9b7f4d/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=3dc27a15242a22b5301904375e5880372e9b7f4d",
        "patch": "@@ -43,6 +43,7 @@ Developer Notes\n         - [Suggestions and examples](#suggestions-and-examples)\n     - [Release notes](#release-notes)\n     - [RPC interface guidelines](#rpc-interface-guidelines)\n+    - [Internal interface guidelines](#internal-interface-guidelines)\n \n <!-- markdown-toc end -->\n \n@@ -1100,3 +1101,124 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n   timestamps in the documentation.\n \n   - *Rationale*: User-facing consistency.\n+\n+Internal interface guidelines\n+-----------------------------\n+\n+Internal interfaces between parts of the codebase that are meant to be\n+independent (node, wallet, GUI), are defined in\n+[`src/interfaces/`](../src/interfaces/). The main interface classes defined\n+there are [`interfaces::Chain`](../src/interfaces/chain.h), used by wallet to\n+access the node's latest chain state,\n+[`interfaces::Node`](../src/interfaces/node.h), used by the GUI to control the\n+node, and [`interfaces::Wallet`](../src/interfaces/wallet.h), used by the GUI\n+to control an individual wallet. There are also more specialized interface\n+types like [`interfaces::Handler`](../src/interfaces/handler.h)\n+[`interfaces::ChainClient`](../src/interfaces/chain.h) passed to and from\n+various interface methods.\n+\n+Interface classes are written in a particular style so node, wallet, and GUI\n+code doesn't need to run in the same process, and so the class declarations\n+work more easily with tools and libraries supporting interprocess\n+communication:\n+\n+- Interface classes should be abstract and have methods that are [pure\n+  virtual](https://en.cppreference.com/w/cpp/language/abstract_class). This\n+  allows multiple implementations to inherit from the same interface class,\n+  particularly so one implementation can execute functionality in the local\n+  process, and other implementations can forward calls to remote processes.\n+\n+- Interface method definitions should wrap existing functionality instead of\n+  implementing new functionality. Any substantial new node or wallet\n+  functionality should be implemented in [`src/node/`](../src/node/) or\n+  [`src/wallet/`](../src/wallet/) and just exposed in\n+  [`src/interfaces/`](../src/interfaces/) instead of being implemented there,\n+  so it can be more modular and accessible to unit tests.\n+\n+- Interface method parameter and return types should either be serializable or\n+  be other interface classes. Interface methods shouldn't pass references to\n+  objects that can't be serialized or accessed from another process.\n+\n+  Examples:\n+\n+  ```c++\n+  // Good: takes string argument and returns interface class pointer\n+  virtual unique_ptr<interfaces::Wallet> loadWallet(std::string filename) = 0;\n+\n+  // Bad: returns CWallet reference that can't be used from another process\n+  virtual CWallet& loadWallet(std::string filename) = 0;\n+  ```\n+\n+  ```c++\n+  // Good: accepts and returns primitive types\n+  virtual bool findBlock(const uint256& hash, int& out_height, int64_t& out_time) = 0;\n+\n+  // Bad: returns pointer to internal node in a linked list inaccessible to\n+  // other processes\n+  virtual const CBlockIndex* findBlock(const uint256& hash) = 0;\n+  ```\n+\n+  ```c++\n+  // Good: takes plain callback type and returns interface pointer\n+  using TipChangedFn = std::function<void(int block_height, int64_t block_time)>;\n+  virtual std::unique_ptr<interfaces::Handler> handleTipChanged(TipChangedFn fn) = 0;\n+\n+  // Bad: returns boost connection specific to local process\n+  using TipChangedFn = std::function<void(int block_height, int64_t block_time)>;\n+  virtual boost::signals2::scoped_connection connectTipChanged(TipChangedFn fn) = 0;\n+  ```\n+\n+- For consistency and friendliness to code generation tools, interface method\n+  input and inout parameters should be ordered first and output parameters\n+  should come last.\n+\n+  Example:\n+\n+  ```c++\n+  // Good: error output param is last\n+  virtual bool broadcastTransaction(const CTransactionRef& tx, CAmount max_fee, std::string& error) = 0;\n+\n+  // Bad: error output param is between input params\n+  virtual bool broadcastTransaction(const CTransactionRef& tx, std::string& error, CAmount max_fee) = 0;\n+  ```\n+\n+- For friendliness to code generation tools, interface methods should not be\n+  overloaded:\n+\n+  Example:\n+\n+  ```c++\n+  // Good: method names are unique\n+  virtual bool disconnectByAddress(const CNetAddr& net_addr) = 0;\n+  virtual bool disconnectById(NodeId id) = 0;\n+\n+  // Bad: methods are overloaded by type\n+  virtual bool disconnect(const CNetAddr& net_addr) = 0;\n+  virtual bool disconnect(NodeId id) = 0;\n+  ```\n+\n+- For consistency and friendliness to code generation tools, interface method\n+  names should be `lowerCamelCase` and standalone function names should be\n+  `UpperCamelCase`.\n+\n+  Examples:\n+\n+  ```c++\n+  // Good: lowerCamelCase method name\n+  virtual void blockConnected(const CBlock& block, int height) = 0;\n+\n+  // Bad: uppercase class method\n+  virtual void BlockConnected(const CBlock& block, int height) = 0;\n+  ```\n+\n+  ```c++\n+  // Good: UpperCamelCase standalone function name\n+  std::unique_ptr<Node> MakeNode(LocalInit& init);\n+\n+  // Bad: lowercase standalone function\n+  std::unique_ptr<Node> makeNode(LocalInit& init);\n+  ```\n+\n+  Note: This last convention isn't generally followed outside of\n+  [`src/interfaces/`](../src/interfaces/), though it did come up for discussion\n+  before in [#14635](https://github.com/bitcoin/bitcoin/pull/14635)."
      }
    ]
  }
]