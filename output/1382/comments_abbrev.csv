TheBlueMatt,2012-05-22T23:43:18Z,"I really dont see the point in this, if we request a block, and a node lags behind due to some network congestion, and then we get the block later, there is no reason to drop that peer, if the peer is constantly lagging behind, we may want to not request blocks from that peer, but dropping them could kill eg mobile clients.\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-5861884,5861884,
laanwj,2012-05-23T05:10:28Z,NACK.\n\nOnly disconnect peers that really misbehave. Any disconnect rule that you add has potential to wreck the network in some (maybe unforseen) circumstances. We should be really careful.\n,https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-5865333,5865333,
rebroad,2012-05-24T20:31:44Z,"@TheBlueMatt @laanwj Please can you see Issue #1120 - do we really want to continue having nodes sending thousands of duplicate blocks to each other? If we don't disconnect the peer, then what are the alternative solutions to this problem? By the way, in case it wasn't obvious, this is relating to when a peer is catching up and is more than a thousand blocks behind the best block.\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-5916764,5916764,
csyangchen,2012-06-13T13:29:16Z,"Duplicated blocks (and tx as well!) are probably caused from client sending `getdata` multiple times in the first place. It occurs when the workload is high, typical situation during initial download. The operation turnaround time might exceed the request resend timeout, triggering the duplicated requests. \n\nSo to proof the node intentionally send duplicated blocks need to do per node based trac",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-6300881,6300881,
rebroad,2012-07-03T13:11:40Z,"@csyangchen this isn't meant to disconnect to due misbehavoiur, but simply to reduce wasted bandwidth between two nodes. This is a problem still occuring in 0.6.3 with a good internet connection, so unless someone has an alternative suggestion for fixing this, I would appreciate some ACKs please.\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-6733822,6733822,
gmaxwell,2012-07-25T18:13:37Z,I'm opposed to disconnecting peers for expected behavior. \n,https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-7257028,7257028,
rebroad,2012-07-26T10:12:05Z,@gmaxwell what do you suggest instead of disconnecting then? Or do you propose that we continue to waste bandwidth as is currently the case?\n,https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-7273877,7273877,
gmaxwell,2012-07-26T14:02:28Z,"I don't completely understand the nature of the wasteful behavior and I can't reproduce it in 0.6.3, so I'm unable to make a suggestion.  I'm just reasonably confident that disconnecting peers for expected behavior is not the right thing to do (and among other problems, poses partitioning risk).\n\nThe right thing do to, of course, would be to avoid bad behavior in the first place. Once it's avoid",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-7278391,7278391,
jgarzik,2012-08-01T16:41:03Z,"This targets one highly specific flood, while ignoring all the other flooding possible within the protocol.  An attacker can just pick another message to flood, including messages we don't notice, but do unpack-before-ignoring.\n\nGiven the other two naks, closing.\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-7432535,7432535,
rebroad,2012-09-05T10:26:21Z,"Looking at the closing comment, I think this pull request has been misunderstood. It is not for protection against any sort of attack. The duplicate blocks happen naturally due to the way bitcoin works, due to the set timeouts, and the delays in the network due to processing. Given that there is no current way for a node to say ""please stop sending me blocks"" to another node that is responding to ",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-8293726,8293726,
exarkun,2012-11-25T03:37:46Z,"Just getting started with bitcoin, trying to initialize a wallet, and after days of waiting to catch up, it seems to me the issue being described here is real and some fix would be quite beneficial.  By way of providing some real world data, here are some stats collected from my client's debug log:\n\n```\nexarkun@top:~/.bitcoin$ grep ""already have block"" debug.log  | wc -l\n383867\nexarkun@top:~/",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10687242,10687242,
rebroad,2012-11-25T11:37:32Z,"I'm glad to see other people confirming this issue. What other options are there other than disconnecting the peer? If peer's utilised more than one connection, then it would be possible to disconnect the transfer without disconnecting the peer, but I'm not sure it's worth coding this just for that reason.\n\nThe problem is exacerbated by the fact that during block validation the peers stops respo",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692534,10692534,
sipa,2012-11-25T11:39:50Z,"The solution is to remember which block was requested from which peer, and not ask it again (unless the old one is really lagging).\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692550,10692550,
rebroad,2012-11-25T11:41:47Z,"@sipa how do you tell if the ""old one is really lagging""?\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692568,10692568,
sipa,2012-11-25T11:48:16Z,"The core of the problem here is that we have two mechanisms:\n  1) when we think we don't have all blocks, pick a peer to download them all from\n  2) when a new block is announced and we don't have its parents, ask them from the peer who sent it\n\nThe problem is that these two mechanisms don't place nicely together, and when a new block is found during initial syncup, you end up doing both at on",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692606,10692606,
rebroad,2012-11-25T11:54:26Z,"@sipa No one is suggesting disconnecting a peer for doing what is asked from them. We are suggesting disconnecting peers which are sending _repeatedly and in a sustained fashion_ blocks which are not required.\n\nYou also haven't defined how to determine when a ""peer seems unresponsive"". I posit, that this will always be a guess, and therefore unreliable. The simplest solution IMHO is to simply en",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692656,10692656,
sipa,2012-11-25T12:02:29Z,"I don't think you get it. Peers only send blocks to us, because we ASK them to send us blocks. There is no code that just sends blocks - it's always in response to a getdata. If we receive the same block twice, it is because we asked it twice. That is our fault, not theirs. The problem is that we ask for blocks both as a sync mechanism, and in response to receiving an orphan.\n\nAs to determining ",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692729,10692729,
rebroad,2012-11-25T12:14:30Z,"@sipa I am aware that peers should only send blocks they've been asked for. There are already timeouts implemented, but these will always be arbitrary and only a guess to determine if a peer is lagging or not. They are therefore not reliable, and IMHO shouldn't be relied on. The problem cannot be fixed by tweaking timeouts, and if timeouts are set too long, then it will cause other problems too.\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692817,10692817,
sipa,2012-11-25T12:20:33Z,"Of course it is always a guess. You cannot know which nodes are good and which aren't for sure.\n\nBut this patch does not fix the problem. The problem is that we request the same block multiple times in certain cases, even when there is no reason to assume the peer is lagging. And then it disconnects peers that do what we ask them.\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692859,10692859,
rebroad,2012-11-25T12:22:50Z,"@sipa you're right of course that the code currently does request some blocks multiple times when it doesn't need to, but that is a separate issue and requires a separate patch to fix that. That fix, however, won't eradicate the situation that this patch mitigates.\n\nThere is an argument though that that patch should be a prerequisite patch to this one.\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692875,10692875,
sipa,2012-11-25T12:29:54Z,"I'll try to explain a bit more in detail why this is not a solution, but this is my last comment in this thread.\n\nAssume we are doing initial block synchronization, so we're sending getblocks, receive invs, download blocks, and send a new getblocks. During that time, a new block is found. One node (typically one of the best!) is the first to announce this new block to us, so we download it, see ",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692926,10692926,
rebroad,2012-11-25T12:34:54Z,"@sipa You're explaining things to me that I already know and understand, and I've already said I agree that there could  be a patch to fix what you are describing in my previous comment, and that that patch might be better done before this one (which is still needed to cater for lagging nodes). You are failing to address the issue of lagging nodes providing blocks already received by lesser-laggin",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10692976,10692976,
TheBlueMatt,2012-11-25T13:13:48Z,"I did some initial work on proper request management a while ago, but never got very far as I was working on bloom filter stuff, you can work on it more if you want: https://github.com/TheBlueMatt/bitcoin/commits/bloom%2Brelayblock\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-10693301,10693301,
gmaxwell,2013-04-21T03:02:21Z,"@rebroad What you are seeing is not due to ""lagging peers"", this is pretty easily tested. Sipa explained why you saw this. We only make the request out to one peer (except in the case sipa outlined) so lagging really has nothing to do with it.\n",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-16715154,16715154,
rebroad,2013-04-21T16:44:27Z,"@gmaxwell a block is requested from another peer if it's not received within 2 minutes. This 2 minutes is rather arbitrary and not a reliable way to determine that a block has failed to be downloaded. It will even request the same block from another peer even when the original peer is currently sending a block. The code behind this could do with some obvious improvements, and the 2 minute delay sh",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-16732271,16732271,
jcomeauictx,2014-01-24T01:50:57Z,"I've run into this several times while starting up new nodes. I've always managed to work around it, either by temporarily setting maxconnections=1 and listen=0, or by adding another node under my control that has the current blockchain, or by simply waiting out the duplicate blocks. but if there's a fix available, collectively covering your ears and saying ""lalalala I can't hear you"" might not be",https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-33190493,33190493,
sipa,2014-01-24T03:33:38Z,See #3514 for a solution that doesn't kill peers that do what we ask.\n,https://github.com/bitcoin/bitcoin/pull/1382#issuecomment-33194780,33194780,
