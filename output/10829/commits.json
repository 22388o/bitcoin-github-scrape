[
  {
    "sha": "36ecc16ba7df491690a4723540ccaabbe217b1b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmVjYzE2YmE3ZGY0OTE2OTBhNDcyMzU0MGNjYWFiYmUyMTdiMWI2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-22T23:30:45Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-04T16:05:18Z"
      },
      "message": "Simple, backwards compatible RPC multiwallet support.\n\nThis change allows existing RPCs to work on multiple wallets by calling those\nRPCs with a wallet=filename named argument. Example usage:\n\n    bitcoind -regtest -wallet=w1.dat -wallet=w2.dat\n    bitcoin-cli -regtest -named getwalletinfo wallet=w1.dat\n    bitcoin-cli -regtest -named getwalletinfo wallet=w2.dat\n    bitcoin-cli -regtest -named getbalance wallet=w2.dat\n\nIndividual RPCs can override handling of the wallet named argument, but if they\ndon't, the `GetWalletForJSONRPCRequest` function will automatically chose the\nright wallet based on the argument value.\n\nThe wallet= parameter is mandatory if multiple wallets are loaded, and this\nchange only allows JSON-RPC calls made with named arguments to access multiple\nwallets, so wallet RPC calls made positional arguments will not work if more\nthan one wallet is loaded.\n\nMultiwallet python test based on code originally written by\nJonas Schnelli <dev@jonasschnelli.ch>",
      "tree": {
        "sha": "38b15e1277bd399583ea4426415bd0bf24b5d21b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38b15e1277bd399583ea4426415bd0bf24b5d21b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36ecc16ba7df491690a4723540ccaabbe217b1b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36ecc16ba7df491690a4723540ccaabbe217b1b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36ecc16ba7df491690a4723540ccaabbe217b1b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36ecc16ba7df491690a4723540ccaabbe217b1b6/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 80,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fdd05de1c7cc808f8dda5a505aee84a92a56d955",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ecc16ba7df491690a4723540ccaabbe217b1b6/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ecc16ba7df491690a4723540ccaabbe217b1b6/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=36ecc16ba7df491690a4723540ccaabbe217b1b6",
        "patch": "@@ -213,6 +213,12 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n                     std::string firstLetter = category.substr(0,1);\n                     boost::to_upper(firstLetter);\n                     strRet += \"== \" + firstLetter + category.substr(1) + \" ==\\n\";\n+                    if (category == \"wallet\") {\n+                        strRet += \"\\nWhen more than one wallet is loaded (multiple -`wallet=filename` options passed\\n\"\n+                                  \"to bitcoind), wallet RPCs must be called with an extra named JSON-RPC `wallet`\\n\"\n+                                  \"parameter containing the wallet filename to disambiguate which wallet file the\\n\"\n+                                  \"RPC is intended for. Failure to specify will result in method disabled errors.\\n\\n\";\n+                    }\n                 }\n             }\n             strRet += strHelp + \"\\n\";\n@@ -472,6 +478,11 @@ static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, c\n             hole += 1;\n         }\n     }\n+    auto wallet = argsIn.find(\"wallet\");\n+    if (wallet != argsIn.end() && wallet->second->isStr()) {\n+        out.wallet = wallet->second->getValStr();\n+        argsIn.erase(wallet);\n+    }\n     // If there are still arguments in the argsIn map, this is an error.\n     if (!argsIn.empty()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown named parameter \" + argsIn.begin()->first);"
      },
      {
        "sha": "48d9cb68b1d9270f23b9b50357ae23d101d4f26f",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ecc16ba7df491690a4723540ccaabbe217b1b6/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ecc16ba7df491690a4723540ccaabbe217b1b6/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=36ecc16ba7df491690a4723540ccaabbe217b1b6",
        "patch": "@@ -42,11 +42,25 @@ class JSONRPCRequest\n public:\n     UniValue id;\n     std::string strMethod;\n+    /**\n+     * Parameters from JSON-RPC request.\n+     * This will be either an object or an array when the JSONRPCRequest object is\n+     * originally created and parsed. But it will be transformed into an\n+     * array before being passed to the RPC method implementation (using the\n+     * list of named arguments provided by the implementation).\n+     */\n     UniValue params;\n     bool fHelp;\n     std::string URI;\n     std::string authUser;\n \n+    /**\n+     * Optional wallet name, set for backwards compatibility if the RPC method\n+     * was called with a named \"wallet\" parameter and the RPC method\n+     * implementation doesn't handle it itself.\n+     */\n+    std::string wallet;\n+\n     JSONRPCRequest() : id(NullUniValue), params(NullUniValue), fHelp(false) {}\n     void parse(const UniValue& valRequest);\n };"
      },
      {
        "sha": "0e6db892b37f587def8a3150376bc0dd32fc9a93",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ecc16ba7df491690a4723540ccaabbe217b1b6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ecc16ba7df491690a4723540ccaabbe217b1b6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=36ecc16ba7df491690a4723540ccaabbe217b1b6",
        "patch": "@@ -32,8 +32,15 @@\n \n CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n-    // TODO: Some way to access secondary wallets\n-    return vpwallets.empty() ? nullptr : vpwallets[0];\n+    if (!request.wallet.empty()) {\n+        for (const auto& wallet : ::vpwallets) {\n+            if (request.wallet == wallet->GetName()) {\n+                return wallet;\n+            }\n+        }\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Requested wallet does not exist or is not loaded\");\n+    }\n+    return ::vpwallets.size() == 1 || (request.fHelp && ::vpwallets.size() > 0) ? ::vpwallets[0] : nullptr;\n }\n \n std::string HelpRequiringPassphrase(CWallet * const pwallet)"
      },
      {
        "sha": "2269864fd764ce919a378ba8dd61b09d139116f3",
        "filename": "test/functional/multiwallet.py",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ecc16ba7df491690a4723540ccaabbe217b1b6/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ecc16ba7df491690a4723540ccaabbe217b1b6/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=36ecc16ba7df491690a4723540ccaabbe217b1b6",
        "patch": "@@ -0,0 +1,45 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the wallet.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class MultiWalletTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-wallet=w1', '-wallet=w2','-wallet=w3']]\n+\n+    def setup_network(self):\n+        self.nodes = self.start_nodes(1, self.options.tmpdir, self.extra_args[:1])\n+\n+    def run_test(self):\n+        self.nodes[0].generate(nblocks=1, wallet=\"w1\")\n+\n+        #check default wallet balance\n+        assert_raises_jsonrpc(-32601, \"Method not found (disabled)\", self.nodes[0].getwalletinfo)\n+\n+        #check w1 wallet balance\n+        walletinfo = self.nodes[0].getwalletinfo(wallet=\"w1\")\n+        assert_equal(walletinfo['immature_balance'], 50)\n+\n+        #check w1 wallet balance\n+        walletinfo = self.nodes[0].getwalletinfo(wallet=\"w2\")\n+        assert_equal(walletinfo['immature_balance'], 0)\n+\n+        self.nodes[0].generate(nblocks=101, wallet=\"w1\")\n+        assert_equal(self.nodes[0].getbalance(wallet=\"w1\"), 100)\n+        assert_equal(self.nodes[0].getbalance(wallet=\"w2\"), 0)\n+        assert_equal(self.nodes[0].getbalance(wallet=\"w3\"), 0)\n+\n+        huh=self.nodes[0].getnewaddress(wallet=\"w2\")\n+        self.nodes[0].sendtoaddress(address=huh, amount=1, wallet=\"w1\")\n+        self.nodes[0].generate(nblocks=1, wallet=\"w1\")\n+        assert_equal(self.nodes[0].getbalance(wallet=\"w2\"), 1)\n+\n+if __name__ == '__main__':\n+    MultiWalletTest().main()"
      },
      {
        "sha": "a3085ca96e26c1f2b1306b1bd56087080acda65e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36ecc16ba7df491690a4723540ccaabbe217b1b6/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36ecc16ba7df491690a4723540ccaabbe217b1b6/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=36ecc16ba7df491690a4723540ccaabbe217b1b6",
        "patch": "@@ -63,6 +63,7 @@\n     'segwit.py',\n     # vv Tests less than 2m vv\n     'wallet.py',\n+    'multiwallet.py',\n     'wallet-accounts.py',\n     'p2p-segwit.py',\n     'wallet-dump.py',"
      }
    ]
  }
]