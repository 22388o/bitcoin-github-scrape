promag,2017-07-14T20:09:38Z,Will review later.,https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315455544,315455544,
meshcollider,2017-07-14T20:13:00Z,"Code changes look good, concept ACK, but haven't read the other alternative PRs so can't say which implementation I prefer yet",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315456335,315456335,
sipa,2017-07-15T00:33:50Z,"```\n$ ./src/bitcoind -daemon -wallet=w1.dat -wallet=w2.dat\n```\n\nNamed arguments work as expected:\n```\n$ ./src/bitcoin-cli -named getbalance wallet=w1.dat\n0.00000000\n```\n\nThe PR description says that the default wallet is used with positional arguments, however:\n```\n$ ./src/bitcoin-cli getbalance\nerror code: -32601\nerror message:\nMethod not found (disabled)\n```\n",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315496601,315496601,
sipa,2017-07-15T18:19:46Z,"Tested 21eeaa43d415d4397663eaee06d40decab0073f1 a bit. Named arguments work with multiwallet and single wallet, and positional arguments work with single wallet. I'm not sure if the observed behavior for multiwallet with positional arguments in intended.",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315552536,315552536,
laanwj,2017-07-17T07:03:54Z,"This is much simpler in implementation than #10650.\n\nBut for the record I've argued against named-argument based multiwallet before: https://github.com/bitcoin/bitcoin/pull/10653#issuecomment-310833084 . Forgetting to provide the named argument anywhere in the end-user code will cause the operation to happen on the default wallet. This can result in dangerous, or at least hard to debug, mistak",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315680769,315680769,
ryanofsky,2017-07-17T09:47:15Z,"> this concern could be avoided by having wallet= argument mandatory if multiple wallets are loaded\n\nThis is actually what the PR does, the commit message was just out of date.\n\n> The PR description says that the default wallet is used with positional arguments, however [...]\n> I'm not sure if the observed behavior for multiwallet with positional arguments in intended.\n\nSorry the com",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315710973,315710973,
jonasschnelli,2017-07-17T10:17:57Z,"utACK 36ecc16ba7df491690a4723540ccaabbe217b1b6.\n\nIt is a clean and simple change. I'm still in favour of the more extensible approach of endpoint which would allow to run multiple wallet implementations with the same API while not fiddling with the JSON layer. Providing the wallet selector within the JSON data layer seems to me as sort of a data layer violation.\n\nBut the change is simple a",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315717073,315717073,
jonasschnelli,2017-07-17T10:18:55Z,Nevertheless I added a simple endpoint based PR (#10849) which is +103 −7 versus this +80 −2.,https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315717244,315717244,
laanwj,2017-07-17T10:53:51Z,"> Providing the wallet selector within the JSON data layer seems to me as sort of a data layer violation.\n\nI agree, ideally words such as ""wallet"" should not appear in rpc/server.cpp, and that should definitely be changed later. But it's ok for 0.15 I guess, this is easiest to review last minute.",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315723691,315723691,
ryanofsky,2017-07-17T11:21:05Z,"> I'm still in favour of the more extensible approach of endpoint which would allow to run multiple wallet implementations with the same API while not fiddling with the JSON layer. Providing the wallet selector within the JSON data layer seems to me as sort of a data layer violation.\n\nThis will allow multiwallet to work with no code in json-rpc layer with an additional change that moves named ",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315728735,315728735,
instagibbs,2017-07-17T17:04:32Z,"notes:\n1) giving two+ named arguments `wallet` results in the last one being used for the call (I think named arguments really shouldn't be able to accept duplicates regardless, might be out of scope)\n2) we'd probably want to give priority to named arg fixes like https://github.com/bitcoin/bitcoin/pull/10783 if this is merged, since non-working named arguments means you can't use multiwallet f",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315816407,315816407,
instagibbs,2017-07-17T17:57:03Z,"@morcos points out (2) is not right, user will simply have to enter in all values rather than a subset. So fix is less urgent than I was thinking",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315831609,315831609,
achow101,2017-07-17T18:54:49Z,utACK 36ecc16ba7df491690a4723540ccaabbe217b1b6,https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315847906,315847906,
ryanofsky,2017-07-18T02:39:24Z,"Closing in favor of #10849, which despite:\n\n- causing the wallet option treated differently than every other existing RPC option\n- preventing us from designing a stable and extensible uri-path scheme (it puts wallet at root of a new undocumented, unstable uri-path scheme with /v1 segment added then removed again, /node segment added and removed again, /wallet -> node passthrough added and re",https://github.com/bitcoin/bitcoin/pull/10829#issuecomment-315941661,315941661,
morcos,2017-07-15T15:11:41Z,"I think it might be nice to also add this string to each of the individual wallet helps?\nOr if there is some way to return it when it is the cause of the error?\n\nAt least for me I rarely use the overall help or I grep it for the type of thing I'm looking for since it is so much output.  And I worry that users will waste a lot of time not realizing what the problem is.",https://github.com/bitcoin/bitcoin/pull/10829#discussion_r127586188,127586188,src/rpc/server.cpp
morcos,2017-07-15T15:39:32Z,"Named arguments allow you to specify an argument more than once and then the last specified value controls.  \nI'm not sure if this is desirable behavior before this PR, but certainly after this PR it could lead to unexpected actions if for some reason multiple wallet arguments are specified.",https://github.com/bitcoin/bitcoin/pull/10829#discussion_r127586692,127586692,src/rpc/server.cpp
laanwj,2017-07-17T06:55:37Z,"> Named arguments allow you to specify an argument more than once and then the last specified value controls.\n\nWe could make it an error to specify a key twice, that seems acceptable in the context of JSON parsing because the standard doesn't say anything about duplicate keys (so it can depend on the context). But let's not add that to the scope of this PR.\n\n(this would need to be enforced",https://github.com/bitcoin/bitcoin/pull/10829#discussion_r127641215,127641215,src/rpc/server.cpp
morcos,2017-07-17T10:14:13Z,"Yes that makes sense to me.\n",https://github.com/bitcoin/bitcoin/pull/10829#discussion_r127672550,127672550,src/rpc/server.cpp
