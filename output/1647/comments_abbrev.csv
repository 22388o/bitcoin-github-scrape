BitcoinPullTester,2012-08-08T17:04:22Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/27b24244c4d1f97690d5908e3412ac5306920281 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-7590124,7590124,
mikehearn,2012-10-31T21:41:46Z,"Gavin, any thoughts on this?\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-9963221,9963221,
gavinandresen,2012-11-01T15:15:16Z,"@mikehearn :  needs unit tests, in my humble opinion. It is a very good candidate for ""needs 100% code coverage from tests"", because transaction selection is such a key piece of the Bitcoin infrastructure.\n\nAlso needs thorough code review, with an eye towards ""Could I construct a series of transactions that made the selection algorithm take O(N^2) time ?""\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-9983542,9983542,
luke-jr,2012-11-01T16:01:02Z,"@gavinandresen What kind of unit tests would you like for this? I already dealt with the O(N^2) problem a while back on Eligius, though of course more reviews are always welcome.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-9985286,9985286,
gmaxwell,2012-11-01T16:09:29Z,"My suggestion would be start with a bunch of ""random"" mempools and them making sure that the selections it makes are valid (no mistaken dependencies) and actually get the most fees possible (e.g. by externally precomputing the correct answers).  I'd also include cases designed to trigger complexity attacks (mempool with a 2 groups of 100 long chains or whatever).\n\nAfter that I'd run lcov with th",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-9985591,9985591,
gavinandresen,2012-11-01T21:03:59Z,"Thanks @gmaxwell , those are exactly the types of tests I think this needs!\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-9995865,9995865,
luke-jr,2012-11-13T05:05:17Z,"Update: It seems since rebasing this, new performance problems have cropped up. :(\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-10315914,10315914,
luke-jr,2012-11-24T21:54:07Z,"Update: False alarm, I debugged the performance problem and it was a result of a poorly thought-out merge of this with #1648 (which elevated priority of transactions that benefit the miner directly). This seems to still perform well without that change (or with it done once).\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-10684223,10684223,
BitcoinPullTester,2012-11-27T19:22:30Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/56c7ea61d70d4a6699f1a53b9d03eb803a9c58c7 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-10772536,10772536,
luke-jr,2013-01-12T02:41:01Z,Fixed a bug triggered by today's onslaught of !IsFinal transactions...\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-12172359,12172359,
gavinandresen,2013-10-21T01:05:20Z,"Rebase needed.\n\nAlthough I think this needs a re-think/rewrite:\n\nWhen we have a memory-limited mempool (needed for anti-DoS), we'll run into a chicken-and-egg problem:  parent transaction may be evicted from mempool, child will get stuck (and eventually evicted) from the orphan pool. Seems to me what is needed is a new protocol message that is ""here is a bundle of dependent transactions, with ",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-26687849,26687849,
luke-jr,2013-10-25T00:52:41Z,"Rebased. I agree it isn't perfect, but this is 1) better than nothing, and 2) well-tested. If anyone wants to put the effort into a rewrite, I'd be glad to defer and give it testing.. but I think everyone's busy enough already.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-27047126,27047126,
ABISprotocol,2014-01-23T18:04:01Z,"Thank you for your work on this, it would be good to see it in a 0.9 release, am curious if tests are completed.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-33150574,33150574,
luke-jr,2014-01-23T18:21:43Z,I'm not sure if I'm going to have time to do tests before 0.9 - hopefully someone else can help out with that. :(\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-33152404,33152404,
ABISprotocol,2014-01-24T04:04:38Z,"If the tests for this need any funding support from some bounty fund and if there is not support or priority, it's possible the tests may be able to be bountyfied (ok, not a word) as part of something I'm working on, it's probably 60 days out though before any funds would be available.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-33195909,33195909,
ABISprotocol,2014-06-24T00:39:22Z,#3753 also just had merge conflicts on testing (failed merge).\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-46919628,46919628,
luke-jr,2014-06-26T12:32:56Z,"Rebased, but the changes were significant enough that IMO this needs re-review and re-testing :(\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-47219628,47219628,
BitcoinPullTester,2014-06-26T18:03:00Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/p1647_200f8abb943e5acd3bf599b4bfa8e9beccd53d1f/ for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.lo",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-47258436,47258436,
dgenr8,2014-08-15T00:27:27Z,"How much mining actually occurs using miner.cpp?  Is it basically example code at this point?  Since CPFP makes economic sense for miners, wouldn't they have implemented it already?  I admit to cluelessness about the mining landscape.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-52262161,52262161,
luke-jr,2014-08-15T00:30:54Z,"@dgenr8 It's supposed to be example code, but unfortunately a lot of miners still end up using it as-is today. :(\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-52262334,52262334,
laanwj,2014-08-15T11:17:55Z,"Well ""the internal miner"" is example code. It's slow and useless.\n\nHowever `miner.cpp`also contains code for transaction selection from the mempool, which is used for `getblocktemplate`, which is used by many miners.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-52296160,52296160,
laanwj,2014-12-29T09:41:08Z,"Labeling this for 0.11. This is the oldest pull request open, let's finally get it in by then.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-68243782,68243782,
voisine,2015-03-06T17:31:02Z,"Would love to see this get in. Have a situation right now where a new user received 0.01btc tx with no fee and then spent their entire balance, 17btc, which is stuck. It would be a real improvement for user experience if wallet software could just include a fee to cover unconfirmed input tx in addition to itself instead of trying to explain to users why they can't spend those funds yet.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-77599552,77599552,
gavinandresen,2015-03-06T18:25:16Z,"Needs tests, as suggested by gmaxwell. A regression test making sure that this would actually fix the situation described by @voisine would be excellent (although non-trivial-- do you assume that the 0.01btc tx with no fee got relayed and is still in memory pools, or not?)\n\nAnd needs a good review from somebody who is good at spotting potential DoS weaknesses (like Sergio).\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-77609040,77609040,
ABISprotocol,2015-03-10T03:02:55Z,"Yes, thanks to those who have worked on this so far.  This being the oldest open pull request, and having merits for inclusion in 0.11, it needs and deserves both a thoughtful review and merge.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-77987898,77987898,
jgarzik,2015-03-21T10:24:31Z,ACK - light test at branch's current tip\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-84301972,84301972,
sipa,2015-03-21T13:58:46Z,Has anyone done benchmarks on the impact on block creation time?\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-84344945,84344945,
morcos,2015-04-08T23:06:10Z,"I've done a code review on this and it looks good to me. I've also done some performance testing in manufactured RPC tests as well as under more typical load.  It can cause CreateNewBlock to take multiples as long if there are chains of transactions in the mempool, so I do think it would be useful to test deliberately extreme chains as mentioned above.   Under typical mempool activity though it se",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-91063321,91063321,
luke-jr,2015-04-09T08:45:10Z,"@morcos If you want to push those RPC tests as a branch somewhere, I can include them when I rebase this.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-91153436,91153436,
morcos,2015-04-20T20:11:04Z,"@luke-jr Feel free to take a look at this, https://github.com/morcos/bitcoin/commits/CPFP.  I'd rebased and then added 2 commits to do some timing.  Its not really something to include as it doesn't test anything, but its just what I was using to stress the code.  I'm not quite sure why it takes so long, but I didn't look into.  See the commit text for the most recent commit.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-94556254,94556254,
morcos,2015-07-15T16:26:47Z,"I think I missed a few things on my first review of this.  It seems like if B and C are both children of A, and D depends on both B and C, then the effectiveSize() of D will double count the size of A?\n\nAlso, it doesn't look like the fees of A, B, or C are counted, only the fees of the final child (D in this case).\n\nOr am I missing something now...\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-121668295,121668295,
jgarzik,2015-09-15T17:02:47Z,"I leave this pull request open in the hope that it's current status of ""98% there"" will get the final way there.  @luke-jr has faithfully updated it and addressed feedback over time, and consensus is that it's merge worthy.\n\nIt seems like it just needs a reviewer or two to expend a day or two of focused analysis and testing.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-140463466,140463466,
sipa,2015-09-15T17:38:37Z,"I absolutely gree on the concept of CPFP, but I believe there are various\nhard to analyse edge cases with this approach.\n\nWith the work that @sdaftuar is doing for the mempool refactor (particular\nthe dependency tracking and limiting), we'll have a framework that is very\nclose to actually having a mempool indexed by dependency-inclusive\nfeerates, resulting a much cleaner way to implement act",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-140476976,140476976,
morcos,2015-09-15T20:05:40Z,"Its actually a fair amount of code that will still need to be written to do CPFP even after #6654, but I agree that it'll provide the right framework for implementing it.   I think the approach of starting from the dependent tracking framework and adding ancestor tracking is likely to get us to functional CPFP quicker than starting from this pull.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-140522236,140522236,
luke-jr,2015-09-16T01:22:31Z,"I agree the long-term implementation is likely to be different, but given the extreme maturity of this code (especially as opposed to the immaturity of #6654 and similar proposals), I do think it would be best to merge it now/soon, with the understanding that it may be replaced by an improved implementation later. Don't let the perfect be the enemy of the good etc.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-140592898,140592898,
morcos,2015-09-16T01:42:09Z,@luke-jr did you see my [comment](https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-121668295) a few comments up?  I think there are a couple of things that don't work properly with the code now.\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-140595592,140595592,
jtimon,2015-09-16T01:51:12Z,I think it makes sense to try another version of #6654 on top of this if it's not too much work and take a look at that branch before merging #6654\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-140597054,140597054,
luke-jr,2015-09-16T01:52:37Z,"> I think I missed a few things on my first review of this. It seems like if B and C are both children of A, and D depends on both B and C, then the effectiveSize() of D will double count the size of A?\n\nYes, probably. But it's still an improvement over not considering the dependency at all.\n\n> Also, it doesn't look like the fees of A, B, or C are counted, only the fees of the final child (D i",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-140597176,140597176,
laanwj,2015-09-25T15:11:29Z,Closing this for now. Should be reopened (or implemented otherwise) after the mempool refactor work.\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-143248520,143248520,
dcousens,2015-09-26T04:43:52Z,Maybe @laanwj tag it as blocked and keep it open?\nI'm still not sure how this 'roadmap' is being tracked?\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-143398762,143398762,
luke-jr,2016-02-14T06:28:08Z,"After 2 or 3 failed attempts to rewrite/port CPFP to 0.12, I am abandoning CPFP for the time being. Nobody seems to use it, and it's too complex.\n\nPretty sure the older versions also have a bug that they don't update grandchildren priority/feerate when their grandparents get mined. (Not a big deal.)\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-183830318,183830318,
schildbach,2016-02-14T08:14:11Z,@luke-jr Bitcoin Wallet users use it quite a bit. Current problem is only a few miners have implemented it.\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-183846513,183846513,
luke-jr,2016-02-14T08:35:40Z,"Hmm, good to know. It's not going to make Knots 0.12.0 though - maybe I'll reconsider it later.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-183848806,183848806,
rebroad,2016-03-01T18:34:48Z,"Sorry if I'm being thick, I can see how this patch allows the recipient of a transaction to effectively pay the fee, but how often is this actually needed?\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-190844809,190844809,
sipa,2016-03-01T18:38:30Z,See #7600 for another implementation.\n,https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-190845923,190845923,
schildbach,2016-03-01T22:47:33Z,"@rebroad Especially in times like this week, with the network being very unreliable, CPFP is used a lot. Based on my logs, I'd say several thousand times a day.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-190945131,190945131,
voisine,2016-04-07T17:36:28Z,"Just wanted to add that we use CPFP in breadwallet as well, when spending unconfirmed inputs that don't come from the wallet's own change outputs. It's needed to get transactions unstuck if a user tries to spend their entire wallet balance including recent unconfirmed low/no-fee inputs.\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-207018187,207018187,
schildbach,2016-04-07T17:43:21Z,"@voisine I assume in this case, the CPFP transaction is the same as the (presumably big) transaction that empties the wallet? Or are you somehow splitting it up into txns that act as CPFP and a transaction that empties the wallet?\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-207021460,207021460,
voisine,2016-04-07T19:33:14Z,"this is if the user tries to spend more funds in a single tx than they have confirmed utxos that can satisfy, typically when emptying the wallet shortly after a receive\n",https://github.com/bitcoin/bitcoin/pull/1647#issuecomment-207059385,207059385,
sipa,2015-03-21T13:58:20Z,This cyclic dependency is pretty ugly. Can't you just pass the mapInfoById to the methods in txindo that need it?\n,https://github.com/bitcoin/bitcoin/pull/1647#discussion_r26892010,26892010,src/miner.cpp
luke-jr,2015-03-21T14:17:01Z,That's basically everything... :/\n,https://github.com/bitcoin/bitcoin/pull/1647#discussion_r26892151,26892151,src/miner.cpp
sipa,2015-03-23T11:52:11Z,"It's easier to not put the logic in the data structure, I think. The fact that you need a pointer from the low-level data structure to the container is just a symptom of that.\n",https://github.com/bitcoin/bitcoin/pull/1647#discussion_r26930026,26930026,src/miner.cpp
morcos,2015-04-06T20:15:28Z,Aren't this !empty check and flag to resort redundant given the foreach loop below?\n,https://github.com/bitcoin/bitcoin/pull/1647#discussion_r27826049,27826049,src/miner.cpp
morcos,2015-04-06T20:19:41Z,I think that `ptxinfo->nTxSigOps` is just that transaction's `GetP2SHSigOpCount` and doesn't include its `GetLegacySigOpCount`.\n,https://github.com/bitcoin/bitcoin/pull/1647#discussion_r27826376,27826376,src/miner.cpp
luke-jr,2015-04-06T20:52:23Z,Probably better to just set fResort here and not in the foreach... (done)\n,https://github.com/bitcoin/bitcoin/pull/1647#discussion_r27829128,27829128,src/miner.cpp
luke-jr,2015-04-06T22:47:39Z,"Good catch, fixed.\n",https://github.com/bitcoin/bitcoin/pull/1647#discussion_r27838118,27838118,src/miner.cpp
jtimon,2015-04-25T10:51:36Z,"What about replacing this part\n\n```\n                    txinfo.fInvalid = true;\n                    goto nexttxn;\n                 }\n                  nTotalIn += nValueIn;\n             }\n             nTxFee = nTotalIn - tx.GetValueOut(); \n             mempool.ApplyDeltas(hash, dPriority, nTotalIn);\n             vecPriority.push_back(&txinfo); \nnexttxn:    (void)1;\n```\n\nwith the foll",https://github.com/bitcoin/bitcoin/pull/1647#discussion_r29099785,29099785,src/miner.cpp
jtimon,2015-04-25T10:58:21Z,"Or just have a separate function:\n\n```\nif (NewFunction(...)) {\n    nTotalIn += nValueIn;\n    nTxFee = nTotalIn - tx.GetValueOut(); \n    mempool.ApplyDeltas(hash, dPriority, nTotalIn);\n    vecPriority.push_back(&txinfo);\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/1647#discussion_r29099817,29099817,src/miner.cpp
ABISprotocol,2015-06-07T03:21:40Z,Does it work?\n,https://github.com/bitcoin/bitcoin/pull/1647#discussion_r31873581,31873581,src/miner.cpp
