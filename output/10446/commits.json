[
  {
    "sha": "7f31762cb6261806542cc6d1188ca07db98a6950",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjMxNzYyY2I2MjYxODA2NTQyY2M2ZDExODhjYTA3ZGI5OGE2OTUw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-05-24T00:04:38Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-14T22:05:00Z"
      },
      "message": "net: add an internal subnet for representing unresolved hostnames\n\nWe currently do two resolves for dns seeds: one for the results, and one to\nserve in addrman as the source for those addresses.\n\nThere's no requirement that the source hostname resolves to the stored\nidentifier, only that the mapping is unique. So rather than incurring the\nsecond lookup, combine a private subnet with a hash of the hostname.\n\nThe resulting v6 ip is guaranteed not to be publicy routable, and has only a\nnegligible chance of colliding with a user's internal network (which would be\nof no consequence anyway).",
      "tree": {
        "sha": "6ed637d6ebbb0a3d572b1dfa02bbd152fbae6c32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ed637d6ebbb0a3d572b1dfa02bbd152fbae6c32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f31762cb6261806542cc6d1188ca07db98a6950",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f31762cb6261806542cc6d1188ca07db98a6950",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f31762cb6261806542cc6d1188ca07db98a6950",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f31762cb6261806542cc6d1188ca07db98a6950/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbf5d3ba15161f71cbb84a51c1703c22b651e8a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf5d3ba15161f71cbb84a51c1703c22b651e8a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf5d3ba15161f71cbb84a51c1703c22b651e8a9"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 64,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e10016d983de76e13fa72da0df48655f9cb748e8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f31762cb6261806542cc6d1188ca07db98a6950/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f31762cb6261806542cc6d1188ca07db98a6950/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7f31762cb6261806542cc6d1188ca07db98a6950",
        "patch": "@@ -240,7 +240,7 @@ bool RemoveLocal(const CService& addr)\n /** Make a particular network entirely off-limits (no automatic connects to it) */\n void SetLimited(enum Network net, bool fLimited)\n {\n-    if (net == NET_UNROUTABLE)\n+    if (net == NET_UNROUTABLE || net == NET_INTERNAL)\n         return;\n     LOCK(cs_mapLocalHost);\n     vfLimited[net] = fLimited;"
      },
      {
        "sha": "89f257c6422c69a71cf938e4ece666355e6f6650",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 7,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f31762cb6261806542cc6d1188ca07db98a6950/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f31762cb6261806542cc6d1188ca07db98a6950/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=7f31762cb6261806542cc6d1188ca07db98a6950",
        "patch": "@@ -15,6 +15,9 @@\n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};\n \n+// 0xFD + sha256(\"bitcoin\")[0:5]\n+static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87, 0x24 };\n+\n void CNetAddr::Init()\n {\n     memset(ip, 0, sizeof(ip));\n@@ -42,6 +45,18 @@ void CNetAddr::SetRaw(Network network, const uint8_t *ip_in)\n     }\n }\n \n+bool CNetAddr::SetInternal(const std::string &name)\n+{\n+    if (name.empty()) {\n+        return false;\n+    }\n+    unsigned char hash[32] = {};\n+    CSHA256().Write((const unsigned char*)name.data(), name.size()).Finalize(hash);\n+    memcpy(ip, g_internal_prefix, sizeof(g_internal_prefix));\n+    memcpy(ip + sizeof(g_internal_prefix), hash, sizeof(ip) - sizeof(g_internal_prefix));\n+    return true;\n+}\n+\n bool CNetAddr::SetSpecial(const std::string &strName)\n {\n     if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n@@ -84,7 +99,7 @@ bool CNetAddr::IsIPv4() const\n \n bool CNetAddr::IsIPv6() const\n {\n-    return (!IsIPv4() && !IsTor());\n+    return (!IsIPv4() && !IsTor() && !IsInternal());\n }\n \n bool CNetAddr::IsRFC1918() const\n@@ -199,6 +214,9 @@ bool CNetAddr::IsValid() const\n     if (IsRFC3849())\n         return false;\n \n+    if (IsInternal())\n+        return false;\n+\n     if (IsIPv4())\n     {\n         // INADDR_NONE\n@@ -217,11 +235,19 @@ bool CNetAddr::IsValid() const\n \n bool CNetAddr::IsRoutable() const\n {\n-    return IsValid() && !(IsRFC1918() || IsRFC2544() || IsRFC3927() || IsRFC4862() || IsRFC6598() || IsRFC5737() || (IsRFC4193() && !IsTor()) || IsRFC4843() || IsLocal());\n+    return IsValid() && !(IsRFC1918() || IsRFC2544() || IsRFC3927() || IsRFC4862() || IsRFC6598() || IsRFC5737() || (IsRFC4193() && !IsTor()) || IsRFC4843() || IsLocal() || IsInternal());\n+}\n+\n+bool CNetAddr::IsInternal() const\n+{\n+   return memcmp(ip, g_internal_prefix, sizeof(g_internal_prefix)) == 0;\n }\n \n enum Network CNetAddr::GetNetwork() const\n {\n+    if (IsInternal())\n+        return NET_INTERNAL;\n+\n     if (!IsRoutable())\n         return NET_UNROUTABLE;\n \n@@ -238,6 +264,8 @@ std::string CNetAddr::ToStringIP() const\n {\n     if (IsTor())\n         return EncodeBase32(&ip[6], 10) + \".onion\";\n+    if (IsInternal())\n+        return EncodeBase32(ip + sizeof(g_internal_prefix), sizeof(ip) - sizeof(g_internal_prefix)) + \".internal\";\n     CService serv(*this, 0);\n     struct sockaddr_storage sockaddr;\n     socklen_t socklen = sizeof(sockaddr);\n@@ -305,9 +333,15 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n         nClass = 255;\n         nBits = 0;\n     }\n-\n-    // all unroutable addresses belong to the same group\n-    if (!IsRoutable())\n+    // all internal-usage addresses get their own group\n+    if (IsInternal())\n+    {\n+        nClass = NET_INTERNAL;\n+        nStartByte = sizeof(g_internal_prefix);\n+        nBits = (sizeof(ip) - sizeof(g_internal_prefix)) * 8;\n+    }\n+    // all other unroutable addresses belong to the same group\n+    else if (!IsRoutable())\n     {\n         nClass = NET_UNROUTABLE;\n         nBits = 0;\n@@ -393,7 +427,7 @@ int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n         REACH_PRIVATE\n     };\n \n-    if (!IsRoutable())\n+    if (!IsRoutable() || IsInternal())\n         return REACH_UNREACHABLE;\n \n     int ourNet = GetExtNetwork(this);\n@@ -552,7 +586,7 @@ std::string CService::ToStringPort() const\n \n std::string CService::ToStringIPPort() const\n {\n-    if (IsIPv4() || IsTor()) {\n+    if (IsIPv4() || IsTor() || IsInternal()) {\n         return ToStringIP() + \":\" + ToStringPort();\n     } else {\n         return \"[\" + ToStringIP() + \"]:\" + ToStringPort();"
      },
      {
        "sha": "80716600d17f004e765561b142fa9aeada2f3971",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f31762cb6261806542cc6d1188ca07db98a6950/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f31762cb6261806542cc6d1188ca07db98a6950/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=7f31762cb6261806542cc6d1188ca07db98a6950",
        "patch": "@@ -22,6 +22,7 @@ enum Network\n     NET_IPV4,\n     NET_IPV6,\n     NET_TOR,\n+    NET_INTERNAL,\n \n     NET_MAX,\n };\n@@ -45,6 +46,12 @@ class CNetAddr\n          */\n         void SetRaw(Network network, const uint8_t *data);\n \n+        /**\n+          * Transform an arbitrary string into a non-routable ipv6 address.\n+          * Useful for mapping resolved addresses back to their source.\n+         */\n+        bool SetInternal(const std::string& name);\n+\n         bool SetSpecial(const std::string &strName); // for Tor addresses\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n@@ -64,6 +71,7 @@ class CNetAddr\n         bool IsTor() const;\n         bool IsLocal() const;\n         bool IsRoutable() const;\n+        bool IsInternal() const;\n         bool IsValid() const;\n         enum Network GetNetwork() const;\n         std::string ToString() const;"
      },
      {
        "sha": "ab4ecbcf17a1c10ad181b42dba38a7f4122a1dad",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f31762cb6261806542cc6d1188ca07db98a6950/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f31762cb6261806542cc6d1188ca07db98a6950/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=7f31762cb6261806542cc6d1188ca07db98a6950",
        "patch": "@@ -397,7 +397,7 @@ static UniValue GetNetworksInfo()\n     for(int n=0; n<NET_MAX; ++n)\n     {\n         enum Network network = static_cast<enum Network>(n);\n-        if(network == NET_UNROUTABLE)\n+        if(network == NET_UNROUTABLE || network == NET_INTERNAL)\n             continue;\n         proxyType proxy;\n         UniValue obj(UniValue::VOBJ);"
      },
      {
        "sha": "94a3dac4baf657cf7be3d62671539e3d177b5d51",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f31762cb6261806542cc6d1188ca07db98a6950/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f31762cb6261806542cc6d1188ca07db98a6950/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=7f31762cb6261806542cc6d1188ca07db98a6950",
        "patch": "@@ -25,13 +25,21 @@ static CSubNet ResolveSubNet(const char* subnet)\n     return ret;\n }\n \n+static CNetAddr CreateInternal(const char* host)\n+{\n+    CNetAddr addr;\n+    addr.SetInternal(host);\n+    return addr;\n+}\n+\n BOOST_AUTO_TEST_CASE(netbase_networks)\n {\n     BOOST_CHECK(ResolveIP(\"127.0.0.1\").GetNetwork()                              == NET_UNROUTABLE);\n     BOOST_CHECK(ResolveIP(\"::1\").GetNetwork()                                    == NET_UNROUTABLE);\n     BOOST_CHECK(ResolveIP(\"8.8.8.8\").GetNetwork()                                == NET_IPV4);\n     BOOST_CHECK(ResolveIP(\"2001::8888\").GetNetwork()                             == NET_IPV6);\n     BOOST_CHECK(ResolveIP(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").GetNetwork() == NET_TOR);\n+    BOOST_CHECK(CreateInternal(\"foo.com\").GetNetwork()                           == NET_INTERNAL);\n \n }\n \n@@ -58,6 +66,8 @@ BOOST_AUTO_TEST_CASE(netbase_properties)\n     BOOST_CHECK(ResolveIP(\"8.8.8.8\").IsRoutable());\n     BOOST_CHECK(ResolveIP(\"2001::1\").IsRoutable());\n     BOOST_CHECK(ResolveIP(\"127.0.0.1\").IsValid());\n+    BOOST_CHECK(CreateInternal(\"FD6B:88C0:8724:edb1:8e4:3588:e546:35ca\").IsInternal());\n+    BOOST_CHECK(CreateInternal(\"bar.com\").IsInternal());\n \n }\n \n@@ -281,6 +291,9 @@ BOOST_AUTO_TEST_CASE(netbase_getgroup)\n     BOOST_CHECK(ResolveIP(\"2001:470:abcd:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 4, 112, 175})); //he.net\n     BOOST_CHECK(ResolveIP(\"2001:2001:9999:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 32, 1})); //IPv6\n \n+    // baz.net sha256 hash: 12929400eb4607c4ac075f087167e75286b179c693eb059a01774b864e8fe505\n+    std::vector<unsigned char> internal_group = {NET_INTERNAL, 0x12, 0x92, 0x94, 0x00, 0xeb, 0x46, 0x07, 0xc4, 0xac, 0x07};\n+    BOOST_CHECK(CreateInternal(\"baz.net\").GetGroup() == internal_group);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "6d0bd5b73d14517b349bb07656a18b2acb0d5c45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDBiZDViNzNkMTQ1MTdiMzQ5YmIwNzY1NmExOGIyYWNiMGQ1YzQ1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-13T21:26:50Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-14T22:05:01Z"
      },
      "message": "net: do not allow resolving to an internal address\n\nIn order to prevent mixups, our internal range is never allowed as a resolve\nresult. This means that no user-provided string will ever be confused with an\ninternal address.",
      "tree": {
        "sha": "4c56c39f5d71719016ac84929cb41fc31d380333",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c56c39f5d71719016ac84929cb41fc31d380333"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d0bd5b73d14517b349bb07656a18b2acb0d5c45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0bd5b73d14517b349bb07656a18b2acb0d5c45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d0bd5b73d14517b349bb07656a18b2acb0d5c45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0bd5b73d14517b349bb07656a18b2acb0d5c45/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f31762cb6261806542cc6d1188ca07db98a6950",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f31762cb6261806542cc6d1188ca07db98a6950",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f31762cb6261806542cc6d1188ca07db98a6950"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a23f92e1ed00ac56d2e61b2aca296cabac614f74",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bd5b73d14517b349bb07656a18b2acb0d5c45/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bd5b73d14517b349bb07656a18b2acb0d5c45/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=6d0bd5b73d14517b349bb07656a18b2acb0d5c45",
        "patch": "@@ -108,17 +108,22 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n     struct addrinfo *aiTrav = aiRes;\n     while (aiTrav != NULL && (nMaxSolutions == 0 || vIP.size() < nMaxSolutions))\n     {\n+        CNetAddr resolved;\n         if (aiTrav->ai_family == AF_INET)\n         {\n             assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in));\n-            vIP.push_back(CNetAddr(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr));\n+            resolved = CNetAddr(((struct sockaddr_in*)(aiTrav->ai_addr))->sin_addr);\n         }\n \n         if (aiTrav->ai_family == AF_INET6)\n         {\n             assert(aiTrav->ai_addrlen >= sizeof(sockaddr_in6));\n             struct sockaddr_in6* s6 = (struct sockaddr_in6*) aiTrav->ai_addr;\n-            vIP.push_back(CNetAddr(s6->sin6_addr, s6->sin6_scope_id));\n+            resolved = CNetAddr(s6->sin6_addr, s6->sin6_scope_id);\n+        }\n+        /* Never allow resolving to an internal address. Consider any such result invalid */\n+        if (!resolved.IsInternal()) {\n+            vIP.push_back(resolved);\n         }\n \n         aiTrav = aiTrav->ai_next;"
      },
      {
        "sha": "b45a7fcc572fbeb77800084201523cb90e3a6e61",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d0bd5b73d14517b349bb07656a18b2acb0d5c45/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d0bd5b73d14517b349bb07656a18b2acb0d5c45/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=6d0bd5b73d14517b349bb07656a18b2acb0d5c45",
        "patch": "@@ -113,6 +113,11 @@ BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)\n     BOOST_CHECK(TestParse(\"[::]:8333\", \"[::]:8333\"));\n     BOOST_CHECK(TestParse(\"[127.0.0.1]\", \"127.0.0.1:65535\"));\n     BOOST_CHECK(TestParse(\":::\", \"[::]:0\"));\n+\n+    // verify that an internal address fails to resolve\n+    BOOST_CHECK(TestParse(\"[fd6b:88c0:8724:1:2:3:4:5]\", \"[::]:0\"));\n+    // and that a one-off resolves correctly\n+    BOOST_CHECK(TestParse(\"[fd6c:88c0:8724:1:2:3:4:5]\", \"[fd6c:88c0:8724:1:2:3:4:5]:65535\"));\n }\n \n BOOST_AUTO_TEST_CASE(onioncat_test)"
      }
    ]
  },
  {
    "sha": "6cdc488e3604267b1e115da5c50ffb970cd30084",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2RjNDg4ZTM2MDQyNjdiMWUxMTVkYTVjNTBmZmI5NzBjZDMwMDg0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-05-24T00:48:08Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-14T22:05:01Z"
      },
      "message": "net: switch to dummy internal ip for dns seed source\n\nThis addresss the TODO to avoid resolving twice.",
      "tree": {
        "sha": "0724591acf90b7f12a11d10f417cd482a3140eaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0724591acf90b7f12a11d10f417cd482a3140eaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cdc488e3604267b1e115da5c50ffb970cd30084",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cdc488e3604267b1e115da5c50ffb970cd30084",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cdc488e3604267b1e115da5c50ffb970cd30084",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cdc488e3604267b1e115da5c50ffb970cd30084/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d0bd5b73d14517b349bb07656a18b2acb0d5c45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d0bd5b73d14517b349bb07656a18b2acb0d5c45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d0bd5b73d14517b349bb07656a18b2acb0d5c45"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 19,
      "deletions": 25
    },
    "files": [
      {
        "sha": "0eeaee70e3d5e222ef9d7f5ae309cdf9ef34fd3d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cdc488e3604267b1e115da5c50ffb970cd30084/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cdc488e3604267b1e115da5c50ffb970cd30084/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6cdc488e3604267b1e115da5c50ffb970cd30084",
        "patch": "@@ -124,12 +124,12 @@ class CMainParams : public CChainParams {\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         // Note that of those with the service bits flag, most only support a subset of possible options\n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille, only supports x1, x5, x9, and xd\n-        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n-        vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n-        vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n-        vSeeds.push_back(CDNSSeedData(\"petertodd.org\", \"seed.btc.petertodd.org\", true)); // Peter Todd, only supports x1, x5, x9, and xd\n+        vSeeds.emplace_back(\"seed.bitcoin.sipa.be\", true); // Pieter Wuille, only supports x1, x5, x9, and xd\n+        vSeeds.emplace_back(\"dnsseed.bluematt.me\", true); // Matt Corallo, only supports x9\n+        vSeeds.emplace_back(\"dnsseed.bitcoin.dashjr.org\"); // Luke Dashjr\n+        vSeeds.emplace_back(\"seed.bitcoinstats.com\", true); // Christian Decker, supports x1 - xf\n+        vSeeds.emplace_back(\"seed.bitcoin.jonasschnelli.ch\", true); // Jonas Schnelli, only supports x1, x5, x9, and xd\n+        vSeeds.emplace_back(\"seed.btc.petertodd.org\", true); // Peter Todd, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n@@ -225,10 +225,10 @@ class CTestNetParams : public CChainParams {\n         vFixedSeeds.clear();\n         vSeeds.clear();\n         // nodes with support for servicebits filtering should be at the top\n-        vSeeds.push_back(CDNSSeedData(\"testnetbitcoin.jonasschnelli.ch\", \"testnet-seed.bitcoin.jonasschnelli.ch\", true));\n-        vSeeds.push_back(CDNSSeedData(\"petertodd.org\", \"seed.tbtc.petertodd.org\", true));\n-        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));\n+        vSeeds.emplace_back(\"testnet-seed.bitcoin.jonasschnelli.ch\", true);\n+        vSeeds.emplace_back(\"seed.tbtc.petertodd.org\", true);\n+        vSeeds.emplace_back(\"testnet-seed.bluematt.me\");\n+        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\");\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);"
      },
      {
        "sha": "16175171a75a94e42b7d1eff2d4294ff36c62c83",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cdc488e3604267b1e115da5c50ffb970cd30084/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cdc488e3604267b1e115da5c50ffb970cd30084/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=6cdc488e3604267b1e115da5c50ffb970cd30084",
        "patch": "@@ -15,9 +15,9 @@\n #include <vector>\n \n struct CDNSSeedData {\n-    std::string name, host;\n+    std::string host;\n     bool supportsServiceBitsFiltering;\n-    CDNSSeedData(const std::string &strName, const std::string &strHost, bool supportsServiceBitsFilteringIn = false) : name(strName), host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n+    CDNSSeedData(const std::string &strHost, bool supportsServiceBitsFilteringIn = false) : host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n };\n \n struct SeedSpec6 {"
      },
      {
        "sha": "0fcf9e0abad8cefdffdcb8a987a3d27429f1eb14",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cdc488e3604267b1e115da5c50ffb970cd30084/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cdc488e3604267b1e115da5c50ffb970cd30084/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6cdc488e3604267b1e115da5c50ffb970cd30084",
        "patch": "@@ -1604,7 +1604,12 @@ void CConnman::ThreadDNSAddressSeed()\n             std::vector<CNetAddr> vIPs;\n             std::vector<CAddress> vAdd;\n             ServiceFlags requiredServiceBits = nRelevantServices;\n-            if (LookupHost(GetDNSHost(seed, &requiredServiceBits).c_str(), vIPs, 0, true))\n+            std::string host = GetDNSHost(seed, &requiredServiceBits);\n+            CNetAddr resolveSource;\n+            if (!resolveSource.SetInternal(host)) {\n+                continue;\n+            }\n+            if (LookupHost(host.c_str(), vIPs, 0, true))\n             {\n                 BOOST_FOREACH(const CNetAddr& ip, vIPs)\n                 {\n@@ -1614,18 +1619,7 @@ void CConnman::ThreadDNSAddressSeed()\n                     vAdd.push_back(addr);\n                     found++;\n                 }\n-            }\n-            if (interruptNet) {\n-                return;\n-            }\n-            // TODO: The seed name resolve may fail, yielding an IP of [::], which results in\n-            // addrman assigning the same source to results from different seeds.\n-            // This should switch to a hard-coded stable dummy IP for each seed name, so that the\n-            // resolve is not required at all.\n-            if (!vIPs.empty()) {\n-                CService seedSource;\n-                Lookup(seed.name.c_str(), seedSource, 0, true);\n-                addrman.Add(vAdd, seedSource);\n+                addrman.Add(vAdd, resolveSource);\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "d5c7c1cfe3090775bf30dee531d511801926c18b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWM3YzFjZmUzMDkwNzc1YmYzMGRlZTUzMWQ1MTE4MDE5MjZjMThi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-21T19:45:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-22T19:21:22Z"
      },
      "message": "net: use an internal address for fixed seeds",
      "tree": {
        "sha": "21a4316bfbcd0b5a3ffd525f71bd7ff9eebf023c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21a4316bfbcd0b5a3ffd525f71bd7ff9eebf023c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5c7c1cfe3090775bf30dee531d511801926c18b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5c7c1cfe3090775bf30dee531d511801926c18b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5c7c1cfe3090775bf30dee531d511801926c18b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5c7c1cfe3090775bf30dee531d511801926c18b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cdc488e3604267b1e115da5c50ffb970cd30084",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cdc488e3604267b1e115da5c50ffb970cd30084",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cdc488e3604267b1e115da5c50ffb970cd30084"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cd9e0d05d91827464ded50d8536121120ff4f63c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5c7c1cfe3090775bf30dee531d511801926c18b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5c7c1cfe3090775bf30dee531d511801926c18b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d5c7c1cfe3090775bf30dee531d511801926c18b",
        "patch": "@@ -1718,7 +1718,7 @@ void CConnman::ThreadOpenConnections()\n             if (!done) {\n                 LogPrintf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n                 CNetAddr local;\n-                LookupHost(\"127.0.0.1\", local, false);\n+                local.SetInternal(\"fixedseeds\");\n                 addrman.Add(convertSeed6(Params().FixedSeeds()), local);\n                 done = true;\n             }"
      }
    ]
  },
  {
    "sha": "c1be28536467e90ce75eaa7d8c338f6485c4bee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWJlMjg1MzY0NjdlOTBjZTc1ZWFhN2Q4YzMzOGY2NDg1YzRiZWU1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-22T19:13:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-22T19:21:22Z"
      },
      "message": "chainparams: make supported service bits option explicit",
      "tree": {
        "sha": "16ec606a5fad8418fa8fedab06e86b4790df76aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16ec606a5fad8418fa8fedab06e86b4790df76aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1be28536467e90ce75eaa7d8c338f6485c4bee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1be28536467e90ce75eaa7d8c338f6485c4bee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1be28536467e90ce75eaa7d8c338f6485c4bee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1be28536467e90ce75eaa7d8c338f6485c4bee5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5c7c1cfe3090775bf30dee531d511801926c18b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5c7c1cfe3090775bf30dee531d511801926c18b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5c7c1cfe3090775bf30dee531d511801926c18b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "dc4d2621ee0422dd01791031d0bd142439c69f23",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1be28536467e90ce75eaa7d8c338f6485c4bee5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1be28536467e90ce75eaa7d8c338f6485c4bee5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c1be28536467e90ce75eaa7d8c338f6485c4bee5",
        "patch": "@@ -126,7 +126,7 @@ class CMainParams : public CChainParams {\n         // Note that of those with the service bits flag, most only support a subset of possible options\n         vSeeds.emplace_back(\"seed.bitcoin.sipa.be\", true); // Pieter Wuille, only supports x1, x5, x9, and xd\n         vSeeds.emplace_back(\"dnsseed.bluematt.me\", true); // Matt Corallo, only supports x9\n-        vSeeds.emplace_back(\"dnsseed.bitcoin.dashjr.org\"); // Luke Dashjr\n+        vSeeds.emplace_back(\"dnsseed.bitcoin.dashjr.org\", false); // Luke Dashjr\n         vSeeds.emplace_back(\"seed.bitcoinstats.com\", true); // Christian Decker, supports x1 - xf\n         vSeeds.emplace_back(\"seed.bitcoin.jonasschnelli.ch\", true); // Jonas Schnelli, only supports x1, x5, x9, and xd\n         vSeeds.emplace_back(\"seed.btc.petertodd.org\", true); // Peter Todd, only supports x1, x5, x9, and xd\n@@ -227,8 +227,8 @@ class CTestNetParams : public CChainParams {\n         // nodes with support for servicebits filtering should be at the top\n         vSeeds.emplace_back(\"testnet-seed.bitcoin.jonasschnelli.ch\", true);\n         vSeeds.emplace_back(\"seed.tbtc.petertodd.org\", true);\n-        vSeeds.emplace_back(\"testnet-seed.bluematt.me\");\n-        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\");\n+        vSeeds.emplace_back(\"testnet-seed.bluematt.me\", false);\n+        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\", false);\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);"
      },
      {
        "sha": "f55ae4cf7f068f8884f976c7a6c431bb7a778bcb",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1be28536467e90ce75eaa7d8c338f6485c4bee5/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1be28536467e90ce75eaa7d8c338f6485c4bee5/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=c1be28536467e90ce75eaa7d8c338f6485c4bee5",
        "patch": "@@ -17,7 +17,7 @@\n struct CDNSSeedData {\n     std::string host;\n     bool supportsServiceBitsFiltering;\n-    CDNSSeedData(const std::string &strHost, bool supportsServiceBitsFilteringIn = false) : host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n+    CDNSSeedData(const std::string &strHost, bool supportsServiceBitsFilteringIn) : host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n };\n \n struct SeedSpec6 {"
      }
    ]
  }
]