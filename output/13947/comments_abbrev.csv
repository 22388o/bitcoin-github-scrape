MarcoFalke,2018-08-12T14:49:30Z,"This is completely untested, so TODO:\n\n* add tests\n* use dandelion relay for our wallet txs",https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-412347828,412347828,
DrahtBot,2018-08-12T17:02:42Z,<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #14032 (Add p2p layer encryption with ECDH/ChaCha20Poly1305 by jonasschnelli)\n* #13946 (p2p: Clarify control flow in ProcessMessage by MarcoFalke)\n* #13743 (refactor: Replace std/boost::bind with lambda by ken2812221)\n* #13123 (net: Add Clang thread safety annotations for guarded ,https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-412356616,412356616,
sipa,2018-08-12T18:57:41Z,"This code doesn't seem to include a ""stempool""; how does it deal with dandelion transactions that depend on other dandelion transactions? ATMP will fail for those.",https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-412364201,412364201,
MarcoFalke,2018-08-12T20:02:45Z,"> This code doesn't seem to include a ""stempool""; how does it deal with dandelion transactions that depend on other dandelion transactions? ATMP will fail for those.\n\nContinued here https://botbot.me/freenode/bitcoin-core-dev/2018-08-12/?msg=103212266&page=2\nEDIT by ajtowns: http://www.erisian.com.au/bitcoin-core-dev/log-2018-08-12.html#l-190",https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-412368045,412368045,
DrahtBot,2018-08-25T16:40:26Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-415981527,415981527,
scravy,2018-09-19T08:22:56Z,Shouldn't the functional test from the reference implementation (https://github.com/dandelion-org/bitcoin/commit/d043e36bbe9249a78cf751c80b8d876b7d9f07ea#diff-21ab9447686d819eeeb7668ce8011e0d) run more-or-less unchanged on top of this branch?,https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-422705890,422705890,
jb55,2018-10-03T00:08:25Z,"These commits could be documented more in general, I'm finding it hard to review when there are no descriptions about what is being implemented.",https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-426470989,426470989,
AM5800,2018-10-09T12:01:52Z,"It has been mentioned several times that common stempool might leak dandelion routing information to an adversary. Can someone help me understand how exactly?\n\nAlso, what is the current status of this issue? I would like to offer some help. For example with tests",https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-428165411,428165411,
scravy,2018-10-09T12:30:34Z,@jb55 BIP156 should explain a lot of things.,https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-428173172,428173172,
jb55,2018-10-09T16:24:20Z,"@scravy I'm more interested in documentation of the implementation itself, how each commit relates to a part of the bip, etc. It's much harder to verify an implementation without that, especially with important privacy/security features. I don't think we should be making it harder on reviewers than it needs to be.",https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-428258554,428258554,
stevenroose,2018-10-09T17:30:31Z,"@jb55 Totally agree. All the non-trivial pieces of code should explain themselves, refer to the BIP when relevant, etc..",https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-428280624,428280624,
riclas,2019-02-04T13:03:10Z,"I believe this explanation of the DDoS possibilities on Dandelion by @sdaftuar belongs here:\nhttps://bitcoin.stackexchange.com/questions/81503/what-is-the-tradeoff-between-privacy-and-implementation-complexity-of-dandelion\n\nregarding option b), maybe dynamically adjusting stem % according to fullness of the stempool/cache could be a solution? at worst, we would fluff all the time just like a",https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-460242540,460242540,
MarcoFalke,2019-07-22T16:33:59Z,"I closed this for now because it is non-trivial to allow for all wallet behavior (e.g. cpfp and rbf) while not opening DOS vectors. I think a simpler first step would be to go for ""Dandelion Light"" or ""Dandelion one-hop"".\n\nThat approach would not need any DOS protection, since the only sender is our own wallet and the next hop would already fluff the tx (and send it back to us, so that our wal",https://github.com/bitcoin/bitcoin/pull/13947#issuecomment-513858189,513858189,
practicalswift,2018-08-12T14:50:34Z,Any drawbacks from uncommenting the `GUARDED_BY(â€¦)` annotation?,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209457937,209457937,src/net.h
MarcoFalke,2018-08-12T15:05:26Z,The drawback was that it didn't compile for me,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209458447,209458447,src/net.h
practicalswift,2018-08-12T15:08:07Z,"Should `-dandelion=100` generate an error message? From the error message it looks like it should, but not from the logic :-)",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209458535,209458535,src/init.cpp
MarcoFalke,2018-08-12T15:10:30Z,"100% is allowed to always extend the stem by one hop. So the interval is [0, 100]. ",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209458598,209458598,src/init.cpp
clodhopp,2018-08-12T18:44:34Z,Link https://github.com/bitcoin/bips/blob/master/bip-0156.mediawiki gives error 404 page not found.,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209464321,209464321,doc/bips.md
meshcollider,2018-08-13T07:38:29Z,"@clodhopp that's because the BIP PR hasn't been merged, you can see it here: https://github.com/bitcoin/bips/pull/703\nOnce merged, the link should work",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209514909,209514909,doc/bips.md
practicalswift,2018-08-13T07:42:44Z,Then the error message should be `-dandelion must be 0 or a percentage up to 100` or something equivalent?,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209515761,209515761,src/init.cpp
sdaftuar,2018-08-13T15:35:47Z,"Do we use `SoftSetBoolArg()` like this elsewhere, on arguments that take numeric values?  It was not clear to me that this worked until I saw that SoftSetBoolArg converts the `false` to `std::string(""0"")`.  (Neat, though.)",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209656514,209656514,src/init.cpp
sdaftuar,2018-08-13T19:03:21Z,nit: IsEphemeral,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209723064,209723064,src/net.h
sdaftuar,2018-08-13T19:07:43Z,"Some IRC discussion around not extending whitelist-relay behavior further with dandelion processing:\nhttps://botbot.me/freenode/bitcoin-core-dev/2018-08-13/?msg=103271568&page=3",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209724300,209724300,src/net_processing.cpp
sdaftuar,2018-08-13T19:11:01Z,See above comment about dropping this behavior for whitelisted peers.,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209725200,209725200,src/net_processing.cpp
sdaftuar,2018-08-13T19:23:54Z,"I think in the past, we've usually bumped the protocol version when introducing new p2p messages so that we only send the new messages (like ACCEPT_DANDELION) to peers that are signaling that they've upgraded.  Not sure how important that is...",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209728695,209728695,src/protocol.h
MarcoFalke,2018-08-13T20:09:23Z,Note that we'd never send a `TX_DANDELION` to a peer that never sent us `ACCEPT_DANDELION` in the first place. So I don't think this is an issue at all. ,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r209741626,209741626,src/protocol.h
sdaftuar,2018-08-14T16:32:46Z,"Perhaps my comment was not placed on the right line of this file; I was thinking of the dandelionacc message.  With sendheaders and I think compact blocks, I believe we bumped the protocol version and only tried to send the new p2p messages (even for handshaking/negotiating the protocol to use) to peers with that higher version?",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r210019853,210019853,src/protocol.h
MarcoFalke,2018-08-14T16:55:22Z,"Good point. I think it is a lot easier to do this without enforcing a global network version bump.\n\nNote that the `dandelionacc` message is properly read by all nodes that implement dandelion (regardless of their network protocol version) or choose to ignore that message. And for all other nodes (that are completely unaware of dandelion) they simply treat this as unknown message (once per conn",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r210027127,210027127,src/protocol.h
sdaftuar,2018-08-14T19:25:14Z,"I think we should queue transactions for relay to a peer, rather than doing a direct send as is done here.  Otherwise transaction relay can fill up our send buffers and delay block relay.\n\nFurther our current transaction relay system batches transactions for relay and, at each broadcast time, we sort the to-be-relayed transactions for the purposes of prioritising transactions that have fewer a",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r210074699,210074699,src/net_processing.cpp
MarcoFalke,2018-08-14T21:10:39Z,Should write something to debug log here.,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r210104883,210104883,src/net_processing.cpp
gmaxwell,2018-08-15T06:55:29Z,it's also better for privacy against traffic analysis to batch things.,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r210184480,210184480,src/net_processing.cpp
stevenroose,2018-08-20T13:09:20Z,"A simple ""probability"" should a number between 0 and 1. The variable used as default and the code below suggest a percentage is used instead. I think it would make sense to document it as such as well.",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211254726,211254726,src/init.cpp
stevenroose,2018-08-20T13:10:30Z,"Just to not mix up values, this should set 0 instead of false, even if false would be converted automatically to 0.",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211255070,211255070,src/init.cpp
stevenroose,2018-08-20T13:37:04Z,"This check should not be necessary, failing it means there's a bug. I'd suggest either using an assertion or something more severe than this or just removing the check.",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211263670,211263670,src/net.cpp
stevenroose,2018-08-20T14:15:55Z,Please elaborate a bit more on the documentation of the integer.,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211277688,211277688,src/net.h
stevenroose,2018-08-20T15:18:28Z,The convention seems to be `XXX_INTERVAL` instead of `INTERVAL_XXX`.,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211300812,211300812,src/net.h
stevenroose,2018-08-20T18:10:02Z,"First, I think this test should be performed as well for Dandelion advertising peers, because they could otherwise deny you service. Furthermore, I think it might be more useful to have a threshold time of last relay instead of just one. Like ""relayed tx in last minute"".\n\nWith this, a peer could advertise dandelion and never relay anything.",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211357301,211357301,src/net.cpp
stevenroose,2018-08-20T18:30:50Z,"Please explain how this variable is used and why. I fail to see its function.\n\nAlso since peers are checked with `min_use > peer.second`, this is an upper limit, not a lower limit. Making the name `min_use` not very telling. ",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211363696,211363696,src/net.cpp
stevenroose,2018-08-20T18:40:30Z,I think this method could use some documentation on the strategy/algorithm used to assign destinations.,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211366556,211366556,src/net.cpp
stevenroose,2018-08-20T18:50:42Z,"Why 90? This is like the most important parameter of the dandelion algorithm, I think it deserves some motivation..",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211369684,211369684,src/net.h
stevenroose,2018-08-20T18:50:56Z,"Also, why 10 minutes?",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211369762,211369762,src/net.h
stevenroose,2018-08-20T19:06:49Z,Perhaps mention txid?,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211374669,211374669,src/net_processing.cpp
stevenroose,2018-08-20T19:09:43Z,Should this check also be made for the wallet's own transactions? Or should a forced non-fluff be done in that case?,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211375470,211375470,src/net_processing.cpp
stevenroose,2018-08-20T19:15:16Z,Wrong indentation since after return.,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211376927,211376927,src/net_processing.cpp
stevenroose,2018-08-20T19:37:05Z,Why not a service bit?,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211382478,211382478,src/protocol.h
practicalswift,2018-08-20T23:23:29Z,"I was thinking about this as well: normally Iâ€™d expect a probability parameter to be in the interval `[0.0, 1.0]`. Are we trying to be consistent with other parameters taking probabilities as `[0, 100]` here, or what is the rationale? :-)",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r211437320,211437320,src/init.cpp
Sjors,2018-09-02T11:28:01Z,"@stevenroose the [BIP specifies](https://github.com/bitcoin/bips/blob/master/bip-0156.mediawiki#the-fluff-mechanism) that:\n\n> When relaying a Dandelion transaction along a Dandelion route, there is a 10% chance that the Dandelion transaction becomes a typical Bitcoin transaction and is therefore relayed via diffusion.",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r214537255,214537255,src/net.h
Sjors,2018-09-02T11:29:02Z,@stevenroose as per the BIP: https://github.com/bitcoin/bips/blob/master/bip-0156.mediawiki#periodic-dandelion-route-shuffling (the value suggested in the BIP is best discussed on the bitcoin-dev mailinglist),https://github.com/bitcoin/bitcoin/pull/13947#discussion_r214537288,214537288,src/net.h
stevenroose,2018-09-04T08:59:56Z,@Sjors So I'd suggest referring to the BIP in the comment of that variable.,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r214837714,214837714,src/net.h
stevenroose,2018-09-04T09:01:08Z,"@Sjors this would do:\n`/** As per BIP156, pick new dandelion peers once every 10 minutes or 600 seconds. */`",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r214838158,214838158,src/net.h
stevenroose,2018-09-04T09:04:10Z,"What I'm trying to say with this comments is that this is supposed to be an implementation of the BIP, so it should refer to the BIP for logic/params etc. It has happened too often that a BIP is just a description of the implementation.",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r214839094,214839094,src/net.h
rodasmith,2018-09-30T23:10:01Z,Why ignore inbound nodes? Does this mean non-listening dandelion nodes send only their own transactions and that the peer who receives such will know with undeniable certainty that the non-listening node initiated the transaction?,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r221477053,221477053,src/net.cpp
instagibbs,2018-10-03T01:27:59Z,"Inbound nodes are much more likely to be snooping peers.\n\n",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r222159317,222159317,src/net.cpp
kek-coin,2018-10-03T06:15:38Z,"While that is true, aren't there solutions that do not make dandelion break firewalled nodes' privacy? For example, send only to outgoing peers if you originated the transaction, but send to incoming as well for forwarded txes? Perhaps weigh the outgoing peers more heavily than incoming peers when selecting a random peer to forward to (either by assigning a weight to individual peers based on inco",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r222193420,222193420,src/net.cpp
stevenroose,2018-10-03T14:57:32Z,"If that is the case, it should at least be mentioned in the help line. \n\n> Probability in % to extend ..",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r222344944,222344944,src/init.cpp
AM5800,2018-10-25T07:52:10Z,Maybe it is better to create a struct? This integer will look much better with a name. It is very hard to read all those `peer.first` and `peer.second`,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r228066955,228066955,src/net.h
AM5800,2018-10-25T07:57:04Z,"I was wandering... FluffTransaction is logically equivalent to receiving a transaction, right?\nThen shouldn't we also execute all [this code](https://github.com/bitcoin/bitcoin/blob/423cb37658b81b2cb8475b6fdb08b3122fee51a4/src/net_processing.cpp#L2190) on fluff? \n",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r228068484,228068484,src/net_processing.cpp
AM5800,2018-10-25T08:05:34Z,When I tried this PR in action - dandelion was turned off for the first epoch. I believe this happens because we do the very first shuffle when there are no connections. Maybe the first shuffle should be delayed until someone connects?,https://github.com/bitcoin/bitcoin/pull/13947#discussion_r228071077,228071077,src/net.cpp
AM5800,2018-10-25T08:17:17Z,"An idea: if you define `m_cache_expiry` as `std::map<int64_t, CTransactionRef>` - you will get the same 'Constant time lookup' but you won't need to walk the whole cache - expired transactions are already available",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r228074480,228074480,src/net_processing.cpp
AM5800,2018-10-25T08:22:39Z,"Nit:\n`node_from->m_cache_dandelion.emplace(ptx->GetWitnessHash(), std::make_pair(ptx, expiry))`\ndoes absolutely the same, but shorter.",https://github.com/bitcoin/bitcoin/pull/13947#discussion_r228076220,228076220,src/net_processing.cpp
