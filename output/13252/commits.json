[
  {
    "sha": "4b62bdf5136c174621509bf7866fbd89b61cc66a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjYyYmRmNTEzNmMxNzQ2MjE1MDliZjc4NjZmYmQ4OWI2MWNjNjZh",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-17T01:56:41Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-17T05:58:02Z"
      },
      "message": "Wallet: Refactor ReserveKeyFromKeyPool for safety\n\nReserveKeyFromKeyPool's previous behaviour is to set nIndex to -1 if the keypool is\nempty, OR throw an exception for technical failures. Instead, we now return false\nif the keypool is empty, true if the operation succeeded.\n\nThis is to make failure more easily detectable by calling code.",
      "tree": {
        "sha": "01a82019101ea3506ca91ad50026484fe1654102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01a82019101ea3506ca91ad50026484fe1654102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b62bdf5136c174621509bf7866fbd89b61cc66a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlr9GewACgkQTYykuhgE\nCQZlRw//UbER4tDpGGbler2qBNWUqhKfmw2latz4lMvjXjG/9hNJaWbMFhY9MX7z\nOsGtiEUrpOmu7M8O+jS3NTtUUvoBfnIGiKjfnzWMapuqTlrjmscJDwTpmB8d9z57\nQ0QaYERkGsNil1uwtNppPzVbfgc8fNVhJktOHRq4D5AtHsFXdp8mHu4YW1GZ45EE\nt8Y3ODlv0UgGRAtbga2FhNEIqCnBamf+tIB6ObU/sr3P2lAxyOgV3kDOKidhUWUX\nW8vBw0X4d+MzVT5Tn+QTgqehqTWIevnCyuPWn03w30L7jYAkFQDrayHPg+nFTXr9\nwWxyJLAJuT1vUtdDSuOr8u9gqo22a4AmZu1egWBWwnOxLTowOy1mqhJ0NB5xAY9Q\nDyLRLUENmqBWvPsiYyN5toB2I0ip8UMD3SwFIru2Pmpx6uq2HL/i7Lz0wSebH/nF\niJwnLsQFxLm+dTJv4lBzdZXRBOlVO0eqbJAd9Ya7sLaEpkhddIvGM3bDVPN3vtP5\ngF88xRIHcXO4/GtyprVXbAeSgaXON9GfsBmbV1yzw924FyustvpuNvgtOwXC3t3a\n6oHhDI82Yt/kuNn2waWL8IvuT3AIG6jtFcKAWCCVxvlR8qeV2R62B0F1r2njDy0A\n/X3VqiK1lBmt5pzspw7mtYI45VLabEJPUEKqCxW0WrOrqPRATAE=\n=Z/gV\n-----END PGP SIGNATURE-----",
        "payload": "tree 01a82019101ea3506ca91ad50026484fe1654102\nparent 4cfe17c3382ba750131cdc8703b2978132822070\nauthor Ben Woosley <ben.woosley@gmail.com> 1526522201 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1526536682 -0700\n\nWallet: Refactor ReserveKeyFromKeyPool for safety\n\nReserveKeyFromKeyPool's previous behaviour is to set nIndex to -1 if the keypool is\nempty, OR throw an exception for technical failures. Instead, we now return false\nif the keypool is empty, true if the operation succeeded.\n\nThis is to make failure more easily detectable by calling code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b62bdf5136c174621509bf7866fbd89b61cc66a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b62bdf5136c174621509bf7866fbd89b61cc66a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b62bdf5136c174621509bf7866fbd89b61cc66a/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cfe17c3382ba750131cdc8703b2978132822070",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cfe17c3382ba750131cdc8703b2978132822070",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cfe17c3382ba750131cdc8703b2978132822070"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 31,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4a35474f1dbb113cc3dcf7b1204a37ad38aea40f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b62bdf5136c174621509bf7866fbd89b61cc66a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b62bdf5136c174621509bf7866fbd89b61cc66a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4b62bdf5136c174621509bf7866fbd89b61cc66a",
        "patch": "@@ -3427,7 +3427,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return true;\n }\n \n-void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n+bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n {\n     nIndex = -1;\n     keypool.vchPubKey = CPubKey();\n@@ -3438,11 +3438,13 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n             TopUpKeyPool();\n \n         bool fReturningInternal = IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT) && fRequestedInternal;\n-        std::set<int64_t>& setKeyPool = set_pre_split_keypool.empty() ? (fReturningInternal ? setInternalKeyPool : setExternalKeyPool) : set_pre_split_keypool;\n+        bool use_split_keypool = set_pre_split_keypool.empty();\n+        std::set<int64_t>& setKeyPool = use_split_keypool ? (fReturningInternal ? setInternalKeyPool : setExternalKeyPool) : set_pre_split_keypool;\n \n         // Get the oldest key\n-        if(setKeyPool.empty())\n-            return;\n+        if (setKeyPool.empty()) {\n+            return false;\n+        }\n \n         WalletBatch batch(*database);\n \n@@ -3456,14 +3458,17 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n             throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         }\n         // If the key was pre-split keypool, we don't care about what type it is\n-        if (set_pre_split_keypool.size() == 0 && keypool.fInternal != fReturningInternal) {\n+        if (use_split_keypool && keypool.fInternal != fReturningInternal) {\n             throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n         }\n+        if (!keypool.vchPubKey.IsValid()) {\n+            throw std::runtime_error(std::string(__func__) + \": keypool entry invalid\");\n+        }\n \n-        assert(keypool.vchPubKey.IsValid());\n         m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n         LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n+    return true;\n }\n \n void CWallet::KeepKey(int64_t nIndex)\n@@ -3496,10 +3501,8 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n     CKeyPool keypool;\n     {\n         LOCK(cs_wallet);\n-        int64_t nIndex = 0;\n-        ReserveKeyFromKeyPool(nIndex, keypool, internal);\n-        if (nIndex == -1)\n-        {\n+        int64_t nIndex;\n+        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n             if (IsLocked()) return false;\n             WalletBatch batch(*database);\n             result = GenerateNewKey(batch, internal);\n@@ -3701,12 +3704,10 @@ bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal);\n-        if (nIndex != -1)\n-            vchPubKey = keypool.vchPubKey;\n-        else {\n+        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n             return false;\n         }\n+        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n     assert(vchPubKey.IsValid());"
      },
      {
        "sha": "5e05ed3c84413b36a2c1d00b3f722a180aae610c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b62bdf5136c174621509bf7866fbd89b61cc66a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b62bdf5136c174621509bf7866fbd89b61cc66a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4b62bdf5136c174621509bf7866fbd89b61cc66a",
        "patch": "@@ -999,7 +999,22 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n     void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);"
      }
    ]
  }
]