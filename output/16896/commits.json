[
  {
    "sha": "a539bc67d34b0a3ee3369afed6d445c0dac752e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTM5YmM2N2QzNGIwYTNlZTMzNjlhZmVkNmQ0NDVjMGRhYzc1MmU2",
    "commit": {
      "author": {
        "name": "Rene Pickhardt",
        "email": "rpickhardt@gmail.com",
        "date": "2019-09-17T11:31:49Z"
      },
      "committer": {
        "name": "Rene Pickhardt",
        "email": "rpickhardt@gmail.com",
        "date": "2019-09-17T11:31:49Z"
      },
      "message": "replaced hard coded folders with os.path.join and replaced os.path.sep in regex to fix the firstGoodIssue #16894 (which I discovered with carldongs firstGoodIssueTwitter bot)",
      "tree": {
        "sha": "6f1463cc4fd01aeb5657a0a5a0e297d2725f61df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f1463cc4fd01aeb5657a0a5a0e297d2725f61df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a539bc67d34b0a3ee3369afed6d445c0dac752e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a539bc67d34b0a3ee3369afed6d445c0dac752e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a539bc67d34b0a3ee3369afed6d445c0dac752e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a539bc67d34b0a3ee3369afed6d445c0dac752e6/comments",
    "author": {
      "login": "renepickhardt",
      "id": 1926816,
      "node_id": "MDQ6VXNlcjE5MjY4MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1926816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/renepickhardt",
      "html_url": "https://github.com/renepickhardt",
      "followers_url": "https://api.github.com/users/renepickhardt/followers",
      "following_url": "https://api.github.com/users/renepickhardt/following{/other_user}",
      "gists_url": "https://api.github.com/users/renepickhardt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/renepickhardt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/renepickhardt/subscriptions",
      "organizations_url": "https://api.github.com/users/renepickhardt/orgs",
      "repos_url": "https://api.github.com/users/renepickhardt/repos",
      "events_url": "https://api.github.com/users/renepickhardt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/renepickhardt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "renepickhardt",
      "id": 1926816,
      "node_id": "MDQ6VXNlcjE5MjY4MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1926816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/renepickhardt",
      "html_url": "https://github.com/renepickhardt",
      "followers_url": "https://api.github.com/users/renepickhardt/followers",
      "following_url": "https://api.github.com/users/renepickhardt/following{/other_user}",
      "gists_url": "https://api.github.com/users/renepickhardt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/renepickhardt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/renepickhardt/subscriptions",
      "organizations_url": "https://api.github.com/users/renepickhardt/orgs",
      "repos_url": "https://api.github.com/users/renepickhardt/repos",
      "events_url": "https://api.github.com/users/renepickhardt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/renepickhardt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f18a9065e91163b0238fc005d693b0d961116855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f18a9065e91163b0238fc005d693b0d961116855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f18a9065e91163b0238fc005d693b0d961116855"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 35,
      "deletions": 19
    },
    "files": [
      {
        "sha": "c701e3d2445b504c3481c626bad55274035a51ae",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 35,
        "deletions": 19,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a539bc67d34b0a3ee3369afed6d445c0dac752e6/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a539bc67d34b0a3ee3369afed6d445c0dac752e6/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=a539bc67d34b0a3ee3369afed6d445c0dac752e6",
        "patch": "@@ -24,10 +24,12 @@\n TMPDIR_PREFIX = \"bitcoin_func_test_\"\n \n # Matches on the date format at the start of the log event\n-TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{6})?Z\")\n+TIMESTAMP_PATTERN = re.compile(\n+    r\"^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{6})?Z\")\n \n LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n \n+\n def main():\n     \"\"\"Main function. Parses args, reads the log files and renders them as text or html.\"\"\"\n     parser = argparse.ArgumentParser(\n@@ -36,8 +38,10 @@ def main():\n         'testdir', nargs='?', default='',\n         help=('temporary test directory to combine logs from. '\n               'Defaults to the most recent'))\n-    parser.add_argument('-c', '--color', dest='color', action='store_true', help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n-    parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n+    parser.add_argument('-c', '--color', dest='color', action='store_true',\n+                        help='outputs the combined log with events colored by source (requires posix terminal colors. Use less -r for viewing)')\n+    parser.add_argument('--html', dest='html', action='store_true',\n+                        help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n     args = parser.parse_args()\n \n     if args.html and args.color:\n@@ -51,7 +55,8 @@ def main():\n         sys.exit(1)\n \n     if not args.testdir:\n-        print(\"Opening latest test directory: {}\".format(testdir), file=sys.stderr)\n+        print(\"Opening latest test directory: {}\".format(\n+            testdir), file=sys.stderr)\n \n     colors = defaultdict(lambda: '')\n     if args.color:\n@@ -78,16 +83,21 @@ def read_logs(tmp_dir):\n     for each of the input log files.\"\"\"\n \n     # Find out what the folder is called that holds the debug.log file\n-    chain = glob.glob(\"{}/node0/*/debug.log\".format(tmp_dir))\n+\n+    chain = glob.glob(os.path.join(tmp_dir, \"node0\", \"*\", \"debug.log\"))\n     if chain:\n-        chain = chain[0]  # pick the first one if more than one chain was found (should never happen)\n-        chain = re.search(r'node0/(.+?)/debug\\.log$', chain).group(1)  # extract the chain name\n+        # pick the first one if more than one chain was found (should never happen)\n+        chain = chain[0]\n+        sep = os.path.sep\n+        chain = re.search(r'node0' + sep + '(.+?)' + sep +\n+                          'debug\\.log$', chain).group(1)  # extract the chain name\n     else:\n-        chain = 'regtest'  # fallback to regtest (should only happen when none exists)\n+        # fallback to regtest (should only happen when none exists)\n+        chain = 'regtest'\n \n-    files = [(\"test\", \"%s/test_framework.log\" % tmp_dir)]\n+    files = [(\"test\", os.path.join(tmp_dir, \"test_framework.log\"))]\n     for i in itertools.count():\n-        logfile = \"{}/node{}/{}/debug.log\".format(tmp_dir, i, chain)\n+        logfile = os.path.join(tmp_dir, \"node{}\".format(i), chain, \"debug.log\")\n         if not os.path.isfile(logfile):\n             break\n         files.append((\"node%d\" % i, logfile))\n@@ -101,18 +111,21 @@ def print_node_warnings(tmp_dir, colors):\n     warnings = []\n     for stream in ['stdout', 'stderr']:\n         for i in itertools.count():\n-            folder = \"{}/node{}/{}\".format(tmp_dir, i, stream)\n+            folder = os.path.join(tmp_dir, \"node{}\".format(i), stream)\n             if not os.path.isdir(folder):\n                 break\n             for (_, _, fns) in os.walk(folder):\n                 for fn in fns:\n-                    warning = pathlib.Path('{}/{}'.format(folder, fn)).read_text().strip()\n+                    warning = pathlib.Path(os.path.join(\n+                        folder, fn)).read_text().strip()\n                     if warning:\n-                        warnings.append((\"node{} {}\".format(i, stream), warning))\n+                        warnings.append(\n+                            (\"node{} {}\".format(i, stream), warning))\n \n     print()\n     for w in warnings:\n-        print(\"{} {} {} {}\".format(colors[w[0].split()[0]], w[0], w[1], colors[\"reset\"]))\n+        print(\"{} {} {} {}\".format(\n+            colors[w[0].split()[0]], w[0], w[1], colors[\"reset\"]))\n \n \n def find_latest_test_dir():\n@@ -169,17 +182,20 @@ def get_log_events(source, logfile):\n             # Flush the final event\n             yield LogEvent(timestamp=timestamp, source=source, event=event.rstrip())\n     except FileNotFoundError:\n-        print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n+        print(\"File %s could not be opened. Continuing without it.\" %\n+              logfile, file=sys.stderr)\n \n \n def print_logs_plain(log_events, colors):\n     \"\"\"Renders the iterator of log events into text.\"\"\"\n     for event in log_events:\n         lines = event.event.splitlines()\n-        print(\"{0} {1: <5} {2} {3}\".format(colors[event.source.rstrip()], event.source, lines[0], colors[\"reset\"]))\n+        print(\"{0} {1: <5} {2} {3}\".format(\n+            colors[event.source.rstrip()], event.source, lines[0], colors[\"reset\"]))\n         if len(lines) > 1:\n             for line in lines[1:]:\n-                print(\"{0}{1}{2}\".format(colors[event.source.rstrip()], line, colors[\"reset\"]))\n+                print(\"{0}{1}{2}\".format(\n+                    colors[event.source.rstrip()], line, colors[\"reset\"]))\n \n \n def print_logs_html(log_events):\n@@ -190,8 +206,8 @@ def print_logs_html(log_events):\n         print(\"jinja2 not found. Try `pip install jinja2`\")\n         sys.exit(1)\n     print(jinja2.Environment(loader=jinja2.FileSystemLoader('./'))\n-                    .get_template('combined_log_template.html')\n-                    .render(title=\"Combined Logs from testcase\", log_events=[event._asdict() for event in log_events]))\n+          .get_template('combined_log_template.html')\n+          .render(title=\"Combined Logs from testcase\", log_events=[event._asdict() for event in log_events]))\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]