DrahtBot,2019-10-07 18:34:06,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17229](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17229.html) (tests: Add fuzzing harnesses for various Ba",https://github.com/bitcoin/bitcoin/pull/17071#issuecomment-539146312,539146312,
practicalswift,2019-10-24 21:28:10,Rebased! :),https://github.com/bitcoin/bitcoin/pull/17071#issuecomment-546110905,546110905,
practicalswift,2019-10-31 14:14:15,Rebased and added a fuzzing harness for `ContextualCheckBlock(…)`.,https://github.com/bitcoin/bitcoin/pull/17071#issuecomment-548395365,548395365,
practicalswift,2019-10-31 15:24:53,"@MarcoFalke \n\n~~When fuzzing `BlockWitnessMerkleRoot(…)` I noticed that `leaves[0].SetNull()` is done also in the case when `leaves.empty()` (due to `block.vtx.empty()`):~~\n\nhttps://github.com/bitcoin/bitcoin/blob/d0f81a96d9c158a9226dc946bdd61d48c4d42959/src/consensus/merkle.cpp#L75-L84\n\n~~Makes sense to guard against this? :)~~\n\nUpdate: Working around this by simply skipping the c",https://github.com/bitcoin/bitcoin/pull/17071#issuecomment-548429104,548429104,
practicalswift,2019-12-06 09:09:34,Rebased! :),https://github.com/bitcoin/bitcoin/pull/17071#issuecomment-562493236,562493236,
practicalswift,2019-12-09 20:30:59,Rebased! :),https://github.com/bitcoin/bitcoin/pull/17071#issuecomment-563424134,563424134,
practicalswift,2019-12-10 21:35:55,Should be ready for final review :),https://github.com/bitcoin/bitcoin/pull/17071#issuecomment-564269477,564269477,
MarcoFalke,2019-12-13 17:01:31,ACK c5d08da5c38e4140f4b9465f3e8159bcd7874ab2,https://github.com/bitcoin/bitcoin/pull/17071#issuecomment-565520404,565520404,
MarcoFalke,2019-10-07 14:49:09,"In commit 115bafe488ef0c53a88c2bc1e1b0508867c1daa8:\n\nNot sure if we want to pick regtest for all tests. I'd argue to pick main.\n\nOr maybe leave it to the individual tests to pick the params? This will result in a (slight) run time cost, but might make the code more clear?",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r332063071,332063071,src/test/fuzz/fuzz.cpp
MarcoFalke,2019-10-07 14:49:40,Just 2019? ;),https://github.com/bitcoin/bitcoin/pull/17071#discussion_r332063352,332063352,src/test/fuzz/block.cpp
MarcoFalke,2019-10-07 14:50:22,"style-nit: Could use named arguments?\n\n```cpp\n/* bla */ true, /* foo */ false",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r332063764,332063764,src/test/fuzz/block.cpp
practicalswift,2019-10-07 15:39:51,"It not always entirely clear which functions that indirectly depend on params being selected and the requirement can be quite far down in the call graph.\n\nAn example is from when I fuzzed `EvalDescriptorStringOrObject`:\n\nWhen using [this harness](https://github.com/bitcoin/bitcoin/blob/f27f6b0da9491e761274ba95fe15381524542bdf/src/test/fuzz/parse_univalue.cpp) the fuzzer managed to create t",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r332092088,332092088,src/test/fuzz/fuzz.cpp
MarcoFalke,2019-10-07 15:49:11,"I'd rather want to test against a (clean-as-possible) mainnet, than a testnet. However, some tests might want to use segwit or lower difficulty blocks, which is enabled only on regtest from genesis.\n\nI think the choice really depends on each individual test.\n\nI see that you run into a particular issue with the chainparams, but similarly a fuzzer might find a code path that requires connman",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r332097080,332097080,src/test/fuzz/fuzz.cpp
practicalswift,2019-10-07 15:58:05,My fuzzing experience is that chainparams requirements are more scattered across the code base compared to connman and mempool requirements and thus more likely to trip on accidentally. Perhaps we can take the pick-level-of-initialization stuff in a follow-up PR?,https://github.com/bitcoin/bitcoin/pull/17071#discussion_r332101794,332101794,src/test/fuzz/fuzz.cpp
MarcoFalke,2019-10-07 16:04:26,Let's wait to see other people's opinion on this,https://github.com/bitcoin/bitcoin/pull/17071#discussion_r332104975,332104975,src/test/fuzz/fuzz.cpp
practicalswift,2019-10-16 20:51:55,"Feedback addressed. Now allowing individual tests to pick the params.\n\nPicking `regtest` for this override. `regtest` feels like the least risky option in case of fuzzer gone haywire. Think about the theoretical scenario of a fuzzer say writing to disk for some strange reason. Also nice with low difficulty :)\n\nPlease re-review. ",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r335702700,335702700,src/test/fuzz/fuzz.cpp
MarcoFalke,2019-12-09 20:42:05,"You removed the compilation of this target, but not the code. Maybe it is better to leave the target and compile it for now.",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r355673071,355673071,src/Makefile.test.include
practicalswift,2019-12-09 21:49:35,"Oh, good catch! Thanks! Now leaving the target instead.",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r355703891,355703891,src/Makefile.test.include
MarcoFalke,2019-12-11 18:17:19,"I'd prefer to put this in the header. Otherwise, the signature might get out of date with compiler annotations.",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r356756648,356756648,src/test/fuzz/block.cpp
practicalswift,2019-12-11 18:21:32,Good point! I'll fix.,https://github.com/bitcoin/bitcoin/pull/17071#discussion_r356758515,356758515,src/test/fuzz/block.cpp
practicalswift,2019-12-11 23:04:14,Fixed! Please re-review :),https://github.com/bitcoin/bitcoin/pull/17071#discussion_r356882775,356882775,src/test/fuzz/block.cpp
MarcoFalke,2019-12-13 17:06:20,"in commit c5d08da5c38e4140f4b9465f3e8159bcd7874ab2:\n\nOn a second thought I am not sure if it makes sense to expose this internal function for the sole purpose to pass a nullptr to it, which makes it execute pretty much no code paths anyway. Also, passing a nullptr never happens in reality.",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r357742842,357742842,src/test/fuzz/block.cpp
practicalswift,2019-12-13 23:39:19,"OK, reverted to previous version (see https://github.com/bitcoin/bitcoin/pull/17071#discussion_r356756648).\n\nPlease re-review :)",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r357872003,357872003,src/test/fuzz/block.cpp
MarcoFalke,2019-12-15 17:50:15,"I think there is a trade-off of unit and fuzz testing of internal functions that are not exposed in the header. In this particular instance `pindex_prev` is passed as a nullptr to `ContextualCheckBlock`, which then runs almost no code  paths anyway. Not sure what the potential gains are of testing something that can never happen in reality.",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r357994586,357994586,src/test/fuzz/block.cpp
practicalswift,2019-12-15 21:41:46,"OK, dropped called to `ContextualCheckBlock`. Please re-review :)",https://github.com/bitcoin/bitcoin/pull/17071#discussion_r358008002,358008002,src/test/fuzz/block.cpp
