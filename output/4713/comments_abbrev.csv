4tar,2014-08-17T06:09:35Z,"In my local testing this patch can improve b58 encoding performance by around 85%, it doesn't achieve the 100% theoretical gain due to extra comparing ops introduced in the iteration..\n",https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-52414551,52414551,
luke-jr,2014-08-17T06:27:40Z,"How does this compare with luke-jr/bfgminer#540's implementation? About the same? I was thinking we should throw the C base58 encode/decode in a simple, small, library, and just use it in both.\n",https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-52414782,52414782,
4tar,2014-08-17T06:34:12Z,"@luke-jr They are actually the same, just C/C++ implementation.\n",https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-52414866,52414866,
sipa,2014-08-17T11:40:17Z,"I wanted to avoid complicating the code for something so little performance critical, but I'm fine with improving it.\n\nHow was this benchmarked? Large number of address-sized data, or very large amounts of data to convert? I would expect the actual conversion loop to be fast compared to other overhead.\n",https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-52419686,52419686,
sipa,2014-08-17T11:41:29Z,"Also, decoding can get the same optimization.\n",https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-52419715,52419715,
laanwj,2014-08-17T12:36:15Z,Not sure about this. We don't have a requirement for high-performance base58 encoding and decoding in bitcoin core. I'd like to avoid over-optimizing things not on the critical path. Security and ease of understanding is more important here.\n,https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-52420765,52420765,
4tar,2014-08-17T13:46:14Z,"@sipa The testing was done by encoding address-sized data for many times, so it should bring performance gain in real cases.\n\n@laanwj Sure, I fully understand we don't really need optimize the encoding/decoding since it's not critical for the app...\n",https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-52422248,52422248,
luke-jr,2014-08-17T14:41:58Z,"FWIW, I've imported the C version to https://github.com/luke-jr/libbase58 , which could be used either as a shared library or a subtree.\n",https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-52423699,52423699,
BitcoinPullTester,2014-08-18T16:15:55Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4713_f2c3cb626e37542d0cedd958e2bcc3b7d6c71938/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-52515537,52515537,
laanwj,2014-09-25T07:56:39Z,"Closing this; sorry for that, but as said optimizing base58 is not that critical for us, and I don't like the risk of the extra complexity introducing a subtle bug.\n",https://github.com/bitcoin/bitcoin/pull/4713#issuecomment-56785988,56785988,
