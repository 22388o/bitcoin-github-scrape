[
  {
    "sha": "f62c6087a2681f568c18f2db05147f227dd06d5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjJjNjA4N2EyNjgxZjU2OGMxOGYyZGIwNTE0N2YyMjdkZDA2ZDVi",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-06-22T21:33:05Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-06-24T15:54:12Z"
      },
      "message": "New RPC calls: monitortx monitorblocks listmonitored getblock\nmonitortx/monitorblocks: POST JSON-RPC to a URL when new wallet transactions or blocks are received.\nlistmonitored: list URLS that will be POSTed to\ngetblock: get information about a block, given depth in main chain.",
      "tree": {
        "sha": "d263cd5962cd0019024e204624d345c115decdea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d263cd5962cd0019024e204624d345c115decdea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f62c6087a2681f568c18f2db05147f227dd06d5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62c6087a2681f568c18f2db05147f227dd06d5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f62c6087a2681f568c18f2db05147f227dd06d5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62c6087a2681f568c18f2db05147f227dd06d5b/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1179257bfd1d0f7742d57449b37c40c28464f152",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1179257bfd1d0f7742d57449b37c40c28464f152",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1179257bfd1d0f7742d57449b37c40c28464f152"
      }
    ],
    "stats": {
      "total": 527,
      "additions": 453,
      "deletions": 74
    },
    "files": [
      {
        "sha": "9980ddf6db4189037f91f64d0c4f6d2eb28ffb28",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -807,6 +807,9 @@ bool CWalletDB::LoadWallet(CWallet* pwallet)\n                 if (strKey == \"fMinimizeOnClose\")   ssValue >> fMinimizeOnClose;\n                 if (strKey == \"fUseProxy\")          ssValue >> fUseProxy;\n                 if (strKey == \"addrProxy\")          ssValue >> addrProxy;\n+                if (strKey == \"monitor_block\")      ssValue >> setMonitorBlocks;\n+                if (strKey == \"monitor_tx\")         ssValue >> setMonitorTx;\n+\n                 if (fHaveUPnP && strKey == \"fUseUPnP\")           ssValue >> fUseUPnP;\n             }\n         }"
      },
      {
        "sha": "b19ba7d245ba3fcc69571bd524cb3d4f131f61bc",
        "filename": "src/headers.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/headers.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/headers.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/headers.h?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -55,6 +55,7 @@\n #include <list>\n #include <deque>\n #include <map>\n+#include <numeric>\n \n #include <boost/foreach.hpp>\n "
      },
      {
        "sha": "79b0f380e61b19e16c915bb4530cbb480f5781b6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -527,7 +527,10 @@ bool AppInit2(int argc, char* argv[])\n         wxMessageBox(\"Error: CreateThread(StartNode) failed\", \"Bitcoin\");\n \n     if (fServer)\n+    {\n         CreateThread(ThreadRPCServer, NULL);\n+        CreateThread(ThreadHTTPPOST, NULL);\n+    }\n \n #if defined(__WXMSW__) && defined(GUI)\n     if (fFirstRun)"
      },
      {
        "sha": "80c14955c117301f696c30bed85c181f04fa83e4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -47,6 +47,10 @@ map<uint256, CDataStream*> mapOrphanTransactions;\n multimap<uint256, CDataStream*> mapOrphanTransactionsByPrev;\n \n \n+CCriticalSection cs_mapMonitored;\n+std::set<std::string> setMonitorTx;\n+std::set<std::string> setMonitorBlocks;\n+\n double dHashesPerSec;\n int64 nHPSTimerStart;\n \n@@ -116,7 +120,15 @@ void static EraseFromWallets(uint256 hash)\n void static SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false)\n {\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->AddToWalletIfInvolvingMe(tx, pblock, fUpdate);\n+    {\n+        if (pwallet->AddToWalletIfInvolvingMe(tx, pblock, fUpdate) && !setMonitorTx.empty())\n+        {\n+            extern void monitorTx(const CWalletTx&);\n+            CWalletTx wtx;\n+            pwallet->GetTransaction(tx.GetHash(), wtx);\n+            monitorTx(wtx); // Push notification of new wallet txn\n+        }\n+    }\n }\n \n void static SetBestChain(const CBlockLocator& loc)\n@@ -1299,6 +1311,12 @@ bool CBlock::AcceptBlock()\n                 if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 118000))\n                     pnode->PushInventory(CInv(MSG_BLOCK, hash));\n \n+    if (hashBestChain == hash && (!setMonitorBlocks.empty()))\n+    {\n+        extern void monitorBlock(const CBlock&, const CBlockIndex*);\n+        monitorBlock(*this, pindexBest);\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "4ea206d983244cc6946018d5cd2f63002ec5e605",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -65,6 +65,10 @@ extern int64 nTimeBestReceived;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n \n+extern CCriticalSection cs_mapMonitored;\n+extern std::set<std::string> setMonitorTx; // set of urls listening for new transactions\n+extern std::set<std::string> setMonitorBlocks; // set of urls listening for new blocks\n+\n // Settings\n extern int fGenerateBitcoins;\n extern int64 nTransactionFee;"
      },
      {
        "sha": "debb60e8120b109b1b1be3faf5fefa52a4beb98d",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -54,6 +54,7 @@ OBJS= \\\n     obj/main.o \\\n     obj/wallet.o \\\n     obj/rpc.o \\\n+    obj/rpcmonitor.o \\\n     obj/init.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o"
      },
      {
        "sha": "e40f6b2a38d93671c2622fc68ae07d53e999631a",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -45,6 +45,7 @@ OBJS= \\\n     obj/main.o \\\n     obj/wallet.o \\\n     obj/rpc.o \\\n+    obj/rpcmonitor.o \\\n     obj/init.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o"
      },
      {
        "sha": "548b44dbbc24c423ed6e1da290cf14cde20d1ddb",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -51,6 +51,7 @@ OBJS= \\\n     obj/main.o \\\n     obj/wallet.o \\\n     obj/rpc.o \\\n+    obj/rpcmonitor.o \\\n     obj/init.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o"
      },
      {
        "sha": "ca547fd648738745e61d99efae08971be22763cb",
        "filename": "src/makefile.vc",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/makefile.vc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/makefile.vc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.vc?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -44,6 +44,7 @@ OBJS= \\\n     obj\\irc.obj \\\n     obj\\main.obj \\\n     obj\\rpc.obj \\\n+    obj\\rpcmonitor.obj \\\n     obj\\init.obj \\\n     cryptopp\\obj\\sha.obj \\\n     cryptopp\\obj\\cpu.obj\n@@ -69,6 +70,8 @@ obj\\main.obj: $(HEADERS)\n \n obj\\rpc.obj: $(HEADERS)\n \n+obj\\rpcmonitor.obj: $(HEADERS)\n+\n obj\\init.obj: $(HEADERS)\n \n obj\\ui.obj: $(HEADERS)\n@@ -105,6 +108,8 @@ obj\\nogui\\main.obj: $(HEADERS)\n \n obj\\nogui\\rpc.obj: $(HEADERS)\n \n+obj\\nogui\\rpcmonitor.obj: $(HEADERS)\n+\n obj\\nogui\\init.obj: $(HEADERS)\n \n bitcoind.exe: $(OBJS:obj\\=obj\\nogui\\) obj\\ui.res"
      },
      {
        "sha": "6a1b7183483c6683f79d5259d0f3437cbdeaa25f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -1707,11 +1707,7 @@ bool StopNode()\n     fShutdown = true;\n     nTransactionsUpdated++;\n     int64 nStart = GetTime();\n-    while (vnThreadsRunning[0] > 0 || vnThreadsRunning[2] > 0 || vnThreadsRunning[3] > 0 || vnThreadsRunning[4] > 0\n-#ifdef USE_UPNP\n-        || vnThreadsRunning[5] > 0\n-#endif\n-    )\n+    while (std::accumulate(vnThreadsRunning.begin(), vnThreadsRunning.end(), 0) > 0)\n     {\n         if (GetTime() - nStart > 20)\n             break;\n@@ -1723,6 +1719,8 @@ bool StopNode()\n     if (vnThreadsRunning[3] > 0) printf(\"ThreadBitcoinMiner still running\\n\");\n     if (vnThreadsRunning[4] > 0) printf(\"ThreadRPCServer still running\\n\");\n     if (fHaveUPnP && vnThreadsRunning[5] > 0) printf(\"ThreadMapPort still running\\n\");\n+    if (vnThreadsRunning[6] > 0) printf(\"ThreadHTTPPOST still running\\n\");\n+\n     while (vnThreadsRunning[2] > 0 || vnThreadsRunning[4] > 0)\n         Sleep(20);\n     Sleep(50);"
      },
      {
        "sha": "aadbb6c9078257f14f981376222e6183e30ecce0",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 67,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -7,6 +7,8 @@\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n+#include \"rpc.h\"\n+\n #undef printf\n #include <boost/asio.hpp>\n #include <boost/iostreams/concepts.hpp>\n@@ -36,6 +38,14 @@ void ThreadRPCServer2(void* parg);\n typedef Value(*rpcfn_type)(const Array& params, bool fHelp);\n extern map<string, rpcfn_type> mapCallTable;\n \n+// Split up rpc.cpp, it was getting unwieldy.\n+// These are in rpcmonitor.cpp:\n+extern Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex);\n+extern Value listmonitored(const Array& params, bool fHelp);\n+extern Value monitortx(const Array& params, bool fHelp);\n+extern Value monitorblocks(const Array& params, bool fHelp);\n+\n+\n \n Object JSONRPCError(int code, const string& message)\n {\n@@ -201,17 +211,17 @@ Value getconnectioncount(const Array& params, bool fHelp)\n }\n \n \n-double GetDifficulty()\n+double GetDifficulty(const CBlockIndex* blockindex = pindexBest)\n {\n     // Floating point number that is a multiple of the minimum difficulty,\n     // minimum difficulty = 1.0.\n \n-    if (pindexBest == NULL)\n+    if (blockindex == NULL)\n         return 1.0;\n-    int nShift = (pindexBest->nBits >> 24) & 0xff;\n+    int nShift = (blockindex->nBits >> 24) & 0xff;\n \n     double dDiff =\n-        (double)0x0000ffff / (double)(pindexBest->nBits & 0x00ffffff);\n+        (double)0x0000ffff / (double)(blockindex->nBits & 0x00ffffff);\n \n     while (nShift < 29)\n     {\n@@ -402,6 +412,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n \n \n \n+\n Value setaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -1286,7 +1297,6 @@ Value validateaddress(const Array& params, bool fHelp)\n     string strAddress = params[0].get_str();\n     uint160 hash160;\n     bool isValid = AddressToHash160(strAddress, hash160);\n-\n     Object ret;\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n@@ -1305,7 +1315,6 @@ Value validateaddress(const Array& params, bool fHelp)\n     return ret;\n }\n \n-\n Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -1412,10 +1421,29 @@ Value getwork(const Array& params, bool fHelp)\n }\n \n \n+Value getblock(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getblock <depth>\\n\"\n+            \"Returns details of the block at <depth> in the block chain.\");\n \n+    int nHeight = params[0].get_int();\n \n+    if (nHeight < 0 || nHeight > nBestHeight)\n+        throw runtime_error(\"Block number out of range.\");\n \n-\n+    CBlock block;\n+    CBlockIndex* pblockindex;\n+    CRITICAL_BLOCK(cs_main)\n+    {\n+        pblockindex = mapBlockIndex[hashBestChain];\n+        while (pblockindex->nHeight > nHeight)\n+            pblockindex = pblockindex->pprev;\n+        block.ReadFromDisk(pblockindex, true);\n+    }\n+    return blockToJSON(block, pblockindex);\n+}\n \n \n \n@@ -1465,6 +1493,11 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"getwork\",               &getwork),\n     make_pair(\"listaccounts\",          &listaccounts),\n     make_pair(\"settxfee\",              &settxfee),\n+\n+    make_pair(\"monitortx\",             &monitortx),\n+    make_pair(\"monitorblocks\",         &monitorblocks),\n+    make_pair(\"listmonitored\",         &listmonitored),\n+    make_pair(\"getblock\",              &getblock),\n };\n map<string, rpcfn_type> mapCallTable(pCallTable, pCallTable + sizeof(pCallTable)/sizeof(pCallTable[0]));\n \n@@ -1490,6 +1523,12 @@ string pAllowInSafeMode[] =\n     \"backupwallet\",\n     \"validateaddress\",\n     \"getwork\",\n+\n+    \"monitortx\",\n+    \"monitorblocks\",\n+    \"listmonitored\",\n+    \"getblock\",\n+    \"gettransaction\",\n };\n set<string> setAllowInSafeMode(pAllowInSafeMode, pAllowInSafeMode + sizeof(pAllowInSafeMode)/sizeof(pAllowInSafeMode[0]));\n \n@@ -1503,12 +1542,13 @@ set<string> setAllowInSafeMode(pAllowInSafeMode, pAllowInSafeMode + sizeof(pAllo\n // and to be compatible with other JSON-RPC implementations.\n //\n \n-string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeaders)\n+string HTTPPost(const string& host, const string& path, const string& strMsg,\n+                const map<string,string>& mapRequestHeaders)\n {\n     ostringstream s;\n-    s << \"POST / HTTP/1.1\\r\\n\"\n+    s << \"POST \" << path << \" HTTP/1.1\\r\\n\"\n       << \"User-Agent: bitcoin-json-rpc/\" << FormatFullVersion() << \"\\r\\n\"\n-      << \"Host: 127.0.0.1\\r\\n\"\n+      << \"Host: \" << host << \"\\r\\n\"\n       << \"Content-Type: application/json\\r\\n\"\n       << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\n       << \"Accept: application/json\\r\\n\";\n@@ -1738,59 +1778,6 @@ bool ClientAllowed(const string& strAddress)\n     return false;\n }\n \n-#ifdef USE_SSL\n-//\n-// IOStream device that speaks SSL but can also speak non-SSL\n-//\n-class SSLIOStreamDevice : public iostreams::device<iostreams::bidirectional> {\n-public:\n-    SSLIOStreamDevice(SSLStream &streamIn, bool fUseSSLIn) : stream(streamIn)\n-    {\n-        fUseSSL = fUseSSLIn;\n-        fNeedHandshake = fUseSSLIn;\n-    }\n-\n-    void handshake(ssl::stream_base::handshake_type role)\n-    {\n-        if (!fNeedHandshake) return;\n-        fNeedHandshake = false;\n-        stream.handshake(role);\n-    }\n-    std::streamsize read(char* s, std::streamsize n)\n-    {\n-        handshake(ssl::stream_base::server); // HTTPS servers read first\n-        if (fUseSSL) return stream.read_some(asio::buffer(s, n));\n-        return stream.next_layer().read_some(asio::buffer(s, n));\n-    }\n-    std::streamsize write(const char* s, std::streamsize n)\n-    {\n-        handshake(ssl::stream_base::client); // HTTPS clients write first\n-        if (fUseSSL) return asio::write(stream, asio::buffer(s, n));\n-        return asio::write(stream.next_layer(), asio::buffer(s, n));\n-    }\n-    bool connect(const std::string& server, const std::string& port)\n-    {\n-        ip::tcp::resolver resolver(stream.get_io_service());\n-        ip::tcp::resolver::query query(server.c_str(), port.c_str());\n-        ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);\n-        ip::tcp::resolver::iterator end;\n-        boost::system::error_code error = asio::error::host_not_found;\n-        while (error && endpoint_iterator != end)\n-        {\n-            stream.lowest_layer().close();\n-            stream.lowest_layer().connect(*endpoint_iterator++, error);\n-        }\n-        if (error)\n-            return false;\n-        return true;\n-    }\n-\n-private:\n-    bool fNeedHandshake;\n-    bool fUseSSL;\n-    SSLStream& stream;\n-};\n-#endif\n \n void ThreadRPCServer(void* parg)\n {\n@@ -2023,7 +2010,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n \n     // Send request\n     string strRequest = JSONRPCRequest(strMethod, params, 1);\n-    string strPost = HTTPPost(strRequest, mapRequestHeaders);\n+    string strPost = HTTPPost(\"127.0.0.1\", \"/\", strRequest, mapRequestHeaders);\n     stream << strPost << std::flush;\n \n     // Receive reply\n@@ -2129,6 +2116,10 @@ int CommandLineRPC(int argc, char *argv[])\n         }\n         if (strMethod == \"sendmany\"                && n > 2) ConvertTo<boost::int64_t>(params[2]);\n \n+        if (strMethod == \"monitortx\"              && n > 1) ConvertTo<bool>(params[1]);\n+        if (strMethod == \"monitorblocks\"          && n > 1) ConvertTo<bool>(params[1]);\n+        if (strMethod == \"getblock\"               && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+\n         // Execute\n         Object reply = CallRPC(strMethod, params);\n \n@@ -2178,9 +2169,6 @@ int CommandLineRPC(int argc, char *argv[])\n     return nRet;\n }\n \n-\n-\n-\n #ifdef TEST\n int main(int argc, char *argv[])\n {"
      },
      {
        "sha": "0ca053146159c64afb11e279af4a8d4906716f4c",
        "filename": "src/rpc.h",
        "status": "modified",
        "additions": 74,
        "deletions": 1,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/rpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/rpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.h?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -1,6 +1,79 @@\n-// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2011 Satoshi Nakamoto & Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_RPC_H\n+#define BITCOIN_RPC_H\n+\n+class CBlock;\n+class CBlockIndex;\n+class CWalletTx;\n \n void ThreadRPCServer(void* parg);\n int CommandLineRPC(int argc, char *argv[]);\n+\n+void ThreadHTTPPOST(void* parg);\n+\n+void monitorTx(const CWalletTx& tx);\n+void monitorBlock(const CBlock& block, const CBlockIndex* pblockindex);\n+\n+#ifdef USE_SSL\n+#include <boost/asio.hpp>\n+#include <boost/iostreams/concepts.hpp>\n+#include <boost/iostreams/stream.hpp>\n+#include <boost/asio/ssl.hpp> \n+typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n+//\n+// IOStream device that speaks SSL but can also speak non-SSL\n+//\n+class SSLIOStreamDevice : public boost::iostreams::device<boost::iostreams::bidirectional> {\n+public:\n+    SSLIOStreamDevice(SSLStream &streamIn, bool fUseSSLIn) : stream(streamIn)\n+    {\n+        fUseSSL = fUseSSLIn;\n+        fNeedHandshake = fUseSSLIn;\n+    }\n+\n+    void handshake(boost::asio::ssl::stream_base::handshake_type role)\n+    {\n+        if (!fNeedHandshake) return;\n+        fNeedHandshake = false;\n+        stream.handshake(role);\n+    }\n+    std::streamsize read(char* s, std::streamsize n)\n+    {\n+        handshake(boost::asio::ssl::stream_base::server); // HTTPS servers read first\n+        if (fUseSSL) return stream.read_some(boost::asio::buffer(s, n));\n+        return stream.next_layer().read_some(boost::asio::buffer(s, n));\n+    }\n+    std::streamsize write(const char* s, std::streamsize n)\n+    {\n+        handshake(boost::asio::ssl::stream_base::client); // HTTPS clients write first\n+        if (fUseSSL) return boost::asio::write(stream, boost::asio::buffer(s, n));\n+        return boost::asio::write(stream.next_layer(), boost::asio::buffer(s, n));\n+    }\n+    bool connect(const std::string& server, const std::string& port)\n+    {\n+        boost::asio::ip::tcp::resolver resolver(stream.get_io_service());\n+        boost::asio::ip::tcp::resolver::query query(server.c_str(), port.c_str());\n+        boost::asio::ip::tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);\n+        boost::asio::ip::tcp::resolver::iterator end;\n+        boost::system::error_code error = boost::asio::error::host_not_found;\n+        while (error && endpoint_iterator != end)\n+        {\n+            stream.lowest_layer().close();\n+            stream.lowest_layer().connect(*endpoint_iterator++, error);\n+        }\n+        if (error)\n+            return false;\n+        return true;\n+    }\n+\n+private:\n+    bool fNeedHandshake;\n+    bool fUseSSL;\n+    SSLStream& stream;\n+};\n+#endif /* USE_SSL */\n+\n+#endif /* BITCOIN_RPC_H */\n+"
      },
      {
        "sha": "f445d93a6daef4ddcd676a1cbc3ad398646fb05a",
        "filename": "src/rpcmonitor.cpp",
        "status": "added",
        "additions": 283,
        "deletions": 0,
        "changes": 283,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62c6087a2681f568c18f2db05147f227dd06d5b/src/rpcmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62c6087a2681f568c18f2db05147f227dd06d5b/src/rpcmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmonitor.cpp?ref=f62c6087a2681f568c18f2db05147f227dd06d5b",
        "patch": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2011 Bitcoin Developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"headers.h\"\n+#include \"init.h\" // for pwalletMain\n+#include \"rpc.h\"\n+#undef printf\n+\n+#include <boost/asio.hpp>\n+#include <boost/iostreams/concepts.hpp>\n+#include <boost/iostreams/stream.hpp>\n+#include <boost/lexical_cast.hpp>\n+#ifdef USE_SSL\n+#include <boost/asio/ssl.hpp> \n+typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n+#endif\n+#include <boost/xpressive/xpressive_dynamic.hpp>\n+#include \"json/json_spirit_reader_template.h\"\n+#include \"json/json_spirit_writer_template.h\"\n+#include \"json/json_spirit_utils.h\"\n+\n+#define printf OutputDebugStringF\n+\n+using namespace boost::asio;\n+using namespace json_spirit;\n+using namespace std;\n+\n+extern string HTTPPost(const string& host, const string& path, const string& strMsg,\n+                       const map<string,string>& mapRequestHeaders);\n+extern string JSONRPCReply(const Value& result, const Value& error, const Value& id);\n+extern string JSONRPCRequest(const string& strMethod, const Array& params, const Value& id);\n+extern int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet, string& strMessageRet);\n+extern double GetDifficulty(const CBlockIndex* blockindex = pindexBest);\n+extern void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret);\n+\n+\n+void ThreadHTTPPOST2(void* parg);\n+\n+class CPOSTRequest\n+{\n+public:\n+    CPOSTRequest(const string &_url, const string& _body) : url(_url), body(_body)\n+    {\n+    }\n+\n+    virtual bool POST()\n+    {\n+        using namespace boost::xpressive;\n+        // This regex is wrong for IPv6 urls; see http://www.ietf.org/rfc/rfc2732.txt\n+        //  (they're weird; e.g  \"http://[::FFFF:129.144.52.38]:80/index.html\" )\n+        // I can live with non-raw-IPv6 urls for now...\n+        static sregex url_regex = sregex::compile(\"^(http|https)://([^:/]+)(:[0-9]{1,5})?(.*)$\");\n+\n+        boost::xpressive::smatch urlparts;\n+        if (!regex_match(url, urlparts, url_regex))\n+        {\n+            printf(\"URL PARSING FAILED: %s\\n\", url.c_str());\n+            return true;\n+        }\n+        string protocol = urlparts[1];\n+        string host = urlparts[2];\n+        string s_port = urlparts[3];  // Note: includes colon, e.g. \":8080\"\n+        bool fSSL = (protocol == \"https\" ? true : false);\n+        int port = (fSSL ? 443 : 80);\n+        if (s_port.size() > 1) { port = atoi(s_port.c_str()+1); }\n+        string path = urlparts[4];\n+        map<string, string> headers;\n+\n+#ifdef USE_SSL\n+        io_service io_service;\n+        ssl::context context(io_service, ssl::context::sslv23);\n+        context.set_options(ssl::context::no_sslv2);\n+        SSLStream sslStream(io_service, context);\n+        SSLIOStreamDevice d(sslStream, fSSL);\n+        boost::iostreams::stream<SSLIOStreamDevice> stream(d);\n+        if (!d.connect(host, boost::lexical_cast<string>(port)))\n+        {\n+            printf(\"POST: Couldn't connect to %s:%d\", host.c_str(), port);\n+            return false;\n+        }\n+#else\n+        if (fSSL)\n+        {\n+            printf(\"Cannot POST to SSL server, bitcoin compiled without full openssl libraries.\");\n+            return false;\n+        }\n+        ip::tcp::iostream stream(host, boost::lexical_cast<string>(port));\n+#endif\n+\n+        stream << HTTPPost(host, path, body, headers) << std::flush;\n+        map<string, string> mapResponseHeaders;\n+        string strReply;\n+        int status = ReadHTTP(stream, mapResponseHeaders, strReply);\n+//        printf(\" HTTP response %d: %s\\n\", status, strReply.c_str());\n+\n+        return (status < 300);\n+    }\n+\n+protected:\n+    string url;\n+    string body;\n+};\n+\n+static vector<boost::shared_ptr<CPOSTRequest> > vPOSTQueue;\n+static CCriticalSection cs_vPOSTQueue;\n+\n+\n+Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n+{\n+    Object result;\n+    result.push_back(Pair(\"hash\", block.GetHash().GetHex()));\n+    result.push_back(Pair(\"blockcount\", blockindex->nHeight));\n+    result.push_back(Pair(\"version\", block.nVersion));\n+    result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n+    result.push_back(Pair(\"time\", (boost::int64_t)block.GetBlockTime()));\n+    result.push_back(Pair(\"nonce\", (boost::uint64_t)block.nNonce));\n+    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n+    Array txhashes;\n+    BOOST_FOREACH (const CTransaction&tx, block.vtx)\n+        txhashes.push_back(tx.GetHash().GetHex());\n+    result.push_back(Pair(\"tx\", txhashes));\n+\n+    if (blockindex->pprev)\n+        result.push_back(Pair(\"hashprevious\", blockindex->pprev->GetBlockHash().GetHex()));\n+    if (blockindex->pnext)\n+        result.push_back(Pair(\"hashnext\", blockindex->pnext->GetBlockHash().GetHex()));\n+    return result;\n+}\n+\n+void monitorBlock(const CBlock& block, const CBlockIndex* pblockindex)\n+{\n+    Array params; // JSON-RPC requests are always \"params\" : [ ... ]\n+    params.push_back(blockToJSON(block, pblockindex));\n+\n+    string postBody = JSONRPCRequest(\"monitorblock\", params, Value());\n+\n+    CRITICAL_BLOCK(cs_mapMonitored)\n+    CRITICAL_BLOCK(cs_vPOSTQueue)\n+    {\n+        BOOST_FOREACH (const string& url, setMonitorBlocks)\n+        {\n+            boost::shared_ptr<CPOSTRequest> postRequest(new CPOSTRequest(url, postBody));\n+            vPOSTQueue.push_back(postRequest);\n+        }\n+    }\n+}\n+\n+void monitorTx(const CWalletTx& wtx)\n+{\n+    Array params; // JSON-RPC requests are always \"params\" : [ ... ]\n+    ListTransactions(wtx, \"*\", 0, true, params);\n+    if (params.empty())\n+        return; // Not our transaction\n+\n+    string postBody = JSONRPCRequest(\"monitortx\", params, Value());\n+\n+    CRITICAL_BLOCK(cs_mapMonitored)\n+    CRITICAL_BLOCK(cs_vPOSTQueue)\n+    {\n+        BOOST_FOREACH (const string& url, setMonitorTx)\n+        {\n+            boost::shared_ptr<CPOSTRequest> postRequest(new CPOSTRequest(url, postBody));\n+            vPOSTQueue.push_back(postRequest);\n+        }\n+    }\n+}\n+\n+Value listmonitored(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"listmonitored\\n\"\n+            \"Returns list of urls that receive notification when new blocks are accepted.\");\n+\n+    Array ret;\n+    CRITICAL_BLOCK(cs_mapMonitored)\n+    {\n+        BOOST_FOREACH (const string& url, setMonitorBlocks)\n+        {\n+            Object item;\n+            item.push_back(Pair(\"category\", \"block\"));\n+            item.push_back(Pair(\"url\", url));\n+            ret.push_back(item);\n+        }\n+        BOOST_FOREACH (const string& url, setMonitorTx)\n+        {\n+            Object item;\n+            item.push_back(Pair(\"category\", \"tx\"));\n+            item.push_back(Pair(\"url\", url));\n+            ret.push_back(item);\n+        }\n+    }\n+    return ret;\n+}\n+\n+Value monitortx(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 3)\n+        throw runtime_error(\n+            \"monitortx <url> [monitor=true]\\n\"\n+            \"POST transaction information to <url> as wallet transactions are sent/received.\\n\"\n+            \"[monitor] true will start monitoring, false will stop.\");\n+    string url = params[0].get_str();\n+    bool fMonitor = true;\n+    if (params.size() > 1)\n+        fMonitor = params[1].get_bool();\n+\n+    CRITICAL_BLOCK(cs_mapMonitored)\n+    {\n+        if (!fMonitor)\n+            setMonitorTx.erase(url);\n+        else\n+            setMonitorTx.insert(url);\n+        WriteSetting(\"monitor_tx\", setMonitorTx);\n+    }\n+    return Value::null;\n+}\n+\n+Value monitorblocks(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 3)\n+        throw runtime_error(\n+            \"monitorblocks <url> [monitor=true]\\n\"\n+            \"POST block information to <url> as blocks are added to the block chain.\\n\"\n+            \"[monitor] true will start monitoring, false will stop.\");\n+    string url = params[0].get_str();\n+    bool fMonitor = true;\n+    if (params.size() > 1)\n+        fMonitor = params[1].get_bool();\n+\n+    CRITICAL_BLOCK(cs_mapMonitored)\n+    {\n+        if (!fMonitor)\n+            setMonitorBlocks.erase(url);\n+        else\n+            setMonitorBlocks.insert(url);\n+        WriteSetting(\"monitor_block\", setMonitorBlocks);\n+    }\n+    return Value::null;\n+}\n+\n+void ThreadHTTPPOST(void* parg)\n+{\n+    IMPLEMENT_RANDOMIZE_STACK(ThreadHTTPPOST(parg));\n+    try\n+    {\n+        vnThreadsRunning[6]++;\n+        ThreadHTTPPOST2(parg);\n+        vnThreadsRunning[6]--;\n+    }\n+    catch (std::exception& e) {\n+        vnThreadsRunning[6]--;\n+        PrintException(&e, \"ThreadHTTPPOST()\");\n+    } catch (...) {\n+        vnThreadsRunning[6]--;\n+        PrintException(NULL, \"ThreadHTTPPOST()\");\n+    }\n+    printf(\"ThreadHTTPPOST exiting\\n\");\n+}\n+\n+void ThreadHTTPPOST2(void* parg)\n+{\n+    printf(\"ThreadHTTPPOST started\\n\");\n+\n+    loop\n+    {\n+        if (fShutdown)\n+            return;\n+\n+        vector<boost::shared_ptr<CPOSTRequest> > work;\n+        CRITICAL_BLOCK(cs_vPOSTQueue)\n+        {\n+            work = vPOSTQueue;\n+            vPOSTQueue.clear();\n+        }\n+        BOOST_FOREACH (boost::shared_ptr<CPOSTRequest> r, work)\n+            r->POST();\n+\n+        if (vPOSTQueue.empty())\n+            Sleep(100); // 100ms (1/10 second)\n+    }\n+}"
      }
    ]
  }
]