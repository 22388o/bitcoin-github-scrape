[
  {
    "sha": "615651ea8200c8f08c41c469ceb75819fdfcc7ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTU2NTFlYTgyMDBjOGYwOGM0MWM0NjljZWI3NTgxOWZkZmNjN2Fk",
    "commit": {
      "author": {
        "name": "uhliksk",
        "email": "uhlik@uhlik.sk",
        "date": "2020-02-21T15:01:07Z"
      },
      "committer": {
        "name": "uhliksk",
        "email": "uhlik@uhlik.sk",
        "date": "2020-02-21T15:01:07Z"
      },
      "message": "Add error handling to all boost filesystem functions",
      "tree": {
        "sha": "6f31bab26cec88cdf523aa7e86c89ae20b57965f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f31bab26cec88cdf523aa7e86c89ae20b57965f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/615651ea8200c8f08c41c469ceb75819fdfcc7ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE93ibQIG7G77NjnFaaU7H9GZFny0FAl5P8L4ACgkQaU7H9GZF\nny1y+A//Ync00imDlSxuxrBKWL67vaZX+hN6MfSDkNSlReVPxReJdj0oVALOBOJR\nADpVYRqipWyd8/hnwCK8BoevDL6LrucaNYzEaKLwluA3uNE98jioMqxRAu1jxDJI\nNONQA3dsNAos8w4PiSYPfCk5oCnbrj/GYWW2g+E6h4/jEKe1wLTi8qlE9fHIitap\nTa0x4z5qs9U8PCjGSFrUmxnqAFbqXweqwEY+UFsTc++XYp+Kg+LixekEi4/46B0t\n6j4F6JBTo/U+scpwGdBuIfwpHEJboprtzfcWu19WX/5vtNK2+kUoFQowsVI0vsLb\nFn4vZZtArYlyKgi940mlOhFk3zOeobF01lHkLVCDzdedP4fUNHP6cn2sQUu6PnY8\n8xaSnVVVP+94UL7AMjp2PaUOn4CnP3Q1m7FkRBfrmO/BHb6YgECbjPPYzGZUis68\nfE0Rrsfe8Qy6DK8hwo1jZCiTWMSGYgo4iwlRKqOxb5Myn635gpo5+d4m8YY6VPRD\nZR2afYLIKWRGVwn1VerCZAEV6qLytRFsBh2hpbX5r7OOgCR1LVBFH4tOksp4qf7A\nAzm9mIRHMIZhXS9ctrvmU++wf34oAR6o0H4JUpRrApfVQS5i26GACnM5OyXU8QuR\nsQT+/ousPoth7d1cO5hApbnOzBAOZi1snaRxVP4+PAtWuq/qBd4=\n=0H5t\n-----END PGP SIGNATURE-----",
        "payload": "tree 6f31bab26cec88cdf523aa7e86c89ae20b57965f\nparent eb3c6b0912349873113bfd49baf1c505bb48d9cf\nauthor uhliksk <uhlik@uhlik.sk> 1582297267 +0100\ncommitter uhliksk <uhlik@uhlik.sk> 1582297267 +0100\n\nAdd error handling to all boost filesystem functions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/615651ea8200c8f08c41c469ceb75819fdfcc7ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/615651ea8200c8f08c41c469ceb75819fdfcc7ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/615651ea8200c8f08c41c469ceb75819fdfcc7ad/comments",
    "author": {
      "login": "uhliksk",
      "id": 37454226,
      "node_id": "MDQ6VXNlcjM3NDU0MjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/37454226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/uhliksk",
      "html_url": "https://github.com/uhliksk",
      "followers_url": "https://api.github.com/users/uhliksk/followers",
      "following_url": "https://api.github.com/users/uhliksk/following{/other_user}",
      "gists_url": "https://api.github.com/users/uhliksk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/uhliksk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/uhliksk/subscriptions",
      "organizations_url": "https://api.github.com/users/uhliksk/orgs",
      "repos_url": "https://api.github.com/users/uhliksk/repos",
      "events_url": "https://api.github.com/users/uhliksk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/uhliksk/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "uhliksk",
      "id": 37454226,
      "node_id": "MDQ6VXNlcjM3NDU0MjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/37454226?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/uhliksk",
      "html_url": "https://github.com/uhliksk",
      "followers_url": "https://api.github.com/users/uhliksk/followers",
      "following_url": "https://api.github.com/users/uhliksk/following{/other_user}",
      "gists_url": "https://api.github.com/users/uhliksk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/uhliksk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/uhliksk/subscriptions",
      "organizations_url": "https://api.github.com/users/uhliksk/orgs",
      "repos_url": "https://api.github.com/users/uhliksk/repos",
      "events_url": "https://api.github.com/users/uhliksk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/uhliksk/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb3c6b0912349873113bfd49baf1c505bb48d9cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3c6b0912349873113bfd49baf1c505bb48d9cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb3c6b0912349873113bfd49baf1c505bb48d9cf"
      }
    ],
    "stats": {
      "total": 463,
      "additions": 346,
      "deletions": 117
    },
    "files": [
      {
        "sha": "da1706ec513a2b348d5b82166f0553405dbe0f4d",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -133,7 +133,7 @@ CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bo\n             leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n             dbwrapper_private::HandleError(result);\n         }\n-        TryCreateDirectories(path);\n+        assert(TryCreateDirectories(path));\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n     }\n     leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);"
      },
      {
        "sha": "3945f2ccbd7f44709d016599ad998551f1eda054",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -36,7 +36,12 @@ FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool read_only)\n         return nullptr;\n     }\n     fs::path path = FileName(pos);\n-    fs::create_directories(path.parent_path());\n+    boost::system::error_code ec;\n+    fs::create_directories(path.parent_path(), ec);\n+    if (ec) {\n+        LogPrintf(\"%s: fs::create_directories: %s %s\\n\", __func__, ec.message(), path.parent_path().string());\n+        return nullptr;\n+    }\n     FILE* file = fsbridge::fopen(path, read_only ? \"rb\": \"rb+\");\n     if (!file && !read_only)\n         file = fsbridge::fopen(path, \"wb+\");"
      },
      {
        "sha": "1b45e298a4e4cace096cd8f85c5126516b9f7616",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -104,7 +104,12 @@ BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n     if (filter_name.empty()) throw std::invalid_argument(\"unknown filter_type\");\n \n     fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n-    fs::create_directories(path);\n+    boost::system::error_code ec;\n+    fs::create_directories(path, ec);\n+    if (ec) {\n+        LogPrintf(\"%s: fs::create_directories: %s %s\\n\", __func__, ec.message(), path.string());\n+        return;\n+    }\n \n     m_name = filter_name + \" block filter index\";\n     m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);"
      },
      {
        "sha": "9139df0e5431825df4dba1d9853e9e9a6956bc95",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 12,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -281,12 +281,13 @@ void Shutdown(NodeContext& node)\n     }\n #endif\n \n-    try {\n-        if (!fs::remove(GetPidFile())) {\n-            LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\n-        }\n-    } catch (const fs::filesystem_error& e) {\n-        LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, fsbridge::get_filesystem_error_message(e));\n+    boost::system::error_code ec;\n+    bool removed;\n+    removed = fs::remove(GetPidFile(), ec);\n+    if (ec) {\n+        LogPrintf(\"%s: Unable to remove PID file: %s %s\\n\", __func__,  ec.message(), GetPidFile().string());\n+    } else if (!removed) {\n+        LogPrintf(\"%s: Unable to remove PID file: File %s does not exist\\n\", __func__, GetPidFile().string());\n     }\n     node.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n@@ -640,8 +641,17 @@ static void CleanupBlockRevFiles()\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n     fs::path blocksdir = GetBlocksDir();\n-    for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n-        if (fs::is_regular_file(*it) &&\n+    boost::system::error_code ec, eci;\n+    for (auto it = fs::directory_iterator(blocksdir, ec); it != fs::directory_iterator(); it.increment(eci)) {\n+        if (ec) {\n+            LogPrintf(\"%s: iterator: %s %s\\n\", __func__, ec.message(), it->path().string());\n+            continue;\n+        }\n+        if (eci) {\n+            LogPrintf(\"%s: increment: %s %s\\n\", __func__, eci.message(), it->path().string());\n+            continue;\n+        }\n+        if (fs::is_regular_file(*it, ec) &&\n             it->path().filename().string().length() == 12 &&\n             it->path().filename().string().substr(8,4) == \".dat\")\n         {\n@@ -680,7 +690,8 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n         int nFile = 0;\n         while (true) {\n             FlatFilePos pos(nFile, 0);\n-            if (!fs::exists(GetBlockPosFilename(pos)))\n+            boost::system::error_code ec;\n+            if (!fs::exists(GetBlockPosFilename(pos), ec))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);\n             if (!file)\n@@ -938,7 +949,8 @@ bool AppInitParameterInteraction()\n         InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\").translated, section.m_file, section.m_line, section.m_name));\n     }\n \n-    if (!fs::is_directory(GetBlocksDir())) {\n+    boost::system::error_code ec;\n+    if (!fs::is_directory(GetBlocksDir(), ec)) {\n         return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\").translated, gArgs.GetArg(\"-blocksdir\", \"\")));\n     }\n \n@@ -1220,7 +1232,8 @@ bool AppInitMain(NodeContext& node)\n \n     // Only log conf file usage message if conf file actually exists.\n     fs::path config_file_path = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n-    if (fs::exists(config_file_path)) {\n+    boost::system::error_code ec;\n+    if (fs::exists(config_file_path, ec)) {\n         LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n     } else if (gArgs.IsArgSet(\"-conf\")) {\n         // Warn if no conf file exists at path provided by user\n@@ -1241,7 +1254,7 @@ bool AppInitMain(NodeContext& node)\n                   \"current working directory '%s'. This is fragile, because if bitcoin is started in the future \"\n                   \"from a different location, it will be unable to locate the current data files. There could \"\n                   \"also be data loss if bitcoin is started while in a temporary directory.\\n\",\n-            gArgs.GetArg(\"-datadir\", \"\"), fs::current_path().string());\n+            gArgs.GetArg(\"-datadir\", \"\"), fs::current_path(ec).string());\n     }\n \n     InitSignatureCache();"
      },
      {
        "sha": "f47f509822c18fb9af5272cc00ea4cb1241ac3a7",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -315,9 +315,8 @@ void BCLog::Logger::ShrinkDebugFile()\n \n     // Special files (e.g. device nodes) may not have a size.\n     size_t log_size = 0;\n-    try {\n-        log_size = fs::file_size(m_file_path);\n-    } catch (const fs::filesystem_error&) {}\n+    boost::system::error_code ec;\n+    log_size = fs::file_size(m_file_path, ec);\n \n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes"
      },
      {
        "sha": "b098e316b028b694e13f7d8dc021ba9d5aac51aa",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 6,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -383,7 +383,8 @@ void openDebugLogfile()\n     fs::path pathDebug = GetDataDir() / \"debug.log\";\n \n     /* Open debug.log with the associated application */\n-    if (fs::exists(pathDebug))\n+    boost::system::error_code ec;\n+    if (fs::exists(pathDebug, ec))\n         QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathDebug)));\n }\n \n@@ -564,13 +565,19 @@ fs::path static StartupShortcutPath()\n bool GetStartOnSystemStartup()\n {\n     // check for Bitcoin*.lnk\n-    return fs::exists(StartupShortcutPath());\n+    boost::system::error_code ec;\n+    return fs::exists(StartupShortcutPath(), ec);\n }\n \n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     // If the shortcut exists already, remove it for updating\n-    fs::remove(StartupShortcutPath());\n+    boost::system::error_code ec;\n+    fs::remove(StartupShortcutPath(), ec);\n+    if (ec) {\n+        LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), StartupShortcutPath().string());\n+        return false;\n+    }\n \n     if (fAutoStart)\n     {\n@@ -663,8 +670,14 @@ bool GetStartOnSystemStartup()\n \n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n-    if (!fAutoStart)\n-        fs::remove(GetAutostartFilePath());\n+    if (!fAutoStart) {\n+        boost::system::error_code ec;\n+        fs::remove(GetAutostartFilePath(), ec);\n+        if (ec) {\n+            LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), GetAutostartFilePath().string());\n+            return false;\n+        }\n+    }\n     else\n     {\n         char pszExePath[MAX_PATH+1];\n@@ -673,7 +686,12 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n             return false;\n         pszExePath[r] = '\\0';\n \n-        fs::create_directories(GetAutostartDir());\n+        boost::system::error_code ec;\n+        fs::create_directories(GetAutostartDir(), ec);\n+        if (ec) {\n+            LogPrintf(\"%s: fs::create_directories: %s %s\\n\", __func__, ec.message(), GetAutostartDir().string());\n+            return false;\n+        }\n \n         fsbridge::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out | std::ios_base::trunc);\n         if (!optionFile.good())"
      },
      {
        "sha": "1e62e073c8b6ed1bbdcbea6c88eba87fa5084b7a",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -73,7 +73,8 @@ void FreespaceChecker::check()\n     /* Find first parent that exists, so that fs::space does not fail */\n     fs::path parentDir = dataDir;\n     fs::path parentDirOld = fs::path();\n-    while(parentDir.has_parent_path() && !fs::exists(parentDir))\n+    boost::system::error_code ec;\n+    while(parentDir.has_parent_path() && !fs::exists(parentDir, ec))\n     {\n         parentDir = parentDir.parent_path();\n \n@@ -84,22 +85,20 @@ void FreespaceChecker::check()\n         parentDirOld = parentDir;\n     }\n \n-    try {\n-        freeBytesAvailable = fs::space(parentDir).available;\n-        if(fs::exists(dataDir))\n+    freeBytesAvailable = fs::space(parentDir, ec).available;\n+\n+    if(fs::exists(dataDir, ec))\n+    {\n+        if(fs::is_directory(dataDir, ec))\n         {\n-            if(fs::is_directory(dataDir))\n-            {\n-                QString separator = \"<code>\" + QDir::toNativeSeparators(\"/\") + tr(\"name\") + \"</code>\";\n-                replyStatus = ST_OK;\n-                replyMessage = tr(\"Directory already exists. Add %1 if you intend to create a new directory here.\").arg(separator);\n-            } else {\n-                replyStatus = ST_ERROR;\n-                replyMessage = tr(\"Path already exists, and is not a directory.\");\n-            }\n+            QString separator = \"<code>\" + QDir::toNativeSeparators(\"/\") + tr(\"name\") + \"</code>\";\n+            replyStatus = ST_OK;\n+            replyMessage = tr(\"Directory already exists. Add %1 if you intend to create a new directory here.\").arg(separator);\n+        } else {\n+            replyStatus = ST_ERROR;\n+            replyMessage = tr(\"Path already exists, and is not a directory.\");\n         }\n-    } catch (const fs::filesystem_error&)\n-    {\n+    } else {\n         /* Parent directory does not exist or is not accessible */\n         replyStatus = ST_ERROR;\n         replyMessage = tr(\"Cannot create data directory here.\");\n@@ -195,7 +194,8 @@ bool Intro::showIfNeeded(interfaces::Node& node, bool& did_show_intro, bool& pru\n     /* 2) Allow QSettings to override default dir */\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();\n \n-    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || gArgs.GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR) || settings.value(\"fReset\", false).toBool() || gArgs.GetBoolArg(\"-resetguisettings\", false))\n+    boost::system::error_code ec;\n+    if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir), ec) || gArgs.GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR) || settings.value(\"fReset\", false).toBool() || gArgs.GetBoolArg(\"-resetguisettings\", false))\n     {\n         /* Use selectParams here to guarantee Params() can be used by node interface */\n         try {\n@@ -218,13 +218,13 @@ bool Intro::showIfNeeded(interfaces::Node& node, bool& did_show_intro, bool& pru\n                 return false;\n             }\n             dataDir = intro.getDataDirectory();\n-            try {\n-                if (TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir))) {\n-                    // If a new data directory has been created, make wallets subdirectory too\n-                    TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir) / \"wallets\");\n-                }\n+            if (TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir)) == TRY_CREATE_DIRECTORIES_OK ) {\n+                // If a new data directory has been created, make wallets subdirectory too\n+                TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir) / \"wallets\");\n                 break;\n-            } catch (const fs::filesystem_error&) {\n+            }\n+            else\n+            {\n                 QMessageBox::critical(nullptr, PACKAGE_NAME,\n                     tr(\"Error: Specified data directory \\\"%1\\\" cannot be created.\").arg(dataDir));\n                 /* fall through, back to choosing screen */"
      },
      {
        "sha": "00bba6bb520e694a0d62ee9d062489ba26a4a844",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -2300,7 +2300,8 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n     // to avoid confusion due to an interruption.\n     fs::path temppath = fs::absolute(request.params[0].get_str() + \".incomplete\", GetDataDir());\n \n-    if (fs::exists(path)) {\n+    boost::system::error_code ec;\n+    if (fs::exists(path, ec)) {\n         throw JSONRPCError(\n             RPC_INVALID_PARAMETER,\n             path.string() + \" already exists. If you are sure this is what you want, \"\n@@ -2361,7 +2362,11 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n     }\n \n     afile.fclose();\n-    fs::rename(temppath, path);\n+    fs::rename(temppath, path, ec);\n+    if (ec) {\n+        LogPrintf(\"%s: %s %s %s\\n\", __func__, ec.message(), temppath.string(), path.string());\n+        path = temppath;\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"coins_written\", stats.coins_count);"
      },
      {
        "sha": "383809fd6090edc250d00593820bb54e49a9b2d8",
        "filename": "src/rpc/request.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/rpc/request.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/rpc/request.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -123,10 +123,10 @@ bool GetAuthCookie(std::string *cookie_out)\n \n void DeleteAuthCookie()\n {\n-    try {\n-        fs::remove(GetAuthCookieFile());\n-    } catch (const fs::filesystem_error& e) {\n-        LogPrintf(\"%s: Unable to remove random auth cookie file: %s\\n\", __func__, fsbridge::get_filesystem_error_message(e));\n+    boost::system::error_code ec;\n+    fs::remove(GetAuthCookieFile(), ec);\n+    if (ec) {\n+        LogPrintf(\"%s: Unable to remove random auth cookie file: %s %s\\n\", __func__, ec.message(), GetAuthCookieFile().string());\n     }\n }\n "
      },
      {
        "sha": "c42083aa6fd6dfab2068ae837bede3cb0dfd1f9c",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 24,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -137,7 +137,8 @@ bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes)\n {\n     constexpr uint64_t min_disk_space = 52428800; // 50 MiB\n \n-    uint64_t free_bytes_available = fs::space(dir).available;\n+    boost::system::error_code ec;\n+    uint64_t free_bytes_available = fs::space(dir, ec).available;\n     return free_bytes_available >= min_disk_space + additional_bytes;\n }\n \n@@ -594,18 +595,29 @@ const fs::path &GetBlocksDir()\n     if (!path.empty()) return path;\n \n     if (gArgs.IsArgSet(\"-blocksdir\")) {\n-        path = fs::system_complete(gArgs.GetArg(\"-blocksdir\", \"\"));\n-        if (!fs::is_directory(path)) {\n+        boost::system::error_code ec;\n+        path = fs::system_complete(gArgs.GetArg(\"-blocksdir\", \"\"), ec);\n+        if (ec) {\n+            LogPrintf(\"%s: fs::system_complete: %s %s\\n\", __func__, ec.message(), gArgs.GetArg(\"-blocksdir\", \"\"));\n+        }\n+        if (!fs::is_directory(path, ec)) {\n             path = \"\";\n             return path;\n         }\n+        if (ec) {\n+            LogPrintf(\"%s: fs::is_directory: %s %s\\n\", __func__, ec.message(), path.string());\n+        }\n     } else {\n         path = GetDataDir(false);\n     }\n \n     path /= BaseParams().DataDir();\n     path /= \"blocks\";\n-    fs::create_directories(path);\n+    if (!TryCreateDirectories(path)) {\n+        path = \"\";\n+        return path;\n+    }\n+\n     return path;\n }\n \n@@ -620,8 +632,19 @@ const fs::path &GetDataDir(bool fNetSpecific)\n \n     std::string datadir = gArgs.GetArg(\"-datadir\", \"\");\n     if (!datadir.empty()) {\n-        path = fs::system_complete(datadir);\n-        if (!fs::is_directory(path)) {\n+        boost::system::error_code ec;\n+        path = fs::system_complete(datadir, ec);\n+        if (ec) {\n+            LogPrintf(\"%s: fs::system_complete: %s %s\\n\", __func__, ec.message(), datadir);\n+            path = \"\";\n+            return path;\n+        }\n+        if (!fs::is_directory(path, ec)) {\n+            path = \"\";\n+            return path;\n+        }\n+        if (ec) {\n+            LogPrintf(\"%s: fs::is_directory: %s %s\\n\", __func__, ec.message(), path.string());\n             path = \"\";\n             return path;\n         }\n@@ -631,9 +654,9 @@ const fs::path &GetDataDir(bool fNetSpecific)\n     if (fNetSpecific)\n         path /= BaseParams().DataDir();\n \n-    if (fs::create_directories(path)) {\n+    if (TryCreateDirectories(path) == TRY_CREATE_DIRECTORIES_OK) {\n         // This is the first run, create wallets subdirectory too\n-        fs::create_directories(path / \"wallets\");\n+        TryCreateDirectories(path / \"wallets\");\n     }\n \n     return path;\n@@ -642,7 +665,8 @@ const fs::path &GetDataDir(bool fNetSpecific)\n bool CheckDataDirOption()\n {\n     std::string datadir = gArgs.GetArg(\"-datadir\", \"\");\n-    return datadir.empty() || fs::is_directory(fs::system_complete(datadir));\n+    boost::system::error_code ec;\n+    return datadir.empty() || fs::is_directory(fs::system_complete(datadir, ec), ec);\n }\n \n void ClearDatadirCache()\n@@ -899,23 +923,19 @@ bool RenameOver(fs::path src, fs::path dest)\n #endif /* WIN32 */\n }\n \n-/**\n- * Ignores exceptions thrown by Boost's create_directories if the requested directory exists.\n- * Specifically handles case where path p exists, but it wasn't possible for the user to\n- * write to the parent directory.\n- */\n-bool TryCreateDirectories(const fs::path& p)\n+TryCreateDirectoriesStatus TryCreateDirectories(const fs::path& p)\n {\n-    try\n-    {\n-        return fs::create_directories(p);\n-    } catch (const fs::filesystem_error&) {\n-        if (!fs::exists(p) || !fs::is_directory(p))\n-            throw;\n+    boost::system::error_code ec;\n+\n+    if (fs::create_directories(p, ec))\n+        return TRY_CREATE_DIRECTORIES_OK;\n+    // Creation failure because path resolves to an existing directory shall not be treated as an error\n+    if (fs::is_directory(p, ec))\n+        return TRY_CREATE_DIRECTORIES_EXISTS;\n+    if (ec) {\n+        LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), p.string());\n     }\n-\n-    // create_directories didn't create the directory, it had to have existed already\n-    return false;\n+    return TRY_CREATE_DIRECTORIES_FAILED;\n }\n \n bool FileCommit(FILE *file)"
      },
      {
        "sha": "e7b4365a6fd99a1739079aa80d2af0427b184d0e",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -68,7 +68,14 @@ bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes = 0);\n  */\n void ReleaseDirectoryLocks();\n \n-bool TryCreateDirectories(const fs::path& p);\n+typedef enum TryCreateDirectoriesStatus_t\n+{\n+    TRY_CREATE_DIRECTORIES_FAILED = 0, // Failed to create directory\n+    TRY_CREATE_DIRECTORIES_OK = 1,     // New directory created\n+    TRY_CREATE_DIRECTORIES_EXISTS = 2, // Directory already exists\n+} TryCreateDirectoriesStatus;\n+\n+TryCreateDirectoriesStatus TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n // The blocks directory is always net specific.\n const fs::path &GetBlocksDir();"
      },
      {
        "sha": "6ce6d7a3d32784c2273a5a433e5302f2be36f6e5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -3909,9 +3909,18 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         FlatFilePos pos(*it, 0);\n-        fs::remove(BlockFileSeq().FileName(pos));\n-        fs::remove(UndoFileSeq().FileName(pos));\n-        LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n+        boost::system::error_code ec;\n+        fs::remove(BlockFileSeq().FileName(pos), ec);\n+        if (!ec) {\n+            fs::remove(UndoFileSeq().FileName(pos), ec);\n+            if (!ec) {\n+                LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n+            } else {\n+                LogPrintf(\"Prune: %s unable to remove undo file: %s %s\\n\", __func__, ec.message(), UndoFileSeq().FileName(pos).string());\n+            }\n+        } else {\n+            LogPrintf(\"Prune: %s unable to remove block file: %s %s\\n\", __func__, ec.message(), BlockFileSeq().FileName(pos).string());\n+        }\n     }\n }\n "
      },
      {
        "sha": "22b554f4b6d16c90f572c760bc868ed1a887a60d",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 19,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -55,7 +55,8 @@ bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const\n \n static void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename)\n {\n-    if (fs::is_regular_file(wallet_path)) {\n+    boost::system::error_code ec;\n+    if (fs::is_regular_file(wallet_path, ec)) {\n         // Special case for backwards compatibility: if wallet path points to an\n         // existing file, treat it as the path to a BDB data file in a parent\n         // directory that also contains BDB log files.\n@@ -171,14 +172,20 @@ bool BerkeleyEnvironment::Open(bool retry)\n     }\n \n     fs::path pathIn = strPath;\n-    TryCreateDirectories(pathIn);\n+    if (!TryCreateDirectories(pathIn)) {\n+        LogPrintf(\"Cannot create wallet directory %s.\\n\", strPath);\n+        return false;\n+    }\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n         return false;\n     }\n \n     fs::path pathLogDir = pathIn / \"database\";\n-    TryCreateDirectories(pathLogDir);\n+    if (!TryCreateDirectories(pathLogDir)) {\n+        LogPrintf(\"Cannot create log directory %s.\\n\", pathLogDir.string());\n+        return false;\n+    }\n     fs::path pathErrorFile = pathIn / \"db.log\";\n     LogPrintf(\"BerkeleyEnvironment::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n@@ -216,10 +223,11 @@ bool BerkeleyEnvironment::Open(bool retry)\n         if (retry) {\n             // try moving the database env out of the way\n             fs::path pathDatabaseBak = pathIn / strprintf(\"database.%d.bak\", GetTime());\n-            try {\n-                fs::rename(pathLogDir, pathDatabaseBak);\n+            boost::system::error_code ec;\n+            fs::rename(pathLogDir, pathDatabaseBak, ec);\n+            if (!ec) {\n                 LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathLogDir.string(), pathDatabaseBak.string());\n-            } catch (const fs::filesystem_error&) {\n+            } else {\n                 // failure is ok (well, not really, but it's not worse than what we started with)\n             }\n             // try opening it again one more time\n@@ -416,7 +424,8 @@ bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::vector<st\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n-    if (fs::exists(walletDir / walletFile))\n+    boost::system::error_code ec;\n+    if (fs::exists(walletDir / walletFile, ec))\n     {\n         std::string backup_filename;\n         BerkeleyEnvironment::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n@@ -795,7 +804,11 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb) {\n-                    fs::remove_all(fs::path(strPath) / \"database\");\n+                    boost::system::error_code ec;\n+                    fs::remove_all(fs::path(strPath) / \"database\", ec);\n+                    if (ec) {\n+                        LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), (fs::path(strPath) / \"database\").string());\n+                    }\n                 }\n             }\n         }\n@@ -869,22 +882,37 @@ bool BerkeleyDatabase::Backup(const std::string& strDest)\n                 // Copy wallet file\n                 fs::path pathSrc = env->Directory() / strFile;\n                 fs::path pathDest(strDest);\n-                if (fs::is_directory(pathDest))\n+\n+                boost::system::error_code ec;\n+                bool retval;\n+\n+                retval = fs::is_directory(pathDest, ec);\n+                // Can't be handled as error because it's testing the path only\n+                //if (ec) {\n+                //    LogPrintf(\"%s: fs::is_directory: %s %s\\n\", __func__, ec.message(), pathDest.string());\n+                //    return false;\n+                //}\n+                if (retval)\n                     pathDest /= strFile;\n \n-                try {\n-                    if (fs::equivalent(pathSrc, pathDest)) {\n-                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.string());\n-                        return false;\n-                    }\n+                retval = fs::equivalent(pathSrc, pathDest, ec);\n+                if (ec) {\n+                    LogPrintf(\"%s: fs::equivalent: %s %s %s\\n\", __func__, ec.message(), pathSrc.string(), pathDest.string());\n+                    return false;\n+                }\n+                if (retval) {\n+                    LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.string());\n+                    return false;\n+                }\n \n-                    fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n-                    LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n-                    return true;\n-                } catch (const fs::filesystem_error& e) {\n-                    LogPrintf(\"error copying %s to %s - %s\\n\", strFile, pathDest.string(), fsbridge::get_filesystem_error_message(e));\n+                fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists, ec);\n+                if (ec) {\n+                    LogPrintf(\"%s: fs:copy_file: %s %s %s\\n\", __func__, ec.message(), pathSrc.string(), pathDest.string());\n                     return false;\n                 }\n+\n+                LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n+                return true;\n             }\n         }\n         MilliSleep(100);"
      },
      {
        "sha": "d551c2ae119590ad3c0c94204c21743b1d1c2286",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -19,10 +19,11 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         boost::system::error_code error;\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n-        if (error || !fs::exists(wallet_dir)) {\n+        boost::system::error_code ec;\n+        if (error || !fs::exists(wallet_dir, ec)) {\n             chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\").translated, wallet_dir.string()));\n             return false;\n-        } else if (!fs::is_directory(wallet_dir)) {\n+        } else if (!fs::is_directory(wallet_dir, ec)) {\n             chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\").translated, wallet_dir.string()));\n             return false;\n         // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version"
      },
      {
        "sha": "a4963761259a13a2537ae0828c42149a4deb0ce9",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -763,7 +763,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n      * https://github.com/bitcoin/bitcoin/issues/9934\n      * It may also avoid other security issues.\n      */\n-    if (fs::exists(filepath)) {\n+    boost::system::error_code ec;\n+    if (fs::exists(filepath, ec)) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n     }\n "
      },
      {
        "sha": "aca1081943493374afd03173c18a4009642af9ec",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -2584,12 +2584,13 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n     WalletLocation location(request.params[0].get_str());\n \n+    boost::system::error_code ec;\n     if (!location.Exists()) {\n         throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + location.GetName() + \" not found.\");\n-    } else if (fs::is_directory(location.GetPath())) {\n+    } else if (fs::is_directory(location.GetPath(), ec)) {\n         // The given filename is a directory. Check that there's a wallet.dat file.\n         fs::path wallet_dat_file = location.GetPath() / \"wallet.dat\";\n-        if (fs::symlink_status(wallet_dat_file).type() == fs::file_not_found) {\n+        if (fs::symlink_status(wallet_dat_file, ec).type() == fs::file_not_found) {\n             throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Directory \" + location.GetName() + \" does not contain a wallet.dat file.\");\n         }\n     }"
      },
      {
        "sha": "e1a1bb99cb0299e57b2761cd9b6b6740d470c3b7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -3599,9 +3599,10 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     // 4. For backwards compatibility, the name of a data file in -walletdir.\n     LOCK(cs_wallets);\n     const fs::path& wallet_path = location.GetPath();\n-    fs::file_type path_type = fs::symlink_status(wallet_path).type();\n+    boost::system::error_code ec;\n+    fs::file_type path_type = fs::symlink_status(wallet_path, ec).type();\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n-          (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n+          (path_type == fs::symlink_file && fs::is_directory(wallet_path, ec)) ||\n           (path_type == fs::regular_file && fs::path(location.GetName()).filename() == location.GetName()))) {\n         error_string = strprintf(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \""
      },
      {
        "sha": "bc25c37c1705a34b18ce0848efdbc285b5cb19cd",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -21,7 +21,8 @@ static void WalletToolReleaseWallet(CWallet* wallet)\n \n static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::path& path)\n {\n-    if (fs::exists(path)) {\n+    boost::system::error_code ec;\n+    if (fs::exists(path, ec)) {\n         tfm::format(std::cerr, \"Error: File exists already\\n\");\n         return nullptr;\n     }\n@@ -49,7 +50,8 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n \n static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::path& path)\n {\n-    if (!fs::exists(path)) {\n+    boost::system::error_code ec;\n+    if (!fs::exists(path, ec)) {\n         tfm::format(std::cerr, \"Error: Wallet files does not exist\\n\");\n         return nullptr;\n     }\n@@ -113,7 +115,8 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             wallet_instance->Flush(true);\n         }\n     } else if (command == \"info\") {\n-        if (!fs::exists(path)) {\n+        boost::system::error_code ec;\n+        if (!fs::exists(path, ec)) {\n             tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name);\n             return false;\n         }"
      },
      {
        "sha": "96fd1ad1adf3609fc12356df57bf10d662ebf9b4",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -10,18 +10,19 @@\n fs::path GetWalletDir()\n {\n     fs::path path;\n+    boost::system::error_code ec;\n \n     if (gArgs.IsArgSet(\"-walletdir\")) {\n         path = gArgs.GetArg(\"-walletdir\", \"\");\n-        if (!fs::is_directory(path)) {\n+        if (!fs::is_directory(path, ec)) {\n             // If the path specified doesn't exist, we return the deliberately\n             // invalid empty string.\n             path = \"\";\n         }\n     } else {\n         path = GetDataDir();\n         // If a wallets directory exists, use that, otherwise default to GetDataDir\n-        if (fs::is_directory(path / \"wallets\")) {\n+        if (fs::is_directory(path / \"wallets\", ec)) {\n             path /= \"wallets\";\n         }\n     }\n@@ -31,11 +32,12 @@ fs::path GetWalletDir()\n \n static bool IsBerkeleyBtree(const fs::path& path)\n {\n-    if (!fs::exists(path)) return false;\n-\n     // A Berkeley DB Btree file has at least 4K.\n     // This check also prevents opening lock files.\n     boost::system::error_code ec;\n+\n+    if (!fs::exists(path, ec)) return false;\n+\n     auto size = fs::file_size(path, ec);\n     if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n     if (size < 4096) return false;\n@@ -60,10 +62,16 @@ std::vector<fs::path> ListWalletDir()\n     const size_t offset = wallet_dir.string().size() + 1;\n     std::vector<fs::path> paths;\n     boost::system::error_code ec;\n+    boost::system::error_code eci;\n \n-    for (auto it = fs::recursive_directory_iterator(wallet_dir, ec); it != fs::recursive_directory_iterator(); it.increment(ec)) {\n+    for (auto it = fs::recursive_directory_iterator(wallet_dir, ec); it != fs::recursive_directory_iterator(); it.increment(eci)) {\n         if (ec) {\n-            LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), it->path().string());\n+            LogPrintf(\"%s: iterator: %s %s\\n\", __func__, ec.message(), it->path().string());\n+            continue;\n+        }\n+        if (eci) {\n+            LogPrintf(\"%s: increment: %s %s\\n\", __func__, eci.message(), it->path().string());\n+            it.disable_recursion_pending();\n             continue;\n         }\n \n@@ -100,5 +108,6 @@ WalletLocation::WalletLocation(const std::string& name)\n \n bool WalletLocation::Exists() const\n {\n-    return fs::symlink_status(m_path).type() != fs::file_not_found;\n+    boost::system::error_code ec;\n+    return fs::symlink_status(m_path, ec).type() != fs::file_not_found;\n }"
      },
      {
        "sha": "e6c08245da0cfef3c27faaa44decafad108f9a5b",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -89,7 +89,7 @@ def wallet_file(name):\n             assert_equal(os.path.isfile(wallet_file(wallet_name)), True)\n \n         # should not initialize if wallet path can't be created\n-        exp_stderr = \"boost::filesystem::create_directory:\"\n+        exp_stderr = \"Error: Error initializing wallet database environment\"\n         self.nodes[0].assert_start_raises_init_error(['-wallet=wallet.dat/bad'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')"
      },
      {
        "sha": "37e58a27f08a2ad2bdc27d632bef3ffd652f141a",
        "filename": "test/lint/lint-boost-filesystem-parameters.sh",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/615651ea8200c8f08c41c469ceb75819fdfcc7ad/test/lint/lint-boost-filesystem-parameters.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/615651ea8200c8f08c41c469ceb75819fdfcc7ad/test/lint/lint-boost-filesystem-parameters.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-boost-filesystem-parameters.sh?ref=615651ea8200c8f08c41c469ceb75819fdfcc7ad",
        "patch": "@@ -0,0 +1,104 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Check that all boost filesystem functions have necessary parameters, tests excluded\n+\n+export LC_ALL=C\n+\n+check_params () {\n+    RET_VAL=\"\"\n+    EXPECTED=$(echo $2 | grep -o \",\" | tr -d \"\\n\")\n+    GREP=$(git grep -n \"$1(\" -- \"*.cpp\")\n+    IFS=$'\\n'\n+\n+    for LINE in ${GREP}\n+    do\n+        # tests should not be checked\n+        if [[ ${LINE} != *\"/test/\"* ]]; then\n+            PARAMS=$(echo ${LINE} | grep -oP \"(?<=$1\\()([^|&{]+)(?=[|&{(\\n)])\")\n+            COUNT=$(echo ${PARAMS} | grep -o \",\" | tr -d \"\\n\")\n+            if [[ $2 == *\"fs::\"* ]] && [[ ${PARAMS} != *\"fs::\"* ]]; then\n+                ${COUNT}=,${COUNT}\n+            fi\n+            if [[ ${#COUNT} -lt ${#EXPECTED} ]]; then\n+                RET_VAL+=${LINE}${IFS};\n+            fi\n+        fi\n+    done\n+\n+    if [[ ${RET_VAL} != \"\" ]]; then\n+        echo \"All calls to $1() should use error_code parameter\"\n+        echo\n+        echo \"${RET_VAL}\"\n+        echo\n+        echo \"Expected use:\"\n+        echo \"    boost::system::error_code ec;\"\n+        echo \"    retval = $1($2);\"\n+        echo \"    if (ec) {\"\n+        echo \"        ...\"\n+        echo \"    }\"\n+        exit 1\n+    fi\n+}\n+\n+\n+check_params \"fs::canonical\" \"path, ec\"\n+#check_params \"fs::canonical\" \"path, base, ec\"\n+\n+check_params \"fs::copy\" \"from, to, ec\"\n+check_params \"fs::copy_directory\" \"from, to, ec\"\n+\n+# optional fs:: parameters can be detected\n+check_params \"fs::copy_file\" \"pathFrom, pathTo[, fs::copy_option], ec\"\n+\n+check_params \"fs::copy_symlink\" \"existingSymlink, newSymlink, ec\"\n+check_params \"fs::create_directories\" \"path, ec\"\n+check_params \"fs::create_directory\" \"path, ec\"\n+check_params \"fs::create_directory_symlink\" \"pathTo, newSymlink, ec\"\n+check_params \"fs::create_hardlink\" \"pathTo, newHardLink, ec\"\n+check_params \"fs::create_symlink\" \"pathTo, newSymlink, ec\"\n+\n+# at least error_code parameter\n+check_params \"fs::current_path\" \"ec\"\n+# path is mandatory if used standalone\n+check_params \"  fs::current_path\" \"path, ec\"\n+\n+check_params \" = fs::directory_iterator\" \"path, ec\"\n+\n+check_params \"fs::exists\" \"path, ec\"\n+check_params \"fs::equivalent\" \"path1, path2, ec\"\n+check_params \"fs::file_size\" \"path, ec\"\n+check_params \"fs::hard_link_count\" \"path, ec\"\n+check_params \"fs::initial_path\" \"ec\"\n+check_params \"fs::is_directory\" \"path, ec\"\n+check_params \"fs::is_empty\" \"path, ec\"\n+check_params \"fs::is_other\" \"path, ec\"\n+check_params \"fs::is_regular_file\" \"path, ec\"\n+check_params \"fs::is_symlink\" \"path, ec\"\n+check_params \"fs::last_write_time\" \"path, new_time, ec\"\n+check_params \"fs::read_symlink\" \"path, ec\"\n+\n+# variable number of parameters\n+#check_params \"fs::relative\" \"path, ec\"\n+#check_params \"fs::relative\" \"path, base, ec\"\n+\n+check_params \"fs::remove\" \"path, ec\"\n+check_params \"fs::remove_all\" \"path, ec\"\n+check_params \"fs::rename\" \"from, to, ec\"\n+\n+check_params \" = fs::recursive_directory_iterator\" \"path, ec\"\n+\n+check_params \"fs::resize_file\" \"path, size, ec\"\n+check_params \"fs::space\" \"path, ec\"\n+check_params \"fs::status\" \"path, ec\"\n+check_params \"fs::symlink_status\" \"path, ec\"\n+check_params \"fs::system_complete\" \"path, ec\"\n+check_params \"fs::temp_directory_path\" \"ec\"\n+\n+# error code not necessary for default model\n+#check_params \"fs::unique_path\" \"model, ec\"\n+\n+check_params \"fs::weakly_canonical\" \"path, ec\""
      }
    ]
  }
]