DrahtBot,2019-06-20 09:47:30,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16551](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16551.html) (test: Test that low difficulty chain fork i",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-503959202,503959202,
NicolasDorier,2019-06-21 16:57:49,This PR is ready to be reviewed/merged.,https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-504496948,504496948,
NicolasDorier,2019-06-25 09:52:38,"Because `forcerelay` should set the permission `relay` as well, I added some tests around it.\nI also added a test to see if the permissions get combined correctly between whitelist and whitebind.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-505373320,505373320,
MarcoFalke,2019-06-25 16:20:41,"Looks like the gui does not compile\n\n```\nqt/rpcconsole.cpp:1123:51: error: ‘const class CNodeStats’ has no member named ‘fWhitelisted’",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-505517875,505517875,
NicolasDorier,2019-06-26 06:34:16,"@MarcoFalke thanks, fixed.\n\nTravis fails on unrelated test `wallet_encryption`, a kick-in-the-box can effectively fix it. Is it possible to run travis again?",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-505740060,505740060,
laanwj,2019-06-27 11:14:10,"Concept ACK, thanks for working on this. I think un-bundling ""whitelisting"" is something long needed.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-506303964,506303964,
NicolasDorier,2019-06-27 14:19:02,"I refactored to follow the guidelines, making things a bit more readable as @MarcoFalke suggested.\nI removed some bitwise magic like @ajtowns suggested.\n\nThe only point that I did not do: I use `enum` over `enum class`. \nThere is no easy to read way to make flags with enum class. :(",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-506366145,506366145,
NicolasDorier,2019-06-27 14:58:33,Now enforcing ForceRelay => Relay at the enum level. It makes the code more obviously correct.,https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-506382488,506382488,
NicolasDorier,2019-06-28 02:45:37,Ok fully addressed all the nits.,https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-506579339,506579339,
NicolasDorier,2019-06-29 03:14:05,"btw, as a follow up PR, I may add a RPC command to change the peer's permission. I often needed that. I remember @jnewbery tried to do it a while ago for whitelisting a peer.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-506921915,506921915,
NicolasDorier,2019-06-29 03:29:08,"Another idea for follow up PR: allowing the use of permissions for `connect`. (both at config and RPC level)\nin a backward compatible way.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-506922586,506922586,
NicolasDorier,2019-06-29 04:31:20,"@ajtowns I reverted the decision of having a `IsLegacyWhitelist()` method instead of passing around the old `fWhitelisted`. Instead I renamed `fWhitelisted` to `m_legacyWhitelisted` to prevent people from using it.\n\nThe previous logic was, if the permissions granted were including `noban | mempool` then `fwhitelisted` must be true, so removing `fwhitelisted` and replacing it with a single `IsL",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-506925516,506925516,
jnewbery,2019-07-02 18:50:22,"Big concept ACK. The whitelist logic should really be unbundled and rationalized. I'm not sold on the approach though. Adding structure to the `bitcoin.conf` file for certain options requires a bunch of custom parsing code to be added and maintained, and introduces complexity for users.\n\nOne alternative approach would be to build on the work that @ryanofsky has done here: https://github.com/bi",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-507801090,507801090,
NicolasDorier,2019-07-03 06:22:32,"The parsing logic is contained, easy to review and widely tested. (100% code coverage)\n\n> Adding structure to the bitcoin.conf file for certain options requires a bunch of custom parsing code to be added and maintained, and introduces complexity for users.\n\nI disagree, I want to use this feature myself, and just extending the parsing code of whitebind and whitelist is the easiest way for m",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-507956796,507956796,
sipa,2019-07-03 06:27:59,"I haven't thought enough about the separate config file idea, and what kind of settings ought to go where to have a strong opinion.\n\nHowever, what about this: permitting individual settings (like the whitelisting ones) to have JSON values as values? (anywhere, whether specified from bitcoin.conf or the command line). That would equally avoid custom per-option parsing logic, without spreading o",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-507958226,507958226,
NicolasDorier,2019-07-03 08:42:07,"I personally prefer the parsing method. The code is simple and does not require lot's of maintenance.\nAlso I prefer reading `-whitebind=bloom,noban@127.0.0.1:2727` than `-whitebind={interface:""127.0.0.1:2727"",bloom:""true"", noban:""true""}`\n\nIt is overkill to use json for a comma separated list when a dumb split saves the day.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-507999665,507999665,
NicolasDorier,2019-07-03 11:32:59,"Addressed nits of @mzumsande and @practicalswift.\nI added some comments on the flag parsing method.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508055636,508055636,
jnewbery,2019-07-03 22:26:51,"I still think the configuration serialization should be designed with the longer-term goal of making this config updatable at runtime and persistent across restarts. For that, the bitcoin.conf file is not suitable (since bitcoind can't write to it), so we either:\n\n- come up with our own serialization format, and write custom code that can parse and write to that format, then test, review and m",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508275442,508275442,
NicolasDorier,2019-07-04 08:57:53,"@jnewbery I don't believe that the goal of having a new json object conflict with this PR.\n\nAs a user, I have no use for a long term json file for configuring permissions, it will cause me more trouble than anything over this solution, so I will not work on it. (I will need change to my dockerfiles to support putting permissions files in the right folder, and build the file via bash script, in",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508401612,508401612,
jnewbery,2019-07-04 12:33:47,"> This PR does not prevent you from later having a json file if you wish, it will just need to compute the union of permissions granted by the different methods.\n> \n> It is also 100% backward compatible, so people not wanting to take advantage of the syntax of this PR can just simply ignore it.\n\nThis seems confusing. Having multiple ways for config to be specified leads to confusing intera",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508466519,508466519,
NicolasDorier,2019-07-04 13:16:41,"@jnewbery most likely people will not use both at the same time. This is concern for a corner case. \n\nThis can be solved by later in two ways: \n* Either no runtime permission can be changed if white{bind/list} of the peer have specific permissions set.\n* Either the permissions set at runtime should not be persisted, leaving to the client the responsability to override peer's permission whe",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508479143,508479143,
ajtowns,2019-07-05 01:57:33,"It could also be resolved by having the dynamic permissions override the static config. This is something that would need to be resolved even if both bitcoin.conf and settings.json were in json format, though.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508604844,508604844,
sipa,2019-07-05 02:32:42,"@NicolasDorier Also consider that in the future we may want to extend whitelisting with more features like bandwidth limiting, or restricting to bip150-like authenticated peers. I think keeping things extensible may be hard with a custom format like this.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508609870,508609870,
NicolasDorier,2019-07-05 04:38:29,"@sipa I see, sadly I don't have time to work on something of this scope.\n\nI wished to do this PR because I only want one simple thing: Allow bloom filters for whitelisted peers as bloom filter will be off by default in the next release. \n\nBTCPayServer is exposing a whitebind accessible via a (confidential) Tor3 address that other wallets like Wasabi wallet, Bisq or any wallet can connect t",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508626741,508626741,
sipa,2019-07-05 04:59:44,"I'm not suggesting you doing anything around a separate json config file, nor around any of the other future features. I just suspect it'd be much easier to just use JSON in the existing whitebind config setting rather than a custom parser, especially if we suspect it will be extended later with additional options.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508629480,508629480,
NicolasDorier,2019-07-05 07:41:51,"@sipa so basically you mean having `--whitebind=[noban,bloom]@127.0.0.1:8333` instead of `--whitebind=noban,bloom@127.0.01:8333` ?",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508664097,508664097,
NicolasDorier,2019-07-05 07:51:00,"Well not against it but I don't see the point too much.\n\n1. It will not make the code simple and more compact, it just replace a couple of split by some univalue parsing. In terms of line of code this will be exactly the same.\n2. Later, if you want to do another format you could consider doing it by using `$` instead of `@` as separator.\n\nThough if it is really all that is needed to get ",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-508666621,508666621,
NicolasDorier,2019-07-10 13:35:16,"@sipa can you tell me more specifically what you want?\n\n* `--whitebind=[""noban"",""bloom""]@127.0.0.1:8333`\n* `--whitebind={permissions: [""noban"",""bloom""], address: ""127.0.0.1:8333""}`\n* `--whiterules={rule: [{permissions: [""noban"",""bloom""], bind: ""127.0.0.1:8333""}]}`\n\n?",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-510063422,510063422,
NicolasDorier,2019-07-10 13:36:32,"@jnewbery please anything more specific than ""we want JSON based stuff"" would help me.\n\nJSON format whatever...",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-510063926,510063926,
MarcoFalke,2019-07-10 13:46:08,"Just to add to the list of options:\n\n* `-whitebind={""127.0.0.1:8338"" : [""noban"",""bloom""] ,  ""127.0.0.2"" : []}`",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-510067714,510067714,
NicolasDorier,2019-07-11 08:06:52,"@MarcoFalke you mean as an additional way to configure it, keeping the `noban,bloom@127.0.0.1:8338` format? I wish we keep the current format really because dynamically creating json files (like adding rules) is bash is a pain in the ass.\n\nI have the case where different process can modify the bitcoin config,  all being able to add their own whitebind (like is the case currently), editing such",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-510378193,510378193,
laanwj,2019-07-11 18:50:17,"JSON on the command line? I'm not sure. That would be a first.\nI feel like there's a lot of scope creep going on here. I think this PR should be focused on adding this functionality (maybe we can even have it for 0.19?), not on redefining how options are parsed. That can be discussed somewhere else.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-510609068,510609068,
NicolasDorier,2019-07-12 10:06:41,"I agree, but would do anything for ACKs to get that into 0.19.0, I would clean the toilet (hell, even eat veggies) to get ACKs rather than enabling bloom filter on 0.19.0 for on btcpay installs by default.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-510831024,510831024,
DrahtBot,2019-07-24 18:15:40,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-514742270,514742270,
NicolasDorier,2019-07-26 03:56:50,rebased,https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-515299426,515299426,
NicolasDorier,2019-07-26 08:18:21,"Test failing, but probably unrelated to this PR.\n```\n0 stderr bitcoind: validation.cpp:4526: void CChainState::CheckBlockIndex(const Consensus::Params &): Assertion `setBlockIndexCandidates.count(pindex)' failed. [0m\n```",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-515357489,515357489,
mzumsande,2019-07-26 08:36:55,"yes, it happens in other branches too, see #16444.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-515363253,515363253,
MarcoFalke,2019-08-06 13:28:23,unsigned Approach ACK 1ad7106670344735677e958c35efa81d5d04126e,https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-518669324,518669324,
Sjors,2019-08-06 14:38:45,"Concept ACK. Maybe tag with 0.19 given #16152?\n\nI think the simple `noban,bloom@127.0.0.1:8338` format is good enough. The ability to offer bloom filters to selected peers seems worth the extra complexity, and it reduces confusion of what `-whitelist` currently does.\n\nI suggest that we keep the `-whitelist` argument simple, and use a future RPC for more complex rules. Such an RPC call coul",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-518698424,518698424,
NicolasDorier,2019-08-07 09:52:47,"@Sjors I will rebase, this was based on a commit where test has been broken for some reason. Will fix the warnings as well.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-519027403,519027403,
NicolasDorier,2019-08-07 15:29:45,"Rebased, tests passing @Sjors (Warnings should be fixed)",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-519148694,519148694,
Sjors,2019-08-08 08:59:48,"Almost, still get this one:\n\n```\nnet_permissions.cpp:28:38: warning: comparison of integers of different signs: 'const int' and 'const typename basic_string<char, char_traits<char>, allocator<char> >::size_type' (aka 'const unsigned long') [-Wsign-compare]\n            int len = commaSeparator == std::string::npos ? permissions.length() - readen : commaSeparator - readen;\n                ",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-519433070,519433070,
laanwj,2019-08-08 11:29:54,"IMO improving the tests can be done in a follow-up PR\nlet's get rid of the warning though",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-519479963,519479963,
MarcoFalke,2019-08-08 18:11:14,"Agree with @laanwj. Lets switch to the new logic in tests in a follow up. I am happy to do that, but I'd rather not have this pull grow even more.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-519629194,519629194,
NicolasDorier,2019-08-11 02:34:07,"@Sjors if you look the C++ tests I am testing it very strongly with all kind of edge cases. It does not make sense to test the parse flag in isolation as it is not used in the code that way.\n\nI should have fixed the warnings now. I am unsure though because I am developing on windows and msvc says it is good.",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-520194945,520194945,
laanwj,2019-08-14 15:06:58,re-ACK c5b404e8f1973afe071a07c63ba1038eefe13f0f,https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-521286681,521286681,
Sjors,2019-08-15 11:53:36,"There should be a followup to document the new syntax in `bitcoind` help (`gArgs.AddArg(""whitelist=<IP address or network>`).",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-521615630,521615630,
NicolasDorier,2019-08-15 13:07:53,"@Sjors I can do that, though I am unsure where is the best place for me to document properly this. I think the full description might be too long for the command line?",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-521634206,521634206,
Sjors,2019-08-15 13:54:22,"There are other command line arguments with multi-line explanations, so I don't think that's a huge issue:\n<img width=""564"" alt=""Schermafbeelding 2019-08-15 om 15 53 49"" src=""https://user-images.githubusercontent.com/10217/63099195-e3c59880-bf74-11e9-8996-41ddf37dd8e9.png"">\n",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-521649350,521649350,
amitiuttarwar,2020-12-23 19:57:23,"This PR introduced the field `permissions` to the `getpeerinfo` RPC, but did not add it to the `RPCHelpMan`. I've opened #20756 to make the documentation consistent :) ",https://github.com/bitcoin/bitcoin/pull/16248#issuecomment-750450829,750450829,
AkioNak,2019-06-24 01:51:36,nit: This 2 lines can be written as ```self.stop_node(1)``` .,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r296515972,296515972,test/functional/p2p_permissions.py
NicolasDorier,2019-06-24 04:58:12,thanks! fixed.,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r296552372,296552372,test/functional/p2p_permissions.py
ajtowns,2019-06-25 03:26:36,Missing copyright headers?,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r296992349,296992349,src/net_permissions.cpp
ajtowns,2019-06-25 03:31:01,"""relay transactions from this peer"" ? (as opposed to relay them to the peer)",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r296992962,296992962,src/net_permissions.h
ajtowns,2019-06-25 04:00:12,Should `CNode::permissionFlags` be private instead of public?,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r296997399,296997399,src/net.h
ajtowns,2019-06-25 04:01:21,"No need to remove the trailing comma, it's not javascript :)",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r296997572,296997572,src/net.cpp
ajtowns,2019-06-25 04:24:53,"Could drop `fWhiltelisted` from `CNode` and replace it in `CNodeStats` with \n\n    bool IsWhitelisted() const { return (permissionFlags & PF_DEFAULT) == PF_DEFAULT; }\n\n",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297000948,297000948,src/net.cpp
ajtowns,2019-06-25 04:34:30,Should be `const auto&` (or `const std::string&`) I think,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297002511,297002511,src/rpc/net.cpp
ajtowns,2019-06-25 04:41:32,"Is the logic there right? `allowLegacy` is true if either `hListenSocket` has default whitelist perms **or** the addr has default whitelist perms. Shouldn't it be false if `hListenSocket` has default whitelist perms (due to whitebind) but addr has whitelist perms other than default (ie, not `PF_NONE` but not `PF_ISDEFAULT` either)?",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297003487,297003487,src/net.cpp
ajtowns,2019-06-25 05:03:32,"I think adding:\n\n    inline bool HasNetPermissionFlag(CNetPermissionFlags flags, CNetPermissionFlags f)\n    {\n        return (flags & f) == f;\n    }\n    inline void AddNetPermissionFlag(CNetPermissionFlags& flags, CNetPermissionFlags f)\n    {\n        flags = static_cast<CNetPermissionFlags>(flags | f);\n    }\n    inline void ClearNetPermissionFlag(CNetPermissionFlags& flags, CNe",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297006775,297006775,src/net.cpp
NicolasDorier,2019-06-25 05:36:49,"So `PF_ISDEFAULT` in this case means that either `whitebind` or `whitelist` does not use `@` syntax to define specific permissions. (`PF_ISDEFAULT` does not mean that the default perm, contrary to `PF_DEFAULT`, are being used, it just mean that we want to keep legacy behavior. I think I should rename this flag, this is confusing)\n\nTo keep backward compatibility if either of them use the old sy",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297012742,297012742,src/net.cpp
NicolasDorier,2019-06-25 05:43:24,Actually we can't because we are affecting it from outside of the function. You think we should add the flag as a parameter to the ctor?,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297014071,297014071,src/net.h
NicolasDorier,2019-06-25 05:56:43,Will rename `PF_ISDEFAULT` to `PF_ISIMPLICIT`,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297016800,297016800,src/net.cpp
NicolasDorier,2019-06-25 06:03:34,I don't think it should be replaced. I think it should be completely removed when we decide to not put the flag in getpeerinfo.,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297018382,297018382,src/net.cpp
ajtowns,2019-06-25 06:46:25,"Well, could just put the logic in directly in `getpeerinfo` too -- it's also in `RPCConsole::updateNodeDetail` at present. If you're redoing all the logic to not use fWhitelist, maybe it already makes sense to drop it from the getpeerinfo though?",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297029169,297029169,src/net.cpp
ajtowns,2019-06-25 06:49:27,"I tried:\n\n         bool m_prefer_evict{false}; // This peer is preferred for eviction.\n    +private:\n         CNetPermissionFlags permissionFlags{PF_NONE};\n    +public:\n         bool HasPermission(CNetPermissionFlags permission) const {\n\nand it compiled fine for me? `CConnman` is a friend class already, so it's functions can still play with it.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297029958,297029958,src/net.h
NicolasDorier,2019-06-25 07:06:15,"Not against it, but wouldn't it better to have a templated version somewhere else?\n\nWhere could I put such utility function?",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297035122,297035122,src/net.cpp
ajtowns,2019-06-25 07:30:50,"Or template the bitwise ops directly, maybe -- http://blog.bitwigglers.org/using-enum-classes-as-type-safe-bitmasks/ ? Doesn't seem like there's an existing header file that would fit into to me.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297043433,297043433,src/net.cpp
NicolasDorier,2019-06-25 09:50:04,"It seems to me such change should be better done globally across the project separately, this is not trivial to review.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297102028,297102028,src/net.cpp
NicolasDorier,2019-06-25 10:00:03,"@ajtowns good point. I don't know if it should be dropped, I expect lot's of people depending on it. But you are right, no need to pass around the fWhitelisted and I can move that in getpeerinfo.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297106427,297106427,src/net.cpp
ajtowns,2019-06-25 11:53:50,"I don't think there's much call for it elsewhere, there's just a couple of `static_cast` for SIGHASH in core_write.cpp and one for ServiceFlags in net.cpp, and some in leveldb. Going by:\n\n    $ grep 'static_cast<[^>*&]*>[(][^)]*[|&~^]' -rI | grep -v qt.*moc | grep -v paymentrequest.pb.cc | grep -v CNetPermissionFlags\n",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297147319,297147319,src/net.cpp
MarcoFalke,2019-06-26 13:10:27,"nit with regard to coding style:\n* Newly introduced classes don't have the `C` prefix\n* Members start with `m_`, `m_snake_case`\n* `if` statements are either in one line or the code blocks are wrapped in `{}`.\n\n```suggestion\n        NetPermissionFlags m_permissions;\n```\n\nAlso, you may use clang-format-diff and yapf-diff. https://github.com/bitcoin/bitcoin/blob/master/doc/productiv",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r297655614,297655614,src/net.h
NicolasDorier,2019-06-27 12:40:23,"fair enough, doing it for net_permissions then",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r298154841,298154841,src/net.cpp
practicalswift,2019-07-02 09:32:15,Nit: Use `nullptr` instead of `NULL` (see rationale in developer notes). Applies throughout PR :-),https://github.com/bitcoin/bitcoin/pull/16248#discussion_r299391072,299391072,src/net_permissions.cpp
practicalswift,2019-07-02 09:33:13,This `permissionSeparator` shadows `permissionSeparator` in the outer context.,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r299391471,299391471,src/net_permissions.cpp
practicalswift,2019-07-02 09:36:55,"Use `std::string& error` instead of `std::string* error` (see recommendation in developer notes).\n\nNit: Use another variable name to avoid shadowing `error` included from `util/system.h`.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r299393081,299393081,src/net_permissions.cpp
mzumsande,2019-07-02 16:13:06,"This gives me compiler warnings (""warning: ‘CConnman::ListenSocket::socket’ will be initialized after [-Wreorder] SOCKET socket;""), suggest to change the order somewhere (in the constructor or in the struct).",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r299567411,299567411,src/net.h
mzumsande,2019-07-02 16:14:16,"Suggest to use std::string::npos instead of -1 here and below (prevents ""comparison between signed and unsigned"" compiler warnings).",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r299567894,299567894,src/test/netbase_tests.cpp
NicolasDorier,2019-07-03 08:48:00,I was using pointer because I don't want to burden the user to retrieve the error. But meh... everywhere we use it we need the error so I will change to ref.,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r299843060,299843060,src/net_permissions.cpp
MarcoFalke,2019-08-14 18:39:46,Why are the fallbacks set to `false` and not the `DEFAULT_` value?,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314025297,314025297,src/net.cpp
MarcoFalke,2019-08-14 18:41:46,Why is this checked before the flag is set in line 916?,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314026195,314026195,src/net.cpp
MarcoFalke,2019-08-14 19:04:15,Why is this not using `ResolveErrMsg` like before?,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314035862,314035862,src/net_permissions.cpp
MarcoFalke,2019-08-14 19:17:24,Why is this `noban` and not `relay`?,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314040941,314040941,src/net_processing.cpp
MarcoFalke,2019-08-14 19:19:45,Where is this from and why is it needed? I couldn't find it in previous code,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314041751,314041751,src/net.cpp
MarcoFalke,2019-08-14 19:27:32,"Doesn't p2p_port(1) return the port of node 1, so in the config of node 1 you are whitelisting itself? Dumb question, but I can't see how this test passes.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314044640,314044640,test/functional/p2p_permissions.py
NicolasDorier,2019-08-15 07:14:30,"Because the constant is in a different file which is not in imported into the scope of this file.\n\nLooking at other `GetBoolArg` references in this file, you can notice that all of them have the same issue, none of them reference `DEFAULT_`",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314197312,314197312,src/net.cpp
NicolasDorier,2019-08-15 07:18:04,"Thanks to report this, I will make a PR fixing it.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314198250,314198250,src/net.cpp
NicolasDorier,2019-08-15 07:20:38,"The initial problem I wanted to solve is that, because in 0.19 we remove BLOOM_FILTER by default, I wanted the ability to keep it only for whitelisted peer.  Because this was a simple change, I decided to add it here instead of separate PR.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314198817,314198817,src/net.cpp
NicolasDorier,2019-08-15 07:21:24,Because it is defined in `init.cpp`,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314198985,314198985,src/net_permissions.cpp
NicolasDorier,2019-08-15 07:23:48,"To keep backward compatibility. \n\nBefore, if the peer was whitelisted, it did not matter whether he was also in `whitelistrelay`, this would be still be `true` in all cases.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314199540,314199540,src/net_processing.cpp
NicolasDorier,2019-08-15 07:29:46,"Because we are using `whitebind`. This basically mean: Consider anybody connecting to this port as ""whitelisted"".\n\nBecause node 0 connect to node 1, this is the right port.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314200996,314200996,test/functional/p2p_permissions.py
NicolasDorier,2019-08-15 07:37:56,https://github.com/bitcoin/bitcoin/pull/16618,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314202951,314202951,src/net.cpp
MarcoFalke,2019-08-15 13:55:04,"Thanks, makes sense.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314317824,314317824,test/functional/p2p_permissions.py
MarcoFalke,2019-08-15 13:55:54,"Ah, I figured. Was a bit weird to see this behavior change in a ""refactoring"" commit",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314318229,314318229,src/net.cpp
MarcoFalke,2019-08-15 13:56:30,"But `relay` is also set to true for backward compatibility, no?",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314318524,314318524,src/net_processing.cpp
MarcoFalke,2019-08-15 14:10:26,Fixed in #16620,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314324939,314324939,src/net_permissions.cpp
MarcoFalke,2019-08-15 14:16:23,So is it safe to do that? Under what circumstances would it lead to bugs?,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314327596,314327596,src/net.cpp
NicolasDorier,2019-08-16 04:25:34,"only if the peer is also in `-whitelistrelay` , else it is not.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314579122,314579122,src/net_processing.cpp
MarcoFalke,2019-08-16 13:18:54,"Which is enabled by default for exactly that reason, no?",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314715783,314715783,src/net_processing.cpp
MarcoFalke,2019-08-16 13:42:18,I guess you are fixing it in #16631?,https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314724948,314724948,src/net.cpp
NicolasDorier,2019-08-16 13:44:21,"@MarcoFalke yes, I misunderstood your question. I thought you were asking me to use the `DEFAULT_` const instead of hard coding the value. But you were saying that the `DEFAULT_` is not the same as what I hardcoded.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314725780,314725780,src/net.cpp
NicolasDorier,2019-08-16 14:31:10,"Well, regardless, the old code does not look `-whitelistrelay` is 1 or 0 to determine `fSendTrickle`. \n\nThis would be a breaking change to make it depends on it.\nI am quite neutral to that, I am unsure what `fSendTrickle` is doing, but I think for this PR it should preserve the old behavior.\n\nAnother alternative is to have a specific permission just for that and turn it on if no specific",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r314745834,314745834,src/net_processing.cpp
sdaftuar,2019-10-22 15:20:50,"I just encountered this piece of code and found this to be pretty confusing.  It seems to me that the behavior of relaying transactions immediately without waiting for our poisson timers to fire should be its own ""net permission"", and not piggy-backed onto NOBAN.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r337584665,337584665,src/net_processing.cpp
MarcoFalke,2019-10-22 15:38:52,"According to @NicolasDorier it is needed for backward compatibility. However, it should still be possible to split up into its own permission while retaining backward compatibility.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r337595106,337595106,src/net_processing.cpp
Sjors,2019-10-22 16:17:51,"If we want to spilt this permission, it's best to do that before 0.19 is final.",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r337616697,337616697,src/net_processing.cpp
MarcoFalke,2019-10-22 16:43:39,"Splitting it would be a new feature, so it might be a bit late for 0.19",https://github.com/bitcoin/bitcoin/pull/16248#discussion_r337629606,337629606,src/net_processing.cpp
