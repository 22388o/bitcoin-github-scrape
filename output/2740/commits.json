[
  {
    "sha": "2227389fa8fa1b9ff19234838fc7b641e935125b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjI3Mzg5ZmE4ZmExYjlmZjE5MjM0ODM4ZmM3YjY0MWU5MzUxMjVi",
    "commit": {
      "author": {
        "name": "constantined",
        "email": "nobody@constantined.com",
        "date": "2013-07-23T01:48:14Z"
      },
      "committer": {
        "name": "constantined",
        "email": "nobody@constantined.com",
        "date": "2013-07-23T01:48:14Z"
      },
      "message": "JSON Spirit updated to v4.06",
      "tree": {
        "sha": "8c8459f756467a2310ea0f386c22c059d3831b75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c8459f756467a2310ea0f386c22c059d3831b75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2227389fa8fa1b9ff19234838fc7b641e935125b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2227389fa8fa1b9ff19234838fc7b641e935125b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2227389fa8fa1b9ff19234838fc7b641e935125b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2227389fa8fa1b9ff19234838fc7b641e935125b/comments",
    "author": {
      "login": "constantined",
      "id": 1137500,
      "node_id": "MDQ6VXNlcjExMzc1MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1137500?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/constantined",
      "html_url": "https://github.com/constantined",
      "followers_url": "https://api.github.com/users/constantined/followers",
      "following_url": "https://api.github.com/users/constantined/following{/other_user}",
      "gists_url": "https://api.github.com/users/constantined/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/constantined/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/constantined/subscriptions",
      "organizations_url": "https://api.github.com/users/constantined/orgs",
      "repos_url": "https://api.github.com/users/constantined/repos",
      "events_url": "https://api.github.com/users/constantined/events{/privacy}",
      "received_events_url": "https://api.github.com/users/constantined/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "constantined",
      "id": 1137500,
      "node_id": "MDQ6VXNlcjExMzc1MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1137500?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/constantined",
      "html_url": "https://github.com/constantined",
      "followers_url": "https://api.github.com/users/constantined/followers",
      "following_url": "https://api.github.com/users/constantined/following{/other_user}",
      "gists_url": "https://api.github.com/users/constantined/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/constantined/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/constantined/subscriptions",
      "organizations_url": "https://api.github.com/users/constantined/orgs",
      "repos_url": "https://api.github.com/users/constantined/repos",
      "events_url": "https://api.github.com/users/constantined/events{/privacy}",
      "received_events_url": "https://api.github.com/users/constantined/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c83d4d2170bf00863bd5c21c6eaea91b00390e72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c83d4d2170bf00863bd5c21c6eaea91b00390e72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c83d4d2170bf00863bd5c21c6eaea91b00390e72"
      }
    ],
    "stats": {
      "total": 1063,
      "additions": 681,
      "deletions": 382
    },
    "files": [
      {
        "sha": "c3c99982ba283c016e237a03f77f302e36f7bdd1",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -30,6 +30,8 @@ using namespace boost;\n using namespace boost::asio;\n using namespace json_spirit;\n \n+static const char* Value_type_name[]={\"obj\", \"array\", \"str\", \"bool\", \"int\", \"real\", \"null\"};\n+\n static std::string strRPCUserColonPass;\n \n // These are created by StartRPCThreads, destroyed in StopRPCThreads"
      },
      {
        "sha": "6ed66a2e69072a473aab50a9e98db505bf0a18df",
        "filename": "src/json/LICENSE.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/LICENSE.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/LICENSE.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/LICENSE.txt?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,6 +1,6 @@\n The MIT License\n \n-Copyright (c) 2007 - 2009 John W. Wilkinson\n+Copyright (c) 2007 - 2010 John W. Wilkinson\n \n Permission is hereby granted, free of charge, to any person\n obtaining a copy of this software and associated documentation"
      },
      {
        "sha": "ef442e9fd5ed13ee027ac762993f6c1f9172b9ee",
        "filename": "src/json/json_spirit.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,10 +1,10 @@\n #ifndef JSON_SPIRIT\n #define JSON_SPIRIT\n \n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n \n #if defined(_MSC_VER) && (_MSC_VER >= 1020)\n # pragma once"
      },
      {
        "sha": "e2b59b47aec002740c1720a0e037af44e1214a3f",
        "filename": "src/json/json_spirit_error_position.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_error_position.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_error_position.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_error_position.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,10 +1,10 @@\n #ifndef JSON_SPIRIT_ERROR_POSITION\n #define JSON_SPIRIT_ERROR_POSITION\n \n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n \n #if defined(_MSC_VER) && (_MSC_VER >= 1020)\n # pragma once\n@@ -48,7 +48,7 @@ namespace json_spirit\n         return ( reason_ == lhs.reason_ ) &&\n                ( line_   == lhs.line_ ) &&\n                ( column_ == lhs.column_ ); \n-}\n+    }\n }\n \n #endif"
      },
      {
        "sha": "7dea0747362a9dbfdae8dfd1355e2342a24cd459",
        "filename": "src/json/json_spirit_reader.cpp",
        "status": "modified",
        "additions": 124,
        "deletions": 124,
        "changes": 248,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_reader.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_reader.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_reader.cpp?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,137 +1,137 @@\n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n \n #include \"json_spirit_reader.h\"\n #include \"json_spirit_reader_template.h\"\n \n using namespace json_spirit;\n \n-bool json_spirit::read( const std::string& s, Value& value )\n-{\n-    return read_string( s, value );\n-}\n-\n-void json_spirit::read_or_throw( const std::string& s, Value& value )\n-{\n-    read_string_or_throw( s, value );\n-}\n-\n-bool json_spirit::read( std::istream& is, Value& value )\n-{\n-    return read_stream( is, value );\n-}\n-\n-void json_spirit::read_or_throw( std::istream& is, Value& value )\n-{\n-    read_stream_or_throw( is, value );\n-}\n-\n-bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )\n-{\n-    return read_range( begin, end, value );\n-}\n-\n-void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )\n-{\n-    begin = read_range_or_throw( begin, end, value );\n-}\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-bool json_spirit::read( const std::wstring& s, wValue& value )\n-{\n-    return read_string( s, value );\n-}\n-\n-void json_spirit::read_or_throw( const std::wstring& s, wValue& value )\n-{\n-    read_string_or_throw( s, value );\n-}\n-\n-bool json_spirit::read( std::wistream& is, wValue& value )\n-{\n-    return read_stream( is, value );\n-}\n-\n-void json_spirit::read_or_throw( std::wistream& is, wValue& value )\n-{\n-    read_stream_or_throw( is, value );\n-}\n-\n-bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )\n-{\n-    return read_range( begin, end, value );\n-}\n-\n-void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )\n-{\n-    begin = read_range_or_throw( begin, end, value );\n-}\n+#ifdef JSON_SPIRIT_VALUE_ENABLED\n+    bool json_spirit::read( const std::string& s, Value& value )\n+    {\n+        return read_string( s, value );\n+    }\n+    \n+    void json_spirit::read_or_throw( const std::string& s, Value& value )\n+    {\n+        read_string_or_throw( s, value );\n+    }\n+\n+    bool json_spirit::read( std::istream& is, Value& value )\n+    {\n+        return read_stream( is, value );\n+    }\n+\n+    void json_spirit::read_or_throw( std::istream& is, Value& value )\n+    {\n+        read_stream_or_throw( is, value );\n+    }\n+\n+    bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )\n+    {\n+        return read_range( begin, end, value );\n+    }\n+\n+    void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )\n+    {\n+        begin = read_range_or_throw( begin, end, value );\n+    }\n+#endif\n \n+#if defined( JSON_SPIRIT_WVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n+    bool json_spirit::read( const std::wstring& s, wValue& value )\n+    {\n+        return read_string( s, value );\n+    }\n+\n+    void json_spirit::read_or_throw( const std::wstring& s, wValue& value )\n+    {\n+        read_string_or_throw( s, value );\n+    }\n+\n+    bool json_spirit::read( std::wistream& is, wValue& value )\n+    {\n+        return read_stream( is, value );\n+    }\n+\n+    void json_spirit::read_or_throw( std::wistream& is, wValue& value )\n+    {\n+        read_stream_or_throw( is, value );\n+    }\n+\n+    bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )\n+    {\n+        return read_range( begin, end, value );\n+    }\n+\n+    void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )\n+    {\n+        begin = read_range_or_throw( begin, end, value );\n+    }\n #endif\n \n-bool json_spirit::read( const std::string& s, mValue& value )\n-{\n-    return read_string( s, value );\n-}\n-\n-void json_spirit::read_or_throw( const std::string& s, mValue& value )\n-{\n-    read_string_or_throw( s, value );\n-}\n-\n-bool json_spirit::read( std::istream& is, mValue& value )\n-{\n-    return read_stream( is, value );\n-}\n-\n-void json_spirit::read_or_throw( std::istream& is, mValue& value )\n-{\n-    read_stream_or_throw( is, value );\n-}\n-\n-bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )\n-{\n-    return read_range( begin, end, value );\n-}\n-\n-void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )\n-{\n-    begin = read_range_or_throw( begin, end, value );\n-}\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-bool json_spirit::read( const std::wstring& s, wmValue& value )\n-{\n-    return read_string( s, value );\n-}\n-\n-void json_spirit::read_or_throw( const std::wstring& s, wmValue& value )\n-{\n-    read_string_or_throw( s, value );\n-}\n-\n-bool json_spirit::read( std::wistream& is, wmValue& value )\n-{\n-    return read_stream( is, value );\n-}\n-\n-void json_spirit::read_or_throw( std::wistream& is, wmValue& value )\n-{\n-    read_stream_or_throw( is, value );\n-}\n-\n-bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )\n-{\n-    return read_range( begin, end, value );\n-}\n-\n-void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )\n-{\n-    begin = read_range_or_throw( begin, end, value );\n-}\n+#ifdef JSON_SPIRIT_MVALUE_ENABLED\n+    bool json_spirit::read( const std::string& s, mValue& value )\n+    {\n+        return read_string( s, value );\n+    }\n+\n+    void json_spirit::read_or_throw( const std::string& s, mValue& value )\n+    {\n+        read_string_or_throw( s, value );\n+    }\n+    \n+    bool json_spirit::read( std::istream& is, mValue& value )\n+    {\n+        return read_stream( is, value );\n+    }\n+\n+    void json_spirit::read_or_throw( std::istream& is, mValue& value )\n+    {\n+        read_stream_or_throw( is, value );\n+    }\n+\n+    bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )\n+    {\n+        return read_range( begin, end, value );\n+    }\n+\n+    void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )\n+    {\n+        begin = read_range_or_throw( begin, end, value );\n+    }\n+#endif\n \n+#if defined( JSON_SPIRIT_WMVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n+    bool json_spirit::read( const std::wstring& s, wmValue& value )\n+    {\n+        return read_string( s, value );\n+    }\n+\n+    void json_spirit::read_or_throw( const std::wstring& s, wmValue& value )\n+    {\n+        read_string_or_throw( s, value );\n+    }\n+\n+    bool json_spirit::read( std::wistream& is, wmValue& value )\n+    {\n+        return read_stream( is, value );\n+    }\n+\n+    void json_spirit::read_or_throw( std::wistream& is, wmValue& value )\n+    {\n+        read_stream_or_throw( is, value );\n+    }\n+\n+    bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )\n+    {\n+        return read_range( begin, end, value );\n+    }\n+\n+    void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )\n+    {\n+        begin = read_range_or_throw( begin, end, value );\n+    }\n #endif"
      },
      {
        "sha": "f0dc5330f21552357c043e53ba7e4a4820c4b044",
        "filename": "src/json/json_spirit_reader.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_reader.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_reader.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_reader.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,10 +1,10 @@\n #ifndef JSON_SPIRIT_READER\n #define JSON_SPIRIT_READER\n \n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n \n #if defined(_MSC_VER) && (_MSC_VER >= 1020)\n # pragma once\n@@ -18,44 +18,44 @@ namespace json_spirit\n {\n     // functions to reads a JSON values\n \n+#ifdef JSON_SPIRIT_VALUE_ENABLED\n     bool read( const std::string& s, Value& value );\n     bool read( std::istream& is,     Value& value );\n     bool read( std::string::const_iterator& begin, std::string::const_iterator end, Value& value );\n \n     void read_or_throw( const std::string& s, Value& value );  \n     void read_or_throw( std::istream& is,     Value& value );\n     void read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, Value& value );\n+#endif\n \n-#ifndef BOOST_NO_STD_WSTRING\n-\n+#if defined( JSON_SPIRIT_WVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n     bool read( const std::wstring& s, wValue& value );\n     bool read( std::wistream&  is,    wValue& value );\n     bool read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value );    \n \n     void read_or_throw( const std::wstring& s, wValue& value );\n     void read_or_throw( std::wistream& is,     wValue& value );\n     void read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value );\n-\n #endif\n \n+#ifdef JSON_SPIRIT_MVALUE_ENABLED\n     bool read( const std::string& s, mValue& value );\n     bool read( std::istream& is,     mValue& value );\n     bool read( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value );\n \n     void read_or_throw( const std::string& s, mValue& value );  \n     void read_or_throw( std::istream& is,     mValue& value );\n     void read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value );\n+#endif\n \n-#ifndef BOOST_NO_STD_WSTRING\n-\n+#if defined( JSON_SPIRIT_WMVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n     bool read( const std::wstring& s, wmValue& value );\n     bool read( std::wistream& is,     wmValue& value );\n     bool read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value );    \n \n     void read_or_throw( const std::wstring& s, wmValue& value );\n     void read_or_throw( std::wistream& is,     wmValue& value );\n     void read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value );\n-\n #endif\n }\n "
      },
      {
        "sha": "d3d0cecaa5e70aab3f5a9605d05baf5a57082fe8",
        "filename": "src/json/json_spirit_reader_template.h",
        "status": "modified",
        "additions": 76,
        "deletions": 38,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_reader_template.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_reader_template.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_reader_template.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,10 +1,14 @@\n #ifndef JSON_SPIRIT_READER_TEMPLATE\n #define JSON_SPIRIT_READER_TEMPLATE\n \n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n+\n+#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n+# pragma once\n+#endif\n \n #include \"json_spirit_value.h\"\n #include \"json_spirit_error_position.h\"\n@@ -484,7 +488,7 @@ namespace json_spirit\n                     ;\n \n                 string_ \n-                    = lexeme_d // this causes white space inside a string to be retained\n+                    = lexeme_d // this causes white space and what would appear to be comments inside a string to be retained\n                       [\n                           confix_p\n                           ( \n@@ -514,6 +518,44 @@ namespace json_spirit\n         Semantic_actions_t& actions_;\n     };\n \n+    template< class Iter_type, class Value_type >\n+    void add_posn_iter_and_read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )\n+    {\n+        typedef spirit_namespace::position_iterator< Iter_type > Posn_iter_t;\n+\n+        const Posn_iter_t posn_begin( begin, end );\n+        const Posn_iter_t posn_end( end, end );\n+     \n+        read_range_or_throw( posn_begin, posn_end, value );\n+    }\n+\n+    template< class Istream_type >\n+    struct Multi_pass_iters\n+    {\n+        typedef typename Istream_type::char_type Char_type;\n+        typedef std::istream_iterator< Char_type, Char_type > istream_iter;\n+        typedef spirit_namespace::multi_pass< istream_iter > Mp_iter;\n+\n+        Multi_pass_iters( Istream_type& is )\n+        {\n+            is.unsetf( std::ios::skipws );\n+\n+            begin_ = spirit_namespace::make_multi_pass( istream_iter( is ) );\n+            end_   = spirit_namespace::make_multi_pass( istream_iter() );\n+        }\n+\n+        Mp_iter begin_;\n+        Mp_iter end_;\n+    };\n+\n+    // reads a JSON Value from a pair of input iterators throwing an exception on invalid input, e.g.\n+    //\n+    // string::const_iterator start = str.begin();\n+    // const string::const_iterator next = read_range_or_throw( str.begin(), str.end(), value );\n+    //\n+    // The iterator 'next' will point to the character past the \n+    // last one read.\n+    //\n     template< class Iter_type, class Value_type >\n     Iter_type read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )\n     {\n@@ -522,7 +564,9 @@ namespace json_spirit\n         const spirit_namespace::parse_info< Iter_type > info = \n                             spirit_namespace::parse( begin, end, \n                                                     Json_grammer< Value_type, Iter_type >( semantic_actions ), \n-                                                    spirit_namespace::space_p );\n+                                                    spirit_namespace::space_p | \n+                                                    spirit_namespace::comment_p(\"//\") | \n+                                                    spirit_namespace::comment_p(\"/*\", \"*/\") );\n \n         if( !info.hit )\n         {\n@@ -533,17 +577,14 @@ namespace json_spirit\n         return info.stop;\n     }\n \n-    template< class Iter_type, class Value_type >\n-    void add_posn_iter_and_read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )\n-    {\n-        typedef spirit_namespace::position_iterator< Iter_type > Posn_iter_t;\n-\n-        const Posn_iter_t posn_begin( begin, end );\n-        const Posn_iter_t posn_end( end, end );\n-     \n-        read_range_or_throw( posn_begin, posn_end, value );\n-    }\n-\n+    // reads a JSON Value from a pair of input iterators, e.g.\n+    //\n+    // string::const_iterator start = str.begin();\n+    // const bool success = read_string( start, str.end(), value );\n+    //\n+    // The iterator 'start' will point to the character past the \n+    // last one read.\n+    //\n     template< class Iter_type, class Value_type >\n     bool read_range( Iter_type& begin, Iter_type end, Value_type& value )\n     {\n@@ -559,12 +600,10 @@ namespace json_spirit\n         }\n     }\n \n-    template< class String_type, class Value_type >\n-    void read_string_or_throw( const String_type& s, Value_type& value )\n-    {\n-        add_posn_iter_and_read_range_or_throw( s.begin(), s.end(), value );\n-    }\n-\n+    // reads a JSON Value from a string, e.g.\n+    //\n+    // const bool success = read_string( str, value );\n+    //\n     template< class String_type, class Value_type >\n     bool read_string( const String_type& s, Value_type& value )\n     {\n@@ -573,25 +612,20 @@ namespace json_spirit\n         return read_range( begin, s.end(), value );\n     }\n \n-    template< class Istream_type >\n-    struct Multi_pass_iters\n+    // reads a JSON Value from a string throwing an exception on invalid input, e.g.\n+    //\n+    // read_string_or_throw( is, value );\n+    //\n+    template< class String_type, class Value_type >\n+    void read_string_or_throw( const String_type& s, Value_type& value )\n     {\n-        typedef typename Istream_type::char_type Char_type;\n-        typedef std::istream_iterator< Char_type, Char_type > istream_iter;\n-        typedef spirit_namespace::multi_pass< istream_iter > Mp_iter;\n-\n-        Multi_pass_iters( Istream_type& is )\n-        {\n-            is.unsetf( std::ios::skipws );\n-\n-            begin_ = spirit_namespace::make_multi_pass( istream_iter( is ) );\n-            end_   = spirit_namespace::make_multi_pass( istream_iter() );\n-        }\n-\n-        Mp_iter begin_;\n-        Mp_iter end_;\n-    };\n+        add_posn_iter_and_read_range_or_throw( s.begin(), s.end(), value );\n+    }\n \n+    // reads a JSON Value from a stream, e.g.\n+    //\n+    // const bool success = read_stream( is, value );\n+    //\n     template< class Istream_type, class Value_type >\n     bool read_stream( Istream_type& is, Value_type& value )\n     {\n@@ -600,6 +634,10 @@ namespace json_spirit\n         return read_range( mp_iters.begin_, mp_iters.end_, value );\n     }\n \n+    // reads a JSON Value from a stream throwing an exception on invalid input, e.g.\n+    //\n+    // read_stream_or_throw( is, value );\n+    //\n     template< class Istream_type, class Value_type >\n     void read_stream_or_throw( Istream_type& is, Value_type& value )\n     {"
      },
      {
        "sha": "8bbdbc05431ddaabf3ef56d3e8163e6e711a4708",
        "filename": "src/json/json_spirit_stream_reader.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_stream_reader.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_stream_reader.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_stream_reader.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,10 +1,10 @@\n #ifndef JSON_SPIRIT_READ_STREAM\n #define JSON_SPIRIT_READ_STREAM\n \n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n \n #if defined(_MSC_VER) && (_MSC_VER >= 1020)\n # pragma once"
      },
      {
        "sha": "a174ac3a98d959cad8574efc2beb2b1366985410",
        "filename": "src/json/json_spirit_utils.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_utils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_utils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_utils.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,10 +1,10 @@\n #ifndef JSON_SPIRIT_UTILS\n #define JSON_SPIRIT_UTILS\n \n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n \n #if defined(_MSC_VER) && (_MSC_VER >= 1020)\n # pragma once\n@@ -37,9 +37,11 @@ namespace json_spirit\n         }\n     }\n \n+#ifdef JSON_SPIRIT_VALUE_ENABLED\n     typedef std::map< std::string, Value > Mapped_obj;\n+#endif\n \n-#ifndef BOOST_NO_STD_WSTRING\n+#if defined( JSON_SPIRIT_WVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n     typedef std::map< std::wstring, wValue > wMapped_obj;\n #endif\n "
      },
      {
        "sha": "a5020405d46809e04872d95475398e4cf145574e",
        "filename": "src/json/json_spirit_value.h",
        "status": "modified",
        "additions": 137,
        "deletions": 66,
        "changes": 203,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_value.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_value.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_value.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,10 +1,10 @@\n #ifndef JSON_SPIRIT_VALUE\n #define JSON_SPIRIT_VALUE\n \n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n \n #if defined(_MSC_VER) && (_MSC_VER >= 1020)\n # pragma once\n@@ -21,11 +21,20 @@\n #include <boost/shared_ptr.hpp> \n #include <boost/variant.hpp> \n \n+// comment out the value types you don't need to reduce build times and intermediate file sizes\n+#define JSON_SPIRIT_VALUE_ENABLED\n+#define JSON_SPIRIT_WVALUE_ENABLED\n+#define JSON_SPIRIT_MVALUE_ENABLED\n+#define JSON_SPIRIT_WMVALUE_ENABLED\n+\n namespace json_spirit\n {\n     enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };\n-    static const char* Value_type_name[]={\"obj\", \"array\", \"str\", \"bool\", \"int\", \"real\", \"null\"};\n \n+    static std::string value_type_to_string( Value_type vtype );\n+\n+    struct Null{};\n+    \n     template< class Config >    // Config determines whether the value uses std::string or std::wstring and\n                                 // whether JSON Objects are represented as vectors or maps\n     class Value_impl\n@@ -49,6 +58,12 @@ namespace json_spirit\n         Value_impl( boost::uint64_t    value );\n         Value_impl( double             value );\n \n+        template< class Iter >\n+        Value_impl( Iter first, Iter last );    // constructor from containers, e.g. std::vector or std::list\n+\n+        template< BOOST_VARIANT_ENUM_PARAMS( typename T ) >\n+        Value_impl( const boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >& variant ); // constructor for compatible variant types\n+\n         Value_impl( const Value_impl& other );\n \n         bool operator==( const Value_impl& lhs ) const;\n@@ -81,13 +96,32 @@ namespace json_spirit\n \n         void check_type( const Value_type vtype ) const;\n \n-        typedef boost::variant< String_type, \n-                                boost::recursive_wrapper< Object >, boost::recursive_wrapper< Array >, \n-                                bool, boost::int64_t, double > Variant;\n+        typedef boost::variant< boost::recursive_wrapper< Object >, boost::recursive_wrapper< Array >, \n+                                String_type, bool, boost::int64_t, double, Null, boost::uint64_t > Variant;\n \n-        Value_type type_;\n         Variant v_;\n-        bool is_uint64_;\n+\n+        class Variant_converter_visitor : public boost::static_visitor< Variant > \n+        {\n+        public:\n+         \n+              template< typename T, typename A, template< typename, typename > class Cont >\n+              Variant operator()( const Cont< T, A >& cont ) const \n+              {\n+                  return Array( cont.begin(), cont.end() );\n+              }\n+             \n+              Variant operator()( int i ) const \n+              {\n+                  return static_cast< boost::int64_t >( i );\n+              }\n+           \n+              template<class T>\n+              Variant operator()( const T& t ) const \n+              {\n+                  return t;\n+              }\n+        };\n     };\n \n     // vector objects\n@@ -98,6 +132,10 @@ namespace json_spirit\n         typedef typename Config::String_type String_type;\n         typedef typename Config::Value_type Value_type;\n \n+        Pair_impl()\n+        {\n+        }\n+\n         Pair_impl( const String_type& name, const Value_type& value );\n \n         bool operator==( const Pair_impl& lhs ) const;\n@@ -106,6 +144,7 @@ namespace json_spirit\n         Value_type value_;\n     };\n \n+#if defined( JSON_SPIRIT_VALUE_ENABLED ) || defined( JSON_SPIRIT_WVALUE_ENABLED )\n     template< class String >\n     struct Config_vector\n     {\n@@ -122,30 +161,32 @@ namespace json_spirit\n             return obj.back().value_;\n         }\n                 \n-        static String_type get_name( const Pair_type& pair )\n+        static const String_type& get_name( const Pair_type& pair )\n         {\n             return pair.name_;\n         }\n                 \n-        static Value_type get_value( const Pair_type& pair )\n+        static const Value_type& get_value( const Pair_type& pair )\n         {\n             return pair.value_;\n         }\n     };\n+#endif\n \n     // typedefs for ASCII\n \n+#ifdef JSON_SPIRIT_VALUE_ENABLED\n     typedef Config_vector< std::string > Config;\n \n     typedef Config::Value_type  Value;\n     typedef Config::Pair_type   Pair;\n     typedef Config::Object_type Object;\n     typedef Config::Array_type  Array;\n+#endif\n \n     // typedefs for Unicode\n \n-#ifndef BOOST_NO_STD_WSTRING\n-\n+#if defined( JSON_SPIRIT_WVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n     typedef Config_vector< std::wstring > wConfig;\n \n     typedef wConfig::Value_type  wValue;\n@@ -156,142 +197,142 @@ namespace json_spirit\n \n     // map objects\n \n+#if defined( JSON_SPIRIT_MVALUE_ENABLED ) || defined( JSON_SPIRIT_WMVALUE_ENABLED )\n     template< class String >\n     struct Config_map\n     {\n         typedef String String_type;\n         typedef Value_impl< Config_map > Value_type;\n         typedef std::vector< Value_type > Array_type;\n         typedef std::map< String_type, Value_type > Object_type;\n-        typedef typename Object_type::value_type Pair_type;\n+        typedef std::pair< const String_type, Value_type > Pair_type;\n \n         static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )\n         {\n             return obj[ name ] = value;\n         }\n                 \n-        static String_type get_name( const Pair_type& pair )\n+        static const String_type& get_name( const Pair_type& pair )\n         {\n             return pair.first;\n         }\n                 \n-        static Value_type get_value( const Pair_type& pair )\n+        static const Value_type& get_value( const Pair_type& pair )\n         {\n             return pair.second;\n         }\n     };\n+#endif\n \n     // typedefs for ASCII\n \n+#ifdef JSON_SPIRIT_MVALUE_ENABLED\n     typedef Config_map< std::string > mConfig;\n \n     typedef mConfig::Value_type  mValue;\n     typedef mConfig::Object_type mObject;\n     typedef mConfig::Array_type  mArray;\n+#endif\n \n     // typedefs for Unicode\n \n-#ifndef BOOST_NO_STD_WSTRING\n-\n+#if defined( JSON_SPIRIT_WMVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n     typedef Config_map< std::wstring > wmConfig;\n \n     typedef wmConfig::Value_type  wmValue;\n     typedef wmConfig::Object_type wmObject;\n     typedef wmConfig::Array_type  wmArray;\n-\n #endif\n \n     ///////////////////////////////////////////////////////////////////////////////////////////////\n     //\n     // implementation\n \n+    inline bool operator==( const Null&, const Null& )\n+    {\n+        return true;\n+    }\n+\n     template< class Config >\n     const Value_impl< Config > Value_impl< Config >::null;\n \n     template< class Config >\n     Value_impl< Config >::Value_impl()\n-    :   type_( null_type )\n-    ,   is_uint64_( false )\n+    :   v_( Null() )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( const Const_str_ptr value )\n-    :   type_( str_type )\n-    ,   v_( String_type( value ) )\n-    ,   is_uint64_( false )\n+    :  v_( String_type( value ) )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( const String_type& value )\n-    :   type_( str_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n+    :   v_( value )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( const Object& value )\n-    :   type_( obj_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n+    :   v_( value )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( const Array& value )\n-    :   type_( array_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n+    :   v_( value )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( bool value )\n-    :   type_( bool_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n+    :   v_( value )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( int value )\n-    :   type_( int_type )\n-    ,   v_( static_cast< boost::int64_t >( value ) )\n-    ,   is_uint64_( false )\n+    :   v_( static_cast< boost::int64_t >( value ) )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( boost::int64_t value )\n-    :   type_( int_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n+    :   v_( value )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( boost::uint64_t value )\n-    :   type_( int_type )\n-    ,   v_( static_cast< boost::int64_t >( value ) )\n-    ,   is_uint64_( true )\n+    :   v_( value )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( double value )\n-    :   type_( real_type )\n-    ,   v_( value )\n-    ,   is_uint64_( false )\n+    :   v_( value )\n     {\n     }\n \n     template< class Config >\n     Value_impl< Config >::Value_impl( const Value_impl< Config >& other )\n-    :   type_( other.type() )\n-    ,   v_( other.v_ )\n-    ,   is_uint64_( other.is_uint64_ )\n+    :   v_( other.v_ )\n+    {\n+    }\n+\n+    template< class Config >\n+    template< class Iter >\n+    Value_impl< Config >::Value_impl( Iter first, Iter last )\n+    :   v_( Array( first, last ) )\n+    {\n+    }\n+\n+    template< class Config >\n+    template< BOOST_VARIANT_ENUM_PARAMS( typename T ) >\n+    Value_impl< Config >::Value_impl( const boost::variant< BOOST_VARIANT_ENUM_PARAMS(T) >& variant )\n+    :   v_( boost::apply_visitor( Variant_converter_visitor(), variant) )\n     {\n     }\n \n@@ -300,9 +341,7 @@ namespace json_spirit\n     {\n         Value_impl tmp( lhs );\n \n-        std::swap( type_, tmp.type_ );\n         std::swap( v_, tmp.v_ );\n-        std::swap( is_uint64_, tmp.is_uint64_ );\n \n         return *this;\n     }\n@@ -320,13 +359,18 @@ namespace json_spirit\n     template< class Config >\n     Value_type Value_impl< Config >::type() const\n     {\n-        return type_;\n+        if( is_uint64() )\n+        {\n+            return int_type;\n+        }\n+\n+        return static_cast< Value_type >( v_.which() );\n     }\n \n     template< class Config >\n     bool Value_impl< Config >::is_uint64() const\n     {\n-        return is_uint64_;\n+        return v_.which() == null_type + 1;\n     }\n \n     template< class Config >\n@@ -342,8 +386,7 @@ namespace json_spirit\n         {\n             std::ostringstream os;\n \n-            ///// Bitcoin: Tell the types by name instead of by number\n-            os << \"value is type \" << Value_type_name[type()] << \", expected \" << Value_type_name[vtype];\n+            os << \"get_value< \" << value_type_to_string( vtype ) << \" > called on \" << value_type_to_string( type() ) << \" Value\";\n \n             throw std::runtime_error( os.str() );\n         }\n@@ -352,7 +395,7 @@ namespace json_spirit\n     template< class Config >\n     const typename Config::String_type& Value_impl< Config >::get_str() const\n     {\n-        check_type(  str_type );\n+        check_type( str_type );\n \n         return *boost::get< String_type >( &v_ );\n     }\n@@ -368,41 +411,51 @@ namespace json_spirit\n     template< class Config >\n     const typename Value_impl< Config >::Array& Value_impl< Config >::get_array() const\n     {\n-        check_type(  array_type );\n+        check_type( array_type );\n \n         return *boost::get< Array >( &v_ );\n     }\n      \n     template< class Config >\n     bool Value_impl< Config >::get_bool() const\n     {\n-        check_type(  bool_type );\n+        check_type( bool_type );\n \n         return boost::get< bool >( v_ );\n     }\n      \n     template< class Config >\n     int Value_impl< Config >::get_int() const\n     {\n-        check_type(  int_type );\n+        check_type( int_type );\n \n         return static_cast< int >( get_int64() );\n     }\n     \n     template< class Config >\n     boost::int64_t Value_impl< Config >::get_int64() const\n     {\n-        check_type(  int_type );\n+        check_type( int_type );\n+\n+        if( is_uint64() )\n+        {\n+            return static_cast< boost::int64_t >( get_uint64() );\n+        }\n \n         return boost::get< boost::int64_t >( v_ );\n     }\n     \n     template< class Config >\n     boost::uint64_t Value_impl< Config >::get_uint64() const\n     {\n-        check_type(  int_type );\n+        check_type( int_type );\n \n-        return static_cast< boost::uint64_t >( get_int64() );\n+        if( !is_uint64() )\n+        {\n+            return static_cast< boost::uint64_t >( get_int64() );\n+        }\n+\n+        return boost::get< boost::uint64_t >( v_ );\n     }\n \n     template< class Config >\n@@ -414,23 +467,23 @@ namespace json_spirit\n                                : static_cast< double >( get_int64() );\n         }\n \n-        check_type(  real_type );\n+        check_type( real_type );\n \n         return boost::get< double >( v_ );\n     }\n \n     template< class Config >\n     typename Value_impl< Config >::Object& Value_impl< Config >::get_obj()\n     {\n-        check_type(  obj_type );\n+        check_type( obj_type );\n \n         return *boost::get< Object >( &v_ );\n     }\n \n     template< class Config >\n     typename Value_impl< Config >::Array& Value_impl< Config >::get_array()\n     {\n-        check_type(  array_type );\n+        check_type( array_type );\n \n         return *boost::get< Array >( &v_ );\n     }\n@@ -529,6 +582,24 @@ namespace json_spirit\n     {\n         return internal_::get_value( *this, internal_::Type_to_type< T >() );\n     }\n+\n+    static std::string value_type_to_string( const Value_type vtype )\n+    {\n+        switch( vtype )\n+        {\n+            case obj_type: return \"Object\";\n+            case array_type: return \"Array\";\n+            case str_type: return \"string\";\n+            case bool_type: return \"boolean\";\n+            case int_type: return \"integer\";\n+            case real_type: return \"real\";\n+            case null_type: return \"null\";\n+        }\n+\n+        assert( false );\n+\n+        return \"unknown type\";\n+    }\n }\n \n #endif"
      },
      {
        "sha": "06d3f21d91fd837de211c17c5d534ff6f6d908e4",
        "filename": "src/json/json_spirit_writer.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 84,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_writer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_writer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_writer.cpp?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,95 +1,96 @@\n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n \n #include \"json_spirit_writer.h\"\n #include \"json_spirit_writer_template.h\"\n \n-void json_spirit::write( const Value& value, std::ostream& os )\n-{\n-    write_stream( value, os, false );\n-}\n-\n-void json_spirit::write_formatted( const Value& value, std::ostream& os )\n-{\n-    write_stream( value, os, true );\n-}\n-\n-std::string json_spirit::write( const Value& value )\n-{\n-    return write_string( value, false );\n-}\n-\n-std::string json_spirit::write_formatted( const Value& value )\n-{\n-    return write_string( value, true );\n-}\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-void json_spirit::write( const wValue& value, std::wostream& os )\n-{\n-    write_stream( value, os, false );\n-}\n-\n-void json_spirit::write_formatted( const wValue& value, std::wostream& os )\n-{\n-    write_stream( value, os, true );\n-}\n-\n-std::wstring json_spirit::write( const wValue&  value )\n-{\n-    return write_string( value, false );\n-}\n-\n-std::wstring json_spirit::write_formatted( const wValue&  value )\n-{\n-    return write_string( value, true );\n-}\n-\n+using namespace json_spirit;\n+\n+#ifdef JSON_SPIRIT_VALUE_ENABLED\n+    void json_spirit::write( const Value& value, std::ostream& os, unsigned int options )\n+    {\n+        write_stream( value, os, options );\n+    }\n+    std::string json_spirit::write( const Value& value, unsigned int options )\n+    {\n+        return write_string( value, options );\n+    }\n+\n+    void json_spirit::write_formatted( const Value& value, std::ostream& os )\n+    {\n+        write_stream( value, os, pretty_print );\n+    }\n+\n+    std::string json_spirit::write_formatted( const Value& value )\n+    {\n+        return write_string( value, pretty_print );\n+    }\n #endif\n \n-void json_spirit::write( const mValue& value, std::ostream& os )\n-{\n-    write_stream( value, os, false );\n-}\n-\n-void json_spirit::write_formatted( const mValue& value, std::ostream& os )\n-{\n-    write_stream( value, os, true );\n-}\n-\n-std::string json_spirit::write( const mValue& value )\n-{\n-    return write_string( value, false );\n-}\n-\n-std::string json_spirit::write_formatted( const mValue& value )\n-{\n-    return write_string( value, true );\n-}\n-\n-#ifndef BOOST_NO_STD_WSTRING\n-\n-void json_spirit::write( const wmValue& value, std::wostream& os )\n-{\n-    write_stream( value, os, false );\n-}\n-\n-void json_spirit::write_formatted( const wmValue& value, std::wostream& os )\n-{\n-    write_stream( value, os, true );\n-}\n-\n-std::wstring json_spirit::write( const wmValue&  value )\n-{\n-    return write_string( value, false );\n-}\n+#ifdef JSON_SPIRIT_MVALUE_ENABLED\n+    void json_spirit::write( const mValue& value, std::ostream& os, unsigned int options )\n+    {\n+        write_stream( value, os, options );\n+    }\n+\n+    std::string json_spirit::write( const mValue& value, unsigned int options )\n+    {\n+        return write_string( value, options );\n+    }\n+\n+    void json_spirit::write_formatted( const mValue& value, std::ostream& os )\n+    {\n+        write_stream( value, os, pretty_print );\n+    }\n+\n+    std::string json_spirit::write_formatted( const mValue& value )\n+    {\n+        return write_string( value, pretty_print );\n+    }\n+#endif\n \n-std::wstring json_spirit::write_formatted( const wmValue&  value )\n-{\n-    return write_string( value, true );\n-}\n+#if defined( JSON_SPIRIT_WVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n+    void json_spirit::write( const wValue& value, std::wostream& os, unsigned int options )\n+    {\n+        write_stream( value, os, options );\n+    }\n+\n+    std::wstring json_spirit::write( const wValue& value, unsigned int options )\n+    {\n+        return write_string( value, options );\n+    }\n+\n+    void json_spirit::write_formatted( const wValue& value, std::wostream& os )\n+    {\n+        write_stream( value, os, pretty_print );\n+    }\n+\n+    std::wstring json_spirit::write_formatted( const wValue& value )\n+    {\n+        return write_string( value, pretty_print );\n+    }\n+#endif\n \n+#if defined( JSON_SPIRIT_WMVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n+    void json_spirit::write_formatted( const wmValue& value, std::wostream& os )\n+    {\n+        write_stream( value, os, pretty_print );\n+    }\n+\n+    std::wstring json_spirit::write_formatted( const wmValue& value )\n+    {\n+        return write_string( value, pretty_print );\n+    }\n+\n+    void json_spirit::write( const wmValue& value, std::wostream& os, unsigned int options )\n+    {\n+        write_stream( value, os, options );\n+    }\n+\n+    std::wstring json_spirit::write( const wmValue& value, unsigned int options )\n+    {\n+        return write_string( value, options );\n+    }\n #endif"
      },
      {
        "sha": "18c2fd4264ba1e6d92e3ac6efc52fd8ce39973d4",
        "filename": "src/json/json_spirit_writer.h",
        "status": "modified",
        "additions": 33,
        "deletions": 20,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_writer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_writer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_writer.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,49 +1,62 @@\n #ifndef JSON_SPIRIT_WRITER\n #define JSON_SPIRIT_WRITER\n \n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n \n #if defined(_MSC_VER) && (_MSC_VER >= 1020)\n # pragma once\n #endif\n \n #include \"json_spirit_value.h\"\n+#include \"json_spirit_writer_options.h\"\n #include <iostream>\n \n namespace json_spirit\n {\n-    // functions to convert JSON Values to text, \n-    // the \"formatted\" versions add whitespace to format the output nicely\n+    // these functions to convert JSON Values to text\n \n-    void         write          ( const Value& value, std::ostream&  os );\n-    void         write_formatted( const Value& value, std::ostream&  os );\n-    std::string  write          ( const Value& value );\n-    std::string  write_formatted( const Value& value );\n+#ifdef JSON_SPIRIT_VALUE_ENABLED\n+    void         write( const Value&  value, std::ostream&  os, unsigned int options = 0 );\n+    std::string  write( const Value&  value, unsigned int options = 0 );\n+#endif\n \n-#ifndef BOOST_NO_STD_WSTRING\n+#ifdef JSON_SPIRIT_MVALUE_ENABLED\n+    void         write( const mValue& value, std::ostream&  os, unsigned int options = 0 );\n+    std::string  write( const mValue& value, unsigned int options = 0 );\n+#endif\n \n-    void         write          ( const wValue& value, std::wostream& os );\n-    void         write_formatted( const wValue& value, std::wostream& os );\n-    std::wstring write          ( const wValue& value );\n-    std::wstring write_formatted( const wValue& value );\n+#if defined( JSON_SPIRIT_WVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n+    void         write( const wValue&  value, std::wostream& os, unsigned int options = 0 );\n+    std::wstring write( const wValue&  value, unsigned int options = 0 );\n+#endif\n \n+#if defined( JSON_SPIRIT_WMVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n+    void         write( const wmValue& value, std::wostream& os, unsigned int options = 0 );\n+    std::wstring write( const wmValue& value, unsigned int options = 0 );\n #endif\n \n-    void         write          ( const mValue& value, std::ostream&  os );\n+    // these \"formatted\" versions of the \"write\" functions are the equivalent of the above functions\n+    // with option \"pretty_print\"\n+    \n+#ifdef JSON_SPIRIT_VALUE_ENABLED\n+    void         write_formatted( const Value& value, std::ostream&  os );\n+    std::string  write_formatted( const Value& value );\n+#endif\n+#ifdef JSON_SPIRIT_MVALUE_ENABLED\n     void         write_formatted( const mValue& value, std::ostream&  os );\n-    std::string  write          ( const mValue& value );\n     std::string  write_formatted( const mValue& value );\n+#endif\n \n-#ifndef BOOST_NO_STD_WSTRING\n-\n-    void         write          ( const wmValue& value, std::wostream& os );\n+#if defined( JSON_SPIRIT_WVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n+    void         write_formatted( const wValue& value, std::wostream& os );\n+    std::wstring write_formatted( const wValue& value );\n+#endif\n+#if defined( JSON_SPIRIT_WMVALUE_ENABLED ) && !defined( BOOST_NO_STD_WSTRING )\n     void         write_formatted( const wmValue& value, std::wostream& os );\n-    std::wstring write          ( const wmValue& value );\n     std::wstring write_formatted( const wmValue& value );\n-\n #endif\n }\n "
      },
      {
        "sha": "ac6c57f33c6f7a464196d33f5f67e4e2d9897482",
        "filename": "src/json/json_spirit_writer_options.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_writer_options.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_writer_options.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_writer_options.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -0,0 +1,33 @@\n+#ifndef JSON_SPIRIT_WRITER_OPTIONS\n+#define JSON_SPIRIT_WRITER_OPTIONS\n+\n+//          Copyright John W. Wilkinson 2007 - 2013\n+// Distributed under the MIT License, see accompanying file LICENSE.txt\n+\n+// json spirit version 4.06\n+\n+#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n+# pragma once\n+#endif\n+\n+namespace json_spirit\n+{\n+    enum Output_options{ pretty_print = 0x01,   // Add whitespace to format the output nicely.\n+\n+                         raw_utf8 = 0x02,       // This prevents non-printable characters from being escapted using \"\\uNNNN\" notation.\n+                                                // Note, this is an extension to the JSON standard. It disables the escaping of\n+                                                // non-printable characters allowing UTF-8 sequences held in 8 bit char strings\n+                                                // to pass through unaltered.\n+\n+                         remove_trailing_zeros = 0x04,\n+                                                // outputs e.g. \"1.200000000000000\" as \"1.2\"\n+                         single_line_arrays = 0x08,\n+                                                // pretty printing except that arrays printed on single lines unless they contain\n+                                                // composite elements, i.e. objects or arrays\n+                         always_escape_nonascii = 0x10,\n+                                                // all unicode wide characters are escaped, i.e. outputed as \"\\uXXXX\", even if they are\n+                                                // printable under the current locale, ascii printable chars are not escaped\n+                       };\n+}\n+\n+#endif"
      },
      {
        "sha": "014d9d4cd02592c3c7df27a61e5f62e5d50a380f",
        "filename": "src/json/json_spirit_writer_template.h",
        "status": "modified",
        "additions": 170,
        "deletions": 31,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_writer_template.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2227389fa8fa1b9ff19234838fc7b641e935125b/src/json/json_spirit_writer_template.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json/json_spirit_writer_template.h?ref=2227389fa8fa1b9ff19234838fc7b641e935125b",
        "patch": "@@ -1,16 +1,22 @@\n #ifndef JSON_SPIRIT_WRITER_TEMPLATE\n #define JSON_SPIRIT_WRITER_TEMPLATE\n \n-//          Copyright John W. Wilkinson 2007 - 2009.\n+//          Copyright John W. Wilkinson 2007 - 2013\n // Distributed under the MIT License, see accompanying file LICENSE.txt\n \n-// json spirit version 4.03\n+// json spirit version 4.06\n+\n+#if defined(_MSC_VER) && (_MSC_VER >= 1020)\n+# pragma once\n+#endif\n \n #include \"json_spirit_value.h\"\n+#include \"json_spirit_writer_options.h\"\n \n #include <cassert>\n #include <sstream>\n #include <iomanip>\n+#include <boost/io/ios_state.hpp>\n \n namespace json_spirit\n {\n@@ -60,7 +66,7 @@ namespace json_spirit\n     }\n \n     template< class String_type >\n-    String_type add_esc_chars( const String_type& s )\n+    String_type add_esc_chars( const String_type& s, bool raw_utf8, bool esc_nonascii )\n     {\n         typedef typename String_type::const_iterator Iter_type;\n         typedef typename String_type::value_type     Char_type;\n@@ -75,21 +81,80 @@ namespace json_spirit\n \n             if( add_esc_char( c, result ) ) continue;\n \n-            const wint_t unsigned_c( ( c >= 0 ) ? c : 256 + c );\n-\n-            if( iswprint( unsigned_c ) )\n+            if( raw_utf8 )\n             {\n                 result += c;\n             }\n             else\n             {\n-                result += non_printable_to_string< String_type >( unsigned_c );\n+                const wint_t unsigned_c( ( c >= 0 ) ? c : 256 + c );\n+\n+                if( !esc_nonascii && iswprint( unsigned_c ) )\n+                {\n+                    result += c;\n+                }\n+                else\n+                {\n+                    result += non_printable_to_string< String_type >( unsigned_c );\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    template< class Ostream >\n+    void append_double( Ostream& os, const double d, const int precision )\n+    {\n+        os << std::showpoint << std::setprecision( precision ) << d;\n+    }\n+\n+    template< class String_type >\n+    void erase_and_extract_exponent( String_type& str, String_type& exp )\n+    {\n+        const typename String_type::size_type exp_start= str.find( 'e' );\n+\n+        if( exp_start != String_type::npos )\n+        {\n+            exp = str.substr( exp_start );\n+            str.erase( exp_start );\n+        }\n+    }\n+\n+    template< class String_type >\n+    typename String_type::size_type find_first_non_zero( const String_type& str )\n+    {\n+        typename String_type::size_type result = str.size() - 1;\n+\n+        for( ; result != 0; --result )\n+        {\n+            if( str[ result ] != '0' )\n+            {\n+                break;\n             }\n         }\n \n         return result;\n     }\n \n+    template< class String_type >\n+    void remove_trailing( String_type& str )\n+    {\n+        String_type exp;\n+\n+        erase_and_extract_exponent( str, exp );\n+\n+        const typename String_type::size_type first_non_zero = find_first_non_zero( str );\n+\n+        if( first_non_zero != 0 )\n+        {\n+            const int offset = str[first_non_zero] == '.' ? 2 : 1;  // note zero digits following a decimal point is non standard\n+            str.erase( first_non_zero + offset );\n+        }\n+\n+        str += exp;\n+    }\n+\n     // this class generates the JSON text,\n     // it keeps track of the indentation level etc.\n     //\n@@ -105,10 +170,15 @@ namespace json_spirit\n \n     public:\n \n-        Generator( const Value_type& value, Ostream_type& os, bool pretty )\n+        Generator( const Value_type& value, Ostream_type& os, unsigned int options )\n         :   os_( os )\n         ,   indentation_level_( 0 )\n-        ,   pretty_( pretty )\n+        ,   pretty_( ( options & pretty_print ) != 0 || ( options & single_line_arrays ) != 0 )\n+        ,   raw_utf8_( ( options & raw_utf8 ) != 0 )\n+        ,   esc_nonascii_( ( options & always_escape_nonascii ) != 0 )\n+        ,   remove_trailing_zeros_( ( options & remove_trailing_zeros ) != 0 )\n+        ,   single_line_arrays_( ( options & single_line_arrays ) != 0 )\n+        ,   ios_saver_( os )\n         {\n             output( value );\n         }\n@@ -123,12 +193,8 @@ namespace json_spirit\n                 case array_type: output( value.get_array() ); break;\n                 case str_type:   output( value.get_str() );   break;\n                 case bool_type:  output( value.get_bool() );  break;\n+                case real_type:  output( value.get_real() );  break;\n                 case int_type:   output_int( value );         break;\n-\n-                /// Bitcoin: Added std::fixed and changed precision from 16 to 8\n-                case real_type:  os_ << std::showpoint << std::fixed << std::setprecision(8)\n-                                     << value.get_real();     break;\n-\n                 case null_type:  os_ << \"null\";               break;\n                 default: assert( false );\n             }\n@@ -139,11 +205,6 @@ namespace json_spirit\n             output_array_or_obj( obj, '{', '}' );\n         }\n \n-        void output( const Array_type& arr )\n-        {\n-            output_array_or_obj( arr, '[', ']' );\n-        }\n-\n         void output( const Obj_member_type& member )\n         {\n             output( Config_type::get_name( member ) ); space(); \n@@ -165,14 +226,83 @@ namespace json_spirit\n \n         void output( const String_type& s )\n         {\n-            os_ << '\"' << add_esc_chars( s ) << '\"';\n+            os_ << '\"' << add_esc_chars( s, raw_utf8_, esc_nonascii_ ) << '\"';\n         }\n \n         void output( bool b )\n         {\n             os_ << to_str< String_type >( b ? \"true\" : \"false\" );\n         }\n \n+        void output( double d )\n+        {\n+            if( remove_trailing_zeros_ )\n+            {\n+                std::basic_ostringstream< Char_type > os;\n+\n+                append_double( os, d, 16 );  // note precision is 16 so that we get some trailing space that we can remove,\n+                                             // otherwise, 0.1234 gets converted to \"0.12399999...\"\n+\n+                String_type str = os.str();\n+\n+                remove_trailing( str );\n+\n+                os_ << str;\n+            }\n+            else\n+            {\n+                append_double( os_, d, 17 );\n+            }\n+        }\n+\n+        static bool contains_composite_elements( const Array_type& arr )\n+        {\n+            for( typename Array_type::const_iterator i = arr.begin(); i != arr.end(); ++i )\n+            {\n+                const Value_type& val = *i;\n+\n+                if( val.type() == obj_type ||\n+                    val.type() == array_type )\n+                {\n+                    return true;\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        template< class Iter >\n+        void output_composite_item( Iter i, Iter last )\n+        {\n+            output( *i );\n+\n+            if( ++i != last )\n+            {\n+                os_ << ',';\n+            }\n+        }\n+\n+        void output( const Array_type& arr )\n+        {\n+            if( single_line_arrays_ && !contains_composite_elements( arr )  )\n+            {\n+                os_ << '['; space();\n+               \n+                for( typename Array_type::const_iterator i = arr.begin(); i != arr.end(); ++i )\n+                {\n+                    output_composite_item( i, arr.end() );\n+\n+                    space();\n+                }\n+\n+                os_ << ']';\n+            }\n+            else\n+            {\n+                output_array_or_obj( arr, '[', ']' );\n+            }\n+        }\n+\n         template< class T >\n         void output_array_or_obj( const T& t, Char_type start_char, Char_type end_char )\n         {\n@@ -182,14 +312,9 @@ namespace json_spirit\n             \n             for( typename T::const_iterator i = t.begin(); i != t.end(); ++i )\n             {\n-                indent(); output( *i );\n+                indent();\n \n-                typename T::const_iterator next = i;\n-\n-                if( ++next != t.end())\n-                {\n-                    os_ << ',';\n-                }\n+                output_composite_item( i, t.end() );\n \n                 new_line();\n             }\n@@ -224,22 +349,36 @@ namespace json_spirit\n         Ostream_type& os_;\n         int indentation_level_;\n         bool pretty_;\n+        bool raw_utf8_;\n+        bool esc_nonascii_;\n+        bool remove_trailing_zeros_;\n+        bool single_line_arrays_;\n+        boost::io::basic_ios_all_saver< Char_type > ios_saver_;  // so that ostream state is reset after control is returned to the caller\n     };\n \n+    // writes JSON Value to a stream, e.g.\n+    //\n+    // write_stream( value, os, pretty_print );\n+    //\n     template< class Value_type, class Ostream_type >\n-    void write_stream( const Value_type& value, Ostream_type& os, bool pretty )\n+    void write_stream( const Value_type& value, Ostream_type& os, unsigned int options = 0 )\n     {\n-        Generator< Value_type, Ostream_type >( value, os, pretty );\n+        os << std::dec;\n+        Generator< Value_type, Ostream_type >( value, os, options );\n     }\n \n+    // writes JSON Value to a stream, e.g.\n+    //\n+    // const string json_str = write( value, pretty_print );\n+    //\n     template< class Value_type >\n-    typename Value_type::String_type write_string( const Value_type& value, bool pretty )\n+    typename Value_type::String_type write_string( const Value_type& value, unsigned int options = 0 )\n     {\n         typedef typename Value_type::String_type::value_type Char_type;\n \n         std::basic_ostringstream< Char_type > os;\n \n-        write_stream( value, os, pretty );\n+        write_stream( value, os, options );\n \n         return os.str();\n     }"
      }
    ]
  },
  {
    "sha": "2ecb7555a9df1e843fd25f588819e4ca1d94b266",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWNiNzU1NWE5ZGYxZTg0M2ZkMjVmNTg4ODE5ZTRjYTFkOTRiMjY2",
    "commit": {
      "author": {
        "name": "constantined",
        "email": "nobody@constantined.com",
        "date": "2013-07-23T01:51:29Z"
      },
      "committer": {
        "name": "constantined",
        "email": "nobody@constantined.com",
        "date": "2013-07-23T01:51:29Z"
      },
      "message": "Switch to using raw_utf8",
      "tree": {
        "sha": "6f6db5baacd8cb224861f5a0104046b8c9f8eb99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f6db5baacd8cb224861f5a0104046b8c9f8eb99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ecb7555a9df1e843fd25f588819e4ca1d94b266",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecb7555a9df1e843fd25f588819e4ca1d94b266",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ecb7555a9df1e843fd25f588819e4ca1d94b266",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecb7555a9df1e843fd25f588819e4ca1d94b266/comments",
    "author": {
      "login": "constantined",
      "id": 1137500,
      "node_id": "MDQ6VXNlcjExMzc1MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1137500?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/constantined",
      "html_url": "https://github.com/constantined",
      "followers_url": "https://api.github.com/users/constantined/followers",
      "following_url": "https://api.github.com/users/constantined/following{/other_user}",
      "gists_url": "https://api.github.com/users/constantined/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/constantined/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/constantined/subscriptions",
      "organizations_url": "https://api.github.com/users/constantined/orgs",
      "repos_url": "https://api.github.com/users/constantined/repos",
      "events_url": "https://api.github.com/users/constantined/events{/privacy}",
      "received_events_url": "https://api.github.com/users/constantined/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "constantined",
      "id": 1137500,
      "node_id": "MDQ6VXNlcjExMzc1MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1137500?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/constantined",
      "html_url": "https://github.com/constantined",
      "followers_url": "https://api.github.com/users/constantined/followers",
      "following_url": "https://api.github.com/users/constantined/following{/other_user}",
      "gists_url": "https://api.github.com/users/constantined/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/constantined/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/constantined/subscriptions",
      "organizations_url": "https://api.github.com/users/constantined/orgs",
      "repos_url": "https://api.github.com/users/constantined/repos",
      "events_url": "https://api.github.com/users/constantined/events{/privacy}",
      "received_events_url": "https://api.github.com/users/constantined/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2227389fa8fa1b9ff19234838fc7b641e935125b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2227389fa8fa1b9ff19234838fc7b641e935125b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2227389fa8fa1b9ff19234838fc7b641e935125b"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5a46db6317f8984735bb1ac78b99cb4aa57bd3d9",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=2ecb7555a9df1e843fd25f588819e4ca1d94b266",
        "patch": "@@ -497,7 +497,7 @@ string JSONRPCRequest(const string& strMethod, const Array& params, const Value&\n     request.push_back(Pair(\"method\", strMethod));\n     request.push_back(Pair(\"params\", params));\n     request.push_back(Pair(\"id\", id));\n-    return write_string(Value(request), false) + \"\\n\";\n+    return write_string(Value(request), raw_utf8) + \"\\n\";\n }\n \n Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n@@ -515,7 +515,7 @@ Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n string JSONRPCReply(const Value& result, const Value& error, const Value& id)\n {\n     Object reply = JSONRPCReplyObj(result, error, id);\n-    return write_string(Value(reply), false) + \"\\n\";\n+    return write_string(Value(reply), raw_utf8) + \"\\n\";\n }\n \n void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n@@ -945,7 +945,7 @@ static string JSONRPCExecBatch(const Array& vReq)\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n         ret.push_back(JSONRPCExecOne(vReq[reqIdx]));\n \n-    return write_string(Value(ret), false) + \"\\n\";\n+    return write_string(Value(ret), raw_utf8) + \"\\n\";\n }\n \n void ServiceConnection(AcceptedConnection *conn)\n@@ -1235,7 +1235,7 @@ int CommandLineRPC(int argc, char *argv[])\n         if (error.type() != null_type)\n         {\n             // Error\n-            strPrint = \"error: \" + write_string(error, false);\n+            strPrint = \"error: \" + write_string(error, raw_utf8);\n             int code = find_value(error.get_obj(), \"code\").get_int();\n             nRet = abs(code);\n         }\n@@ -1247,7 +1247,7 @@ int CommandLineRPC(int argc, char *argv[])\n             else if (result.type() == str_type)\n                 strPrint = result.get_str();\n             else\n-                strPrint = write_string(result, true);\n+                strPrint = write_string(result, pretty_print | raw_utf8);\n         }\n     }\n     catch (boost::thread_interrupted) {"
      },
      {
        "sha": "911cef41b50bae2896dbd55a5ef446248b51e691",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=2ecb7555a9df1e843fd25f588819e4ca1d94b266",
        "patch": "@@ -157,7 +157,7 @@ void RPCExecutor::request(const QString &command)\n         else if (result.type() == json_spirit::str_type)\n             strPrint = result.get_str();\n         else\n-            strPrint = write_string(result, true);\n+            strPrint = write_string(result, json_spirit::pretty_print | json_spirit::raw_utf8);\n \n         emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n     }\n@@ -171,7 +171,7 @@ void RPCExecutor::request(const QString &command)\n         }\n         catch(std::runtime_error &) // raised when converting to invalid type, i.e. missing code or message\n         {   // Show raw JSON object\n-            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), false)));\n+            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), json_spirit::raw_utf8)));\n         }\n     }\n     catch (std::exception& e)"
      },
      {
        "sha": "fb8b74276e29919857f28fa45faaa8000492c4ea",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=2ecb7555a9df1e843fd25f588819e4ca1d94b266",
        "patch": "@@ -19,7 +19,7 @@ BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+        std::string strTest = write_string(tv, raw_utf8);\n         if (test.size() < 2) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -42,7 +42,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+        std::string strTest = write_string(tv, raw_utf8);\n         if (test.size() < 2) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -114,7 +114,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+        std::string strTest = write_string(tv, raw_utf8);\n         if (test.size() < 3) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -171,7 +171,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+        std::string strTest = write_string(tv, raw_utf8);\n         if (test.size() < 3) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -240,7 +240,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+        std::string strTest = write_string(tv, raw_utf8);\n         if (test.size() < 1) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);"
      },
      {
        "sha": "b24f15d8928d6f7665088683fed0a3a2fcf9b846",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=2ecb7555a9df1e843fd25f588819e4ca1d94b266",
        "patch": "@@ -131,7 +131,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n+        string strTest = write_string(tv, raw_utf8);\n         if (test.size() < 2) // Allow size > 2; extra stuff ignored (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -155,7 +155,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n+        string strTest = write_string(tv, raw_utf8);\n         if (test.size() < 2) // Allow size > 2; extra stuff ignored (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);"
      },
      {
        "sha": "9d6a63eb8dd53aa780335136843f1ee356ebf6d7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecb7555a9df1e843fd25f588819e4ca1d94b266/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2ecb7555a9df1e843fd25f588819e4ca1d94b266",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n+        string strTest = write_string(tv, raw_utf8);\n         if (test[0].type() == array_type)\n         {\n             if (test.size() != 3 || test[1].type() != str_type || test[2].type() != bool_type)\n@@ -96,7 +96,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n+        string strTest = write_string(tv, raw_utf8);\n         if (test[0].type() == array_type)\n         {\n             if (test.size() != 3 || test[1].type() != str_type || test[2].type() != bool_type)"
      }
    ]
  }
]