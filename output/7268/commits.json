[
  {
    "sha": "9fef8f633ddfdc273230d9c91f97583a23bb1960",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmVmOGY2MzNkZGZkYzI3MzIzMGQ5YzkxZjk3NTgzYTIzYmIxOTYw",
    "commit": {
      "author": {
        "name": "Brian Hoffman",
        "email": "brianchoffman@gmail.com",
        "date": "2015-12-31T15:03:22Z"
      },
      "committer": {
        "name": "Brian Hoffman",
        "email": "brianchoffman@gmail.com",
        "date": "2016-01-02T14:56:18Z"
      },
      "message": "Formatting/gramattical fixes\n\nExtremely minor fixes for spacing, periods, extra words.\n\nSpacing and spelling mistake",
      "tree": {
        "sha": "090b1f43c6c7b11b69391c584a8ef015163430fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/090b1f43c6c7b11b69391c584a8ef015163430fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fef8f633ddfdc273230d9c91f97583a23bb1960",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fef8f633ddfdc273230d9c91f97583a23bb1960",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fef8f633ddfdc273230d9c91f97583a23bb1960",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fef8f633ddfdc273230d9c91f97583a23bb1960/comments",
    "author": {
      "login": "hoffmabc",
      "id": 45482,
      "node_id": "MDQ6VXNlcjQ1NDgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/45482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hoffmabc",
      "html_url": "https://github.com/hoffmabc",
      "followers_url": "https://api.github.com/users/hoffmabc/followers",
      "following_url": "https://api.github.com/users/hoffmabc/following{/other_user}",
      "gists_url": "https://api.github.com/users/hoffmabc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hoffmabc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hoffmabc/subscriptions",
      "organizations_url": "https://api.github.com/users/hoffmabc/orgs",
      "repos_url": "https://api.github.com/users/hoffmabc/repos",
      "events_url": "https://api.github.com/users/hoffmabc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hoffmabc/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hoffmabc",
      "id": 45482,
      "node_id": "MDQ6VXNlcjQ1NDgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/45482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hoffmabc",
      "html_url": "https://github.com/hoffmabc",
      "followers_url": "https://api.github.com/users/hoffmabc/followers",
      "following_url": "https://api.github.com/users/hoffmabc/following{/other_user}",
      "gists_url": "https://api.github.com/users/hoffmabc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hoffmabc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hoffmabc/subscriptions",
      "organizations_url": "https://api.github.com/users/hoffmabc/orgs",
      "repos_url": "https://api.github.com/users/hoffmabc/repos",
      "events_url": "https://api.github.com/users/hoffmabc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hoffmabc/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be9a9a3d2253ceccf123572b97a890c489a5a9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9a9a3d2253ceccf123572b97a890c489a5a9be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be9a9a3d2253ceccf123572b97a890c489a5a9be"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "1e1b6cd2797993317c311111162bce2e53a05210",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fef8f633ddfdc273230d9c91f97583a23bb1960/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fef8f633ddfdc273230d9c91f97583a23bb1960/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=9fef8f633ddfdc273230d9c91f97583a23bb1960",
        "patch": "@@ -29,10 +29,10 @@ class CTxMemPool;\n  * included in blocks before transactions of lower fee/priority.   So for\n  * example if you wanted to know what fee you should put on a transaction to\n  * be included in a block within the next 5 blocks, you would start by looking\n- * at the bucket with with the highest fee transactions and verifying that a\n+ * at the bucket with the highest fee transactions and verifying that a\n  * sufficiently high percentage of them were confirmed within 5 blocks and\n  * then you would look at the next highest fee bucket, and so on, stopping at\n- * the last bucket to pass the test.   The average fee of transactions in this\n+ * the last bucket to pass the test.  The average fee of transactions in this\n  * bucket will give you an indication of the lowest fee you can put on a\n  * transaction and still have a sufficiently high chance of being confirmed\n  * within your desired 5 blocks.\n@@ -71,29 +71,29 @@ class CTxMemPool;\n  * We will instantiate two instances of this class, one to track transactions\n  * that were included in a block due to fee, and one for tx's included due to\n  * priority.  We will lump transactions into a bucket according to their approximate\n- * fee or priority and then track how long it took for those txs to be included in a block\n+ * fee or priority and then track how long it took for those txs to be included in a block.\n  *\n  * The tracking of unconfirmed (mempool) transactions is completely independent of the\n  * historical tracking of transactions that have been confirmed in a block.\n  */\n class TxConfirmStats\n {\n private:\n-    //Define the buckets we will group transactions into (both fee buckets and priority buckets)\n+    // Define the buckets we will group transactions into (both fee buckets and priority buckets)\n     std::vector<double> buckets;              // The upper-bound of the range for the bucket (inclusive)\n     std::map<double, unsigned int> bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n \n     // For each bucket X:\n     // Count the total # of txs in each bucket\n     // Track the historical moving average of this total over blocks\n     std::vector<double> txCtAvg;\n-    // and calcuate the total for the current block to update the moving average\n+    // and calculate the total for the current block to update the moving average\n     std::vector<int> curBlockTxCt;\n \n     // Count the total # of txs confirmed within Y blocks in each bucket\n     // Track the historical moving average of theses totals over blocks\n     std::vector<std::vector<double> > confAvg; // confAvg[Y][X]\n-    // and calcuate the totals for the current block to update the moving averages\n+    // and calculate the totals for the current block to update the moving averages\n     std::vector<std::vector<int> > curBlockConf; // curBlockConf[Y][X]\n \n     // Sum the total priority/fee of all tx's in each bucket\n@@ -137,10 +137,10 @@ class TxConfirmStats\n      */\n     void Record(int blocksToConfirm, double val);\n \n-    /** Record a new transaction entering the mempool*/\n+    /** Record a new transaction entering the mempool */\n     unsigned int NewTx(unsigned int nBlockHeight, double val);\n \n-    /** Remove a transaction from mempool tracking stats*/\n+    /** Remove a transaction from mempool tracking stats */\n     void removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight,\n                   unsigned int bucketIndex);\n \n@@ -165,7 +165,7 @@ class TxConfirmStats\n     /** Return the max number of confirms we're tracking */\n     unsigned int GetMaxConfirms() { return confAvg.size(); }\n \n-    /** Write state of estimation data to a file*/\n+    /** Write state of estimation data to a file */\n     void Write(CAutoFile& fileout);\n \n     /**\n@@ -211,9 +211,9 @@ static const double FEE_SPACING = 1.1;\n static const double PRI_SPACING = 2;\n \n /**\n- *  We want to be able to estimate fees or priorities that are needed on tx's to be included in\n+ * We want to be able to estimate fees or priorities that are needed on tx's to be included in\n  * a certain number of blocks.  Every time a block is added to the best chain, this class records\n- * stats on the transactions included in that block\n+ * stats on the transactions included in that block.\n  */\n class CBlockPolicyEstimator\n {\n@@ -225,19 +225,19 @@ class CBlockPolicyEstimator\n     void processBlock(unsigned int nBlockHeight,\n                       std::vector<CTxMemPoolEntry>& entries, bool fCurrentEstimate);\n \n-    /** Process a transaction confirmed in a block*/\n+    /** Process a transaction confirmed in a block */\n     void processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry);\n \n-    /** Process a transaction accepted to the mempool*/\n+    /** Process a transaction accepted to the mempool */\n     void processTransaction(const CTxMemPoolEntry& entry, bool fCurrentEstimate);\n \n-    /** Remove a transaction from the mempool tracking stats*/\n+    /** Remove a transaction from the mempool tracking stats */\n     void removeTx(uint256 hash);\n \n-    /** Is this transaction likely included in a block because of its fee?*/\n+    /** Is this transaction likely included in a block because of its fee? */\n     bool isFeeDataPoint(const CFeeRate &fee, double pri);\n \n-    /** Is this transaction likely included in a block because of its priority?*/\n+    /** Is this transaction likely included in a block because of its priority? */\n     bool isPriDataPoint(const CFeeRate &fee, double pri);\n \n     /** Return a fee estimate */\n@@ -286,4 +286,4 @@ class CBlockPolicyEstimator\n     CFeeRate feeLikely, feeUnlikely;\n     double priLikely, priUnlikely;\n };\n-#endif /*BITCOIN_POLICYESTIMATOR_H */\n+#endif /* BITCOIN_POLICYESTIMATOR_H */"
      }
    ]
  }
]