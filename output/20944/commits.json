[
  {
    "sha": "fa362064e383163a2585ffbc71ac1ea3bcc92663",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM2MjA2NGUzODMxNjNhMjU4NWZmYmM3MWFjMWVhM2JjYzkyNjYz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-15T15:39:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-28T09:43:22Z"
      },
      "message": "rpc: Return total fee in mempool\n\nAlso, add missing lock annotations",
      "tree": {
        "sha": "8b8494e25d23c9de4ddae36c848a05ec28deaa54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b8494e25d23c9de4ddae36c848a05ec28deaa54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa362064e383163a2585ffbc71ac1ea3bcc92663",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiQ5Av/cT4ZVldZX5mQVkO0mjx3GqtaA8UY+hAuhLEXAuNrnBgkOD458bBzdDAB\ngs9m0rAWnpHqATFuuqkTQhp3ogwkBPHbKxYlFlEojgT0TF6Qy29VA63tSMiyg9PG\nu3HlyCqr+bvnDfsz1HBitCKXqyjVnBcEAHXQy1ZJUsU6PccYEUT0PH15R6ioS+TW\nujx5HkmZ7Cb1fPSIKtGgUbUe3Srvs0qRojx2qmGiWz5qSGfE7vH89jP1vrVi0Qoa\nA6kk7xo2MjDGnzshaUn4fZxtAf6E2OFwZHRiaGgxih+XuPSCeQVsATaN7cfcFhnz\nFjqGT44VDdiLERN70c/Jvy6+V4J6oT0okZ2bwhAj7j/kAGyV+qsWTeHcBsDZW2UX\n8EwgB3VWEolcnPloVZ0z1stTUBwSqND2N+O6iwQGbQOUBMAu5R2arValFa4QtIEZ\ns3BjFyipyTXxFjwNwroSSB3sIimU5TwwWTMXosh8+pX1KKuTXo58yfEprAeqcAsY\n/NqIY4q3\n=qq1Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b8494e25d23c9de4ddae36c848a05ec28deaa54\nparent 4bd586607d6305b828f0f554394d1c25b6dbcd14\nauthor MarcoFalke <falke.marco@gmail.com> 1610725177 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1611827002 +0100\n\nrpc: Return total fee in mempool\n\nAlso, add missing lock annotations\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa362064e383163a2585ffbc71ac1ea3bcc92663",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa362064e383163a2585ffbc71ac1ea3bcc92663",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa362064e383163a2585ffbc71ac1ea3bcc92663/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4bd586607d6305b828f0f554394d1c25b6dbcd14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd586607d6305b828f0f554394d1c25b6dbcd14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bd586607d6305b828f0f554394d1c25b6dbcd14"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 32,
      "deletions": 14
    },
    "files": [
      {
        "sha": "ea06952af49a00029a92c78226060d5c416ebae7",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa362064e383163a2585ffbc71ac1ea3bcc92663/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa362064e383163a2585ffbc71ac1ea3bcc92663/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=fa362064e383163a2585ffbc71ac1ea3bcc92663",
        "patch": "@@ -111,12 +111,7 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n \n Returns various information about the TX mempool.\n Only supports JSON as output format.\n-* loaded : (boolean) if the mempool is fully loaded\n-* size : (numeric) the number of transactions in the TX mempool\n-* bytes : (numeric) size of the TX mempool in bytes\n-* usage : (numeric) total TX mempool memory usage\n-* maxmempool : (numeric) maximum memory usage for the mempool in bytes\n-* mempoolminfee : (numeric) minimum feerate (BTC per KB) for tx to be accepted\n+Refer to the `getmempoolinfo` RPC for documentation of the fields.\n \n `GET /rest/mempool/contents.json`\n "
      },
      {
        "sha": "c454ba69632f7ceb8167aeb30042cd42c1acd008",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa362064e383163a2585ffbc71ac1ea3bcc92663/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa362064e383163a2585ffbc71ac1ea3bcc92663/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa362064e383163a2585ffbc71ac1ea3bcc92663",
        "patch": "@@ -17,8 +17,8 @@\n #include <node/coinstats.h>\n #include <node/context.h>\n #include <node/utxo_snapshot.h>\n-#include <policy/fees.h>\n #include <policy/feerate.h>\n+#include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n@@ -1500,6 +1500,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"size\", (int64_t)pool.size());\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n+    ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n@@ -1520,6 +1521,7 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},"
      },
      {
        "sha": "33565988e4a1625108c5cdbcbb822b726c2f8544",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa362064e383163a2585ffbc71ac1ea3bcc92663/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa362064e383163a2585ffbc71ac1ea3bcc92663/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fa362064e383163a2585ffbc71ac1ea3bcc92663",
        "patch": "@@ -9,14 +9,14 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <optional.h>\n-#include <validation.h>\n-#include <policy/policy.h>\n #include <policy/fees.h>\n+#include <policy/policy.h>\n #include <policy/settings.h>\n #include <reverse_iterator.h>\n-#include <util/system.h>\n #include <util/moneystr.h>\n+#include <util/system.h>\n #include <util/time.h>\n+#include <validation.h>\n #include <validationinterface.h>\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n@@ -396,7 +396,10 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n \n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n-    if (minerPolicyEstimator) {minerPolicyEstimator->processTransaction(entry, validFeeEstimate);}\n+    m_total_fee += entry.GetFee();\n+    if (minerPolicyEstimator) {\n+        minerPolicyEstimator->processTransaction(entry, validFeeEstimate);\n+    }\n \n     vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n@@ -432,6 +435,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n         vTxHashes.clear();\n \n     totalTxSize -= it->GetTxSize();\n+    m_total_fee -= it->GetFee();\n     cachedInnerUsage -= it->DynamicMemoryUsage();\n     cachedInnerUsage -= memusage::DynamicUsage(it->GetMemPoolParentsConst()) + memusage::DynamicUsage(it->GetMemPoolChildrenConst());\n     mapTx.erase(it);\n@@ -590,6 +594,7 @@ void CTxMemPool::_clear()\n     mapTx.clear();\n     mapNextTx.clear();\n     totalTxSize = 0;\n+    m_total_fee = 0;\n     cachedInnerUsage = 0;\n     lastRollingFeeUpdate = GetTime();\n     blockSinceLastRollingFeeBump = false;\n@@ -623,6 +628,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     uint64_t checkTotal = 0;\n+    CAmount check_total_fee{0};\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n@@ -632,6 +638,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n+        check_total_fee += it->GetFee();\n         innerUsage += it->DynamicMemoryUsage();\n         const CTransaction& tx = it->GetTx();\n         innerUsage += memusage::DynamicUsage(it->GetMemPoolParentsConst()) + memusage::DynamicUsage(it->GetMemPoolChildrenConst());\n@@ -726,6 +733,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     }\n \n     assert(totalTxSize == checkTotal);\n+    assert(m_total_fee == check_total_fee);\n     assert(innerUsage == cachedInnerUsage);\n }\n "
      },
      {
        "sha": "c0df33fe1374f474201bd2c8c02834ba7382692b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa362064e383163a2585ffbc71ac1ea3bcc92663/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa362064e383163a2585ffbc71ac1ea3bcc92663/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fa362064e383163a2585ffbc71ac1ea3bcc92663",
        "patch": "@@ -19,8 +19,8 @@\n #include <optional.h>\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n-#include <sync.h>\n #include <random.h>\n+#include <sync.h>\n #include <util/hasher.h>\n \n #include <boost/multi_index_container.hpp>\n@@ -478,8 +478,9 @@ class CTxMemPool\n     std::atomic<unsigned int> nTransactionsUpdated{0}; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n-    uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n-    uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n+    uint64_t totalTxSize GUARDED_BY(cs);      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n+    CAmount m_total_fee GUARDED_BY(cs);       //!< sum of all mempool tx's fees (NOT modified fee)\n+    uint64_t cachedInnerUsage GUARDED_BY(cs); //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n@@ -724,6 +725,12 @@ class CTxMemPool\n         return totalTxSize;\n     }\n \n+    CAmount GetTotalFee() const EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        AssertLockHeld(cs);\n+        return m_total_fee;\n+    }\n+\n     bool exists(const GenTxid& gtxid) const\n     {\n         LOCK(cs);"
      },
      {
        "sha": "752b925b926b9914142a3143314ce086b45ece58",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa362064e383163a2585ffbc71ac1ea3bcc92663/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa362064e383163a2585ffbc71ac1ea3bcc92663/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=fa362064e383163a2585ffbc71ac1ea3bcc92663",
        "patch": "@@ -69,13 +69,19 @@ def run_test(self):\n         assert_equal(len(self.nodes[0].getrawmempool()), 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 5)\n \n+        total_fee_old = self.nodes[0].getmempoolinfo()['total_fee']\n+\n         self.log.debug(\"Prioritize a transaction on node0\")\n         fees = self.nodes[0].getmempoolentry(txid=last_txid)['fees']\n         assert_equal(fees['base'], fees['modified'])\n         self.nodes[0].prioritisetransaction(txid=last_txid, fee_delta=1000)\n         fees = self.nodes[0].getmempoolentry(txid=last_txid)['fees']\n         assert_equal(fees['base'] + Decimal('0.00001000'), fees['modified'])\n \n+        self.log.info('Check the total base fee is unchanged after prioritisetransaction')\n+        assert_equal(total_fee_old, self.nodes[0].getmempoolinfo()['total_fee'])\n+        assert_equal(total_fee_old, sum(v['fees']['base'] for k, v in self.nodes[0].getrawmempool(verbose=True).items()))\n+\n         tx_creation_time = self.nodes[0].getmempoolentry(txid=last_txid)['time']\n         assert_greater_than_or_equal(tx_creation_time, tx_creation_time_lower)\n         assert_greater_than_or_equal(tx_creation_time_higher, tx_creation_time)"
      }
    ]
  }
]