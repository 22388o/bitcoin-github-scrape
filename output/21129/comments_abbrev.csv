practicalswift,2021-02-10 20:53:26,Concept ACK: very nice fuzzing work @vasild! :),https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-777028299,777028299,
practicalswift,2021-02-28 20:59:34,"Tested ACK b0f06d04c1a57b3b440ebccf8482fcee124b6337\n\nThanks for improving our fuzzing harnesses @vasild! :)",https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-787522048,787522048,
jonatack,2021-02-28 21:05:42,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-787522979,787522979,
adamjonas,2021-04-27 18:01:01,"Tested b0f06d0 with `FUZZ=addrman src/test/fuzz/fuzz qa-assets/fuzz_seed_corpus/addrman`\n```\nINFO: Seed: 66461418\nINFO: Loaded 1 modules   (442033 inline 8-bit counters): 442033 [0x562796653cc0, 0x5627966bfb71),\nINFO: Loaded 1 PC tables (442033 PCs): 442033 [0x5627966bfb78,0x562796d7e688),\nINFO:     3980 files found in qa-assets/fuzz_seed_corpus/addrman\nINFO: -max_len is not provided; ",https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-827802607,827802607,
DrahtBot,2021-05-24 03:00:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#20233](https://github.com/bitcoin/bitcoin/pull/20233) (addrman: Make consistency checks a runtime option by jnewbery)\n\",https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-846697578,846697578,
vasild,2021-05-28 12:35:54,`b0f06d04c1...0de22a097e`: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-850387665,850387665,
practicalswift,2021-05-28 15:10:22,re-ACK 0de22a097e89af200d1c6125ba7e5c71fa71e53e,https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-850486912,850486912,
vasild,2021-07-26 15:56:19,`0de22a097e...fe9401b75d`: rebase due to conflicts and address review suggestion,https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-886824560,886824560,
jnewbery,2021-07-26 16:27:13,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-886849398,886849398,
vasild,2021-07-26 16:40:03,`fe9401b75d...2fe1efa94c`: address review suggestion,https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-886857520,886857520,
vasild,2021-08-02 12:52:22,`2fe1efa94c...1f00d22e12`: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-890999759,890999759,
vasild,2021-08-04 16:26:01,"`6d5e55e755...87651795d8`: fix locking in the test's `RandAddr()`, optimize addrman comparison (3-4x speedup!) and reduce the size of addrmans to avoid tests running so long as to cause a timeout.",https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-892798012,892798012,
jonatack,2021-08-04 17:30:06,"> optimize addrman comparison (3-4x speedup!) and reduce the size of addrmans to avoid tests running so long as to cause a timeout.\n\nNice!\n\n",https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-892840198,892840198,
practicalswift,2021-08-04 21:17:57,cr ACK 87651795d8622d354f8e3c481eb868d9433b841c,https://github.com/bitcoin/bitcoin/pull/21129#issuecomment-892981036,892981036,
MarcoFalke,2021-07-24 09:05:49,"Wouldn't it be better to read the address from the fuzz input? Fuzz input isn't uniform and thus can easier reach edge-cases like `000000`, which would be non-trivial or next to impossible with a uniform distribution over a large enough range.\n\n\nAlso, how is this different from `ConsumeNetAddr`?",https://github.com/bitcoin/bitcoin/pull/21129#discussion_r675972823,675972823,src/test/fuzz/addrman.cpp
vasild,2021-07-26 11:38:12,"The problem with consuming addresses directly from the fuzz input is that it is limited in size. This test needs 1000s of addresses. What happened in practice was that some random addresses were consumed followed by 1000s of all-zero addresses due to the fuzzing input being exhausted.\n\nThat is the main difference from `ConsumeNetAddr()`.",https://github.com/bitcoin/bitcoin/pull/21129#discussion_r676525584,676525584,src/test/fuzz/addrman.cpp
MarcoFalke,2021-07-26 12:00:09,Maybe add a few fuzzed addresses and fill up the rest with synthetic ones?,https://github.com/bitcoin/bitcoin/pull/21129#discussion_r676539167,676539167,src/test/fuzz/addrman.cpp
vasild,2021-07-26 15:55:46,"Right. The fuzzed provider is not used for anything after consuming the pile of addresses, so it is ok to fully exhaust it. Once it is exhausted, start generating ones from `insecure_rand`.",https://github.com/bitcoin/bitcoin/pull/21129#discussion_r676735749,676735749,src/test/fuzz/addrman.cpp
MarcoFalke,2021-07-26 16:07:26,"Maybe allow the fuzz engine to flip-flop between the two branches, if possible?\n\n```suggestion\n        if (m_fuzzed_data_provider.ConsumeBool()) {\n```",https://github.com/bitcoin/bitcoin/pull/21129#discussion_r676745221,676745221,src/test/fuzz/addrman.cpp
vasild,2021-07-26 16:42:50,"Even better!\n\nKept the `remaining_bytes()` check for clarity (it will still work without it because `ConsumeBool()` would always return `false` once fuzz input is exhausted but that would be somewhat unclear/obscure).",https://github.com/bitcoin/bitcoin/pull/21129#discussion_r676772693,676772693,src/test/fuzz/addrman.cpp
MarcoFalke,2021-08-05 10:27:39,Is there a reason to exclude num_sources == 1?,https://github.com/bitcoin/bitcoin/pull/21129#discussion_r683329942,683329942,src/test/fuzz/addrman.cpp
vasild,2021-08-05 16:47:27,No.,https://github.com/bitcoin/bitcoin/pull/21129#discussion_r683623440,683623440,src/test/fuzz/addrman.cpp
jnewbery,2021-09-08 09:24:49,What is this for?,https://github.com/bitcoin/bitcoin/pull/21129#discussion_r704230763,704230763,src/test/fuzz/addrman.cpp
vasild,2021-09-09 10:10:49,"Change it to `#if 0` to enable the equivalent `#else` branch which is much shorter and clear, but also slower. The `#else` snippet also shows what the faster snippet is trying to achieve by ""manually"" fiddling with addrman internals.",https://github.com/bitcoin/bitcoin/pull/21129#discussion_r705187606,705187606,src/test/fuzz/addrman.cpp
