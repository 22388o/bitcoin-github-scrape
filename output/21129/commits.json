[
  {
    "sha": "6408b24517f3418e2a408071b4c2ce26571f3167",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDA4YjI0NTE3ZjM0MThlMmE0MDgwNzFiNGMyY2UyNjU3MWYzMTY3",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-02-08T12:34:40Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-08-02T12:49:47Z"
      },
      "message": "fuzz: move init code to the CAddrManDeterministic constructor\n\nMove the addrman init code from the test case to a newly added\n`CAddrManDeterministic` constructor. This way it can be reused by other\ntests.",
      "tree": {
        "sha": "a063c07d029e3977862b89764327f011ef0a471e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a063c07d029e3977862b89764327f011ef0a471e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6408b24517f3418e2a408071b4c2ce26571f3167",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmEH6e0ACgkQVN8G9ktV\ny7//kh//c3hwqELX4LjOUQPoIvwSiHWh2QhhCBEORmjSxiNPRh5NMvayjNnMJUbT\ndLjxfKB+IdS/k0EXBx4p4CQdu9Juz/DhgsZ05ETfJvkNOQoPDvBjcP8Hz+5Z5RyK\nS/HZ5CD5/zG8Pbh7B/8Hgx20VcXk+4oNrKjoRP59yoEnPJ4g/kvpwwd9qxQc3OPH\nItTfyqpl2YXyh1QWCYHLvW3wlj1KIvf0IuKb9PSOhq3k6WhGP1sHqaJ+DMjwq/J0\nfMcecUwybFHBWMWzVYrUBsYR3thgGaixrr34Ofxk6pPvceMHpyacDCQJ0gWIT84w\nJsSzaTQP0UJpOmS1T2mCw4Ep6tFBx7Swjk9nK8TQRdG5WP/3eo+SeHISp8DXj2Xz\nozfarzehzFxHZfMHXDAHLj7FJfZnWIaoLJVVQ+I0zUBkicFdYKVv2973bRVQx7f9\nVJm1wYXub/YmZ1T//GODeKg5f0HSjfeiQrcmV8SKeQC/zguvl1E6lwRzVUhxXEy8\nrjmRv+aLKZAc+rECkSKiGJ/IvlxPjw6wBynfASKxgMi1sw74LClddtInRLSSwWVY\nFXRRKtwG7tVzUVVvs0D2G0rNhQcazb+10vkVgc87ex5lPBEVjFyKUNpob8YA0efP\nALM7oPghDLPfZtCvuBLL/6xCdDgubNVvMjFkgI0iSmx/09J8wCcdtfh3p32Ds/b3\nhE7FDYNJrHfSQqF4kNpUBTC+04vhvfT2t6jWh8qYoa3wfsA9X5OhGBYZM7vR74MV\nOP9sznLbKeFXk8hLA0rb00KAsLqDOgCkQhJ7TfCGzTP4BoUhNUuXu6w6kGUTVArN\n0e63ElzqMLNMzWApP5790k4NdtneyYrg/mpjRJMCNzEm+YiBZasvRUGg4xMJflRP\nCmKCgFtpFr2CWquBAJrhp3QXkqLuDu69U+QFvd+h1CZTCSMeS5I17+Hy+gbDlBuD\nXHS9NcmT41iTqLJ4gUevKV3OljMMTay5clHxJWguwnh701X8oRVA7/PV5wBkoMzr\nO7bhzIDYhY54S9xhPL0xmyW3l5QqDkrEjQ91mbmKfeM2G6oRxiyKoplvMs9QevyB\nzjhyaJ3huh+Y9kTY57kNdDeoy5oWBarg0t9ZPKuH+Ri819TFWjeeh+mYOmNy7Rwo\nqLV9s5D/s4HQ9kJjrElawMrYIH2ne1rfmdKuzPoHypoR5MTa0xxujHdT+kqxCa2i\nyd9mSHkFJRkavYgtTDoGxUqfOLUW4cJEt1gNvx+v54ACnbFklv3867NlNy+z7r5d\n9Tfj/G2cV+xygKVzetAYr9YVem+Q7k18/Fr2SmK69XfvIBWKaaA+jfAB3676j8ia\nqkInNbTBOkq5f4RYOe0nevk0nwmlsQ==\n=bGW9\n-----END PGP SIGNATURE-----",
        "payload": "tree a063c07d029e3977862b89764327f011ef0a471e\nparent dcd116950fed0890020bc7283c5fa753f866047f\nauthor Vasil Dimov <vd@FreeBSD.org> 1612787680 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1627908587 +0200\n\nfuzz: move init code to the CAddrManDeterministic constructor\n\nMove the addrman init code from the test case to a newly added\n`CAddrManDeterministic` constructor. This way it can be reused by other\ntests.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6408b24517f3418e2a408071b4c2ce26571f3167",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6408b24517f3418e2a408071b4c2ce26571f3167",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6408b24517f3418e2a408071b4c2ce26571f3167/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcd116950fed0890020bc7283c5fa753f866047f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd116950fed0890020bc7283c5fa753f866047f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcd116950fed0890020bc7283c5fa753f866047f"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "94369fa5a07085d02d715fd69e4e6f14278d0cec",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6408b24517f3418e2a408071b4c2ce26571f3167/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6408b24517f3418e2a408071b4c2ce26571f3167/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=6408b24517f3418e2a408071b4c2ce26571f3167",
        "patch": "@@ -25,25 +25,23 @@ void initialize_addrman()\n class CAddrManDeterministic : public CAddrMan\n {\n public:\n-    void MakeDeterministic(const uint256& random_seed)\n+    explicit CAddrManDeterministic(FuzzedDataProvider& fuzzed_data_provider)\n     {\n-        WITH_LOCK(cs, insecure_rand = FastRandomContext{random_seed});\n-        Clear();\n+        WITH_LOCK(cs, insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            m_asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n+            if (!SanityCheckASMap(m_asmap)) {\n+                m_asmap.clear();\n+            }\n+        }\n     }\n };\n \n FUZZ_TARGET_INIT(addrman, initialize_addrman)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    CAddrManDeterministic addr_man;\n-    addr_man.MakeDeterministic(ConsumeUInt256(fuzzed_data_provider));\n-    if (fuzzed_data_provider.ConsumeBool()) {\n-        addr_man.m_asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n-        if (!SanityCheckASMap(addr_man.m_asmap)) {\n-            addr_man.m_asmap.clear();\n-        }\n-    }\n+    CAddrManDeterministic addr_man{fuzzed_data_provider};\n     if (fuzzed_data_provider.ConsumeBool()) {\n         const std::vector<uint8_t> serialized_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n         CDataStream ds(serialized_data, SER_DISK, INIT_PROTO_VERSION);"
      }
    ]
  },
  {
    "sha": "87651795d8622d354f8e3c481eb868d9433b841c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzY1MTc5NWQ4NjIyZDM1NGY4ZTNjNDgxZWI4NjhkOTQzM2I4NDFj",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-02-08T13:14:12Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-08-04T16:22:08Z"
      },
      "message": "fuzz: check that ser+unser produces the same AddrMan",
      "tree": {
        "sha": "2b10e998cf46156e4d7688d1f09ac010638c70c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b10e998cf46156e4d7688d1f09ac010638c70c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87651795d8622d354f8e3c481eb868d9433b841c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmEKvrIACgkQVN8G9ktV\ny7+AMR/+NgGgjyw2wIiWnF4GyMl9XUOJ4sXOGBtrYZgQdx/DIFCKoXCEENG8iEa8\nZUzl3COZurUHU7/oocn9LvPg2+quuv56KRHbwlMIHJby704Y7BSQhgAT2bPGyOgi\nk+jIb9i0KTvhB1VH5f17shXcjdg6kY18KI12MjZrRc2oFS2FR4D73tDjfFGO/l0R\nlQnL3BBoec47UQvVvO4Jnfy08AHpdZl0ld1yqQngaw3m3e490a5HEpsQWt4bohrY\n4FogpQFII/Dz1GGUmUk5H9s8STVow0h16wwYgm/gP8wVps8Ggy7jhnGCbBmIPWlq\nLZwwLJrvUd/R6fWlLr+V9Rx3FBAsGn5JFJ39/G6VH0gmH0Lw4FZDmD0sZl9umyyU\nQJN2/eXP3voC7o3JTMjFC9H2NNmTDh5SwHfFsDSE4eoZDrHJ7Brletzmw2uMhgxn\nzxLKOm2zPVxpIrJTcERLuinz7XMO4YTrdWzwfnxGOBycuvLEHkKIxJ3ZLm7p7xe7\ngpyE/gkG/QDk76Mkq2CWebJURhQFVK6dniiOZVszuu0eIjRutSVNa6jsiVrc+kEl\n50wleWVvNpSCxQzrzQhysHGnQ2gPvyyxSpIvT1n7PuuOgPH93I4fFrQkvm+JgiVZ\ngSzLfxKvrACcMURQnbq7Ze1EGVk9+wnLirgAhcz8unIKVAyq5nibXnPlJW9gZMJG\nP+BGR2gdui8cwLNa9gK8ZNjW1X+DLZH76kK4IPE6UHHp12u6/RMAH4/2Far3TN9m\nCr4CquOuHeX1e4eDnFSW27+nBsbQVLWVGAH9VVHcsO4KqoSIRwwcUaPgc2Y2hjt2\nph0rH8XK4QVSVoHLhY/AbTB9rUIc2ceEp6+b+VvHrjQadVJbsuC5t05JssfnNAi4\nN81SxyvpKnsVFycgrn6/R4XrRcVAR9j5ATTgwTPUWZwL70Di8GDm9eZFhv+jOTu3\n65bJPnRVVtViUNRjJlxh/dK97WJp/u6opH1a95QhVKghrrwVFcQ8K7aWHI4Rjuk/\nFsU38MxK6hVtepSXK9dIgPLXYChCDZKb+gF3iVUuoV78CjwTfPaUDQPIayT6LDhQ\npuy7dsDu1wRE/ouZFZdPJ9V5sb2Zh4P81ngU7xtAP+GwFhV8i6yO6XZyrbxGmO2y\nsu05dDl3Ln+kitGhfrmhqUDgXEgGxFJ7neujW6Fx8ZU+VT79hcfJSPow+CkAcqp6\nWoCFNGqWFZkypcd96ZOINBONTV1SydfEVPwRMG+7ZXz4nSHYTJy2nE+z3mMz4R3E\nMVAN6Rd31WmhLxvT8J611IXGSrlZxe+0OGx+woeIx4IwCDgr8PpvCJrY1d1J7Sar\nBTOh37mv7zDIpYks89GjC66ZAzm/0w==\n=iD99\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b10e998cf46156e4d7688d1f09ac010638c70c0\nparent 6408b24517f3418e2a408071b4c2ce26571f3167\nauthor Vasil Dimov <vd@FreeBSD.org> 1612790052 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1628094128 +0200\n\nfuzz: check that ser+unser produces the same AddrMan\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87651795d8622d354f8e3c481eb868d9433b841c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87651795d8622d354f8e3c481eb868d9433b841c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87651795d8622d354f8e3c481eb868d9433b841c/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6408b24517f3418e2a408071b4c2ce26571f3167",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6408b24517f3418e2a408071b4c2ce26571f3167",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6408b24517f3418e2a408071b4c2ce26571f3167"
      }
    ],
    "stats": {
      "total": 206,
      "additions": 206,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5227857fa49f551a257140756a75eb9b7fe577f2",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87651795d8622d354f8e3c481eb868d9433b841c/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87651795d8622d354f8e3c481eb868d9433b841c/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=87651795d8622d354f8e3c481eb868d9433b841c",
        "patch": "@@ -58,6 +58,7 @@ class CAddrInfo : public CAddress\n     mutable int nRandomPos{-1};\n \n     friend class CAddrMan;\n+    friend class CAddrManDeterministic;\n \n public:\n \n@@ -776,6 +777,7 @@ class CAddrMan\n     void RemoveInvalid() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     friend class CAddrManTest;\n+    friend class CAddrManDeterministic;\n };\n \n #endif // BITCOIN_ADDRMAN_H"
      },
      {
        "sha": "4c29a8ee538a4f6ebb838dc140a328eab838411d",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 204,
        "deletions": 0,
        "changes": 204,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87651795d8622d354f8e3c481eb868d9433b841c/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87651795d8622d354f8e3c481eb868d9433b841c/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=87651795d8622d354f8e3c481eb868d9433b841c",
        "patch": "@@ -12,6 +12,7 @@\n #include <time.h>\n #include <util/asmap.h>\n \n+#include <cassert>\n #include <cstdint>\n #include <optional>\n #include <string>\n@@ -25,7 +26,10 @@ void initialize_addrman()\n class CAddrManDeterministic : public CAddrMan\n {\n public:\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+\n     explicit CAddrManDeterministic(FuzzedDataProvider& fuzzed_data_provider)\n+        : m_fuzzed_data_provider(fuzzed_data_provider)\n     {\n         WITH_LOCK(cs, insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n         if (fuzzed_data_provider.ConsumeBool()) {\n@@ -35,6 +39,188 @@ class CAddrManDeterministic : public CAddrMan\n             }\n         }\n     }\n+\n+    /**\n+     * Generate a random address. Always returns a valid address.\n+     */\n+    CNetAddr RandAddr() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        CNetAddr addr;\n+        if (m_fuzzed_data_provider.remaining_bytes() > 1 && m_fuzzed_data_provider.ConsumeBool()) {\n+            addr = ConsumeNetAddr(m_fuzzed_data_provider);\n+        } else {\n+            // The networks [1..6] correspond to CNetAddr::BIP155Network (private).\n+            static const std::map<uint8_t, uint8_t> net_len_map = {{1, ADDR_IPV4_SIZE},\n+                                                                   {2, ADDR_IPV6_SIZE},\n+                                                                   {4, ADDR_TORV3_SIZE},\n+                                                                   {5, ADDR_I2P_SIZE},\n+                                                                   {6, ADDR_CJDNS_SIZE}};\n+            uint8_t net = insecure_rand.randrange(5) + 1; // [1..5]\n+            if (net == 3) {\n+                net = 6;\n+            }\n+\n+            CDataStream s(SER_NETWORK, PROTOCOL_VERSION | ADDRV2_FORMAT);\n+\n+            s << net;\n+            s << insecure_rand.randbytes(net_len_map.at(net));\n+\n+            s >> addr;\n+        }\n+\n+        // Return a dummy IPv4 5.5.5.5 if we generated an invalid address.\n+        if (!addr.IsValid()) {\n+            in_addr v4_addr = {};\n+            v4_addr.s_addr = 0x05050505;\n+            addr = CNetAddr{v4_addr};\n+        }\n+\n+        return addr;\n+    }\n+\n+    /**\n+     * Fill this addrman with lots of addresses from lots of sources.\n+     */\n+    void Fill()\n+    {\n+        LOCK(cs);\n+\n+        // Add some of the addresses directly to the \"tried\" table.\n+\n+        // 0, 1, 2, 3 corresponding to 0%, 100%, 50%, 33%\n+        const size_t n = m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 3);\n+\n+        const size_t num_sources = m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(10, 50);\n+        CNetAddr prev_source;\n+        // Use insecure_rand inside the loops instead of m_fuzzed_data_provider because when\n+        // the latter is exhausted it just returns 0.\n+        for (size_t i = 0; i < num_sources; ++i) {\n+            const auto source = RandAddr();\n+            const size_t num_addresses = insecure_rand.randrange(500) + 1; // [1..500]\n+\n+            for (size_t j = 0; j < num_addresses; ++j) {\n+                const auto addr = CAddress{CService{RandAddr(), 8333}, NODE_NETWORK};\n+                const auto time_penalty = insecure_rand.randrange(100000001);\n+#if 1\n+                // 2.83 sec to fill.\n+                if (n > 0 && mapInfo.size() % n == 0 && mapAddr.find(addr) == mapAddr.end()) {\n+                    // Add to the \"tried\" table (if the bucket slot is free).\n+                    const CAddrInfo dummy{addr, source};\n+                    const int bucket = dummy.GetTriedBucket(nKey, m_asmap);\n+                    const int bucket_pos = dummy.GetBucketPosition(nKey, false, bucket);\n+                    if (vvTried[bucket][bucket_pos] == -1) {\n+                        int id;\n+                        CAddrInfo* addr_info = Create(addr, source, &id);\n+                        vvTried[bucket][bucket_pos] = id;\n+                        addr_info->fInTried = true;\n+                        ++nTried;\n+                    }\n+                } else {\n+                    // Add to the \"new\" table.\n+                    Add_(addr, source, time_penalty);\n+                }\n+#else\n+                // 261.91 sec to fill.\n+                Add_(addr, source, time_penalty);\n+                if (n > 0 && mapInfo.size() % n == 0) {\n+                    Good_(addr, false, GetTime());\n+                }\n+#endif\n+                // Add 10% of the addresses from more than one source.\n+                if (insecure_rand.randrange(10) == 0 && prev_source.IsValid()) {\n+                    Add_(addr, prev_source, time_penalty);\n+                }\n+            }\n+            prev_source = source;\n+        }\n+    }\n+\n+    /**\n+     * Compare with another AddrMan.\n+     * This compares:\n+     * - the values in `mapInfo` (the keys aka ids are ignored)\n+     * - vvNew entries refer to the same addresses\n+     * - vvTried entries refer to the same addresses\n+     */\n+    bool operator==(const CAddrManDeterministic& other)\n+    {\n+        LOCK2(cs, other.cs);\n+\n+        if (mapInfo.size() != other.mapInfo.size() || nNew != other.nNew ||\n+            nTried != other.nTried) {\n+            return false;\n+        }\n+\n+        // Check that all values in `mapInfo` are equal to all values in `other.mapInfo`.\n+        // Keys may be different.\n+\n+        using CAddrInfoHasher = std::function<size_t(const CAddrInfo&)>;\n+        using CAddrInfoEq = std::function<bool(const CAddrInfo&, const CAddrInfo&)>;\n+\n+        CNetAddrHash netaddr_hasher;\n+\n+        CAddrInfoHasher addrinfo_hasher = [&netaddr_hasher](const CAddrInfo& a) {\n+            return netaddr_hasher(static_cast<CNetAddr>(a)) ^ netaddr_hasher(a.source) ^\n+                   a.nLastSuccess ^ a.nAttempts ^ a.nRefCount ^ a.fInTried;\n+        };\n+\n+        CAddrInfoEq addrinfo_eq = [](const CAddrInfo& lhs, const CAddrInfo& rhs) {\n+            return static_cast<CNetAddr>(lhs) == static_cast<CNetAddr>(rhs) &&\n+                   lhs.source == rhs.source && lhs.nLastSuccess == rhs.nLastSuccess &&\n+                   lhs.nAttempts == rhs.nAttempts && lhs.nRefCount == rhs.nRefCount &&\n+                   lhs.fInTried == rhs.fInTried;\n+        };\n+\n+        using Addresses = std::unordered_set<CAddrInfo, CAddrInfoHasher, CAddrInfoEq>;\n+\n+        const size_t num_addresses{mapInfo.size()};\n+\n+        Addresses addresses{num_addresses, addrinfo_hasher, addrinfo_eq};\n+        for (const auto& [id, addr] : mapInfo) {\n+            addresses.insert(addr);\n+        }\n+\n+        Addresses other_addresses{num_addresses, addrinfo_hasher, addrinfo_eq};\n+        for (const auto& [id, addr] : other.mapInfo) {\n+            other_addresses.insert(addr);\n+        }\n+\n+        if (addresses != other_addresses) {\n+            return false;\n+        }\n+\n+        auto IdsReferToSameAddress = [&](int id, int other_id) EXCLUSIVE_LOCKS_REQUIRED(cs, other.cs) {\n+            if (id == -1 && other_id == -1) {\n+                return true;\n+            }\n+            if ((id == -1 && other_id != -1) || (id != -1 && other_id == -1)) {\n+                return false;\n+            }\n+            return mapInfo.at(id) == other.mapInfo.at(other_id);\n+        };\n+\n+        // Check that `vvNew` contains the same addresses as `other.vvNew`. Notice - `vvNew[i][j]`\n+        // contains just an id and the address is to be found in `mapInfo.at(id)`. The ids\n+        // themselves may differ between `vvNew` and `other.vvNew`.\n+        for (size_t i = 0; i < ADDRMAN_NEW_BUCKET_COUNT; ++i) {\n+            for (size_t j = 0; j < ADDRMAN_BUCKET_SIZE; ++j) {\n+                if (!IdsReferToSameAddress(vvNew[i][j], other.vvNew[i][j])) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        // Same for `vvTried`.\n+        for (size_t i = 0; i < ADDRMAN_TRIED_BUCKET_COUNT; ++i) {\n+            for (size_t j = 0; j < ADDRMAN_BUCKET_SIZE; ++j) {\n+                if (!IdsReferToSameAddress(vvTried[i][j], other.vvTried[i][j])) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n };\n \n FUZZ_TARGET_INIT(addrman, initialize_addrman)\n@@ -121,3 +307,21 @@ FUZZ_TARGET_INIT(addrman, initialize_addrman)\n     CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);\n     data_stream << const_addr_man;\n }\n+\n+// Check that serialize followed by unserialize produces the same addrman.\n+FUZZ_TARGET_INIT(addrman_serdeser, initialize_addrman)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+\n+    CAddrManDeterministic addr_man1{fuzzed_data_provider};\n+    CAddrManDeterministic addr_man2{fuzzed_data_provider};\n+    addr_man2.m_asmap = addr_man1.m_asmap;\n+\n+    CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);\n+\n+    addr_man1.Fill();\n+    data_stream << addr_man1;\n+    data_stream >> addr_man2;\n+    assert(addr_man1 == addr_man2);\n+}"
      }
    ]
  }
]