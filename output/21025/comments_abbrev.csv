laanwj,2021-01-28 22:17:19,Code review ACK e6eb8d2bbbd32e5741c1dc1ef4c9cec7aac16b34,https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-769435805,769435805,
DrahtBot,2021-01-29 01:46:01,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-769516818,769516818,
practicalswift,2021-01-29 07:51:54,cr ACK e6eb8d2bbbd32e5741c1dc1ef4c9cec7aac16b34: patch looks correct,https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-769641491,769641491,
MarcoFalke,2021-01-29 08:10:58,Any reason to only add the annotation to (1/3) of the `m_*_chainstate`? The others have the same requirement,https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-769649762,769649762,
jnewbery,2021-02-01 10:37:21,"Code review ACK e6eb8d2bbb\n\n> Any reason to only add the annotation to (1/3) of the m_*_chainstate? The others have the same requirement\n\nThis resolves the blocker for #20749, but I agree that the other `m_*_chainstate`s should be guarded by cs_main.",https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-770756123,770756123,
jnewbery,2021-02-01 12:20:31,The older version was merged as part of #20749. Perhaps we should repurpose this PR to address the review comments (particularly https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-769649762)?,https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-770816363,770816363,
dongcarl,2021-02-01 17:13:20,"As suggested by @jnewbery, this PR has been repurposed to address https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-769649762",https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-771012998,771012998,
dongcarl,2021-02-02 03:09:50,"Pushed 24fcc4cb00 -> 20677ffa22\n- Rebased over master for #21051",https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-771319698,771319698,
jnewbery,2021-02-02 09:09:03,"code review ACK 20677ffa22e93e7408daadbd15d433f1e42faa86. I've verified by eye that neither of these members are accessed without cs_main.\n\nIn the commit message, ""Also vulnerable to the race condition described in the previous commit"" no longer makes sense since f92dc6557a153b390a1ae1d0808ff7ed5d02c66e is not the previous commit.\n\nA couple of potential follow-ups:\n\n- it may be possibl",https://github.com/bitcoin/bitcoin/pull/21025#issuecomment-771484892,771484892,
jnewbery,2021-01-28 19:14:14,"This seems pretty difficult to read. I think just locking cs_main at the top of the function, or asserting that it's held and making the callers lock cs_main fine would be more readable:\n\n```suggestion\n    LOCK(::cs_main);\n    return m_snapshot_chainstate && m_active_chainstate == m_snapshot_chainstate.get();\n```",https://github.com/bitcoin/bitcoin/pull/21025#discussion_r566343912,566343912,src/validation.cpp
jnewbery,2021-01-28 19:15:47,I don't find these `// for m_active_chainstate access` comments very useful. This function is _only_ accessing `m_active_chainstate` so it's pretty obvious what the lock is for.,https://github.com/bitcoin/bitcoin/pull/21025#discussion_r566344838,566344838,src/validation.cpp
jnewbery,2021-01-28 19:18:49,"Again, I think it's fine to hold this lock for the entirety of this function (in fact, the other ChainstateManager data members should be guarded by the same mutex).",https://github.com/bitcoin/bitcoin/pull/21025#discussion_r566346742,566346742,src/validation.cpp
dongcarl,2021-01-28 20:49:20,Done!,https://github.com/bitcoin/bitcoin/pull/21025#discussion_r566397476,566397476,src/validation.cpp
dongcarl,2021-01-28 20:49:29,Removed!,https://github.com/bitcoin/bitcoin/pull/21025#discussion_r566397561,566397561,src/validation.cpp
dongcarl,2021-01-28 20:50:09,"Done! Not 100% sure about the other members, we could do those in the future.",https://github.com/bitcoin/bitcoin/pull/21025#discussion_r566397926,566397926,src/validation.cpp
