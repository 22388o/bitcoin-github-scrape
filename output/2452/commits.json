[
  {
    "sha": "8726de26ee0010eaf64d44d69cc9b8e09e580a37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzI2ZGUyNmVlMDAxMGVhZjY0ZDQ0ZDY5Y2M5YjhlMDllNTgwYTM3",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-04-03T15:29:02Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-04-03T15:37:28Z"
      },
      "message": "Bitcoin-Qt: fix GUI after initial multi-wallet patch\n\n- adds 6 methods in BitcoinGUI to access some actions needed by the new\n  WalletView class\n- updates WalletView class to use these instead of trying to duplicate\n  these\n- cleanup walletview.{cpp/h} and remove all unneeded stuff\n- this fixes problems with tabs toolbar (#2451) and export broken (#2436)\n- more details in #2447",
      "tree": {
        "sha": "35db28180ed0189e69626d28d9e94e71013227d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35db28180ed0189e69626d28d9e94e71013227d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8726de26ee0010eaf64d44d69cc9b8e09e580a37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8726de26ee0010eaf64d44d69cc9b8e09e580a37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8726de26ee0010eaf64d44d69cc9b8e09e580a37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8726de26ee0010eaf64d44d69cc9b8e09e580a37/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "4240bdaac14380ff969a850a21af293ab312bc62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4240bdaac14380ff969a850a21af293ab312bc62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4240bdaac14380ff969a850a21af293ab312bc62"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 42,
      "deletions": 142
    },
    "files": [
      {
        "sha": "3498f7c9a84a474d1df5b0c0e1467ee3ea88dd49",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8726de26ee0010eaf64d44d69cc9b8e09e580a37/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8726de26ee0010eaf64d44d69cc9b8e09e580a37/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8726de26ee0010eaf64d44d69cc9b8e09e580a37",
        "patch": "@@ -56,7 +56,7 @@\n \n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n-BitcoinGUI::BitcoinGUI(QWidget *parent):\n+BitcoinGUI::BitcoinGUI(QWidget *parent) :\n     QMainWindow(parent),\n     clientModel(0),\n     encryptWalletAction(0),\n@@ -94,7 +94,7 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n     // Create wallet frame and make it the central widget\n     walletFrame = new WalletFrame(this);\n     setCentralWidget(walletFrame);\n-    \n+\n     // Create status bar\n     statusBar();\n \n@@ -221,6 +221,7 @@ void BitcoinGUI::createActions()\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n     toggleHideAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n+\n     encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n     encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n     encryptWalletAction->setCheckable(true);"
      },
      {
        "sha": "8f44389fd28648d472aaad107632c9c9a9b25b43",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8726de26ee0010eaf64d44d69cc9b8e09e580a37/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8726de26ee0010eaf64d44d69cc9b8e09e580a37/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=8726de26ee0010eaf64d44d69cc9b8e09e580a37",
        "patch": "@@ -29,6 +29,7 @@ class QStackedWidget;\n class QUrl;\n class QListWidget;\n class QPushButton;\n+class QAction;\n QT_END_NAMESPACE\n \n /**\n@@ -41,7 +42,7 @@ class BitcoinGUI : public QMainWindow\n \n public:\n     static const QString DEFAULT_WALLET;\n-    \n+\n     explicit BitcoinGUI(QWidget *parent = 0);\n     ~BitcoinGUI();\n \n@@ -56,9 +57,17 @@ class BitcoinGUI : public QMainWindow\n \n     bool addWallet(const QString& name, WalletModel *walletModel);\n     bool setCurrentWallet(const QString& name);\n-    \n+\n     void removeAllWallets();\n \n+    /** Used by WalletView to allow access to needed QActions */\n+    QAction * getOverviewAction() { return overviewAction; }\n+    QAction * getHistoryAction() { return historyAction; }\n+    QAction * getAddressBookAction() { return addressBookAction; }\n+    QAction * getReceiveCoinsAction() { return receiveCoinsAction; }\n+    QAction * getSendCoinsAction() { return sendCoinsAction; }\n+    QAction * getExportAction() { return exportAction; }\n+\n protected:\n     void changeEvent(QEvent *e);\n     void closeEvent(QCloseEvent *event);"
      },
      {
        "sha": "1d02b81fb6f9b4c6aae2a4fac869894db5df4b8a",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 109,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8726de26ee0010eaf64d44d69cc9b8e09e580a37/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8726de26ee0010eaf64d44d69cc9b8e09e580a37/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=8726de26ee0010eaf64d44d69cc9b8e09e580a37",
        "patch": "@@ -10,40 +10,26 @@\n #include \"addressbookpage.h\"\n #include \"sendcoinsdialog.h\"\n #include \"signverifymessagedialog.h\"\n-#include \"optionsdialog.h\"\n-#include \"aboutdialog.h\"\n #include \"clientmodel.h\"\n #include \"walletmodel.h\"\n-#include \"editaddressdialog.h\"\n #include \"optionsmodel.h\"\n-#include \"transactiondescdialog.h\"\n-#include \"addresstablemodel.h\"\n #include \"transactionview.h\"\n #include \"overviewpage.h\"\n-#include \"bitcoinunits.h\"\n-#include \"guiconstants.h\"\n #include \"askpassphrasedialog.h\"\n-#include \"guiutil.h\"\n #include \"ui_interface.h\"\n \n #include <QVBoxLayout>\n #include <QActionGroup>\n #include <QAction>\n-#include <QLabel>\n #include <QDesktopServices>\n #include <QFileDialog>\n \n WalletView::WalletView(QWidget *parent, BitcoinGUI *_gui):\n     QStackedWidget(parent),\n     gui(_gui),\n     clientModel(0),\n-    walletModel(0),\n-    encryptWalletAction(0),\n-    changePassphraseAction(0)\n+    walletModel(0)\n {\n-    // Create actions for the toolbar, menu bar and tray/dock icon\n-    createActions();\n-\n     // Create tabs\n     overviewPage = new OverviewPage();\n \n@@ -88,74 +74,6 @@ WalletView::~WalletView()\n {\n }\n \n-void WalletView::createActions()\n-{\n-    QActionGroup *tabGroup = new QActionGroup(this);\n-\n-    overviewAction = new QAction(QIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n-    overviewAction->setStatusTip(tr(\"Show general overview of wallet\"));\n-    overviewAction->setToolTip(overviewAction->statusTip());\n-    overviewAction->setCheckable(true);\n-    overviewAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_1));\n-    tabGroup->addAction(overviewAction);\n-\n-    sendCoinsAction = new QAction(QIcon(\":/icons/send\"), tr(\"&Send coins\"), this);\n-    sendCoinsAction->setStatusTip(tr(\"Send coins to a Bitcoin address\"));\n-    sendCoinsAction->setToolTip(sendCoinsAction->statusTip());\n-    sendCoinsAction->setCheckable(true);\n-    sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n-    tabGroup->addAction(sendCoinsAction);\n-\n-    receiveCoinsAction = new QAction(QIcon(\":/icons/receiving_addresses\"), tr(\"&Receive coins\"), this);\n-    receiveCoinsAction->setStatusTip(tr(\"Show the list of addresses for receiving payments\"));\n-    receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n-    receiveCoinsAction->setCheckable(true);\n-    receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n-    tabGroup->addAction(receiveCoinsAction);\n-\n-    historyAction = new QAction(QIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n-    historyAction->setStatusTip(tr(\"Browse transaction history\"));\n-    historyAction->setToolTip(historyAction->statusTip());\n-    historyAction->setCheckable(true);\n-    historyAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_4));\n-    tabGroup->addAction(historyAction);\n-\n-    addressBookAction = new QAction(QIcon(\":/icons/address-book\"), tr(\"&Address Book\"), this);\n-    addressBookAction->setStatusTip(tr(\"Edit the list of stored addresses and labels\"));\n-    addressBookAction->setToolTip(addressBookAction->statusTip());\n-    addressBookAction->setCheckable(true);\n-    addressBookAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_5));\n-    tabGroup->addAction(addressBookAction);\n-\n-    connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));\n-    connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n-    connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n-    connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n-    connect(addressBookAction, SIGNAL(triggered()), this, SLOT(gotoAddressBookPage()));\n-\n-    encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n-    encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n-    encryptWalletAction->setCheckable(true);\n-    backupWalletAction = new QAction(QIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n-    backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n-    changePassphraseAction = new QAction(QIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n-    changePassphraseAction->setStatusTip(tr(\"Change the passphrase used for wallet encryption\"));\n-    signMessageAction = new QAction(QIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n-    signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n-    verifyMessageAction = new QAction(QIcon(\":/icons/transaction_0\"), tr(\"&Verify message...\"), this);\n-    verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n-\n-    exportAction = new QAction(QIcon(\":/icons/export\"), tr(\"&Export...\"), this);\n-    exportAction->setStatusTip(tr(\"Export the data in the current tab to a file\"));\n-    exportAction->setToolTip(exportAction->statusTip());\n-\n-    connect(encryptWalletAction, SIGNAL(triggered(bool)), this, SLOT(encryptWallet(bool)));\n-    connect(backupWalletAction, SIGNAL(triggered()), this, SLOT(backupWallet()));\n-    connect(changePassphraseAction, SIGNAL(triggered()), this, SLOT(changePassphrase()));\n-    connect(signMessageAction, SIGNAL(triggered()), this, SLOT(gotoSignMessageTab()));\n-    connect(verifyMessageAction, SIGNAL(triggered()), this, SLOT(gotoVerifyMessageTab()));\n-}\n-\n void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n {\n     this->gui = gui;\n@@ -164,7 +82,7 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n void WalletView::setClientModel(ClientModel *clientModel)\n {\n     this->clientModel = clientModel;\n-    if(clientModel)\n+    if (clientModel)\n     {\n         overviewPage->setClientModel(clientModel);\n         addressBookPage->setOptionsModel(clientModel->getOptionsModel());\n@@ -175,7 +93,7 @@ void WalletView::setClientModel(ClientModel *clientModel)\n void WalletView::setWalletModel(WalletModel *walletModel)\n {\n     this->walletModel = walletModel;\n-    if(walletModel)\n+    if (walletModel)\n     {\n         // Receive and report messages from wallet thread\n         connect(walletModel, SIGNAL(message(QString,QString,unsigned int)), gui, SLOT(message(QString,QString,unsigned int)));\n@@ -222,52 +140,52 @@ void WalletView::incomingTransaction(const QModelIndex& parent, int start, int /\n \n void WalletView::gotoOverviewPage()\n {\n-    overviewAction->setChecked(true);\n+    gui->getOverviewAction()->setChecked(true);\n     setCurrentWidget(overviewPage);\n \n-    exportAction->setEnabled(false);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+    gui->getExportAction()->setEnabled(false);\n+    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n }\n \n void WalletView::gotoHistoryPage()\n {\n-    historyAction->setChecked(true);\n+    gui->getHistoryAction()->setChecked(true);\n     setCurrentWidget(transactionsPage);\n \n-    exportAction->setEnabled(true);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-    connect(exportAction, SIGNAL(triggered()), transactionView, SLOT(exportClicked()));\n+    gui->getExportAction()->setEnabled(true);\n+    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n+    connect(gui->getExportAction(), SIGNAL(triggered()), transactionView, SLOT(exportClicked()));\n }\n \n void WalletView::gotoAddressBookPage()\n {\n-    addressBookAction->setChecked(true);\n+    gui->getAddressBookAction()->setChecked(true);\n     setCurrentWidget(addressBookPage);\n \n-    exportAction->setEnabled(true);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-    connect(exportAction, SIGNAL(triggered()), addressBookPage, SLOT(exportClicked()));\n+    gui->getExportAction()->setEnabled(true);\n+    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n+    connect(gui->getExportAction(), SIGNAL(triggered()), addressBookPage, SLOT(exportClicked()));\n }\n \n void WalletView::gotoReceiveCoinsPage()\n {\n-    receiveCoinsAction->setChecked(true);\n+    gui->getReceiveCoinsAction()->setChecked(true);\n     setCurrentWidget(receiveCoinsPage);\n \n-    exportAction->setEnabled(true);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n-    connect(exportAction, SIGNAL(triggered()), receiveCoinsPage, SLOT(exportClicked()));\n+    gui->getExportAction()->setEnabled(true);\n+    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n+    connect(gui->getExportAction(), SIGNAL(triggered()), receiveCoinsPage, SLOT(exportClicked()));\n }\n \n void WalletView::gotoSendCoinsPage(QString addr)\n {\n-    sendCoinsAction->setChecked(true);\n+    gui->getSendCoinsAction()->setChecked(true);\n     setCurrentWidget(sendCoinsPage);\n \n-    exportAction->setEnabled(false);\n-    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+    gui->getExportAction()->setEnabled(false);\n+    disconnect(gui->getExportAction(), SIGNAL(triggered()), 0, 0);\n \n-    if(!addr.isEmpty())\n+    if (!addr.isEmpty())\n         sendCoinsPage->setAddress(addr);\n }\n \n@@ -276,7 +194,7 @@ void WalletView::gotoSignMessageTab(QString addr)\n     // call show() in showTab_SM()\n     signVerifyMessageDialog->showTab_SM(true);\n \n-    if(!addr.isEmpty())\n+    if (!addr.isEmpty())\n         signVerifyMessageDialog->setAddress_SM(addr);\n }\n \n@@ -285,7 +203,7 @@ void WalletView::gotoVerifyMessageTab(QString addr)\n     // call show() in showTab_VM()\n     signVerifyMessageDialog->showTab_VM(true);\n \n-    if(!addr.isEmpty())\n+    if (!addr.isEmpty())\n         signVerifyMessageDialog->setAddress_VM(addr);\n }\n \n@@ -327,8 +245,8 @@ void WalletView::backupWallet()\n {\n     QString saveDir = QDesktopServices::storageLocation(QDesktopServices::DocumentsLocation);\n     QString filename = QFileDialog::getSaveFileName(this, tr(\"Backup Wallet\"), saveDir, tr(\"Wallet Data (*.dat)\"));\n-    if(!filename.isEmpty()) {\n-        if(!walletModel->backupWallet(filename)) {\n+    if (!filename.isEmpty()) {\n+        if (!walletModel->backupWallet(filename)) {\n             gui->message(tr(\"Backup Failed\"), tr(\"There was an error trying to save the wallet data to the new location.\"),\n                       CClientUIInterface::MSG_ERROR);\n         }\n@@ -350,7 +268,7 @@ void WalletView::unlockWallet()\n     if(!walletModel)\n         return;\n     // Unlock wallet when requested by wallet model\n-    if(walletModel->getEncryptionStatus() == WalletModel::Locked)\n+    if (walletModel->getEncryptionStatus() == WalletModel::Locked)\n     {\n         AskPassphraseDialog dlg(AskPassphraseDialog::Unlock, this);\n         dlg.setModel(walletModel);"
      },
      {
        "sha": "6bcd70baf95953a338cf31e776aa08f3f65197ba",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 1,
        "deletions": 29,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8726de26ee0010eaf64d44d69cc9b8e09e580a37/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8726de26ee0010eaf64d44d69cc9b8e09e580a37/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=8726de26ee0010eaf64d44d69cc9b8e09e580a37",
        "patch": "@@ -10,15 +10,13 @@\n #include <QStackedWidget>\n \n class BitcoinGUI;\n-class TransactionTableModel;\n class ClientModel;\n class WalletModel;\n class TransactionView;\n class OverviewPage;\n class AddressBookPage;\n class SendCoinsDialog;\n class SignVerifyMessageDialog;\n-class Notificator;\n class RPCConsole;\n \n QT_BEGIN_NAMESPACE\n@@ -35,6 +33,7 @@ QT_END_NAMESPACE\n class WalletView : public QStackedWidget\n {\n     Q_OBJECT\n+\n public:\n     explicit WalletView(QWidget *parent, BitcoinGUI *_gui);\n     ~WalletView();\n@@ -66,35 +65,8 @@ class WalletView : public QStackedWidget\n     SendCoinsDialog *sendCoinsPage;\n     SignVerifyMessageDialog *signVerifyMessageDialog;\n \n-    QLabel *labelEncryptionIcon;\n-    QLabel *labelConnectionsIcon;\n-    QLabel *labelBlocksIcon;\n-    QLabel *progressBarLabel;\n-\n-    QAction *overviewAction;\n-    QAction *historyAction;\n-    QAction *quitAction;\n-    QAction *sendCoinsAction;\n-    QAction *addressBookAction;\n-    QAction *signMessageAction;\n-    QAction *verifyMessageAction;\n-    QAction *aboutAction;\n-    QAction *receiveCoinsAction;\n-    QAction *optionsAction;\n-    QAction *toggleHideAction;\n-    QAction *exportAction;\n-    QAction *encryptWalletAction;\n-    QAction *backupWalletAction;\n-    QAction *changePassphraseAction;\n-    QAction *aboutQtAction;\n-    QAction *openRPCConsoleAction;\n-\n     TransactionView *transactionView;\n \n-    /** Create the main UI actions. */\n-    void createActions();\n-    /** Create the menu bar and sub-menus. */\n-\n public slots:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();"
      }
    ]
  }
]