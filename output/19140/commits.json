[
  {
    "sha": "20d31bdd92cc2ad9b8d26ed80da73bbcd6016144",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGQzMWJkZDkyY2MyYWQ5YjhkMjZlZDgwZGE3M2JiY2Q2MDE2MTQ0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-02T09:34:12Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-02T11:53:08Z"
      },
      "message": "tests: Avoid fuzzer-specific nullptr dereference in libevent when handling PROXY requests",
      "tree": {
        "sha": "bfe7bf8ef272000e70023939074b86a0db74ecaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfe7bf8ef272000e70023939074b86a0db74ecaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20d31bdd92cc2ad9b8d26ed80da73bbcd6016144",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20d31bdd92cc2ad9b8d26ed80da73bbcd6016144",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20d31bdd92cc2ad9b8d26ed80da73bbcd6016144",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20d31bdd92cc2ad9b8d26ed80da73bbcd6016144/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e8bd217cd2a3437ce7c8fc7f04a61a3aee5268c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8bd217cd2a3437ce7c8fc7f04a61a3aee5268c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e8bd217cd2a3437ce7c8fc7f04a61a3aee5268c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "36d44e361ffaa3c8e310383e6301e9b926d15177",
        "filename": "src/test/fuzz/http_request.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20d31bdd92cc2ad9b8d26ed80da73bbcd6016144/src/test/fuzz/http_request.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20d31bdd92cc2ad9b8d26ed80da73bbcd6016144/src/test/fuzz/http_request.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/http_request.cpp?ref=20d31bdd92cc2ad9b8d26ed80da73bbcd6016144",
        "patch": "@@ -7,6 +7,7 @@\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n+#include <util/strencodings.h>\n \n #include <event2/buffer.h>\n #include <event2/event.h>\n@@ -48,7 +49,14 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     assert(evbuf != nullptr);\n     const std::vector<uint8_t> http_buffer = ConsumeRandomLengthByteVector(fuzzed_data_provider, 4096);\n     evbuffer_add(evbuf, http_buffer.data(), http_buffer.size());\n-    if (evhttp_parse_firstline_(evreq, evbuf) != 1 || evhttp_parse_headers_(evreq, evbuf) != 1) {\n+    // Avoid constructing requests that will be interpreted by libevent as PROXY requests to avoid triggering\n+    // a nullptr dereference. The dereference (req->evcon->http_server) takes place in evhttp_parse_request_line\n+    // and is a consequence of our hacky but necessary use of the internal function evhttp_parse_firstline_ in\n+    // this fuzzing harness. The workaround is not aesthetically pleasing, but it successfully avoids the troublesome\n+    // code path. \" http:// HTTP/1.1\\n\" was a crashing input prior to this workaround.\n+    const std::string http_buffer_str = ToLower({http_buffer.begin(), http_buffer.end()});\n+    if (http_buffer_str.find(\" http://\") != std::string::npos || http_buffer_str.find(\" https://\") != std::string::npos ||\n+        evhttp_parse_firstline_(evreq, evbuf) != 1 || evhttp_parse_headers_(evreq, evbuf) != 1) {\n         evbuffer_free(evbuf);\n         evhttp_request_free(evreq);\n         return;"
      }
    ]
  }
]