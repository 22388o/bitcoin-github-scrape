[
  {
    "sha": "657fc19d6535b33748dafcf63cc0248c6fa0ee7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTdmYzE5ZDY1MzViMzM3NDhkYWZjZjYzY2MwMjQ4YzZmYTBlZTdh",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-06-10T14:09:06Z"
      },
      "committer": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-06-10T14:09:06Z"
      },
      "message": "rename mapAddrCount to mapNetGroupNodes",
      "tree": {
        "sha": "197d5a6382ff6a69b608d17f00a09e8926c90689",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/197d5a6382ff6a69b608d17f00a09e8926c90689"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/657fc19d6535b33748dafcf63cc0248c6fa0ee7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/657fc19d6535b33748dafcf63cc0248c6fa0ee7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/657fc19d6535b33748dafcf63cc0248c6fa0ee7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/657fc19d6535b33748dafcf63cc0248c6fa0ee7a/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4cf8fe26440cae179aaca44ccadd476b464994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4cf8fe26440cae179aaca44ccadd476b464994",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4cf8fe26440cae179aaca44ccadd476b464994"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c29dc3032a3fd3fd727e7278f82a0dd7102bac64",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/657fc19d6535b33748dafcf63cc0248c6fa0ee7a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/657fc19d6535b33748dafcf63cc0248c6fa0ee7a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=657fc19d6535b33748dafcf63cc0248c6fa0ee7a",
        "patch": "@@ -911,11 +911,11 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     uint64_t naMostConnections;\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n-    std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapAddrCounts;\n+    std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapNetGroupNodes;\n     BOOST_FOREACH(const NodeEvictionCandidate &node, vEvictionCandidates) {\n-        mapAddrCounts[node.nKeyedNetGroup].push_back(node);\n-        int64_t grouptime = mapAddrCounts[node.nKeyedNetGroup][0].nTimeConnected;\n-        size_t groupsize = mapAddrCounts[node.nKeyedNetGroup].size();\n+        mapNetGroupNodes[node.nKeyedNetGroup].push_back(node);\n+        int64_t grouptime = mapNetGroupNodes[node.nKeyedNetGroup][0].nTimeConnected;\n+        size_t groupsize = mapNetGroupNodes[node.nKeyedNetGroup].size();\n \n         if (groupsize > nMostConnections || (groupsize == nMostConnections && grouptime > nMostConnectionsTime)) {\n             nMostConnections = groupsize;\n@@ -925,7 +925,7 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     }\n \n     // Reduce to the network group with the most connections\n-    vEvictionCandidates = std::move(mapAddrCounts[naMostConnections]);\n+    vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Do not disconnect peers if there is only one unprotected connection from their network group.\n     // This step excessively favors netgroup diversity, and should be removed once more protective criteria are established."
      }
    ]
  },
  {
    "sha": "695041e4952ea40e02e3b0431d04ca6af7ec9711",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTUwNDFlNDk1MmVhNDBlMDJlM2IwNDMxZDA0Y2E2YWY3ZWM5NzEx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-27T15:06:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-27T16:17:27Z"
      },
      "message": "util: Update tinyformat\n\nUpdates `tinyformat.h` to commit\nhttps://github.com/c42f/tinyformat/commit/3a33bbf65442432277eee079e83d3e8fac51730c upstream.\n\nMakes sure that our local changes are kept:\n\n- #3767 1b8fd35aadfad6a1e55391f02add6076c8c9ea8f Make tinyformat errors raise an exception instead of assert()ing\n- #4735 9b6d4c5cdc1ad7b12b8b7ba05125dad9ba2d396e Move strprintf define to tinyformat.h\n- #4748 6e5fd003e04b81115b6b164b21f048472d575535 include stdexcept (for std::exception)\n- #8000 9eaa0afa6ec5d3dd01e4d01121314ef51f2bc305 force USE_VARIADIC_TEMPLATES\n- Add `std::string format(const std::string &fmt...` added this\n  at the time, as we want to be able to do `strprintf(_(...), ...)`\n\nInspired by #8264.",
      "tree": {
        "sha": "ad3f767c21e723e14407fe5f54d1144c04689100",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad3f767c21e723e14407fe5f54d1144c04689100"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/695041e4952ea40e02e3b0431d04ca6af7ec9711",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/695041e4952ea40e02e3b0431d04ca6af7ec9711",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/695041e4952ea40e02e3b0431d04ca6af7ec9711",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/695041e4952ea40e02e3b0431d04ca6af7ec9711/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a06ebbf2d5f6ff57966c9ea9956cc1b666b3028",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a06ebbf2d5f6ff57966c9ea9956cc1b666b3028",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a06ebbf2d5f6ff57966c9ea9956cc1b666b3028"
      }
    ],
    "stats": {
      "total": 700,
      "additions": 368,
      "deletions": 332
    },
    "files": [
      {
        "sha": "17f0360c42f24f5dfcfd7c5d69a53b4bddb10454",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 368,
        "deletions": 332,
        "changes": 700,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/695041e4952ea40e02e3b0431d04ca6af7ec9711/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/695041e4952ea40e02e3b0431d04ca6af7ec9711/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=695041e4952ea40e02e3b0431d04ca6af7ec9711",
        "patch": "@@ -67,7 +67,9 @@\n //                                  weekday, month, day, hour, min);\n //   std::cout << date;\n //\n-// These are the three primary interface functions.\n+// These are the three primary interface functions.  There is also a\n+// convenience function printfln() which appends a newline to the usual result\n+// of printf() for super simple logging.\n //\n //\n // User defined format functions\n@@ -86,6 +88,18 @@\n // defined function bodies, use the macro TINYFORMAT_FOREACH_ARGNUM.  For an\n // example, see the implementation of printf() at the end of the source file.\n //\n+// Sometimes it's useful to be able to pass a list of format arguments through\n+// to a non-template function.  The FormatList class is provided as a way to do\n+// this by storing the argument list in a type-opaque way.  Continuing the\n+// example from above, we construct a FormatList using makeFormatList():\n+//\n+//   FormatListRef formatList = tfm::makeFormatList(weekday, month, day, hour, min);\n+//\n+// The format list can now be passed into any non-template function and used\n+// via a call to the vformat() function:\n+//\n+//   tfm::vformat(std::cout, \"%s, %s %d, %.2d:%.2d\\n\", formatList);\n+//\n //\n // Additional API information\n // --------------------------\n@@ -118,6 +132,7 @@ namespace tfm = tinyformat;\n \n //------------------------------------------------------------------------------\n // Implementation details.\n+#include <algorithm>\n #include <cassert>\n #include <iostream>\n #include <sstream>\n@@ -133,20 +148,20 @@ namespace tfm = tinyformat;\n #   endif\n #endif\n \n-#ifdef __GNUC__\n-#   define TINYFORMAT_NOINLINE __attribute__((noinline))\n-#elif defined(_MSC_VER)\n-#   define TINYFORMAT_NOINLINE __declspec(noinline)\n-#else\n-#   define TINYFORMAT_NOINLINE\n-#endif\n-\n #if defined(__GLIBCXX__) && __GLIBCXX__ < 20080201\n //  std::showpos is broken on old libstdc++ as provided with OSX.  See\n //  http://gcc.gnu.org/ml/libstdc++/2007-11/msg00075.html\n #   define TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n #endif\n \n+#ifdef __APPLE__\n+// Workaround OSX linker warning: xcode uses different default symbol\n+// visibilities for static libs vs executables (see issue #25)\n+#   define TINYFORMAT_HIDDEN __attribute__((visibility(\"hidden\")))\n+#else\n+#   define TINYFORMAT_HIDDEN\n+#endif\n+\n namespace tinyformat {\n \n //------------------------------------------------------------------------------\n@@ -247,6 +262,29 @@ struct convertToInt<T,true>\n     static int invoke(const T& value) { return static_cast<int>(value); }\n };\n \n+// Format at most ntrunc characters to the given stream.\n+template<typename T>\n+inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)\n+{\n+    std::ostringstream tmp;\n+    tmp << value;\n+    std::string result = tmp.str();\n+    out.write(result.c_str(), (std::min)(ntrunc, static_cast<int>(result.size())));\n+}\n+#define TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(type)       \\\n+inline void formatTruncated(std::ostream& out, type* value, int ntrunc) \\\n+{                                                           \\\n+    std::streamsize len = 0;                                \\\n+    while(len < ntrunc && value[len] != 0)                  \\\n+        ++len;                                              \\\n+    out.write(value, len);                                  \\\n+}\n+// Overload for const char* and char*.  Could overload for signed & unsigned\n+// char too, but these are technically unneeded for printf compatibility.\n+TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(const char)\n+TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(char)\n+#undef TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR\n+\n } // namespace detail\n \n \n@@ -255,18 +293,20 @@ struct convertToInt<T,true>\n // desired.\n \n \n-// Format a value into a stream. Called from format() for all types by default.\n-//\n-// Users may override this for their own types.  When this function is called,\n-// the stream flags will have been modified according to the format string.\n-// The format specification is provided in the range [fmtBegin, fmtEnd).\n-//\n-// By default, formatValue() uses the usual stream insertion operator\n-// operator<< to format the type T, with special cases for the %c and %p\n-// conversions.\n+/// Format a value into a stream, delegating to operator<< by default.\n+///\n+/// Users may override this for their own types.  When this function is called,\n+/// the stream flags will have been modified according to the format string.\n+/// The format specification is provided in the range [fmtBegin, fmtEnd).  For\n+/// truncating conversions, ntrunc is set to the desired maximum number of\n+/// characters, for example \"%.7s\" calls formatValue with ntrunc = 7.\n+///\n+/// By default, formatValue() uses the usual stream insertion operator\n+/// operator<< to format the type T, with special cases for the %c and %p\n+/// conversions.\n template<typename T>\n inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n-                        const char* fmtEnd, const T& value)\n+                        const char* fmtEnd, int ntrunc, const T& value)\n {\n #ifndef TINYFORMAT_ALLOW_WCHAR_STRINGS\n     // Since we don't support printing of wchar_t using \"%ls\", make it fail at\n@@ -288,6 +328,12 @@ inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n #ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n     else if(detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;\n #endif\n+    else if(ntrunc >= 0)\n+    {\n+        // Take care not to overread C strings in truncating conversions like\n+        // \"%.4s\" where at most 4 characters may be read.\n+        detail::formatTruncated(out, value, ntrunc);\n+    }\n     else\n         out << value;\n }\n@@ -296,7 +342,7 @@ inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n // Overloaded version for char types to support printing as an integer\n #define TINYFORMAT_DEFINE_FORMATVALUE_CHAR(charType)                  \\\n inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,  \\\n-                        const char* fmtEnd, charType value)           \\\n+                        const char* fmtEnd, int /**/, charType value) \\\n {                                                                     \\\n     switch(*(fmtEnd-1))                                               \\\n     {                                                                 \\\n@@ -435,225 +481,91 @@ cog.outl('#define TINYFORMAT_FOREACH_ARGNUM(m) \\\\\\n    ' +\n \n namespace detail {\n \n-// Class holding current position in format string and an output stream into\n-// which arguments are formatted.\n-class FormatIterator\n+// Type-opaque holder for an argument to format(), with associated actions on\n+// the type held as explicit function pointers.  This allows FormatArg's for\n+// each argument to be allocated as a homogenous array inside FormatList\n+// whereas a naive implementation based on inheritance does not.\n+class FormatArg\n {\n     public:\n-        // Flags for features not representable with standard stream state\n-        enum ExtraFormatFlags\n-        {\n-            Flag_None                = 0,\n-            Flag_TruncateToPrecision = 1<<0, // truncate length to stream precision()\n-            Flag_SpacePadPositive    = 1<<1, // pad positive values with spaces\n-            Flag_VariableWidth       = 1<<2, // variable field width in arg list\n-            Flag_VariablePrecision   = 1<<3  // variable field precision in arg list\n-        };\n-\n-        // out is the output stream, fmt is the full format string\n-        FormatIterator(std::ostream& out, const char* fmt)\n-            : m_out(out),\n-            m_fmt(fmt),\n-            m_extraFlags(Flag_None),\n-            m_wantWidth(false),\n-            m_wantPrecision(false),\n-            m_variableWidth(0),\n-            m_variablePrecision(0),\n-            m_origWidth(out.width()),\n-            m_origPrecision(out.precision()),\n-            m_origFlags(out.flags()),\n-            m_origFill(out.fill())\n+        FormatArg() {}\n+\n+        template<typename T>\n+        FormatArg(const T& value)\n+            : m_value(static_cast<const void*>(&value)),\n+            m_formatImpl(&formatImpl<T>),\n+            m_toIntImpl(&toIntImpl<T>)\n         { }\n \n-        // Print remaining part of format string.\n-        void finish()\n+        void format(std::ostream& out, const char* fmtBegin,\n+                    const char* fmtEnd, int ntrunc) const\n         {\n-            // It would be nice if we could do this from the destructor, but we\n-            // can't if TINFORMAT_ERROR is used to throw an exception!\n-            m_fmt = printFormatStringLiteral(m_out, m_fmt);\n-            if(*m_fmt != '\\0')\n-                TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n+            m_formatImpl(out, fmtBegin, fmtEnd, ntrunc, m_value);\n         }\n \n-        ~FormatIterator()\n+        int toInt() const\n         {\n-            // Restore stream state\n-            m_out.width(m_origWidth);\n-            m_out.precision(m_origPrecision);\n-            m_out.flags(m_origFlags);\n-            m_out.fill(m_origFill);\n+            return m_toIntImpl(m_value);\n         }\n \n-        template<typename T>\n-        void accept(const T& value);\n-\n     private:\n-        // Parse and return an integer from the string c, as atoi()\n-        // On return, c is set to one past the end of the integer.\n-        static int parseIntAndAdvance(const char*& c)\n+        template<typename T>\n+        TINYFORMAT_HIDDEN static void formatImpl(std::ostream& out, const char* fmtBegin,\n+                        const char* fmtEnd, int ntrunc, const void* value)\n         {\n-            int i = 0;\n-            for(;*c >= '0' && *c <= '9'; ++c)\n-                i = 10*i + (*c - '0');\n-            return i;\n+            formatValue(out, fmtBegin, fmtEnd, ntrunc, *static_cast<const T*>(value));\n         }\n \n-        // Format at most truncLen characters of a C string to the given\n-        // stream.  Return true if formatting proceeded (generic version always\n-        // returns false)\n         template<typename T>\n-        static bool formatCStringTruncate(std::ostream& /*out*/, const T& /*value*/,\n-                                        std::streamsize /*truncLen*/)\n+        TINYFORMAT_HIDDEN static int toIntImpl(const void* value)\n         {\n-            return false;\n-        }\n-#       define TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE(type)            \\\n-        static bool formatCStringTruncate(std::ostream& out, type* value,  \\\n-                                        std::streamsize truncLen)          \\\n-        {                                                                  \\\n-            std::streamsize len = 0;                                       \\\n-            while(len < truncLen && value[len] != 0)                       \\\n-                ++len;                                                     \\\n-            out.write(value, len);                                         \\\n-            return true;                                                   \\\n-        }\n-        // Overload for const char* and char*.  Could overload for signed &\n-        // unsigned char too, but these are technically unneeded for printf\n-        // compatibility.\n-        TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE(const char)\n-        TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE(char)\n-#       undef TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE\n-\n-        // Print literal part of format string and return next format spec\n-        // position.\n-        //\n-        // Skips over any occurrences of '%%', printing a literal '%' to the\n-        // output.  The position of the first % character of the next\n-        // nontrivial format spec is returned, or the end of string.\n-        static const char* printFormatStringLiteral(std::ostream& out,\n-                                                    const char* fmt)\n-        {\n-            const char* c = fmt;\n-            for(; true; ++c)\n-            {\n-                switch(*c)\n-                {\n-                    case '\\0':\n-                        out.write(fmt, static_cast<std::streamsize>(c - fmt));\n-                        return c;\n-                    case '%':\n-                        out.write(fmt, static_cast<std::streamsize>(c - fmt));\n-                        if(*(c+1) != '%')\n-                            return c;\n-                        // for \"%%\", tack trailing % onto next literal section.\n-                        fmt = ++c;\n-                        break;\n-                }\n-            }\n+            return convertToInt<T>::invoke(*static_cast<const T*>(value));\n         }\n \n-        static const char* streamStateFromFormat(std::ostream& out,\n-                                                 unsigned int& extraFlags,\n-                                                 const char* fmtStart,\n-                                                 int variableWidth,\n-                                                 int variablePrecision);\n-\n-        // Private copy & assign: Kill gcc warnings with -Weffc++\n-        FormatIterator(const FormatIterator&);\n-        FormatIterator& operator=(const FormatIterator&);\n-\n-        // Stream, current format string & state\n-        std::ostream& m_out;\n-        const char* m_fmt;\n-        unsigned int m_extraFlags;\n-        // State machine info for handling of variable width & precision\n-        bool m_wantWidth;\n-        bool m_wantPrecision;\n-        int m_variableWidth;\n-        int m_variablePrecision;\n-        // Saved stream state\n-        std::streamsize m_origWidth;\n-        std::streamsize m_origPrecision;\n-        std::ios::fmtflags m_origFlags;\n-        char m_origFill;\n+        const void* m_value;\n+        void (*m_formatImpl)(std::ostream& out, const char* fmtBegin,\n+                             const char* fmtEnd, int ntrunc, const void* value);\n+        int (*m_toIntImpl)(const void* value);\n };\n \n \n-// Accept a value for formatting into the internal stream.\n-template<typename T>\n-TINYFORMAT_NOINLINE  // < greatly reduces bloat in optimized builds\n-void FormatIterator::accept(const T& value)\n+// Parse and return an integer from the string c, as atoi()\n+// On return, c is set to one past the end of the integer.\n+inline int parseIntAndAdvance(const char*& c)\n {\n-    // Parse the format string\n-    const char* fmtEnd = 0;\n-    if(m_extraFlags == Flag_None && !m_wantWidth && !m_wantPrecision)\n-    {\n-        m_fmt = printFormatStringLiteral(m_out, m_fmt);\n-        fmtEnd = streamStateFromFormat(m_out, m_extraFlags, m_fmt, 0, 0);\n-        m_wantWidth     = (m_extraFlags & Flag_VariableWidth) != 0;\n-        m_wantPrecision = (m_extraFlags & Flag_VariablePrecision) != 0;\n-    }\n-    // Consume value as variable width and precision specifier if necessary\n-    if(m_extraFlags & (Flag_VariableWidth | Flag_VariablePrecision))\n-    {\n-        if(m_wantWidth || m_wantPrecision)\n-        {\n-            int v = convertToInt<T>::invoke(value);\n-            if(m_wantWidth)\n-            {\n-                m_variableWidth = v;\n-                m_wantWidth = false;\n-            }\n-            else if(m_wantPrecision)\n-            {\n-                m_variablePrecision = v;\n-                m_wantPrecision = false;\n-            }\n-            return;\n-        }\n-        // If we get here, we've set both the variable precision and width as\n-        // required and we need to rerun the stream state setup to insert these.\n-        fmtEnd = streamStateFromFormat(m_out, m_extraFlags, m_fmt,\n-                                       m_variableWidth, m_variablePrecision);\n-    }\n+    int i = 0;\n+    for(;*c >= '0' && *c <= '9'; ++c)\n+        i = 10*i + (*c - '0');\n+    return i;\n+}\n \n-    // Format the value into the stream.\n-    if(!(m_extraFlags & (Flag_SpacePadPositive | Flag_TruncateToPrecision)))\n-        formatValue(m_out, m_fmt, fmtEnd, value);\n-    else\n+// Print literal part of format string and return next format spec\n+// position.\n+//\n+// Skips over any occurrences of '%%', printing a literal '%' to the\n+// output.  The position of the first % character of the next\n+// nontrivial format spec is returned, or the end of string.\n+inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)\n+{\n+    const char* c = fmt;\n+    for(;; ++c)\n     {\n-        // The following are special cases where there's no direct\n-        // correspondence between stream formatting and the printf() behaviour.\n-        // Instead, we simulate the behaviour crudely by formatting into a\n-        // temporary string stream and munging the resulting string.\n-        std::ostringstream tmpStream;\n-        tmpStream.copyfmt(m_out);\n-        if(m_extraFlags & Flag_SpacePadPositive)\n-            tmpStream.setf(std::ios::showpos);\n-        // formatCStringTruncate is required for truncating conversions like\n-        // \"%.4s\" where at most 4 characters of the c-string should be read.\n-        // If we didn't include this special case, we might read off the end.\n-        if(!( (m_extraFlags & Flag_TruncateToPrecision) &&\n-             formatCStringTruncate(tmpStream, value, m_out.precision()) ))\n-        {\n-            // Not a truncated c-string; just format normally.\n-            formatValue(tmpStream, m_fmt, fmtEnd, value);\n-        }\n-        std::string result = tmpStream.str(); // allocates... yuck.\n-        if(m_extraFlags & Flag_SpacePadPositive)\n+        switch(*c)\n         {\n-            for(size_t i = 0, iend = result.size(); i < iend; ++i)\n-                if(result[i] == '+')\n-                    result[i] = ' ';\n+            case '\\0':\n+                out.write(fmt, c - fmt);\n+                return c;\n+            case '%':\n+                out.write(fmt, c - fmt);\n+                if(*(c+1) != '%')\n+                    return c;\n+                // for \"%%\", tack trailing % onto next literal section.\n+                fmt = ++c;\n+                break;\n+            default:\n+                break;\n         }\n-        if((m_extraFlags & Flag_TruncateToPrecision) &&\n-           (int)result.size() > (int)m_out.precision())\n-            m_out.write(result.c_str(), m_out.precision());\n-        else\n-            m_out << result;\n     }\n-    m_extraFlags = Flag_None;\n-    m_fmt = fmtEnd;\n }\n \n \n@@ -663,13 +575,14 @@ void FormatIterator::accept(const T& value)\n // with the form \"%[flags][width][.precision][length]type\".\n //\n // Formatting options which can't be natively represented using the ostream\n-// state are returned in the extraFlags parameter which is a bitwise\n-// combination of values from the ExtraFormatFlags enum.\n-inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n-                                                         unsigned int& extraFlags,\n-                                                         const char* fmtStart,\n-                                                         int variableWidth,\n-                                                         int variablePrecision)\n+// state are returned in spacePadPositive (for space padded positive numbers)\n+// and ntrunc (for truncating conversions).  argIndex is incremented if\n+// necessary to pull out variable width and precision .  The function returns a\n+// pointer to the character after the end of the current format spec.\n+inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,\n+                                         int& ntrunc, const char* fmtStart,\n+                                         const detail::FormatArg* formatters,\n+                                         int& argIndex, int numFormatters)\n {\n     if(*fmtStart != '%')\n     {\n@@ -684,9 +597,9 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n     out.unsetf(std::ios::adjustfield | std::ios::basefield |\n                std::ios::floatfield | std::ios::showbase | std::ios::boolalpha |\n                std::ios::showpoint | std::ios::showpos | std::ios::uppercase);\n-    extraFlags = Flag_None;\n     bool precisionSet = false;\n     bool widthSet = false;\n+    int widthExtra = 0;\n     const char* c = fmtStart + 1;\n     // 1) Parse flags\n     for(;; ++c)\n@@ -713,12 +626,15 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n             case ' ':\n                 // overridden by show positive sign, '+' flag.\n                 if(!(out.flags() & std::ios::showpos))\n-                    extraFlags |= Flag_SpacePadPositive;\n+                    spacePadPositive = true;\n                 continue;\n             case '+':\n                 out.setf(std::ios::showpos);\n-                extraFlags &= ~Flag_SpacePadPositive;\n+                spacePadPositive = false;\n+                widthExtra = 1;\n                 continue;\n+            default:\n+                break;\n         }\n         break;\n     }\n@@ -731,15 +647,19 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n     if(*c == '*')\n     {\n         widthSet = true;\n-        if(variableWidth < 0)\n+        int width = 0;\n+        if(argIndex < numFormatters)\n+            width = formatters[argIndex++].toInt();\n+        else\n+            TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable width\");\n+        if(width < 0)\n         {\n             // negative widths correspond to '-' flag set\n             out.fill(' ');\n             out.setf(std::ios::left, std::ios::adjustfield);\n-            variableWidth = -variableWidth;\n+            width = -width;\n         }\n-        out.width(variableWidth);\n-        extraFlags |= Flag_VariableWidth;\n+        out.width(width);\n         ++c;\n     }\n     // 3) Parse precision\n@@ -750,8 +670,10 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n         if(*c == '*')\n         {\n             ++c;\n-            extraFlags |= Flag_VariablePrecision;\n-            precision = variablePrecision;\n+            if(argIndex < numFormatters)\n+                precision = formatters[argIndex++].toInt();\n+            else\n+                TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable precision\");\n         }\n         else\n         {\n@@ -814,7 +736,7 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n             break;\n         case 's':\n             if(precisionSet)\n-                extraFlags |= Flag_TruncateToPrecision;\n+                ntrunc = static_cast<int>(out.precision());\n             // Make %s print booleans as \"true\" and \"false\"\n             out.setf(std::ios::boolalpha);\n             break;\n@@ -826,185 +748,299 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n             TINYFORMAT_ERROR(\"tinyformat: Conversion spec incorrectly \"\n                              \"terminated by end of string\");\n             return c;\n+        default:\n+            break;\n     }\n     if(intConversion && precisionSet && !widthSet)\n     {\n         // \"precision\" for integers gives the minimum number of digits (to be\n         // padded with zeros on the left).  This isn't really supported by the\n         // iostreams, but we can approximately simulate it with the width if\n         // the width isn't otherwise used.\n-        out.width(out.precision());\n+        out.width(out.precision() + widthExtra);\n         out.setf(std::ios::internal, std::ios::adjustfield);\n         out.fill('0');\n     }\n     return c+1;\n }\n \n \n-\n //------------------------------------------------------------------------------\n-// Private format function on top of which the public interface is implemented.\n-// We enforce a mimimum of one value to be formatted to prevent bugs looking like\n-//\n-//   const char* myStr = \"100% broken\";\n-//   printf(myStr);   // Parses % as a format specifier\n-#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n-\n-template<typename T1>\n-void format(FormatIterator& fmtIter, const T1& value1)\n+inline void formatImpl(std::ostream& out, const char* fmt,\n+                       const detail::FormatArg* formatters,\n+                       int numFormatters)\n {\n-    fmtIter.accept(value1);\n-    fmtIter.finish();\n+    // Saved stream state\n+    std::streamsize origWidth = out.width();\n+    std::streamsize origPrecision = out.precision();\n+    std::ios::fmtflags origFlags = out.flags();\n+    char origFill = out.fill();\n+\n+    for (int argIndex = 0; argIndex < numFormatters; ++argIndex)\n+    {\n+        // Parse the format string\n+        fmt = printFormatStringLiteral(out, fmt);\n+        bool spacePadPositive = false;\n+        int ntrunc = -1;\n+        const char* fmtEnd = streamStateFromFormat(out, spacePadPositive, ntrunc, fmt,\n+                                                   formatters, argIndex, numFormatters);\n+        if (argIndex >= numFormatters)\n+        {\n+            // Check args remain after reading any variable width/precision\n+            TINYFORMAT_ERROR(\"tinyformat: Not enough format arguments\");\n+            return;\n+        }\n+        const FormatArg& arg = formatters[argIndex];\n+        // Format the arg into the stream.\n+        if(!spacePadPositive)\n+            arg.format(out, fmt, fmtEnd, ntrunc);\n+        else\n+        {\n+            // The following is a special case with no direct correspondence\n+            // between stream formatting and the printf() behaviour.  Simulate\n+            // it crudely by formatting into a temporary string stream and\n+            // munging the resulting string.\n+            std::ostringstream tmpStream;\n+            tmpStream.copyfmt(out);\n+            tmpStream.setf(std::ios::showpos);\n+            arg.format(tmpStream, fmt, fmtEnd, ntrunc);\n+            std::string result = tmpStream.str(); // allocates... yuck.\n+            for(size_t i = 0, iend = result.size(); i < iend; ++i)\n+                if(result[i] == '+') result[i] = ' ';\n+            out << result;\n+        }\n+        fmt = fmtEnd;\n+    }\n+\n+    // Print remaining part of format string.\n+    fmt = printFormatStringLiteral(out, fmt);\n+    if(*fmt != '\\0')\n+        TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n+\n+    // Restore stream state\n+    out.width(origWidth);\n+    out.precision(origPrecision);\n+    out.flags(origFlags);\n+    out.fill(origFill);\n }\n \n-// General version for C++11\n-template<typename T1, typename... Args>\n-void format(FormatIterator& fmtIter, const T1& value1, const Args&... args)\n+} // namespace detail\n+\n+\n+/// List of template arguments format(), held in a type-opaque way.\n+///\n+/// A const reference to FormatList (typedef'd as FormatListRef) may be\n+/// conveniently used to pass arguments to non-template functions: All type\n+/// information has been stripped from the arguments, leaving just enough of a\n+/// common interface to perform formatting as required.\n+class FormatList\n {\n-    fmtIter.accept(value1);\n-    format(fmtIter, args...);\n-}\n+    public:\n+        FormatList(detail::FormatArg* formatters, int N)\n+            : m_formatters(formatters), m_N(N) { }\n \n-#else\n+        friend void vformat(std::ostream& out, const char* fmt,\n+                            const FormatList& list);\n \n-inline void format(FormatIterator& fmtIter)\n+    private:\n+        const detail::FormatArg* m_formatters;\n+        int m_N;\n+};\n+\n+/// Reference to type-opaque format list for passing to vformat()\n+typedef const FormatList& FormatListRef;\n+\n+\n+namespace detail {\n+\n+// Format list subclass with fixed storage to avoid dynamic allocation\n+template<int N>\n+class FormatListN : public FormatList\n {\n-    fmtIter.finish();\n-}\n+    public:\n+#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n+        template<typename... Args>\n+        FormatListN(const Args&... args)\n+            : FormatList(&m_formatterStore[0], N),\n+            m_formatterStore { FormatArg(args)... }\n+        { static_assert(sizeof...(args) == N, \"Number of args must be N\"); }\n+#else // C++98 version\n+        void init(int) {}\n+#       define TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR(n)       \\\n+                                                               \\\n+        template<TINYFORMAT_ARGTYPES(n)>                       \\\n+        FormatListN(TINYFORMAT_VARARGS(n))                     \\\n+            : FormatList(&m_formatterStore[0], n)              \\\n+        { assert(n == N); init(0, TINYFORMAT_PASSARGS(n)); }   \\\n+                                                               \\\n+        template<TINYFORMAT_ARGTYPES(n)>                       \\\n+        void init(int i, TINYFORMAT_VARARGS(n))                \\\n+        {                                                      \\\n+            m_formatterStore[i] = FormatArg(v1);               \\\n+            init(i+1 TINYFORMAT_PASSARGS_TAIL(n));             \\\n+        }\n \n-// General version for C++98\n-#define TINYFORMAT_MAKE_FORMAT_DETAIL(n)                                  \\\n-template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-void format(detail::FormatIterator& fmtIter, TINYFORMAT_VARARGS(n))       \\\n-{                                                                         \\\n-    fmtIter.accept(v1);                                                   \\\n-    format(fmtIter TINYFORMAT_PASSARGS_TAIL(n));                          \\\n-}\n+        TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR)\n+#       undef TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR\n+#endif\n \n-TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMAT_DETAIL)\n-#undef TINYFORMAT_MAKE_FORMAT_DETAIL\n+    private:\n+        FormatArg m_formatterStore[N];\n+};\n \n-#endif // End C++98 variadic template emulation for format()\n+// Special 0-arg version - MSVC says zero-sized C array in struct is nonstandard\n+template<> class FormatListN<0> : public FormatList\n+{\n+    public: FormatListN() : FormatList(0, 0) {}\n+};\n \n } // namespace detail\n \n \n //------------------------------------------------------------------------------\n-// Implement all the main interface functions here in terms of detail::format()\n+// Primary API functions\n \n #ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n \n-// C++11 - the simple case\n-template<typename T1, typename... Args>\n-void format(std::ostream& out, const char* fmt, const T1& v1, const Args&... args)\n+/// Make type-agnostic format list from list of template arguments.\n+///\n+/// The exact return type of this function is an implementation detail and\n+/// shouldn't be relied upon.  Instead it should be stored as a FormatListRef:\n+///\n+///   FormatListRef formatList = makeFormatList( /*...*/ );\n+template<typename... Args>\n+detail::FormatListN<sizeof...(Args)> makeFormatList(const Args&... args)\n {\n-    detail::FormatIterator fmtIter(out, fmt);\n-    format(fmtIter, v1, args...);\n+    return detail::FormatListN<sizeof...(args)>(args...);\n }\n \n-template<typename T1, typename... Args>\n-std::string format(const char* fmt, const T1& v1, const Args&... args)\n+#else // C++98 version\n+\n+inline detail::FormatListN<0> makeFormatList()\n+{\n+    return detail::FormatListN<0>();\n+}\n+#define TINYFORMAT_MAKE_MAKEFORMATLIST(n)                     \\\n+template<TINYFORMAT_ARGTYPES(n)>                              \\\n+detail::FormatListN<n> makeFormatList(TINYFORMAT_VARARGS(n))  \\\n+{                                                             \\\n+    return detail::FormatListN<n>(TINYFORMAT_PASSARGS(n));    \\\n+}\n+TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_MAKEFORMATLIST)\n+#undef TINYFORMAT_MAKE_MAKEFORMATLIST\n+\n+#endif\n+\n+/// Format list of arguments to the stream according to the given format string.\n+///\n+/// The name vformat() is chosen for the semantic similarity to vprintf(): the\n+/// list of format arguments is held in a single function argument.\n+inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)\n+{\n+    detail::formatImpl(out, fmt, list.m_formatters, list.m_N);\n+}\n+\n+\n+#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n+\n+/// Format list of arguments to the stream according to given format string.\n+template<typename... Args>\n+void format(std::ostream& out, const char* fmt, const Args&... args)\n+{\n+    vformat(out, fmt, makeFormatList(args...));\n+}\n+\n+/// Format list of arguments according to the given format string and return\n+/// the result as a string.\n+template<typename... Args>\n+std::string format(const char* fmt, const Args&... args)\n {\n     std::ostringstream oss;\n-    format(oss, fmt, v1, args...);\n+    format(oss, fmt, args...);\n     return oss.str();\n }\n \n-template<typename T1, typename... Args>\n-std::string format(const std::string &fmt, const T1& v1, const Args&... args)\n+/// Format list of arguments to std::cout, according to the given format string\n+template<typename... Args>\n+void printf(const char* fmt, const Args&... args)\n+{\n+    format(std::cout, fmt, args...);\n+}\n+\n+template<typename... Args>\n+void printfln(const char* fmt, const Args&... args)\n+{\n+    format(std::cout, fmt, args...);\n+    std::cout << '\\n';\n+}\n+\n+#else // C++98 version\n+\n+inline void format(std::ostream& out, const char* fmt)\n+{\n+    vformat(out, fmt, makeFormatList());\n+}\n+\n+inline std::string format(const char* fmt)\n {\n     std::ostringstream oss;\n-    format(oss, fmt.c_str(), v1, args...);\n+    format(oss, fmt);\n     return oss.str();\n }\n \n-template<typename T1, typename... Args>\n-void printf(const char* fmt, const T1& v1, const Args&... args)\n+inline void printf(const char* fmt)\n {\n-    format(std::cout, fmt, v1, args...);\n+    format(std::cout, fmt);\n }\n \n-#else\n+inline void printfln(const char* fmt)\n+{\n+    format(std::cout, fmt);\n+    std::cout << '\\n';\n+}\n \n-// C++98 - define the interface functions using the wrapping macros\n #define TINYFORMAT_MAKE_FORMAT_FUNCS(n)                                   \\\n                                                                           \\\n template<TINYFORMAT_ARGTYPES(n)>                                          \\\n void format(std::ostream& out, const char* fmt, TINYFORMAT_VARARGS(n))    \\\n {                                                                         \\\n-    tinyformat::detail::FormatIterator fmtIter(out, fmt);                 \\\n-    tinyformat::detail::format(fmtIter, TINYFORMAT_PASSARGS(n));          \\\n+    vformat(out, fmt, makeFormatList(TINYFORMAT_PASSARGS(n)));            \\\n }                                                                         \\\n                                                                           \\\n template<TINYFORMAT_ARGTYPES(n)>                                          \\\n std::string format(const char* fmt, TINYFORMAT_VARARGS(n))                \\\n {                                                                         \\\n     std::ostringstream oss;                                               \\\n-    tinyformat::format(oss, fmt, TINYFORMAT_PASSARGS(n));                 \\\n+    format(oss, fmt, TINYFORMAT_PASSARGS(n));                             \\\n     return oss.str();                                                     \\\n }                                                                         \\\n                                                                           \\\n template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-std::string format(const std::string &fmt, TINYFORMAT_VARARGS(n))         \\\n+void printf(const char* fmt, TINYFORMAT_VARARGS(n))                       \\\n {                                                                         \\\n-    std::ostringstream oss;                                               \\\n-    tinyformat::format(oss, fmt.c_str(), TINYFORMAT_PASSARGS(n));         \\\n-    return oss.str();                                                     \\\n+    format(std::cout, fmt, TINYFORMAT_PASSARGS(n));                       \\\n }                                                                         \\\n                                                                           \\\n template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-void printf(const char* fmt, TINYFORMAT_VARARGS(n))                       \\\n+void printfln(const char* fmt, TINYFORMAT_VARARGS(n))                     \\\n {                                                                         \\\n-    tinyformat::format(std::cout, fmt, TINYFORMAT_PASSARGS(n));           \\\n+    format(std::cout, fmt, TINYFORMAT_PASSARGS(n));                       \\\n+    std::cout << '\\n';                                                    \\\n }\n \n TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMAT_FUNCS)\n #undef TINYFORMAT_MAKE_FORMAT_FUNCS\n-#endif\n-\n \n-//------------------------------------------------------------------------------\n-// Define deprecated wrapping macro for backward compatibility in tinyformat\n-// 1.x.  Will be removed in version 2!\n-#define TINYFORMAT_WRAP_FORMAT_EXTRA_ARGS\n-#define TINYFORMAT_WRAP_FORMAT_N(n, returnType, funcName, funcDeclSuffix,  \\\n-                                 bodyPrefix, streamName, bodySuffix)       \\\n-template<TINYFORMAT_ARGTYPES(n)>                                           \\\n-returnType funcName(TINYFORMAT_WRAP_FORMAT_EXTRA_ARGS const char* fmt,     \\\n-                    TINYFORMAT_VARARGS(n)) funcDeclSuffix                  \\\n-{                                                                          \\\n-    bodyPrefix                                                             \\\n-    tinyformat::format(streamName, fmt, TINYFORMAT_PASSARGS(n));           \\\n-    bodySuffix                                                             \\\n-}                                                                          \\\n-\n-#define TINYFORMAT_WRAP_FORMAT(returnType, funcName, funcDeclSuffix,       \\\n-                               bodyPrefix, streamName, bodySuffix)         \\\n-inline                                                                     \\\n-returnType funcName(TINYFORMAT_WRAP_FORMAT_EXTRA_ARGS const char* fmt      \\\n-                    ) funcDeclSuffix                                       \\\n-{                                                                          \\\n-    bodyPrefix                                                             \\\n-    tinyformat::detail::FormatIterator(streamName, fmt).finish();          \\\n-    bodySuffix                                                             \\\n-}                                                                          \\\n-TINYFORMAT_WRAP_FORMAT_N(1 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(2 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(3 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(4 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(5 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(6 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(7 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(8 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(9 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(10, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(11, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(12, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(13, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(14, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(15, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(16, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n+#endif\n \n+// Added for Bitcoin Core\n+template<typename... Args>\n+std::string format(const std::string &fmt, const Args&... args)\n+{\n+    std::ostringstream oss;\n+    format(oss, fmt.c_str(), args...);\n+    return oss.str();\n+}\n \n } // namespace tinyformat\n "
      }
    ]
  },
  {
    "sha": "a5072a773071b8f4b644f84a77643e2ad18dba3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTA3MmE3NzMwNzFiOGY0YjY0NGY4NGE3NzY0M2UyYWQxOGRiYTNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-27T16:39:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-27T16:39:25Z"
      },
      "message": "util: Remove zero-argument versions of LogPrint and error\n\nChanges in tinyformat, recently imported from upstream have made the\nzero-argument versions of formatting functions unnecessary. Remove them.\n\nThis is a slight semantic change: `%` characters in the zero-argument\ncall are now regarded and need to be escaped. As for as I know, the only\nuse of this is in `main.cpp`.",
      "tree": {
        "sha": "436173f8092d054d7b26cb53eea3fe19f8c0e659",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/436173f8092d054d7b26cb53eea3fe19f8c0e659"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5072a773071b8f4b644f84a77643e2ad18dba3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5072a773071b8f4b644f84a77643e2ad18dba3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5072a773071b8f4b644f84a77643e2ad18dba3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5072a773071b8f4b644f84a77643e2ad18dba3a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "695041e4952ea40e02e3b0431d04ca6af7ec9711",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/695041e4952ea40e02e3b0431d04ca6af7ec9711",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/695041e4952ea40e02e3b0431d04ca6af7ec9711"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 7,
      "deletions": 23
    },
    "files": [
      {
        "sha": "bb65fc0de3eb88068b2285eef593998f6075a6cb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5072a773071b8f4b644f84a77643e2ad18dba3a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5072a773071b8f4b644f84a77643e2ad18dba3a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a5072a773071b8f4b644f84a77643e2ad18dba3a",
        "patch": "@@ -4159,7 +4159,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     int nGoodTransactions = 0;\n     CValidationState state;\n     int reportDone = 0;\n-    LogPrintf(\"[0%]...\");\n+    LogPrintf(\"[0%%]...\");\n     for (CBlockIndex* pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev)\n     {\n         boost::this_thread::interruption_point();"
      },
      {
        "sha": "39328b51ef154c38df64dd7266e9c28039f34f1a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 22,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5072a773071b8f4b644f84a77643e2ad18dba3a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5072a773071b8f4b644f84a77643e2ad18dba3a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=a5072a773071b8f4b644f84a77643e2ad18dba3a",
        "patch": "@@ -77,33 +77,17 @@ int LogPrintStr(const std::string &str);\n \n #define LogPrintf(...) LogPrint(NULL, __VA_ARGS__)\n \n-template<typename T1, typename... Args>\n-static inline int LogPrint(const char* category, const char* fmt, const T1& v1, const Args&... args)\n+template<typename... Args>\n+static inline int LogPrint(const char* category, const char* fmt, const Args&... args)\n {\n     if(!LogAcceptCategory(category)) return 0;                            \\\n-    return LogPrintStr(tfm::format(fmt, v1, args...));\n+    return LogPrintStr(tfm::format(fmt, args...));\n }\n \n-template<typename T1, typename... Args>\n-bool error(const char* fmt, const T1& v1, const Args&... args)\n+template<typename... Args>\n+bool error(const char* fmt, const Args&... args)\n {\n-    LogPrintStr(\"ERROR: \" + tfm::format(fmt, v1, args...) + \"\\n\");\n-    return false;\n-}\n-\n-/**\n- * Zero-arg versions of logging and error, these are not covered by\n- * the variadic templates above (and don't take format arguments but\n- * bare strings).\n- */\n-static inline int LogPrint(const char* category, const char* s)\n-{\n-    if(!LogAcceptCategory(category)) return 0;\n-    return LogPrintStr(s);\n-}\n-static inline bool error(const char* s)\n-{\n-    LogPrintStr(std::string(\"ERROR: \") + s + \"\\n\");\n+    LogPrintStr(\"ERROR: \" + tfm::format(fmt, args...) + \"\\n\");\n     return false;\n }\n "
      }
    ]
  },
  {
    "sha": "e37b16a75c1ff86d515ef3050d2c76432ea71225",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzdiMTZhNzVjMWZmODZkNTE1ZWYzMDUwZDJjNzY0MzJlYTcxMjI1",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "dcousens@users.noreply.github.com",
        "date": "2016-07-12T03:27:09Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2016-07-14T03:40:50Z"
      },
      "message": "transaction: clarify witness branches",
      "tree": {
        "sha": "2baa46a5430492708ebc675072023e231429b3c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2baa46a5430492708ebc675072023e231429b3c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e37b16a75c1ff86d515ef3050d2c76432ea71225",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e37b16a75c1ff86d515ef3050d2c76432ea71225",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e37b16a75c1ff86d515ef3050d2c76432ea71225",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e37b16a75c1ff86d515ef3050d2c76432ea71225/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4831a16223dbb42da3091e616c47eeb01f53f73b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4831a16223dbb42da3091e616c47eeb01f53f73b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4831a16223dbb42da3091e616c47eeb01f53f73b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "18402ac4536e672386ccc1ca8cc07730f20bd4b5",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e37b16a75c1ff86d515ef3050d2c76432ea71225/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e37b16a75c1ff86d515ef3050d2c76432ea71225/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=e37b16a75c1ff86d515ef3050d2c76432ea71225",
        "patch": "@@ -290,6 +290,8 @@ struct CMutableTransaction;\n  */\n template<typename Stream, typename Operation, typename TxType>\n inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    const bool fAllowWitness = !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS);\n+\n     READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n     unsigned char flags = 0;\n     if (ser_action.ForRead()) {\n@@ -298,7 +300,7 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n         const_cast<CTxWitness*>(&tx.wit)->SetNull();\n         /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n         READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-        if (tx.vin.size() == 0 && !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n+        if (tx.vin.size() == 0 && fAllowWitness) {\n             /* We read a dummy or an empty vin. */\n             READWRITE(flags);\n             if (flags != 0) {\n@@ -309,7 +311,7 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n             /* We read a non-empty vin. Assume a normal vout follows. */\n             READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n         }\n-        if ((flags & 1) && !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n+        if ((flags & 1) && fAllowWitness) {\n             /* The witness flag is present, and we support witnesses. */\n             flags ^= 1;\n             const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n@@ -322,7 +324,7 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n     } else {\n         // Consistency check\n         assert(tx.wit.vtxinwit.size() <= tx.vin.size());\n-        if (!(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n+        if (fAllowWitness) {\n             /* Check whether witnesses need to be serialized. */\n             if (!tx.wit.IsNull()) {\n                 flags |= 1;"
      }
    ]
  },
  {
    "sha": "a3e19846519952a3d22e387031258a88ec24d280",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2UxOTg0NjUxOTk1MmEzZDIyZTM4NzAzMTI1OGE4OGVjMjRkMjgw",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-15T05:20:13Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-16T02:08:52Z"
      },
      "message": "Consensus: Trivial transform BOOST_FOREACH into for loop",
      "tree": {
        "sha": "cb172b2ca43307f54eb4fff7563405dc5eef7d9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb172b2ca43307f54eb4fff7563405dc5eef7d9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3e19846519952a3d22e387031258a88ec24d280",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e19846519952a3d22e387031258a88ec24d280",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3e19846519952a3d22e387031258a88ec24d280",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e19846519952a3d22e387031258a88ec24d280/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc94b87487824c6fba45788facf96faba97a4aa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc94b87487824c6fba45788facf96faba97a4aa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc94b87487824c6fba45788facf96faba97a4aa6"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5e8a6d50fb24bd069f524324edfcafa283a90099",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3e19846519952a3d22e387031258a88ec24d280/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3e19846519952a3d22e387031258a88ec24d280/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a3e19846519952a3d22e387031258a88ec24d280",
        "patch": "@@ -785,7 +785,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         return true;\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (const auto& txin : tx.vin) {\n         if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n             return false;\n     }\n@@ -999,11 +999,11 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const auto& txin : tx.vin)\n     {\n         nSigOps += txin.scriptSig.GetSigOpCount(false);\n     }\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const auto& txout : tx.vout)\n     {\n         nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n     }\n@@ -1061,7 +1061,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const auto& txout : tx.vout)\n     {\n         if (txout.nValue < 0)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n@@ -1074,7 +1074,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const auto& txin : tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n@@ -1088,7 +1088,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     }\n     else\n     {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        for (const auto& txin : tx.vin)\n             if (txin.prevout.IsNull())\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n@@ -3401,13 +3401,13 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", false, \"more than one coinbase\");\n \n     // Check transactions\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    for (const auto& tx : block.vtx)\n         if (!CheckTransaction(tx, state))\n             return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx.GetHash().ToString(), state.GetDebugMessage()));\n \n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    for (const auto& tx : block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n@@ -3538,7 +3538,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n                               : block.GetBlockTime();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+    for (const auto& tx : block.vtx) {\n         if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", false, \"non-final transaction\");\n         }"
      }
    ]
  },
  {
    "sha": "6f3d616dc8d6840c2293ffadd8cc3209f1100193",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjNkNjE2ZGM4ZDY4NDBjMjI5M2ZmYWRkOGNjMzIwOWYxMTAwMTkz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-16T23:34:35Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-16T23:43:15Z"
      },
      "message": "Trivial: Make CBlockIndex param const in ContextualCheckBlockHeader and ContextualCheckBlock",
      "tree": {
        "sha": "883f4080296e4b1b1364978f47fcd5822e773a6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/883f4080296e4b1b1364978f47fcd5822e773a6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f3d616dc8d6840c2293ffadd8cc3209f1100193",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3d616dc8d6840c2293ffadd8cc3209f1100193",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3d616dc8d6840c2293ffadd8cc3209f1100193",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3d616dc8d6840c2293ffadd8cc3209f1100193/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc94b87487824c6fba45788facf96faba97a4aa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc94b87487824c6fba45788facf96faba97a4aa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc94b87487824c6fba45788facf96faba97a4aa6"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "34ab23914cb15305503a05aee5e54deb382e0224",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3d616dc8d6840c2293ffadd8cc3209f1100193/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3d616dc8d6840c2293ffadd8cc3209f1100193/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6f3d616dc8d6840c2293ffadd8cc3209f1100193",
        "patch": "@@ -3499,7 +3499,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     return commitment;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex * const pindexPrev, int64_t nAdjustedTime)\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n@@ -3522,7 +3522,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     const Consensus::Params& consensusParams = Params().GetConsensus();"
      },
      {
        "sha": "561f2eceea4d8b35dba7bf9a64e97b16817bd106",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3d616dc8d6840c2293ffadd8cc3209f1100193/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3d616dc8d6840c2293ffadd8cc3209f1100193/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6f3d616dc8d6840c2293ffadd8cc3209f1100193",
        "patch": "@@ -444,8 +444,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()"
      }
    ]
  },
  {
    "sha": "38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGM0YzhiNzAxMmNlZWVlM2I2NTkxZDZhODBiNWYxM2VlMjBmYmQ2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-17T00:34:06Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-17T00:41:58Z"
      },
      "message": "Trivial: Segwit: Don't call IsWitnessEnabled from ContextualCheckBlock",
      "tree": {
        "sha": "2298a5c362e41591b15c1603a5373019e99ea82e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2298a5c362e41591b15c1603a5373019e99ea82e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc94b87487824c6fba45788facf96faba97a4aa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc94b87487824c6fba45788facf96faba97a4aa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc94b87487824c6fba45788facf96faba97a4aa6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "21092ca2db6651f6fa0b8a9ecdfe24c6317cf8d3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6",
        "patch": "@@ -3564,7 +3564,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (IsWitnessEnabled(pindexPrev, consensusParams)) {\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != -1) {\n             bool malleated = false;"
      }
    ]
  },
  {
    "sha": "faa59318db48a0acc4b0ccff56b63cc05455c61f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE1OTMxOGRiNDhhMGFjYzRiMGNjZmY1NmI2M2NjMDU0NTVjNjFm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-18T08:55:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-18T08:55:14Z"
      },
      "message": "[doc] gbuild: Set memory explicitly (default is too low)",
      "tree": {
        "sha": "19e50287cfb0875f18a00c4512ad02a7fb6873c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19e50287cfb0875f18a00c4512ad02a7fb6873c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa59318db48a0acc4b0ccff56b63cc05455c61f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa59318db48a0acc4b0ccff56b63cc05455c61f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa59318db48a0acc4b0ccff56b63cc05455c61f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa59318db48a0acc4b0ccff56b63cc05455c61f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc94b87487824c6fba45788facf96faba97a4aa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc94b87487824c6fba45788facf96faba97a4aa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc94b87487824c6fba45788facf96faba97a4aa6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "41c1ac8556b1abdb65c65246a36660b60c0c9484",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa59318db48a0acc4b0ccff56b63cc05455c61f/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa59318db48a0acc4b0ccff56b63cc05455c61f/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=faa59318db48a0acc4b0ccff56b63cc05455c61f",
        "patch": "@@ -112,16 +112,16 @@ The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n ### Build and sign Bitcoin Core for Linux, Windows, and OS X:\n \n     pushd ./gitian-builder\n-    ./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gbuild --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n     ./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n     mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n \n-    ./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gbuild --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n     ./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n     mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n     mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n \n-    ./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    ./bin/gbuild --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n     ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n     mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n     mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../"
      }
    ]
  },
  {
    "sha": "6c0336c7723da274c8312b82ed2a138f5d57158f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzAzMzZjNzcyM2RhMjc0YzgzMTJiODJlZDJhMTM4ZjVkNTcxNThm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-18T10:21:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-18T10:22:18Z"
      },
      "message": "build: bump version to 0.13.99\n\nNow that 0.13 branch has been split off, master is 0.13.99 (pre-0.14).",
      "tree": {
        "sha": "ccdf14616b1f15dd05d3f803514c5333d3088afe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccdf14616b1f15dd05d3f803514c5333d3088afe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c0336c7723da274c8312b82ed2a138f5d57158f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXjK3bAAoJEHSBCwEjRsmme4YH/RlApPGEngOTVThlXxGOtjbE\nsL1Y8DNjplHyV9w0BAJ8J7AIGRBaaCrrIbQCkoKhJ/bpubUJSaMeE6YmAbL6z4L4\nw42TssilAnMbcB9//s6op95sqLEiGcu1/MjOKfy6rHK6YY5gm7oct4u4JV56TRsQ\nCJH84OtG9YEHkMmwjLHh1sXVv+YLgXV21gheQQ4XE/c/2U5ehIiULECR69wJiWPF\n8X0b+cUYREv+j2ydLaIKp0YPYrjt803WY5yUmy5K8+pOm4QIdOBuvgl2+4xTGbb1\nFDRqBguD2xhAkapB+C8uM5xd55ntab4Ayq30iM/7FGUdQZWpKmQhUNXKrvkHUm8=\n=uLwq\n-----END PGP SIGNATURE-----",
        "payload": "tree ccdf14616b1f15dd05d3f803514c5333d3088afe\nparent e4382fbef56a0e04b0ed834e8b3a3a16f81db149\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1468837312 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1468837338 +0200\n\nbuild: bump version to 0.13.99\n\nNow that 0.13 branch has been split off, master is 0.13.99 (pre-0.14).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c0336c7723da274c8312b82ed2a138f5d57158f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c0336c7723da274c8312b82ed2a138f5d57158f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c0336c7723da274c8312b82ed2a138f5d57158f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4382fbef56a0e04b0ed834e8b3a3a16f81db149"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "78d63f92729ddae6ed834017a20bd07461a265b5",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0336c7723da274c8312b82ed2a138f5d57158f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0336c7723da274c8312b82ed2a138f5d57158f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6c0336c7723da274c8312b82ed2a138f5d57158f",
        "patch": "@@ -1,7 +1,7 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 12)\n+define(_CLIENT_VERSION_MINOR, 13)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)"
      },
      {
        "sha": "22850db8354290de5cf488ba14fdb5881dbe6672",
        "filename": "doc/Doxyfile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0336c7723da274c8312b82ed2a138f5d57158f/doc/Doxyfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0336c7723da274c8312b82ed2a138f5d57158f/doc/Doxyfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile?ref=6c0336c7723da274c8312b82ed2a138f5d57158f",
        "patch": "@@ -34,7 +34,7 @@ PROJECT_NAME           = Bitcoin\n # This could be handy for archiving the generated documentation or \n # if some version control system is used.\n \n-PROJECT_NUMBER         = 0.12.99\n+PROJECT_NUMBER         = 0.13.99\n \n # Using the PROJECT_BRIEF tag one can provide an optional one line description \n # for a project that appears at the top of each page and should give viewer "
      },
      {
        "sha": "09a507c9ce6e90b4e124337a6f6a94ad8bf1eef4",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0336c7723da274c8312b82ed2a138f5d57158f/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0336c7723da274c8312b82ed2a138f5d57158f/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=6c0336c7723da274c8312b82ed2a138f5d57158f",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core 0.12.99\n+Bitcoin Core 0.13.99\n =====================\n \n Setup"
      },
      {
        "sha": "74a05138a42806c061983b7ad6d3602085cca2d0",
        "filename": "doc/README_windows.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0336c7723da274c8312b82ed2a138f5d57158f/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0336c7723da274c8312b82ed2a138f5d57158f/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=6c0336c7723da274c8312b82ed2a138f5d57158f",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core 0.12.99\r\n+Bitcoin Core 0.13.99\r\n =====================\r\n \r\n Intro\r"
      },
      {
        "sha": "53ad460346466cc6bf30c1f7a9ae968c6ee0d62b",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0336c7723da274c8312b82ed2a138f5d57158f/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0336c7723da274c8312b82ed2a138f5d57158f/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=6c0336c7723da274c8312b82ed2a138f5d57158f",
        "patch": "@@ -15,7 +15,7 @@\n \n //! These need to be macros, as clientversion.cpp's and bitcoin*-res.rc's voodoo requires it\n #define CLIENT_VERSION_MAJOR 0\n-#define CLIENT_VERSION_MINOR 12\n+#define CLIENT_VERSION_MINOR 13\n #define CLIENT_VERSION_REVISION 99\n #define CLIENT_VERSION_BUILD 0\n "
      }
    ]
  },
  {
    "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTM1NTdiOGUzNjMwOGEyN2RiZWI1Mjg1NjlhYmU2MzhjNGQwMWRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-18T12:00:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-18T12:01:11Z"
      },
      "message": "doc: Clean out release notes\n\nNow that 0.13 has branched, release notes for 0.13 should be maintained\nthere, and the release notes file on master is for 0.14 release\nnotes.",
      "tree": {
        "sha": "6ef40d6edad8590a7b2f8968425c4173d7db9567",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ef40d6edad8590a7b2f8968425c4173d7db9567"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXjMUIAAoJEHSBCwEjRsmmVy0H/3J/HwClS4SQKnkYcgrwO4Gi\nfi0l64tMFyaCZ2tyoS1C+fHAMdLgKIxzv88RnQvCxP2z4+E5bDPU+C6kKT9leV41\nR3ARu285f2H1gABN46dFU2jxS0a+UfIKjn7naUegJ0VDVHgB3XkGljVrfS8GJqgN\nWEhuug7xuQ5aal6EQif4u5hYRws9p+wTLBPARI9ysx4f6bW2f8dPYXSvvSQ98N2M\nEjSIvRVjBcJTKbyH/ue7RloYT7OvfCHZpVI06CztIvyz1PoO+XIuJ87nOGWWDUHB\nD5Y2u/KDmMJ5Ntzg3500iXD54lfDqcsZgHJW21KhxX1bl0zYO32T5ihB8o4Lv8Y=\n=xgnP\n-----END PGP SIGNATURE-----",
        "payload": "tree 6ef40d6edad8590a7b2f8968425c4173d7db9567\nparent 6c0336c7723da274c8312b82ed2a138f5d57158f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1468843205 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1468843271 +0200\n\ndoc: Clean out release notes\n\nNow that 0.13 has branched, release notes for 0.13 should be maintained\nthere, and the release notes file on master is for 0.14 release\nnotes.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c0336c7723da274c8312b82ed2a138f5d57158f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c0336c7723da274c8312b82ed2a138f5d57158f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c0336c7723da274c8312b82ed2a138f5d57158f"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 8,
      "deletions": 137
    },
    "files": [
      {
        "sha": "343bd0846ecc064c90f788be46a333891279c52c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 137,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3557b8e36308a27dbeb528569abe638c4d01dd/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3557b8e36308a27dbeb528569abe638c4d01dd/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "patch": "@@ -41,81 +41,7 @@ report issues about Windows XP to the issue tracker.\n Notable changes\n ===============\n \n-Database cache memory increased\n---------------------------------\n-\n-As a result of growth of the UTXO set, performance with the prior default\n-database cache of 100 MiB has suffered.\n-For this reason the default was changed to 300 MiB in this release.\n-\n-For nodes on low-memory systems, the database cache can be changed back to\n-100 MiB (or to another value) by either:\n-\n-- Adding `dbcache=100` in bitcoin.conf\n-- Changing it in the GUI under `Options \u2192 Size of database cache`\n-\n-Note that the database cache setting has the most performance impact\n-during initial sync of a node, and when catching up after downtime.\n-\n-bitcoin-cli: arguments privacy\n---------------------------------\n-\n-The RPC command line client gained a new argument, `-stdin`\n-to read extra arguments from standard input, one per line until EOF/Ctrl-D.\n-For example:\n-\n-    $ echo -e \"mysecretcode\\n120\" | src/bitcoin-cli -stdin walletpassphrase\n-\n-It is recommended to use this for sensitive information such as wallet\n-passphrases, as command-line arguments can usually be read from the process\n-table by any user on the system.\n-\n-RPC low-level changes\n-----------------------\n-\n-- `gettxoutsetinfo` UTXO hash (`hash_serialized`) has changed. There was a divergence between\n-  32-bit and 64-bit platforms, and the txids were missing in the hashed data. This has been\n-  fixed, but this means that the output will be different than from previous versions.\n-\n-- Full UTF-8 support in the RPC API. Non-ASCII characters in, for example,\n-  wallet labels have always been malformed because they weren't taken into account\n-  properly in JSON RPC processing. This is no longer the case. This also affects\n-  the GUI debug console.\n-\n-C++11 and Python 3\n--------------------\n-\n-Various code modernizations have been done. The Bitcoin Core code base has\n-started using C++11. This means that a C++11-capable compiler is now needed for\n-building. Effectively this means GCC 4.7 or higher, or Clang 3.3 or higher.\n-\n-When cross-compiling for a target that doesn't have C++11 libraries, configure with\n-`./configure --enable-glibc-back-compat ... LDFLAGS=-static-libstdc++`.\n-\n-For running the functional tests in `qa/rpc-tests`, Python3.4 or higher is now\n-required.\n-\n-Linux ARM builds\n-------------------\n-\n-Due to popular request, Linux ARM builds have been added to the uploaded\n-executables.\n-\n-The following extra files can be found in the download directory or torrent:\n-\n-- `bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz`: Linux binaries for the most\n-  common 32-bit ARM architecture.\n-- `bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz`: Linux binaries for the most\n-  common 64-bit ARM architecture.\n-\n-ARM builds are still experimental. If you have problems on a certain device or\n-Linux distribution combination please report them on the bug tracker, it may be\n-possible to resolve them.\n-\n-Note that Android is not considered ARM Linux in this context. The executables\n-are not expected to work out of the box on Android.\n-\n-0.13.0 Change log\n+0.14.0 Change log\n =================\n \n Detailed release notes follow. This overview includes changes that affect\n@@ -125,83 +51,28 @@ git merge commit are mentioned.\n \n ### RPC and REST\n \n-Asm script outputs replacements for OP_NOP2 and OP_NOP3\n--------------------------------------------------------\n-\n-OP_NOP2 has been renamed to OP_CHECKLOCKTIMEVERIFY by [BIP \n-65](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki)\n-\n-OP_NOP3 has been renamed to OP_CHECKSEQUENCEVERIFY by [BIP \n-112](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki)\n-\n-The following outputs are affected by this change:\n-- RPC `getrawtransaction` (in verbose mode)\n-- RPC `decoderawtransaction`\n-- RPC `decodescript`\n-- REST `/rest/tx/` (JSON format)\n-- REST `/rest/block/` (JSON format when including extended tx details)\n-- `bitcoin-tx -json`\n-\n-New mempool information RPC calls\n----------------------------------\n-\n-RPC calls have been added to output detailed statistics for individual mempool\n-entries, as well as to calculate the in-mempool ancestors or descendants of a\n-transaction: see `getmempoolentry`, `getmempoolancestors`, `getmempooldescendants`.\n-\n-### ZMQ\n-\n-Each ZMQ notification now contains an up-counting sequence number that allows\n-listeners to detect lost notifications.\n-The sequence number is always the last element in a multi-part ZMQ notification and\n-therefore backward compatible.\n-Each message type has its own counter.\n-(https://github.com/bitcoin/bitcoin/pull/7762)\n-\n ### Configuration and command-line options\n \n ### Block and transaction handling\n \n ### P2P protocol and network code\n \n-The p2p alert system has been removed in #7692 and the 'alert' message is no longer supported.\n-\n-\n-Fee filtering of invs (BIP 133)\n-------------------------------------\n-\n-The optional new p2p message \"feefilter\" is implemented and the protocol\n-version is bumped to 70013. Upon receiving a feefilter message from a peer,\n-a node will not send invs for any transactions which do not meet the filter\n-feerate. [BIP 133](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki)\n-\n ### Validation\n \n ### Build system\n \n ### Wallet\n \n-Hierarchical Deterministic Key Generation\n------------------------------------------\n-Newly created wallets will use hierarchical deterministic key generation\n-according to BIP32 (keypath m/0'/0'/k').\n-Existing wallets will still use traditional key generation.\n-\n-Backups of HD wallets, regardless of when they have been created, can\n-therefore be used to re-generate all possible private keys, even the\n-ones which haven't already been generated during the time of the backup.\n-\n-HD key generation for new wallets can be disabled by `-usehd=0`. Keep in\n-mind that this flag only has affect on newly created wallets.\n-You can't disable HD key generation once you have created a HD wallet.\n-\n-There is no distinction between internal (change) and external keys.\n-\n-[Pull request](https://github.com/bitcoin/bitcoin/pull/8035/files), [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n-\n ### GUI\n \n ### Tests\n \n ### Miscellaneous\n \n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "682aa0f289c550c029733966a2ce3449e4a471df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODJhYTBmMjg5YzU1MGMwMjk3MzM5NjZhMmNlMzQ0OWU0YTQ3MWRm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-18T16:40:28Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-18T16:42:41Z"
      },
      "message": "Scale legacy sigop count in CreateNewBlock",
      "tree": {
        "sha": "aab4de54a8955fc566aac32174d7cba130b99733",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aab4de54a8955fc566aac32174d7cba130b99733"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/682aa0f289c550c029733966a2ce3449e4a471df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/682aa0f289c550c029733966a2ce3449e4a471df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/682aa0f289c550c029733966a2ce3449e4a471df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/682aa0f289c550c029733966a2ce3449e4a471df/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3f6fe915a7a7f8c359ae18b8cbfad7d8b01bbb45",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/682aa0f289c550c029733966a2ce3449e4a471df/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/682aa0f289c550c029733966a2ce3449e4a471df/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=682aa0f289c550c029733966a2ce3449e4a471df",
        "patch": "@@ -187,7 +187,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n     UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n     pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n     pblock->nNonce         = 0;\n-    pblocktemplate->vTxSigOpsCost[0] = GetLegacySigOpCount(pblock->vtx[0]);\n+    pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(pblock->vtx[0]);\n \n     CValidationState state;\n     if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {"
      }
    ]
  },
  {
    "sha": "2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzA2YmFlMzllZGZhYTljMDg1NWQ4MzM3N2FkOGZkYTA5ZTRmYTA4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-18T17:28:26Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-18T17:28:26Z"
      },
      "message": "Rename \"block cost\" to \"block weight\"",
      "tree": {
        "sha": "931520ad5742b9a758a4bd9143fdfe96f180ab79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/931520ad5742b9a758a4bd9143fdfe96f180ab79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 69,
      "deletions": 69
    },
    "files": [
      {
        "sha": "fa2c5d1f05e24e4d6dc5d482af485590b68e5e46",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -1065,12 +1065,12 @@ def test_block_relay(self, segwit_activated):\n             assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n             assert_equal(wit_block.serialize(True), block.serialize(True))\n \n-            # Test size, vsize, cost\n+            # Test size, vsize, weight\n             rpc_details = self.nodes[0].getblock(block.hash, True)\n             assert_equal(rpc_details[\"size\"], len(block.serialize(True)))\n             assert_equal(rpc_details[\"strippedsize\"], len(block.serialize(False)))\n-            cost = 3*len(block.serialize(False)) + len(block.serialize(True))\n-            assert_equal(rpc_details[\"cost\"], cost)\n+            weight = 3*len(block.serialize(False)) + len(block.serialize(True))\n+            assert_equal(rpc_details[\"weight\"], weight)\n \n             # Upgraded node should not ask for blocks from unupgraded\n             block4 = self.build_next_block(nVersion=4)"
      },
      {
        "sha": "690856586604e67b79d81003695d10cca5c77a31",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -10,8 +10,8 @@\n \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n-/** The maximum allowed cost for a block, see BIP 141 (network rule) */\n-static const unsigned int MAX_BLOCK_COST = 4000000;\n+/** The maximum allowed weight for a block, see BIP 141 (network rule) */\n+static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */"
      },
      {
        "sha": "312dfe1699c086ee920a9723a2bd28e86ffcee01",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -452,7 +452,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxcost=<n>\", strprintf(_(\"Set maximum BIP141 block cost (default: %d)\"), DEFAULT_BLOCK_MAX_COST));\n+    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     if (showDebug)"
      },
      {
        "sha": "fe19895f5fbcccbb2094415a420c6ab035c95aa3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -694,8 +694,8 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     // have been mined or received.\n     // 100 orphans, each of which is at most 99,999 bytes big is\n     // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n-    unsigned int sz = GetTransactionCost(tx);\n-    if (sz >= MAX_STANDARD_TX_COST)\n+    unsigned int sz = GetTransactionWeight(tx);\n+    if (sz >= MAX_STANDARD_TX_WEIGHT)\n     {\n         LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n         return false;\n@@ -3596,13 +3596,13 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     }\n \n     // After the coinbase witness nonce and commitment are verified,\n-    // we can check if the block cost passes (before we've checked the\n-    // coinbase witness, it would be possible for the cost to be too\n+    // we can check if the block weight passes (before we've checked the\n+    // coinbase witness, it would be possible for the weight to be too\n     // large by filling up the coinbase witness, which doesn't change\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n-    if (GetBlockCost(block) > MAX_BLOCK_COST) {\n-        return state.DoS(100, error(\"ContextualCheckBlock(): cost limit failed\"), REJECT_INVALID, \"bad-blk-cost\");\n+    if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n+        return state.DoS(100, error(\"ContextualCheckBlock(): weight limit failed\"), REJECT_INVALID, \"bad-blk-weight\");\n     }\n \n     return true;"
      },
      {
        "sha": "27121890f6d709e702893e90ba7eb5dddf00501e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -155,7 +155,7 @@ typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n-extern uint64_t nLastBlockCost;\n+extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;\n extern CConditionVariable cvBlockChange;"
      },
      {
        "sha": "25a5becf93efa889ff7cda6d285af5abd6bc9925",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -45,7 +45,7 @@ using namespace std;\n \n uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n-uint64_t nLastBlockCost = 0;\n+uint64_t nLastBlockWeight = 0;\n \n class ScoreCompare\n {\n@@ -77,30 +77,30 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n     : chainparams(_chainparams)\n {\n     // Block resource limits\n-    // If neither -blockmaxsize or -blockmaxcost is given, limit to DEFAULT_BLOCK_MAX_*\n+    // If neither -blockmaxsize or -blockmaxweight is given, limit to DEFAULT_BLOCK_MAX_*\n     // If only one is given, only restrict the specified resource.\n     // If both are given, restrict both.\n-    nBlockMaxCost = DEFAULT_BLOCK_MAX_COST;\n+    nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n     nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n-    bool fCostSet = false;\n-    if (mapArgs.count(\"-blockmaxcost\")) {\n-        nBlockMaxCost = GetArg(\"-blockmaxcost\", DEFAULT_BLOCK_MAX_COST);\n+    bool fWeightSet = false;\n+    if (mapArgs.count(\"-blockmaxweight\")) {\n+        nBlockMaxWeight = GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n         nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n-        fCostSet = true;\n+        fWeightSet = true;\n     }\n     if (mapArgs.count(\"-blockmaxsize\")) {\n         nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-        if (!fCostSet) {\n-            nBlockMaxCost = nBlockMaxSize * WITNESS_SCALE_FACTOR;\n+        if (!fWeightSet) {\n+            nBlockMaxWeight = nBlockMaxSize * WITNESS_SCALE_FACTOR;\n         }\n     }\n \n-    // Limit cost to between 4K and MAX_BLOCK_COST-4K for sanity:\n-    nBlockMaxCost = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_COST-4000), nBlockMaxCost));\n+    // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n+    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_WEIGHT-4000), nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n \n-    // Whether we need to account for byte usage (in addition to cost usage)\n+    // Whether we need to account for byte usage (in addition to weight usage)\n     fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000);\n }\n \n@@ -110,7 +110,7 @@ void BlockAssembler::resetBlock()\n \n     // Reserve space for coinbase tx\n     nBlockSize = 1000;\n-    nBlockCost = 4000;\n+    nBlockWeight = 4000;\n     nBlockSigOpsCost = 400;\n     fIncludeWitness = false;\n \n@@ -167,7 +167,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     nLastBlockTx = nBlockTx;\n     nLastBlockSize = nBlockSize;\n-    nLastBlockCost = nBlockCost;\n+    nLastBlockWeight = nBlockWeight;\n     LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOpsCost);\n \n     // Create coinbase transaction.\n@@ -223,8 +223,8 @@ void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n \n bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost)\n {\n-    // TODO: switch to cost-based accounting for packages instead of vsize-based accounting.\n-    if (nBlockCost + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxCost)\n+    // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n+    if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n         return false;\n     if (nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST)\n         return false;\n@@ -257,17 +257,17 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\n \n bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)\n {\n-    if (nBlockCost + iter->GetTxCost() >= nBlockMaxCost) {\n+    if (nBlockWeight + iter->GetTxWeight() >= nBlockMaxWeight) {\n         // If the block is so close to full that no more txs will fit\n         // or if we've tried more than 50 times to fill remaining space\n         // then flag that the block is finished\n-        if (nBlockCost >  nBlockMaxCost - 400 || lastFewTxs > 50) {\n+        if (nBlockWeight >  nBlockMaxWeight - 400 || lastFewTxs > 50) {\n              blockFinished = true;\n              return false;\n         }\n-        // Once we're within 4000 cost of a full block, only look at 50 more txs\n+        // Once we're within 4000 weight of a full block, only look at 50 more txs\n         // to try to fill the remaining space.\n-        if (nBlockCost > nBlockMaxCost - 4000) {\n+        if (nBlockWeight > nBlockMaxWeight - 4000) {\n             lastFewTxs++;\n         }\n         return false;\n@@ -315,7 +315,7 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     if (fNeedSizeAccounting) {\n         nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n     }\n-    nBlockCost += iter->GetTxCost();\n+    nBlockWeight += iter->GetTxWeight();\n     ++nBlockTx;\n     nBlockSigOpsCost += iter->GetSigOpCost();\n     nFees += iter->GetFee();"
      },
      {
        "sha": "11753f5e43787d361d589ade9d6b0bccef87df97",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -141,11 +141,11 @@ class BlockAssembler\n \n     // Configuration parameters for the block size\n     bool fIncludeWitness;\n-    unsigned int nBlockMaxCost, nBlockMaxSize;\n+    unsigned int nBlockMaxWeight, nBlockMaxSize;\n     bool fNeedSizeAccounting;\n \n     // Information on the current status of the block\n-    uint64_t nBlockCost;\n+    uint64_t nBlockWeight;\n     uint64_t nBlockSize;\n     uint64_t nBlockTx;\n     uint64_t nBlockSigOpsCost;"
      },
      {
        "sha": "8617db00c8608cf3497582f3280a1faed31bd500",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -64,8 +64,8 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n     // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = GetTransactionCost(tx);\n-    if (sz >= MAX_STANDARD_TX_COST) {\n+    unsigned int sz = GetTransactionWeight(tx);\n+    if (sz >= MAX_STANDARD_TX_WEIGHT) {\n         reason = \"tx-size\";\n         return false;\n     }\n@@ -151,12 +151,12 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-int64_t GetVirtualTransactionSize(int64_t nCost)\n+int64_t GetVirtualTransactionSize(int64_t nWeight)\n {\n-    return (nCost + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+    return (nWeight + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n }\n \n int64_t GetVirtualTransactionSize(const CTransaction& tx)\n {\n-    return GetVirtualTransactionSize(GetTransactionCost(tx));\n+    return GetVirtualTransactionSize(GetTransactionWeight(tx));\n }"
      },
      {
        "sha": "f5f8652fb5a720998eb07b9477fce66b63a721bd",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -18,10 +18,10 @@ class CCoinsViewCache;\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n-/** Default for -blockmaxcost, which control the range of block costs the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_COST = 3000000;\n-/** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_COST = 400000;\n+/** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n+/** The maximum weight for transactions we're willing to relay/mine */\n+static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n@@ -66,8 +66,8 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n-/** Compute the virtual transaction size (cost reinterpreted as bytes). */\n-int64_t GetVirtualTransactionSize(int64_t nCost);\n+/** Compute the virtual transaction size (weight reinterpreted as bytes). */\n+int64_t GetVirtualTransactionSize(int64_t nWeight);\n int64_t GetVirtualTransactionSize(const CTransaction& tx);\n \n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "0e6ab4dd718b37f19c102e28eb5b3c821afb915e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -32,11 +32,11 @@ std::string CBlock::ToString() const\n     return s.str();\n }\n \n-int64_t GetBlockCost(const CBlock& block)\n+int64_t GetBlockWeight(const CBlock& block)\n {\n-    // This implements the cost = (stripped_size * 4) + witness_size formula,\n+    // This implements the weight = (stripped_size * 4) + witness_size formula,\n     // using only serialization with and without witness data. As witness_size\n     // is equal to total_size - stripped_size, this formula is identical to:\n-    // cost = (stripped_size * 3) + total_size.\n+    // weight = (stripped_size * 3) + total_size.\n     return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "72dfed985ae937b3b37cd818df77a3f7dcafd8df",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -154,7 +154,7 @@ struct CBlockLocator\n     }\n };\n \n-/** Compute the consensus-critical block cost (see BIP 141). */\n-int64_t GetBlockCost(const CBlock& tx);\n+/** Compute the consensus-critical block weight (see BIP 141). */\n+int64_t GetBlockWeight(const CBlock& tx);\n \n #endif // BITCOIN_PRIMITIVES_BLOCK_H"
      },
      {
        "sha": "8d6380564365e755db18d30a8c86616703f997b4",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -121,7 +121,7 @@ unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n     // Providing any more cleanup incentive than making additional inputs free would\n     // risk encouraging people to create junk outputs to redeem later.\n     if (nTxSize == 0)\n-        nTxSize = (GetTransactionCost(*this) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+        nTxSize = (GetTransactionWeight(*this) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n     for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n     {\n         unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n@@ -149,7 +149,7 @@ std::string CTransaction::ToString() const\n     return str;\n }\n \n-int64_t GetTransactionCost(const CTransaction& tx)\n+int64_t GetTransactionWeight(const CTransaction& tx)\n {\n     return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "d37890667f9ddcaa79c947e051b462151e20ffb3",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -459,7 +459,7 @@ struct CMutableTransaction\n     uint256 GetHash() const;\n };\n \n-/** Compute the cost of a transaction, as defined by BIP 141 */\n-int64_t GetTransactionCost(const CTransaction &tx);\n+/** Compute the weight of a transaction, as defined by BIP 141 */\n+int64_t GetTransactionWeight(const CTransaction &tx);\n \n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "9dc896b7af281e986ebed62cdffea673c3c895bf",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -101,7 +101,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n-    result.push_back(Pair(\"cost\", (int)::GetBlockCost(block)));\n+    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n@@ -559,7 +559,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n             \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n             \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n-            \"  \\\"cost\\\" : n             (numeric) The block cost\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight (BIP 141)\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\""
      },
      {
        "sha": "92ca4bab6bc1eee4ad220932897a20b39f8b4048",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -224,7 +224,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n             \"  \\\"currentblocksize\\\": nnn,   (numeric) The last block size\\n\"\n-            \"  \\\"currentblockcost\\\": nnn,   (numeric) The last block cost\\n\"\n+            \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"          (string) Current errors\\n\"\n@@ -243,7 +243,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n     obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n-    obj.push_back(Pair(\"currentblockcost\", (uint64_t)nLastBlockCost));\n+    obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n@@ -358,7 +358,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"         ],\\n\"\n             \"         \\\"fee\\\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n             \"         \\\"sigops\\\" : n,               (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n-            \"         \\\"cost\\\" : n,                 (numeric) total transaction size cost, as counted for purposes of block limits\\n\"\n+            \"         \\\"weight\\\" : n,               (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n             \"         \\\"required\\\" : true|false     (boolean) if provided and true, this transaction must be in the final block\\n\"\n             \"      }\\n\"\n             \"      ,...\\n\"\n@@ -377,7 +377,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",   (string) A range of valid nonces\\n\"\n             \"  \\\"sigoplimit\\\" : n,                 (numeric) cost limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n-            \"  \\\"costlimit\\\" : n,                  (numeric) limit of block cost\\n\"\n+            \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n             \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"bits\\\" : \\\"xxx\\\",                 (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n@@ -575,7 +575,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         int index_in_template = i - 1;\n         entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n         entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOpsCost[index_in_template]));\n-        entry.push_back(Pair(\"cost\", GetTransactionCost(tx)));\n+        entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n \n         transactions.push_back(entry);\n     }\n@@ -659,7 +659,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS_COST));\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n-    result.push_back(Pair(\"costlimit\", (int64_t)MAX_BLOCK_COST));\n+    result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      },
      {
        "sha": "691baa674403f9d380bc0f08ee6b0fb0d67a2106",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -28,7 +28,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n-    nTxCost = GetTransactionCost(_tx);\n+    nTxWeight = GetTransactionWeight(_tx);\n     nModSize = _tx.CalculateModifiedSize(GetTxSize());\n     nUsageSize = RecursiveDynamicUsage(*tx) + memusage::DynamicUsage(tx);\n \n@@ -75,7 +75,7 @@ void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)\n \n size_t CTxMemPoolEntry::GetTxSize() const\n {\n-    return GetVirtualTransactionSize(nTxCost);\n+    return GetVirtualTransactionSize(nTxWeight);\n }\n \n // Update the given tx for any in-mempool descendants."
      },
      {
        "sha": "2c2127f326de2cce875c5a4c3689dbb7f25d6b0c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -78,7 +78,7 @@ class CTxMemPoolEntry\n private:\n     std::shared_ptr<const CTransaction> tx;\n     CAmount nFee;              //!< Cached to avoid expensive parent-transaction lookups\n-    size_t nTxCost;            //!< ... and avoid recomputing tx cost (also used for GetTxSize())\n+    size_t nTxWeight;          //!< ... and avoid recomputing tx weight (also used for GetTxSize())\n     size_t nModSize;           //!< ... and modified size for priority\n     size_t nUsageSize;         //!< ... and total memory usage\n     int64_t nTime;             //!< Local time when entering the mempool\n@@ -122,7 +122,7 @@ class CTxMemPoolEntry\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const;\n-    size_t GetTxCost() const { return nTxCost; }\n+    size_t GetTxWeight() const { return nTxWeight; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }"
      },
      {
        "sha": "4b6d98025d55b075fbe760d05a18e21c81012868",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -2356,7 +2356,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);\n \n                 // Limit size\n-                if (GetTransactionCost(txNew) >= MAX_STANDARD_TX_COST)\n+                if (GetTransactionWeight(txNew) >= MAX_STANDARD_TX_WEIGHT)\n                 {\n                     strFailReason = _(\"Transaction too large\");\n                     return false;"
      }
    ]
  },
  {
    "sha": "a4f137f367a898dc3acddc778c4fe9c53ac303c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGYxMzdmMzY3YTg5OGRjM2FjZGRjNzc4YzRmZTljNTNhYzMwM2M5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-15T09:42:47Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-18T20:56:45Z"
      },
      "message": "[Wallet] Ensure <0.13 clients can't open HD wallets",
      "tree": {
        "sha": "1a22824142a9f8bb3d5dd4b324c28168d917efd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a22824142a9f8bb3d5dd4b324c28168d917efd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4f137f367a898dc3acddc778c4fe9c53ac303c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXjUKQAAoJECnUvLZBb1PsRucP/2iWIppnEcpaktfxFEC2FDuN\nb7xi8BP30m7Pg9M/7oPhSU5/330U1+8IFE4puKd6e3O7h0LjjCojvuVKm32yMrjq\nrhM2Y+31rKxVmO5Fou3v++lKd2S0bCzTD5UJVkb5gO1kQQUcaGmcNTfc9PU+t8Eh\nQIscEGz/O1b0LBSYwNwMluEtWf41mOVf+FFuYXUuGdxhXDY2Xswl1pxaMDa2F0U5\nW7P5mPrB5GpFK0HfKfFBreEa2/x81okKcub1jBFaEiv/g2OYpNEXTtmaJIE9ArbE\nG3Ii7wUTTMZ+aQhrGpPnrkMBg69BpmEmohjsbP+OhiuV2JCkI8U/DD1bgwZgwxh6\nlb2goicAmZXqWbNqfOHChp8uzZg7RPJ6QiuQCCV+pY1ORXKTCqxDVxLWlD7vdqIe\n7ZludQ/1PyO8PExKIT9v4QSLzsc2NJcSzQg4lVnOXWv4oxn8ohRd2nGN/Hej9GU+\nJfOglAniwhi6qWllQCHm6Z1rzC4KIAvGWKYn5tQ/8MguCDZRk7rddY9TAOZMPwVe\n42Vn07/h1F8fLJRUMzo8UvR6aE5e2I/cGnmf2Yq3iHOqroWtvLHVai2MWGOd5uO4\nCZtkeY8pdu/jmIHt5Crly6fr7IhzMW179HrOSM5+SDYD90hxYHomIV2kiewoNWvm\n/YAcYIHwLFabQmQOEIzl\n=RFfo\n-----END PGP SIGNATURE-----",
        "payload": "tree 1a22824142a9f8bb3d5dd4b324c28168d917efd3\nparent 5e3557b8e36308a27dbeb528569abe638c4d01dd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1468575767 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1468875405 +0200\n\n[Wallet] Ensure <0.13 clients can't open HD wallets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f137f367a898dc3acddc778c4fe9c53ac303c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f137f367a898dc3acddc778c4fe9c53ac303c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f137f367a898dc3acddc778c4fe9c53ac303c9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ae0a546ea1b389beba32a429109fb2cf4a34cf3a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4f137f367a898dc3acddc778c4fe9c53ac303c9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4f137f367a898dc3acddc778c4fe9c53ac303c9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a4f137f367a898dc3acddc778c4fe9c53ac303c9",
        "patch": "@@ -3299,6 +3299,9 @@ bool CWallet::InitLoadWallet()\n             key.MakeNewKey(true);\n             if (!walletInstance->SetHDMasterKey(key))\n                 throw std::runtime_error(\"CWallet::GenerateNewKey(): Storing master key failed\");\n+\n+            // ensure this wallet.dat can only be opened by clients supporting HD\n+            walletInstance->SetMinVersion(FEATURE_HD);\n         }\n         CPubKey newDefaultKey;\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {"
      },
      {
        "sha": "3a3cb6d8514c0bd5f6b0129c0008cab82425f559",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4f137f367a898dc3acddc778c4fe9c53ac303c9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4f137f367a898dc3acddc778c4fe9c53ac303c9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a4f137f367a898dc3acddc778c4fe9c53ac303c9",
        "patch": "@@ -78,7 +78,8 @@ enum WalletFeature\n     FEATURE_WALLETCRYPT = 40000, // wallet encryption\n     FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n \n-    FEATURE_LATEST = 60000\n+    FEATURE_HD = 130000, // Hierarchical key derivation after BIP32 (HD Wallet)\n+    FEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n };\n \n "
      }
    ]
  },
  {
    "sha": "fbc60703a53c1544054fe6ba0753d23d0508f4e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmM2MDcwM2E1M2MxNTQ0MDU0ZmU2YmEwNzUzZDIzZDA1MDhmNGU5",
    "commit": {
      "author": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2016-07-19T02:39:46Z"
      },
      "committer": {
        "name": "Thomas Snider",
        "email": "tjps636@gmail.com",
        "date": "2016-07-19T02:42:09Z"
      },
      "message": "[trivial] Switched constants to sizeof()",
      "tree": {
        "sha": "68fe783ea1aa9b98f781b5f09adac00db22bf0c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68fe783ea1aa9b98f781b5f09adac00db22bf0c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbc60703a53c1544054fe6ba0753d23d0508f4e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc60703a53c1544054fe6ba0753d23d0508f4e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbc60703a53c1544054fe6ba0753d23d0508f4e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc60703a53c1544054fe6ba0753d23d0508f4e9/comments",
    "author": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tjps",
      "id": 7519582,
      "node_id": "MDQ6VXNlcjc1MTk1ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7519582?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tjps",
      "html_url": "https://github.com/tjps",
      "followers_url": "https://api.github.com/users/tjps/followers",
      "following_url": "https://api.github.com/users/tjps/following{/other_user}",
      "gists_url": "https://api.github.com/users/tjps/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tjps/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tjps/subscriptions",
      "organizations_url": "https://api.github.com/users/tjps/orgs",
      "repos_url": "https://api.github.com/users/tjps/repos",
      "events_url": "https://api.github.com/users/tjps/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tjps/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 23,
      "deletions": 16
    },
    "files": [
      {
        "sha": "0f58e24a49aeb3297decd693304ddc1eccd3c237",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc60703a53c1544054fe6ba0753d23d0508f4e9/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc60703a53c1544054fe6ba0753d23d0508f4e9/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=fbc60703a53c1544054fe6ba0753d23d0508f4e9",
        "patch": "@@ -15,7 +15,7 @@\n #include <vector>\n \n \n-/** \n+/**\n  * secp256k1:\n  * const unsigned int PRIVATE_KEY_SIZE = 279;\n  * const unsigned int PUBLIC_KEY_SIZE  = 65;\n@@ -45,6 +45,8 @@ class CKey\n     //! The actual byte data\n     unsigned char vch[32];\n \n+    static_assert(sizeof(vch) == 32, \"vch must be 32 bytes in length to not break serialization\");\n+\n     //! Check whether the 32-byte array pointed to be vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n@@ -70,20 +72,19 @@ class CKey\n \n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n-        return a.fCompressed == b.fCompressed && a.size() == b.size() &&\n-               memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n+        return a.fCompressed == b.fCompressed &&\n+            a.size() == b.size() &&\n+            memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (pend - pbegin != 32) {\n+        if (pend - pbegin != sizeof(vch)) {\n             fValid = false;\n-            return;\n-        }\n-        if (Check(&pbegin[0])) {\n-            memcpy(vch, (unsigned char*)&pbegin[0], 32);\n+        } else if (Check(&pbegin[0])) {\n+            memcpy(vch, (unsigned char*)&pbegin[0], sizeof(vch));\n             fValid = true;\n             fCompressed = fCompressedIn;\n         } else {\n@@ -92,7 +93,7 @@ class CKey\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? 32 : 0); }\n+    unsigned int size() const { return (fValid ? sizeof(vch) : 0); }\n     const unsigned char* begin() const { return vch; }\n     const unsigned char* end() const { return vch + size(); }\n \n@@ -110,7 +111,7 @@ class CKey\n \n     /**\n      * Convert the private key to a CPrivKey (serialized OpenSSL private key data).\n-     * This is expensive. \n+     * This is expensive.\n      */\n     CPrivKey GetPrivKey() const;\n \n@@ -160,8 +161,11 @@ struct CExtKey {\n \n     friend bool operator==(const CExtKey& a, const CExtKey& b)\n     {\n-        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               a.chaincode == b.chaincode && a.key == b.key;\n+        return a.nDepth == b.nDepth &&\n+            memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], sizeof(vchFingerprint)) == 0 &&\n+            a.nChild == b.nChild &&\n+            a.chaincode == b.chaincode &&\n+            a.key == b.key;\n     }\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;"
      },
      {
        "sha": "aebfdbc82662880a21cb4ea95b874dd34dace94c",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc60703a53c1544054fe6ba0753d23d0508f4e9/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc60703a53c1544054fe6ba0753d23d0508f4e9/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=fbc60703a53c1544054fe6ba0753d23d0508f4e9",
        "patch": "@@ -13,7 +13,7 @@\n #include <stdexcept>\n #include <vector>\n \n-/** \n+/**\n  * secp256k1:\n  * const unsigned int PRIVATE_KEY_SIZE = 279;\n  * const unsigned int PUBLIC_KEY_SIZE  = 65;\n@@ -156,7 +156,7 @@ class CPubKey\n \n     /*\n      * Check syntactic correctness.\n-     * \n+     *\n      * Note that this is consensus critical as CheckSig() calls it!\n      */\n     bool IsValid() const\n@@ -203,8 +203,11 @@ struct CExtPubKey {\n \n     friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)\n     {\n-        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               a.chaincode == b.chaincode && a.pubkey == b.pubkey;\n+        return a.nDepth == b.nDepth &&\n+            memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], sizeof(vchFingerprint)) == 0 &&\n+            a.nChild == b.nChild &&\n+            a.chaincode == b.chaincode &&\n+            a.pubkey == b.pubkey;\n     }\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;"
      }
    ]
  },
  {
    "sha": "ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTc1NTBlMTI4YTNmYTU2YmFhMTI5ZmM4OWQ4MDAwYmExNmE4YWU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-19T10:09:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-19T10:09:15Z"
      },
      "message": "Merge #8363: Rename \"block cost\" to \"block weight\"\n\n2c06bae Rename \"block cost\" to \"block weight\" (Suhas Daftuar)",
      "tree": {
        "sha": "931520ad5742b9a758a4bd9143fdfe96f180ab79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/931520ad5742b9a758a4bd9143fdfe96f180ab79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXjfxLAAoJEHSBCwEjRsmmE9YIAK0TnOKfHs7pzgxtN1L4uSRH\njowcTq+RvjLBQE5jo+4ZLueOO9PSWn2ZW1F7jCRFli4Ru1JoZWO0rYJ6SqsH3KjZ\n4LS9GTlAcbnwen2IPC+79C9zhWGP9Jpp9lYGiNy4PiUIjgQtIscU9NZOf6dH3wed\n6T/78Q3SFhXTO3bJQtTGmwmNelhbWmVGLlakB0AdFrcImypObZLIAS93FnWmrs9h\nMRuDHwzIbg421NMXJa5iOI16LCuzu5GeR9xciHfVxWlkJB3zJ3J6FOuYeksPiQuL\nRHpH+aoCpVCnNahA3/Th2i0sl2BWpPJllWy/PALGy2ZH64w97XgW3R2ONc+jgMg=\n=0dJc\n-----END PGP SIGNATURE-----",
        "payload": "tree 931520ad5742b9a758a4bd9143fdfe96f180ab79\nparent 5e3557b8e36308a27dbeb528569abe638c4d01dd\nparent 2c06bae39edfaa9c0855d83377ad8fda09e4fa08\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1468922951 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1468922955 +0200\n\nMerge #8363: Rename \"block cost\" to \"block weight\"\n\n2c06bae Rename \"block cost\" to \"block weight\" (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd"
      },
      {
        "sha": "2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c06bae39edfaa9c0855d83377ad8fda09e4fa08"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 69,
      "deletions": 69
    },
    "files": [
      {
        "sha": "fa2c5d1f05e24e4d6dc5d482af485590b68e5e46",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -1065,12 +1065,12 @@ def test_block_relay(self, segwit_activated):\n             assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n             assert_equal(wit_block.serialize(True), block.serialize(True))\n \n-            # Test size, vsize, cost\n+            # Test size, vsize, weight\n             rpc_details = self.nodes[0].getblock(block.hash, True)\n             assert_equal(rpc_details[\"size\"], len(block.serialize(True)))\n             assert_equal(rpc_details[\"strippedsize\"], len(block.serialize(False)))\n-            cost = 3*len(block.serialize(False)) + len(block.serialize(True))\n-            assert_equal(rpc_details[\"cost\"], cost)\n+            weight = 3*len(block.serialize(False)) + len(block.serialize(True))\n+            assert_equal(rpc_details[\"weight\"], weight)\n \n             # Upgraded node should not ask for blocks from unupgraded\n             block4 = self.build_next_block(nVersion=4)"
      },
      {
        "sha": "690856586604e67b79d81003695d10cca5c77a31",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -10,8 +10,8 @@\n \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n-/** The maximum allowed cost for a block, see BIP 141 (network rule) */\n-static const unsigned int MAX_BLOCK_COST = 4000000;\n+/** The maximum allowed weight for a block, see BIP 141 (network rule) */\n+static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */"
      },
      {
        "sha": "312dfe1699c086ee920a9723a2bd28e86ffcee01",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -452,7 +452,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxcost=<n>\", strprintf(_(\"Set maximum BIP141 block cost (default: %d)\"), DEFAULT_BLOCK_MAX_COST));\n+    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     if (showDebug)"
      },
      {
        "sha": "fe19895f5fbcccbb2094415a420c6ab035c95aa3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -694,8 +694,8 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     // have been mined or received.\n     // 100 orphans, each of which is at most 99,999 bytes big is\n     // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n-    unsigned int sz = GetTransactionCost(tx);\n-    if (sz >= MAX_STANDARD_TX_COST)\n+    unsigned int sz = GetTransactionWeight(tx);\n+    if (sz >= MAX_STANDARD_TX_WEIGHT)\n     {\n         LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n         return false;\n@@ -3596,13 +3596,13 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     }\n \n     // After the coinbase witness nonce and commitment are verified,\n-    // we can check if the block cost passes (before we've checked the\n-    // coinbase witness, it would be possible for the cost to be too\n+    // we can check if the block weight passes (before we've checked the\n+    // coinbase witness, it would be possible for the weight to be too\n     // large by filling up the coinbase witness, which doesn't change\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n-    if (GetBlockCost(block) > MAX_BLOCK_COST) {\n-        return state.DoS(100, error(\"ContextualCheckBlock(): cost limit failed\"), REJECT_INVALID, \"bad-blk-cost\");\n+    if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n+        return state.DoS(100, error(\"ContextualCheckBlock(): weight limit failed\"), REJECT_INVALID, \"bad-blk-weight\");\n     }\n \n     return true;"
      },
      {
        "sha": "27121890f6d709e702893e90ba7eb5dddf00501e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -155,7 +155,7 @@ typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n-extern uint64_t nLastBlockCost;\n+extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;\n extern CConditionVariable cvBlockChange;"
      },
      {
        "sha": "25a5becf93efa889ff7cda6d285af5abd6bc9925",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -45,7 +45,7 @@ using namespace std;\n \n uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n-uint64_t nLastBlockCost = 0;\n+uint64_t nLastBlockWeight = 0;\n \n class ScoreCompare\n {\n@@ -77,30 +77,30 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n     : chainparams(_chainparams)\n {\n     // Block resource limits\n-    // If neither -blockmaxsize or -blockmaxcost is given, limit to DEFAULT_BLOCK_MAX_*\n+    // If neither -blockmaxsize or -blockmaxweight is given, limit to DEFAULT_BLOCK_MAX_*\n     // If only one is given, only restrict the specified resource.\n     // If both are given, restrict both.\n-    nBlockMaxCost = DEFAULT_BLOCK_MAX_COST;\n+    nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n     nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n-    bool fCostSet = false;\n-    if (mapArgs.count(\"-blockmaxcost\")) {\n-        nBlockMaxCost = GetArg(\"-blockmaxcost\", DEFAULT_BLOCK_MAX_COST);\n+    bool fWeightSet = false;\n+    if (mapArgs.count(\"-blockmaxweight\")) {\n+        nBlockMaxWeight = GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n         nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n-        fCostSet = true;\n+        fWeightSet = true;\n     }\n     if (mapArgs.count(\"-blockmaxsize\")) {\n         nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-        if (!fCostSet) {\n-            nBlockMaxCost = nBlockMaxSize * WITNESS_SCALE_FACTOR;\n+        if (!fWeightSet) {\n+            nBlockMaxWeight = nBlockMaxSize * WITNESS_SCALE_FACTOR;\n         }\n     }\n \n-    // Limit cost to between 4K and MAX_BLOCK_COST-4K for sanity:\n-    nBlockMaxCost = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_COST-4000), nBlockMaxCost));\n+    // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n+    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_WEIGHT-4000), nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n \n-    // Whether we need to account for byte usage (in addition to cost usage)\n+    // Whether we need to account for byte usage (in addition to weight usage)\n     fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000);\n }\n \n@@ -110,7 +110,7 @@ void BlockAssembler::resetBlock()\n \n     // Reserve space for coinbase tx\n     nBlockSize = 1000;\n-    nBlockCost = 4000;\n+    nBlockWeight = 4000;\n     nBlockSigOpsCost = 400;\n     fIncludeWitness = false;\n \n@@ -167,7 +167,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     nLastBlockTx = nBlockTx;\n     nLastBlockSize = nBlockSize;\n-    nLastBlockCost = nBlockCost;\n+    nLastBlockWeight = nBlockWeight;\n     LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOpsCost);\n \n     // Create coinbase transaction.\n@@ -223,8 +223,8 @@ void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n \n bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost)\n {\n-    // TODO: switch to cost-based accounting for packages instead of vsize-based accounting.\n-    if (nBlockCost + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxCost)\n+    // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n+    if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n         return false;\n     if (nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST)\n         return false;\n@@ -257,17 +257,17 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\n \n bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)\n {\n-    if (nBlockCost + iter->GetTxCost() >= nBlockMaxCost) {\n+    if (nBlockWeight + iter->GetTxWeight() >= nBlockMaxWeight) {\n         // If the block is so close to full that no more txs will fit\n         // or if we've tried more than 50 times to fill remaining space\n         // then flag that the block is finished\n-        if (nBlockCost >  nBlockMaxCost - 400 || lastFewTxs > 50) {\n+        if (nBlockWeight >  nBlockMaxWeight - 400 || lastFewTxs > 50) {\n              blockFinished = true;\n              return false;\n         }\n-        // Once we're within 4000 cost of a full block, only look at 50 more txs\n+        // Once we're within 4000 weight of a full block, only look at 50 more txs\n         // to try to fill the remaining space.\n-        if (nBlockCost > nBlockMaxCost - 4000) {\n+        if (nBlockWeight > nBlockMaxWeight - 4000) {\n             lastFewTxs++;\n         }\n         return false;\n@@ -315,7 +315,7 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     if (fNeedSizeAccounting) {\n         nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n     }\n-    nBlockCost += iter->GetTxCost();\n+    nBlockWeight += iter->GetTxWeight();\n     ++nBlockTx;\n     nBlockSigOpsCost += iter->GetSigOpCost();\n     nFees += iter->GetFee();"
      },
      {
        "sha": "11753f5e43787d361d589ade9d6b0bccef87df97",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -141,11 +141,11 @@ class BlockAssembler\n \n     // Configuration parameters for the block size\n     bool fIncludeWitness;\n-    unsigned int nBlockMaxCost, nBlockMaxSize;\n+    unsigned int nBlockMaxWeight, nBlockMaxSize;\n     bool fNeedSizeAccounting;\n \n     // Information on the current status of the block\n-    uint64_t nBlockCost;\n+    uint64_t nBlockWeight;\n     uint64_t nBlockSize;\n     uint64_t nBlockTx;\n     uint64_t nBlockSigOpsCost;"
      },
      {
        "sha": "8617db00c8608cf3497582f3280a1faed31bd500",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -64,8 +64,8 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n     // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = GetTransactionCost(tx);\n-    if (sz >= MAX_STANDARD_TX_COST) {\n+    unsigned int sz = GetTransactionWeight(tx);\n+    if (sz >= MAX_STANDARD_TX_WEIGHT) {\n         reason = \"tx-size\";\n         return false;\n     }\n@@ -151,12 +151,12 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-int64_t GetVirtualTransactionSize(int64_t nCost)\n+int64_t GetVirtualTransactionSize(int64_t nWeight)\n {\n-    return (nCost + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+    return (nWeight + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n }\n \n int64_t GetVirtualTransactionSize(const CTransaction& tx)\n {\n-    return GetVirtualTransactionSize(GetTransactionCost(tx));\n+    return GetVirtualTransactionSize(GetTransactionWeight(tx));\n }"
      },
      {
        "sha": "f5f8652fb5a720998eb07b9477fce66b63a721bd",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -18,10 +18,10 @@ class CCoinsViewCache;\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n-/** Default for -blockmaxcost, which control the range of block costs the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_COST = 3000000;\n-/** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_COST = 400000;\n+/** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n+/** The maximum weight for transactions we're willing to relay/mine */\n+static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n@@ -66,8 +66,8 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n-/** Compute the virtual transaction size (cost reinterpreted as bytes). */\n-int64_t GetVirtualTransactionSize(int64_t nCost);\n+/** Compute the virtual transaction size (weight reinterpreted as bytes). */\n+int64_t GetVirtualTransactionSize(int64_t nWeight);\n int64_t GetVirtualTransactionSize(const CTransaction& tx);\n \n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "0e6ab4dd718b37f19c102e28eb5b3c821afb915e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -32,11 +32,11 @@ std::string CBlock::ToString() const\n     return s.str();\n }\n \n-int64_t GetBlockCost(const CBlock& block)\n+int64_t GetBlockWeight(const CBlock& block)\n {\n-    // This implements the cost = (stripped_size * 4) + witness_size formula,\n+    // This implements the weight = (stripped_size * 4) + witness_size formula,\n     // using only serialization with and without witness data. As witness_size\n     // is equal to total_size - stripped_size, this formula is identical to:\n-    // cost = (stripped_size * 3) + total_size.\n+    // weight = (stripped_size * 3) + total_size.\n     return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "72dfed985ae937b3b37cd818df77a3f7dcafd8df",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -154,7 +154,7 @@ struct CBlockLocator\n     }\n };\n \n-/** Compute the consensus-critical block cost (see BIP 141). */\n-int64_t GetBlockCost(const CBlock& tx);\n+/** Compute the consensus-critical block weight (see BIP 141). */\n+int64_t GetBlockWeight(const CBlock& tx);\n \n #endif // BITCOIN_PRIMITIVES_BLOCK_H"
      },
      {
        "sha": "8d6380564365e755db18d30a8c86616703f997b4",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -121,7 +121,7 @@ unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n     // Providing any more cleanup incentive than making additional inputs free would\n     // risk encouraging people to create junk outputs to redeem later.\n     if (nTxSize == 0)\n-        nTxSize = (GetTransactionCost(*this) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+        nTxSize = (GetTransactionWeight(*this) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n     for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n     {\n         unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n@@ -149,7 +149,7 @@ std::string CTransaction::ToString() const\n     return str;\n }\n \n-int64_t GetTransactionCost(const CTransaction& tx)\n+int64_t GetTransactionWeight(const CTransaction& tx)\n {\n     return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "d37890667f9ddcaa79c947e051b462151e20ffb3",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -459,7 +459,7 @@ struct CMutableTransaction\n     uint256 GetHash() const;\n };\n \n-/** Compute the cost of a transaction, as defined by BIP 141 */\n-int64_t GetTransactionCost(const CTransaction &tx);\n+/** Compute the weight of a transaction, as defined by BIP 141 */\n+int64_t GetTransactionWeight(const CTransaction &tx);\n \n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "9dc896b7af281e986ebed62cdffea673c3c895bf",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -101,7 +101,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n-    result.push_back(Pair(\"cost\", (int)::GetBlockCost(block)));\n+    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n@@ -559,7 +559,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n             \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n             \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n-            \"  \\\"cost\\\" : n             (numeric) The block cost\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight (BIP 141)\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\""
      },
      {
        "sha": "92ca4bab6bc1eee4ad220932897a20b39f8b4048",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -224,7 +224,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n             \"  \\\"currentblocksize\\\": nnn,   (numeric) The last block size\\n\"\n-            \"  \\\"currentblockcost\\\": nnn,   (numeric) The last block cost\\n\"\n+            \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"          (string) Current errors\\n\"\n@@ -243,7 +243,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n     obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n-    obj.push_back(Pair(\"currentblockcost\", (uint64_t)nLastBlockCost));\n+    obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n@@ -358,7 +358,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"         ],\\n\"\n             \"         \\\"fee\\\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n             \"         \\\"sigops\\\" : n,               (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n-            \"         \\\"cost\\\" : n,                 (numeric) total transaction size cost, as counted for purposes of block limits\\n\"\n+            \"         \\\"weight\\\" : n,               (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n             \"         \\\"required\\\" : true|false     (boolean) if provided and true, this transaction must be in the final block\\n\"\n             \"      }\\n\"\n             \"      ,...\\n\"\n@@ -377,7 +377,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",   (string) A range of valid nonces\\n\"\n             \"  \\\"sigoplimit\\\" : n,                 (numeric) cost limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n-            \"  \\\"costlimit\\\" : n,                  (numeric) limit of block cost\\n\"\n+            \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n             \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"bits\\\" : \\\"xxx\\\",                 (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n@@ -575,7 +575,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         int index_in_template = i - 1;\n         entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n         entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOpsCost[index_in_template]));\n-        entry.push_back(Pair(\"cost\", GetTransactionCost(tx)));\n+        entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n \n         transactions.push_back(entry);\n     }\n@@ -659,7 +659,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS_COST));\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n-    result.push_back(Pair(\"costlimit\", (int64_t)MAX_BLOCK_COST));\n+    result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      },
      {
        "sha": "691baa674403f9d380bc0f08ee6b0fb0d67a2106",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -28,7 +28,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n-    nTxCost = GetTransactionCost(_tx);\n+    nTxWeight = GetTransactionWeight(_tx);\n     nModSize = _tx.CalculateModifiedSize(GetTxSize());\n     nUsageSize = RecursiveDynamicUsage(*tx) + memusage::DynamicUsage(tx);\n \n@@ -75,7 +75,7 @@ void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)\n \n size_t CTxMemPoolEntry::GetTxSize() const\n {\n-    return GetVirtualTransactionSize(nTxCost);\n+    return GetVirtualTransactionSize(nTxWeight);\n }\n \n // Update the given tx for any in-mempool descendants."
      },
      {
        "sha": "2c2127f326de2cce875c5a4c3689dbb7f25d6b0c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -78,7 +78,7 @@ class CTxMemPoolEntry\n private:\n     std::shared_ptr<const CTransaction> tx;\n     CAmount nFee;              //!< Cached to avoid expensive parent-transaction lookups\n-    size_t nTxCost;            //!< ... and avoid recomputing tx cost (also used for GetTxSize())\n+    size_t nTxWeight;          //!< ... and avoid recomputing tx weight (also used for GetTxSize())\n     size_t nModSize;           //!< ... and modified size for priority\n     size_t nUsageSize;         //!< ... and total memory usage\n     int64_t nTime;             //!< Local time when entering the mempool\n@@ -122,7 +122,7 @@ class CTxMemPoolEntry\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const;\n-    size_t GetTxCost() const { return nTxCost; }\n+    size_t GetTxWeight() const { return nTxWeight; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }"
      },
      {
        "sha": "4b6d98025d55b075fbe760d05a18e21c81012868",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca7550e128a3fa56baa129fc89d8000ba16a8ae5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "patch": "@@ -2356,7 +2356,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);\n \n                 // Limit size\n-                if (GetTransactionCost(txNew) >= MAX_STANDARD_TX_COST)\n+                if (GetTransactionWeight(txNew) >= MAX_STANDARD_TX_WEIGHT)\n                 {\n                     strFailReason = _(\"Transaction too large\");\n                     return false;"
      }
    ]
  },
  {
    "sha": "045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDUxMDZiNGYxM2MxZDZmM2E0ZjY1ZDZkZGRjNmFjMWUxNTAwM2Ji",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-19T10:12:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-19T10:13:12Z"
      },
      "message": "Merge #8367: [Wallet] Ensure <0.13 clients can't open HD wallets\n\na4f137f [Wallet] Ensure <0.13 clients can't open HD wallets (Jonas Schnelli)",
      "tree": {
        "sha": "a3690d017ef5423bcdf8a082bb22c830d34afbc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3690d017ef5423bcdf8a082bb22c830d34afbc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXjf04AAoJEHSBCwEjRsmmAM0IALrKzroucZ/krMEdisVeAjUz\nOhfURhniGJTBno6YKqWEM/565n2LwieQnJjuUdUZ4mTtl68MP50Ybq+viN1egoTh\n756Swm6jwRVJQRz3XR+GiA/YCUY7+hdLufuGMAJAQ3p9dL1njKV18d+UfylRXm01\nJTXvXV2vcvk72YiVYnQcs4dgjjn/weGEgl/j98UsS8Ih9sooYd1II6hBKHm8/5DM\nCmn9DnJODcVOv3ea/GlbRH2UKowLWUHjPAwya7AQLzJvdzBNJA/1NPttbmJKqv1Q\nVlpfWmYW7uwgWis/VNVABSSaaIRSSK6YM++tAo4cTvJIB5W9kU6FhGG6AmOymhk=\n=8gCb\n-----END PGP SIGNATURE-----",
        "payload": "tree a3690d017ef5423bcdf8a082bb22c830d34afbc8\nparent ca7550e128a3fa56baa129fc89d8000ba16a8ae5\nparent a4f137f367a898dc3acddc778c4fe9c53ac303c9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1468923178 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1468923192 +0200\n\nMerge #8367: [Wallet] Ensure <0.13 clients can't open HD wallets\n\na4f137f [Wallet] Ensure <0.13 clients can't open HD wallets (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca7550e128a3fa56baa129fc89d8000ba16a8ae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca7550e128a3fa56baa129fc89d8000ba16a8ae5"
      },
      {
        "sha": "a4f137f367a898dc3acddc778c4fe9c53ac303c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f137f367a898dc3acddc778c4fe9c53ac303c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f137f367a898dc3acddc778c4fe9c53ac303c9"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a76085de3093a6a4950a51c5fec3c452b1e6e5b5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "patch": "@@ -3299,6 +3299,9 @@ bool CWallet::InitLoadWallet()\n             key.MakeNewKey(true);\n             if (!walletInstance->SetHDMasterKey(key))\n                 throw std::runtime_error(\"CWallet::GenerateNewKey(): Storing master key failed\");\n+\n+            // ensure this wallet.dat can only be opened by clients supporting HD\n+            walletInstance->SetMinVersion(FEATURE_HD);\n         }\n         CPubKey newDefaultKey;\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {"
      },
      {
        "sha": "3a3cb6d8514c0bd5f6b0129c0008cab82425f559",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "patch": "@@ -78,7 +78,8 @@ enum WalletFeature\n     FEATURE_WALLETCRYPT = 40000, // wallet encryption\n     FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n \n-    FEATURE_LATEST = 60000\n+    FEATURE_HD = 130000, // Hierarchical key derivation after BIP32 (HD Wallet)\n+    FEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n };\n \n "
      }
    ]
  },
  {
    "sha": "ab942c15bd3854650afa810d7c22d7fd30d346c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjk0MmMxNWJkMzg1NDY1MGFmYTgxMGQ3YzIyZDdmZDMwZDM0NmMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-18T18:57:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-19T10:31:49Z"
      },
      "message": "Treat high-sigop transactions as larger rather than rejecting them",
      "tree": {
        "sha": "b1b4aeac333ab2f3b3b21a31d614e1674e0774f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1b4aeac333ab2f3b3b21a31d614e1674e0774f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab942c15bd3854650afa810d7c22d7fd30d346c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab942c15bd3854650afa810d7c22d7fd30d346c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab942c15bd3854650afa810d7c22d7fd30d346c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab942c15bd3854650afa810d7c22d7fd30d346c1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 15,
      "deletions": 12
    },
    "files": [
      {
        "sha": "8d4a2cafbfbb13af99fef6b0aa719513be842419",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ab942c15bd3854650afa810d7c22d7fd30d346c1",
        "patch": "@@ -446,7 +446,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n-    strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Minimum bytes per sigop in transactions we relay and mine (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n+    strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));"
      },
      {
        "sha": "e07d99ab0621094a381e2b459e825304433239f5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ab942c15bd3854650afa810d7c22d7fd30d346c1",
        "patch": "@@ -74,7 +74,6 @@ bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n bool fRequireStandard = true;\n-unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n@@ -1296,7 +1295,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n-        if ((nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST) || (nBytesPerSigOp && nSigOpsCost > nSize * WITNESS_SCALE_FACTOR / nBytesPerSigOp))\n+        if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d\", nSigOpsCost));\n "
      },
      {
        "sha": "631dc00d05dce74ffc956f18ef4dd65630b2e282",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ab942c15bd3854650afa810d7c22d7fd30d346c1",
        "patch": "@@ -124,7 +124,6 @@ static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n \n /** Default for -permitbaremultisig */\n static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n-static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n@@ -165,7 +164,6 @@ extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern bool fRequireStandard;\n-extern unsigned int nBytesPerSigOp;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;"
      },
      {
        "sha": "0cd3ac7119715e3bc34692e4d199c02a7d33584a",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=ab942c15bd3854650afa810d7c22d7fd30d346c1",
        "patch": "@@ -151,12 +151,14 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-int64_t GetVirtualTransactionSize(int64_t nWeight)\n+unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n+\n+int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)\n {\n-    return (nWeight + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+    return (std::max(nWeight, nSigOpCost * nBytesPerSigOp) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n }\n \n-int64_t GetVirtualTransactionSize(const CTransaction& tx)\n+int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost)\n {\n-    return GetVirtualTransactionSize(GetTransactionWeight(tx));\n+    return GetVirtualTransactionSize(GetTransactionWeight(tx), nSigOpCost);\n }"
      },
      {
        "sha": "b82c9e66b8852633453bb27aa0bf4e33a5e0e0a6",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=ab942c15bd3854650afa810d7c22d7fd30d346c1",
        "patch": "@@ -28,6 +28,8 @@ static const unsigned int MAX_P2SH_SIGOPS = 15;\n static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n+/** Default for -bytespersigop */\n+static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid\n@@ -66,8 +68,10 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n+extern unsigned int nBytesPerSigOp;\n+\n /** Compute the virtual transaction size (weight reinterpreted as bytes). */\n-int64_t GetVirtualTransactionSize(int64_t nWeight);\n-int64_t GetVirtualTransactionSize(const CTransaction& tx);\n+int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost);\n+int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost = 0);\n \n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "82827b8e4f193890fda423123548afd05b381637",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab942c15bd3854650afa810d7c22d7fd30d346c1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ab942c15bd3854650afa810d7c22d7fd30d346c1",
        "patch": "@@ -75,7 +75,7 @@ void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)\n \n size_t CTxMemPoolEntry::GetTxSize() const\n {\n-    return GetVirtualTransactionSize(nTxWeight);\n+    return GetVirtualTransactionSize(nTxWeight, sigOpCost);\n }\n \n // Update the given tx for any in-mempool descendants."
      }
    ]
  },
  {
    "sha": "3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjNjZTI1ZGY2Y2M4NGNkMWU3NWE3ZWMyMGZjN2RhOGQyZWY3NmUw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-07-19T19:41:36Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-07-19T19:43:07Z"
      },
      "message": "build: fix non-deterministic biplist\n\nThe non-deterministic ordering produced by biplist ends up in the .DS_Store\nfile that is included in the OSX dmg.",
      "tree": {
        "sha": "3257ce549fdaf6d8aba898d0cd9152b2d1779924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3257ce549fdaf6d8aba898d0cd9152b2d1779924"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3c6e8900f66465976a26b77a14683d8b9859c63e",
        "filename": "depends/packages/native_biplist.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0/depends/packages/native_biplist.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0/depends/packages/native_biplist.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_biplist.mk?ref=3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0",
        "patch": "@@ -4,6 +4,11 @@ $(package)_download_path=https://pypi.python.org/packages/source/b/biplist\n $(package)_file_name=biplist-$($(package)_version).tar.gz\n $(package)_sha256_hash=b57cadfd26e4754efdf89e9e37de87885f9b5c847b2615688ca04adfaf6ca604\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_patches=sorted_list.patch\n+\n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/sorted_list.patch\n+endef\n \n define $(package)_build_cmds\n     python setup.py build"
      },
      {
        "sha": "89abdb1b71ff81ffdcab8b138ae86d53b4a07442",
        "filename": "depends/patches/native_biplist/sorted_list.patch",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0/depends/patches/native_biplist/sorted_list.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0/depends/patches/native_biplist/sorted_list.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_biplist/sorted_list.patch?ref=3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0",
        "patch": "@@ -0,0 +1,29 @@\n+--- a/biplist/__init__.py\t2014-10-26 19:03:11.000000000 +0000\n++++ b/biplist/__init__.py\t2016-07-19 19:30:17.663521999 +0000\n+@@ -541,7 +541,7 @@\n+             return HashableWrapper(n)\n+         elif isinstance(root, dict):\n+             n = {}\n+-            for key, value in iteritems(root):\n++            for key, value in sorted(iteritems(root)):\n+                 n[self.wrapRoot(key)] = self.wrapRoot(value)\n+             return HashableWrapper(n)\n+         elif isinstance(root, list):\n+@@ -616,7 +616,7 @@\n+             elif isinstance(obj, dict):\n+                 size = proc_size(len(obj))\n+                 self.incrementByteCount('dictBytes', incr=1+size)\n+-                for key, value in iteritems(obj):\n++                for key, value in sorted(iteritems(obj)):\n+                     check_key(key)\n+                     self.computeOffsets(key, asReference=True)\n+                     self.computeOffsets(value, asReference=True)\n+@@ -714,7 +714,7 @@\n+                 keys = []\n+                 values = []\n+                 objectsToWrite = []\n+-                for key, value in iteritems(obj):\n++                for key, value in sorted(iteritems(obj)):\n+                     keys.append(key)\n+                     values.append(value)\n+                 for key in keys:"
      }
    ]
  },
  {
    "sha": "6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTIzZmNhYWIyZjA4MDhkNGU0N2I5Y2I5ZWJiZWY3ZWQ2OWEzMDll",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-20T05:30:17Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-20T05:30:17Z"
      },
      "message": "Move SetMinVersion for FEATURE_HD to SetHDMasterKey",
      "tree": {
        "sha": "c33fec039208ea70fe55cdbd4b074bf8dcbac32f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c33fec039208ea70fe55cdbd4b074bf8dcbac32f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5908dfeaceae6a606a4b5f905cfa31ecdfe18f9f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e",
        "patch": "@@ -1170,6 +1170,9 @@ bool CWallet::SetHDMasterKey(const CKey& key)\n {\n     LOCK(cs_wallet);\n \n+    // ensure this wallet.dat can only be opened by clients supporting HD\n+    SetMinVersion(FEATURE_HD);\n+\n     // store the key as normal \"key\"/\"ckey\" object\n     // in the database\n     // key metadata is not required\n@@ -3299,9 +3302,6 @@ bool CWallet::InitLoadWallet()\n             key.MakeNewKey(true);\n             if (!walletInstance->SetHDMasterKey(key))\n                 throw std::runtime_error(\"CWallet::GenerateNewKey(): Storing master key failed\");\n-\n-            // ensure this wallet.dat can only be opened by clients supporting HD\n-            walletInstance->SetMinVersion(FEATURE_HD);\n         }\n         CPubKey newDefaultKey;\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {"
      }
    ]
  },
  {
    "sha": "c98abf2c7099fa089cd9170dcdd118ba86356ffc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOThhYmYyYzcwOTlmYTA4OWNkOTE3MGRjZGQxMThiYTg2MzU2ZmZj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-20T07:09:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-20T07:10:18Z"
      },
      "message": "Merge #8373: Fix OSX non-deterministic dmg\n\n3b3ce25 build: fix non-deterministic biplist (Cory Fields)",
      "tree": {
        "sha": "3257ce549fdaf6d8aba898d0cd9152b2d1779924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3257ce549fdaf6d8aba898d0cd9152b2d1779924"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c98abf2c7099fa089cd9170dcdd118ba86356ffc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXjyPaAAoJEHSBCwEjRsmmflgIAKctDvGKQnjyYECqPYj3EHz2\nAUtyEp1D2I5CIEECfJOS0SCxSMTFOxTL28ThASndEXqDHm9uDzbIwzUd4/Sm234w\nLfwN29LgXXCJoIU7B73fWwtv5d5+gsz0HWyIFQaRWjQ1cDig4ikznuU44u11pcPs\nOwSBDc+hlRyuXoQey1BMqEgzvR7UQdg3UqjP1ZJG/y4XIse70ehWVAaEHQLOYGxg\n5a7NUyFbOZTvyXbEuaE9oEK6WrWvC4h+W1HTCfWhrFx0vfRsGl63oF6UvFbLCxQt\nNlSL+hkLBGxzl2oNe7spZ3+CuFZLuSpcnY9extjBXl+2NFn5QC6NS8f/fujsSPY=\n=2u/V\n-----END PGP SIGNATURE-----",
        "payload": "tree 3257ce549fdaf6d8aba898d0cd9152b2d1779924\nparent 045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb\nparent 3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1468998566 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1468998618 +0200\n\nMerge #8373: Fix OSX non-deterministic dmg\n\n3b3ce25 build: fix non-deterministic biplist (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98abf2c7099fa089cd9170dcdd118ba86356ffc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c98abf2c7099fa089cd9170dcdd118ba86356ffc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98abf2c7099fa089cd9170dcdd118ba86356ffc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/045106b4f13c1d6f3a4f65d6dddc6ac1e15003bb"
      },
      {
        "sha": "3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b3ce25df6cc84cd1e75a7ec20fc7da8d2ef76e0"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3c6e8900f66465976a26b77a14683d8b9859c63e",
        "filename": "depends/packages/native_biplist.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98abf2c7099fa089cd9170dcdd118ba86356ffc/depends/packages/native_biplist.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98abf2c7099fa089cd9170dcdd118ba86356ffc/depends/packages/native_biplist.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_biplist.mk?ref=c98abf2c7099fa089cd9170dcdd118ba86356ffc",
        "patch": "@@ -4,6 +4,11 @@ $(package)_download_path=https://pypi.python.org/packages/source/b/biplist\n $(package)_file_name=biplist-$($(package)_version).tar.gz\n $(package)_sha256_hash=b57cadfd26e4754efdf89e9e37de87885f9b5c847b2615688ca04adfaf6ca604\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_patches=sorted_list.patch\n+\n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/sorted_list.patch\n+endef\n \n define $(package)_build_cmds\n     python setup.py build"
      },
      {
        "sha": "89abdb1b71ff81ffdcab8b138ae86d53b4a07442",
        "filename": "depends/patches/native_biplist/sorted_list.patch",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98abf2c7099fa089cd9170dcdd118ba86356ffc/depends/patches/native_biplist/sorted_list.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98abf2c7099fa089cd9170dcdd118ba86356ffc/depends/patches/native_biplist/sorted_list.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_biplist/sorted_list.patch?ref=c98abf2c7099fa089cd9170dcdd118ba86356ffc",
        "patch": "@@ -0,0 +1,29 @@\n+--- a/biplist/__init__.py\t2014-10-26 19:03:11.000000000 +0000\n++++ b/biplist/__init__.py\t2016-07-19 19:30:17.663521999 +0000\n+@@ -541,7 +541,7 @@\n+             return HashableWrapper(n)\n+         elif isinstance(root, dict):\n+             n = {}\n+-            for key, value in iteritems(root):\n++            for key, value in sorted(iteritems(root)):\n+                 n[self.wrapRoot(key)] = self.wrapRoot(value)\n+             return HashableWrapper(n)\n+         elif isinstance(root, list):\n+@@ -616,7 +616,7 @@\n+             elif isinstance(obj, dict):\n+                 size = proc_size(len(obj))\n+                 self.incrementByteCount('dictBytes', incr=1+size)\n+-                for key, value in iteritems(obj):\n++                for key, value in sorted(iteritems(obj)):\n+                     check_key(key)\n+                     self.computeOffsets(key, asReference=True)\n+                     self.computeOffsets(value, asReference=True)\n+@@ -714,7 +714,7 @@\n+                 keys = []\n+                 values = []\n+                 objectsToWrite = []\n+-                for key, value in iteritems(obj):\n++                for key, value in sorted(iteritems(obj)):\n+                     keys.append(key)\n+                     values.append(value)\n+                 for key in keys:"
      }
    ]
  },
  {
    "sha": "8e048f40cc25b6ad3f49d2828c8562b657d91ced",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTA0OGY0MGNjMjViNmFkM2Y0OWQyODI4Yzg1NjJiNjU3ZDkxY2Vk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-20T09:57:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-20T09:57:30Z"
      },
      "message": "Merge #8378: [Wallet]Move SetMinVersion for FEATURE_HD to SetHDMasterKey\n\n6523fca Move SetMinVersion for FEATURE_HD to SetHDMasterKey (Patrick Strateman)",
      "tree": {
        "sha": "98f7f8582485b054f0c56689012da12d6a7744bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98f7f8582485b054f0c56689012da12d6a7744bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e048f40cc25b6ad3f49d2828c8562b657d91ced",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXj0sKAAoJEHSBCwEjRsmm8LIIAKmnavuh0e7rwvnN8iOHJ+0o\nG4KznACd2vk26Yd5ttYmZePTQ1TqOGeKTwv12PVpewa2tWXr1+XpKIkw9ODqKaFD\n0KwUh3/vgvjL2Lc/qdcndrUzZPGpDGjBlFtGGZGpaNZ2uk+USnMARJEFtxFeY2T9\nz20lT3hO15Z+uoqGu0uJGQxQXJz4fBKf/7+DXqcNzDyr5sGngGfa9Zy3B7aAwv84\n9qiLLG9+lBN/9xbzA4SXjWsY3rNsAwa3O1Dg3Fq2UeUQMnWw8kwgDsZVIXRgw4vc\npV1Va2BXDbiBwn0KxPdYNTWoUGlNifPx45yr9X8RO35ZX4rIrfCvPV+3WxkhkDY=\n=zzOX\n-----END PGP SIGNATURE-----",
        "payload": "tree 98f7f8582485b054f0c56689012da12d6a7744bd\nparent c98abf2c7099fa089cd9170dcdd118ba86356ffc\nparent 6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469008642 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469008650 +0200\n\nMerge #8378: [Wallet]Move SetMinVersion for FEATURE_HD to SetHDMasterKey\n\n6523fca Move SetMinVersion for FEATURE_HD to SetHDMasterKey (Patrick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e048f40cc25b6ad3f49d2828c8562b657d91ced",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e048f40cc25b6ad3f49d2828c8562b657d91ced",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e048f40cc25b6ad3f49d2828c8562b657d91ced/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c98abf2c7099fa089cd9170dcdd118ba86356ffc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98abf2c7099fa089cd9170dcdd118ba86356ffc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c98abf2c7099fa089cd9170dcdd118ba86356ffc"
      },
      {
        "sha": "6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6523fcaab2f0808d4e47b9cb9ebbef7ed69a309e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5908dfeaceae6a606a4b5f905cfa31ecdfe18f9f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e048f40cc25b6ad3f49d2828c8562b657d91ced/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e048f40cc25b6ad3f49d2828c8562b657d91ced/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "patch": "@@ -1170,6 +1170,9 @@ bool CWallet::SetHDMasterKey(const CKey& key)\n {\n     LOCK(cs_wallet);\n \n+    // ensure this wallet.dat can only be opened by clients supporting HD\n+    SetMinVersion(FEATURE_HD);\n+\n     // store the key as normal \"key\"/\"ckey\" object\n     // in the database\n     // key metadata is not required\n@@ -3299,9 +3302,6 @@ bool CWallet::InitLoadWallet()\n             key.MakeNewKey(true);\n             if (!walletInstance->SetHDMasterKey(key))\n                 throw std::runtime_error(\"CWallet::GenerateNewKey(): Storing master key failed\");\n-\n-            // ensure this wallet.dat can only be opened by clients supporting HD\n-            walletInstance->SetMinVersion(FEATURE_HD);\n         }\n         CPubKey newDefaultKey;\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {"
      }
    ]
  },
  {
    "sha": "a615386552f9981dc024cc4a0df758f8b0fda4d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjE1Mzg2NTUyZjk5ODFkYzAyNGNjNGEwZGY3NThmOGIwZmRhNGQ4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-06-22T09:56:07Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-07-21T08:20:17Z"
      },
      "message": "[depends] ZeroMQ 4.1.5",
      "tree": {
        "sha": "9c10f521cff8dc9b9be0a5f2377fd703b13a1479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c10f521cff8dc9b9be0a5f2377fd703b13a1479"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a615386552f9981dc024cc4a0df758f8b0fda4d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJXkIXBAAoJEC7rn1zAlSbBDgYP/06/BWhojni+kHg78GmiXkJS\nm5k4x63UdJjEqXqXCJ8KQTgd7aEt61O82AbrNAyMFQjgiryp1VWGSmbnAf6Db8LB\n9DDeSEZDnx37EDwiBM13E8fHQu2S7quaO3TncbEYoL0Woiv/r0+P5K1An7nSh7rQ\nJg3WIT4Ge2zxywowpVQZ1lO4PEds/Gk3M0eJm+MgxEnpi2jJgSzIdu/vKOU6a7CA\n3d57BRjbPVeR82NkTpDMEWFFzaYs2ZPDVidtLtcjMAwfnDTAQXTuKl4hznVRZbiX\new+1qT2znjb1EAT686RzgJGRGOJU8j1H1tT2U32N54BXg+jtnWJXvPvHQ3Dw6MQL\nGAJxwX2dlq1Aw8IUw9pwLiAX/t80i8KCdHfZ4yAZWHg5Q4plVc9YvfXouWQMObJ8\nmcVmGrgSU+cx3tCCuwrZH0SsZMUnrODMZUVKk2aUqKNfyrWxrMn8L5urdbm0PEEw\na7HUhRq0sNn7awu15rX+JDEQHOCPX9kuqSH8tytiMNLd7rxH35Nk+M0uHTLEylSK\n3aPxSi1msn/QthdKoPHVqgU+ULTL/XcM9uq8DWhMP4PmMo8q5bfeHDAVhs7NO0WJ\nIJty+5KbuZhXzPPryx9e+2IVzsZcdy09/qHPQDPYXiva7687x1XuoduWf8U/N2Bx\nHratPVIlqek48kxmSF+3\n=/KMi\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c10f521cff8dc9b9be0a5f2377fd703b13a1479\nparent 8e048f40cc25b6ad3f49d2828c8562b657d91ced\nauthor fanquake <fanquake@gmail.com> 1466589367 +0800\ncommitter fanquake <fanquake@gmail.com> 1469089217 +0800\n\n[depends] ZeroMQ 4.1.5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a615386552f9981dc024cc4a0df758f8b0fda4d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a615386552f9981dc024cc4a0df758f8b0fda4d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a615386552f9981dc024cc4a0df758f8b0fda4d8/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e048f40cc25b6ad3f49d2828c8562b657d91ced"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 65,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ef58cfc40d19d775cd2b55b6baa2ca09fd2d304b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a615386552f9981dc024cc4a0df758f8b0fda4d8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a615386552f9981dc024cc4a0df758f8b0fda4d8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a615386552f9981dc024cc4a0df758f8b0fda4d8",
        "patch": "@@ -816,6 +816,15 @@ else\n     AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n   fi\n \n+  if test \"x$use_zmq\" = \"xyes\"; then\n+    dnl Assume libzmq was built for static linking\n+    case $host in\n+      *mingw*)\n+        ZMQ_CFLAGS=\"$ZMQ_CFLAGS -DZMQ_STATIC\"\n+      ;;\n+    esac\n+  fi\n+\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])"
      },
      {
        "sha": "ba2a05248c04e3a96af440feb40ab3cfc6bb42f9",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a615386552f9981dc024cc4a0df758f8b0fda4d8/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a615386552f9981dc024cc4a0df758f8b0fda4d8/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=a615386552f9981dc024cc4a0df758f8b0fda4d8",
        "patch": "@@ -1,6 +1,4 @@\n-packages:=boost openssl libevent\n-darwin_packages:=zeromq\n-linux_packages:=zeromq\n+packages:=boost openssl libevent zeromq\n native_packages := native_ccache native_comparisontool\n \n qt_native_packages = native_protobuf\n@@ -12,7 +10,6 @@ qt_i686_linux_packages:=$(qt_x86_64_linux_packages)\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-\n wallet_packages=bdb\n \n upnp_packages=miniupnpc"
      },
      {
        "sha": "01146c26f69bc426f351424bc2cdcfded19e0b65",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a615386552f9981dc024cc4a0df758f8b0fda4d8/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a615386552f9981dc024cc4a0df758f8b0fda4d8/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=a615386552f9981dc024cc4a0df758f8b0fda4d8",
        "patch": "@@ -1,15 +1,22 @@\n package=zeromq\n-$(package)_version=4.1.4\n-$(package)_download_path=http://download.zeromq.org\n+$(package)_version=4.1.5\n+$(package)_download_path=https://github.com/zeromq/zeromq4-1/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=e99f44fde25c2e4cb84ce440f87ca7d3fe3271c2b8cfbc67d55e4de25e6fe378\n+$(package)_sha256_hash=04aac57f081ffa3a2ee5ed04887be9e205df3a7ddade0027460b8042432bdbcf\n+$(package)_patches=9114d3957725acd34aa8b8d011585812f3369411.patch 9e6745c12e0b100cd38acecc16ce7db02905e27c.patch\n \n define $(package)_set_vars\n-  $(package)_config_opts=--without-documentation --disable-shared --without-libsodium\n+  $(package)_config_opts=--without-documentation --disable-shared --without-libsodium --disable-curve\n   $(package)_config_opts_linux=--with-pic\n   $(package)_cxxflags=-std=c++11\n endef\n \n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/9114d3957725acd34aa8b8d011585812f3369411.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch && \\\n+  ./autogen.sh\n+endef\n+\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "f704b3d94fda8a2bd90ac422c8b267b02bc60f5c",
        "filename": "depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a615386552f9981dc024cc4a0df758f8b0fda4d8/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a615386552f9981dc024cc4a0df758f8b0fda4d8/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch?ref=a615386552f9981dc024cc4a0df758f8b0fda4d8",
        "patch": "@@ -0,0 +1,22 @@\n+From 9114d3957725acd34aa8b8d011585812f3369411 Mon Sep 17 00:00:00 2001\n+From: Jeroen Ooms <jeroenooms@gmail.com>\n+Date: Tue, 20 Oct 2015 13:10:38 +0200\n+Subject: [PATCH] enable static libraries on mingw\n+\n+---\n+ configure.ac | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/configure.ac b/configure.ac\n+index 393505b..e92131a 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -265,7 +265,7 @@ case \"${host_os}\" in\n+         libzmq_dso_visibility=\"no\"\n+\n+         if test \"x$enable_static\" = \"xyes\"; then\n+-            AC_MSG_ERROR([Building static libraries is not supported under MinGW32])\n++            CPPFLAGS=\"-DZMQ_STATIC\"\n+         fi\n+\n+ \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      },
      {
        "sha": "9aff2c179a1982e6af89a410d06c42d1a0fbad90",
        "filename": "depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a615386552f9981dc024cc4a0df758f8b0fda4d8/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a615386552f9981dc024cc4a0df758f8b0fda4d8/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch?ref=a615386552f9981dc024cc4a0df758f8b0fda4d8",
        "patch": "@@ -0,0 +1,22 @@\n+From 9e6745c12e0b100cd38acecc16ce7db02905e27c Mon Sep 17 00:00:00 2001\n+From: David Millard <dmillard10@gmail.com>\n+Date: Tue, 10 May 2016 13:53:53 -0700\n+Subject: [PATCH] Fix autotools for static MinGW builds\n+\n+---\n+ configure.ac | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/configure.ac b/configure.ac\n+index 5a0fa14..def6ea7 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -259,7 +259,7 @@ case \"${host_os}\" in\n+         libzmq_dso_visibility=\"no\"\n+\n+         if test \"x$enable_static\" = \"xyes\"; then\n+-            CPPFLAGS=\"-DZMQ_STATIC\"\n++            CPPFLAGS=\"-DZMQ_STATIC $CPPFLAGS\"\n+         fi\n+\n+ \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "6f4092da80bcbc9327ff7959b835842a1d30bcdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjQwOTJkYTgwYmNiYzkzMjdmZjc5NTliODM1ODQyYTFkMzBiY2Rk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-21T09:43:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-21T09:56:33Z"
      },
      "message": "Merge #8342: Consensus: Trivial transform BOOST_FOREACH into for loop\n\na3e1984 Consensus: Trivial transform BOOST_FOREACH into for loop (NicolasDorier)",
      "tree": {
        "sha": "264499bddbdca19737e1506afa12038571a785f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/264499bddbdca19737e1506afa12038571a785f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f4092da80bcbc9327ff7959b835842a1d30bcdd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXkJxRAAoJEHSBCwEjRsmmglEIAJJjcp+1xbTcjiHbeVWKaU0h\nO94btMcPgybRrh+zdoLZbULkE1XSMtYbDdBYGgFQc0VkC4453pSwSsHqcr8sacod\nCIzUJhBSmvRDnMu3YmliBTnlY4VQDqkKsTWV7X3d4wkBDX9FloDGELt5AbWG8KXf\nTTG0F4iJoIfqlJYNCF/sJ7B0zewMOX//qa3mdU4+OImOOrNiuHJF9nhlaQUs07d6\ngsXMHjrRV97lhAUZgxwxG1jiUJ3Z4FFPFtb2y5t3SWun+U+TzqYOCHLKAvJYTWFk\nbGsOZ0grE+eYs9iDzQe5vhHsv219jHouWLz2JbFeFODn6lVb/0nECKmtF8ngR0g=\n=YKfq\n-----END PGP SIGNATURE-----",
        "payload": "tree 264499bddbdca19737e1506afa12038571a785f1\nparent 8e048f40cc25b6ad3f49d2828c8562b657d91ced\nparent a3e19846519952a3d22e387031258a88ec24d280\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469094223 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469094993 +0200\n\nMerge #8342: Consensus: Trivial transform BOOST_FOREACH into for loop\n\na3e1984 Consensus: Trivial transform BOOST_FOREACH into for loop (NicolasDorier)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4092da80bcbc9327ff7959b835842a1d30bcdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4092da80bcbc9327ff7959b835842a1d30bcdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4092da80bcbc9327ff7959b835842a1d30bcdd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e048f40cc25b6ad3f49d2828c8562b657d91ced"
      },
      {
        "sha": "a3e19846519952a3d22e387031258a88ec24d280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3e19846519952a3d22e387031258a88ec24d280",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3e19846519952a3d22e387031258a88ec24d280"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "60c597797d56c1f5e02f3c7f90a5bd91a6f13058",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4092da80bcbc9327ff7959b835842a1d30bcdd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4092da80bcbc9327ff7959b835842a1d30bcdd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6f4092da80bcbc9327ff7959b835842a1d30bcdd",
        "patch": "@@ -788,7 +788,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         return true;\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (const auto& txin : tx.vin) {\n         if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n             return false;\n     }\n@@ -1002,11 +1002,11 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const auto& txin : tx.vin)\n     {\n         nSigOps += txin.scriptSig.GetSigOpCount(false);\n     }\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const auto& txout : tx.vout)\n     {\n         nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n     }\n@@ -1064,7 +1064,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+    for (const auto& txout : tx.vout)\n     {\n         if (txout.nValue < 0)\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n@@ -1077,7 +1077,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    for (const auto& txin : tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n             return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n@@ -1091,7 +1091,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     }\n     else\n     {\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        for (const auto& txin : tx.vin)\n             if (txin.prevout.IsNull())\n                 return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n@@ -3404,13 +3404,13 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n             return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", false, \"more than one coinbase\");\n \n     // Check transactions\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    for (const auto& tx : block.vtx)\n         if (!CheckTransaction(tx, state))\n             return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx.GetHash().ToString(), state.GetDebugMessage()));\n \n     unsigned int nSigOps = 0;\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+    for (const auto& tx : block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n@@ -3541,7 +3541,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n                               : block.GetBlockTime();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+    for (const auto& tx : block.vtx) {\n         if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", false, \"non-final transaction\");\n         }"
      }
    ]
  },
  {
    "sha": "7821889bce171ba44b27efe21439526e2aa7eb71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODIxODg5YmNlMTcxYmE0NGIyN2VmZTIxNDM5NTI2ZTJhYTdlYjcx",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-14T15:02:59Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-21T11:57:08Z"
      },
      "message": "Consensus: Remove calls to error() from ContextualCheckBlock",
      "tree": {
        "sha": "0c96f911c0ab62dc069934f1be740151cd39d800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c96f911c0ab62dc069934f1be740151cd39d800"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7821889bce171ba44b27efe21439526e2aa7eb71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821889bce171ba44b27efe21439526e2aa7eb71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7821889bce171ba44b27efe21439526e2aa7eb71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821889bce171ba44b27efe21439526e2aa7eb71/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f4092da80bcbc9327ff7959b835842a1d30bcdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4092da80bcbc9327ff7959b835842a1d30bcdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4092da80bcbc9327ff7959b835842a1d30bcdd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "90c6f57eff4a61810f1cc018dc4736fee3a308a1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7821889bce171ba44b27efe21439526e2aa7eb71/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7821889bce171ba44b27efe21439526e2aa7eb71/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7821889bce171ba44b27efe21439526e2aa7eb71",
        "patch": "@@ -3576,11 +3576,11 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n             // already does not permit it, it is impossible to trigger in the\n             // witness tree.\n             if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n-                return state.DoS(100, error(\"%s : invalid witness nonce size\", __func__), REJECT_INVALID, \"bad-witness-nonce-size\", true);\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", true, strprintf(\"%s : invalid witness nonce size\", __func__));\n             }\n             CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0].vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.DoS(100, error(\"%s : witness merkle commitment mismatch\", __func__), REJECT_INVALID, \"bad-witness-merkle-match\", true);\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-merkle-match\", true, strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n             fHaveWitness = true;\n         }\n@@ -3590,7 +3590,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     if (!fHaveWitness) {\n         for (size_t i = 0; i < block.vtx.size(); i++) {\n             if (!block.vtx[i].wit.IsNull()) {\n-                return state.DoS(100, error(\"%s : unexpected witness data found\", __func__), REJECT_INVALID, \"unexpected-witness\", true);\n+                return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", true, strprintf(\"%s : unexpected witness data found\", __func__));\n             }\n         }\n     }\n@@ -3602,7 +3602,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n     if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n-        return state.DoS(100, error(\"ContextualCheckBlock(): weight limit failed\"), REJECT_INVALID, \"bad-blk-weight\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "04af3cfe8fa983180316b03f634865318c868b15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGFmM2NmZThmYTk4MzE4MDMxNmIwM2Y2MzQ4NjUzMThjODY4YjE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-21T12:05:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-21T12:09:27Z"
      },
      "message": "Merge #8341: Consensus: Remove calls to error() from ContextualCheckBlock\n\n7821889 Consensus: Remove calls to error() from ContextualCheckBlock (NicolasDorier)",
      "tree": {
        "sha": "0c96f911c0ab62dc069934f1be740151cd39d800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c96f911c0ab62dc069934f1be740151cd39d800"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04af3cfe8fa983180316b03f634865318c868b15",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXkLt3AAoJEHSBCwEjRsmmtcEIAKO5Cmwo5e8dEAwjKS5REEq5\n6Lpg8+f+5ROLV3QFGP9g+rXDeSfEybE2CGUUdpkFeGACxvT4MsCtkWWKczIls9wp\naHG8iPaQDaqBJgV5ZftnQydKwkPUX4+9EFvS+kZdmK0Blf8yyb4f+9xBamsKF3gH\nRSv0LWA0SL5Z83Y0plMXPFi60W8DBgEzw1BbK6VIfwA3tQYWjHpVOfHsP8+0eUtg\nFNRC3cYB95jcmOv9n9A1H2aOMcxvenWb1wZ0YalcccG/BaM2gSDtk00bX2kkLzp1\nm5u9FZaYv72R/DUHt5j3DfsN2kDTIhFkG0laydTlBgnjRLkJBBWL3EFcrxRWIXc=\n=io0W\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c96f911c0ab62dc069934f1be740151cd39d800\nparent 6f4092da80bcbc9327ff7959b835842a1d30bcdd\nparent 7821889bce171ba44b27efe21439526e2aa7eb71\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469102715 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469102967 +0200\n\nMerge #8341: Consensus: Remove calls to error() from ContextualCheckBlock\n\n7821889 Consensus: Remove calls to error() from ContextualCheckBlock (NicolasDorier)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04af3cfe8fa983180316b03f634865318c868b15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04af3cfe8fa983180316b03f634865318c868b15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04af3cfe8fa983180316b03f634865318c868b15/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f4092da80bcbc9327ff7959b835842a1d30bcdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4092da80bcbc9327ff7959b835842a1d30bcdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4092da80bcbc9327ff7959b835842a1d30bcdd"
      },
      {
        "sha": "7821889bce171ba44b27efe21439526e2aa7eb71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821889bce171ba44b27efe21439526e2aa7eb71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7821889bce171ba44b27efe21439526e2aa7eb71"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "90c6f57eff4a61810f1cc018dc4736fee3a308a1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04af3cfe8fa983180316b03f634865318c868b15/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04af3cfe8fa983180316b03f634865318c868b15/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=04af3cfe8fa983180316b03f634865318c868b15",
        "patch": "@@ -3576,11 +3576,11 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n             // already does not permit it, it is impossible to trigger in the\n             // witness tree.\n             if (block.vtx[0].wit.vtxinwit.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0].size() != 32) {\n-                return state.DoS(100, error(\"%s : invalid witness nonce size\", __func__), REJECT_INVALID, \"bad-witness-nonce-size\", true);\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", true, strprintf(\"%s : invalid witness nonce size\", __func__));\n             }\n             CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0].vout[commitpos].scriptPubKey[6], 32)) {\n-                return state.DoS(100, error(\"%s : witness merkle commitment mismatch\", __func__), REJECT_INVALID, \"bad-witness-merkle-match\", true);\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-merkle-match\", true, strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n             fHaveWitness = true;\n         }\n@@ -3590,7 +3590,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     if (!fHaveWitness) {\n         for (size_t i = 0; i < block.vtx.size(); i++) {\n             if (!block.vtx[i].wit.IsNull()) {\n-                return state.DoS(100, error(\"%s : unexpected witness data found\", __func__), REJECT_INVALID, \"unexpected-witness\", true);\n+                return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", true, strprintf(\"%s : unexpected witness data found\", __func__));\n             }\n         }\n     }\n@@ -3602,7 +3602,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n     if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n-        return state.DoS(100, error(\"ContextualCheckBlock(): weight limit failed\"), REJECT_INVALID, \"bad-blk-weight\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "381917f610e3c770acb5e323884e7eef6fd25841",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODE5MTdmNjEwZTNjNzcwYWNiNWUzMjM4ODRlN2VlZjZmZDI1ODQx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-21T12:30:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-21T12:31:40Z"
      },
      "message": "Merge #8347: Trivial: Make CBlockIndex param const in ContextualCheckBlockHeader and ContextualCheckBlock\n\n6f3d616 Trivial: Make CBlockIndex param const in ContextualCheckBlockHeader and ContextualCheckBlock (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "72562fe250ed19c3bb5ef4d5093c52666927d789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72562fe250ed19c3bb5ef4d5093c52666927d789"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/381917f610e3c770acb5e323884e7eef6fd25841",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXkMCsAAoJEHSBCwEjRsmmCtIIAMy+s55AvuI7fZh28EwqxwaC\n7Wak1YkdWgQpBRaJu9WPV/GiRnkIYubp9/BnjEEHT7Bi+vTJX6d+3UBHag1MPv1y\nrkx5kW0GPCY9nJ2jDyjf/YFjY6q+979DkuXm+5gN1fIWhZBExTLzvYOtTukHFFni\nw9ba/zQfStsrDX7dzmQITYtmi2tfhsXMtJgFxzeBtOjDDvstsl2k2vwcOQu0Y+sW\n8L1yUy3VM2C7l/BcsjoxIuG8N0+xWfYZSDgl7pv0naeScgvwTRajd/F8Dlik0wNK\nKg9dNkXCp+uNxfUw95n2SPelewIPHmqFIgZ5GFcIbqeYKLnkdwiN86HzTJA5ZyE=\n=tiv5\n-----END PGP SIGNATURE-----",
        "payload": "tree 72562fe250ed19c3bb5ef4d5093c52666927d789\nparent 04af3cfe8fa983180316b03f634865318c868b15\nparent 6f3d616dc8d6840c2293ffadd8cc3209f1100193\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469104246 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469104300 +0200\n\nMerge #8347: Trivial: Make CBlockIndex param const in ContextualCheckBlockHeader and ContextualCheckBlock\n\n6f3d616 Trivial: Make CBlockIndex param const in ContextualCheckBlockHeader and ContextualCheckBlock (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381917f610e3c770acb5e323884e7eef6fd25841",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/381917f610e3c770acb5e323884e7eef6fd25841",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381917f610e3c770acb5e323884e7eef6fd25841/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04af3cfe8fa983180316b03f634865318c868b15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04af3cfe8fa983180316b03f634865318c868b15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04af3cfe8fa983180316b03f634865318c868b15"
      },
      {
        "sha": "6f3d616dc8d6840c2293ffadd8cc3209f1100193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3d616dc8d6840c2293ffadd8cc3209f1100193",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3d616dc8d6840c2293ffadd8cc3209f1100193"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "124bc57e7d14ec2e3322d2443be2772462c9879f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/381917f610e3c770acb5e323884e7eef6fd25841/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/381917f610e3c770acb5e323884e7eef6fd25841/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=381917f610e3c770acb5e323884e7eef6fd25841",
        "patch": "@@ -3502,7 +3502,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     return commitment;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex * const pindexPrev, int64_t nAdjustedTime)\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n@@ -3525,7 +3525,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     const Consensus::Params& consensusParams = Params().GetConsensus();"
      },
      {
        "sha": "feaaaad750b1c5f591b147a58a4773f28c06a4ff",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/381917f610e3c770acb5e323884e7eef6fd25841/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/381917f610e3c770acb5e323884e7eef6fd25841/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=381917f610e3c770acb5e323884e7eef6fd25841",
        "patch": "@@ -447,8 +447,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()"
      }
    ]
  },
  {
    "sha": "b50e1ac298363a7733069f82709674d3a8cb3058",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTBlMWFjMjk4MzYzYTc3MzMwNjlmODI3MDk2NzRkM2E4Y2IzMDU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-21T19:52:30Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-21T19:58:12Z"
      },
      "message": "[Wallet] Correct hdmasterkeyid/masterkeyid name confusion",
      "tree": {
        "sha": "98f2da8e5b3debc452c781137245b1b80100de3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98f2da8e5b3debc452c781137245b1b80100de3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b50e1ac298363a7733069f82709674d3a8cb3058",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXkSlaAAoJECnUvLZBb1PsPgMQAKi2Q3U3AbU5B6TjNBpMJmSU\nT0YsvHplBLzSE3T1AudcuA3fa3bWGxt3t/NY7lZzWGB5r3Q1VUPyDNVdeAJv15d/\noubbQvPd9j7njvBMoP2b8RuZne5N6hDb2LvgPzcN4gl3hAY5ku/pM4gOSHU+12XP\nAwJcEJdE6UpKCdnx9truCRI23+IkVVQPwGwuBB1hAC5NvRuDombd/r7d4XSi1lF9\nyhHOedlBaljwqQRuKCQwSeLogsKB0COKtplcgvsclyUw5G4PGeK3rKE96DjrxHqV\njx5M6zqZ5CKvm6+HAOHbzVCTwv59Fk27cZueKn3NaosL+mSfzSss9EJcF3IUuVNp\npMoN84vVYDvFi8TZuwF0OpBS1reYcVmxuyUINueW8nAPfalwcx9JQU7ywVCGGn6H\nakhaRt+2iCAK7+fKmogZUiCoK2pl5JLYfItHj/5uNqFXl/GhYgT06iuEP9tOOPgA\ndkGgtA39i8+8/M9Cgo6FOMBOJxFguEZ/QG43vwjQwG9SFKt8+b/udayQncCcq4mq\nAMxgyLa/Xsa4p/4/vIYVqdshTSLIn7yYgtnCOj1hLPo9hEhBG7Ob1aXVTj6gjI7I\nZAvQuaPz9UonCCd+vUsEwjpDew/QxI//y1aWjZx1+cxJ1wtXV5oZpmZr8LusTlHq\nwgR6saKoNvEk3jCAZAZJ\n=69WV\n-----END PGP SIGNATURE-----",
        "payload": "tree 98f2da8e5b3debc452c781137245b1b80100de3e\nparent 381917f610e3c770acb5e323884e7eef6fd25841\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1469130750 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1469131092 +0200\n\n[Wallet] Correct hdmasterkeyid/masterkeyid name confusion\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50e1ac298363a7733069f82709674d3a8cb3058",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b50e1ac298363a7733069f82709674d3a8cb3058",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50e1ac298363a7733069f82709674d3a8cb3058/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "381917f610e3c770acb5e323884e7eef6fd25841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381917f610e3c770acb5e323884e7eef6fd25841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381917f610e3c770acb5e323884e7eef6fd25841"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c11da1e9a99896930b3a9c46bcf0795da6e5e334",
        "filename": "qa/rpc-tests/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50e1ac298363a7733069f82709674d3a8cb3058/qa/rpc-tests/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50e1ac298363a7733069f82709674d3a8cb3058/qa/rpc-tests/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-hd.py?ref=b50e1ac298363a7733069f82709674d3a8cb3058",
        "patch": "@@ -31,7 +31,7 @@ def run_test (self):\n         tmpdir = self.options.tmpdir\n \n         # Make sure we use hd, keep masterkeyid\n-        masterkeyid = self.nodes[1].getwalletinfo()['masterkeyid']\n+        masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n         assert_equal(len(masterkeyid), 40)\n \n         # Import a non-HD private key in the HD wallet"
      },
      {
        "sha": "4087b8e77b7a245b0783626bd505d2db6372b4ce",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50e1ac298363a7733069f82709674d3a8cb3058/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50e1ac298363a7733069f82709674d3a8cb3058/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b50e1ac298363a7733069f82709674d3a8cb3058",
        "patch": "@@ -2260,16 +2260,16 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n             \"Returns an object containing various wallet state info.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"txcount\\\": xxxxxxx,         (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n-            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"masterkeyid\\\": \\\"<hash160>\\\", (string) the Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"walletversion\\\": xxxxx,       (numeric) the wallet version\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,           (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"unconfirmed_balance\\\": xxx,   (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"immature_balance\\\": xxxxxx,   (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"txcount\\\": xxxxxxx,           (numeric) the total number of transactions in the wallet\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,      (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoolsize\\\": xxxx,          (numeric) how many new keys are pre-generated\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,           (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\", (string) the Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2291,7 +2291,7 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n     CKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n-         obj.push_back(Pair(\"masterkeyid\", masterKeyID.GetHex()));\n+         obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "1ffaff2f747af683513d6d74a7241d41e3f6e051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmZhZmYyZjc0N2FmNjgzNTEzZDZkNzRhNzI0MWQ0MWUzZjZlMDUx",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@users.noreply.github.com",
        "date": "2016-07-20T10:31:45Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-07-22T06:35:07Z"
      },
      "message": "Make witness v0 outputs non-standard before segwit activation",
      "tree": {
        "sha": "e1f4f43215830297e1c1e2781e7b9c2313a45200",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1f4f43215830297e1c1e2781e7b9c2313a45200"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ffaff2f747af683513d6d74a7241d41e3f6e051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffaff2f747af683513d6d74a7241d41e3f6e051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ffaff2f747af683513d6d74a7241d41e3f6e051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffaff2f747af683513d6d74a7241d41e3f6e051/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e048f40cc25b6ad3f49d2828c8562b657d91ced"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "70f0a424755a2abb59e6851fc6e9b609c3f06d0b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "patch": "@@ -1144,13 +1144,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     }\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n-    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n+    bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus());\n+    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n+    if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next"
      },
      {
        "sha": "de3996bb4a480a66847de053133b59be3740aa17",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "patch": "@@ -31,7 +31,7 @@\n      *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n      */\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n@@ -49,11 +49,14 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n     } else if (whichType == TX_NULL_DATA &&\n                (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n+          \n+    else if (!witnessEnabled && (whichType == TX_WITNESS_V0_KEYHASH || whichType == TX_WITNESS_V0_SCRIPTHASH))\n+        return false;\n \n     return whichType != TX_NONSTANDARD;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled)\n {\n     if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n@@ -92,7 +95,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+        if (!::IsStandard(txout.scriptPubKey, whichType, witnessEnabled)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }"
      },
      {
        "sha": "ad209d0306e2bbfb179632baae07f2670f019153",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffaff2f747af683513d6d74a7241d41e3f6e051/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "patch": "@@ -53,12 +53,12 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n                                                            LOCKTIME_MEDIAN_TIME_PAST;\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled = false);\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled = false);\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending"
      }
    ]
  },
  {
    "sha": "0df9ea42b888b0b5c0fa5866f012338c8f16374c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGY5ZWE0MmI4ODhiMGI1YzBmYTU4NjZmMDEyMzM4YzhmMTYzNzRj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-22T09:45:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-22T09:45:44Z"
      },
      "message": "Merge #8390: [Wallet] Correct hdmasterkeyid/masterkeyid name confusion\n\nb50e1ac [Wallet] Correct hdmasterkeyid/masterkeyid name confusion (Jonas Schnelli)",
      "tree": {
        "sha": "98f2da8e5b3debc452c781137245b1b80100de3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98f2da8e5b3debc452c781137245b1b80100de3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0df9ea42b888b0b5c0fa5866f012338c8f16374c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXketIAAoJECnUvLZBb1PsyQQP/27LnY5ll0ikWxublWPBPijH\nSDli0ihPL0N/t/vK1B7EIFFhoWPUz1SeHLRYdbxXm9YbikrWW/KW6Pw3TQW9cuV0\nwpLrNfEvwY/06Ylet833PEihMr87B/RQIKQqHa+wQNsIl9/5MiFrudCa0FLjedTH\n3Pr7/QSWs/ozpy6WSXaz45YLvUSrhRSlKS0oIaFZ6VC4aj1KbMvrZY9X1z45/a/3\n64fPGzOCmMA5WN8q3XXrMwFXaD914/jp0CzXNHscTbsFITsWo60uPvqatlA6qUwb\nFeiXRbHPG8C3GKrrilg240NDTP7kAqO/YBgxQzaaDXipCgtmU3w8fEvL+mAanYDP\n3LEdTCKlYbTjtR2Enf7bGK3EHdHyzU6OyqBEyB8qg3bJz4r1neSwXxFNMt0JJork\nJNWrB0uP0xdHHHFcYB3DgvJH9WybNyG5XCopMIi5UQc0xkyjwccFB3a39BBnolGw\nvC7yQVa/d6eLP/W4728LjwLw7cm1vtqD7ZJX5c+5jvsmJhBOOPwHYZVTpkIa5Y25\ntInDe572aaEmG782NytQ/YwyFuSLulyZwk7j+SoslnSNsm3+UrFsFwKtdPJAezcQ\n/vxQvjxd7L9CwwQeFB5pl3JWdClgsETvSA0oQSxz1rJJqUhDueVPZ93/uj3/Rp5W\nujbhl9chr6WX5L7pEtyR\n=6TM0\n-----END PGP SIGNATURE-----",
        "payload": "tree 98f2da8e5b3debc452c781137245b1b80100de3e\nparent 381917f610e3c770acb5e323884e7eef6fd25841\nparent b50e1ac298363a7733069f82709674d3a8cb3058\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1469180733 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1469180744 +0200\n\nMerge #8390: [Wallet] Correct hdmasterkeyid/masterkeyid name confusion\n\nb50e1ac [Wallet] Correct hdmasterkeyid/masterkeyid name confusion (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df9ea42b888b0b5c0fa5866f012338c8f16374c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0df9ea42b888b0b5c0fa5866f012338c8f16374c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df9ea42b888b0b5c0fa5866f012338c8f16374c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "381917f610e3c770acb5e323884e7eef6fd25841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381917f610e3c770acb5e323884e7eef6fd25841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381917f610e3c770acb5e323884e7eef6fd25841"
      },
      {
        "sha": "b50e1ac298363a7733069f82709674d3a8cb3058",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50e1ac298363a7733069f82709674d3a8cb3058",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b50e1ac298363a7733069f82709674d3a8cb3058"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c11da1e9a99896930b3a9c46bcf0795da6e5e334",
        "filename": "qa/rpc-tests/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df9ea42b888b0b5c0fa5866f012338c8f16374c/qa/rpc-tests/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df9ea42b888b0b5c0fa5866f012338c8f16374c/qa/rpc-tests/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-hd.py?ref=0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "patch": "@@ -31,7 +31,7 @@ def run_test (self):\n         tmpdir = self.options.tmpdir\n \n         # Make sure we use hd, keep masterkeyid\n-        masterkeyid = self.nodes[1].getwalletinfo()['masterkeyid']\n+        masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n         assert_equal(len(masterkeyid), 40)\n \n         # Import a non-HD private key in the HD wallet"
      },
      {
        "sha": "4087b8e77b7a245b0783626bd505d2db6372b4ce",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df9ea42b888b0b5c0fa5866f012338c8f16374c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df9ea42b888b0b5c0fa5866f012338c8f16374c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "patch": "@@ -2260,16 +2260,16 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n             \"Returns an object containing various wallet state info.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"txcount\\\": xxxxxxx,         (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n-            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"masterkeyid\\\": \\\"<hash160>\\\", (string) the Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"walletversion\\\": xxxxx,       (numeric) the wallet version\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,           (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"unconfirmed_balance\\\": xxx,   (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"immature_balance\\\": xxxxxx,   (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"txcount\\\": xxxxxxx,           (numeric) the total number of transactions in the wallet\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,      (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoolsize\\\": xxxx,          (numeric) how many new keys are pre-generated\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,           (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\", (string) the Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2291,7 +2291,7 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n     CKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n-         obj.push_back(Pair(\"masterkeyid\", masterKeyID.GetHex()));\n+         obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "c59c434b7d1211c13f7904b9bc675e16910a1c0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTljNDM0YjdkMTIxMWMxM2Y3OTA0YjliYzY3NWUxNjkxMGExYzBh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-22T15:09:45Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-07-22T16:01:02Z"
      },
      "message": "qa: Add test for standardness of segwit v0 outputs",
      "tree": {
        "sha": "f5ac045d8d2d967b462b0404da2471def4bc1655",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5ac045d8d2d967b462b0404da2471def4bc1655"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c59c434b7d1211c13f7904b9bc675e16910a1c0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59c434b7d1211c13f7904b9bc675e16910a1c0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c59c434b7d1211c13f7904b9bc675e16910a1c0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59c434b7d1211c13f7904b9bc675e16910a1c0a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffaff2f747af683513d6d74a7241d41e3f6e051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ffaff2f747af683513d6d74a7241d41e3f6e051"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 79,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cd02692b1e88c037a9e8e23de145c1a2922af7da",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59c434b7d1211c13f7904b9bc675e16910a1c0a/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59c434b7d1211c13f7904b9bc675e16910a1c0a/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=c59c434b7d1211c13f7904b9bc675e16910a1c0a",
        "patch": "@@ -1086,6 +1086,82 @@ def test_block_relay(self, segwit_activated):\n             self.old_node.announce_tx_and_wait_for_getdata(block4.vtx[0])\n             assert(block4.sha256 not in self.old_node.getdataset)\n \n+    # V0 segwit outputs should be standard after activation, but not before.\n+    def test_standardness_v0(self, segwit_activated):\n+        print(\"\\tTesting standardness of v0 outputs (%s activation)\" % (\"after\" if segwit_activated else \"before\"))\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        p2sh_pubkey = hash160(witness_program)\n+        p2sh_scriptPubKey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+\n+        # First prepare a p2sh output (so that spending it will pass standardness)\n+        p2sh_tx = CTransaction()\n+        p2sh_tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n+        p2sh_tx.vout = [CTxOut(self.utxo[0].nValue-1000, p2sh_scriptPubKey)]\n+        p2sh_tx.rehash()\n+\n+        # Mine it on test_node to create the confirmed output.\n+        self.test_node.test_transaction_acceptance(p2sh_tx, with_witness=True, accepted=True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # Now test standardness of v0 P2WSH outputs.\n+        # Start by creating a transaction with two outputs.\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n+        tx.vout = [CTxOut(p2sh_tx.vout[0].nValue-10000, scriptPubKey)]\n+        tx.vout.append(CTxOut(8000, scriptPubKey)) # Might burn this later\n+        tx.rehash()\n+\n+        self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=segwit_activated)\n+\n+        # Now create something that looks like a P2PKH output. This won't be spendable.\n+        scriptPubKey = CScript([OP_0, hash160(witness_hash)])\n+        tx2 = CTransaction()\n+        if segwit_activated:\n+            # if tx was accepted, then we spend the second output.\n+            tx2.vin = [CTxIn(COutPoint(tx.sha256, 1), b\"\")]\n+            tx2.vout = [CTxOut(7000, scriptPubKey)]\n+            tx2.wit.vtxinwit.append(CTxInWitness())\n+            tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        else:\n+            # if tx wasn't accepted, we just re-spend the p2sh output we started with.\n+            tx2.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n+            tx2.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, scriptPubKey)]\n+        tx2.rehash()\n+\n+        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=segwit_activated)\n+\n+        # Now update self.utxo for later tests.\n+        tx3 = CTransaction()\n+        if segwit_activated:\n+            # tx and tx2 were both accepted.  Don't bother trying to reclaim the\n+            # P2PKH output; just send tx's first output back to an anyone-can-spend.\n+            sync_mempools(self.nodes)\n+            tx3.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n+            tx3.vout = [CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE]))]\n+            tx3.wit.vtxinwit.append(CTxInWitness())\n+            tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+            tx3.rehash()\n+            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        else:\n+            # tx and tx2 didn't go anywhere; just clean up the p2sh_tx output.\n+            tx3.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n+            tx3.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, witness_program)]\n+            tx3.rehash()\n+            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+\n+\n     # Verify that future segwit upgraded transactions are non-standard,\n     # but valid in blocks. Can run this before and after segwit activation.\n     def test_segwit_versions(self):\n@@ -1658,6 +1734,7 @@ def run_test(self):\n         self.test_witness_tx_relay_before_segwit_activation()\n         self.test_block_relay(segwit_activated=False)\n         self.test_p2sh_witness(segwit_activated=False)\n+        self.test_standardness_v0(segwit_activated=False)\n \n         sync_blocks(self.nodes)\n \n@@ -1679,6 +1756,7 @@ def run_test(self):\n         self.test_witness_input_length()\n         self.test_block_relay(segwit_activated=True)\n         self.test_tx_relay_after_segwit_activation()\n+        self.test_standardness_v0(segwit_activated=True)\n         self.test_segwit_versions()\n         self.test_premature_coinbase_witness_spend()\n         self.test_signature_version_1()"
      },
      {
        "sha": "57df1f0b1956b22383d33a045643515bc2c57f33",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59c434b7d1211c13f7904b9bc675e16910a1c0a/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59c434b7d1211c13f7904b9bc675e16910a1c0a/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=c59c434b7d1211c13f7904b9bc675e16910a1c0a",
        "patch": "@@ -49,7 +49,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool w\n     } else if (whichType == TX_NULL_DATA &&\n                (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n-          \n+\n     else if (!witnessEnabled && (whichType == TX_WITNESS_V0_KEYHASH || whichType == TX_WITNESS_V0_SCRIPTHASH))\n         return false;\n "
      }
    ]
  },
  {
    "sha": "122786d0e0170c73536360b705af711e1338adbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjI3ODZkMGUwMTcwYzczNTM2MzYwYjcwNWFmNzExZTEzMzhhZGJm",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-21T23:27:55Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-07-22T16:02:53Z"
      },
      "message": "Consensus: Remove ISM",
      "tree": {
        "sha": "025090542ab4e14b665a4ee852cd0344ce243ee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/025090542ab4e14b665a4ee852cd0344ce243ee8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/122786d0e0170c73536360b705af711e1338adbf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/122786d0e0170c73536360b705af711e1338adbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/122786d0e0170c73536360b705af711e1338adbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/122786d0e0170c73536360b705af711e1338adbf/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "381917f610e3c770acb5e323884e7eef6fd25841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381917f610e3c770acb5e323884e7eef6fd25841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381917f610e3c770acb5e323884e7eef6fd25841"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 83,
      "deletions": 107
    },
    "files": [
      {
        "sha": "e903b2fbf07b329746081dfe0c98c3c322736bbc",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -71,9 +71,9 @@ def get_tests(self):\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n-        ''' 98 more version 3 blocks '''\n+        ''' 398 more version 3 blocks '''\n         test_blocks = []\n-        for i in range(98):\n+        for i in range(398):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -118,24 +118,6 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n-        '''\n-        Check that the new CLTV rules are enforced in the 751st version 4\n-        block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n-        cltv_invalidate(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 4\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        self.last_block_time += 1\n-        yield TestInstance([[block, False]])\n-\n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n         for i in range(199):\n@@ -169,6 +151,24 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n+        '''\n+        Check that the new CLTV rules are enforced in the 951st version 4\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n         ''' Mine 1 old version block, should be invalid '''\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3"
      },
      {
        "sha": "baa77b92a05bbfb69551245021bf9248bf2708c2",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -30,7 +30,8 @@ def run_test(self):\n         cnt = self.nodes[0].getblockcount()\n \n         # Mine some old-version blocks\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(200)\n+        cnt += 100\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 100):\n             raise AssertionError(\"Failed to mine 100 version=3 blocks\")"
      },
      {
        "sha": "3bad5af5e67a44dd623201d75980a4461162a434",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -79,9 +79,9 @@ def get_tests(self):\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n-        ''' 98 more version 2 blocks '''\n+        ''' 298 more version 2 blocks '''\n         test_blocks = []\n-        for i in range(98):\n+        for i in range(298):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 2\n             block.rehash()\n@@ -124,25 +124,7 @@ def get_tests(self):\n         self.last_block_time += 1\n         self.tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n-\n-        ''' \n-        Check that the new DERSIG rules are enforced in the 751st version 3\n-        block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n-        unDERify(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        self.last_block_time += 1\n-        yield TestInstance([[block, False]])\n+        yield TestInstance([[block, True]])       \n \n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n@@ -177,6 +159,24 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n+        ''' \n+        Check that the new DERSIG rules are enforced in the 951st version 3\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        unDERify(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n         ''' Mine 1 old version block, should be invalid '''\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 2"
      },
      {
        "sha": "c7c8ce73d99f5f00bfffc353a17c5cd924445868",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -71,11 +71,10 @@ class CMainParams : public CChainParams {\n     CMainParams() {\n         strNetworkID = \"main\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.nMajorityEnforceBlockUpgrade = 750;\n-        consensus.nMajorityRejectBlockOutdated = 950;\n-        consensus.nMajorityWindow = 1000;\n         consensus.BIP34Height = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n+        consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n+        consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -167,11 +166,10 @@ class CTestNetParams : public CChainParams {\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.nMajorityEnforceBlockUpgrade = 51;\n-        consensus.nMajorityRejectBlockOutdated = 75;\n-        consensus.nMajorityWindow = 100;\n         consensus.BIP34Height = 21111;\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n+        consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n+        consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -247,11 +245,10 @@ class CRegTestParams : public CChainParams {\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n-        consensus.nMajorityEnforceBlockUpgrade = 750;\n-        consensus.nMajorityRejectBlockOutdated = 950;\n-        consensus.nMajorityWindow = 1000;\n-        consensus.BIP34Height = -1; // BIP34 has not necessarily activated on regtest\n+        consensus.BIP34Height = 100000000; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n         consensus.BIP34Hash = uint256();\n+        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n+        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;"
      },
      {
        "sha": "5b2f49184fc3f6d2a1a28e8c69e5f5271600fc20",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -39,13 +39,13 @@ struct BIP9Deployment {\n struct Params {\n     uint256 hashGenesisBlock;\n     int nSubsidyHalvingInterval;\n-    /** Used to check majorities for block version upgrade */\n-    int nMajorityEnforceBlockUpgrade;\n-    int nMajorityRejectBlockOutdated;\n-    int nMajorityWindow;\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;\n+    /** Block height at which BIP65 becomes active */\n+    int BIP65Height;\n+    /** Block height at which BIP66 becomes active */\n+    int BIP66Height;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments."
      },
      {
        "sha": "e92dbd72feaa11d7aaf9ee779f65fa76951b16ce",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 31,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -107,11 +107,6 @@ map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n map<COutPoint, set<map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n- */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -2372,15 +2367,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n-    // when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    // Start enforcing the DERSIG (BIP66) rule\n+    if (pindex->nHeight >= chainparams.GetConsensus().BIP66Height) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n-    // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n-    // blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n+    if (pindex->nHeight >= chainparams.GetConsensus().BIP65Height) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n@@ -3504,6 +3497,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n \n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n+    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n@@ -3517,10 +3511,12 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n-    for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n-        if (block.nVersion < version && IsSuperMajority(version, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", version - 1),\n-                                 strprintf(\"rejected nVersion=0x%08x block\", version - 1));\n+    // check for version 2, 3 and 4 upgrades\n+    if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n+       (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n+       (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n+                                 strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n \n     return true;\n }\n@@ -3547,9 +3543,8 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CB\n         }\n     }\n \n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n+    // Enforce rule that the coinbase starts with serialized block height\n+    if (nHeight >= consensusParams.BIP34Height)\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -3722,19 +3717,6 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n-{\n-    unsigned int nFound = 0;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n-    {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n-    }\n-    return (nFound >= nRequired);\n-}\n-\n-\n bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n {\n     {"
      },
      {
        "sha": "e3c32d905af74a0b2f307fc53694eb61f1c8d930",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 20,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/122786d0e0170c73536360b705af711e1338adbf/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/122786d0e0170c73536360b705af711e1338adbf/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=122786d0e0170c73536360b705af711e1338adbf",
        "patch": "@@ -817,22 +817,23 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n }\n \n /** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int minVersion, CBlockIndex* pindex, int nRequired, const Consensus::Params& consensusParams)\n+static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n-    int nFound = 0;\n-    CBlockIndex* pstart = pindex;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && pstart != NULL; i++)\n+    UniValue rv(UniValue::VOBJ);\n+    bool activated = false;\n+    switch(version)\n     {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n+        case 2:\n+            activated = pindex->nHeight >= consensusParams.BIP34Height;\n+            break;\n+        case 3:\n+            activated = pindex->nHeight >= consensusParams.BIP66Height;\n+            break;\n+        case 4:\n+            activated = pindex->nHeight >= consensusParams.BIP65Height;\n+            break;\n     }\n-\n-    UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"status\", nFound >= nRequired));\n-    rv.push_back(Pair(\"found\", nFound));\n-    rv.push_back(Pair(\"required\", nRequired));\n-    rv.push_back(Pair(\"window\", consensusParams.nMajorityWindow));\n+    rv.push_back(Pair(\"status\", activated));\n     return rv;\n }\n \n@@ -841,8 +842,7 @@ static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex*\n     UniValue rv(UniValue::VOBJ);\n     rv.push_back(Pair(\"id\", name));\n     rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"enforce\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityRejectBlockOutdated, consensusParams)));\n+    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams)));\n     return rv;\n }\n \n@@ -897,13 +897,9 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n             \"        \\\"version\\\": xx,         (numeric) block version\\n\"\n-            \"        \\\"enforce\\\": {           (object) progress toward enforcing the softfork rules for new-version blocks\\n\"\n+            \"        \\\"reject\\\": {            (object) progress toward rejecting pre-softfork blocks\\n\"\n             \"           \\\"status\\\": xx,       (boolean) true if threshold reached\\n\"\n-            \"           \\\"found\\\": xx,        (numeric) number of blocks with the new version found\\n\"\n-            \"           \\\"required\\\": xx,     (numeric) number of blocks required to trigger\\n\"\n-            \"           \\\"window\\\": xx,       (numeric) maximum size of examined window of recent blocks\\n\"\n             \"        },\\n\"\n-            \"        \\\"reject\\\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \\\"enforce\\\")\\n\"\n             \"     }, ...\\n\"\n             \"  ],\\n\"\n             \"  \\\"bip9_softforks\\\": {          (object) status of BIP9 softforks in progress\\n\""
      }
    ]
  },
  {
    "sha": "cc021ef4862ee8c67453aebf746b98b591e4fc99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzAyMWVmNDg2MmVlOGM2NzQ1M2FlYmY3NDZiOThiNTkxZTRmYzk5",
    "commit": {
      "author": {
        "name": "lizhi",
        "email": "cqtenq9@gmail.com",
        "date": "2016-07-24T02:49:07Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-07-24T02:49:07Z"
      },
      "message": "remove outdated legacy code\n\nCheckSignatureElement is not used,it be replaced by eccrypto::CheckSignatureElement.",
      "tree": {
        "sha": "acf0e8ec43d0763fc34307b7619a338ed4277f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acf0e8ec43d0763fc34307b7619a338ed4277f24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc021ef4862ee8c67453aebf746b98b591e4fc99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc021ef4862ee8c67453aebf746b98b591e4fc99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc021ef4862ee8c67453aebf746b98b591e4fc99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc021ef4862ee8c67453aebf746b98b591e4fc99/comments",
    "author": {
      "login": "cqtenq",
      "id": 4435440,
      "node_id": "MDQ6VXNlcjQ0MzU0NDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4435440?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cqtenq",
      "html_url": "https://github.com/cqtenq",
      "followers_url": "https://api.github.com/users/cqtenq/followers",
      "following_url": "https://api.github.com/users/cqtenq/following{/other_user}",
      "gists_url": "https://api.github.com/users/cqtenq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cqtenq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cqtenq/subscriptions",
      "organizations_url": "https://api.github.com/users/cqtenq/orgs",
      "repos_url": "https://api.github.com/users/cqtenq/repos",
      "events_url": "https://api.github.com/users/cqtenq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cqtenq/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df9ea42b888b0b5c0fa5866f012338c8f16374c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4e5e208928d59e1648aa4b7e7b38baf07503c6a5",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc021ef4862ee8c67453aebf746b98b591e4fc99/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc021ef4862ee8c67453aebf746b98b591e4fc99/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=cc021ef4862ee8c67453aebf746b98b591e4fc99",
        "patch": "@@ -146,9 +146,6 @@ class CKey\n \n     //! Load private key and check that public key matches.\n     bool Load(CPrivKey& privkey, CPubKey& vchPubKey, bool fSkipCheck);\n-\n-    //! Check whether an element of a signature (r or s) is valid.\n-    static bool CheckSignatureElement(const unsigned char* vch, int len, bool half);\n };\n \n struct CExtKey {"
      }
    ]
  },
  {
    "sha": "0ff4375c93bd159233282de5a33ad2e6c1e79841",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmY0Mzc1YzkzYmQxNTkyMzMyODJkZTVhMzNhZDJlNmMxZTc5ODQx",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "yuri.zhykin@gmail.com",
        "date": "2016-07-24T22:30:28Z"
      },
      "committer": {
        "name": "whythat",
        "email": "yuri.zhykin@gmail.com",
        "date": "2016-07-24T22:30:28Z"
      },
      "message": "[qa]: add parsing for '<host>:<port>' argument form to rpc_url()",
      "tree": {
        "sha": "e605a5671343d3ffe0201b0d4fc50d26bd6c2821",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e605a5671343d3ffe0201b0d4fc50d26bd6c2821"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ff4375c93bd159233282de5a33ad2e6c1e79841",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff4375c93bd159233282de5a33ad2e6c1e79841",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ff4375c93bd159233282de5a33ad2e6c1e79841",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff4375c93bd159233282de5a33ad2e6c1e79841/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df9ea42b888b0b5c0fa5866f012338c8f16374c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8aa34265c54471a3b15de761a6370517d99fab0a",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ff4375c93bd159233282de5a33ad2e6c1e79841/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ff4375c93bd159233282de5a33ad2e6c1e79841/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=0ff4375c93bd159233282de5a33ad2e6c1e79841",
        "patch": "@@ -171,7 +171,15 @@ def rpc_auth_pair(n):\n \n def rpc_url(i, rpchost=None):\n     rpc_u, rpc_p = rpc_auth_pair(i)\n-    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, rpchost or '127.0.0.1', rpc_port(i))\n+    host = '127.0.0.1'\n+    port = rpc_port(i)\n+    if rpchost:\n+        parts = rpchost.split(':')\n+        if len(parts) == 2:\n+            host, port = parts\n+        else:\n+            host = rpchost\n+    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n def wait_for_bitcoind_start(process, url, i):\n     '''"
      }
    ]
  },
  {
    "sha": "9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmJiNDE0YjgwMGNmNzFmOTNmMTVkMmNiNWQ0Y2YzMmM3MjI5NGU2",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "yuri.zhykin@gmail.com",
        "date": "2016-07-24T22:31:05Z"
      },
      "committer": {
        "name": "whythat",
        "email": "yuri.zhykin@gmail.com",
        "date": "2016-07-24T22:31:05Z"
      },
      "message": "[qa]: enable rpcbind_test",
      "tree": {
        "sha": "48cd8b9726e5a859c2a5cfee465c3517de398ea0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48cd8b9726e5a859c2a5cfee465c3517de398ea0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0ff4375c93bd159233282de5a33ad2e6c1e79841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff4375c93bd159233282de5a33ad2e6c1e79841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ff4375c93bd159233282de5a33ad2e6c1e79841"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 93,
      "deletions": 128
    },
    "files": [
      {
        "sha": "84ab9d92c5090ebc86f2a417d915d0d09c59a4cb",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
        "patch": "@@ -158,7 +158,7 @@\n     'txn_clone.py --mineblock',\n     'forknotify.py',\n     'invalidateblock.py',\n-#    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n+    'rpcbind_test.py',\n     'smartfees.py',\n     'maxblocksinflight.py',\n     'p2p-acceptblock.py',"
      },
      {
        "sha": "bf1cc8712611a7e962fc5dc0cfb9e70a7545ed59",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 92,
        "deletions": 127,
        "changes": 219,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
        "patch": "@@ -5,143 +5,108 @@\n \n # Test for -rpcbind, as well as -rpcallowip and -rpcconnect\n \n-# TODO extend this test from the test framework (like all other tests)\n-\n import tempfile\n import traceback\n \n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.netutil import *\n \n-def run_bind_test(tmpdir, allow_ips, connect_to, addresses, expected):\n-    '''\n-    Start a node with requested rpcallowip and rpcbind parameters,\n-    then try to connect, and check if the set of bound addresses\n-    matches the expected set.\n-    '''\n-    expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n-    base_args = ['-disablewallet', '-nolisten']\n-    if allow_ips:\n-        base_args += ['-rpcallowip=' + x for x in allow_ips]\n-    binds = ['-rpcbind='+addr for addr in addresses]\n-    nodes = start_nodes(self.num_nodes, tmpdir, [base_args + binds], connect_to)\n-    try:\n-        pid = bitcoind_processes[0].pid\n-        assert_equal(set(get_bind_addrs(pid)), set(expected))\n-    finally:\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-\n-def run_allowip_test(tmpdir, allow_ips, rpchost, rpcport):\n-    '''\n-    Start a node with rpcwallow IP, and request getinfo\n-    at a non-localhost IP.\n-    '''\n-    base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-    nodes = start_nodes(self.num_nodes, tmpdir, [base_args])\n-    try:\n-        # connect to node through non-loopback interface\n-        url = \"http://rt:rt@%s:%d\" % (rpchost, rpcport,)\n-        node = get_rpc_proxy(url, 1)\n-        node.getinfo()\n-    finally:\n-        node = None # make sure connection will be garbage collected and closed\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-\n-\n-def run_test(tmpdir):\n-    assert(sys.platform.startswith('linux')) # due to OS-specific network stats queries, this test works only on Linux\n-    # find the first non-loopback interface for testing\n-    non_loopback_ip = None\n-    for name,ip in all_interfaces():\n-        if ip != '127.0.0.1':\n-            non_loopback_ip = ip\n-            break\n-    if non_loopback_ip is None:\n-        assert(not 'This test requires at least one non-loopback IPv4 interface')\n-    print(\"Using interface %s for testing\" % non_loopback_ip)\n+class RPCBindTest(BitcoinTestFramework):\n \n-    defaultport = rpc_port(0)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n-    # check default without rpcallowip (IPv4 and IPv6 localhost)\n-    run_bind_test(tmpdir, None, '127.0.0.1', [],\n-        [('127.0.0.1', defaultport), ('::1', defaultport)])\n-    # check default with rpcallowip (IPv6 any)\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1', [],\n-        [('::0', defaultport)])\n-    # check only IPv4 localhost (explicit)\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1', ['127.0.0.1'],\n-        [('127.0.0.1', defaultport)])\n-    # check only IPv4 localhost (explicit) with alternative port\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171'],\n-        [('127.0.0.1', 32171)])\n-    # check only IPv4 localhost (explicit) with multiple alternative ports on same host\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171', '127.0.0.1:32172'],\n-        [('127.0.0.1', 32171), ('127.0.0.1', 32172)])\n-    # check only IPv6 localhost (explicit)\n-    run_bind_test(tmpdir, ['[::1]'], '[::1]', ['[::1]'],\n-        [('::1', defaultport)])\n-    # check both IPv4 and IPv6 localhost (explicit)\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1', ['127.0.0.1', '[::1]'],\n-        [('127.0.0.1', defaultport), ('::1', defaultport)])\n-    # check only non-loopback interface\n-    run_bind_test(tmpdir, [non_loopback_ip], non_loopback_ip, [non_loopback_ip],\n-        [(non_loopback_ip, defaultport)])\n-\n-    # Check that with invalid rpcallowip, we are denied\n-    run_allowip_test(tmpdir, [non_loopback_ip], non_loopback_ip, defaultport)\n-    try:\n-        run_allowip_test(tmpdir, ['1.1.1.1'], non_loopback_ip, defaultport)\n-        assert(not 'Connection not denied by rpcallowip as expected')\n-    except ValueError:\n+    def setup_network(self):\n         pass\n \n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        run_test(options.tmpdir)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(e))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n+    def setup_nodes(self):\n+        pass\n \n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n+    def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n+        '''\n+        Start a node with requested rpcallowip and rpcbind parameters,\n+        then try to connect, and check if the set of bound addresses\n+        matches the expected set.\n+        '''\n+        expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n+        base_args = ['-disablewallet', '-nolisten']\n+        if allow_ips:\n+            base_args += ['-rpcallowip=' + x for x in allow_ips]\n+        binds = ['-rpcbind='+addr for addr in addresses]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n+        try:\n+            pid = bitcoind_processes[0].pid\n+            assert_equal(set(get_bind_addrs(pid)), set(expected))\n+        finally:\n+            stop_nodes(self.nodes)\n+            wait_bitcoinds()\n+\n+    def run_allowip_test(self, allow_ips, rpchost, rpcport):\n+        '''\n+        Start a node with rpcwallow IP, and request getinfo\n+        at a non-localhost IP.\n+        '''\n+        base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        try:\n+            # connect to node through non-loopback interface\n+            node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+            node.getinfo()\n+        finally:\n+            node = None # make sure connection will be garbage collected and closed\n+            stop_nodes(self.nodes)\n+            wait_bitcoinds()\n+\n+    def run_test(self):\n+        # due to OS-specific network stats queries, this test works only on Linux\n+        assert(sys.platform.startswith('linux'))\n+        # find the first non-loopback interface for testing\n+        non_loopback_ip = None\n+        for name,ip in all_interfaces():\n+            if ip != '127.0.0.1':\n+                non_loopback_ip = ip\n+                break\n+        if non_loopback_ip is None:\n+            assert(not 'This test requires at least one non-loopback IPv4 interface')\n+        print(\"Using interface %s for testing\" % non_loopback_ip)\n+\n+        defaultport = rpc_port(0)\n+\n+        # check default without rpcallowip (IPv4 and IPv6 localhost)\n+        self.run_bind_test(None, '127.0.0.1', [],\n+            [('127.0.0.1', defaultport), ('::1', defaultport)])\n+        # check default with rpcallowip (IPv6 any)\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1', [],\n+            [('::0', defaultport)])\n+        # check only IPv4 localhost (explicit)\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1'],\n+            [('127.0.0.1', defaultport)])\n+        # check only IPv4 localhost (explicit) with alternative port\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171'],\n+            [('127.0.0.1', 32171)])\n+        # check only IPv4 localhost (explicit) with multiple alternative ports on same host\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171', '127.0.0.1:32172'],\n+            [('127.0.0.1', 32171), ('127.0.0.1', 32172)])\n+        # check only IPv6 localhost (explicit)\n+        self.run_bind_test(['[::1]'], '[::1]', ['[::1]'],\n+            [('::1', defaultport)])\n+        # check both IPv4 and IPv6 localhost (explicit)\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1', '[::1]'],\n+            [('127.0.0.1', defaultport), ('::1', defaultport)])\n+        # check only non-loopback interface\n+        self.run_bind_test([non_loopback_ip], non_loopback_ip, [non_loopback_ip],\n+            [(non_loopback_ip, defaultport)])\n+\n+        # Check that with invalid rpcallowip, we are denied\n+        self.run_allowip_test([non_loopback_ip], non_loopback_ip, defaultport)\n+        try:\n+            self.run_allowip_test(['1.1.1.1'], non_loopback_ip, defaultport)\n+            assert(not 'Connection not denied by rpcallowip as expected')\n+        except JSONRPCException:\n+            pass\n \n if __name__ == '__main__':\n-    main()\n+    RPCBindTest ().main ()"
      }
    ]
  },
  {
    "sha": "99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWMwYWMyZmQ5YmU0MGQ1Yzg4ZjE5NTllMGMyYzljZWZmMzAyNGY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-25T10:50:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-25T10:51:03Z"
      },
      "message": "Merge #8396: remove outdated legacy code from key.h\n\ncc021ef remove outdated legacy code (lizhi)",
      "tree": {
        "sha": "acf0e8ec43d0763fc34307b7619a338ed4277f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acf0e8ec43d0763fc34307b7619a338ed4277f24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXle8XAAoJEHSBCwEjRsmmhZQIAK5j143rh4q9iKt/6A3/UhB6\nHFIXPud8e6vuoPbLrzejG8UbS6DtKDOFQBEXABpuw48CAOaQJC4D6k64w+rXDS2Q\nEz1PEMJKPKCE+/Cni7m2n8JEY7LyM7tZWRCZXI1iNV0DLHaNiWLGnLGwXeOtg4zs\n/aI0qUlDJKWRk/C7XbjFf6Uul0MbT81jnKaoDqnNg3iBvInNHQQZPUEEuna4Iq88\n5nEifyT/yYQILC0DSW8WmriYLTKTJVBGXZUpDAHl3pKKd2Re6ohgZ9f2PuniANmj\nDp+tgKwm+DmxZeth1+HnfAjwoRjWYUEZiZrer0kQRJ13O0lXxCM+2W7I5q3YEUI=\n=xn9P\n-----END PGP SIGNATURE-----",
        "payload": "tree acf0e8ec43d0763fc34307b7619a338ed4277f24\nparent 0df9ea42b888b0b5c0fa5866f012338c8f16374c\nparent cc021ef4862ee8c67453aebf746b98b591e4fc99\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469443859 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469443863 +0200\n\nMerge #8396: remove outdated legacy code from key.h\n\ncc021ef remove outdated legacy code (lizhi)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df9ea42b888b0b5c0fa5866f012338c8f16374c"
      },
      {
        "sha": "cc021ef4862ee8c67453aebf746b98b591e4fc99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc021ef4862ee8c67453aebf746b98b591e4fc99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc021ef4862ee8c67453aebf746b98b591e4fc99"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4e5e208928d59e1648aa4b7e7b38baf07503c6a5",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7",
        "patch": "@@ -146,9 +146,6 @@ class CKey\n \n     //! Load private key and check that public key matches.\n     bool Load(CPrivKey& privkey, CPubKey& vchPubKey, bool fSkipCheck);\n-\n-    //! Check whether an element of a signature (r or s) is valid.\n-    static bool CheckSignatureElement(const unsigned char* vch, int len, bool half);\n };\n \n struct CExtKey {"
      }
    ]
  },
  {
    "sha": "517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTdlZWUzZThmOGIxNGI5YTJkN2RlYWJlZmNjNzFlMmMwYmQ0MzEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-25T16:05:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-25T16:08:09Z"
      },
      "message": "Merge #8362: Scale legacy sigop count in CreateNewBlock\n\n682aa0f Scale legacy sigop count in CreateNewBlock (Suhas Daftuar)",
      "tree": {
        "sha": "9702bec3bfd006ea01d7e8cb1609160f78f6e6a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9702bec3bfd006ea01d7e8cb1609160f78f6e6a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXljlpAAoJEHSBCwEjRsmmgGMH/RK9w5JBvIg7ILiacaysA1Og\nbPXNYAu5yVfBm24GTDc6GPOfG11F2120X+u1R/ipkkC2HJ/xzIAUwU3erhja3D9g\nmelVzIMGSeEnc04mWLMvKU7krLXLrjERH+G81cjYmEXiX0TpKddJ2RiOR0hfK8vV\nFIYBLW656Exmb2U1OpquAZoe3h/Do3zMA1Ihlb8shhixVRniO3TcKvoIgU4MMKGa\nFLa1sS//5JOpufhLtTSKcN9jQHTG5D7MVqHQxmrT5GVGGaVyzBYIdqECV4nxOtPB\nqIPTTwxmIl5o2hCrA0TNQJzV2P74gZXsoxCD5adYUEUm12yuxKM2nh6j6bZkHXU=\n=TA/b\n-----END PGP SIGNATURE-----",
        "payload": "tree 9702bec3bfd006ea01d7e8cb1609160f78f6e6a7\nparent 99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7\nparent 682aa0f289c550c029733966a2ce3449e4a471df\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469462732 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469462889 +0200\n\nMerge #8362: Scale legacy sigop count in CreateNewBlock\n\n682aa0f Scale legacy sigop count in CreateNewBlock (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99c0ac2fd9be40d5c88f1959e0c2c9ceff3024f7"
      },
      {
        "sha": "682aa0f289c550c029733966a2ce3449e4a471df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/682aa0f289c550c029733966a2ce3449e4a471df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/682aa0f289c550c029733966a2ce3449e4a471df"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9575858840df0df7aeab64616efe37173efdad56",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312",
        "patch": "@@ -187,7 +187,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n     UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n     pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n     pblock->nNonce         = 0;\n-    pblocktemplate->vTxSigOpsCost[0] = GetLegacySigOpCount(pblock->vtx[0]);\n+    pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(pblock->vtx[0]);\n \n     CValidationState state;\n     if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {"
      }
    ]
  },
  {
    "sha": "618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MThjOWRkOGM2NTFmMTVlYTM3YTA5ZDNlZTRmYTQ0MjZjNzVhYzAy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-26T09:10:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-26T09:27:30Z"
      },
      "message": "Merge #8365: Treat high-sigop transactions as larger rather than rejecting them\n\nab942c1 Treat high-sigop transactions as larger rather than rejecting them (Pieter Wuille)",
      "tree": {
        "sha": "a34413030e80c00d49988a2354a4a2f8564e0c15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a34413030e80c00d49988a2354a4a2f8564e0c15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXly0DAAoJEHSBCwEjRsmmsJMH/3Q6+eC/gpyCH6lDaaDiOIt9\njY9rbc+nTopikp/WjSjSkVRxQbeRe/8wqxKTzV6cnsMib/1AcPCMckga94tIiCbz\nnh+J6F6+3m7Brwldjg7MZCiuz3AZAFFzzEq2vTb2EKLNxqRzYde84cYUa2PeIJU9\njo1brEZ0fG0DY3mEvLAejuitGnnda59o0ZXVLnwVOnrashMUEPeC+YKidslrek7O\ngjBObib+yfvaLHNj7BuNlMRXHFbMHmKUA5UPdGeEWOL6bcuTaHXk2a5kZMsTvWqu\nOpOL7vr3+ldrmxhu+9Pzbgd2JECZRJ8j3LGo8GSieY1N42s82ELJx8g/jVFlfmA=\n=2/I+\n-----END PGP SIGNATURE-----",
        "payload": "tree a34413030e80c00d49988a2354a4a2f8564e0c15\nparent 517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312\nparent ab942c15bd3854650afa810d7c22d7fd30d346c1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469524231 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469525250 +0200\n\nMerge #8365: Treat high-sigop transactions as larger rather than rejecting them\n\nab942c1 Treat high-sigop transactions as larger rather than rejecting them (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/517eee3e8f8b14b9a2d7deabefcc71e2c0bd4312"
      },
      {
        "sha": "ab942c15bd3854650afa810d7c22d7fd30d346c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab942c15bd3854650afa810d7c22d7fd30d346c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab942c15bd3854650afa810d7c22d7fd30d346c1"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 15,
      "deletions": 12
    },
    "files": [
      {
        "sha": "8d4a2cafbfbb13af99fef6b0aa719513be842419",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "patch": "@@ -446,7 +446,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n-    strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Minimum bytes per sigop in transactions we relay and mine (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n+    strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));"
      },
      {
        "sha": "ed1b9a985d4089cfd2da4586b1adb450dedc9b01",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "patch": "@@ -74,7 +74,6 @@ bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n bool fRequireStandard = true;\n-unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n size_t nCoinCacheUsage = 5000 * 300;\n@@ -1296,7 +1295,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // itself can contain sigops MAX_STANDARD_TX_SIGOPS is less than\n         // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n         // merely non-standard transaction.\n-        if ((nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST) || (nBytesPerSigOp && nSigOpsCost > nSize * WITNESS_SCALE_FACTOR / nBytesPerSigOp))\n+        if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d\", nSigOpsCost));\n "
      },
      {
        "sha": "26ea6adc6baf6da6d29674e0e77c8d352bb632e7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "patch": "@@ -124,7 +124,6 @@ static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n \n /** Default for -permitbaremultisig */\n static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n-static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n@@ -165,7 +164,6 @@ extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern bool fRequireStandard;\n-extern unsigned int nBytesPerSigOp;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;"
      },
      {
        "sha": "0cd3ac7119715e3bc34692e4d199c02a7d33584a",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "patch": "@@ -151,12 +151,14 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-int64_t GetVirtualTransactionSize(int64_t nWeight)\n+unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n+\n+int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)\n {\n-    return (nWeight + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+    return (std::max(nWeight, nSigOpCost * nBytesPerSigOp) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n }\n \n-int64_t GetVirtualTransactionSize(const CTransaction& tx)\n+int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost)\n {\n-    return GetVirtualTransactionSize(GetTransactionWeight(tx));\n+    return GetVirtualTransactionSize(GetTransactionWeight(tx), nSigOpCost);\n }"
      },
      {
        "sha": "b82c9e66b8852633453bb27aa0bf4e33a5e0e0a6",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "patch": "@@ -28,6 +28,8 @@ static const unsigned int MAX_P2SH_SIGOPS = 15;\n static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n+/** Default for -bytespersigop */\n+static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid\n@@ -66,8 +68,10 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n+extern unsigned int nBytesPerSigOp;\n+\n /** Compute the virtual transaction size (weight reinterpreted as bytes). */\n-int64_t GetVirtualTransactionSize(int64_t nWeight);\n-int64_t GetVirtualTransactionSize(const CTransaction& tx);\n+int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost);\n+int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost = 0);\n \n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "82827b8e4f193890fda423123548afd05b381637",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "patch": "@@ -75,7 +75,7 @@ void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)\n \n size_t CTxMemPoolEntry::GetTxSize() const\n {\n-    return GetVirtualTransactionSize(nTxWeight);\n+    return GetVirtualTransactionSize(nTxWeight, sigOpCost);\n }\n \n // Update the given tx for any in-mempool descendants."
      }
    ]
  },
  {
    "sha": "4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjFhNGQ4ODEwZjlkODRkMGUwM2RjMDJiNTNmZDkxMDYwNmE1NTQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-26T12:21:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-26T12:24:11Z"
      },
      "message": "Merge #8381: Make witness v0 outputs non-standard\n\nc59c434 qa: Add test for standardness of segwit v0 outputs (Suhas Daftuar)\n1ffaff2 Make witness v0 outputs non-standard before segwit activation (Johnson Lau)",
      "tree": {
        "sha": "9c4a37f2790206db491774e3b9b882bccfe02a37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c4a37f2790206db491774e3b9b882bccfe02a37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXl1ZrAAoJEHSBCwEjRsmmAy4H/idVJxiwRA4F7yHxv+psy6ke\nRk1nEXVA44Cs3QIx0/Mb1rcqZMoO95p02BfSt1n07PWkYGgz4zY298UCCwx6yjDk\nzskBa3NzRUdErKHP4dGr9BTQWqDmAtpD1h+vTeW90hNLGPyw5HtMpnNYUTrd7jwP\nqoIF4lJdDQa3wdcdfp0rqtm3l5o0eZGOsyNY36RAlPAarJ0HebNxVodeVpenrjSN\nRH28H0ClQIyZReLgRVsCiqoK9BBVhgLToOLXgIGRFsNRMqpudtxJYg6UO5F0CLQ/\nVo0makq+uRQZvy3v9sx7EmGpNKO5lR9WNQpfxvNZxtVCl2RvqTB4JKidD1v+Na8=\n=R95p\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c4a37f2790206db491774e3b9b882bccfe02a37\nparent 618c9dd8c651f15ea37a09d3ee4fa4426c75ac02\nparent c59c434b7d1211c13f7904b9bc675e16910a1c0a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469535664 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469535851 +0200\n\nMerge #8381: Make witness v0 outputs non-standard\n\nc59c434 qa: Add test for standardness of segwit v0 outputs (Suhas Daftuar)\n1ffaff2 Make witness v0 outputs non-standard before segwit activation (Johnson Lau)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1a4d8810f9d84d0e03dc02b53fd910606a5544/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02"
      },
      {
        "sha": "c59c434b7d1211c13f7904b9bc675e16910a1c0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59c434b7d1211c13f7904b9bc675e16910a1c0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c59c434b7d1211c13f7904b9bc675e16910a1c0a"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 89,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cd02692b1e88c037a9e8e23de145c1a2922af7da",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b1a4d8810f9d84d0e03dc02b53fd910606a5544/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b1a4d8810f9d84d0e03dc02b53fd910606a5544/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
        "patch": "@@ -1086,6 +1086,82 @@ def test_block_relay(self, segwit_activated):\n             self.old_node.announce_tx_and_wait_for_getdata(block4.vtx[0])\n             assert(block4.sha256 not in self.old_node.getdataset)\n \n+    # V0 segwit outputs should be standard after activation, but not before.\n+    def test_standardness_v0(self, segwit_activated):\n+        print(\"\\tTesting standardness of v0 outputs (%s activation)\" % (\"after\" if segwit_activated else \"before\"))\n+        assert(len(self.utxo))\n+\n+        witness_program = CScript([OP_TRUE])\n+        witness_hash = sha256(witness_program)\n+        scriptPubKey = CScript([OP_0, witness_hash])\n+\n+        p2sh_pubkey = hash160(witness_program)\n+        p2sh_scriptPubKey = CScript([OP_HASH160, p2sh_pubkey, OP_EQUAL])\n+\n+        # First prepare a p2sh output (so that spending it will pass standardness)\n+        p2sh_tx = CTransaction()\n+        p2sh_tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n+        p2sh_tx.vout = [CTxOut(self.utxo[0].nValue-1000, p2sh_scriptPubKey)]\n+        p2sh_tx.rehash()\n+\n+        # Mine it on test_node to create the confirmed output.\n+        self.test_node.test_transaction_acceptance(p2sh_tx, with_witness=True, accepted=True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # Now test standardness of v0 P2WSH outputs.\n+        # Start by creating a transaction with two outputs.\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n+        tx.vout = [CTxOut(p2sh_tx.vout[0].nValue-10000, scriptPubKey)]\n+        tx.vout.append(CTxOut(8000, scriptPubKey)) # Might burn this later\n+        tx.rehash()\n+\n+        self.std_node.test_transaction_acceptance(tx, with_witness=True, accepted=segwit_activated)\n+\n+        # Now create something that looks like a P2PKH output. This won't be spendable.\n+        scriptPubKey = CScript([OP_0, hash160(witness_hash)])\n+        tx2 = CTransaction()\n+        if segwit_activated:\n+            # if tx was accepted, then we spend the second output.\n+            tx2.vin = [CTxIn(COutPoint(tx.sha256, 1), b\"\")]\n+            tx2.vout = [CTxOut(7000, scriptPubKey)]\n+            tx2.wit.vtxinwit.append(CTxInWitness())\n+            tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+        else:\n+            # if tx wasn't accepted, we just re-spend the p2sh output we started with.\n+            tx2.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n+            tx2.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, scriptPubKey)]\n+        tx2.rehash()\n+\n+        self.std_node.test_transaction_acceptance(tx2, with_witness=True, accepted=segwit_activated)\n+\n+        # Now update self.utxo for later tests.\n+        tx3 = CTransaction()\n+        if segwit_activated:\n+            # tx and tx2 were both accepted.  Don't bother trying to reclaim the\n+            # P2PKH output; just send tx's first output back to an anyone-can-spend.\n+            sync_mempools(self.nodes)\n+            tx3.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n+            tx3.vout = [CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE]))]\n+            tx3.wit.vtxinwit.append(CTxInWitness())\n+            tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n+            tx3.rehash()\n+            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+        else:\n+            # tx and tx2 didn't go anywhere; just clean up the p2sh_tx output.\n+            tx3.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n+            tx3.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, witness_program)]\n+            tx3.rehash()\n+            self.test_node.test_transaction_acceptance(tx3, with_witness=True, accepted=True)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+        self.utxo.pop(0)\n+        self.utxo.append(UTXO(tx3.sha256, 0, tx3.vout[0].nValue))\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+\n+\n     # Verify that future segwit upgraded transactions are non-standard,\n     # but valid in blocks. Can run this before and after segwit activation.\n     def test_segwit_versions(self):\n@@ -1658,6 +1734,7 @@ def run_test(self):\n         self.test_witness_tx_relay_before_segwit_activation()\n         self.test_block_relay(segwit_activated=False)\n         self.test_p2sh_witness(segwit_activated=False)\n+        self.test_standardness_v0(segwit_activated=False)\n \n         sync_blocks(self.nodes)\n \n@@ -1679,6 +1756,7 @@ def run_test(self):\n         self.test_witness_input_length()\n         self.test_block_relay(segwit_activated=True)\n         self.test_tx_relay_after_segwit_activation()\n+        self.test_standardness_v0(segwit_activated=True)\n         self.test_segwit_versions()\n         self.test_premature_coinbase_witness_spend()\n         self.test_signature_version_1()"
      },
      {
        "sha": "052b739326a5af7ed81a41d083b1f0845efabf28",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b1a4d8810f9d84d0e03dc02b53fd910606a5544/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b1a4d8810f9d84d0e03dc02b53fd910606a5544/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
        "patch": "@@ -1143,13 +1143,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     }\n \n     // Reject transactions with witness before segregated witness activates (override with -prematurewitness)\n-    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus())) {\n+    bool witnessEnabled = IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus());\n+    if (!GetBoolArg(\"-prematurewitness\",false) && !tx.wit.IsNull() && !witnessEnabled) {\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"no-witness-yet\", true);\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n+    if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next"
      },
      {
        "sha": "48080abc778d5c0f9534695a013b6f60449eabbe",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b1a4d8810f9d84d0e03dc02b53fd910606a5544/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b1a4d8810f9d84d0e03dc02b53fd910606a5544/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
        "patch": "@@ -31,7 +31,7 @@\n      *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n      */\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n@@ -50,10 +50,13 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n                (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n \n+    else if (!witnessEnabled && (whichType == TX_WITNESS_V0_KEYHASH || whichType == TX_WITNESS_V0_SCRIPTHASH))\n+        return false;\n+\n     return whichType != TX_NONSTANDARD;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled)\n {\n     if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n@@ -92,7 +95,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+        if (!::IsStandard(txout.scriptPubKey, whichType, witnessEnabled)) {\n             reason = \"scriptpubkey\";\n             return false;\n         }"
      },
      {
        "sha": "6bf5ca0ee5567d7272826a73b6a4d6b8291360b7",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b1a4d8810f9d84d0e03dc02b53fd910606a5544/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b1a4d8810f9d84d0e03dc02b53fd910606a5544/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
        "patch": "@@ -55,12 +55,12 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n                                                            LOCKTIME_MEDIAN_TIME_PAST;\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled = false);\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnessEnabled = false);\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending"
      }
    ]
  },
  {
    "sha": "beadffae6d6599c2e75d0fb09d904ac10276e25a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWFkZmZhZTZkNjU5OWMyZTc1ZDBmYjA5ZDkwNGFjMTAyNzZlMjVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-26T12:40:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-26T12:40:25Z"
      },
      "message": "Merge #8358: [doc] gbuild: Set memory explicitly (default is too low)\n\nfaa5931 [doc] gbuild: Set memory explicitly (default is too low) (MarcoFalke)",
      "tree": {
        "sha": "7d5c8b49769b77f7784dd7d112fd8b89ba2c73c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d5c8b49769b77f7784dd7d112fd8b89ba2c73c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beadffae6d6599c2e75d0fb09d904ac10276e25a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXl1o5AAoJEHSBCwEjRsmmCB4IALCXNqYlrHvbF/fSb5wu7z1x\n3Okkp6Sj1oF8Ofac3aQPTutl/VhhzvlgjW2Jq/KPWq0LYMeNP1nCJ3fsY6yqU1Ww\naxqX76uKoAbsvA7CgH/eMLoI4CfTmv2Jjsia25noPMk7bLWJNs+jx9YUDgnBPgQu\n/NfZzbpiiKVTZ4jQZ6N5olFS1glcFZYaVl46FnKRDkjp7lj2h9lF9Jt5xSnbF10E\n930fBgtCjo4zT43yej9W0cWMojVQTEeHrXfl9K5VBHOZhLGnnedDpq7CgotXYYae\nIRlflxUCmy7HgdBtNCkOwORe5jPSlA6q4Tsu8LXWJMXLgQGEMM7x/XtDMce8IC8=\n=MoV0\n-----END PGP SIGNATURE-----",
        "payload": "tree 7d5c8b49769b77f7784dd7d112fd8b89ba2c73c1\nparent 4b1a4d8810f9d84d0e03dc02b53fd910606a5544\nparent faa59318db48a0acc4b0ccff56b63cc05455c61f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469536822 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469536825 +0200\n\nMerge #8358: [doc] gbuild: Set memory explicitly (default is too low)\n\nfaa5931 [doc] gbuild: Set memory explicitly (default is too low) (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beadffae6d6599c2e75d0fb09d904ac10276e25a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beadffae6d6599c2e75d0fb09d904ac10276e25a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beadffae6d6599c2e75d0fb09d904ac10276e25a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1a4d8810f9d84d0e03dc02b53fd910606a5544",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b1a4d8810f9d84d0e03dc02b53fd910606a5544"
      },
      {
        "sha": "faa59318db48a0acc4b0ccff56b63cc05455c61f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa59318db48a0acc4b0ccff56b63cc05455c61f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa59318db48a0acc4b0ccff56b63cc05455c61f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "41c1ac8556b1abdb65c65246a36660b60c0c9484",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beadffae6d6599c2e75d0fb09d904ac10276e25a/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beadffae6d6599c2e75d0fb09d904ac10276e25a/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=beadffae6d6599c2e75d0fb09d904ac10276e25a",
        "patch": "@@ -112,16 +112,16 @@ The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n ### Build and sign Bitcoin Core for Linux, Windows, and OS X:\n \n     pushd ./gitian-builder\n-    ./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gbuild --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n     ./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n     mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n \n-    ./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gbuild --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n     ./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n     mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n     mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n \n-    ./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    ./bin/gbuild --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n     ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n     mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n     mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../"
      }
    ]
  },
  {
    "sha": "1de2a46632946990a7863020b61172232f8c5796",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGUyYTQ2NjMyOTQ2OTkwYTc4NjMwMjBiNjExNzIyMzJmOGM1Nzk2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-26T20:50:48Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-26T20:50:48Z"
      },
      "message": "Ignore GETBLOCKTXN requests for unknown blocks\n\nDon't disconnect peers, or else we leak information that could be\nused for fingerprinting.",
      "tree": {
        "sha": "0e6206763129b73f3151287a5f738e6904d9be8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e6206763129b73f3151287a5f738e6904d9be8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1de2a46632946990a7863020b61172232f8c5796",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1de2a46632946990a7863020b61172232f8c5796",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1de2a46632946990a7863020b61172232f8c5796",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1de2a46632946990a7863020b61172232f8c5796/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "beadffae6d6599c2e75d0fb09d904ac10276e25a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beadffae6d6599c2e75d0fb09d904ac10276e25a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beadffae6d6599c2e75d0fb09d904ac10276e25a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4675127ec37ac3a8f36ada41045434c574a0e0d2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1de2a46632946990a7863020b61172232f8c5796/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1de2a46632946990a7863020b61172232f8c5796/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1de2a46632946990a7863020b61172232f8c5796",
        "patch": "@@ -5343,7 +5343,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         BlockMap::iterator it = mapBlockIndex.find(req.blockhash);\n         if (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)) {\n-            Misbehaving(pfrom->GetId(), 100);\n             LogPrintf(\"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->id);\n             return true;\n         }"
      }
    ]
  },
  {
    "sha": "1d06e49834814eed45e07393dcffd7b6683311b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDA2ZTQ5ODM0ODE0ZWVkNDVlMDczOTNkY2ZmZDdiNjY4MzMxMWIy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-26T20:52:35Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-26T20:52:35Z"
      },
      "message": "Ignore CMPCTBLOCK messages for pruned blocks\n\nAlso ignores CMPCTBLOCK announcements that have too little work.  This is to\nprevent disk-exhaustion DoS.",
      "tree": {
        "sha": "10264dd9ee63a38b6d9881e23c8c4fa004504409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10264dd9ee63a38b6d9881e23c8c4fa004504409"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d06e49834814eed45e07393dcffd7b6683311b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d06e49834814eed45e07393dcffd7b6683311b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d06e49834814eed45e07393dcffd7b6683311b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d06e49834814eed45e07393dcffd7b6683311b2/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1de2a46632946990a7863020b61172232f8c5796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1de2a46632946990a7863020b61172232f8c5796",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1de2a46632946990a7863020b61172232f8c5796"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b41a719552ec8ada2db271252ff620d82fa4e2b5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d06e49834814eed45e07393dcffd7b6683311b2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d06e49834814eed45e07393dcffd7b6683311b2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1d06e49834814eed45e07393dcffd7b6683311b2",
        "patch": "@@ -5626,8 +5626,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 std::vector<CInv> vInv(1);\n                 vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n                 pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n-                return true;\n             }\n+            return true;\n         }\n \n         // If we're not close to tip yet, give up and let parallel block fetch work its magic"
      }
    ]
  },
  {
    "sha": "77c912d21c8cd153f4503c65225a5a46990cc85a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2M5MTJkMjFjOGNkMTUzZjQ1MDNjNjUyMjVhNWE0Njk5MGNjODVh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-15T08:49:29Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-27T13:19:23Z"
      },
      "message": "[Wallet] add HD xpriv to dumpwallet",
      "tree": {
        "sha": "c5b5f602b9034c80ad075a586d8793ce5f8dd02f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5b5f602b9034c80ad075a586d8793ce5f8dd02f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77c912d21c8cd153f4503c65225a5a46990cc85a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXmLTcAAoJECnUvLZBb1PsmSsQAMCEw4U2mZZ17v+t8wXeQV5r\nd2dBeteEt7GeqGe+0jsRD8kLyqcOHZvbEupc0mnJW6juKvNMc+wGSUouvqwncE6C\nKnLjm58V7hpoeoOr2dW+bgTZzuhO/NCPeEJkmJzbrrphh4A9PLVBY4zWp68/puJA\nVCRbloBozs9KhH2va8leOlckoKwRDnwwLwyacqQ1Jcn6NdiOSimF/AJ5nxz0dP+8\nb5GV/5n+E8RP/09AhoQdplmflCS0RPISNedkEUG0YGe4zoXmEYkcdD9FK+CWvQaE\ntSQDvsW7+IZPpE9+s4AuM+Yw7oAGrgqARD+HXO7OLgysZXw01BKFz6K1h5Xf+xqB\nHz5dIeoY5ktZUYmZEXpMvJEyBkZEQnmyJ6zHPBj0RRJ783IhVreYs0k+I/ffHRMr\nqE96L3wHS2C5AkjqFIkJmU2hWDtlMj1w8xYHyT6x0bU5AMSyRTNJHuOCyKzxNH79\nrXmcnlUn3INkBRFFRi4BiL0sI57sLMs6ztcUj6Cl+Qs6dgaG145fjRhOUE3vDDMQ\nWZ5f8b+AR6KadYJMgJ7Zz44wHLRyus9t47wmr+CLOtRc+56r7dZCCWXfELuafdwl\n2TcJpUPMexCyu27xp60UxJ6+sgcEFHvC1H4SEcV+LPdKJs82KNrs8wN6bpufyEw0\nRmCC8kivrGsr0H2/Rp8T\n=F2Q4\n-----END PGP SIGNATURE-----",
        "payload": "tree c5b5f602b9034c80ad075a586d8793ce5f8dd02f\nparent 8e048f40cc25b6ad3f49d2828c8562b657d91ced\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1465980569 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1469625563 +0200\n\n[Wallet] add HD xpriv to dumpwallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c912d21c8cd153f4503c65225a5a46990cc85a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77c912d21c8cd153f4503c65225a5a46990cc85a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c912d21c8cd153f4503c65225a5a46990cc85a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e048f40cc25b6ad3f49d2828c8562b657d91ced",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e048f40cc25b6ad3f49d2828c8562b657d91ced"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 27,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6647d3297fad25c0f260c9748b4afd3b09bbef71",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c912d21c8cd153f4503c65225a5a46990cc85a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c912d21c8cd153f4503c65225a5a46990cc85a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=77c912d21c8cd153f4503c65225a5a46990cc85a",
        "patch": "@@ -602,19 +602,42 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n     file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n     file << \"\\n\";\n+\n+    // add the base58check encoded extended master if the wallet uses HD \n+    CKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n+    if (!masterKeyID.IsNull())\n+    {\n+        CKey key;\n+        if (pwalletMain->GetKey(masterKeyID, key))\n+        {\n+            CExtKey masterKey;\n+            masterKey.SetMaster(key.begin(), key.size());\n+\n+            CBitcoinExtKey b58extkey;\n+            b58extkey.SetKey(masterKey);\n+\n+            file << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\\n\";\n+        }\n+    }\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n         std::string strTime = EncodeDumpTime(it->first);\n         std::string strAddr = CBitcoinAddress(keyid).ToString();\n         CKey key;\n         if (pwalletMain->GetKey(keyid, key)) {\n+            file << strprintf(\"%s %s \", CBitcoinSecret(key).ToString(), strTime);\n             if (pwalletMain->mapAddressBook.count(keyid)) {\n-                file << strprintf(\"%s %s label=%s # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, EncodeDumpString(pwalletMain->mapAddressBook[keyid].name), strAddr);\n+                file << strprintf(\"label=%s\", EncodeDumpString(pwalletMain->mapAddressBook[keyid].name));\n+            } else if (keyid == masterKeyID) {\n+                file << \"hdmaster=1\";\n             } else if (setKeyPool.count(keyid)) {\n-                file << strprintf(\"%s %s reserve=1 # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, strAddr);\n+                file << \"reserve=1\";\n+            } else if (pwalletMain->mapKeyMetadata[keyid].hdKeypath == \"m\") {\n+                file << \"inactivehdmaster=1\";\n             } else {\n-                file << strprintf(\"%s %s change=1 # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, strAddr);\n+                file << \"change=1\";\n             }\n+            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwalletMain->mapKeyMetadata[keyid].hdKeypath.size() > 0 ? \" hdkeypath=\"+pwalletMain->mapKeyMetadata[keyid].hdKeypath : \"\"));\n         }\n     }\n     file << \"\\n\";"
      },
      {
        "sha": "efed2ba11df02167d18bc0ff1287ef724d453b37",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c912d21c8cd153f4503c65225a5a46990cc85a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c912d21c8cd153f4503c65225a5a46990cc85a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=77c912d21c8cd153f4503c65225a5a46990cc85a",
        "patch": "@@ -899,10 +899,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     /* Set the HD chain model (chain child index counters) */\n     bool SetHDChain(const CHDChain& chain, bool memonly);\n+    const CHDChain& GetHDChain() { return hdChain; }\n \n     /* Set the current HD master key (will reset the chain child index counters) */\n     bool SetHDMasterKey(const CKey& key);\n-    const CHDChain& GetHDChain() { return hdChain; }\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "4d4970fe530af1edf8dc2521342cfccd781527ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDQ5NzBmZTUzMGFmMWVkZjhkYzI1MjEzNDJjZmNjZDc4MTUyN2Fi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-27T13:20:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-27T13:25:34Z"
      },
      "message": "Merge #8206: [Wallet] Add HD xpriv to dumpwallet\n\n77c912d [Wallet] add HD xpriv to dumpwallet (Jonas Schnelli)",
      "tree": {
        "sha": "9a8b2bceba92abc9cf806b714ebaac3dc3690a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a8b2bceba92abc9cf806b714ebaac3dc3690a76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d4970fe530af1edf8dc2521342cfccd781527ab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXmLZOAAoJEHSBCwEjRsmmT9YH/RGNKW/KMiM71rJWq7HXSJjE\nTnPeSiiig7BwEiYv3eY23xhvR29OgynQCgB7OX878/Q7+65YktQbwcrZwnRmRhaF\nMfjM3drKmCk7V40zNymKlnqm6ZHTdUqrbXkjmaGCNTzDcABTL5xENc1gt7mAUNM+\nAeIzujuyPZouoCGuHjXmpG+aDZOmL8NrQ/69nkNIhaC9iUNENC9YkJ7bmlqRuTH3\nuuYnWOr+iKVk2rGewJDvauZJVgqv16bA2k4zitx8kf6ARsawYg/PIIf8iHM5vetj\nbUZpyIQQEGbBtMF1Eytxl1Ia7WzSS6qDc7g7BEo3hQyJmZVn0tq7hhbRNSfX7UM=\n=OR/E\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a8b2bceba92abc9cf806b714ebaac3dc3690a76\nparent beadffae6d6599c2e75d0fb09d904ac10276e25a\nparent 77c912d21c8cd153f4503c65225a5a46990cc85a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469625648 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469625934 +0200\n\nMerge #8206: [Wallet] Add HD xpriv to dumpwallet\n\n77c912d [Wallet] add HD xpriv to dumpwallet (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d4970fe530af1edf8dc2521342cfccd781527ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d4970fe530af1edf8dc2521342cfccd781527ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d4970fe530af1edf8dc2521342cfccd781527ab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "beadffae6d6599c2e75d0fb09d904ac10276e25a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beadffae6d6599c2e75d0fb09d904ac10276e25a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beadffae6d6599c2e75d0fb09d904ac10276e25a"
      },
      {
        "sha": "77c912d21c8cd153f4503c65225a5a46990cc85a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c912d21c8cd153f4503c65225a5a46990cc85a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77c912d21c8cd153f4503c65225a5a46990cc85a"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 27,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6647d3297fad25c0f260c9748b4afd3b09bbef71",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d4970fe530af1edf8dc2521342cfccd781527ab/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d4970fe530af1edf8dc2521342cfccd781527ab/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=4d4970fe530af1edf8dc2521342cfccd781527ab",
        "patch": "@@ -602,19 +602,42 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n     file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n     file << \"\\n\";\n+\n+    // add the base58check encoded extended master if the wallet uses HD \n+    CKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n+    if (!masterKeyID.IsNull())\n+    {\n+        CKey key;\n+        if (pwalletMain->GetKey(masterKeyID, key))\n+        {\n+            CExtKey masterKey;\n+            masterKey.SetMaster(key.begin(), key.size());\n+\n+            CBitcoinExtKey b58extkey;\n+            b58extkey.SetKey(masterKey);\n+\n+            file << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\\n\";\n+        }\n+    }\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n         std::string strTime = EncodeDumpTime(it->first);\n         std::string strAddr = CBitcoinAddress(keyid).ToString();\n         CKey key;\n         if (pwalletMain->GetKey(keyid, key)) {\n+            file << strprintf(\"%s %s \", CBitcoinSecret(key).ToString(), strTime);\n             if (pwalletMain->mapAddressBook.count(keyid)) {\n-                file << strprintf(\"%s %s label=%s # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, EncodeDumpString(pwalletMain->mapAddressBook[keyid].name), strAddr);\n+                file << strprintf(\"label=%s\", EncodeDumpString(pwalletMain->mapAddressBook[keyid].name));\n+            } else if (keyid == masterKeyID) {\n+                file << \"hdmaster=1\";\n             } else if (setKeyPool.count(keyid)) {\n-                file << strprintf(\"%s %s reserve=1 # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, strAddr);\n+                file << \"reserve=1\";\n+            } else if (pwalletMain->mapKeyMetadata[keyid].hdKeypath == \"m\") {\n+                file << \"inactivehdmaster=1\";\n             } else {\n-                file << strprintf(\"%s %s change=1 # addr=%s\\n\", CBitcoinSecret(key).ToString(), strTime, strAddr);\n+                file << \"change=1\";\n             }\n+            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwalletMain->mapKeyMetadata[keyid].hdKeypath.size() > 0 ? \" hdkeypath=\"+pwalletMain->mapKeyMetadata[keyid].hdKeypath : \"\"));\n         }\n     }\n     file << \"\\n\";"
      },
      {
        "sha": "efed2ba11df02167d18bc0ff1287ef724d453b37",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d4970fe530af1edf8dc2521342cfccd781527ab/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d4970fe530af1edf8dc2521342cfccd781527ab/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4d4970fe530af1edf8dc2521342cfccd781527ab",
        "patch": "@@ -899,10 +899,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     /* Set the HD chain model (chain child index counters) */\n     bool SetHDChain(const CHDChain& chain, bool memonly);\n+    const CHDChain& GetHDChain() { return hdChain; }\n \n     /* Set the current HD master key (will reset the chain child index counters) */\n     bool SetHDMasterKey(const CKey& key);\n-    const CHDChain& GetHDChain() { return hdChain; }\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "c8664eeac75fb87282dc69049cfa23d583742629",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODY2NGVlYWM3NWZiODcyODJkYzY5MDQ5Y2ZhMjNkNTgzNzQyNjI5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-17T03:49:46Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-27T21:58:04Z"
      },
      "message": "Trivial: pass Consensus::Params& instead of CChainParams& in ContextualCheckBlock",
      "tree": {
        "sha": "4490d850f9e29b67ef32c565b033ecae0e98cdb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4490d850f9e29b67ef32c565b033ecae0e98cdb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8664eeac75fb87282dc69049cfa23d583742629",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8664eeac75fb87282dc69049cfa23d583742629",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8664eeac75fb87282dc69049cfa23d583742629",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8664eeac75fb87282dc69049cfa23d583742629/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "381917f610e3c770acb5e323884e7eef6fd25841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381917f610e3c770acb5e323884e7eef6fd25841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381917f610e3c770acb5e323884e7eef6fd25841"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b7a20c78d59ab29e4b71e415db2f1990e5c55bf6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8664eeac75fb87282dc69049cfa23d583742629/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8664eeac75fb87282dc69049cfa23d583742629/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c8664eeac75fb87282dc69049cfa23d583742629",
        "patch": "@@ -3525,10 +3525,9 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n     int nLockTimeFlags = 0;\n@@ -3689,7 +3688,8 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if ((!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime())) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n+    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n@@ -3780,7 +3780,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ContextualCheckBlock(block, state, pindexPrev))\n+    if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;"
      },
      {
        "sha": "262e94b9f8f5257331ff3cfe8011ff690bf7770e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8664eeac75fb87282dc69049cfa23d583742629/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8664eeac75fb87282dc69049cfa23d583742629/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c8664eeac75fb87282dc69049cfa23d583742629",
        "patch": "@@ -448,7 +448,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()"
      }
    ]
  },
  {
    "sha": "d12b732ac287a1ed7543481b79801c9afc333b7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTJiNzMyYWMyODdhMWVkNzU0MzQ4MWI3OTgwMWM5YWZjMzMzYjdm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-27T20:42:13Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-27T22:23:03Z"
      },
      "message": "libconsensus: Expose a flag for BIP112\n\nWe added the segwit one, but we forgot CHECKSEQUENCEVERIFY",
      "tree": {
        "sha": "8bb5ac53de839a874c9e1e33452448b14abd3a79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bb5ac53de839a874c9e1e33452448b14abd3a79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d12b732ac287a1ed7543481b79801c9afc333b7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d12b732ac287a1ed7543481b79801c9afc333b7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d12b732ac287a1ed7543481b79801c9afc333b7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d12b732ac287a1ed7543481b79801c9afc333b7f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "381917f610e3c770acb5e323884e7eef6fd25841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381917f610e3c770acb5e323884e7eef6fd25841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381917f610e3c770acb5e323884e7eef6fd25841"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f73a8e30bc6c488ccb48f5756d758bfa32fb020e",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d12b732ac287a1ed7543481b79801c9afc333b7f/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d12b732ac287a1ed7543481b79801c9afc333b7f/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=d12b732ac287a1ed7543481b79801c9afc333b7f",
        "patch": "@@ -51,6 +51,7 @@ enum\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), // enable CHECKSEQUENCEVERIFY (BIP112)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), // enable WITNESS (BIP141)\n };\n "
      }
    ]
  },
  {
    "sha": "d3af342276f29d2bd162628eb4b669599633e39e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2FmMzQyMjc2ZjI5ZDJiZDE2MjYyOGViNGI2Njk1OTk2MzNlMzll",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-07-27T23:27:07Z"
      },
      "committer": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-07-27T23:27:07Z"
      },
      "message": "prepend license statement to indirectmap\n\nAdd statement about MIT licensing to indirectmap.h. I forgot the license\npreamble when I originally wrote the file.",
      "tree": {
        "sha": "37adf86fba07e0b4144594382b30f22265a26ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37adf86fba07e0b4144594382b30f22265a26ad4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3af342276f29d2bd162628eb4b669599633e39e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3af342276f29d2bd162628eb4b669599633e39e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3af342276f29d2bd162628eb4b669599633e39e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3af342276f29d2bd162628eb4b669599633e39e/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d4970fe530af1edf8dc2521342cfccd781527ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d4970fe530af1edf8dc2521342cfccd781527ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d4970fe530af1edf8dc2521342cfccd781527ab"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "76da4a6bd5575af785318e9135c2079820c5ac2c",
        "filename": "src/indirectmap.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3af342276f29d2bd162628eb4b669599633e39e/src/indirectmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3af342276f29d2bd162628eb4b669599633e39e/src/indirectmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/indirectmap.h?ref=d3af342276f29d2bd162628eb4b669599633e39e",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_INDIRECTMAP_H\n #define BITCOIN_INDIRECTMAP_H\n "
      }
    ]
  },
  {
    "sha": "c24b50ec168eb867129244a14ee5b44f90fb6be3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjRiNTBlYzE2OGViODY3MTI5MjQ0YTE0ZWU1YjQ0ZjkwZmI2YmUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T07:33:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T07:34:00Z"
      },
      "message": "Merge #8414: prepend license statement to indirectmap.h\n\nd3af342 prepend license statement to indirectmap (Kaz Wesley)",
      "tree": {
        "sha": "37adf86fba07e0b4144594382b30f22265a26ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37adf86fba07e0b4144594382b30f22265a26ad4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c24b50ec168eb867129244a14ee5b44f90fb6be3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXmbVoAAoJEHSBCwEjRsmm4s4H/2mBoIJr+vibizlKmXHKWhXR\n2ZJoHY6STBJYAxlU3oEicrVtfpaysFRJ/fNP4Qg3KBzsLW2v6JdyIt9PWnGfL9VT\ncomUK00m9MiRQKrbCas1WnLSqwrQ4e7HAq1psb/v7kbr0Gc9GPn9lxvdebnh+VlS\nRIaIHjoMLphzlHkhdS39MCJP+TAIopVMstrVatVTX8zck/+UkvPjYX0jlU3Opwrd\nCnafkMrUFkW4YybK1fLkzujXRU3WnuZyrczpHHaksup3UBzh68QIMnWMLb0lCh5O\nFrYAcJXnseoW+mm24k7WaKOdtW9fnzgJongHM3rYs/Yx/gFdBMcRFaHdMDdy6No=\n=9lr+\n-----END PGP SIGNATURE-----",
        "payload": "tree 37adf86fba07e0b4144594382b30f22265a26ad4\nparent 4d4970fe530af1edf8dc2521342cfccd781527ab\nparent d3af342276f29d2bd162628eb4b669599633e39e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469691217 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469691240 +0200\n\nMerge #8414: prepend license statement to indirectmap.h\n\nd3af342 prepend license statement to indirectmap (Kaz Wesley)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c24b50ec168eb867129244a14ee5b44f90fb6be3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c24b50ec168eb867129244a14ee5b44f90fb6be3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c24b50ec168eb867129244a14ee5b44f90fb6be3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d4970fe530af1edf8dc2521342cfccd781527ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d4970fe530af1edf8dc2521342cfccd781527ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d4970fe530af1edf8dc2521342cfccd781527ab"
      },
      {
        "sha": "d3af342276f29d2bd162628eb4b669599633e39e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3af342276f29d2bd162628eb4b669599633e39e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3af342276f29d2bd162628eb4b669599633e39e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "76da4a6bd5575af785318e9135c2079820c5ac2c",
        "filename": "src/indirectmap.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c24b50ec168eb867129244a14ee5b44f90fb6be3/src/indirectmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c24b50ec168eb867129244a14ee5b44f90fb6be3/src/indirectmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/indirectmap.h?ref=c24b50ec168eb867129244a14ee5b44f90fb6be3",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_INDIRECTMAP_H\n #define BITCOIN_INDIRECTMAP_H\n "
      }
    ]
  },
  {
    "sha": "64d660a43fb8ced837b313791b7cddd27b1e7761",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGQ2NjBhNDNmYjhjZWQ4MzdiMzEzNzkxYjdjZGRkMjdiMWU3NzYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T07:50:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T07:51:04Z"
      },
      "message": "Merge #8348: Trivial: Segwit: Don't call IsWitnessEnabled from ContextualCheckBlock\n\n38c4c8b Trivial: Segwit: Don't call IsWitnessEnabled from ContextualCheckBlock (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "8022e555f140905397ac9817924827ae4bc0327d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8022e555f140905397ac9817924827ae4bc0327d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64d660a43fb8ced837b313791b7cddd27b1e7761",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXmbloAAoJEHSBCwEjRsmmMdcH/RC1e2RW4evHukPs4Nrn0P5W\nPXGkxd4MTJz6K5HndCrJhI74Y3O5sW6rLCG0Zz9sbDr5EMbaL/BgYm5phEOvXOO6\n3DD23odjRM3E3CU3xL6kcw6IKF/gPy/hyPA5kMw49KFgmFh8eHwEAspCDYnsso9M\nv2RDls2pUjj6NDvTFCvgicFKGQtT7gSN2Dslbaq+6CgrcstRH4GG0l2o56nsZkf6\nZTA7NLt5PoUhPg0v1XJavBhimdPKaZ2t592+g4ObatfStPdIVYrpp/Zm13tIqZe7\nMGTpzbWW0ey1bDZdaN2YqA2wlEYm1L9kwkcNfPk40Gd9wNVe311zojY7cdGUeZw=\n=y9Hu\n-----END PGP SIGNATURE-----",
        "payload": "tree 8022e555f140905397ac9817924827ae4bc0327d\nparent c24b50ec168eb867129244a14ee5b44f90fb6be3\nparent 38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469692246 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469692264 +0200\n\nMerge #8348: Trivial: Segwit: Don't call IsWitnessEnabled from ContextualCheckBlock\n\n38c4c8b Trivial: Segwit: Don't call IsWitnessEnabled from ContextualCheckBlock (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64d660a43fb8ced837b313791b7cddd27b1e7761",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64d660a43fb8ced837b313791b7cddd27b1e7761",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64d660a43fb8ced837b313791b7cddd27b1e7761/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c24b50ec168eb867129244a14ee5b44f90fb6be3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c24b50ec168eb867129244a14ee5b44f90fb6be3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c24b50ec168eb867129244a14ee5b44f90fb6be3"
      },
      {
        "sha": "38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38c4c8b7012ceeee3b6591d6a80b5f13ee20fbd6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8dd703b6870e5d4bc24ec235d1b8336ab9cd9393",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64d660a43fb8ced837b313791b7cddd27b1e7761/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64d660a43fb8ced837b313791b7cddd27b1e7761/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=64d660a43fb8ced837b313791b7cddd27b1e7761",
        "patch": "@@ -3567,7 +3567,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CB\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (IsWitnessEnabled(pindexPrev, consensusParams)) {\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != -1) {\n             bool malleated = false;"
      }
    ]
  },
  {
    "sha": "893f379ba0befef5301208b6bee8206ac4e76329",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTNmMzc5YmEwYmVmZWY1MzAxMjA4YjZiZWU4MjA2YWM0ZTc2MzI5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-26T12:01:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-28T08:57:24Z"
      },
      "message": "[Qt] Add dbcache migration path",
      "tree": {
        "sha": "87862e64ca5f17e9d12a584f45c25f8c22f20840",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87862e64ca5f17e9d12a584f45c25f8c22f20840"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/893f379ba0befef5301208b6bee8206ac4e76329",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXmcj1AAoJECnUvLZBb1PsoyYP/0ohmXATYOImO6N3/C/Qw3WY\nbSfdNSWVU5Cfp0cqhHbs2kwt2x40XrmadMULP0NDeaf7MPYF2VFpakFluAYuaUer\n38MpYCO9ziwh0ifQelQl6IlOWNBNkc406aIpUX4KZRF5UyI4g4ZFpmhs8MsNUaWa\nNAphngrQ3/KdIPyIc5U6EFcFJWBrCNNN/AHD5BKDnTEq0WZP/ONxOFZlH8lzbark\nzFRzkCwvq2BoGT97bVmLXwopATqrKgD5uqeREqoF29m1uGfvzbR9cQAmyTECxXmt\ndaPDgdoc1dg8IUUROpmDN6rr8h3I5POttTqG/ctPvqzMutp/vHQtSjhwpJlw1tc+\nzXVJVJtKKOfgWT3GzNQ+M8WhURi+YEJlcnFltsFPCl0C4vIihVcNW9uXEOMBYTqb\nI9V7rcDhQk9voTjvl1Nwm8Gm8Z51wesoov+I/o7BRHSYXgKR1nKM23sEdh7nCmls\np0zUAKmaZbP2jN14LfGg8kBRdOYljXBPIlSXgo+UGB4ifW/DR1rIeeK7HTwEMvfm\nhzkzLm4h+qOXTcn5o1yhaOFIJCJSXkDBiEg1pplkrDQV1tYnEo8V1BAiG3Etecfj\nEmDCtt9KzDsDM652ObDO604yNPixxmzA9ZQJw7nY8Wrv7ZOlVNE1f2pD5nABco80\nLddMUxEd382fgeg3ZRd+\n=C0dE\n-----END PGP SIGNATURE-----",
        "payload": "tree 87862e64ca5f17e9d12a584f45c25f8c22f20840\nparent 618c9dd8c651f15ea37a09d3ee4fa4426c75ac02\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1469534496 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1469696244 +0200\n\n[Qt] Add dbcache migration path\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/893f379ba0befef5301208b6bee8206ac4e76329",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/893f379ba0befef5301208b6bee8206ac4e76329",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/893f379ba0befef5301208b6bee8206ac4e76329/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/618c9dd8c651f15ea37a09d3ee4fa4426c75ac02"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 24,
      "deletions": 1
    },
    "files": [
      {
        "sha": "684db71a8ce0328920f9833a77eaa3e4599885eb",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/893f379ba0befef5301208b6bee8206ac4e76329/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/893f379ba0befef5301208b6bee8206ac4e76329/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=893f379ba0befef5301208b6bee8206ac4e76329",
        "patch": "@@ -43,6 +43,8 @@ void OptionsModel::Init(bool resetSettings)\n     if (resetSettings)\n         Reset();\n \n+    checkAndMigrate();\n+\n     QSettings settings;\n \n     // Ensure restart flag is unset on client startup\n@@ -429,3 +431,22 @@ bool OptionsModel::isRestartRequired()\n     QSettings settings;\n     return settings.value(\"fRestartRequired\", false).toBool();\n }\n+\n+void OptionsModel::checkAndMigrate()\n+{\n+    // Migration of default values\n+    // Check if the QSettings container was already loaded with this client version\n+    QSettings settings;\n+    static const char strSettingsVersionKey[] = \"nSettingsVersion\";\n+    int settingsVersion = settings.contains(strSettingsVersionKey) ? settings.value(strSettingsVersionKey).toInt() : 0;\n+    if (settingsVersion < CLIENT_VERSION)\n+    {\n+        // -dbcache was bumped from 100 to 300 in 0.13\n+        // see https://github.com/bitcoin/bitcoin/pull/8273\n+        // force people to upgrade to the new value if they are using 100MB\n+        if (settingsVersion < 130000 && settings.contains(\"nDatabaseCache\") && settings.value(\"nDatabaseCache\").toLongLong() == 100)\n+            settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n+\n+        settings.setValue(strSettingsVersionKey, CLIENT_VERSION);\n+    }\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "b23b5f2607a6c67814d40744764702cd8fc77138",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/893f379ba0befef5301208b6bee8206ac4e76329/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/893f379ba0befef5301208b6bee8206ac4e76329/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=893f379ba0befef5301208b6bee8206ac4e76329",
        "patch": "@@ -84,9 +84,11 @@ class OptionsModel : public QAbstractListModel\n     /* settings that were overriden by command-line */\n     QString strOverriddenByCommandLine;\n \n-    /// Add option to list of GUI options overridden through command line/config file\n+    // Add option to list of GUI options overridden through command line/config file\n     void addOverriddenOption(const std::string &option);\n \n+    // Check settings version and upgrade default values if required\n+    void checkAndMigrate();\n Q_SIGNALS:\n     void displayUnitChanged(int unit);\n     void coinControlFeaturesChanged(bool);"
      }
    ]
  },
  {
    "sha": "30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGE4N2MwNzQ3YTFjMzBjYjdmNmFkZDM4YWI1Y2RjZmE4MWRmZjBk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T09:10:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T09:28:42Z"
      },
      "message": "Merge #8407: [Qt] Add dbcache migration path\n\n893f379 [Qt] Add dbcache migration path (Jonas Schnelli)",
      "tree": {
        "sha": "a77b91c6fb5ec9555db2f96ee1cdc0ecfc703262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a77b91c6fb5ec9555db2f96ee1cdc0ecfc703262"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXmdBKAAoJEHSBCwEjRsmmYmcIAL9KlacSMboI33yzXfMlqV81\nneIZoelsiu6RiHGFoTRdK5Ua/nNhmAYxD2Sca5RkMyT7fEYEBeB9nrjgOq0SLeuQ\nImZegpTEFLcj15mcS594RM7HwmnMHt1wPS544Mds207LHOIeOMNVnM+PbvAVKiZY\nOb2BfCnf6nOxvxXYj8AshVTRTbOHVHXmYOt+7aOLkkY7RKlEWa4uc7OyFQDQYqKE\nd576/SI1SrEbGKhshStUAQyp8YGDtaTvOH8F8t35BKuhxkBrdjbDcNDfefFWabqi\nyGfBUN0FvRefOb7TMSN4QkgBe+Nr4cSLVeOUD2VlSCR1oRPWN5Sh/qHXPuWxnSk=\n=0nsM\n-----END PGP SIGNATURE-----",
        "payload": "tree a77b91c6fb5ec9555db2f96ee1cdc0ecfc703262\nparent 64d660a43fb8ced837b313791b7cddd27b1e7761\nparent 893f379ba0befef5301208b6bee8206ac4e76329\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469697014 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469698122 +0200\n\nMerge #8407: [Qt] Add dbcache migration path\n\n893f379 [Qt] Add dbcache migration path (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64d660a43fb8ced837b313791b7cddd27b1e7761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64d660a43fb8ced837b313791b7cddd27b1e7761",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64d660a43fb8ced837b313791b7cddd27b1e7761"
      },
      {
        "sha": "893f379ba0befef5301208b6bee8206ac4e76329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/893f379ba0befef5301208b6bee8206ac4e76329",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/893f379ba0befef5301208b6bee8206ac4e76329"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 24,
      "deletions": 1
    },
    "files": [
      {
        "sha": "684db71a8ce0328920f9833a77eaa3e4599885eb",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d",
        "patch": "@@ -43,6 +43,8 @@ void OptionsModel::Init(bool resetSettings)\n     if (resetSettings)\n         Reset();\n \n+    checkAndMigrate();\n+\n     QSettings settings;\n \n     // Ensure restart flag is unset on client startup\n@@ -429,3 +431,22 @@ bool OptionsModel::isRestartRequired()\n     QSettings settings;\n     return settings.value(\"fRestartRequired\", false).toBool();\n }\n+\n+void OptionsModel::checkAndMigrate()\n+{\n+    // Migration of default values\n+    // Check if the QSettings container was already loaded with this client version\n+    QSettings settings;\n+    static const char strSettingsVersionKey[] = \"nSettingsVersion\";\n+    int settingsVersion = settings.contains(strSettingsVersionKey) ? settings.value(strSettingsVersionKey).toInt() : 0;\n+    if (settingsVersion < CLIENT_VERSION)\n+    {\n+        // -dbcache was bumped from 100 to 300 in 0.13\n+        // see https://github.com/bitcoin/bitcoin/pull/8273\n+        // force people to upgrade to the new value if they are using 100MB\n+        if (settingsVersion < 130000 && settings.contains(\"nDatabaseCache\") && settings.value(\"nDatabaseCache\").toLongLong() == 100)\n+            settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n+\n+        settings.setValue(strSettingsVersionKey, CLIENT_VERSION);\n+    }\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "b23b5f2607a6c67814d40744764702cd8fc77138",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d",
        "patch": "@@ -84,9 +84,11 @@ class OptionsModel : public QAbstractListModel\n     /* settings that were overriden by command-line */\n     QString strOverriddenByCommandLine;\n \n-    /// Add option to list of GUI options overridden through command line/config file\n+    // Add option to list of GUI options overridden through command line/config file\n     void addOverriddenOption(const std::string &option);\n \n+    // Check settings version and upgrade default values if required\n+    void checkAndMigrate();\n Q_SIGNALS:\n     void displayUnitChanged(int unit);\n     void coinControlFeaturesChanged(bool);"
      }
    ]
  },
  {
    "sha": "806b9e7570a217ee432c3cc77278b841baf1660f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDZiOWU3NTcwYTIxN2VlNDMyYzNjYzc3Mjc4Yjg0MWJhZjE2NjBm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T10:42:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T11:00:02Z"
      },
      "message": "Merge #8332: semi trivial: clarify witness branches in transaction.h serialization\n\ne37b16a transaction: clarify witness branches (Daniel Cousens)",
      "tree": {
        "sha": "30339e9067c4ac0ac2d09f87fbe8801ca45a2c75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30339e9067c4ac0ac2d09f87fbe8801ca45a2c75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/806b9e7570a217ee432c3cc77278b841baf1660f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXmeWyAAoJEHSBCwEjRsmmb94H/0fiOjxrzcoGH8IJyWvp5gyo\n8hSAZW6zWe17Do/ZmkC5zhomVuFuf5QYnjNd7BIq4uFEUKvfLvMmlw+IGT7ZZmxy\n9ArtLalyBOWm3rQoxKdKkw2303Z/QXiVmXZOdKdo6bGdgQiZ3hmnvW4xEa7e4TZ4\nPmzAzPa9Z0U7huSAoWTq2jF+8H7pHkQGNpV9dOpd5Ew7x/tOji82CQsgEqb6IsX8\n2QQVcxBRvMwYwJbHExrXgzdj1o3P6TLXMrhQGQVd2OSg/Fg/voMUrSLjl/Ip0zNA\noJMqevxtb+WzGmpQaJztX7KqjqVLyl+lGw/fpKxk3ucDoo1ejZDY8NidEL/WOZs=\n=5WNF\n-----END PGP SIGNATURE-----",
        "payload": "tree 30339e9067c4ac0ac2d09f87fbe8801ca45a2c75\nparent 30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d\nparent e37b16a75c1ff86d515ef3050d2c76432ea71225\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469702540 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469703602 +0200\n\nMerge #8332: semi trivial: clarify witness branches in transaction.h serialization\n\ne37b16a transaction: clarify witness branches (Daniel Cousens)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806b9e7570a217ee432c3cc77278b841baf1660f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/806b9e7570a217ee432c3cc77278b841baf1660f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806b9e7570a217ee432c3cc77278b841baf1660f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30a87c0747a1c30cb7f6add38ab5cdcfa81dff0d"
      },
      {
        "sha": "e37b16a75c1ff86d515ef3050d2c76432ea71225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e37b16a75c1ff86d515ef3050d2c76432ea71225",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e37b16a75c1ff86d515ef3050d2c76432ea71225"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5689d15bf7eb1892f7e36e82307077969bc8c26c",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/806b9e7570a217ee432c3cc77278b841baf1660f/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/806b9e7570a217ee432c3cc77278b841baf1660f/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=806b9e7570a217ee432c3cc77278b841baf1660f",
        "patch": "@@ -290,6 +290,8 @@ struct CMutableTransaction;\n  */\n template<typename Stream, typename Operation, typename TxType>\n inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    const bool fAllowWitness = !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS);\n+\n     READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n     unsigned char flags = 0;\n     if (ser_action.ForRead()) {\n@@ -298,7 +300,7 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n         const_cast<CTxWitness*>(&tx.wit)->SetNull();\n         /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n         READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n-        if (tx.vin.size() == 0 && !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n+        if (tx.vin.size() == 0 && fAllowWitness) {\n             /* We read a dummy or an empty vin. */\n             READWRITE(flags);\n             if (flags != 0) {\n@@ -309,7 +311,7 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n             /* We read a non-empty vin. Assume a normal vout follows. */\n             READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n         }\n-        if ((flags & 1) && !(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n+        if ((flags & 1) && fAllowWitness) {\n             /* The witness flag is present, and we support witnesses. */\n             flags ^= 1;\n             const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n@@ -322,7 +324,7 @@ inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, in\n     } else {\n         // Consistency check\n         assert(tx.wit.vtxinwit.size() <= tx.vin.size());\n-        if (!(nVersion & SERIALIZE_TRANSACTION_NO_WITNESS)) {\n+        if (fAllowWitness) {\n             /* Check whether witnesses need to be serialized. */\n             if (!tx.wit.IsNull()) {\n                 flags |= 1;"
      }
    ]
  },
  {
    "sha": "2266b43e3317a889b9150e614169acda50383bf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjY2YjQzZTMzMTdhODg5YjkxNTBlNjE0MTY5YWNkYTUwMzgzYmY1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-21T19:19:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T11:22:33Z"
      },
      "message": "Port from 0.13: Create a new HD seed after encrypting the wallet\n\nForward-ports two commits from 0.13:\n- [0.13] Create a new HD seed after encrypting the wallet\n- [Wallet] Add CKeyMetadata record for HDMasterKey(s), factor out HD key generation\n\nGithub-Pull: #8389\nRebased-From: f142c11ac634df487cc4bc65a5f1c9a3e3563dd9 de45c065f0648c4c41b57cb492420ceeed29dd11",
      "tree": {
        "sha": "5b59edb89e4f652e2cd29c25b425ea6c7d1864ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b59edb89e4f652e2cd29c25b425ea6c7d1864ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2266b43e3317a889b9150e614169acda50383bf5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXmesMAAoJEHSBCwEjRsmmvrgIAJV+ZCFJQU7BdoU0l2AikkWX\nHv6KnQunZbiLBvtwcgnqNg27TK7HHMfLANQjo+YWZscZL2VWOgZjDTkAk6W7ZcqY\n35m2krYDzh9Nphr6e+A+gdiA6Y6R4nyKF4RGXgtnJx6PGX94TvZG3SRTpVX88kLO\nX/0osJctg2cZXQG1xbcDwYH5BCjyawbBnuYmZI8JX4hFTRlk/eonh+kerQX6YLb6\nVxlwWbtOoVQnucvUy5ZuPBGipgE0bhzrzSNK/mDn2yOt17Rxtki5rEfifyIcSy9i\nNnHel6ltEb4/9yvhRyomKRUZKuiCTrTk334vvYVI64St5R8XJnrNhz77XyiNp/g=\n=y/4O\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b59edb89e4f652e2cd29c25b425ea6c7d1864ce\nparent 806b9e7570a217ee432c3cc77278b841baf1660f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1469128742 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469704953 +0200\n\nPort from 0.13: Create a new HD seed after encrypting the wallet\n\nForward-ports two commits from 0.13:\n- [0.13] Create a new HD seed after encrypting the wallet\n- [Wallet] Add CKeyMetadata record for HDMasterKey(s), factor out HD key generation\n\nGithub-Pull: #8389\nRebased-From: f142c11ac634df487cc4bc65a5f1c9a3e3563dd9 de45c065f0648c4c41b57cb492420ceeed29dd11\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2266b43e3317a889b9150e614169acda50383bf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2266b43e3317a889b9150e614169acda50383bf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2266b43e3317a889b9150e614169acda50383bf5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "806b9e7570a217ee432c3cc77278b841baf1660f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806b9e7570a217ee432c3cc77278b841baf1660f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/806b9e7570a217ee432c3cc77278b841baf1660f"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 57,
      "deletions": 12
    },
    "files": [
      {
        "sha": "fa3947656809c26466fe065f553842317cdecd1c",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2266b43e3317a889b9150e614169acda50383bf5/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2266b43e3317a889b9150e614169acda50383bf5/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=2266b43e3317a889b9150e614169acda50383bf5",
        "patch": "@@ -12,13 +12,23 @@ class KeyPoolTest(BitcoinTestFramework):\n \n     def run_test(self):\n         nodes = self.nodes\n+        addr_before_encrypting = nodes[0].getnewaddress()\n+        addr_before_encrypting_data = nodes[0].validateaddress(addr_before_encrypting)\n+        wallet_info_old = nodes[0].getwalletinfo()\n+        assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n+        \n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n         # Restart node 0\n         nodes[0] = start_node(0, self.options.tmpdir)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n+        addr_data = nodes[0].validateaddress(addr)\n+        wallet_info = nodes[0].getwalletinfo()\n+        assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n+        assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])\n+        \n         try:\n             addr = nodes[0].getnewaddress()\n             raise AssertionError('Keypool should be exhausted after one address')"
      },
      {
        "sha": "a90807e5141b7ad87c3c399972bb21071237da19",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2266b43e3317a889b9150e614169acda50383bf5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2266b43e3317a889b9150e614169acda50383bf5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2266b43e3317a889b9150e614169acda50383bf5",
        "patch": "@@ -2081,7 +2081,7 @@ UniValue encryptwallet(const UniValue& params, bool fHelp)\n     // slack space in .dat files; that is bad if the old data is\n     // unencrypted private keys. So:\n     StartShutdown();\n-    return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.\";\n+    return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n }\n \n UniValue lockunspent(const UniValue& params, bool fHelp)"
      },
      {
        "sha": "e5ee5063a5d31f39f1095f6595e0acfe7c78240d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 10,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2266b43e3317a889b9150e614169acda50383bf5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2266b43e3317a889b9150e614169acda50383bf5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2266b43e3317a889b9150e614169acda50383bf5",
        "patch": "@@ -626,6 +626,15 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         Lock();\n         Unlock(strWalletPassphrase);\n+\n+        // if we are using HD, replace the HD master key (seed) with a new one\n+        if (!hdChain.masterKeyID.IsNull()) {\n+            CKey key;\n+            CPubKey masterPubKey = GenerateNewHDMasterKey();\n+            if (!SetHDMasterKey(masterPubKey))\n+                return false;\n+        }\n+\n         NewKeyPool();\n         Lock();\n \n@@ -1166,20 +1175,43 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n-bool CWallet::SetHDMasterKey(const CKey& key)\n+CPubKey CWallet::GenerateNewHDMasterKey()\n+{\n+    CKey key;\n+    key.MakeNewKey(true);\n+\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // calculate the pubkey\n+    CPubKey pubkey = key.GetPubKey();\n+    assert(key.VerifyPubKey(pubkey));\n+\n+    // set the hd keypath to \"m\" -> Master, refers the masterkeyid to itself\n+    metadata.hdKeypath     = \"m\";\n+    metadata.hdMasterKeyID = pubkey.GetID();\n+\n+    {\n+        LOCK(cs_wallet);\n+\n+        // mem store the metadata\n+        mapKeyMetadata[pubkey.GetID()] = metadata;\n+\n+        // write the key&metadata to the database\n+        if (!AddKeyPubKey(key, pubkey))\n+            throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n+    }\n+\n+    return pubkey;\n+}\n+\n+bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n {\n     LOCK(cs_wallet);\n \n     // ensure this wallet.dat can only be opened by clients supporting HD\n     SetMinVersion(FEATURE_HD);\n \n-    // store the key as normal \"key\"/\"ckey\" object\n-    // in the database\n-    // key metadata is not required\n-    CPubKey pubkey = key.GetPubKey();\n-    if (!AddKeyPubKey(key, pubkey))\n-        throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n-\n     // store the keyid (hash160) together with\n     // the child index counter in the database\n     // as a hdchain object\n@@ -3299,8 +3331,8 @@ bool CWallet::InitLoadWallet()\n         if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && walletInstance->hdChain.masterKeyID.IsNull()) {\n             // generate a new master key\n             CKey key;\n-            key.MakeNewKey(true);\n-            if (!walletInstance->SetHDMasterKey(key))\n+            CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n+            if (!walletInstance->SetHDMasterKey(masterPubKey))\n                 throw std::runtime_error(\"CWallet::GenerateNewKey(): Storing master key failed\");\n         }\n         CPubKey newDefaultKey;"
      },
      {
        "sha": "0c95fdf4b04d86b453cc6c1777ba7217dc14f725",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2266b43e3317a889b9150e614169acda50383bf5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2266b43e3317a889b9150e614169acda50383bf5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2266b43e3317a889b9150e614169acda50383bf5",
        "patch": "@@ -901,8 +901,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool SetHDChain(const CHDChain& chain, bool memonly);\n     const CHDChain& GetHDChain() { return hdChain; }\n \n+    /* Generates a new HD master key (will not be activated) */\n+    CPubKey GenerateNewHDMasterKey();\n+    \n     /* Set the current HD master key (will reset the chain child index counters) */\n-    bool SetHDMasterKey(const CKey& key);\n+    bool SetHDMasterKey(const CPubKey& key);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzNjNzI3Y2M0ZjcwMzZiNzliNzJkOTNhYzVmNWRlNGY4NmQ3MWUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T11:30:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-28T11:54:08Z"
      },
      "message": "Merge #8321: [trivial] Switched constants to sizeof()\n\nfbc6070 [trivial] Switched constants to sizeof() (Thomas Snider)",
      "tree": {
        "sha": "4287471019f6316ed50411e0f572ad0e9620c352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4287471019f6316ed50411e0f572ad0e9620c352"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXmfJhAAoJEHSBCwEjRsmmUZsH/1A+FNFhU+fx5R/oMsj6PGyo\nPshh9V2j4cw5HBAmrOHMyt+QpyVlPRHuxyWpFerxMcMWrEvcGQJRWsrBLJ6CfmQP\nB1LlsarftL7eAzq8SOmLs/Sza9pcrJPn+Yklm4jtiEYg/R+HRuMIcF2jrt4ixKBg\npqcuxcYezNxqo7mGaHHSnUk+PkHhfKD+0U4ZJfV/nCs50ZLdg+QjB5ihdLKIE+gf\ntqS68CepNH6bGiHvFFeuGlTcbLrlX2ucYsGu6Hrtt3Nf9/cNMJCtGSe4g5h8OpJa\nD5U0jUm4hEsAJzq9QtPKwbNnLEZOxia+HUqRWYjSn9s0eMIP1jqOhU3F7kS9Kxo=\n=GaLv\n-----END PGP SIGNATURE-----",
        "payload": "tree 4287471019f6316ed50411e0f572ad0e9620c352\nparent 2266b43e3317a889b9150e614169acda50383bf5\nparent fbc60703a53c1544054fe6ba0753d23d0508f4e9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469705415 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469706848 +0200\n\nMerge #8321: [trivial] Switched constants to sizeof()\n\nfbc6070 [trivial] Switched constants to sizeof() (Thomas Snider)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133c727cc4f7036b79b72d93ac5f5de4f86d71e1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2266b43e3317a889b9150e614169acda50383bf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2266b43e3317a889b9150e614169acda50383bf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2266b43e3317a889b9150e614169acda50383bf5"
      },
      {
        "sha": "fbc60703a53c1544054fe6ba0753d23d0508f4e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc60703a53c1544054fe6ba0753d23d0508f4e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbc60703a53c1544054fe6ba0753d23d0508f4e9"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 23,
      "deletions": 16
    },
    "files": [
      {
        "sha": "b589710badffb11e26b2d65520b72d61c4f42e03",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/133c727cc4f7036b79b72d93ac5f5de4f86d71e1/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/133c727cc4f7036b79b72d93ac5f5de4f86d71e1/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "patch": "@@ -15,7 +15,7 @@\n #include <vector>\n \n \n-/** \n+/**\n  * secp256k1:\n  * const unsigned int PRIVATE_KEY_SIZE = 279;\n  * const unsigned int PUBLIC_KEY_SIZE  = 65;\n@@ -45,6 +45,8 @@ class CKey\n     //! The actual byte data\n     unsigned char vch[32];\n \n+    static_assert(sizeof(vch) == 32, \"vch must be 32 bytes in length to not break serialization\");\n+\n     //! Check whether the 32-byte array pointed to be vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n \n@@ -70,20 +72,19 @@ class CKey\n \n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n-        return a.fCompressed == b.fCompressed && a.size() == b.size() &&\n-               memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n+        return a.fCompressed == b.fCompressed &&\n+            a.size() == b.size() &&\n+            memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (pend - pbegin != 32) {\n+        if (pend - pbegin != sizeof(vch)) {\n             fValid = false;\n-            return;\n-        }\n-        if (Check(&pbegin[0])) {\n-            memcpy(vch, (unsigned char*)&pbegin[0], 32);\n+        } else if (Check(&pbegin[0])) {\n+            memcpy(vch, (unsigned char*)&pbegin[0], sizeof(vch));\n             fValid = true;\n             fCompressed = fCompressedIn;\n         } else {\n@@ -92,7 +93,7 @@ class CKey\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? 32 : 0); }\n+    unsigned int size() const { return (fValid ? sizeof(vch) : 0); }\n     const unsigned char* begin() const { return vch; }\n     const unsigned char* end() const { return vch + size(); }\n \n@@ -110,7 +111,7 @@ class CKey\n \n     /**\n      * Convert the private key to a CPrivKey (serialized OpenSSL private key data).\n-     * This is expensive. \n+     * This is expensive.\n      */\n     CPrivKey GetPrivKey() const;\n \n@@ -157,8 +158,11 @@ struct CExtKey {\n \n     friend bool operator==(const CExtKey& a, const CExtKey& b)\n     {\n-        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               a.chaincode == b.chaincode && a.key == b.key;\n+        return a.nDepth == b.nDepth &&\n+            memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], sizeof(vchFingerprint)) == 0 &&\n+            a.nChild == b.nChild &&\n+            a.chaincode == b.chaincode &&\n+            a.key == b.key;\n     }\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;"
      },
      {
        "sha": "aebfdbc82662880a21cb4ea95b874dd34dace94c",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/133c727cc4f7036b79b72d93ac5f5de4f86d71e1/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/133c727cc4f7036b79b72d93ac5f5de4f86d71e1/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "patch": "@@ -13,7 +13,7 @@\n #include <stdexcept>\n #include <vector>\n \n-/** \n+/**\n  * secp256k1:\n  * const unsigned int PRIVATE_KEY_SIZE = 279;\n  * const unsigned int PUBLIC_KEY_SIZE  = 65;\n@@ -156,7 +156,7 @@ class CPubKey\n \n     /*\n      * Check syntactic correctness.\n-     * \n+     *\n      * Note that this is consensus critical as CheckSig() calls it!\n      */\n     bool IsValid() const\n@@ -203,8 +203,11 @@ struct CExtPubKey {\n \n     friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)\n     {\n-        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               a.chaincode == b.chaincode && a.pubkey == b.pubkey;\n+        return a.nDepth == b.nDepth &&\n+            memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], sizeof(vchFingerprint)) == 0 &&\n+            a.nChild == b.nChild &&\n+            a.chaincode == b.chaincode &&\n+            a.pubkey == b.pubkey;\n     }\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;"
      }
    ]
  },
  {
    "sha": "54af51d98d0b38f08c58dd589bff81883aee2854",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGFmNTFkOThkMGIzOGYwOGM1OGRkNTg5YmZmODE4ODNhZWUyODU0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-28T12:59:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-28T13:05:35Z"
      },
      "message": "[QA] Add walletdump RPC test (including HD- & encryption-tests)",
      "tree": {
        "sha": "7afdeb33f1dc77ede4b298ba6ebfeb77ce83b80e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7afdeb33f1dc77ede4b298ba6ebfeb77ce83b80e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54af51d98d0b38f08c58dd589bff81883aee2854",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXmgMgAAoJECnUvLZBb1PsLyUQALjmv59XHlF4vzjgTnpNg0tw\ncmatbAizV5KrVikeQ+Z71oiNijrNPcloBNj5bQlSl8Y4Pn/JEb7/uHSaAuXnvcg7\nt0XF1u2SOAa8FUeupD11/4rfd2c8PbspmHe4Rf0n2WwroIOFlKx9XPX5+SD9ZtW6\nnHv0h5I2clm+VJ14/WL1lpC0hnnsgpphRsczkS0EWjwdDMFW5D+osLrxQrnAk5MF\ne7Ykhk/8y2qyzrovW2Axb93u8vltH3oFMDgBANnm70hR/m4G19XF6KCsohiB5FyR\nd095Imbel2PYP4GgdgJo4OYj4ZkC2wkzK8GCegmUJHYkdRz3Kzi7DtgJmNEtPIn/\nnMMQqfuQ0qPkaHUQKZmy2UMtFk/MPhLJjcG8PARYrxaAcbQK6wU7/nvfjNcTueQB\ntifbRdoR8MjnMvTXnS87yAFzQNbaV3fanNWCjVprVYkxCGxlmqbqciZFAT+RXRww\n5JCeopUmEybuE2OLYkhyZG6Lf8ELDywzRiQwl4tBHYT36RMrT4KR8b5j+gINrRqk\nsUK7Z3w7uK5Y85CstCvwJB8zkz4zmunZ9mzOh/cP6K+FOP3N9kr3VCi9lgh1oZto\nPOLw+XZhphLTVUe2O3VMPEdsMloxb1tbnkijABOAg/jFkD30iRO7OJpYv2fwNbmD\n+gaUcDvV9fee932RWqfX\n=0AU+\n-----END PGP SIGNATURE-----",
        "payload": "tree 7afdeb33f1dc77ede4b298ba6ebfeb77ce83b80e\nparent 133c727cc4f7036b79b72d93ac5f5de4f86d71e1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1469710753 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1469711135 +0200\n\n[QA] Add walletdump RPC test (including HD- & encryption-tests)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54af51d98d0b38f08c58dd589bff81883aee2854",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54af51d98d0b38f08c58dd589bff81883aee2854",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54af51d98d0b38f08c58dd589bff81883aee2854/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/133c727cc4f7036b79b72d93ac5f5de4f86d71e1"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 121,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5900fa51e34b4d5a75dce8d3211fcd03496b7680",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54af51d98d0b38f08c58dd589bff81883aee2854/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54af51d98d0b38f08c58dd589bff81883aee2854/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=54af51d98d0b38f08c58dd589bff81883aee2854",
        "patch": "@@ -107,6 +107,7 @@\n     'bip68-112-113-p2p.py',\n     'wallet.py',\n     'wallet-hd.py',\n+    'wallet-dump.py',\n     'listtransactions.py',\n     'receivedby.py',\n     'mempool_resurrect_test.py',"
      },
      {
        "sha": "dd675f57fc46a21620911b4ae84e3e9507c0e9d9",
        "filename": "qa/rpc-tests/wallet-dump.py",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54af51d98d0b38f08c58dd589bff81883aee2854/qa/rpc-tests/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54af51d98d0b38f08c58dd589bff81883aee2854/qa/rpc-tests/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-dump.py?ref=54af51d98d0b38f08c58dd589bff81883aee2854",
        "patch": "@@ -0,0 +1,120 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import os\n+import shutil\n+\n+\n+class WalletDumpTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def setup_network(self, split=False):\n+        extra_args = [[\"-keypool=100\"]]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test (self):\n+        tmpdir = self.options.tmpdir\n+\n+        #generate 20 addresses to compare against the dump\n+        test_addr_count = 20\n+        addrs = []\n+        for i in range(0,test_addr_count):\n+            addr = self.nodes[0].getnewaddress()\n+            vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n+            addrs.append(vaddr)\n+\n+        # dump unencrypted wallet\n+        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n+\n+        #open file\n+        inputfile = open(tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        found_addr = 0\n+        found_addr_chg = 0\n+        found_addr_rsv = 0\n+        hdmasteraddr = \"\"\n+        for line in inputfile:\n+            #only read non comment lines\n+            if line[0] != \"#\" and len(line) > 10:\n+                #split out some data\n+                keyLabel, comment = line.split(\"#\")\n+                key = keyLabel.split(\" \")[0]\n+                keytype = keyLabel.split(\" \")[2]\n+                if len(comment) > 1:\n+                    addrKeypath = comment.split(\" addr=\")[1]\n+                    addr = addrKeypath.split(\" \")[0]\n+                    keypath = \"\"\n+                    if keytype != \"hdmaster=1\":\n+                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n+                    else:\n+                        #keep hd master for later comp.\n+                        hdmasteraddr = addr\n+\n+                    #count key types\n+                    for addrObj in addrs:\n+                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n+                            found_addr+=1\n+                            break\n+                        elif (keytype == \"change=1\"):\n+                            found_addr_chg+=1\n+                            break\n+                        elif (keytype == \"reserve=1\"):\n+                            found_addr_rsv+=1\n+                            break\n+        assert(found_addr == test_addr_count) #all keys must be in the dump\n+        assert(found_addr_chg == 50) #50 blocks where mined\n+        assert(found_addr_rsv == 100) #100 reserve keys (keypool)\n+\n+        #encrypt wallet, restart, unlock and dump\n+        self.nodes[0].encryptwallet('test')\n+        bitcoind_processes[0].wait()\n+        self.nodes[0] = start_node(0, self.options.tmpdir)\n+        self.nodes[0].walletpassphrase('test', 10)\n+        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n+\n+        #open dump done with an encrypted wallet\n+        inputfile = open(tmpdir + \"/node0/wallet.encrypted.dump\")\n+        found_addr = 0\n+        found_addr_chg = 0\n+        found_addr_rsv = 0\n+        for line in inputfile:\n+            if line[0] != \"#\" and len(line) > 10:\n+                keyLabel, comment = line.split(\"#\")\n+                key = keyLabel.split(\" \")[0]\n+                keytype = keyLabel.split(\" \")[2]\n+                if len(comment) > 1:\n+                    addrKeypath = comment.split(\" addr=\")[1]\n+                    addr = addrKeypath.split(\" \")[0]\n+                    keypath = \"\"\n+                    if keytype != \"hdmaster=1\":\n+                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n+                    else:\n+                        #ensure we have generated a new hd master key\n+                        assert(hdmasteraddr != addr)\n+                    if keytype == \"inactivehdmaster=1\":\n+                        #ensure the old master is still available\n+                        assert(hdmasteraddr == addr)\n+                    for addrObj in addrs:\n+                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n+                            found_addr+=1\n+                            break\n+                        elif (keytype == \"change=1\"):\n+                            found_addr_chg+=1\n+                            break\n+                        elif (keytype == \"reserve=1\"):\n+                            found_addr_rsv+=1\n+                            break\n+\n+        assert(found_addr == test_addr_count)\n+        assert(found_addr_chg == 150) #old reserve keys are marked as change now\n+        assert(found_addr_rsv == 100) #keypool size\n+\n+if __name__ == '__main__':\n+    WalletDumpTest().main ()"
      }
    ]
  },
  {
    "sha": "8bfd70817bf8b8b07b81660e47c88dd122b7423f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmZkNzA4MTdiZjhiOGIwN2I4MTY2MGU0N2M4OGRkMTIyYjc0MjNm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-28T18:27:19Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-28T18:27:19Z"
      },
      "message": "Enable size accounting in mining unit tests",
      "tree": {
        "sha": "b2bfcc6d0f5a150dc38dfdded9fd9b9da3fbec06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2bfcc6d0f5a150dc38dfdded9fd9b9da3fbec06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bfd70817bf8b8b07b81660e47c88dd122b7423f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bfd70817bf8b8b07b81660e47c88dd122b7423f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bfd70817bf8b8b07b81660e47c88dd122b7423f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bfd70817bf8b8b07b81660e47c88dd122b7423f/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "15fceb963a59f1c81165fd31e5e41ee02e83c3ae",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bfd70817bf8b8b07b81660e47c88dd122b7423f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bfd70817bf8b8b07b81660e47c88dd122b7423f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8bfd70817bf8b8b07b81660e47c88dd122b7423f",
        "patch": "@@ -181,9 +181,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n-    // Disable size accounting (CPFP does not support it)\n-    mapArgs[\"-blockmaxsize\"] = strprintf(\"%u\", MAX_BLOCK_SERIALIZED_SIZE);\n-\n+    // Note that by default, these tests run with size accounting enabled.\n     const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;"
      }
    ]
  },
  {
    "sha": "a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmNjMjk5NTQxZmM5ZGY1YWYwMTBjZTYzZWIxZGQzNGQ4YzRiNmUy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-16T18:57:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-28T22:48:20Z"
      },
      "message": "Mempool: Use Consensus::CheckTxInputs direclty over main::CheckInputs",
      "tree": {
        "sha": "f52ef4c884de78f70d3bd008dfd5fb58521870f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f52ef4c884de78f70d3bd008dfd5fb58521870f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "304eff3c614aa18f4d5d5d367024b0dbbb4dce4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/304eff3c614aa18f4d5d5d367024b0dbbb4dce4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/304eff3c614aa18f4d5d5d367024b0dbbb4dce4e"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 20,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b60bb05e187f669f0efdb29f2ce1e92ae4d75c90",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2",
        "patch": "@@ -351,9 +351,22 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n \n+/** Transaction validation functions */\n+\n /** Context-independent validity checks */\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n \n+namespace Consensus {\n+\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n+\n+} // namespace Consensus\n+\n /**\n  * Check if transaction is final and can be included in a block with the\n  * specified height and time. Consensus critical."
      },
      {
        "sha": "b30022bd66714a1fb359b0f3947a2a9e83d38ce8",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2",
        "patch": "@@ -657,6 +657,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n+    const int64_t nSpendHeight = GetSpendHeight(mempoolDuplicate);\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n@@ -737,7 +738,9 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             waitingOnDependants.push_back(&(*it));\n         else {\n             CValidationState state;\n-            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n+            bool fCheckResult = tx.IsCoinBase() ||\n+                Consensus::CheckTxInputs(tx, state, mempoolDuplicate, nSpendHeight);\n+            assert(fCheckResult);\n             UpdateCoins(tx, mempoolDuplicate, 1000000);\n         }\n     }\n@@ -751,7 +754,9 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n+            bool fCheckResult = entry->GetTx().IsCoinBase() ||\n+                Consensus::CheckTxInputs(entry->GetTx(), state, mempoolDuplicate, nSpendHeight);\n+            assert(fCheckResult);\n             UpdateCoins(entry->GetTx(), mempoolDuplicate, 1000000);\n             stepsSinceLastRemove = 0;\n         }"
      }
    ]
  },
  {
    "sha": "ad087638ee4864d6244ec9381ff764bfa6ee5086",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDA4NzYzOGVlNDg2NGQ2MjQ0ZWM5MzgxZmY3NjRiZmE2ZWU1MDg2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-28T22:46:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-28T22:59:02Z"
      },
      "message": "Merge #8412: libconsensus: Expose a flag for BIP112\n\nd12b732 libconsensus: Expose a flag for BIP112 (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "53d398a58b3e8ae19af0716119fe383e1953127d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53d398a58b3e8ae19af0716119fe383e1953127d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad087638ee4864d6244ec9381ff764bfa6ee5086",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJXmo42AAoJENuhpnN5oakxQ5EP/0HJ/CshWH3+yaM9DRS1DcVH\nzbQJsGvzEcRCEX9BsDE3CmCTargwhsXarVKZS6wEh7k+7dGVtKT5JZPNErpnw/KF\n8F3a+8GzhUzH+SmaR37/zzCwQ3Aja/sHRYr5gb8YUh5ledFZZzn93mFctK9sZ9Xy\nwsGoj6SN1YrQGkPpj9/WR431DagXt4+XocLvEDnYqRp9g7bQ3GX160ZfbK68FLbP\n03rfxAEVBh6eh2UVdd9SUHcnT2BxiUSmncUDAzLTgiCHCf8YThq+W6FAOH9UA+RS\nkpp2Z5qC8L7UyJmP294pzP13XGjB5EegWPmSqgwdb9UL/lTv7ze58bzE+F9pIX4s\nJCn7tVRlxnZfWQpBCgU1y3ikxuuQv1HqPmsKB7hUsycgovGe0Rt8xA9JZD2EdwMs\nyai/M62axlgJTmNIzFZpFh5WNHSMgszbWM7GbrMnrgrOqJTIV1mHpqykMHhJpNCG\nZu3zXiMAmlJAbiCvRJeotCQkz4Plq86i5ZTpFQsjNkPkyUjEQhV1v0lCvmaNtBLG\nGWJ3aVac/XnvvShO05/L75bSqzLcXw1AbUc3leix1yf+G8U4vn3ckkTtEZwAEq1I\nRXvO0TMNx8yvla5XSGdshQ3iquoijIGqfs7dCU9W4oCXXgMIUmbnpsAqB6YUQvtS\nOVOh4tJFP35FNrjYUnzM\n=29Do\n-----END PGP SIGNATURE-----",
        "payload": "tree 53d398a58b3e8ae19af0716119fe383e1953127d\nparent 133c727cc4f7036b79b72d93ac5f5de4f86d71e1\nparent d12b732ac287a1ed7543481b79801c9afc333b7f\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1469746000 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1469746742 +0200\n\nMerge #8412: libconsensus: Expose a flag for BIP112\n\nd12b732 libconsensus: Expose a flag for BIP112 (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad087638ee4864d6244ec9381ff764bfa6ee5086",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad087638ee4864d6244ec9381ff764bfa6ee5086",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad087638ee4864d6244ec9381ff764bfa6ee5086/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/133c727cc4f7036b79b72d93ac5f5de4f86d71e1"
      },
      {
        "sha": "d12b732ac287a1ed7543481b79801c9afc333b7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d12b732ac287a1ed7543481b79801c9afc333b7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d12b732ac287a1ed7543481b79801c9afc333b7f"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f73a8e30bc6c488ccb48f5756d758bfa32fb020e",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad087638ee4864d6244ec9381ff764bfa6ee5086/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad087638ee4864d6244ec9381ff764bfa6ee5086/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=ad087638ee4864d6244ec9381ff764bfa6ee5086",
        "patch": "@@ -51,6 +51,7 @@ enum\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), // enable CHECKSEQUENCEVERIFY (BIP112)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), // enable WITNESS (BIP141)\n };\n "
      }
    ]
  },
  {
    "sha": "755aa05174e06effd758eeb78c5af9fb465e9611",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTVhYTA1MTc0ZTA2ZWZmZDc1OGVlYjc4YzVhZjlmYjQ2NWU5NjEx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-07-28T21:52:51Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-07-28T23:07:15Z"
      },
      "message": "httpserver: use a future rather than relying on boost's try_join_for",
      "tree": {
        "sha": "e2bdc8e900293547a436f6c3b476f451f79afbfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2bdc8e900293547a436f6c3b476f451f79afbfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/755aa05174e06effd758eeb78c5af9fb465e9611",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/755aa05174e06effd758eeb78c5af9fb465e9611",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/755aa05174e06effd758eeb78c5af9fb465e9611",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/755aa05174e06effd758eeb78c5af9fb465e9611/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/133c727cc4f7036b79b72d93ac5f5de4f86d71e1"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7150f96ed7f4679cae6e4915cfd0526a51bb7468",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/755aa05174e06effd758eeb78c5af9fb465e9611/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/755aa05174e06effd758eeb78c5af9fb465e9611/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=755aa05174e06effd758eeb78c5af9fb465e9611",
        "patch": "@@ -19,6 +19,7 @@\n #include <sys/types.h>\n #include <sys/stat.h>\n #include <signal.h>\n+#include <future>\n \n #include <event2/event.h>\n #include <event2/http.h>\n@@ -302,13 +303,14 @@ static void http_reject_request_cb(struct evhttp_request* req, void*)\n }\n \n /** Event dispatcher thread */\n-static void ThreadHTTP(struct event_base* base, struct evhttp* http)\n+static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n {\n     RenameThread(\"bitcoin-http\");\n     LogPrint(\"http\", \"Entering http event loop\\n\");\n     event_base_dispatch(base);\n     // Event loop will be interrupted by InterruptHTTPServer()\n     LogPrint(\"http\", \"Exited http event loop\\n\");\n+    return event_base_got_break(base) == 0;\n }\n \n /** Bind HTTP server to specified addresses */\n@@ -438,13 +440,16 @@ bool InitHTTPServer()\n }\n \n boost::thread threadHTTP;\n+std::future<bool> threadResult;\n \n bool StartHTTPServer()\n {\n     LogPrint(\"http\", \"Starting HTTP server\\n\");\n     int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n-    threadHTTP = boost::thread(boost::bind(&ThreadHTTP, eventBase, eventHTTP));\n+    std::packaged_task<bool(event_base*, evhttp*)> task(ThreadHTTP);\n+    threadResult = task.get_future();\n+    threadHTTP = boost::thread(std::bind(std::move(task), eventBase, eventHTTP));\n \n     for (int i = 0; i < rpcThreads; i++)\n         boost::thread(boost::bind(&HTTPWorkQueueRun, workQueue));\n@@ -482,15 +487,11 @@ void StopHTTPServer()\n         // master that appears to be solved, so in the future that solution\n         // could be used again (if desirable).\n         // (see discussion in https://github.com/bitcoin/bitcoin/pull/6990)\n-#if BOOST_VERSION >= 105000\n-        if (!threadHTTP.try_join_for(boost::chrono::milliseconds(2000))) {\n-#else\n-        if (!threadHTTP.timed_join(boost::posix_time::milliseconds(2000))) {\n-#endif\n+        if (threadResult.valid() && threadResult.wait_for(std::chrono::milliseconds(2000)) == std::future_status::timeout) {\n             LogPrintf(\"HTTP event loop did not exit within allotted time, sending loopbreak\\n\");\n             event_base_loopbreak(eventBase);\n-            threadHTTP.join();\n         }\n+        threadHTTP.join();\n     }\n     if (eventHTTP) {\n         evhttp_free(eventHTTP);"
      }
    ]
  },
  {
    "sha": "d3773ca9aeb0d2f12dc0c5a0726778050c8cb455",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzc3M2NhOWFlYjBkMmYxMmRjMGM1YTA3MjY3NzgwNTBjOGNiNDU1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-07-28T22:21:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-07-28T23:07:23Z"
      },
      "message": "httpserver: explicitly detach worker threads\n\nWhen using std::thread in place of boost::thread, letting the threads destruct\nresults in a std::terminate. According to the docs, the same thing should be\nbe happening in later boost versions:\nhttp://www.boost.org/doc/libs/1_55_0/doc/html/thread/thread_management.html#thread.thread_management.thread.destructor\n\nI'm unsure why this hasn't blown up already, but explicitly detaching can't\nhurt.",
      "tree": {
        "sha": "1e084ffa62450d8beea7d9c3aab1aa437f542483",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e084ffa62450d8beea7d9c3aab1aa437f542483"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3773ca9aeb0d2f12dc0c5a0726778050c8cb455",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3773ca9aeb0d2f12dc0c5a0726778050c8cb455",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3773ca9aeb0d2f12dc0c5a0726778050c8cb455",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3773ca9aeb0d2f12dc0c5a0726778050c8cb455/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "755aa05174e06effd758eeb78c5af9fb465e9611",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/755aa05174e06effd758eeb78c5af9fb465e9611",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/755aa05174e06effd758eeb78c5af9fb465e9611"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8d0d3c15846629d9fe7edc965e12ca84b086bb75",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3773ca9aeb0d2f12dc0c5a0726778050c8cb455/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3773ca9aeb0d2f12dc0c5a0726778050c8cb455/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=d3773ca9aeb0d2f12dc0c5a0726778050c8cb455",
        "patch": "@@ -451,8 +451,10 @@ bool StartHTTPServer()\n     threadResult = task.get_future();\n     threadHTTP = boost::thread(std::bind(std::move(task), eventBase, eventHTTP));\n \n-    for (int i = 0; i < rpcThreads; i++)\n-        boost::thread(boost::bind(&HTTPWorkQueueRun, workQueue));\n+    for (int i = 0; i < rpcThreads; i++) {\n+        boost::thread rpc_worker(HTTPWorkQueueRun, workQueue);\n+        rpc_worker.detach();\n+    }\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "7e87033447149e54d9b5ab2f90ad3a7ed094d784",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTg3MDMzNDQ3MTQ5ZTU0ZDliNWFiMmY5MGFkM2E3ZWQwOTRkNzg0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-07-28T22:31:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-07-28T23:08:04Z"
      },
      "message": "httpserver: replace boost threads with std\n\nalong with mutex/condvar/bind/etc.\n\nhttpserver handles its own interruption, so there's no reason not to use std\nthreading.\n\nWhile we're at it, may as well kill the BOOST_FOREACH's as well.",
      "tree": {
        "sha": "40da082665712446b5048551cc5a019b11c2bf35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40da082665712446b5048551cc5a019b11c2bf35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e87033447149e54d9b5ab2f90ad3a7ed094d784",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e87033447149e54d9b5ab2f90ad3a7ed094d784",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e87033447149e54d9b5ab2f90ad3a7ed094d784",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e87033447149e54d9b5ab2f90ad3a7ed094d784/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3773ca9aeb0d2f12dc0c5a0726778050c8cb455",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3773ca9aeb0d2f12dc0c5a0726778050c8cb455",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3773ca9aeb0d2f12dc0c5a0726778050c8cb455"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 22,
      "deletions": 27
    },
    "files": [
      {
        "sha": "be7a6a1ddee86c1025554991a077b6fc938b7151",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 21,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e87033447149e54d9b5ab2f90ad3a7ed094d784/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e87033447149e54d9b5ab2f90ad3a7ed094d784/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=7e87033447149e54d9b5ab2f90ad3a7ed094d784",
        "patch": "@@ -35,9 +35,6 @@\n #endif\n #endif\n \n-#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n-#include <boost/foreach.hpp>\n-\n /** Maximum size of http request (request line + headers) */\n static const size_t MAX_HEADERS_SIZE = 8192;\n \n@@ -69,8 +66,8 @@ class WorkQueue\n {\n private:\n     /** Mutex protects entire object */\n-    CWaitableCriticalSection cs;\n-    CConditionVariable cond;\n+    std::mutex cs;\n+    std::condition_variable cond;\n     std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;\n     size_t maxDepth;\n@@ -83,12 +80,12 @@ class WorkQueue\n         WorkQueue &wq;\n         ThreadCounter(WorkQueue &w): wq(w)\n         {\n-            boost::lock_guard<boost::mutex> lock(wq.cs);\n+            std::lock_guard<std::mutex> lock(wq.cs);\n             wq.numThreads += 1;\n         }\n         ~ThreadCounter()\n         {\n-            boost::lock_guard<boost::mutex> lock(wq.cs);\n+            std::lock_guard<std::mutex> lock(wq.cs);\n             wq.numThreads -= 1;\n             wq.cond.notify_all();\n         }\n@@ -109,7 +106,7 @@ class WorkQueue\n     /** Enqueue a work item */\n     bool Enqueue(WorkItem* item)\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         if (queue.size() >= maxDepth) {\n             return false;\n         }\n@@ -124,7 +121,7 @@ class WorkQueue\n         while (running) {\n             std::unique_ptr<WorkItem> i;\n             {\n-                boost::unique_lock<boost::mutex> lock(cs);\n+                std::unique_lock<std::mutex> lock(cs);\n                 while (running && queue.empty())\n                     cond.wait(lock);\n                 if (!running)\n@@ -138,22 +135,22 @@ class WorkQueue\n     /** Interrupt and exit loops */\n     void Interrupt()\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         running = false;\n         cond.notify_all();\n     }\n     /** Wait for worker threads to exit */\n     void WaitExit()\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         while (numThreads > 0)\n             cond.wait(lock);\n     }\n \n     /** Return current depth of queue */\n     size_t Depth()\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         return queue.size();\n     }\n };\n@@ -190,7 +187,7 @@ static bool ClientAllowed(const CNetAddr& netaddr)\n {\n     if (!netaddr.IsValid())\n         return false;\n-    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+    for(const CSubNet& subnet : rpc_allow_subnets)\n         if (subnet.Match(netaddr))\n             return true;\n     return false;\n@@ -204,7 +201,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(\"::1\"));         // always allow IPv6 localhost\n     if (mapMultiArgs.count(\"-rpcallowip\")) {\n         const std::vector<std::string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n-        BOOST_FOREACH (std::string strAllow, vAllow) {\n+        for (std::string strAllow : vAllow) {\n             CSubNet subnet(strAllow);\n             if (!subnet.IsValid()) {\n                 uiInterface.ThreadSafeMessageBox(\n@@ -216,7 +213,7 @@ static bool InitHTTPAllowList()\n         }\n     }\n     std::string strAllowed;\n-    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+    for (const CSubNet& subnet : rpc_allow_subnets)\n         strAllowed += subnet.ToString() + \" \";\n     LogPrint(\"http\", \"Allowing HTTP connections from: %s\\n\", strAllowed);\n     return true;\n@@ -439,7 +436,7 @@ bool InitHTTPServer()\n     return true;\n }\n \n-boost::thread threadHTTP;\n+std::thread threadHTTP;\n std::future<bool> threadResult;\n \n bool StartHTTPServer()\n@@ -449,10 +446,10 @@ bool StartHTTPServer()\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n     std::packaged_task<bool(event_base*, evhttp*)> task(ThreadHTTP);\n     threadResult = task.get_future();\n-    threadHTTP = boost::thread(std::bind(std::move(task), eventBase, eventHTTP));\n+    threadHTTP = std::thread(std::move(task), eventBase, eventHTTP);\n \n     for (int i = 0; i < rpcThreads; i++) {\n-        boost::thread rpc_worker(HTTPWorkQueueRun, workQueue);\n+        std::thread rpc_worker(HTTPWorkQueueRun, workQueue);\n         rpc_worker.detach();\n     }\n     return true;\n@@ -463,7 +460,7 @@ void InterruptHTTPServer()\n     LogPrint(\"http\", \"Interrupting HTTP server\\n\");\n     if (eventHTTP) {\n         // Unlisten sockets\n-        BOOST_FOREACH (evhttp_bound_socket *socket, boundSockets) {\n+        for (evhttp_bound_socket *socket : boundSockets) {\n             evhttp_del_accept_socket(eventHTTP, socket);\n         }\n         // Reject requests on current connections\n@@ -520,7 +517,7 @@ static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n         delete self;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler):\n+HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void(void)>& handler):\n     deleteWhenTriggered(deleteWhenTriggered), handler(handler)\n {\n     ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n@@ -602,7 +599,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n     HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-        boost::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n+        std::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n     ev->trigger(0);\n     replySent = true;\n     req = 0; // transferred back to main thread"
      },
      {
        "sha": "0e30e666a6b428e2826bd3a6a09405c67875fc44",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e87033447149e54d9b5ab2f90ad3a7ed094d784/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e87033447149e54d9b5ab2f90ad3a7ed094d784/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=7e87033447149e54d9b5ab2f90ad3a7ed094d784",
        "patch": "@@ -7,9 +7,7 @@\n \n #include <string>\n #include <stdint.h>\n-#include <boost/thread.hpp>\n-#include <boost/scoped_ptr.hpp>\n-#include <boost/function.hpp>\n+#include <functional>\n \n static const int DEFAULT_HTTP_THREADS=4;\n static const int DEFAULT_HTTP_WORKQUEUE=16;\n@@ -35,7 +33,7 @@ void InterruptHTTPServer();\n void StopHTTPServer();\n \n /** Handler for requests to a certain HTTP path */\n-typedef boost::function<void(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n+typedef std::function<void(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n /** Register handler for prefix.\n  * If multiple handlers match a prefix, the first-registered one will\n  * be invoked.\n@@ -132,7 +130,7 @@ class HTTPEvent\n      * deleteWhenTriggered deletes this event object after the event is triggered (and the handler called)\n      * handler is the handler to call when the event is triggered.\n      */\n-    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler);\n+    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void(void)>& handler);\n     ~HTTPEvent();\n \n     /** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after\n@@ -141,7 +139,7 @@ class HTTPEvent\n     void trigger(struct timeval* tv);\n \n     bool deleteWhenTriggered;\n-    boost::function<void(void)> handler;\n+    std::function<void(void)> handler;\n private:\n     struct event* ev;\n };"
      }
    ]
  },
  {
    "sha": "842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDJiZjhkMmM1YWY4NmJjOTRlNTg2ZDhhY2Q1ZTVhYjdjNTlkZGMw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T06:20:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T06:21:03Z"
      },
      "message": "Merge #8408: Prevent fingerprinting, disk-DoS with compact blocks\n\n1d06e49 Ignore CMPCTBLOCK messages for pruned blocks (Suhas Daftuar)\n1de2a46 Ignore GETBLOCKTXN requests for unknown blocks (Suhas Daftuar)",
      "tree": {
        "sha": "eeccedf861303b058b2f42836c3255d15e5adcad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eeccedf861303b058b2f42836c3255d15e5adcad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXmvXPAAoJEHSBCwEjRsmm+h4H/1dtHrPgqAqDNFoSPcluxmmG\nF1sdPn9gm9fUIuslqhYitcN7Ho2jvGikwmEVxfKFt60GYEWP4H+fuOpirfO2Np3u\nZPbtqNswPAzCOpRPwiuJhcY23UZ7QYDPyaz8ldZr0QfvU6dmbkpYe1o4UfKPKbix\nrhGBMkow/ggtH8iS9n6s6m63xlp48JL5kFPcKgAl6UoE9WH4vS4Or44NmpfNOtg1\nyvr5h3g/+DvI68+RTaGpsQV6pfpUoFgauEhGWMMAPAI/mt6czbamRQQ2XcqtgW2O\n2Wa16ebzatZPP+eHeJ4I/MWtdVVHJaNDn0toDKFatAwDQ5TZIg6+/ykuLJzJosA=\n=kU12\n-----END PGP SIGNATURE-----",
        "payload": "tree eeccedf861303b058b2f42836c3255d15e5adcad\nparent ad087638ee4864d6244ec9381ff764bfa6ee5086\nparent 1d06e49834814eed45e07393dcffd7b6683311b2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469773257 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469773263 +0200\n\nMerge #8408: Prevent fingerprinting, disk-DoS with compact blocks\n\n1d06e49 Ignore CMPCTBLOCK messages for pruned blocks (Suhas Daftuar)\n1de2a46 Ignore GETBLOCKTXN requests for unknown blocks (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad087638ee4864d6244ec9381ff764bfa6ee5086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad087638ee4864d6244ec9381ff764bfa6ee5086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad087638ee4864d6244ec9381ff764bfa6ee5086"
      },
      {
        "sha": "1d06e49834814eed45e07393dcffd7b6683311b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d06e49834814eed45e07393dcffd7b6683311b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d06e49834814eed45e07393dcffd7b6683311b2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f4e48b70651be0a5bbf5c8c89f9c2f93eb78dd0c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0",
        "patch": "@@ -5343,7 +5343,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         BlockMap::iterator it = mapBlockIndex.find(req.blockhash);\n         if (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)) {\n-            Misbehaving(pfrom->GetId(), 100);\n             LogPrintf(\"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->id);\n             return true;\n         }\n@@ -5627,8 +5626,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 std::vector<CInv> vInv(1);\n                 vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n                 pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n-                return true;\n             }\n+            return true;\n         }\n \n         // If we're not close to tip yet, give up and let parallel block fetch work its magic"
      }
    ]
  },
  {
    "sha": "b77bb95b3cb414ffef91d4ac11c4b15720200712",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzdiYjk1YjNjYjQxNGZmZWY5MWQ0YWMxMWM0YjE1NzIwMjAwNzEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T09:28:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T09:29:00Z"
      },
      "message": "Merge #8421: httpserver: drop boost (#8023 dependency)\n\n7e87033 httpserver: replace boost threads with std (Cory Fields)\nd3773ca httpserver: explicitly detach worker threads (Cory Fields)\n755aa05 httpserver: use a future rather than relying on boost's try_join_for (Cory Fields)",
      "tree": {
        "sha": "143ae7154ffd16a8b61d80a73a8028b73eb378d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/143ae7154ffd16a8b61d80a73a8028b73eb378d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b77bb95b3cb414ffef91d4ac11c4b15720200712",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXmyHcAAoJEHSBCwEjRsmmG8YIAMLtXdwVui+UPj+kBMjLD/18\nTohVIRM9/H+2OKjWjy5utL3w4IkDTFcNg+NZCabqOzaPf7E8vNPYQP9wUFXe/KX5\naO3js3Tm7MmcOh/cLLcVPS7lAofxdWZlcGPGK+9kRsiMaYpmETQyzZCykHMiIkag\nYnflm6Fzg4Rv7cxZJj4MebEiwnje10Nik3PXssGr5nAkOzK6h5Mo0hXUPOy+xt/O\n+66wmcc//vcEBDNkl5Dc+3LsfyCEPQyfOPKSAYHTmbPFxsFLTMBHNAjh8WGtSoI3\nVQWlpz4gIQjtOfhItLKUUHwlQ2xol3ryxcaulF6UHOWVWfS5C6sOlUKlqZXqF2k=\n=yIQS\n-----END PGP SIGNATURE-----",
        "payload": "tree 143ae7154ffd16a8b61d80a73a8028b73eb378d8\nparent 842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0\nparent 7e87033447149e54d9b5ab2f90ad3a7ed094d784\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469784529 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469784540 +0200\n\nMerge #8421: httpserver: drop boost (#8023 dependency)\n\n7e87033 httpserver: replace boost threads with std (Cory Fields)\nd3773ca httpserver: explicitly detach worker threads (Cory Fields)\n755aa05 httpserver: use a future rather than relying on boost's try_join_for (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77bb95b3cb414ffef91d4ac11c4b15720200712",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b77bb95b3cb414ffef91d4ac11c4b15720200712",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77bb95b3cb414ffef91d4ac11c4b15720200712/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/842bf8d2c5af86bc94e586d8acd5e5ab7c59ddc0"
      },
      {
        "sha": "7e87033447149e54d9b5ab2f90ad3a7ed094d784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e87033447149e54d9b5ab2f90ad3a7ed094d784",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e87033447149e54d9b5ab2f90ad3a7ed094d784"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 33,
      "deletions": 35
    },
    "files": [
      {
        "sha": "be7a6a1ddee86c1025554991a077b6fc938b7151",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 29,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77bb95b3cb414ffef91d4ac11c4b15720200712/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77bb95b3cb414ffef91d4ac11c4b15720200712/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=b77bb95b3cb414ffef91d4ac11c4b15720200712",
        "patch": "@@ -19,6 +19,7 @@\n #include <sys/types.h>\n #include <sys/stat.h>\n #include <signal.h>\n+#include <future>\n \n #include <event2/event.h>\n #include <event2/http.h>\n@@ -34,9 +35,6 @@\n #endif\n #endif\n \n-#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n-#include <boost/foreach.hpp>\n-\n /** Maximum size of http request (request line + headers) */\n static const size_t MAX_HEADERS_SIZE = 8192;\n \n@@ -68,8 +66,8 @@ class WorkQueue\n {\n private:\n     /** Mutex protects entire object */\n-    CWaitableCriticalSection cs;\n-    CConditionVariable cond;\n+    std::mutex cs;\n+    std::condition_variable cond;\n     std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;\n     size_t maxDepth;\n@@ -82,12 +80,12 @@ class WorkQueue\n         WorkQueue &wq;\n         ThreadCounter(WorkQueue &w): wq(w)\n         {\n-            boost::lock_guard<boost::mutex> lock(wq.cs);\n+            std::lock_guard<std::mutex> lock(wq.cs);\n             wq.numThreads += 1;\n         }\n         ~ThreadCounter()\n         {\n-            boost::lock_guard<boost::mutex> lock(wq.cs);\n+            std::lock_guard<std::mutex> lock(wq.cs);\n             wq.numThreads -= 1;\n             wq.cond.notify_all();\n         }\n@@ -108,7 +106,7 @@ class WorkQueue\n     /** Enqueue a work item */\n     bool Enqueue(WorkItem* item)\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         if (queue.size() >= maxDepth) {\n             return false;\n         }\n@@ -123,7 +121,7 @@ class WorkQueue\n         while (running) {\n             std::unique_ptr<WorkItem> i;\n             {\n-                boost::unique_lock<boost::mutex> lock(cs);\n+                std::unique_lock<std::mutex> lock(cs);\n                 while (running && queue.empty())\n                     cond.wait(lock);\n                 if (!running)\n@@ -137,22 +135,22 @@ class WorkQueue\n     /** Interrupt and exit loops */\n     void Interrupt()\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         running = false;\n         cond.notify_all();\n     }\n     /** Wait for worker threads to exit */\n     void WaitExit()\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         while (numThreads > 0)\n             cond.wait(lock);\n     }\n \n     /** Return current depth of queue */\n     size_t Depth()\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         return queue.size();\n     }\n };\n@@ -189,7 +187,7 @@ static bool ClientAllowed(const CNetAddr& netaddr)\n {\n     if (!netaddr.IsValid())\n         return false;\n-    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+    for(const CSubNet& subnet : rpc_allow_subnets)\n         if (subnet.Match(netaddr))\n             return true;\n     return false;\n@@ -203,7 +201,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(\"::1\"));         // always allow IPv6 localhost\n     if (mapMultiArgs.count(\"-rpcallowip\")) {\n         const std::vector<std::string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n-        BOOST_FOREACH (std::string strAllow, vAllow) {\n+        for (std::string strAllow : vAllow) {\n             CSubNet subnet(strAllow);\n             if (!subnet.IsValid()) {\n                 uiInterface.ThreadSafeMessageBox(\n@@ -215,7 +213,7 @@ static bool InitHTTPAllowList()\n         }\n     }\n     std::string strAllowed;\n-    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+    for (const CSubNet& subnet : rpc_allow_subnets)\n         strAllowed += subnet.ToString() + \" \";\n     LogPrint(\"http\", \"Allowing HTTP connections from: %s\\n\", strAllowed);\n     return true;\n@@ -302,13 +300,14 @@ static void http_reject_request_cb(struct evhttp_request* req, void*)\n }\n \n /** Event dispatcher thread */\n-static void ThreadHTTP(struct event_base* base, struct evhttp* http)\n+static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n {\n     RenameThread(\"bitcoin-http\");\n     LogPrint(\"http\", \"Entering http event loop\\n\");\n     event_base_dispatch(base);\n     // Event loop will be interrupted by InterruptHTTPServer()\n     LogPrint(\"http\", \"Exited http event loop\\n\");\n+    return event_base_got_break(base) == 0;\n }\n \n /** Bind HTTP server to specified addresses */\n@@ -437,17 +436,22 @@ bool InitHTTPServer()\n     return true;\n }\n \n-boost::thread threadHTTP;\n+std::thread threadHTTP;\n+std::future<bool> threadResult;\n \n bool StartHTTPServer()\n {\n     LogPrint(\"http\", \"Starting HTTP server\\n\");\n     int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n-    threadHTTP = boost::thread(boost::bind(&ThreadHTTP, eventBase, eventHTTP));\n+    std::packaged_task<bool(event_base*, evhttp*)> task(ThreadHTTP);\n+    threadResult = task.get_future();\n+    threadHTTP = std::thread(std::move(task), eventBase, eventHTTP);\n \n-    for (int i = 0; i < rpcThreads; i++)\n-        boost::thread(boost::bind(&HTTPWorkQueueRun, workQueue));\n+    for (int i = 0; i < rpcThreads; i++) {\n+        std::thread rpc_worker(HTTPWorkQueueRun, workQueue);\n+        rpc_worker.detach();\n+    }\n     return true;\n }\n \n@@ -456,7 +460,7 @@ void InterruptHTTPServer()\n     LogPrint(\"http\", \"Interrupting HTTP server\\n\");\n     if (eventHTTP) {\n         // Unlisten sockets\n-        BOOST_FOREACH (evhttp_bound_socket *socket, boundSockets) {\n+        for (evhttp_bound_socket *socket : boundSockets) {\n             evhttp_del_accept_socket(eventHTTP, socket);\n         }\n         // Reject requests on current connections\n@@ -482,15 +486,11 @@ void StopHTTPServer()\n         // master that appears to be solved, so in the future that solution\n         // could be used again (if desirable).\n         // (see discussion in https://github.com/bitcoin/bitcoin/pull/6990)\n-#if BOOST_VERSION >= 105000\n-        if (!threadHTTP.try_join_for(boost::chrono::milliseconds(2000))) {\n-#else\n-        if (!threadHTTP.timed_join(boost::posix_time::milliseconds(2000))) {\n-#endif\n+        if (threadResult.valid() && threadResult.wait_for(std::chrono::milliseconds(2000)) == std::future_status::timeout) {\n             LogPrintf(\"HTTP event loop did not exit within allotted time, sending loopbreak\\n\");\n             event_base_loopbreak(eventBase);\n-            threadHTTP.join();\n         }\n+        threadHTTP.join();\n     }\n     if (eventHTTP) {\n         evhttp_free(eventHTTP);\n@@ -517,7 +517,7 @@ static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n         delete self;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler):\n+HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void(void)>& handler):\n     deleteWhenTriggered(deleteWhenTriggered), handler(handler)\n {\n     ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n@@ -599,7 +599,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n     HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-        boost::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n+        std::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n     ev->trigger(0);\n     replySent = true;\n     req = 0; // transferred back to main thread"
      },
      {
        "sha": "0e30e666a6b428e2826bd3a6a09405c67875fc44",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77bb95b3cb414ffef91d4ac11c4b15720200712/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77bb95b3cb414ffef91d4ac11c4b15720200712/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=b77bb95b3cb414ffef91d4ac11c4b15720200712",
        "patch": "@@ -7,9 +7,7 @@\n \n #include <string>\n #include <stdint.h>\n-#include <boost/thread.hpp>\n-#include <boost/scoped_ptr.hpp>\n-#include <boost/function.hpp>\n+#include <functional>\n \n static const int DEFAULT_HTTP_THREADS=4;\n static const int DEFAULT_HTTP_WORKQUEUE=16;\n@@ -35,7 +33,7 @@ void InterruptHTTPServer();\n void StopHTTPServer();\n \n /** Handler for requests to a certain HTTP path */\n-typedef boost::function<void(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n+typedef std::function<void(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n /** Register handler for prefix.\n  * If multiple handlers match a prefix, the first-registered one will\n  * be invoked.\n@@ -132,7 +130,7 @@ class HTTPEvent\n      * deleteWhenTriggered deletes this event object after the event is triggered (and the handler called)\n      * handler is the handler to call when the event is triggered.\n      */\n-    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler);\n+    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void(void)>& handler);\n     ~HTTPEvent();\n \n     /** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after\n@@ -141,7 +139,7 @@ class HTTPEvent\n     void trigger(struct timeval* tv);\n \n     bool deleteWhenTriggered;\n-    boost::function<void(void)> handler;\n+    std::function<void(void)> handler;\n private:\n     struct event* ev;\n };"
      }
    ]
  },
  {
    "sha": "7a2d4027271750139f4df51619aa2cfbe49f6665",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTJkNDAyNzI3MTc1MDEzOWY0ZGY1MTYxOWFhMmNmYmU0OWY2NjY1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T10:32:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T10:32:47Z"
      },
      "message": "Merge #8274: util: Update tinyformat\n\na5072a7 util: Remove zero-argument versions of LogPrint and error (Wladimir J. van der Laan)\n695041e util: Update tinyformat (Wladimir J. van der Laan)",
      "tree": {
        "sha": "e86c54914af0b6481311d5165449376541b47467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e86c54914af0b6481311d5165449376541b47467"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a2d4027271750139f4df51619aa2cfbe49f6665",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEbBAABCgAGBQJXmzDPAAoJEHSBCwEjRsmmK6AH+KJxC5ySxtWpiiaImHkKeDjI\nejmXyORJ7tSCNmHLcOQpplfxN67YNr6WflvWeavRj2ExY/KT9I+gpgllKqsDTh4G\nicgHnnrE5X2gdYVZ1qksFOquyNNYMGJBvNQtBwIIY3xy8rE6WuIvJFRWw8Rojw35\nuzPAbx3577VU1e+HDRhJWEytDk1FYQ+mft6K0I7OcaQtyhxRtlDXY2+AgpibRnUm\nF3XVAZTbe4oodLMKrCFa/7k/YjTrnDSncVILIesGJj0MjxEKGiEc7p5O7P7lQTy/\nsqehXWnkYBbaAYpMlo/OZImnadZvebSGD3uvRuwVk3cjWLPo+/u9k32Yc8cz4Q==\n=yp0A\n-----END PGP SIGNATURE-----",
        "payload": "tree e86c54914af0b6481311d5165449376541b47467\nparent b77bb95b3cb414ffef91d4ac11c4b15720200712\nparent a5072a773071b8f4b644f84a77643e2ad18dba3a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469788358 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469788367 +0200\n\nMerge #8274: util: Update tinyformat\n\na5072a7 util: Remove zero-argument versions of LogPrint and error (Wladimir J. van der Laan)\n695041e util: Update tinyformat (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a2d4027271750139f4df51619aa2cfbe49f6665",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a2d4027271750139f4df51619aa2cfbe49f6665",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a2d4027271750139f4df51619aa2cfbe49f6665/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b77bb95b3cb414ffef91d4ac11c4b15720200712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77bb95b3cb414ffef91d4ac11c4b15720200712",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b77bb95b3cb414ffef91d4ac11c4b15720200712"
      },
      {
        "sha": "a5072a773071b8f4b644f84a77643e2ad18dba3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5072a773071b8f4b644f84a77643e2ad18dba3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5072a773071b8f4b644f84a77643e2ad18dba3a"
      }
    ],
    "stats": {
      "total": 730,
      "additions": 375,
      "deletions": 355
    },
    "files": [
      {
        "sha": "622ec51422ae62bce428af3b5b0237541e5d3c68",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2d4027271750139f4df51619aa2cfbe49f6665/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2d4027271750139f4df51619aa2cfbe49f6665/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7a2d4027271750139f4df51619aa2cfbe49f6665",
        "patch": "@@ -4100,7 +4100,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     int nGoodTransactions = 0;\n     CValidationState state;\n     int reportDone = 0;\n-    LogPrintf(\"[0%]...\");\n+    LogPrintf(\"[0%%]...\");\n     for (CBlockIndex* pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev)\n     {\n         boost::this_thread::interruption_point();"
      },
      {
        "sha": "17f0360c42f24f5dfcfd7c5d69a53b4bddb10454",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 368,
        "deletions": 332,
        "changes": 700,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2d4027271750139f4df51619aa2cfbe49f6665/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2d4027271750139f4df51619aa2cfbe49f6665/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=7a2d4027271750139f4df51619aa2cfbe49f6665",
        "patch": "@@ -67,7 +67,9 @@\n //                                  weekday, month, day, hour, min);\n //   std::cout << date;\n //\n-// These are the three primary interface functions.\n+// These are the three primary interface functions.  There is also a\n+// convenience function printfln() which appends a newline to the usual result\n+// of printf() for super simple logging.\n //\n //\n // User defined format functions\n@@ -86,6 +88,18 @@\n // defined function bodies, use the macro TINYFORMAT_FOREACH_ARGNUM.  For an\n // example, see the implementation of printf() at the end of the source file.\n //\n+// Sometimes it's useful to be able to pass a list of format arguments through\n+// to a non-template function.  The FormatList class is provided as a way to do\n+// this by storing the argument list in a type-opaque way.  Continuing the\n+// example from above, we construct a FormatList using makeFormatList():\n+//\n+//   FormatListRef formatList = tfm::makeFormatList(weekday, month, day, hour, min);\n+//\n+// The format list can now be passed into any non-template function and used\n+// via a call to the vformat() function:\n+//\n+//   tfm::vformat(std::cout, \"%s, %s %d, %.2d:%.2d\\n\", formatList);\n+//\n //\n // Additional API information\n // --------------------------\n@@ -118,6 +132,7 @@ namespace tfm = tinyformat;\n \n //------------------------------------------------------------------------------\n // Implementation details.\n+#include <algorithm>\n #include <cassert>\n #include <iostream>\n #include <sstream>\n@@ -133,20 +148,20 @@ namespace tfm = tinyformat;\n #   endif\n #endif\n \n-#ifdef __GNUC__\n-#   define TINYFORMAT_NOINLINE __attribute__((noinline))\n-#elif defined(_MSC_VER)\n-#   define TINYFORMAT_NOINLINE __declspec(noinline)\n-#else\n-#   define TINYFORMAT_NOINLINE\n-#endif\n-\n #if defined(__GLIBCXX__) && __GLIBCXX__ < 20080201\n //  std::showpos is broken on old libstdc++ as provided with OSX.  See\n //  http://gcc.gnu.org/ml/libstdc++/2007-11/msg00075.html\n #   define TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n #endif\n \n+#ifdef __APPLE__\n+// Workaround OSX linker warning: xcode uses different default symbol\n+// visibilities for static libs vs executables (see issue #25)\n+#   define TINYFORMAT_HIDDEN __attribute__((visibility(\"hidden\")))\n+#else\n+#   define TINYFORMAT_HIDDEN\n+#endif\n+\n namespace tinyformat {\n \n //------------------------------------------------------------------------------\n@@ -247,6 +262,29 @@ struct convertToInt<T,true>\n     static int invoke(const T& value) { return static_cast<int>(value); }\n };\n \n+// Format at most ntrunc characters to the given stream.\n+template<typename T>\n+inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)\n+{\n+    std::ostringstream tmp;\n+    tmp << value;\n+    std::string result = tmp.str();\n+    out.write(result.c_str(), (std::min)(ntrunc, static_cast<int>(result.size())));\n+}\n+#define TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(type)       \\\n+inline void formatTruncated(std::ostream& out, type* value, int ntrunc) \\\n+{                                                           \\\n+    std::streamsize len = 0;                                \\\n+    while(len < ntrunc && value[len] != 0)                  \\\n+        ++len;                                              \\\n+    out.write(value, len);                                  \\\n+}\n+// Overload for const char* and char*.  Could overload for signed & unsigned\n+// char too, but these are technically unneeded for printf compatibility.\n+TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(const char)\n+TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(char)\n+#undef TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR\n+\n } // namespace detail\n \n \n@@ -255,18 +293,20 @@ struct convertToInt<T,true>\n // desired.\n \n \n-// Format a value into a stream. Called from format() for all types by default.\n-//\n-// Users may override this for their own types.  When this function is called,\n-// the stream flags will have been modified according to the format string.\n-// The format specification is provided in the range [fmtBegin, fmtEnd).\n-//\n-// By default, formatValue() uses the usual stream insertion operator\n-// operator<< to format the type T, with special cases for the %c and %p\n-// conversions.\n+/// Format a value into a stream, delegating to operator<< by default.\n+///\n+/// Users may override this for their own types.  When this function is called,\n+/// the stream flags will have been modified according to the format string.\n+/// The format specification is provided in the range [fmtBegin, fmtEnd).  For\n+/// truncating conversions, ntrunc is set to the desired maximum number of\n+/// characters, for example \"%.7s\" calls formatValue with ntrunc = 7.\n+///\n+/// By default, formatValue() uses the usual stream insertion operator\n+/// operator<< to format the type T, with special cases for the %c and %p\n+/// conversions.\n template<typename T>\n inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n-                        const char* fmtEnd, const T& value)\n+                        const char* fmtEnd, int ntrunc, const T& value)\n {\n #ifndef TINYFORMAT_ALLOW_WCHAR_STRINGS\n     // Since we don't support printing of wchar_t using \"%ls\", make it fail at\n@@ -288,6 +328,12 @@ inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n #ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n     else if(detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;\n #endif\n+    else if(ntrunc >= 0)\n+    {\n+        // Take care not to overread C strings in truncating conversions like\n+        // \"%.4s\" where at most 4 characters may be read.\n+        detail::formatTruncated(out, value, ntrunc);\n+    }\n     else\n         out << value;\n }\n@@ -296,7 +342,7 @@ inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n // Overloaded version for char types to support printing as an integer\n #define TINYFORMAT_DEFINE_FORMATVALUE_CHAR(charType)                  \\\n inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,  \\\n-                        const char* fmtEnd, charType value)           \\\n+                        const char* fmtEnd, int /**/, charType value) \\\n {                                                                     \\\n     switch(*(fmtEnd-1))                                               \\\n     {                                                                 \\\n@@ -435,225 +481,91 @@ cog.outl('#define TINYFORMAT_FOREACH_ARGNUM(m) \\\\\\n    ' +\n \n namespace detail {\n \n-// Class holding current position in format string and an output stream into\n-// which arguments are formatted.\n-class FormatIterator\n+// Type-opaque holder for an argument to format(), with associated actions on\n+// the type held as explicit function pointers.  This allows FormatArg's for\n+// each argument to be allocated as a homogenous array inside FormatList\n+// whereas a naive implementation based on inheritance does not.\n+class FormatArg\n {\n     public:\n-        // Flags for features not representable with standard stream state\n-        enum ExtraFormatFlags\n-        {\n-            Flag_None                = 0,\n-            Flag_TruncateToPrecision = 1<<0, // truncate length to stream precision()\n-            Flag_SpacePadPositive    = 1<<1, // pad positive values with spaces\n-            Flag_VariableWidth       = 1<<2, // variable field width in arg list\n-            Flag_VariablePrecision   = 1<<3  // variable field precision in arg list\n-        };\n-\n-        // out is the output stream, fmt is the full format string\n-        FormatIterator(std::ostream& out, const char* fmt)\n-            : m_out(out),\n-            m_fmt(fmt),\n-            m_extraFlags(Flag_None),\n-            m_wantWidth(false),\n-            m_wantPrecision(false),\n-            m_variableWidth(0),\n-            m_variablePrecision(0),\n-            m_origWidth(out.width()),\n-            m_origPrecision(out.precision()),\n-            m_origFlags(out.flags()),\n-            m_origFill(out.fill())\n+        FormatArg() {}\n+\n+        template<typename T>\n+        FormatArg(const T& value)\n+            : m_value(static_cast<const void*>(&value)),\n+            m_formatImpl(&formatImpl<T>),\n+            m_toIntImpl(&toIntImpl<T>)\n         { }\n \n-        // Print remaining part of format string.\n-        void finish()\n+        void format(std::ostream& out, const char* fmtBegin,\n+                    const char* fmtEnd, int ntrunc) const\n         {\n-            // It would be nice if we could do this from the destructor, but we\n-            // can't if TINFORMAT_ERROR is used to throw an exception!\n-            m_fmt = printFormatStringLiteral(m_out, m_fmt);\n-            if(*m_fmt != '\\0')\n-                TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n+            m_formatImpl(out, fmtBegin, fmtEnd, ntrunc, m_value);\n         }\n \n-        ~FormatIterator()\n+        int toInt() const\n         {\n-            // Restore stream state\n-            m_out.width(m_origWidth);\n-            m_out.precision(m_origPrecision);\n-            m_out.flags(m_origFlags);\n-            m_out.fill(m_origFill);\n+            return m_toIntImpl(m_value);\n         }\n \n-        template<typename T>\n-        void accept(const T& value);\n-\n     private:\n-        // Parse and return an integer from the string c, as atoi()\n-        // On return, c is set to one past the end of the integer.\n-        static int parseIntAndAdvance(const char*& c)\n+        template<typename T>\n+        TINYFORMAT_HIDDEN static void formatImpl(std::ostream& out, const char* fmtBegin,\n+                        const char* fmtEnd, int ntrunc, const void* value)\n         {\n-            int i = 0;\n-            for(;*c >= '0' && *c <= '9'; ++c)\n-                i = 10*i + (*c - '0');\n-            return i;\n+            formatValue(out, fmtBegin, fmtEnd, ntrunc, *static_cast<const T*>(value));\n         }\n \n-        // Format at most truncLen characters of a C string to the given\n-        // stream.  Return true if formatting proceeded (generic version always\n-        // returns false)\n         template<typename T>\n-        static bool formatCStringTruncate(std::ostream& /*out*/, const T& /*value*/,\n-                                        std::streamsize /*truncLen*/)\n+        TINYFORMAT_HIDDEN static int toIntImpl(const void* value)\n         {\n-            return false;\n-        }\n-#       define TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE(type)            \\\n-        static bool formatCStringTruncate(std::ostream& out, type* value,  \\\n-                                        std::streamsize truncLen)          \\\n-        {                                                                  \\\n-            std::streamsize len = 0;                                       \\\n-            while(len < truncLen && value[len] != 0)                       \\\n-                ++len;                                                     \\\n-            out.write(value, len);                                         \\\n-            return true;                                                   \\\n-        }\n-        // Overload for const char* and char*.  Could overload for signed &\n-        // unsigned char too, but these are technically unneeded for printf\n-        // compatibility.\n-        TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE(const char)\n-        TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE(char)\n-#       undef TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE\n-\n-        // Print literal part of format string and return next format spec\n-        // position.\n-        //\n-        // Skips over any occurrences of '%%', printing a literal '%' to the\n-        // output.  The position of the first % character of the next\n-        // nontrivial format spec is returned, or the end of string.\n-        static const char* printFormatStringLiteral(std::ostream& out,\n-                                                    const char* fmt)\n-        {\n-            const char* c = fmt;\n-            for(; true; ++c)\n-            {\n-                switch(*c)\n-                {\n-                    case '\\0':\n-                        out.write(fmt, static_cast<std::streamsize>(c - fmt));\n-                        return c;\n-                    case '%':\n-                        out.write(fmt, static_cast<std::streamsize>(c - fmt));\n-                        if(*(c+1) != '%')\n-                            return c;\n-                        // for \"%%\", tack trailing % onto next literal section.\n-                        fmt = ++c;\n-                        break;\n-                }\n-            }\n+            return convertToInt<T>::invoke(*static_cast<const T*>(value));\n         }\n \n-        static const char* streamStateFromFormat(std::ostream& out,\n-                                                 unsigned int& extraFlags,\n-                                                 const char* fmtStart,\n-                                                 int variableWidth,\n-                                                 int variablePrecision);\n-\n-        // Private copy & assign: Kill gcc warnings with -Weffc++\n-        FormatIterator(const FormatIterator&);\n-        FormatIterator& operator=(const FormatIterator&);\n-\n-        // Stream, current format string & state\n-        std::ostream& m_out;\n-        const char* m_fmt;\n-        unsigned int m_extraFlags;\n-        // State machine info for handling of variable width & precision\n-        bool m_wantWidth;\n-        bool m_wantPrecision;\n-        int m_variableWidth;\n-        int m_variablePrecision;\n-        // Saved stream state\n-        std::streamsize m_origWidth;\n-        std::streamsize m_origPrecision;\n-        std::ios::fmtflags m_origFlags;\n-        char m_origFill;\n+        const void* m_value;\n+        void (*m_formatImpl)(std::ostream& out, const char* fmtBegin,\n+                             const char* fmtEnd, int ntrunc, const void* value);\n+        int (*m_toIntImpl)(const void* value);\n };\n \n \n-// Accept a value for formatting into the internal stream.\n-template<typename T>\n-TINYFORMAT_NOINLINE  // < greatly reduces bloat in optimized builds\n-void FormatIterator::accept(const T& value)\n+// Parse and return an integer from the string c, as atoi()\n+// On return, c is set to one past the end of the integer.\n+inline int parseIntAndAdvance(const char*& c)\n {\n-    // Parse the format string\n-    const char* fmtEnd = 0;\n-    if(m_extraFlags == Flag_None && !m_wantWidth && !m_wantPrecision)\n-    {\n-        m_fmt = printFormatStringLiteral(m_out, m_fmt);\n-        fmtEnd = streamStateFromFormat(m_out, m_extraFlags, m_fmt, 0, 0);\n-        m_wantWidth     = (m_extraFlags & Flag_VariableWidth) != 0;\n-        m_wantPrecision = (m_extraFlags & Flag_VariablePrecision) != 0;\n-    }\n-    // Consume value as variable width and precision specifier if necessary\n-    if(m_extraFlags & (Flag_VariableWidth | Flag_VariablePrecision))\n-    {\n-        if(m_wantWidth || m_wantPrecision)\n-        {\n-            int v = convertToInt<T>::invoke(value);\n-            if(m_wantWidth)\n-            {\n-                m_variableWidth = v;\n-                m_wantWidth = false;\n-            }\n-            else if(m_wantPrecision)\n-            {\n-                m_variablePrecision = v;\n-                m_wantPrecision = false;\n-            }\n-            return;\n-        }\n-        // If we get here, we've set both the variable precision and width as\n-        // required and we need to rerun the stream state setup to insert these.\n-        fmtEnd = streamStateFromFormat(m_out, m_extraFlags, m_fmt,\n-                                       m_variableWidth, m_variablePrecision);\n-    }\n+    int i = 0;\n+    for(;*c >= '0' && *c <= '9'; ++c)\n+        i = 10*i + (*c - '0');\n+    return i;\n+}\n \n-    // Format the value into the stream.\n-    if(!(m_extraFlags & (Flag_SpacePadPositive | Flag_TruncateToPrecision)))\n-        formatValue(m_out, m_fmt, fmtEnd, value);\n-    else\n+// Print literal part of format string and return next format spec\n+// position.\n+//\n+// Skips over any occurrences of '%%', printing a literal '%' to the\n+// output.  The position of the first % character of the next\n+// nontrivial format spec is returned, or the end of string.\n+inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)\n+{\n+    const char* c = fmt;\n+    for(;; ++c)\n     {\n-        // The following are special cases where there's no direct\n-        // correspondence between stream formatting and the printf() behaviour.\n-        // Instead, we simulate the behaviour crudely by formatting into a\n-        // temporary string stream and munging the resulting string.\n-        std::ostringstream tmpStream;\n-        tmpStream.copyfmt(m_out);\n-        if(m_extraFlags & Flag_SpacePadPositive)\n-            tmpStream.setf(std::ios::showpos);\n-        // formatCStringTruncate is required for truncating conversions like\n-        // \"%.4s\" where at most 4 characters of the c-string should be read.\n-        // If we didn't include this special case, we might read off the end.\n-        if(!( (m_extraFlags & Flag_TruncateToPrecision) &&\n-             formatCStringTruncate(tmpStream, value, m_out.precision()) ))\n-        {\n-            // Not a truncated c-string; just format normally.\n-            formatValue(tmpStream, m_fmt, fmtEnd, value);\n-        }\n-        std::string result = tmpStream.str(); // allocates... yuck.\n-        if(m_extraFlags & Flag_SpacePadPositive)\n+        switch(*c)\n         {\n-            for(size_t i = 0, iend = result.size(); i < iend; ++i)\n-                if(result[i] == '+')\n-                    result[i] = ' ';\n+            case '\\0':\n+                out.write(fmt, c - fmt);\n+                return c;\n+            case '%':\n+                out.write(fmt, c - fmt);\n+                if(*(c+1) != '%')\n+                    return c;\n+                // for \"%%\", tack trailing % onto next literal section.\n+                fmt = ++c;\n+                break;\n+            default:\n+                break;\n         }\n-        if((m_extraFlags & Flag_TruncateToPrecision) &&\n-           (int)result.size() > (int)m_out.precision())\n-            m_out.write(result.c_str(), m_out.precision());\n-        else\n-            m_out << result;\n     }\n-    m_extraFlags = Flag_None;\n-    m_fmt = fmtEnd;\n }\n \n \n@@ -663,13 +575,14 @@ void FormatIterator::accept(const T& value)\n // with the form \"%[flags][width][.precision][length]type\".\n //\n // Formatting options which can't be natively represented using the ostream\n-// state are returned in the extraFlags parameter which is a bitwise\n-// combination of values from the ExtraFormatFlags enum.\n-inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n-                                                         unsigned int& extraFlags,\n-                                                         const char* fmtStart,\n-                                                         int variableWidth,\n-                                                         int variablePrecision)\n+// state are returned in spacePadPositive (for space padded positive numbers)\n+// and ntrunc (for truncating conversions).  argIndex is incremented if\n+// necessary to pull out variable width and precision .  The function returns a\n+// pointer to the character after the end of the current format spec.\n+inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,\n+                                         int& ntrunc, const char* fmtStart,\n+                                         const detail::FormatArg* formatters,\n+                                         int& argIndex, int numFormatters)\n {\n     if(*fmtStart != '%')\n     {\n@@ -684,9 +597,9 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n     out.unsetf(std::ios::adjustfield | std::ios::basefield |\n                std::ios::floatfield | std::ios::showbase | std::ios::boolalpha |\n                std::ios::showpoint | std::ios::showpos | std::ios::uppercase);\n-    extraFlags = Flag_None;\n     bool precisionSet = false;\n     bool widthSet = false;\n+    int widthExtra = 0;\n     const char* c = fmtStart + 1;\n     // 1) Parse flags\n     for(;; ++c)\n@@ -713,12 +626,15 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n             case ' ':\n                 // overridden by show positive sign, '+' flag.\n                 if(!(out.flags() & std::ios::showpos))\n-                    extraFlags |= Flag_SpacePadPositive;\n+                    spacePadPositive = true;\n                 continue;\n             case '+':\n                 out.setf(std::ios::showpos);\n-                extraFlags &= ~Flag_SpacePadPositive;\n+                spacePadPositive = false;\n+                widthExtra = 1;\n                 continue;\n+            default:\n+                break;\n         }\n         break;\n     }\n@@ -731,15 +647,19 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n     if(*c == '*')\n     {\n         widthSet = true;\n-        if(variableWidth < 0)\n+        int width = 0;\n+        if(argIndex < numFormatters)\n+            width = formatters[argIndex++].toInt();\n+        else\n+            TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable width\");\n+        if(width < 0)\n         {\n             // negative widths correspond to '-' flag set\n             out.fill(' ');\n             out.setf(std::ios::left, std::ios::adjustfield);\n-            variableWidth = -variableWidth;\n+            width = -width;\n         }\n-        out.width(variableWidth);\n-        extraFlags |= Flag_VariableWidth;\n+        out.width(width);\n         ++c;\n     }\n     // 3) Parse precision\n@@ -750,8 +670,10 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n         if(*c == '*')\n         {\n             ++c;\n-            extraFlags |= Flag_VariablePrecision;\n-            precision = variablePrecision;\n+            if(argIndex < numFormatters)\n+                precision = formatters[argIndex++].toInt();\n+            else\n+                TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable precision\");\n         }\n         else\n         {\n@@ -814,7 +736,7 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n             break;\n         case 's':\n             if(precisionSet)\n-                extraFlags |= Flag_TruncateToPrecision;\n+                ntrunc = static_cast<int>(out.precision());\n             // Make %s print booleans as \"true\" and \"false\"\n             out.setf(std::ios::boolalpha);\n             break;\n@@ -826,185 +748,299 @@ inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,\n             TINYFORMAT_ERROR(\"tinyformat: Conversion spec incorrectly \"\n                              \"terminated by end of string\");\n             return c;\n+        default:\n+            break;\n     }\n     if(intConversion && precisionSet && !widthSet)\n     {\n         // \"precision\" for integers gives the minimum number of digits (to be\n         // padded with zeros on the left).  This isn't really supported by the\n         // iostreams, but we can approximately simulate it with the width if\n         // the width isn't otherwise used.\n-        out.width(out.precision());\n+        out.width(out.precision() + widthExtra);\n         out.setf(std::ios::internal, std::ios::adjustfield);\n         out.fill('0');\n     }\n     return c+1;\n }\n \n \n-\n //------------------------------------------------------------------------------\n-// Private format function on top of which the public interface is implemented.\n-// We enforce a mimimum of one value to be formatted to prevent bugs looking like\n-//\n-//   const char* myStr = \"100% broken\";\n-//   printf(myStr);   // Parses % as a format specifier\n-#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n-\n-template<typename T1>\n-void format(FormatIterator& fmtIter, const T1& value1)\n+inline void formatImpl(std::ostream& out, const char* fmt,\n+                       const detail::FormatArg* formatters,\n+                       int numFormatters)\n {\n-    fmtIter.accept(value1);\n-    fmtIter.finish();\n+    // Saved stream state\n+    std::streamsize origWidth = out.width();\n+    std::streamsize origPrecision = out.precision();\n+    std::ios::fmtflags origFlags = out.flags();\n+    char origFill = out.fill();\n+\n+    for (int argIndex = 0; argIndex < numFormatters; ++argIndex)\n+    {\n+        // Parse the format string\n+        fmt = printFormatStringLiteral(out, fmt);\n+        bool spacePadPositive = false;\n+        int ntrunc = -1;\n+        const char* fmtEnd = streamStateFromFormat(out, spacePadPositive, ntrunc, fmt,\n+                                                   formatters, argIndex, numFormatters);\n+        if (argIndex >= numFormatters)\n+        {\n+            // Check args remain after reading any variable width/precision\n+            TINYFORMAT_ERROR(\"tinyformat: Not enough format arguments\");\n+            return;\n+        }\n+        const FormatArg& arg = formatters[argIndex];\n+        // Format the arg into the stream.\n+        if(!spacePadPositive)\n+            arg.format(out, fmt, fmtEnd, ntrunc);\n+        else\n+        {\n+            // The following is a special case with no direct correspondence\n+            // between stream formatting and the printf() behaviour.  Simulate\n+            // it crudely by formatting into a temporary string stream and\n+            // munging the resulting string.\n+            std::ostringstream tmpStream;\n+            tmpStream.copyfmt(out);\n+            tmpStream.setf(std::ios::showpos);\n+            arg.format(tmpStream, fmt, fmtEnd, ntrunc);\n+            std::string result = tmpStream.str(); // allocates... yuck.\n+            for(size_t i = 0, iend = result.size(); i < iend; ++i)\n+                if(result[i] == '+') result[i] = ' ';\n+            out << result;\n+        }\n+        fmt = fmtEnd;\n+    }\n+\n+    // Print remaining part of format string.\n+    fmt = printFormatStringLiteral(out, fmt);\n+    if(*fmt != '\\0')\n+        TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n+\n+    // Restore stream state\n+    out.width(origWidth);\n+    out.precision(origPrecision);\n+    out.flags(origFlags);\n+    out.fill(origFill);\n }\n \n-// General version for C++11\n-template<typename T1, typename... Args>\n-void format(FormatIterator& fmtIter, const T1& value1, const Args&... args)\n+} // namespace detail\n+\n+\n+/// List of template arguments format(), held in a type-opaque way.\n+///\n+/// A const reference to FormatList (typedef'd as FormatListRef) may be\n+/// conveniently used to pass arguments to non-template functions: All type\n+/// information has been stripped from the arguments, leaving just enough of a\n+/// common interface to perform formatting as required.\n+class FormatList\n {\n-    fmtIter.accept(value1);\n-    format(fmtIter, args...);\n-}\n+    public:\n+        FormatList(detail::FormatArg* formatters, int N)\n+            : m_formatters(formatters), m_N(N) { }\n \n-#else\n+        friend void vformat(std::ostream& out, const char* fmt,\n+                            const FormatList& list);\n \n-inline void format(FormatIterator& fmtIter)\n+    private:\n+        const detail::FormatArg* m_formatters;\n+        int m_N;\n+};\n+\n+/// Reference to type-opaque format list for passing to vformat()\n+typedef const FormatList& FormatListRef;\n+\n+\n+namespace detail {\n+\n+// Format list subclass with fixed storage to avoid dynamic allocation\n+template<int N>\n+class FormatListN : public FormatList\n {\n-    fmtIter.finish();\n-}\n+    public:\n+#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n+        template<typename... Args>\n+        FormatListN(const Args&... args)\n+            : FormatList(&m_formatterStore[0], N),\n+            m_formatterStore { FormatArg(args)... }\n+        { static_assert(sizeof...(args) == N, \"Number of args must be N\"); }\n+#else // C++98 version\n+        void init(int) {}\n+#       define TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR(n)       \\\n+                                                               \\\n+        template<TINYFORMAT_ARGTYPES(n)>                       \\\n+        FormatListN(TINYFORMAT_VARARGS(n))                     \\\n+            : FormatList(&m_formatterStore[0], n)              \\\n+        { assert(n == N); init(0, TINYFORMAT_PASSARGS(n)); }   \\\n+                                                               \\\n+        template<TINYFORMAT_ARGTYPES(n)>                       \\\n+        void init(int i, TINYFORMAT_VARARGS(n))                \\\n+        {                                                      \\\n+            m_formatterStore[i] = FormatArg(v1);               \\\n+            init(i+1 TINYFORMAT_PASSARGS_TAIL(n));             \\\n+        }\n \n-// General version for C++98\n-#define TINYFORMAT_MAKE_FORMAT_DETAIL(n)                                  \\\n-template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-void format(detail::FormatIterator& fmtIter, TINYFORMAT_VARARGS(n))       \\\n-{                                                                         \\\n-    fmtIter.accept(v1);                                                   \\\n-    format(fmtIter TINYFORMAT_PASSARGS_TAIL(n));                          \\\n-}\n+        TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR)\n+#       undef TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR\n+#endif\n \n-TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMAT_DETAIL)\n-#undef TINYFORMAT_MAKE_FORMAT_DETAIL\n+    private:\n+        FormatArg m_formatterStore[N];\n+};\n \n-#endif // End C++98 variadic template emulation for format()\n+// Special 0-arg version - MSVC says zero-sized C array in struct is nonstandard\n+template<> class FormatListN<0> : public FormatList\n+{\n+    public: FormatListN() : FormatList(0, 0) {}\n+};\n \n } // namespace detail\n \n \n //------------------------------------------------------------------------------\n-// Implement all the main interface functions here in terms of detail::format()\n+// Primary API functions\n \n #ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n \n-// C++11 - the simple case\n-template<typename T1, typename... Args>\n-void format(std::ostream& out, const char* fmt, const T1& v1, const Args&... args)\n+/// Make type-agnostic format list from list of template arguments.\n+///\n+/// The exact return type of this function is an implementation detail and\n+/// shouldn't be relied upon.  Instead it should be stored as a FormatListRef:\n+///\n+///   FormatListRef formatList = makeFormatList( /*...*/ );\n+template<typename... Args>\n+detail::FormatListN<sizeof...(Args)> makeFormatList(const Args&... args)\n {\n-    detail::FormatIterator fmtIter(out, fmt);\n-    format(fmtIter, v1, args...);\n+    return detail::FormatListN<sizeof...(args)>(args...);\n }\n \n-template<typename T1, typename... Args>\n-std::string format(const char* fmt, const T1& v1, const Args&... args)\n+#else // C++98 version\n+\n+inline detail::FormatListN<0> makeFormatList()\n+{\n+    return detail::FormatListN<0>();\n+}\n+#define TINYFORMAT_MAKE_MAKEFORMATLIST(n)                     \\\n+template<TINYFORMAT_ARGTYPES(n)>                              \\\n+detail::FormatListN<n> makeFormatList(TINYFORMAT_VARARGS(n))  \\\n+{                                                             \\\n+    return detail::FormatListN<n>(TINYFORMAT_PASSARGS(n));    \\\n+}\n+TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_MAKEFORMATLIST)\n+#undef TINYFORMAT_MAKE_MAKEFORMATLIST\n+\n+#endif\n+\n+/// Format list of arguments to the stream according to the given format string.\n+///\n+/// The name vformat() is chosen for the semantic similarity to vprintf(): the\n+/// list of format arguments is held in a single function argument.\n+inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)\n+{\n+    detail::formatImpl(out, fmt, list.m_formatters, list.m_N);\n+}\n+\n+\n+#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n+\n+/// Format list of arguments to the stream according to given format string.\n+template<typename... Args>\n+void format(std::ostream& out, const char* fmt, const Args&... args)\n+{\n+    vformat(out, fmt, makeFormatList(args...));\n+}\n+\n+/// Format list of arguments according to the given format string and return\n+/// the result as a string.\n+template<typename... Args>\n+std::string format(const char* fmt, const Args&... args)\n {\n     std::ostringstream oss;\n-    format(oss, fmt, v1, args...);\n+    format(oss, fmt, args...);\n     return oss.str();\n }\n \n-template<typename T1, typename... Args>\n-std::string format(const std::string &fmt, const T1& v1, const Args&... args)\n+/// Format list of arguments to std::cout, according to the given format string\n+template<typename... Args>\n+void printf(const char* fmt, const Args&... args)\n+{\n+    format(std::cout, fmt, args...);\n+}\n+\n+template<typename... Args>\n+void printfln(const char* fmt, const Args&... args)\n+{\n+    format(std::cout, fmt, args...);\n+    std::cout << '\\n';\n+}\n+\n+#else // C++98 version\n+\n+inline void format(std::ostream& out, const char* fmt)\n+{\n+    vformat(out, fmt, makeFormatList());\n+}\n+\n+inline std::string format(const char* fmt)\n {\n     std::ostringstream oss;\n-    format(oss, fmt.c_str(), v1, args...);\n+    format(oss, fmt);\n     return oss.str();\n }\n \n-template<typename T1, typename... Args>\n-void printf(const char* fmt, const T1& v1, const Args&... args)\n+inline void printf(const char* fmt)\n {\n-    format(std::cout, fmt, v1, args...);\n+    format(std::cout, fmt);\n }\n \n-#else\n+inline void printfln(const char* fmt)\n+{\n+    format(std::cout, fmt);\n+    std::cout << '\\n';\n+}\n \n-// C++98 - define the interface functions using the wrapping macros\n #define TINYFORMAT_MAKE_FORMAT_FUNCS(n)                                   \\\n                                                                           \\\n template<TINYFORMAT_ARGTYPES(n)>                                          \\\n void format(std::ostream& out, const char* fmt, TINYFORMAT_VARARGS(n))    \\\n {                                                                         \\\n-    tinyformat::detail::FormatIterator fmtIter(out, fmt);                 \\\n-    tinyformat::detail::format(fmtIter, TINYFORMAT_PASSARGS(n));          \\\n+    vformat(out, fmt, makeFormatList(TINYFORMAT_PASSARGS(n)));            \\\n }                                                                         \\\n                                                                           \\\n template<TINYFORMAT_ARGTYPES(n)>                                          \\\n std::string format(const char* fmt, TINYFORMAT_VARARGS(n))                \\\n {                                                                         \\\n     std::ostringstream oss;                                               \\\n-    tinyformat::format(oss, fmt, TINYFORMAT_PASSARGS(n));                 \\\n+    format(oss, fmt, TINYFORMAT_PASSARGS(n));                             \\\n     return oss.str();                                                     \\\n }                                                                         \\\n                                                                           \\\n template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-std::string format(const std::string &fmt, TINYFORMAT_VARARGS(n))         \\\n+void printf(const char* fmt, TINYFORMAT_VARARGS(n))                       \\\n {                                                                         \\\n-    std::ostringstream oss;                                               \\\n-    tinyformat::format(oss, fmt.c_str(), TINYFORMAT_PASSARGS(n));         \\\n-    return oss.str();                                                     \\\n+    format(std::cout, fmt, TINYFORMAT_PASSARGS(n));                       \\\n }                                                                         \\\n                                                                           \\\n template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-void printf(const char* fmt, TINYFORMAT_VARARGS(n))                       \\\n+void printfln(const char* fmt, TINYFORMAT_VARARGS(n))                     \\\n {                                                                         \\\n-    tinyformat::format(std::cout, fmt, TINYFORMAT_PASSARGS(n));           \\\n+    format(std::cout, fmt, TINYFORMAT_PASSARGS(n));                       \\\n+    std::cout << '\\n';                                                    \\\n }\n \n TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMAT_FUNCS)\n #undef TINYFORMAT_MAKE_FORMAT_FUNCS\n-#endif\n-\n \n-//------------------------------------------------------------------------------\n-// Define deprecated wrapping macro for backward compatibility in tinyformat\n-// 1.x.  Will be removed in version 2!\n-#define TINYFORMAT_WRAP_FORMAT_EXTRA_ARGS\n-#define TINYFORMAT_WRAP_FORMAT_N(n, returnType, funcName, funcDeclSuffix,  \\\n-                                 bodyPrefix, streamName, bodySuffix)       \\\n-template<TINYFORMAT_ARGTYPES(n)>                                           \\\n-returnType funcName(TINYFORMAT_WRAP_FORMAT_EXTRA_ARGS const char* fmt,     \\\n-                    TINYFORMAT_VARARGS(n)) funcDeclSuffix                  \\\n-{                                                                          \\\n-    bodyPrefix                                                             \\\n-    tinyformat::format(streamName, fmt, TINYFORMAT_PASSARGS(n));           \\\n-    bodySuffix                                                             \\\n-}                                                                          \\\n-\n-#define TINYFORMAT_WRAP_FORMAT(returnType, funcName, funcDeclSuffix,       \\\n-                               bodyPrefix, streamName, bodySuffix)         \\\n-inline                                                                     \\\n-returnType funcName(TINYFORMAT_WRAP_FORMAT_EXTRA_ARGS const char* fmt      \\\n-                    ) funcDeclSuffix                                       \\\n-{                                                                          \\\n-    bodyPrefix                                                             \\\n-    tinyformat::detail::FormatIterator(streamName, fmt).finish();          \\\n-    bodySuffix                                                             \\\n-}                                                                          \\\n-TINYFORMAT_WRAP_FORMAT_N(1 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(2 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(3 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(4 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(5 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(6 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(7 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(8 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(9 , returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(10, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(11, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(12, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(13, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(14, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(15, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n-TINYFORMAT_WRAP_FORMAT_N(16, returnType, funcName, funcDeclSuffix, bodyPrefix, streamName, bodySuffix) \\\n+#endif\n \n+// Added for Bitcoin Core\n+template<typename... Args>\n+std::string format(const std::string &fmt, const Args&... args)\n+{\n+    std::ostringstream oss;\n+    format(oss, fmt.c_str(), args...);\n+    return oss.str();\n+}\n \n } // namespace tinyformat\n "
      },
      {
        "sha": "39328b51ef154c38df64dd7266e9c28039f34f1a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 22,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a2d4027271750139f4df51619aa2cfbe49f6665/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a2d4027271750139f4df51619aa2cfbe49f6665/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=7a2d4027271750139f4df51619aa2cfbe49f6665",
        "patch": "@@ -77,33 +77,17 @@ int LogPrintStr(const std::string &str);\n \n #define LogPrintf(...) LogPrint(NULL, __VA_ARGS__)\n \n-template<typename T1, typename... Args>\n-static inline int LogPrint(const char* category, const char* fmt, const T1& v1, const Args&... args)\n+template<typename... Args>\n+static inline int LogPrint(const char* category, const char* fmt, const Args&... args)\n {\n     if(!LogAcceptCategory(category)) return 0;                            \\\n-    return LogPrintStr(tfm::format(fmt, v1, args...));\n+    return LogPrintStr(tfm::format(fmt, args...));\n }\n \n-template<typename T1, typename... Args>\n-bool error(const char* fmt, const T1& v1, const Args&... args)\n+template<typename... Args>\n+bool error(const char* fmt, const Args&... args)\n {\n-    LogPrintStr(\"ERROR: \" + tfm::format(fmt, v1, args...) + \"\\n\");\n-    return false;\n-}\n-\n-/**\n- * Zero-arg versions of logging and error, these are not covered by\n- * the variadic templates above (and don't take format arguments but\n- * bare strings).\n- */\n-static inline int LogPrint(const char* category, const char* s)\n-{\n-    if(!LogAcceptCategory(category)) return 0;\n-    return LogPrintStr(s);\n-}\n-static inline bool error(const char* s)\n-{\n-    LogPrintStr(std::string(\"ERROR: \") + s + \"\\n\");\n+    LogPrintStr(\"ERROR: \" + tfm::format(fmt, args...) + \"\\n\");\n     return false;\n }\n "
      }
    ]
  },
  {
    "sha": "56c87e92110f05d7452f1e85bf755246ffc77206",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmM4N2U5MjExMGYwNWQ3NDUyZjFlODViZjc1NTI0NmZmYzc3MjA2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-25T21:22:37Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-29T13:41:58Z"
      },
      "message": "Allow changing BIP9 parameters on regtest",
      "tree": {
        "sha": "8428199ed927d530d034610071f7551940e5b366",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8428199ed927d530d034610071f7551940e5b366"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56c87e92110f05d7452f1e85bf755246ffc77206",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56c87e92110f05d7452f1e85bf755246ffc77206",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56c87e92110f05d7452f1e85bf755246ffc77206",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56c87e92110f05d7452f1e85bf755246ffc77206/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a2d4027271750139f4df51619aa2cfbe49f6665",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a2d4027271750139f4df51619aa2cfbe49f6665",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a2d4027271750139f4df51619aa2cfbe49f6665"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d6032440e3bb2a37694b4c25a612b3e22e5b33df",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56c87e92110f05d7452f1e85bf755246ffc77206/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56c87e92110f05d7452f1e85bf755246ffc77206/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=56c87e92110f05d7452f1e85bf755246ffc77206",
        "patch": "@@ -303,6 +303,12 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n+\n+    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+    {\n+        consensus.vDeployments[d].nStartTime = nStartTime;\n+        consensus.vDeployments[d].nTimeout = nTimeout;\n+    }\n };\n static CRegTestParams regTestParams;\n \n@@ -330,4 +336,9 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n+\n+void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+{\n+    regTestParams.UpdateBIP9Parameters(d, nStartTime, nTimeout);\n+}\n  "
      },
      {
        "sha": "0c3820b7c6e725ff5e468606c3b985185fb41754",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56c87e92110f05d7452f1e85bf755246ffc77206/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56c87e92110f05d7452f1e85bf755246ffc77206/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=56c87e92110f05d7452f1e85bf755246ffc77206",
        "patch": "@@ -112,4 +112,9 @@ CChainParams& Params(const std::string& chain);\n  */\n void SelectParams(const std::string& chain);\n \n+/**\n+ * Allows modifying the BIP9 regtest parameters.\n+ */\n+void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n+\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "5dc3ac023ccf837f9cc206c7dcc3c7941477dfec",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56c87e92110f05d7452f1e85bf755246ffc77206/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56c87e92110f05d7452f1e85bf755246ffc77206/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=56c87e92110f05d7452f1e85bf755246ffc77206",
        "patch": "@@ -410,6 +410,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n+        strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified bip9 deployment (regtest-only)\");\n     }\n     string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n@@ -975,6 +976,41 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n+    if (!mapMultiArgs[\"-bip9params\"].empty()) {\n+        // Allow overriding bip9 parameters for testing\n+        if (!Params().MineBlocksOnDemand()) {\n+            return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n+        }\n+        const vector<string>& deployments = mapMultiArgs[\"-bip9params\"];\n+        for (auto i : deployments) {\n+            std::vector<std::string> vDeploymentParams;\n+            boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n+            if (vDeploymentParams.size() != 3) {\n+                return InitError(\"BIP9 parameters malformed, expecting deployment:start:end\");\n+            }\n+            int64_t nStartTime, nTimeout;\n+            if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n+                return InitError(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n+            }\n+            if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n+                return InitError(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n+            }\n+            bool found = false;\n+            for (int i=0; i<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++i)\n+            {\n+                if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[i].name) == 0) {\n+                    UpdateRegtestBIP9Parameters(Consensus::DeploymentPos(i), nStartTime, nTimeout);\n+                    found = true;\n+                    LogPrintf(\"Setting BIP9 activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                return InitError(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n+            }\n+        }\n+    }\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Initialize elliptic curve code"
      }
    ]
  },
  {
    "sha": "9c8593d2b4e25ef628172ceadbedf0ef078d01ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yzg1OTNkMmI0ZTI1ZWY2MjgxNzJjZWFkYmVkZjBlZjA3OGQwMWVm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-27T14:06:17Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-29T13:41:58Z"
      },
      "message": "Implement SipHash in Python",
      "tree": {
        "sha": "915efaddaaebf93a751932dcd58948f8772dc9a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/915efaddaaebf93a751932dcd58948f8772dc9a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c8593d2b4e25ef628172ceadbedf0ef078d01ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8593d2b4e25ef628172ceadbedf0ef078d01ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c8593d2b4e25ef628172ceadbedf0ef078d01ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8593d2b4e25ef628172ceadbedf0ef078d01ef/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56c87e92110f05d7452f1e85bf755246ffc77206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56c87e92110f05d7452f1e85bf755246ffc77206",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56c87e92110f05d7452f1e85bf755246ffc77206"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 68,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c0574bd931758cca0b1583da0269bec96b5d8bf",
        "filename": "qa/rpc-tests/test_framework/siphash.py",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8593d2b4e25ef628172ceadbedf0ef078d01ef/qa/rpc-tests/test_framework/siphash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8593d2b4e25ef628172ceadbedf0ef078d01ef/qa/rpc-tests/test_framework/siphash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/siphash.py?ref=9c8593d2b4e25ef628172ceadbedf0ef078d01ef",
        "patch": "@@ -0,0 +1,64 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# siphash.py - Specialized SipHash-2-4 implementations\n+#\n+# This implements SipHash-2-4 for 256-bit integers.\n+\n+def rotl64(n, b):\n+    return n >> (64 - b) | (n & ((1 << (64 - b)) - 1)) << b\n+\n+def siphash_round(v0, v1, v2, v3):\n+    v0 = (v0 + v1) & ((1 << 64) - 1)\n+    v1 = rotl64(v1, 13)\n+    v1 ^= v0\n+    v0 = rotl64(v0, 32)\n+    v2 = (v2 + v3) & ((1 << 64) - 1)\n+    v3 = rotl64(v3, 16)\n+    v3 ^= v2\n+    v0 = (v0 + v3) & ((1 << 64) - 1)\n+    v3 = rotl64(v3, 21)\n+    v3 ^= v0\n+    v2 = (v2 + v1) & ((1 << 64) - 1)\n+    v1 = rotl64(v1, 17)\n+    v1 ^= v2\n+    v2 = rotl64(v2, 32)\n+    return (v0, v1, v2, v3)\n+\n+def siphash256(k0, k1, h):\n+    n0 = h & ((1 << 64) - 1)\n+    n1 = (h >> 64) & ((1 << 64) - 1)\n+    n2 = (h >> 128) & ((1 << 64) - 1)\n+    n3 = (h >> 192) & ((1 << 64) - 1)\n+    v0 = 0x736f6d6570736575 ^ k0\n+    v1 = 0x646f72616e646f6d ^ k1\n+    v2 = 0x6c7967656e657261 ^ k0\n+    v3 = 0x7465646279746573 ^ k1 ^ n0\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= n0\n+    v3 ^= n1\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= n1\n+    v3 ^= n2\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= n2\n+    v3 ^= n3\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= n3\n+    v3 ^= 0x2000000000000000\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= 0x2000000000000000\n+    v2 ^= 0xFF\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    return v0 ^ v1 ^ v2 ^ v3"
      },
      {
        "sha": "fa9624f13daf5508d21571c50d2540f5580ba8e3",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8593d2b4e25ef628172ceadbedf0ef078d01ef/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8593d2b4e25ef628172ceadbedf0ef078d01ef/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=9c8593d2b4e25ef628172ceadbedf0ef078d01ef",
        "patch": "@@ -122,6 +122,10 @@ BOOST_AUTO_TEST_CASE(siphash)\n         hasher3.Write(uint64_t(x)|(uint64_t(x+1)<<8)|(uint64_t(x+2)<<16)|(uint64_t(x+3)<<24)|\n                      (uint64_t(x+4)<<32)|(uint64_t(x+5)<<40)|(uint64_t(x+6)<<48)|(uint64_t(x+7)<<56));\n     }\n+\n+    CHashWriter ss(SER_DISK, CLIENT_VERSION);\n+    ss << CTransaction();\n+    BOOST_CHECK_EQUAL(SipHashUint256(1, 2, ss.GetHash()), 0x79751e980c2a0a35ULL);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "a8689fdf8e10300b73750161a73a23467ecd1efe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODY4OWZkZjhlMTAzMDBiNzM3NTAxNjFhNzNhMjM0NjdlY2QxZWZl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-06-18T01:17:25Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-29T13:41:58Z"
      },
      "message": "Tests: refactor compact size serialization in mininode",
      "tree": {
        "sha": "9a9ae4ae065efc2d67d76563aab9c03130736c67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a9ae4ae065efc2d67d76563aab9c03130736c67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8689fdf8e10300b73750161a73a23467ecd1efe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8689fdf8e10300b73750161a73a23467ecd1efe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8689fdf8e10300b73750161a73a23467ecd1efe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8689fdf8e10300b73750161a73a23467ecd1efe/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c8593d2b4e25ef628172ceadbedf0ef078d01ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8593d2b4e25ef628172ceadbedf0ef078d01ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c8593d2b4e25ef628172ceadbedf0ef078d01ef"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 25,
      "deletions": 72
    },
    "files": [
      {
        "sha": "67aaab698e9521a3ed3de13b0892fbcd2779b7cc",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 25,
        "deletions": 72,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8689fdf8e10300b73750161a73a23467ecd1efe/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8689fdf8e10300b73750161a73a23467ecd1efe/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=a8689fdf8e10300b73750161a73a23467ecd1efe",
        "patch": "@@ -74,25 +74,34 @@ def ripemd160(s):\n def hash256(s):\n     return sha256(sha256(s))\n \n+def ser_compact_size(l):\n+    r = b\"\"\n+    if l < 253:\n+        r = struct.pack(\"B\", l)\n+    elif l < 0x10000:\n+        r = struct.pack(\"<BH\", 253, l)\n+    elif l < 0x100000000:\n+        r = struct.pack(\"<BI\", 254, l)\n+    else:\n+        r = struct.pack(\"<BQ\", 255, l)\n+    return r\n \n-def deser_string(f):\n+def deser_compact_size(f):\n     nit = struct.unpack(\"<B\", f.read(1))[0]\n     if nit == 253:\n         nit = struct.unpack(\"<H\", f.read(2))[0]\n     elif nit == 254:\n         nit = struct.unpack(\"<I\", f.read(4))[0]\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    return nit\n+\n+def deser_string(f):\n+    nit = deser_compact_size(f)\n     return f.read(nit)\n \n def ser_string(s):\n-    if len(s) < 253:\n-        return struct.pack(\"B\", len(s)) + s\n-    elif len(s) < 0x10000:\n-        return struct.pack(\"<BH\", 253, len(s)) + s\n-    elif len(s) < 0x100000000:\n-        return struct.pack(\"<BI\", 254, len(s)) + s\n-    return struct.pack(\"<BQ\", 255, len(s)) + s\n+    return ser_compact_size(len(s)) + s\n \n def deser_uint256(f):\n     r = 0\n@@ -125,13 +134,7 @@ def uint256_from_compact(c):\n \n \n def deser_vector(f, c):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    nit = deser_compact_size(f)\n     r = []\n     for i in range(nit):\n         t = c()\n@@ -144,15 +147,7 @@ def deser_vector(f, c):\n # entries in the vector (we use this for serializing the vector of transactions\n # for a witness block).\n def ser_vector(l, ser_function_name=None):\n-    r = b\"\"\n-    if len(l) < 253:\n-        r = struct.pack(\"B\", len(l))\n-    elif len(l) < 0x10000:\n-        r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, len(l))\n-    else:\n-        r = struct.pack(\"<BQ\", 255, len(l))\n+    r = ser_compact_size(len(l))\n     for i in l:\n         if ser_function_name:\n             r += getattr(i, ser_function_name)()\n@@ -162,13 +157,7 @@ def ser_vector(l, ser_function_name=None):\n \n \n def deser_uint256_vector(f):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    nit = deser_compact_size(f)\n     r = []\n     for i in range(nit):\n         t = deser_uint256(f)\n@@ -177,28 +166,14 @@ def deser_uint256_vector(f):\n \n \n def ser_uint256_vector(l):\n-    r = b\"\"\n-    if len(l) < 253:\n-        r = struct.pack(\"B\", len(l))\n-    elif len(l) < 0x10000:\n-        r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, len(l))\n-    else:\n-        r = struct.pack(\"<BQ\", 255, len(l))\n+    r = ser_compact_size(len(l))\n     for i in l:\n         r += ser_uint256(i)\n     return r\n \n \n def deser_string_vector(f):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    nit = deser_compact_size(f)\n     r = []\n     for i in range(nit):\n         t = deser_string(f)\n@@ -207,28 +182,14 @@ def deser_string_vector(f):\n \n \n def ser_string_vector(l):\n-    r = b\"\"\n-    if len(l) < 253:\n-        r = struct.pack(\"B\", len(l))\n-    elif len(l) < 0x10000:\n-        r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, len(l))\n-    else:\n-        r = struct.pack(\"<BQ\", 255, len(l))\n+    r = ser_compact_size(len(l))\n     for sv in l:\n         r += ser_string(sv)\n     return r\n \n \n def deser_int_vector(f):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    nit = deser_compact_size(f)\n     r = []\n     for i in range(nit):\n         t = struct.unpack(\"<i\", f.read(4))[0]\n@@ -237,15 +198,7 @@ def deser_int_vector(f):\n \n \n def ser_int_vector(l):\n-    r = b\"\"\n-    if len(l) < 253:\n-        r = struct.pack(\"B\", len(l))\n-    elif len(l) < 0x10000:\n-        r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, len(l))\n-    else:\n-        r = struct.pack(\"<BQ\", 255, len(l))\n+    r = ser_compact_size(len(l))\n     for i in l:\n         r += struct.pack(\"<i\", i)\n     return r"
      }
    ]
  },
  {
    "sha": "9a22a6c0891256f02f4906c1c13fb22a9722ec7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTIyYTZjMDg5MTI1NmYwMmY0OTA2YzFjMTNmYjIyYTk3MjJlYzdj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-12T20:04:38Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-29T13:41:58Z"
      },
      "message": "Add support for compactblocks to mininode",
      "tree": {
        "sha": "b55cc5af02df8b90815828001dcc7e6d759bd470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b55cc5af02df8b90815828001dcc7e6d759bd470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a22a6c0891256f02f4906c1c13fb22a9722ec7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a22a6c0891256f02f4906c1c13fb22a9722ec7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a22a6c0891256f02f4906c1c13fb22a9722ec7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a22a6c0891256f02f4906c1c13fb22a9722ec7c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8689fdf8e10300b73750161a73a23467ecd1efe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8689fdf8e10300b73750161a73a23467ecd1efe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8689fdf8e10300b73750161a73a23467ecd1efe"
      }
    ],
    "stats": {
      "total": 276,
      "additions": 272,
      "deletions": 4
    },
    "files": [
      {
        "sha": "caffab35351df437f8828baa60284f0b3ac79cac",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 272,
        "deletions": 4,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a22a6c0891256f02f4906c1c13fb22a9722ec7c/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a22a6c0891256f02f4906c1c13fb22a9722ec7c/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=9a22a6c0891256f02f4906c1c13fb22a9722ec7c",
        "patch": "@@ -36,9 +36,10 @@\n from threading import Thread\n import logging\n import copy\n+from test_framework.siphash import siphash256\n \n BIP0031_VERSION = 60000\n-MY_VERSION = 60001  # past bip-31 for ping/pong\n+MY_VERSION = 70014  # past bip-31 for ping/pong\n MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n \n MAX_INV_SZ = 50000\n@@ -52,7 +53,7 @@\n NODE_WITNESS = (1 << 3)\n \n # Keep our own socket map for asyncore, so that we can track disconnects\n-# ourselves (to workaround an issue with closing an asyncore socket when \n+# ourselves (to workaround an issue with closing an asyncore socket when\n # using select)\n mininode_socket_map = dict()\n \n@@ -247,7 +248,8 @@ class CInv(object):\n         1: \"TX\",\n         2: \"Block\",\n         1|MSG_WITNESS_FLAG: \"WitnessTx\",\n-        2|MSG_WITNESS_FLAG : \"WitnessBlock\"\n+        2|MSG_WITNESS_FLAG : \"WitnessBlock\",\n+        4: \"CompactBlock\"\n     }\n \n     def __init__(self, t=0, h=0):\n@@ -734,6 +736,187 @@ def __repr__(self):\n             % (len(self.vchMsg), len(self.vchSig))\n \n \n+class PrefilledTransaction(object):\n+    def __init__(self, index=0, tx = None):\n+        self.index = index\n+        self.tx = tx\n+\n+    def deserialize(self, f):\n+        self.index = deser_compact_size(f)\n+        self.tx = CTransaction()\n+        self.tx.deserialize(f)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += ser_compact_size(self.index)\n+        if with_witness:\n+            r += self.tx.serialize_with_witness()\n+        else:\n+            r += self.tx.serialize_without_witness()\n+        return r\n+\n+    def __repr__(self):\n+        return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n+\n+# This is what we send on the wire, in a cmpctblock message.\n+class P2PHeaderAndShortIDs(object):\n+    def __init__(self):\n+        self.header = CBlockHeader()\n+        self.nonce = 0\n+        self.shortids_length = 0\n+        self.shortids = []\n+        self.prefilled_txn_length = 0\n+        self.prefilled_txn = []\n+\n+    def deserialize(self, f):\n+        self.header.deserialize(f)\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.shortids_length = deser_compact_size(f)\n+        for i in range(self.shortids_length):\n+            # shortids are defined to be 6 bytes in the spec, so append\n+            # two zero bytes and read it in as an 8-byte number\n+            self.shortids.append(struct.unpack(\"<Q\", f.read(6) + b'\\x00\\x00')[0])\n+        self.prefilled_txn = deser_vector(f, PrefilledTransaction)\n+        self.prefilled_txn_length = len(self.prefilled_txn)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += self.header.serialize()\n+        r += struct.pack(\"<Q\", self.nonce)\n+        r += ser_compact_size(self.shortids_length)\n+        for x in self.shortids:\n+            # We only want the first 6 bytes\n+            r += struct.pack(\"<Q\", x)[0:6]\n+        r += ser_vector(self.prefilled_txn)\n+        return r\n+\n+    def __repr__(self):\n+        return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n+\n+\n+# Calculate the BIP 152-compact blocks shortid for a given transaction hash\n+def calculate_shortid(k0, k1, tx_hash):\n+    expected_shortid = siphash256(k0, k1, tx_hash)\n+    expected_shortid &= 0x0000ffffffffffff\n+    return expected_shortid\n+\n+# This version gets rid of the array lengths, and reinterprets the differential\n+# encoding into indices that can be used for lookup.\n+class HeaderAndShortIDs(object):\n+    def __init__(self, p2pheaders_and_shortids = None):\n+        self.header = CBlockHeader()\n+        self.nonce = 0\n+        self.shortids = []\n+        self.prefilled_txn = []\n+\n+        if p2pheaders_and_shortids != None:\n+            self.header = p2pheaders_and_shortids.header\n+            self.nonce = p2pheaders_and_shortids.nonce\n+            self.shortids = p2pheaders_and_shortids.shortids\n+            last_index = -1\n+            for x in p2pheaders_and_shortids.prefilled_txn:\n+                self.prefilled_txn.append(PrefilledTransaction(x.index + last_index + 1, x.tx))\n+                last_index = self.prefilled_txn[-1].index\n+\n+    def to_p2p(self):\n+        ret = P2PHeaderAndShortIDs()\n+        ret.header = self.header\n+        ret.nonce = self.nonce\n+        ret.shortids_length = len(self.shortids)\n+        ret.shortids = self.shortids\n+        ret.prefilled_txn_length = len(self.prefilled_txn)\n+        ret.prefilled_txn = []\n+        last_index = -1\n+        for x in self.prefilled_txn:\n+            ret.prefilled_txn.append(PrefilledTransaction(x.index - last_index - 1, x.tx))\n+            last_index = x.index\n+        return ret\n+\n+    def get_siphash_keys(self):\n+        header_nonce = self.header.serialize()\n+        header_nonce += struct.pack(\"<Q\", self.nonce)\n+        hash_header_nonce_as_str = sha256(header_nonce)\n+        key0 = struct.unpack(\"<Q\", hash_header_nonce_as_str[0:8])[0]\n+        key1 = struct.unpack(\"<Q\", hash_header_nonce_as_str[8:16])[0]\n+        return [ key0, key1 ]\n+\n+    def initialize_from_block(self, block, nonce=0, prefill_list = [0]):\n+        self.header = CBlockHeader(block)\n+        self.nonce = nonce\n+        self.prefilled_txn = [ PrefilledTransaction(i, block.vtx[i]) for i in prefill_list ]\n+        self.shortids = []\n+        [k0, k1] = self.get_siphash_keys()\n+        for i in range(len(block.vtx)):\n+            if i not in prefill_list:\n+                self.shortids.append(calculate_shortid(k0, k1, block.vtx[i].sha256))\n+\n+    def __repr__(self):\n+        return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n+\n+\n+class BlockTransactionsRequest(object):\n+\n+    def __init__(self, blockhash=0, indexes = None):\n+        self.blockhash = blockhash\n+        self.indexes = indexes if indexes != None else []\n+\n+    def deserialize(self, f):\n+        self.blockhash = deser_uint256(f)\n+        indexes_length = deser_compact_size(f)\n+        for i in range(indexes_length):\n+            self.indexes.append(deser_compact_size(f))\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += ser_uint256(self.blockhash)\n+        r += ser_compact_size(len(self.indexes))\n+        for x in self.indexes:\n+            r += ser_compact_size(x)\n+        return r\n+\n+    # helper to set the differentially encoded indexes from absolute ones\n+    def from_absolute(self, absolute_indexes):\n+        self.indexes = []\n+        last_index = -1\n+        for x in absolute_indexes:\n+            self.indexes.append(x-last_index-1)\n+            last_index = x\n+\n+    def to_absolute(self):\n+        absolute_indexes = []\n+        last_index = -1\n+        for x in self.indexes:\n+            absolute_indexes.append(x+last_index+1)\n+            last_index = absolute_indexes[-1]\n+        return absolute_indexes\n+\n+    def __repr__(self):\n+        return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n+\n+\n+class BlockTransactions(object):\n+\n+    def __init__(self, blockhash=0, transactions = None):\n+        self.blockhash = blockhash\n+        self.transactions = transactions if transactions != None else []\n+\n+    def deserialize(self, f):\n+        self.blockhash = deser_uint256(f)\n+        self.transactions = deser_vector(f, CTransaction)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += ser_uint256(self.blockhash)\n+        if with_witness:\n+            r += ser_vector(self.transactions, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.transactions)\n+        return r\n+\n+    def __repr__(self):\n+        return \"BlockTransactions(hash=%064x transactions=%s)\" % (self.blockhash, repr(self.transactions))\n+\n+\n # Objects that correspond to messages on the wire\n class msg_version(object):\n     command = b\"version\"\n@@ -1168,6 +1351,79 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_feefilter(feerate=%08x)\" % self.feerate\n \n+class msg_sendcmpct(object):\n+    command = b\"sendcmpct\"\n+\n+    def __init__(self):\n+        self.announce = False\n+        self.version = 1\n+\n+    def deserialize(self, f):\n+        self.announce = struct.unpack(\"<?\", f.read(1))[0]\n+        self.version = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<?\", self.announce)\n+        r += struct.pack(\"<Q\", self.version)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n+\n+class msg_cmpctblock(object):\n+    command = b\"cmpctblock\"\n+\n+    def __init__(self, header_and_shortids = None):\n+        self.header_and_shortids = header_and_shortids\n+\n+    def deserialize(self, f):\n+        self.header_and_shortids = P2PHeaderAndShortIDs()\n+        self.header_and_shortids.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.header_and_shortids.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n+\n+class msg_getblocktxn(object):\n+    command = b\"getblocktxn\"\n+\n+    def __init__(self):\n+        self.block_txn_request = None\n+\n+    def deserialize(self, f):\n+        self.block_txn_request = BlockTransactionsRequest()\n+        self.block_txn_request.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_txn_request.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n+\n+class msg_blocktxn(object):\n+    command = b\"blocktxn\"\n+\n+    def __init__(self):\n+        self.block_transactions = BlockTransactions()\n+\n+    def deserialize(self, f):\n+        self.block_transactions.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_transactions.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n+\n # This is what a callback should look like for NodeConn\n # Reimplement the on_* functions to provide handling for events\n class NodeConnCB(object):\n@@ -1248,6 +1504,10 @@ def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n     def on_feefilter(self, conn, message): pass\n     def on_sendheaders(self, conn, message): pass\n+    def on_sendcmpct(self, conn, message): pass\n+    def on_cmpctblock(self, conn, message): pass\n+    def on_getblocktxn(self, conn, message): pass\n+    def on_blocktxn(self, conn, message): pass\n \n # More useful callbacks and functions for NodeConnCB's which have a single NodeConn\n class SingleNodeConnCB(NodeConnCB):\n@@ -1264,6 +1524,10 @@ def add_connection(self, conn):\n     def send_message(self, message):\n         self.connection.send_message(message)\n \n+    def send_and_ping(self, message):\n+        self.send_message(message)\n+        self.sync_with_ping()\n+\n     def on_pong(self, conn, message):\n         self.last_pong = message\n \n@@ -1297,7 +1561,11 @@ class NodeConn(asyncore.dispatcher):\n         b\"reject\": msg_reject,\n         b\"mempool\": msg_mempool,\n         b\"feefilter\": msg_feefilter,\n-        b\"sendheaders\": msg_sendheaders\n+        b\"sendheaders\": msg_sendheaders,\n+        b\"sendcmpct\": msg_sendcmpct,\n+        b\"cmpctblock\": msg_cmpctblock,\n+        b\"getblocktxn\": msg_getblocktxn,\n+        b\"blocktxn\": msg_blocktxn\n     }\n     MAGIC_BYTES = {\n         \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet"
      }
    ]
  },
  {
    "sha": "45c7ddd109465e03551f5b39c2e650c243b4a078",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWM3ZGRkMTA5NDY1ZTAzNTUxZjViMzljMmU2NTBjMjQzYjRhMDc4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-12T20:05:02Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-07-29T13:41:58Z"
      },
      "message": "Add p2p test for BIP 152 (compact blocks)",
      "tree": {
        "sha": "51cf1b8f1b78e2a846a771f6a1f80ffad21687e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51cf1b8f1b78e2a846a771f6a1f80ffad21687e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45c7ddd109465e03551f5b39c2e650c243b4a078",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c7ddd109465e03551f5b39c2e650c243b4a078",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45c7ddd109465e03551f5b39c2e650c243b4a078",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c7ddd109465e03551f5b39c2e650c243b4a078/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a22a6c0891256f02f4906c1c13fb22a9722ec7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a22a6c0891256f02f4906c1c13fb22a9722ec7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a22a6c0891256f02f4906c1c13fb22a9722ec7c"
      }
    ],
    "stats": {
      "total": 609,
      "additions": 609,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c4b11bc51b1e336b68e2db0176b09aa5d86ea45f",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c7ddd109465e03551f5b39c2e650c243b4a078/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c7ddd109465e03551f5b39c2e650c243b4a078/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=45c7ddd109465e03551f5b39c2e650c243b4a078",
        "patch": "@@ -141,6 +141,7 @@\n     'segwit.py',\n     'importprunedfunds.py',\n     'signmessages.py',\n+    'p2p-compactblocks.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "7fe7ecc16c6e19ae3fb4e9ece144f28fcee60740",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "added",
        "additions": 608,
        "deletions": 0,
        "changes": 608,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c7ddd109465e03551f5b39c2e650c243b4a078/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c7ddd109465e03551f5b39c2e650c243b4a078/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=45c7ddd109465e03551f5b39c2e650c243b4a078",
        "patch": "@@ -0,0 +1,608 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.siphash import siphash256\n+from test_framework.script import CScript, OP_TRUE\n+\n+'''\n+CompactBlocksTest -- test compact blocks (BIP 152)\n+'''\n+\n+\n+# TestNode: A peer we use to send messages to bitcoind, and store responses.\n+class TestNode(SingleNodeConnCB):\n+    def __init__(self):\n+        SingleNodeConnCB.__init__(self)\n+        self.last_sendcmpct = None\n+        self.last_headers = None\n+        self.last_inv = None\n+        self.last_cmpctblock = None\n+        self.block_announced = False\n+        self.last_getdata = None\n+        self.last_getblocktxn = None\n+        self.last_block = None\n+        self.last_blocktxn = None\n+\n+    def on_sendcmpct(self, conn, message):\n+        self.last_sendcmpct = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message\n+\n+    def on_cmpctblock(self, conn, message):\n+        self.last_cmpctblock = message\n+        self.block_announced = True\n+\n+    def on_headers(self, conn, message):\n+        self.last_headers = message\n+        self.block_announced = True\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+        self.block_announced = True\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_getblocktxn(self, conn, message):\n+        self.last_getblocktxn = message\n+\n+    def on_blocktxn(self, conn, message):\n+        self.last_blocktxn = message\n+\n+    # Requires caller to hold mininode_lock\n+    def received_block_announcement(self):\n+        return self.block_announced\n+\n+    def clear_block_announcement(self):\n+        with mininode_lock:\n+            self.block_announced = False\n+            self.last_inv = None\n+            self.last_headers = None\n+            self.last_cmpctblock = None\n+\n+    def get_headers(self, locator, hashstop):\n+        msg = msg_getheaders()\n+        msg.locator.vHave = locator\n+        msg.hashstop = hashstop\n+        self.connection.send_message(msg)\n+\n+    def send_header_for_blocks(self, new_blocks):\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in new_blocks]\n+        self.send_message(headers_message)\n+\n+\n+class CompactBlocksTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.utxos = []\n+\n+    def setup_network(self):\n+        self.nodes = []\n+\n+        # Turn off segwit in this test, as compact blocks don't currently work\n+        # with segwit.  (After BIP 152 is updated to support segwit, we can\n+        # test behavior with and without segwit enabled by adding a second node\n+        # to the test.)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [[\"-debug\", \"-logtimemicros=1\", \"-bip9params=segwit:0:0\"]])\n+\n+    def build_block_on_tip(self):\n+        height = self.nodes[0].getblockcount()\n+        tip = self.nodes[0].getbestblockhash()\n+        mtp = self.nodes[0].getblockheader(tip)['mediantime']\n+        block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n+        block.solve()\n+        return block\n+\n+    # Create 10 more anyone-can-spend utxo's for testing.\n+    def make_utxos(self):\n+        block = self.build_block_on_tip()\n+        self.test_node.send_and_ping(msg_block(block))\n+        assert(int(self.nodes[0].getbestblockhash(), 16) == block.sha256)\n+        self.nodes[0].generate(100)\n+\n+        total_value = block.vtx[0].vout[0].nValue\n+        out_value = total_value // 10\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(block.vtx[0].sha256, 0), b''))\n+        for i in range(10):\n+            tx.vout.append(CTxOut(out_value, CScript([OP_TRUE])))\n+        tx.rehash()\n+\n+        block2 = self.build_block_on_tip()\n+        block2.vtx.append(tx)\n+        block2.hashMerkleRoot = block2.calc_merkle_root()\n+        block2.solve()\n+        self.test_node.send_and_ping(msg_block(block2))\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block2.sha256)\n+        self.utxos.extend([[tx.sha256, i, out_value] for i in range(10)])\n+        return\n+\n+    # Test \"sendcmpct\":\n+    # - No compact block announcements or getdata(MSG_CMPCT_BLOCK) unless\n+    #   sendcmpct is sent.\n+    # - If sendcmpct is sent with version > 0, the message is ignored.\n+    # - If sendcmpct is sent with boolean 0, then block announcements are not\n+    #   made with compact blocks.\n+    # - If sendcmpct is then sent with boolean 1, then new block announcements\n+    #   are made with compact blocks.\n+    def test_sendcmpct(self):\n+        print(\"Testing SENDCMPCT p2p message... \")\n+\n+        # Make sure we get a version 0 SENDCMPCT message from our peer\n+        def received_sendcmpct():\n+            return (self.test_node.last_sendcmpct is not None)\n+        got_message = wait_until(received_sendcmpct, timeout=30)\n+        assert(got_message)\n+        assert_equal(self.test_node.last_sendcmpct.version, 1)\n+\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+\n+        def check_announcement_of_new_block(node, peer, predicate):\n+            self.test_node.clear_block_announcement()\n+            node.generate(1)\n+            got_message = wait_until(peer.received_block_announcement, timeout=30)\n+            assert(got_message)\n+            with mininode_lock:\n+                assert(predicate)\n+\n+        # We shouldn't get any block announcements via cmpctblock yet.\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None)\n+\n+        # Try one more time, this time after requesting headers.\n+        self.test_node.clear_block_announcement()\n+        self.test_node.get_headers(locator=[tip], hashstop=0)\n+        wait_until(self.test_node.received_block_announcement, timeout=30)\n+        self.test_node.clear_block_announcement()\n+\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None and self.test_node.last_inv is not None)\n+\n+        # Now try a SENDCMPCT message with too-high version\n+        sendcmpct = msg_sendcmpct()\n+        sendcmpct.version = 2\n+        self.test_node.send_message(sendcmpct)\n+\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None)\n+\n+        # Now try a SENDCMPCT message with valid version, but announce=False\n+        self.test_node.send_message(msg_sendcmpct())\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None)\n+\n+        # Finally, try a SENDCMPCT message with announce=True\n+        sendcmpct.version = 1\n+        sendcmpct.announce = True\n+        self.test_node.send_message(sendcmpct)\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is not None)\n+\n+        # Try one more time\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is not None)\n+\n+        # Try one more time, after turning on sendheaders\n+        self.test_node.send_message(msg_sendheaders())\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is not None)\n+\n+        # Now turn off announcements\n+        sendcmpct.announce = False\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None and self.test_node.last_headers is not None)\n+\n+    # This test actually causes bitcoind to (reasonably!) disconnect us, so do this last.\n+    def test_invalid_cmpctblock_message(self):\n+        print(\"Testing invalid index in cmpctblock message...\")\n+        self.nodes[0].generate(101)\n+        block = self.build_block_on_tip()\n+\n+        cmpct_block = P2PHeaderAndShortIDs()\n+        cmpct_block.header = CBlockHeader(block)\n+        cmpct_block.prefilled_txn_length = 1\n+        # This index will be too high\n+        prefilled_txn = PrefilledTransaction(1, block.vtx[0])\n+        cmpct_block.prefilled_txn = [prefilled_txn]\n+        self.test_node.send_and_ping(msg_cmpctblock(cmpct_block))\n+        assert(int(self.nodes[0].getbestblockhash(), 16) == block.hashPrevBlock)\n+\n+    # Compare the generated shortids to what we expect based on BIP 152, given\n+    # bitcoind's choice of nonce.\n+    def test_compactblock_construction(self):\n+        print(\"Testing compactblock headers and shortIDs are correct...\")\n+\n+        # Generate a bunch of transactions.\n+        self.nodes[0].generate(101)\n+        num_transactions = 25\n+        address = self.nodes[0].getnewaddress()\n+        for i in range(num_transactions):\n+            self.nodes[0].sendtoaddress(address, 0.1)\n+\n+        # Now mine a block, and look at the resulting compact block.\n+        self.test_node.clear_block_announcement()\n+        block_hash = int(self.nodes[0].generate(1)[0], 16)\n+\n+        # Store the raw block in our internal format.\n+        block = FromHex(CBlock(), self.nodes[0].getblock(\"%02x\" % block_hash, False))\n+        [tx.calc_sha256() for tx in block.vtx]\n+        block.rehash()\n+\n+        # Don't care which type of announcement came back for this test; just\n+        # request the compact block if we didn't get one yet.\n+        wait_until(self.test_node.received_block_announcement, timeout=30)\n+\n+        with mininode_lock:\n+            if self.test_node.last_cmpctblock is None:\n+                self.test_node.clear_block_announcement()\n+                inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n+                self.test_node.send_message(msg_getdata([inv]))\n+\n+        wait_until(self.test_node.received_block_announcement, timeout=30)\n+\n+        # Now we should have the compactblock\n+        header_and_shortids = None\n+        with mininode_lock:\n+            assert(self.test_node.last_cmpctblock is not None)\n+            # Convert the on-the-wire representation to absolute indexes\n+            header_and_shortids = HeaderAndShortIDs(self.test_node.last_cmpctblock.header_and_shortids)\n+\n+        # Check that we got the right block!\n+        header_and_shortids.header.calc_sha256()\n+        assert_equal(header_and_shortids.header.sha256, block_hash)\n+\n+        # Make sure the prefilled_txn appears to have included the coinbase\n+        assert(len(header_and_shortids.prefilled_txn) >= 1)\n+        assert_equal(header_and_shortids.prefilled_txn[0].index, 0)\n+\n+        # Check that all prefilled_txn entries match what's in the block.\n+        for entry in header_and_shortids.prefilled_txn:\n+            entry.tx.calc_sha256()\n+            assert_equal(entry.tx.sha256, block.vtx[entry.index].sha256)\n+\n+        # Check that the cmpctblock message announced all the transactions.\n+        assert_equal(len(header_and_shortids.prefilled_txn) + len(header_and_shortids.shortids), len(block.vtx))\n+\n+        # And now check that all the shortids are as expected as well.\n+        # Determine the siphash keys to use.\n+        [k0, k1] = header_and_shortids.get_siphash_keys()\n+\n+        index = 0\n+        while index < len(block.vtx):\n+            if (len(header_and_shortids.prefilled_txn) > 0 and\n+                    header_and_shortids.prefilled_txn[0].index == index):\n+                # Already checked prefilled transactions above\n+                header_and_shortids.prefilled_txn.pop(0)\n+            else:\n+                shortid = calculate_shortid(k0, k1, block.vtx[index].sha256)\n+                assert_equal(shortid, header_and_shortids.shortids[0])\n+                header_and_shortids.shortids.pop(0)\n+            index += 1\n+\n+    # Test that bitcoind requests compact blocks when we announce new blocks\n+    # via header or inv, and that responding to getblocktxn causes the block\n+    # to be successfully reconstructed.\n+    def test_compactblock_requests(self):\n+        print(\"Testing compactblock requests... \")\n+\n+        # Try announcing a block with an inv or header, expect a compactblock\n+        # request\n+        for announce in [\"inv\", \"header\"]:\n+            block = self.build_block_on_tip()\n+            with mininode_lock:\n+                self.test_node.last_getdata = None\n+\n+            if announce == \"inv\":\n+                self.test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n+            else:\n+                self.test_node.send_header_for_blocks([block])\n+            success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=30)\n+            assert(success)\n+            assert_equal(len(self.test_node.last_getdata.inv), 1)\n+            assert_equal(self.test_node.last_getdata.inv[0].type, 4)\n+            assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+\n+            # Send back a compactblock message that omits the coinbase\n+            comp_block = HeaderAndShortIDs()\n+            comp_block.header = CBlockHeader(block)\n+            comp_block.nonce = 0\n+            comp_block.shortids = [1]  # this is useless, and wrong\n+            self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+            # Expect a getblocktxn message.\n+            with mininode_lock:\n+                assert(self.test_node.last_getblocktxn is not None)\n+                absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+            assert_equal(absolute_indexes, [0])  # should be a coinbase request\n+\n+            # Send the coinbase, and verify that the tip advances.\n+            msg = msg_blocktxn()\n+            msg.block_transactions.blockhash = block.sha256\n+            msg.block_transactions.transactions = [block.vtx[0]]\n+            self.test_node.send_and_ping(msg)\n+            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+    # Create a chain of transactions from given utxo, and add to a new block.\n+    def build_block_with_transactions(self, utxo, num_transactions):\n+        block = self.build_block_on_tip()\n+\n+        for i in range(num_transactions):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(utxo[0], utxo[1]), b''))\n+            tx.vout.append(CTxOut(utxo[2] - 1000, CScript([OP_TRUE])))\n+            tx.rehash()\n+            utxo = [tx.sha256, 0, tx.vout[0].nValue]\n+            block.vtx.append(tx)\n+\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block\n+\n+    # Test that we only receive getblocktxn requests for transactions that the\n+    # node needs, and that responding to them causes the block to be\n+    # reconstructed.\n+    def test_getblocktxn_requests(self):\n+        print(\"Testing getblocktxn requests...\")\n+\n+        # First try announcing compactblocks that won't reconstruct, and verify\n+        # that we receive getblocktxn messages back.\n+        utxo = self.utxos.pop(0)\n+\n+        block = self.build_block_with_transactions(utxo, 5)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+\n+        comp_block = HeaderAndShortIDs()\n+        comp_block.initialize_from_block(block)\n+\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        with mininode_lock:\n+            assert(self.test_node.last_getblocktxn is not None)\n+            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+        assert_equal(absolute_indexes, [1, 2, 3, 4, 5])\n+        msg = msg_blocktxn()\n+        msg.block_transactions = BlockTransactions(block.sha256, block.vtx[1:])\n+        self.test_node.send_and_ping(msg)\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+        utxo = self.utxos.pop(0)\n+        block = self.build_block_with_transactions(utxo, 5)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+\n+        # Now try interspersing the prefilled transactions\n+        comp_block.initialize_from_block(block, prefill_list=[0, 1, 5])\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        with mininode_lock:\n+            assert(self.test_node.last_getblocktxn is not None)\n+            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+        assert_equal(absolute_indexes, [2, 3, 4])\n+        msg.block_transactions = BlockTransactions(block.sha256, block.vtx[2:5])\n+        self.test_node.send_and_ping(msg)\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+        # Now try giving one transaction ahead of time.\n+        utxo = self.utxos.pop(0)\n+        block = self.build_block_with_transactions(utxo, 5)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+        self.test_node.send_and_ping(msg_tx(block.vtx[1]))\n+        assert(block.vtx[1].hash in self.nodes[0].getrawmempool())\n+\n+        # Prefill 4 out of the 6 transactions, and verify that only the one\n+        # that was not in the mempool is requested.\n+        comp_block.initialize_from_block(block, prefill_list=[0, 2, 3, 4])\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        with mininode_lock:\n+            assert(self.test_node.last_getblocktxn is not None)\n+            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+        assert_equal(absolute_indexes, [5])\n+\n+        msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]])\n+        self.test_node.send_and_ping(msg)\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+        # Now provide all transactions to the node before the block is\n+        # announced and verify reconstruction happens immediately.\n+        utxo = self.utxos.pop(0)\n+        block = self.build_block_with_transactions(utxo, 10)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+        for tx in block.vtx[1:]:\n+            self.test_node.send_message(msg_tx(tx))\n+        self.test_node.sync_with_ping()\n+        # Make sure all transactions were accepted.\n+        mempool = self.nodes[0].getrawmempool()\n+        for tx in block.vtx[1:]:\n+            assert(tx.hash in mempool)\n+\n+        # Clear out last request.\n+        with mininode_lock:\n+            self.test_node.last_getblocktxn = None\n+\n+        # Send compact block\n+        comp_block.initialize_from_block(block, prefill_list=[0])\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        with mininode_lock:\n+            # Shouldn't have gotten a request for any transaction\n+            assert(self.test_node.last_getblocktxn is None)\n+        # Tip should have updated\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+    # Incorrectly responding to a getblocktxn shouldn't cause the block to be\n+    # permanently failed.\n+    def test_incorrect_blocktxn_response(self):\n+        print(\"Testing handling of incorrect blocktxn responses...\")\n+\n+        if (len(self.utxos) == 0):\n+            self.make_utxos()\n+        utxo = self.utxos.pop(0)\n+\n+        block = self.build_block_with_transactions(utxo, 10)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+        # Relay the first 5 transactions from the block in advance\n+        for tx in block.vtx[1:6]:\n+            self.test_node.send_message(msg_tx(tx))\n+        self.test_node.sync_with_ping()\n+        # Make sure all transactions were accepted.\n+        mempool = self.nodes[0].getrawmempool()\n+        for tx in block.vtx[1:6]:\n+            assert(tx.hash in mempool)\n+\n+        # Send compact block\n+        comp_block = HeaderAndShortIDs()\n+        comp_block.initialize_from_block(block, prefill_list=[0])\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        absolute_indexes = []\n+        with mininode_lock:\n+            assert(self.test_node.last_getblocktxn is not None)\n+            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+        assert_equal(absolute_indexes, [6, 7, 8, 9, 10])\n+\n+        # Now give an incorrect response.\n+        # Note that it's possible for bitcoind to be smart enough to know we're\n+        # lying, since it could check to see if the shortid matches what we're\n+        # sending, and eg disconnect us for misbehavior.  If that behavior\n+        # change were made, we could just modify this test by having a\n+        # different peer provide the block further down, so that we're still\n+        # verifying that the block isn't marked bad permanently. This is good\n+        # enough for now.\n+        msg = msg_blocktxn()\n+        msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]] + block.vtx[7:])\n+        self.test_node.send_and_ping(msg)\n+\n+        # Tip should not have updated\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+\n+        # We should receive a getdata request\n+        success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=10)\n+        assert(success)\n+        assert_equal(len(self.test_node.last_getdata.inv), 1)\n+        assert_equal(self.test_node.last_getdata.inv[0].type, 2)\n+        assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+\n+        # Deliver the block\n+        self.test_node.send_and_ping(msg_block(block))\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+    def test_getblocktxn_handler(self):\n+        print(\"Testing getblocktxn handler...\")\n+\n+        # bitcoind won't respond for blocks whose height is more than 15 blocks\n+        # deep.\n+        MAX_GETBLOCKTXN_DEPTH = 15\n+        chain_height = self.nodes[0].getblockcount()\n+        current_height = chain_height\n+        while (current_height >= chain_height - MAX_GETBLOCKTXN_DEPTH):\n+            block_hash = self.nodes[0].getblockhash(current_height)\n+            block = FromHex(CBlock(), self.nodes[0].getblock(block_hash, False))\n+\n+            msg = msg_getblocktxn()\n+            msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [])\n+            num_to_request = random.randint(1, len(block.vtx))\n+            msg.block_txn_request.from_absolute(sorted(random.sample(range(len(block.vtx)), num_to_request)))\n+            self.test_node.send_message(msg)\n+            success = wait_until(lambda: self.test_node.last_blocktxn is not None, timeout=10)\n+            assert(success)\n+\n+            [tx.calc_sha256() for tx in block.vtx]\n+            with mininode_lock:\n+                assert_equal(self.test_node.last_blocktxn.block_transactions.blockhash, int(block_hash, 16))\n+                all_indices = msg.block_txn_request.to_absolute()\n+                for index in all_indices:\n+                    tx = self.test_node.last_blocktxn.block_transactions.transactions.pop(0)\n+                    tx.calc_sha256()\n+                    assert_equal(tx.sha256, block.vtx[index].sha256)\n+                self.test_node.last_blocktxn = None\n+            current_height -= 1\n+\n+        # Next request should be ignored, as we're past the allowed depth.\n+        block_hash = self.nodes[0].getblockhash(current_height)\n+        msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [0])\n+        self.test_node.send_and_ping(msg)\n+        with mininode_lock:\n+            assert_equal(self.test_node.last_blocktxn, None)\n+\n+    def test_compactblocks_not_at_tip(self):\n+        print(\"Testing compactblock requests/announcements not at chain tip...\")\n+\n+        # Test that requesting old compactblocks doesn't work.\n+        MAX_CMPCTBLOCK_DEPTH = 11\n+        new_blocks = []\n+        for i in range(MAX_CMPCTBLOCK_DEPTH):\n+            self.test_node.clear_block_announcement()\n+            new_blocks.append(self.nodes[0].generate(1)[0])\n+            wait_until(self.test_node.received_block_announcement, timeout=30)\n+\n+        self.test_node.clear_block_announcement()\n+        self.test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        success = wait_until(lambda: self.test_node.last_cmpctblock is not None, timeout=30)\n+        assert(success)\n+\n+        self.test_node.clear_block_announcement()\n+        self.nodes[0].generate(1)\n+        wait_until(self.test_node.received_block_announcement, timeout=30)\n+        self.test_node.clear_block_announcement()\n+        self.test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        success = wait_until(lambda: self.test_node.last_block is not None, timeout=30)\n+        assert(success)\n+        with mininode_lock:\n+            self.test_node.last_block.block.calc_sha256()\n+            assert_equal(self.test_node.last_block.block.sha256, int(new_blocks[0], 16))\n+\n+        # Generate an old compactblock, and verify that it's not accepted.\n+        cur_height = self.nodes[0].getblockcount()\n+        hashPrevBlock = int(self.nodes[0].getblockhash(cur_height-5), 16)\n+        block = self.build_block_on_tip()\n+        block.hashPrevBlock = hashPrevBlock\n+        block.solve()\n+\n+        comp_block = HeaderAndShortIDs()\n+        comp_block.initialize_from_block(block)\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+\n+        tips = self.nodes[0].getchaintips()\n+        found = False\n+        for x in tips:\n+            if x[\"hash\"] == block.hash:\n+                assert_equal(x[\"status\"], \"headers-only\")\n+                found = True\n+                break\n+        assert(found)\n+\n+        # Requesting this block via getblocktxn should silently fail\n+        # (to avoid fingerprinting attacks).\n+        msg = msg_getblocktxn()\n+        msg.block_txn_request = BlockTransactionsRequest(block.sha256, [0])\n+        with mininode_lock:\n+            self.test_node.last_blocktxn = None\n+        self.test_node.send_and_ping(msg)\n+        with mininode_lock:\n+            assert(self.test_node.last_blocktxn is None)\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        self.test_node = TestNode()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.test_node))\n+        self.test_node.add_connection(connections[0])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        # Test logic begins here\n+        self.test_node.wait_for_verack()\n+\n+        # We will need UTXOs to construct transactions in later tests.\n+        self.make_utxos()\n+\n+        self.test_sendcmpct()\n+        self.test_compactblock_construction()\n+        self.test_compactblock_requests()\n+        self.test_getblocktxn_requests()\n+        self.test_getblocktxn_handler()\n+        self.test_compactblocks_not_at_tip()\n+        self.test_incorrect_blocktxn_response()\n+        self.test_invalid_cmpctblock_message()\n+\n+\n+if __name__ == '__main__':\n+    CompactBlocksTest().main()"
      }
    ]
  },
  {
    "sha": "bbcb8fd884335134065143047e9798dc8ec13445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmNiOGZkODg0MzM1MTM0MDY1MTQzMDQ3ZTk3OThkYzhlYzEzNDQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T15:37:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T15:39:24Z"
      },
      "message": "Merge #8417: [QA] Add walletdump RPC test (including HD- & encryption-tests)\n\n54af51d [QA] Add walletdump RPC test (including HD- & encryption-tests) (Jonas Schnelli)",
      "tree": {
        "sha": "f969b5fdaaae620ce4fabab3873b9154b555c540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f969b5fdaaae620ce4fabab3873b9154b555c540"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbcb8fd884335134065143047e9798dc8ec13445",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXm3isAAoJEHSBCwEjRsmmToQH/0r8Lndc5ne2XSF9eI45JwVr\ne0JJ/9+jD6Jz+TumqC3PuVC5GVv0wENHjwKawdiFaDtlhUZr1WX/nIy6hl3XqUaJ\nNnD7INA/aRK6bN+MKMj6xUc6385Mo5xNwAXxAvGmA+7/BLy1WghBZDU5+VutpEDD\nQbaumPYKpEcIiSUORS2y3oobXCjjlOpDlNWc+347tTDMbYUPUHF/ewBBCxYW4CXp\nhL5Ajj4juMRJoM+iLKB1YZY9kMIl/dNOIFfb//6hwcnnbGfMZ9hwmSEdvnpYF/Xm\nmUho/gjSnY32+kMj4ftsiOSyVIDheX+7SRUqaOH9nHYQBakyRUPp3xe1om/5FAQ=\n=zXXH\n-----END PGP SIGNATURE-----",
        "payload": "tree f969b5fdaaae620ce4fabab3873b9154b555c540\nparent 7a2d4027271750139f4df51619aa2cfbe49f6665\nparent 54af51d98d0b38f08c58dd589bff81883aee2854\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469806677 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469806764 +0200\n\nMerge #8417: [QA] Add walletdump RPC test (including HD- & encryption-tests)\n\n54af51d [QA] Add walletdump RPC test (including HD- & encryption-tests) (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcb8fd884335134065143047e9798dc8ec13445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbcb8fd884335134065143047e9798dc8ec13445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcb8fd884335134065143047e9798dc8ec13445/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a2d4027271750139f4df51619aa2cfbe49f6665",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a2d4027271750139f4df51619aa2cfbe49f6665",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a2d4027271750139f4df51619aa2cfbe49f6665"
      },
      {
        "sha": "54af51d98d0b38f08c58dd589bff81883aee2854",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54af51d98d0b38f08c58dd589bff81883aee2854",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54af51d98d0b38f08c58dd589bff81883aee2854"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 121,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5900fa51e34b4d5a75dce8d3211fcd03496b7680",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbcb8fd884335134065143047e9798dc8ec13445/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbcb8fd884335134065143047e9798dc8ec13445/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=bbcb8fd884335134065143047e9798dc8ec13445",
        "patch": "@@ -107,6 +107,7 @@\n     'bip68-112-113-p2p.py',\n     'wallet.py',\n     'wallet-hd.py',\n+    'wallet-dump.py',\n     'listtransactions.py',\n     'receivedby.py',\n     'mempool_resurrect_test.py',"
      },
      {
        "sha": "dd675f57fc46a21620911b4ae84e3e9507c0e9d9",
        "filename": "qa/rpc-tests/wallet-dump.py",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbcb8fd884335134065143047e9798dc8ec13445/qa/rpc-tests/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbcb8fd884335134065143047e9798dc8ec13445/qa/rpc-tests/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-dump.py?ref=bbcb8fd884335134065143047e9798dc8ec13445",
        "patch": "@@ -0,0 +1,120 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import os\n+import shutil\n+\n+\n+class WalletDumpTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def setup_network(self, split=False):\n+        extra_args = [[\"-keypool=100\"]]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test (self):\n+        tmpdir = self.options.tmpdir\n+\n+        #generate 20 addresses to compare against the dump\n+        test_addr_count = 20\n+        addrs = []\n+        for i in range(0,test_addr_count):\n+            addr = self.nodes[0].getnewaddress()\n+            vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n+            addrs.append(vaddr)\n+\n+        # dump unencrypted wallet\n+        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n+\n+        #open file\n+        inputfile = open(tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        found_addr = 0\n+        found_addr_chg = 0\n+        found_addr_rsv = 0\n+        hdmasteraddr = \"\"\n+        for line in inputfile:\n+            #only read non comment lines\n+            if line[0] != \"#\" and len(line) > 10:\n+                #split out some data\n+                keyLabel, comment = line.split(\"#\")\n+                key = keyLabel.split(\" \")[0]\n+                keytype = keyLabel.split(\" \")[2]\n+                if len(comment) > 1:\n+                    addrKeypath = comment.split(\" addr=\")[1]\n+                    addr = addrKeypath.split(\" \")[0]\n+                    keypath = \"\"\n+                    if keytype != \"hdmaster=1\":\n+                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n+                    else:\n+                        #keep hd master for later comp.\n+                        hdmasteraddr = addr\n+\n+                    #count key types\n+                    for addrObj in addrs:\n+                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n+                            found_addr+=1\n+                            break\n+                        elif (keytype == \"change=1\"):\n+                            found_addr_chg+=1\n+                            break\n+                        elif (keytype == \"reserve=1\"):\n+                            found_addr_rsv+=1\n+                            break\n+        assert(found_addr == test_addr_count) #all keys must be in the dump\n+        assert(found_addr_chg == 50) #50 blocks where mined\n+        assert(found_addr_rsv == 100) #100 reserve keys (keypool)\n+\n+        #encrypt wallet, restart, unlock and dump\n+        self.nodes[0].encryptwallet('test')\n+        bitcoind_processes[0].wait()\n+        self.nodes[0] = start_node(0, self.options.tmpdir)\n+        self.nodes[0].walletpassphrase('test', 10)\n+        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n+\n+        #open dump done with an encrypted wallet\n+        inputfile = open(tmpdir + \"/node0/wallet.encrypted.dump\")\n+        found_addr = 0\n+        found_addr_chg = 0\n+        found_addr_rsv = 0\n+        for line in inputfile:\n+            if line[0] != \"#\" and len(line) > 10:\n+                keyLabel, comment = line.split(\"#\")\n+                key = keyLabel.split(\" \")[0]\n+                keytype = keyLabel.split(\" \")[2]\n+                if len(comment) > 1:\n+                    addrKeypath = comment.split(\" addr=\")[1]\n+                    addr = addrKeypath.split(\" \")[0]\n+                    keypath = \"\"\n+                    if keytype != \"hdmaster=1\":\n+                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n+                    else:\n+                        #ensure we have generated a new hd master key\n+                        assert(hdmasteraddr != addr)\n+                    if keytype == \"inactivehdmaster=1\":\n+                        #ensure the old master is still available\n+                        assert(hdmasteraddr == addr)\n+                    for addrObj in addrs:\n+                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n+                            found_addr+=1\n+                            break\n+                        elif (keytype == \"change=1\"):\n+                            found_addr_chg+=1\n+                            break\n+                        elif (keytype == \"reserve=1\"):\n+                            found_addr_rsv+=1\n+                            break\n+\n+        assert(found_addr == test_addr_count)\n+        assert(found_addr_chg == 150) #old reserve keys are marked as change now\n+        assert(found_addr_rsv == 100) #keypool size\n+\n+if __name__ == '__main__':\n+    WalletDumpTest().main ()"
      }
    ]
  },
  {
    "sha": "5c9e49d12c931f9c7ddaac0144739dcd7263e554",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzllNDlkMTJjOTMxZjljN2RkYWFjMDE0NDczOWRjZDcyNjNlNTU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T15:42:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-29T15:44:01Z"
      },
      "message": "net: Ignore `notfound` P2P messages",
      "tree": {
        "sha": "382a39172cd06a6993970866d26e01a2081838ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/382a39172cd06a6993970866d26e01a2081838ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c9e49d12c931f9c7ddaac0144739dcd7263e554",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c9e49d12c931f9c7ddaac0144739dcd7263e554",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c9e49d12c931f9c7ddaac0144739dcd7263e554",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c9e49d12c931f9c7ddaac0144739dcd7263e554/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbcb8fd884335134065143047e9798dc8ec13445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcb8fd884335134065143047e9798dc8ec13445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbcb8fd884335134065143047e9798dc8ec13445"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "81f09515f30ded3701cfad485816e921f4dea4c1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c9e49d12c931f9c7ddaac0144739dcd7263e554/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c9e49d12c931f9c7ddaac0144739dcd7263e554/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5c9e49d12c931f9c7ddaac0144739dcd7263e554",
        "patch": "@@ -6145,6 +6145,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n     }\n \n+    else if (strCommand == NetMsgType::NOTFOUND) {\n+        // We do not care about the NOTFOUND message, but logging an Unknown Command\n+        // message would be undesirable as we transmit it ourselves.\n+    }\n+\n     else {\n         // Ignore unknown commands for extensibility\n         LogPrint(\"net\", \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->id);"
      }
    ]
  },
  {
    "sha": "00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGYwOWM5MjBjMmU4OTA2ZDIyNjAyNTFiZTZkMWQyZmExYmJiMjlk",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-06-08T04:25:31Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-30T00:04:14Z"
      },
      "message": "Split CWallet::AddToWallet into AddToWallet and LoadToWallet.\n\nThis removes the fFromLoadWallet flag in AddToWallet.  These were already\neffectively two methods.",
      "tree": {
        "sha": "878f8979628021569acfda540623db2a55d53b21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/878f8979628021569acfda540623db2a55d53b21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbcb8fd884335134065143047e9798dc8ec13445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcb8fd884335134065143047e9798dc8ec13445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbcb8fd884335134065143047e9798dc8ec13445"
      }
    ],
    "stats": {
      "total": 235,
      "additions": 119,
      "deletions": 116
    },
    "files": [
      {
        "sha": "9d403a453889fe06fbfa95259adc2a8b1bc4a979",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -310,7 +310,7 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n \n     if (pwalletMain->IsMine(tx)) {\n         CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\", false);\n-        pwalletMain->AddToWallet(wtx, false, &walletdb);\n+        pwalletMain->AddToWallet(wtx, &walletdb);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "8aad568c93cc61de1d25dbe3ee52133768461ce8",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx, &walletdb);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;"
      },
      {
        "sha": "68ce26eaa8ae032d6ccafaa772fa236683f91b82",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 112,
        "deletions": 110,
        "changes": 222,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -741,138 +741,140 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb)\n {\n     uint256 hash = wtxIn.GetHash();\n \n-    if (fFromLoadWallet)\n-    {\n-        mapWallet[hash] = wtxIn;\n-        CWalletTx& wtx = mapWallet[hash];\n-        wtx.BindWallet(this);\n+    LOCK(cs_wallet);\n+    // Inserts only if not already there, returns tx inserted or tx found\n+    pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n+    CWalletTx& wtx = (*ret.first).second;\n+    wtx.BindWallet(this);\n+    bool fInsertedNew = ret.second;\n+    if (fInsertedNew)\n+    {\n+        wtx.nTimeReceived = GetAdjustedTime();\n+        wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n         wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n-        AddToSpends(hash);\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n-            if (mapWallet.count(txin.prevout.hash)) {\n-                CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n-                if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n-                    MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n-                }\n-            }\n-        }\n-    }\n-    else\n-    {\n-        LOCK(cs_wallet);\n-        // Inserts only if not already there, returns tx inserted or tx found\n-        pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n-        CWalletTx& wtx = (*ret.first).second;\n-        wtx.BindWallet(this);\n-        bool fInsertedNew = ret.second;\n-        if (fInsertedNew)\n-        {\n-            wtx.nTimeReceived = GetAdjustedTime();\n-            wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n-            wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n-\n-            wtx.nTimeSmart = wtx.nTimeReceived;\n-            if (!wtxIn.hashUnset())\n+\n+        wtx.nTimeSmart = wtx.nTimeReceived;\n+        if (!wtxIn.hashUnset())\n+        {\n+            if (mapBlockIndex.count(wtxIn.hashBlock))\n             {\n-                if (mapBlockIndex.count(wtxIn.hashBlock))\n+                int64_t latestNow = wtx.nTimeReceived;\n+                int64_t latestEntry = 0;\n                 {\n-                    int64_t latestNow = wtx.nTimeReceived;\n-                    int64_t latestEntry = 0;\n+                    // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+                    int64_t latestTolerated = latestNow + 300;\n+                    const TxItems & txOrdered = wtxOrdered;\n+                    for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n                     {\n-                        // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-                        int64_t latestTolerated = latestNow + 300;\n-                        const TxItems & txOrdered = wtxOrdered;\n-                        for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        CWalletTx *const pwtx = (*it).second.first;\n+                        if (pwtx == &wtx)\n+                            continue;\n+                        CAccountingEntry *const pacentry = (*it).second.second;\n+                        int64_t nSmartTime;\n+                        if (pwtx)\n                         {\n-                            CWalletTx *const pwtx = (*it).second.first;\n-                            if (pwtx == &wtx)\n-                                continue;\n-                            CAccountingEntry *const pacentry = (*it).second.second;\n-                            int64_t nSmartTime;\n-                            if (pwtx)\n-                            {\n-                                nSmartTime = pwtx->nTimeSmart;\n-                                if (!nSmartTime)\n-                                    nSmartTime = pwtx->nTimeReceived;\n-                            }\n-                            else\n-                                nSmartTime = pacentry->nTime;\n-                            if (nSmartTime <= latestTolerated)\n-                            {\n-                                latestEntry = nSmartTime;\n-                                if (nSmartTime > latestNow)\n-                                    latestNow = nSmartTime;\n-                                break;\n-                            }\n+                            nSmartTime = pwtx->nTimeSmart;\n+                            if (!nSmartTime)\n+                                nSmartTime = pwtx->nTimeReceived;\n+                        }\n+                        else\n+                            nSmartTime = pacentry->nTime;\n+                        if (nSmartTime <= latestTolerated)\n+                        {\n+                            latestEntry = nSmartTime;\n+                            if (nSmartTime > latestNow)\n+                                latestNow = nSmartTime;\n+                            break;\n                         }\n                     }\n-\n-                    int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n-                    wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n                 }\n-                else\n-                    LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n-                             wtxIn.GetHash().ToString(),\n-                             wtxIn.hashBlock.ToString());\n+\n+                int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n+                wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n             }\n-            AddToSpends(hash);\n+            else\n+                LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n+                         wtxIn.GetHash().ToString(),\n+                         wtxIn.hashBlock.ToString());\n         }\n+        AddToSpends(hash);\n+    }\n \n-        bool fUpdated = false;\n-        if (!fInsertedNew)\n+    bool fUpdated = false;\n+    if (!fInsertedNew)\n+    {\n+        // Merge\n+        if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n         {\n-            // Merge\n-            if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n-            {\n-                wtx.hashBlock = wtxIn.hashBlock;\n-                fUpdated = true;\n-            }\n-            // If no longer abandoned, update\n-            if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n-            {\n-                wtx.hashBlock = wtxIn.hashBlock;\n-                fUpdated = true;\n-            }\n-            if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n-            {\n-                wtx.nIndex = wtxIn.nIndex;\n-                fUpdated = true;\n-            }\n-            if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n-            {\n-                wtx.fFromMe = wtxIn.fFromMe;\n-                fUpdated = true;\n-            }\n+            wtx.hashBlock = wtxIn.hashBlock;\n+            fUpdated = true;\n         }\n+        // If no longer abandoned, update\n+        if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n+        {\n+            wtx.hashBlock = wtxIn.hashBlock;\n+            fUpdated = true;\n+        }\n+        if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n+        {\n+            wtx.nIndex = wtxIn.nIndex;\n+            fUpdated = true;\n+        }\n+        if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n+        {\n+            wtx.fFromMe = wtxIn.fFromMe;\n+            fUpdated = true;\n+        }\n+    }\n \n-        //// debug print\n-        LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+    //// debug print\n+    LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n-        // Write to disk\n-        if (fInsertedNew || fUpdated)\n-            if (!pwalletdb->WriteTx(wtx))\n-                return false;\n+    // Write to disk\n+    if (fInsertedNew || fUpdated)\n+        if (!pwalletdb->WriteTx(wtx))\n+            return false;\n \n-        // Break debit/credit balance caches:\n-        wtx.MarkDirty();\n+    // Break debit/credit balance caches:\n+    wtx.MarkDirty();\n \n-        // Notify UI of new or updated transaction\n-        NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n+    // Notify UI of new or updated transaction\n+    NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n-        // notify an external script when a wallet transaction comes in or is updated\n-        std::string strCmd = GetArg(\"-walletnotify\", \"\");\n+    // notify an external script when a wallet transaction comes in or is updated\n+    std::string strCmd = GetArg(\"-walletnotify\", \"\");\n \n-        if ( !strCmd.empty())\n-        {\n-            boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-            boost::thread t(runCommand, strCmd); // thread runs free\n-        }\n+    if ( !strCmd.empty())\n+    {\n+        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    }\n+\n+    return true;\n+}\n+\n+bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n+{\n+    uint256 hash = wtxIn.GetHash();\n \n+    mapWallet[hash] = wtxIn;\n+    CWalletTx& wtx = mapWallet[hash];\n+    wtx.BindWallet(this);\n+    wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n+    AddToSpends(hash);\n+    BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+        if (mapWallet.count(txin.prevout.hash)) {\n+            CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n+            if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n+                MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n+            }\n+        }\n     }\n+\n     return true;\n }\n \n@@ -913,7 +915,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n             // this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n             CWalletDB walletdb(strWalletFile, \"r+\", false);\n \n-            return AddToWallet(wtx, false, &walletdb);\n+            return AddToWallet(wtx, &walletdb);\n         }\n     }\n     return false;\n@@ -2456,7 +2458,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n-            AddToWallet(wtxNew, false, pwalletdb);\n+            AddToWallet(wtxNew, pwalletdb);\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;"
      },
      {
        "sha": "3bbacaae5786faf36eaf5d6c5744c74f4f31aa39",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -729,7 +729,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n+    bool AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb);\n+    bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);"
      },
      {
        "sha": "543522ca6485c111c3ed048bc42a9ca35fa2a07d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00f09c920c2e8906d2260251be6d1d2fa1bbb29d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "patch": "@@ -400,7 +400,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->AddToWallet(wtx, true, NULL);\n+            pwallet->LoadToWallet(wtx);\n         }\n         else if (strType == \"acentry\")\n         {"
      }
    ]
  },
  {
    "sha": "867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjdmODQyZjFlNWEzODVhZWIyMDkzZjgwMmQ2ZjM3YTg0ZDBmZTVk",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-06-08T04:41:03Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-30T00:04:14Z"
      },
      "message": "Remove CWalletDB* parameter from CWallet::AddToWallet",
      "tree": {
        "sha": "11f1d708106754f15a7d6f5c03bb61df3c714b07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11f1d708106754f15a7d6f5c03bb61df3c714b07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00f09c920c2e8906d2260251be6d1d2fa1bbb29d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00f09c920c2e8906d2260251be6d1d2fa1bbb29d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 14,
      "deletions": 16
    },
    "files": [
      {
        "sha": "fe8b53ceb0c1af8de6d4d506ef613b8491790e48",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "patch": "@@ -309,8 +309,7 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     if (pwalletMain->IsMine(tx)) {\n-        CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\", false);\n-        pwalletMain->AddToWallet(wtx, &walletdb);\n+        pwalletMain->AddToWallet(wtx, false);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "a6cada46a226c83d47d0db47e1828358bfd27efb",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx, &walletdb);\n+    pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, &walletdb);\n+    pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, &walletdb);\n+    pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;"
      },
      {
        "sha": "63a3baea04957bf449a780877d1bb9a54b534bd9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "patch": "@@ -741,11 +741,14 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n {\n+    LOCK(cs_wallet);\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\", fFlushOnClose);\n+\n     uint256 hash = wtxIn.GetHash();\n \n-    LOCK(cs_wallet);\n     // Inserts only if not already there, returns tx inserted or tx found\n     pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n     CWalletTx& wtx = (*ret.first).second;\n@@ -754,7 +757,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb)\n     if (fInsertedNew)\n     {\n         wtx.nTimeReceived = GetAdjustedTime();\n-        wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n+        wtx.nOrderPos = IncOrderPosNext(&walletdb);\n         wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \n         wtx.nTimeSmart = wtx.nTimeReceived;\n@@ -836,7 +839,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb)\n \n     // Write to disk\n     if (fInsertedNew || fUpdated)\n-        if (!pwalletdb->WriteTx(wtx))\n+        if (!walletdb.WriteTx(wtx))\n             return false;\n \n     // Break debit/credit balance caches:\n@@ -911,11 +914,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n             if (pblock)\n                 wtx.SetMerkleBranch(*pblock);\n \n-            // Do not flush the wallet here for performance reasons\n-            // this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n-            CWalletDB walletdb(strWalletFile, \"r+\", false);\n-\n-            return AddToWallet(wtx, &walletdb);\n+            return AddToWallet(wtx, false);\n         }\n     }\n     return false;\n@@ -2458,7 +2457,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n-            AddToWallet(wtxNew, pwalletdb);\n+            AddToWallet(wtxNew);\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;"
      },
      {
        "sha": "236ef85114e1a4afd6b80701c041f4b5886f3f27",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867f842f1e5a385aeb2093f802d6f37a84d0fe5d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "patch": "@@ -729,7 +729,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, CWalletDB* pwalletdb);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);"
      }
    ]
  },
  {
    "sha": "5723bb44ce2c6bb14114aa7f211160702a47ac91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzIzYmI0NGNlMmM2YmIxNDExNGFhN2YyMTExNjA3MDJhNDdhYzkx",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-06-08T23:20:59Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-30T00:04:14Z"
      },
      "message": "Remove unused pwalletdb from CWallet::AddToWallet",
      "tree": {
        "sha": "05bcacc3f3e2b5b3a95842c11fc814aba1eb1208",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05bcacc3f3e2b5b3a95842c11fc814aba1eb1208"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5723bb44ce2c6bb14114aa7f211160702a47ac91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5723bb44ce2c6bb14114aa7f211160702a47ac91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5723bb44ce2c6bb14114aa7f211160702a47ac91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5723bb44ce2c6bb14114aa7f211160702a47ac91/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867f842f1e5a385aeb2093f802d6f37a84d0fe5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/867f842f1e5a385aeb2093f802d6f37a84d0fe5d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ee9254050ce7842c56a58451455af85456197e2c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5723bb44ce2c6bb14114aa7f211160702a47ac91/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5723bb44ce2c6bb14114aa7f211160702a47ac91/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5723bb44ce2c6bb14114aa7f211160702a47ac91",
        "patch": "@@ -2447,11 +2447,6 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         LOCK2(cs_main, cs_wallet);\n         LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.ToString());\n         {\n-            // This is only to keep the database open to defeat the auto-flush for the\n-            // duration of this scope.  This is the only place where this optimization\n-            // maybe makes sense; please don't do it anywhere else.\n-            CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,\"r+\") : NULL;\n-\n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();\n \n@@ -2467,9 +2462,6 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n                 coin.BindWallet(this);\n                 NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n             }\n-\n-            if (fFileBacked)\n-                delete pwalletdb;\n         }\n \n         // Track how many getdata requests our transaction gets"
      }
    ]
  },
  {
    "sha": "0fd2a33648ccde4b989f1d69529daea4d88b14a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmQyYTMzNjQ4Y2NkZTRiOTg5ZjFkNjk1MjlkYWVhNGQ4OGIxNGEy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-22T13:57:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-30T00:17:47Z"
      },
      "message": "Use a signal to continue init after genesis activation",
      "tree": {
        "sha": "9239f56f316cb63fd390f0cdf553b420df5c12c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9239f56f316cb63fd390f0cdf553b420df5c12c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fd2a33648ccde4b989f1d69529daea4d88b14a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fd2a33648ccde4b989f1d69529daea4d88b14a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fd2a33648ccde4b989f1d69529daea4d88b14a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fd2a33648ccde4b989f1d69529daea4d88b14a2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbcb8fd884335134065143047e9798dc8ec13445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcb8fd884335134065143047e9798dc8ec13445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbcb8fd884335134065143047e9798dc8ec13445"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 35,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4458c8331b61320124232a12c5249a25ee6fe268",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 10,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fd2a33648ccde4b989f1d69529daea4d88b14a2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fd2a33648ccde4b989f1d69529daea4d88b14a2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0fd2a33648ccde4b989f1d69529daea4d88b14a2",
        "patch": "@@ -510,6 +510,21 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n     boost::thread t(runCommand, strCmd); // thread runs free\n }\n \n+static bool fHaveGenesis = false;\n+static boost::mutex cs_GenesisWait;\n+static CConditionVariable condvar_GenesisWait;\n+\n+static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n+{\n+    if (pBlockIndex != NULL) {\n+        {\n+            boost::unique_lock<boost::mutex> lock_GenesisWait(cs_GenesisWait);\n+            fHaveGenesis = true;\n+        }\n+        condvar_GenesisWait.notify_all();\n+    }\n+}\n+\n struct CImportingNow\n {\n     CImportingNow() {\n@@ -1286,7 +1301,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n-                if (!fReindex) {\n+                if (!fReindex && chainActive.Tip() != NULL) {\n                     uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n                     if (!RewindBlockIndex(chainparams)) {\n                         strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n@@ -1403,6 +1418,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 10: import blocks\n \n+    // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n+    // No locking, as this happens before any background thread is started.\n+    if (chainActive.Tip() == NULL) {\n+        uiInterface.NotifyBlockTip.connect(BlockNotifyGenesisWait);\n+    } else {\n+        fHaveGenesis = true;\n+    }\n+\n     if (mapArgs.count(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n@@ -1412,19 +1435,16 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         BOOST_FOREACH(const std::string& strFile, mapMultiArgs[\"-loadblock\"])\n             vImportFiles.push_back(strFile);\n     }\n+\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n \n     // Wait for genesis block to be processed\n-    bool fHaveGenesis = false;\n-    while (!fHaveGenesis && !fRequestShutdown) {\n-        {\n-            LOCK(cs_main);\n-            fHaveGenesis = (chainActive.Tip() != NULL);\n-        }\n-\n-        if (!fHaveGenesis) {\n-            MilliSleep(10);\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs_GenesisWait);\n+        while (!fHaveGenesis) {\n+            condvar_GenesisWait.wait(lock);\n         }\n+        uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }\n \n     // ********************************************************* Step 11: start node"
      },
      {
        "sha": "f8eab7eb3f8e57e796ab2e709d719b15d5d66fb8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fd2a33648ccde4b989f1d69529daea4d88b14a2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fd2a33648ccde4b989f1d69529daea4d88b14a2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0fd2a33648ccde4b989f1d69529daea4d88b14a2",
        "patch": "@@ -4331,8 +4331,6 @@ bool InitBlockIndex(const CChainParams& chainparams)\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n-            if (!ActivateBestChain(state, chainparams, &block))\n-                return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {"
      },
      {
        "sha": "056f2982cf1eb0e8e8eca76cda73dd0b2acecc67",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fd2a33648ccde4b989f1d69529daea4d88b14a2/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fd2a33648ccde4b989f1d69529daea4d88b14a2/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=0fd2a33648ccde4b989f1d69529daea4d88b14a2",
        "patch": "@@ -60,6 +60,11 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n         InitBlockIndex(chainparams);\n+        {\n+            CValidationState state;\n+            bool ok = ActivateBestChain(state, chainparams);\n+            BOOST_CHECK(ok);\n+        }\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);"
      }
    ]
  },
  {
    "sha": "aa59f2ed3f378c02159e41ff3ae2df76ef850577",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTU5ZjJlZDNmMzc4YzAyMTU5ZTQxZmYzYWUyZGY3NmVmODUwNTc3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-22T14:01:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-30T00:17:51Z"
      },
      "message": "Add extra message to avoid a long 'Loading banlist'",
      "tree": {
        "sha": "a4f707de327db93016f90a0687aa06bb7362e0a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4f707de327db93016f90a0687aa06bb7362e0a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa59f2ed3f378c02159e41ff3ae2df76ef850577",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa59f2ed3f378c02159e41ff3ae2df76ef850577",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa59f2ed3f378c02159e41ff3ae2df76ef850577",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa59f2ed3f378c02159e41ff3ae2df76ef850577/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fd2a33648ccde4b989f1d69529daea4d88b14a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fd2a33648ccde4b989f1d69529daea4d88b14a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fd2a33648ccde4b989f1d69529daea4d88b14a2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6a1ba416131929fba2114b12e9fdfeee79d213e0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa59f2ed3f378c02159e41ff3ae2df76ef850577/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa59f2ed3f378c02159e41ff3ae2df76ef850577/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=aa59f2ed3f378c02159e41ff3ae2df76ef850577",
        "patch": "@@ -2050,6 +2050,8 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         DumpBanlist();\n     }\n \n+    uiInterface.InitMessage(_(\"Starting network threads...\"));\n+\n     fAddressesInitialized = true;\n \n     if (semOutbound == NULL) {"
      }
    ]
  },
  {
    "sha": "9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDRlYjlhZDk5ZjdjM2FiZjdhYmFlYWY3ZWE1MWY5OGY5NDQ1ZTc1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-22T14:01:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-30T00:17:51Z"
      },
      "message": "Do diskspace check before import thread is started",
      "tree": {
        "sha": "054aa867b5a25baee6a765dccc0fbaf61a7589bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/054aa867b5a25baee6a765dccc0fbaf61a7589bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa59f2ed3f378c02159e41ff3ae2df76ef850577",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa59f2ed3f378c02159e41ff3ae2df76ef850577",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa59f2ed3f378c02159e41ff3ae2df76ef850577"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "44d8c16d9553d37cd03202d8da2c46f97f658a68",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75",
        "patch": "@@ -1418,6 +1418,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 10: import blocks\n \n+    if (!CheckDiskSpace())\n+        return false;\n+\n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n     if (chainActive.Tip() == NULL) {\n@@ -1449,9 +1452,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 11: start node\n \n-    if (!CheckDiskSpace())\n-        return false;\n-\n     if (!strErrors.str().empty())\n         return InitError(strErrors.str());\n "
      }
    ]
  },
  {
    "sha": "ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmVmZTdhMDBiNDY1NzljZGQxZTAzM2E4YzdmZDhjZTlhYTU3OGU0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-30T00:20:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-30T00:22:01Z"
      },
      "message": "Merge #8427: net: Ignore `notfound` P2P messages\n\n5c9e49d net: Ignore `notfound` P2P messages (Wladimir J. van der Laan)",
      "tree": {
        "sha": "382a39172cd06a6993970866d26e01a2081838ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/382a39172cd06a6993970866d26e01a2081838ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJXm/MpAAoJENuhpnN5oakxzAcP/RNb5WTJAQ7eYWdkqsyvBT7o\nD9S5HaUfpUwP0Z8Kb+ZFXwjATI3KCc9s39iXV8hi1j7MIUg2XcadICDpFJkpTz5G\nMl/Dg3oaLYVmbd2+ohYRyv/KQUdbH343IY/DhowGNYnbtwhTUJlO+WBSM22DnqbZ\nGLt1MxaNpmrJauMY0/mU60JrCdFuGZGRrgFnF/Cp9QuqbP8JqOAThb+/8CDtPeyK\nxw4luBjwbkJiFqiO9Qy2v5DhUjHLVpJ6xM8gEKwBBdP41mpEs5g/nzgI5wSpTqZE\nWFWddaZNHVoIRScHJyFSifJg9bCwoojTNOgtfvPBWhWvuVhbHqqtSIFwRfNpSnsK\nfh9RCBEVesRnGjW9SL+rLL/tOwC+o5wZ3ZUNZ2Py+ueR28rdD1Gna4CszGaOsYoU\nieLDhsupB2sWXbSLvkMrGy6v3NW+O7E4Y0/VDeJrHVSmburopqvpia/7xl7Fgd6a\nqxEBqrTm2xHfgZzBa8t/ErnkG7UVSK5MuFeKJtdhNlfkN4bVjVAOo2oPK1oa1R1z\n4tRKhUFQYAlU/W9JB4ZRK50g5aE8pJ93XL9zsnluk3Ak41mcfCA/kvRT3g14w9E5\nRE0vxFZ6KOjgA+sFAz+SWbMtIc9lFYa2WnJrpU9j3ASZFGOcNByUWzE3ph5WtnPe\nWwCIlZ0eV84LlIV0NT+l\n=NN2w\n-----END PGP SIGNATURE-----",
        "payload": "tree 382a39172cd06a6993970866d26e01a2081838ec\nparent bbcb8fd884335134065143047e9798dc8ec13445\nparent 5c9e49d12c931f9c7ddaac0144739dcd7263e554\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1469838015 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1469838121 +0200\n\nMerge #8427: net: Ignore `notfound` P2P messages\n\n5c9e49d net: Ignore `notfound` P2P messages (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbcb8fd884335134065143047e9798dc8ec13445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcb8fd884335134065143047e9798dc8ec13445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbcb8fd884335134065143047e9798dc8ec13445"
      },
      {
        "sha": "5c9e49d12c931f9c7ddaac0144739dcd7263e554",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c9e49d12c931f9c7ddaac0144739dcd7263e554",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c9e49d12c931f9c7ddaac0144739dcd7263e554"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "81f09515f30ded3701cfad485816e921f4dea4c1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4",
        "patch": "@@ -6145,6 +6145,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n     }\n \n+    else if (strCommand == NetMsgType::NOTFOUND) {\n+        // We do not care about the NOTFOUND message, but logging an Unknown Command\n+        // message would be undesirable as we transmit it ourselves.\n+    }\n+\n     else {\n         // Ignore unknown commands for extensibility\n         LogPrint(\"net\", \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->id);"
      }
    ]
  },
  {
    "sha": "6caf3ee061a86d89b965dc8a61a95d1f34015805",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2FmM2VlMDYxYTg2ZDg5Yjk2NWRjOGE2MWE5NWQxZjM0MDE1ODA1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-30T09:40:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-07-30T09:40:17Z"
      },
      "message": "Merge #8238: [WIP][depends] ZeroMQ 4.1.5 && ZMQ on Windows\n\na615386 [depends] ZeroMQ 4.1.5 (fanquake)",
      "tree": {
        "sha": "2a668fa98d96e2426a3ff0022660746b2de80011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a668fa98d96e2426a3ff0022660746b2de80011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6caf3ee061a86d89b965dc8a61a95d1f34015805",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXnHYBAAoJEHSBCwEjRsmm8wAIAIJ39R/U6/Dbn3VGCV7yDVY6\n/X/y7cUucflA0ZoAkeilwpL56m3acBSGF/aP9jFeF6Ahq9IGo+c0GW7wSMbZMGT9\nxfhFUG5EqOwv8Rg0/4K1Jq4svqrnjW4fqPKQSzB7s+8izuy1Cp/eGzeUPfP8rkp2\ntarJ2gTw5fdkptNa7ZoujuL4+oqUgKQpxmJsQ9PEcLhRZHaM9VgWBVO1c6SA3NJO\nc8NqGtXV10AMmdNjVeZxrm/7H9E80z5MlNMX2Nb8PujtA9aToFzdWKaSIzBwDcw1\naoZxlHzMkxmz4+eAKAHY8u6GsEKIPa1cawJ0Rhn5E4F6jMKwcF9MezyfO2eW1JE=\n=LdYo\n-----END PGP SIGNATURE-----",
        "payload": "tree 2a668fa98d96e2426a3ff0022660746b2de80011\nparent ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4\nparent a615386552f9981dc024cc4a0df758f8b0fda4d8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1469871613 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1469871617 +0200\n\nMerge #8238: [WIP][depends] ZeroMQ 4.1.5 && ZMQ on Windows\n\na615386 [depends] ZeroMQ 4.1.5 (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caf3ee061a86d89b965dc8a61a95d1f34015805",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6caf3ee061a86d89b965dc8a61a95d1f34015805",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caf3ee061a86d89b965dc8a61a95d1f34015805/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4"
      },
      {
        "sha": "a615386552f9981dc024cc4a0df758f8b0fda4d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a615386552f9981dc024cc4a0df758f8b0fda4d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a615386552f9981dc024cc4a0df758f8b0fda4d8"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 65,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ef58cfc40d19d775cd2b55b6baa2ca09fd2d304b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6caf3ee061a86d89b965dc8a61a95d1f34015805/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6caf3ee061a86d89b965dc8a61a95d1f34015805/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6caf3ee061a86d89b965dc8a61a95d1f34015805",
        "patch": "@@ -816,6 +816,15 @@ else\n     AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n   fi\n \n+  if test \"x$use_zmq\" = \"xyes\"; then\n+    dnl Assume libzmq was built for static linking\n+    case $host in\n+      *mingw*)\n+        ZMQ_CFLAGS=\"$ZMQ_CFLAGS -DZMQ_STATIC\"\n+      ;;\n+    esac\n+  fi\n+\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])"
      },
      {
        "sha": "ba2a05248c04e3a96af440feb40ab3cfc6bb42f9",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6caf3ee061a86d89b965dc8a61a95d1f34015805/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6caf3ee061a86d89b965dc8a61a95d1f34015805/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=6caf3ee061a86d89b965dc8a61a95d1f34015805",
        "patch": "@@ -1,6 +1,4 @@\n-packages:=boost openssl libevent\n-darwin_packages:=zeromq\n-linux_packages:=zeromq\n+packages:=boost openssl libevent zeromq\n native_packages := native_ccache native_comparisontool\n \n qt_native_packages = native_protobuf\n@@ -12,7 +10,6 @@ qt_i686_linux_packages:=$(qt_x86_64_linux_packages)\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-\n wallet_packages=bdb\n \n upnp_packages=miniupnpc"
      },
      {
        "sha": "01146c26f69bc426f351424bc2cdcfded19e0b65",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6caf3ee061a86d89b965dc8a61a95d1f34015805/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6caf3ee061a86d89b965dc8a61a95d1f34015805/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=6caf3ee061a86d89b965dc8a61a95d1f34015805",
        "patch": "@@ -1,15 +1,22 @@\n package=zeromq\n-$(package)_version=4.1.4\n-$(package)_download_path=http://download.zeromq.org\n+$(package)_version=4.1.5\n+$(package)_download_path=https://github.com/zeromq/zeromq4-1/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=e99f44fde25c2e4cb84ce440f87ca7d3fe3271c2b8cfbc67d55e4de25e6fe378\n+$(package)_sha256_hash=04aac57f081ffa3a2ee5ed04887be9e205df3a7ddade0027460b8042432bdbcf\n+$(package)_patches=9114d3957725acd34aa8b8d011585812f3369411.patch 9e6745c12e0b100cd38acecc16ce7db02905e27c.patch\n \n define $(package)_set_vars\n-  $(package)_config_opts=--without-documentation --disable-shared --without-libsodium\n+  $(package)_config_opts=--without-documentation --disable-shared --without-libsodium --disable-curve\n   $(package)_config_opts_linux=--with-pic\n   $(package)_cxxflags=-std=c++11\n endef\n \n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/9114d3957725acd34aa8b8d011585812f3369411.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch && \\\n+  ./autogen.sh\n+endef\n+\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "f704b3d94fda8a2bd90ac422c8b267b02bc60f5c",
        "filename": "depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6caf3ee061a86d89b965dc8a61a95d1f34015805/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6caf3ee061a86d89b965dc8a61a95d1f34015805/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9114d3957725acd34aa8b8d011585812f3369411.patch?ref=6caf3ee061a86d89b965dc8a61a95d1f34015805",
        "patch": "@@ -0,0 +1,22 @@\n+From 9114d3957725acd34aa8b8d011585812f3369411 Mon Sep 17 00:00:00 2001\n+From: Jeroen Ooms <jeroenooms@gmail.com>\n+Date: Tue, 20 Oct 2015 13:10:38 +0200\n+Subject: [PATCH] enable static libraries on mingw\n+\n+---\n+ configure.ac | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/configure.ac b/configure.ac\n+index 393505b..e92131a 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -265,7 +265,7 @@ case \"${host_os}\" in\n+         libzmq_dso_visibility=\"no\"\n+\n+         if test \"x$enable_static\" = \"xyes\"; then\n+-            AC_MSG_ERROR([Building static libraries is not supported under MinGW32])\n++            CPPFLAGS=\"-DZMQ_STATIC\"\n+         fi\n+\n+ \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      },
      {
        "sha": "9aff2c179a1982e6af89a410d06c42d1a0fbad90",
        "filename": "depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6caf3ee061a86d89b965dc8a61a95d1f34015805/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6caf3ee061a86d89b965dc8a61a95d1f34015805/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/9e6745c12e0b100cd38acecc16ce7db02905e27c.patch?ref=6caf3ee061a86d89b965dc8a61a95d1f34015805",
        "patch": "@@ -0,0 +1,22 @@\n+From 9e6745c12e0b100cd38acecc16ce7db02905e27c Mon Sep 17 00:00:00 2001\n+From: David Millard <dmillard10@gmail.com>\n+Date: Tue, 10 May 2016 13:53:53 -0700\n+Subject: [PATCH] Fix autotools for static MinGW builds\n+\n+---\n+ configure.ac | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git a/configure.ac b/configure.ac\n+index 5a0fa14..def6ea7 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -259,7 +259,7 @@ case \"${host_os}\" in\n+         libzmq_dso_visibility=\"no\"\n+\n+         if test \"x$enable_static\" = \"xyes\"; then\n+-            CPPFLAGS=\"-DZMQ_STATIC\"\n++            CPPFLAGS=\"-DZMQ_STATIC $CPPFLAGS\"\n+         fi\n+\n+ \t# Set FD_SETSIZE to 1024\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "29c2d99bc937c7288b64ab8778dc5f4fd74b4f82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWMyZDk5YmM5MzdjNzI4OGI2NGFiODc3OGRjNWY0ZmQ3NGI0Zjgy",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-30T18:27:48Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-07-30T18:27:48Z"
      },
      "message": "Make CWallet::fFileBacked private.",
      "tree": {
        "sha": "552162fab57dcc51ff3e3fdfe8bd6fe43258916e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/552162fab57dcc51ff3e3fdfe8bd6fe43258916e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29c2d99bc937c7288b64ab8778dc5f4fd74b4f82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c2d99bc937c7288b64ab8778dc5f4fd74b4f82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29c2d99bc937c7288b64ab8778dc5f4fd74b4f82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c2d99bc937c7288b64ab8778dc5f4fd74b4f82/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6caf3ee061a86d89b965dc8a61a95d1f34015805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caf3ee061a86d89b965dc8a61a95d1f34015805",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6caf3ee061a86d89b965dc8a61a95d1f34015805"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9dfb87e1448f52666b9ee09bd9ff008c15182048",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c2d99bc937c7288b64ab8778dc5f4fd74b4f82/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c2d99bc937c7288b64ab8778dc5f4fd74b4f82/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=29c2d99bc937c7288b64ab8778dc5f4fd74b4f82",
        "patch": "@@ -581,6 +581,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n+    bool fFileBacked;\n public:\n     /*\n      * Main wallet lock.\n@@ -591,7 +592,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     mutable CCriticalSection cs_wallet;\n \n-    bool fFileBacked;\n     std::string strWalletFile;\n \n     std::set<int64_t> setKeyPool;"
      }
    ]
  },
  {
    "sha": "cf2cecb18779ce83de9adebf382dff1c19b12840",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjJjZWNiMTg3NzljZTgzZGU5YWRlYmYzODJkZmYxYzE5YjEyODQw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-31T15:22:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-31T15:22:30Z"
      },
      "message": "Merge #8400: [qa]: enable rpcbind_test\n\n9bbb414 [qa]: enable rpcbind_test (whythat)\n0ff4375 [qa]: add parsing for '<host>:<port>' argument form to rpc_url() (whythat)",
      "tree": {
        "sha": "5f73cff389e83127b06c0ea0cc77b91cf91820d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f73cff389e83127b06c0ea0cc77b91cf91820d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf2cecb18779ce83de9adebf382dff1c19b12840",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXnhe2AAoJEC1/I3LlD+E34ikH/RNWjOoRTtSyDKqIAsp/ZEh6\ncJBO9k8cR1+B0UY2VAsUS0z3peiSPLbq5WLUAyRwVGqLLVWDRd0wMbIyFl3NW5ai\nVkct00LLGig8omCIRnrnMhkBhRNhTUDOnwWtBfRoDhb+XSLTG/KVqWU8c9a1tKyh\n7WMUQRYm4Mh74F2jW0H7yv1dtOwGvbZ0go8JsgVy53jkYCABteq7ogZgnlH9090G\nm26pzbX+8fDSqKaPRFLVeWy2YkE6XcavDTSIri7QB4CQzE/6BqbN4LXU/K/ctXH0\n4/SPerhmSrcZV7ksRCq4Jw+Eoyw31W8wi+m3PnuOuzOwWHtubIG0PMCIAb/1tk0=\n=IPA/\n-----END PGP SIGNATURE-----",
        "payload": "tree 5f73cff389e83127b06c0ea0cc77b91cf91820d2\nparent 6caf3ee061a86d89b965dc8a61a95d1f34015805\nparent 9bbb414b800cf71f93f15d2cb5d4cf32c72294e6\nauthor MarcoFalke <falke.marco@gmail.com> 1469978537 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1469978550 +0200\n\nMerge #8400: [qa]: enable rpcbind_test\n\n9bbb414 [qa]: enable rpcbind_test (whythat)\n0ff4375 [qa]: add parsing for '<host>:<port>' argument form to rpc_url() (whythat)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2cecb18779ce83de9adebf382dff1c19b12840",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2cecb18779ce83de9adebf382dff1c19b12840",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2cecb18779ce83de9adebf382dff1c19b12840/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6caf3ee061a86d89b965dc8a61a95d1f34015805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caf3ee061a86d89b965dc8a61a95d1f34015805",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6caf3ee061a86d89b965dc8a61a95d1f34015805"
      },
      {
        "sha": "9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6"
      }
    ],
    "stats": {
      "total": 231,
      "additions": 102,
      "deletions": 129
    },
    "files": [
      {
        "sha": "e3921cfbed32462d58cc0c674c4b5c5619bc694d",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf2cecb18779ce83de9adebf382dff1c19b12840/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf2cecb18779ce83de9adebf382dff1c19b12840/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=cf2cecb18779ce83de9adebf382dff1c19b12840",
        "patch": "@@ -159,7 +159,7 @@\n     'txn_clone.py --mineblock',\n     'forknotify.py',\n     'invalidateblock.py',\n-#    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n+    'rpcbind_test.py',\n     'smartfees.py',\n     'maxblocksinflight.py',\n     'p2p-acceptblock.py',"
      },
      {
        "sha": "bf1cc8712611a7e962fc5dc0cfb9e70a7545ed59",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 92,
        "deletions": 127,
        "changes": 219,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf2cecb18779ce83de9adebf382dff1c19b12840/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf2cecb18779ce83de9adebf382dff1c19b12840/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=cf2cecb18779ce83de9adebf382dff1c19b12840",
        "patch": "@@ -5,143 +5,108 @@\n \n # Test for -rpcbind, as well as -rpcallowip and -rpcconnect\n \n-# TODO extend this test from the test framework (like all other tests)\n-\n import tempfile\n import traceback\n \n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.netutil import *\n \n-def run_bind_test(tmpdir, allow_ips, connect_to, addresses, expected):\n-    '''\n-    Start a node with requested rpcallowip and rpcbind parameters,\n-    then try to connect, and check if the set of bound addresses\n-    matches the expected set.\n-    '''\n-    expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n-    base_args = ['-disablewallet', '-nolisten']\n-    if allow_ips:\n-        base_args += ['-rpcallowip=' + x for x in allow_ips]\n-    binds = ['-rpcbind='+addr for addr in addresses]\n-    nodes = start_nodes(self.num_nodes, tmpdir, [base_args + binds], connect_to)\n-    try:\n-        pid = bitcoind_processes[0].pid\n-        assert_equal(set(get_bind_addrs(pid)), set(expected))\n-    finally:\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-\n-def run_allowip_test(tmpdir, allow_ips, rpchost, rpcport):\n-    '''\n-    Start a node with rpcwallow IP, and request getinfo\n-    at a non-localhost IP.\n-    '''\n-    base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-    nodes = start_nodes(self.num_nodes, tmpdir, [base_args])\n-    try:\n-        # connect to node through non-loopback interface\n-        url = \"http://rt:rt@%s:%d\" % (rpchost, rpcport,)\n-        node = get_rpc_proxy(url, 1)\n-        node.getinfo()\n-    finally:\n-        node = None # make sure connection will be garbage collected and closed\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-\n-\n-def run_test(tmpdir):\n-    assert(sys.platform.startswith('linux')) # due to OS-specific network stats queries, this test works only on Linux\n-    # find the first non-loopback interface for testing\n-    non_loopback_ip = None\n-    for name,ip in all_interfaces():\n-        if ip != '127.0.0.1':\n-            non_loopback_ip = ip\n-            break\n-    if non_loopback_ip is None:\n-        assert(not 'This test requires at least one non-loopback IPv4 interface')\n-    print(\"Using interface %s for testing\" % non_loopback_ip)\n+class RPCBindTest(BitcoinTestFramework):\n \n-    defaultport = rpc_port(0)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n-    # check default without rpcallowip (IPv4 and IPv6 localhost)\n-    run_bind_test(tmpdir, None, '127.0.0.1', [],\n-        [('127.0.0.1', defaultport), ('::1', defaultport)])\n-    # check default with rpcallowip (IPv6 any)\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1', [],\n-        [('::0', defaultport)])\n-    # check only IPv4 localhost (explicit)\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1', ['127.0.0.1'],\n-        [('127.0.0.1', defaultport)])\n-    # check only IPv4 localhost (explicit) with alternative port\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171'],\n-        [('127.0.0.1', 32171)])\n-    # check only IPv4 localhost (explicit) with multiple alternative ports on same host\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171', '127.0.0.1:32172'],\n-        [('127.0.0.1', 32171), ('127.0.0.1', 32172)])\n-    # check only IPv6 localhost (explicit)\n-    run_bind_test(tmpdir, ['[::1]'], '[::1]', ['[::1]'],\n-        [('::1', defaultport)])\n-    # check both IPv4 and IPv6 localhost (explicit)\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1', ['127.0.0.1', '[::1]'],\n-        [('127.0.0.1', defaultport), ('::1', defaultport)])\n-    # check only non-loopback interface\n-    run_bind_test(tmpdir, [non_loopback_ip], non_loopback_ip, [non_loopback_ip],\n-        [(non_loopback_ip, defaultport)])\n-\n-    # Check that with invalid rpcallowip, we are denied\n-    run_allowip_test(tmpdir, [non_loopback_ip], non_loopback_ip, defaultport)\n-    try:\n-        run_allowip_test(tmpdir, ['1.1.1.1'], non_loopback_ip, defaultport)\n-        assert(not 'Connection not denied by rpcallowip as expected')\n-    except ValueError:\n+    def setup_network(self):\n         pass\n \n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        run_test(options.tmpdir)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(e))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n+    def setup_nodes(self):\n+        pass\n \n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n+    def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n+        '''\n+        Start a node with requested rpcallowip and rpcbind parameters,\n+        then try to connect, and check if the set of bound addresses\n+        matches the expected set.\n+        '''\n+        expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n+        base_args = ['-disablewallet', '-nolisten']\n+        if allow_ips:\n+            base_args += ['-rpcallowip=' + x for x in allow_ips]\n+        binds = ['-rpcbind='+addr for addr in addresses]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n+        try:\n+            pid = bitcoind_processes[0].pid\n+            assert_equal(set(get_bind_addrs(pid)), set(expected))\n+        finally:\n+            stop_nodes(self.nodes)\n+            wait_bitcoinds()\n+\n+    def run_allowip_test(self, allow_ips, rpchost, rpcport):\n+        '''\n+        Start a node with rpcwallow IP, and request getinfo\n+        at a non-localhost IP.\n+        '''\n+        base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        try:\n+            # connect to node through non-loopback interface\n+            node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+            node.getinfo()\n+        finally:\n+            node = None # make sure connection will be garbage collected and closed\n+            stop_nodes(self.nodes)\n+            wait_bitcoinds()\n+\n+    def run_test(self):\n+        # due to OS-specific network stats queries, this test works only on Linux\n+        assert(sys.platform.startswith('linux'))\n+        # find the first non-loopback interface for testing\n+        non_loopback_ip = None\n+        for name,ip in all_interfaces():\n+            if ip != '127.0.0.1':\n+                non_loopback_ip = ip\n+                break\n+        if non_loopback_ip is None:\n+            assert(not 'This test requires at least one non-loopback IPv4 interface')\n+        print(\"Using interface %s for testing\" % non_loopback_ip)\n+\n+        defaultport = rpc_port(0)\n+\n+        # check default without rpcallowip (IPv4 and IPv6 localhost)\n+        self.run_bind_test(None, '127.0.0.1', [],\n+            [('127.0.0.1', defaultport), ('::1', defaultport)])\n+        # check default with rpcallowip (IPv6 any)\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1', [],\n+            [('::0', defaultport)])\n+        # check only IPv4 localhost (explicit)\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1'],\n+            [('127.0.0.1', defaultport)])\n+        # check only IPv4 localhost (explicit) with alternative port\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171'],\n+            [('127.0.0.1', 32171)])\n+        # check only IPv4 localhost (explicit) with multiple alternative ports on same host\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171', '127.0.0.1:32172'],\n+            [('127.0.0.1', 32171), ('127.0.0.1', 32172)])\n+        # check only IPv6 localhost (explicit)\n+        self.run_bind_test(['[::1]'], '[::1]', ['[::1]'],\n+            [('::1', defaultport)])\n+        # check both IPv4 and IPv6 localhost (explicit)\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1', '[::1]'],\n+            [('127.0.0.1', defaultport), ('::1', defaultport)])\n+        # check only non-loopback interface\n+        self.run_bind_test([non_loopback_ip], non_loopback_ip, [non_loopback_ip],\n+            [(non_loopback_ip, defaultport)])\n+\n+        # Check that with invalid rpcallowip, we are denied\n+        self.run_allowip_test([non_loopback_ip], non_loopback_ip, defaultport)\n+        try:\n+            self.run_allowip_test(['1.1.1.1'], non_loopback_ip, defaultport)\n+            assert(not 'Connection not denied by rpcallowip as expected')\n+        except JSONRPCException:\n+            pass\n \n if __name__ == '__main__':\n-    main()\n+    RPCBindTest ().main ()"
      },
      {
        "sha": "8aa34265c54471a3b15de761a6370517d99fab0a",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf2cecb18779ce83de9adebf382dff1c19b12840/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf2cecb18779ce83de9adebf382dff1c19b12840/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=cf2cecb18779ce83de9adebf382dff1c19b12840",
        "patch": "@@ -171,7 +171,15 @@ def rpc_auth_pair(n):\n \n def rpc_url(i, rpchost=None):\n     rpc_u, rpc_p = rpc_auth_pair(i)\n-    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, rpchost or '127.0.0.1', rpc_port(i))\n+    host = '127.0.0.1'\n+    port = rpc_port(i)\n+    if rpchost:\n+        parts = rpchost.split(':')\n+        if len(parts) == 2:\n+            host, port = parts\n+        else:\n+            host = rpchost\n+    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n def wait_for_bitcoind_start(process, url, i):\n     '''"
      }
    ]
  },
  {
    "sha": "b8db185952c815444b7052092472ef9af3a42e89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGRiMTg1OTUyYzgxNTQ0NGI3MDUyMDkyNDcyZWY5YWYzYTQyZTg5",
    "commit": {
      "author": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2016-07-29T16:52:48Z"
      },
      "committer": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2016-07-31T17:43:45Z"
      },
      "message": "Update README.md\n\nUpdating documentation for adding new unit test files\n\nRemoving unneeded sentence from README\n\nRemoving uint160_tests.cpp as it DNE\n\nFormatting command line instructions to use ``\n\nfixing 80 char formatting issue in README\n\nfixing more nits",
      "tree": {
        "sha": "0479bd10c71ca373a2ee30190d3b9ff56ac24d78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0479bd10c71ca373a2ee30190d3b9ff56ac24d78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8db185952c815444b7052092472ef9af3a42e89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8db185952c815444b7052092472ef9af3a42e89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8db185952c815444b7052092472ef9af3a42e89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8db185952c815444b7052092472ef9af3a42e89/comments",
    "author": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbcb8fd884335134065143047e9798dc8ec13445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcb8fd884335134065143047e9798dc8ec13445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbcb8fd884335134065143047e9798dc8ec13445"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "61462642bfb9c8df1fd708ded994a84d077f122b",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8db185952c815444b7052092472ef9af3a42e89/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8db185952c815444b7052092472ef9af3a42e89/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=b8db185952c815444b7052092472ef9af3a42e89",
        "patch": "@@ -5,18 +5,15 @@ sense to simply use this framework rather than require developers to\n configure some other framework (we want as few impediments to creating\n unit tests as possible).\n \n-The build system is setup to compile an executable called \"test_bitcoin\"\n+The build system is setup to compile an executable called `test_bitcoin`\n that runs all of the unit tests.  The main source file is called\n-test_bitcoin.cpp, which simply includes other files that contain the\n-actual unit tests (outside of a couple required preprocessor\n-directives).  The pattern is to create one test file for each class or\n-source file for which you want to create unit tests.  The file naming\n-convention is \"<source_filename>_tests.cpp\" and such files should wrap\n-their tests in a test suite called \"<source_filename>_tests\".  For an\n-examples of this pattern, examine uint160_tests.cpp and\n-uint256_tests.cpp.\n-\n-Add the source files to /src/Makefile.test.include to add them to the build.\n+test_bitcoin.cpp. To add a new unit test file to our test suite you need \n+to add the file to `src/Makefile.test.include`. The pattern is to create \n+one test file for each class or source file for which you want to create \n+unit tests.  The file naming convention is `<source_filename>_tests.cpp` \n+and such files should wrap their tests in a test suite \n+called `<source_filename>_tests`. For an example of this pattern, \n+examine `uint256_tests.cpp`.\n \n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n@@ -31,5 +28,5 @@ example, to run just the getarg_tests verbosely:\n \n     test_bitcoin --run_test=getarg_tests/doubledash\n \n-Run  test_bitcoin --help   for the full list.\n+Run `test_bitcoin --help` for the full list.\n "
      }
    ]
  },
  {
    "sha": "f798b891bcecea9548eedacae70eeb9906c1ddbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzk4Yjg5MWJjZWNlYTk1NDhlZWRhY2FlNzBlZWI5OTA2YzFkZGJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-31T22:05:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-31T22:09:14Z"
      },
      "message": "Merge #8346: Mempool: Use Consensus::CheckTxInputs direclty over main::CheckInputs\n\na6cc299 Mempool: Use Consensus::CheckTxInputs direclty over main::CheckInputs (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "cb888e5b25611578736e4c8a1a871b3228bdcd0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb888e5b25611578736e4c8a1a871b3228bdcd0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f798b891bcecea9548eedacae70eeb9906c1ddbf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJXnncKAAoJENuhpnN5oakxEEAQAKAdHd/lnHTIuTqZaSFD7mcz\nCYHeJHE4Q8xxY7YuPuy4MmeFVlt/8KPVSKqPQsU+W63u/2TimTTp0u5XrgBsKt2r\niuLcYdmxKpdzHwsI4gGD667gOWZlAOLk1KpM37vCdgpRNPNP5bl0WrvzKjxPrOJ9\n97YK1LP5uuXziyLc3VD8CLw4BEL96g2j+qsaoeNRAAAN3bTU0vhpmGXP6R4dTnqU\njLjntiV1yjxMk157TY7LO+IHfJ6t4+i5DIpjkl/0IxI7ghs5zq++IC4n7cy+Rbg+\nTPDBk2s+ZgKfSeScMNdvqiYApHhXxyvdZVcMltfgpjvik6pQPxefb9axmD+8OjNK\nCwMvmtRiw/JpRes5gKe5EqqmxzuAh29QnpfXyf+8ecg5rIeOgbjwesaEcnbqzQzT\nZGzf0YC+vKpD8wwtrMf4v6mZWqIYH5zYFgxldHADUbHqpk1nhqgIxtd2YSRe05dL\ngyJp5DRPshAh/rqcdXB7U0Cnr3gdEv4K1FOJtw3AkkTGiON9J5XOoe7+eUlzQt0x\nGOevZHjODarCcNWLnpWbFUbM1iQeZeNwTX8HUTGE4xwRutu820ARaQnjA3lmr+9N\nB/xJyEgm6UMOqx0TMW9xF7B1QeYQ/03dp30mRGvOoFHo273zqksi3ie8iQttxSev\nysPqPQwWblKmun7cPQVk\n=EnsB\n-----END PGP SIGNATURE-----",
        "payload": "tree cb888e5b25611578736e4c8a1a871b3228bdcd0a\nparent cf2cecb18779ce83de9adebf382dff1c19b12840\nparent a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1470002702 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1470002954 +0200\n\nMerge #8346: Mempool: Use Consensus::CheckTxInputs direclty over main::CheckInputs\n\na6cc299 Mempool: Use Consensus::CheckTxInputs direclty over main::CheckInputs (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f798b891bcecea9548eedacae70eeb9906c1ddbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f798b891bcecea9548eedacae70eeb9906c1ddbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f798b891bcecea9548eedacae70eeb9906c1ddbf/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf2cecb18779ce83de9adebf382dff1c19b12840",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2cecb18779ce83de9adebf382dff1c19b12840",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2cecb18779ce83de9adebf382dff1c19b12840"
      },
      {
        "sha": "a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6cc299541fc9df5af010ce63eb1dd34d8c4b6e2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 20,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7f337b80ba94053a60449e2a314e8f7e262a493a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f798b891bcecea9548eedacae70eeb9906c1ddbf/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f798b891bcecea9548eedacae70eeb9906c1ddbf/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f798b891bcecea9548eedacae70eeb9906c1ddbf",
        "patch": "@@ -352,9 +352,22 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n \n+/** Transaction validation functions */\n+\n /** Context-independent validity checks */\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n \n+namespace Consensus {\n+\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n+\n+} // namespace Consensus\n+\n /**\n  * Check if transaction is final and can be included in a block with the\n  * specified height and time. Consensus critical."
      },
      {
        "sha": "b631c48484891547148cd7959a5537bfdcd5e676",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f798b891bcecea9548eedacae70eeb9906c1ddbf/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f798b891bcecea9548eedacae70eeb9906c1ddbf/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f798b891bcecea9548eedacae70eeb9906c1ddbf",
        "patch": "@@ -657,6 +657,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n+    const int64_t nSpendHeight = GetSpendHeight(mempoolDuplicate);\n \n     LOCK(cs);\n     list<const CTxMemPoolEntry*> waitingOnDependants;\n@@ -737,7 +738,9 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             waitingOnDependants.push_back(&(*it));\n         else {\n             CValidationState state;\n-            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n+            bool fCheckResult = tx.IsCoinBase() ||\n+                Consensus::CheckTxInputs(tx, state, mempoolDuplicate, nSpendHeight);\n+            assert(fCheckResult);\n             UpdateCoins(tx, mempoolDuplicate, 1000000);\n         }\n     }\n@@ -751,7 +754,9 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n+            bool fCheckResult = entry->GetTx().IsCoinBase() ||\n+                Consensus::CheckTxInputs(entry->GetTx(), state, mempoolDuplicate, nSpendHeight);\n+            assert(fCheckResult);\n             UpdateCoins(entry->GetTx(), mempoolDuplicate, 1000000);\n             stepsSinceLastRemove = 0;\n         }"
      }
    ]
  },
  {
    "sha": "8ea7d31e384975019733b5778feabbd9955c79d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWE3ZDMxZTM4NDk3NTAxOTczM2I1Nzc4ZmVhYmJkOTk1NWM3OWQ4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-31T23:39:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-31T23:53:29Z"
      },
      "message": "Merge #8413: Trivial: pass Consensus::Params& instead of CChainParams& in ContextualCheckBlock\n\nc8664ee Trivial: pass Consensus::Params& instead of CChainParams& in ContextualCheckBlock (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "a849ed5b58bc86bd4c808c09997f1ea0f2777546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a849ed5b58bc86bd4c808c09997f1ea0f2777546"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ea7d31e384975019733b5778feabbd9955c79d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJXno95AAoJENuhpnN5oakx3n4QAIQRCnwXzCL8UWqk922Bq4a0\nGqyH+02OwoLMEYUwCJbDQ2X/jgOdEtiFJBPTQy/pC2qES2T6LDJQG8E3h8OvbfNp\nYV9KHPdgkqPbG8X5OB3qBDT7KCBAC1zXjH0vuQOsWM3CcvkJlEIfBZEq3DOLAHKZ\nwKENb6+emU6MONZYQaleFAurftiiHAsczxe9huC+FvBMXgy6lpcKQkh79drbxYiV\n/dSdzQZMttCd3H1zu6heOolSmF9V9Ok73WqicNHfwJxG9EJJrYnxq4TuDXo0KlIw\nIgEYzsx0YkryqHjo00vhazQqTmjuzxGFELf5VpCq/VcgOyBl0rpcIOqX18jsxkk0\nKtUIE5AR5NCZdUd64p0yAEPk4iRPn1S8ODY2W0Q/YlDRnjLIzSVHZi4TLHQCmysL\nFUKjarCQJ95YakdxfbmS9Ypodhb+5J/vRsvw9s+tFfAriqtxHB3OU/1cJqPTa9GF\nXX+RcqtlT8jOSJxuQNR0SEijWvoyH5E3RzZ3LrFpS9dZlAUkOiaVFlINrhPCkt+Q\nu2ilkPxJZH2XP1IbHzP4vUh+FBSTKeadpjC0eWIgwrxLjFTs78Z7YXRrtLANjiKE\n9XnFUV/oBiIf3p8XVllfn6YtQ32DVm7sA2iQ1k0Q51FmmC2UOyJEjvlBpqpo0TnE\ncbyEAISjWV9eCkPqOZMB\n=Z4RV\n-----END PGP SIGNATURE-----",
        "payload": "tree a849ed5b58bc86bd4c808c09997f1ea0f2777546\nparent f798b891bcecea9548eedacae70eeb9906c1ddbf\nparent c8664eeac75fb87282dc69049cfa23d583742629\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1470008359 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1470009209 +0200\n\nMerge #8413: Trivial: pass Consensus::Params& instead of CChainParams& in ContextualCheckBlock\n\nc8664ee Trivial: pass Consensus::Params& instead of CChainParams& in ContextualCheckBlock (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ea7d31e384975019733b5778feabbd9955c79d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ea7d31e384975019733b5778feabbd9955c79d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ea7d31e384975019733b5778feabbd9955c79d8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f798b891bcecea9548eedacae70eeb9906c1ddbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f798b891bcecea9548eedacae70eeb9906c1ddbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f798b891bcecea9548eedacae70eeb9906c1ddbf"
      },
      {
        "sha": "c8664eeac75fb87282dc69049cfa23d583742629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8664eeac75fb87282dc69049cfa23d583742629",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8664eeac75fb87282dc69049cfa23d583742629"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "46118fff81eb0f7aef15283d17212c1abedb8417",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ea7d31e384975019733b5778feabbd9955c79d8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ea7d31e384975019733b5778feabbd9955c79d8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8ea7d31e384975019733b5778feabbd9955c79d8",
        "patch": "@@ -3525,10 +3525,9 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n     int nLockTimeFlags = 0;\n@@ -3689,7 +3688,8 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if ((!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime())) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n+    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n@@ -3780,7 +3780,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ContextualCheckBlock(block, state, pindexPrev))\n+    if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;"
      },
      {
        "sha": "d4d70c018027d5a3a9de394c15eeb61e602f3356",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ea7d31e384975019733b5778feabbd9955c79d8/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ea7d31e384975019733b5778feabbd9955c79d8/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8ea7d31e384975019733b5778feabbd9955c79d8",
        "patch": "@@ -459,7 +459,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()"
      }
    ]
  },
  {
    "sha": "b9c1cd81848da9de1baf9c2f29c19c50e549de13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWMxY2Q4MTg0OGRhOWRlMWJhZjljMmYyOWMxOWM1MGU1NDlkZTEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-31T23:57:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-01T00:06:42Z"
      },
      "message": "Merge #8152: [Wallet] Remove CWalletDB* parameter from CWallet::AddToWallet\n\n5723bb4 Remove unused pwalletdb from CWallet::AddToWallet (Patrick Strateman)\n867f842 Remove CWalletDB* parameter from CWallet::AddToWallet (Patrick Strateman)\n00f09c9 Split CWallet::AddToWallet into AddToWallet and LoadToWallet. (Patrick Strateman)",
      "tree": {
        "sha": "020e20e50a06705db1d36c622def7e6f2b65de31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/020e20e50a06705db1d36c622def7e6f2b65de31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9c1cd81848da9de1baf9c2f29c19c50e549de13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJXnpKSAAoJENuhpnN5oakxihAQAOQQGFFKWPGGESsigXtyqrew\nStX7mcB3ueCvDVhuaIVCGuQcA6Xj7XiLEm20TJnAbhqSKqxoeHbYBRoDIyH/aSlt\nwucWDMZ+d4sumIEtJ0dbZURsvjhzzB5ey17nq664pC1OelGBQe08etWlaH5y21r1\naZTK65pZyesfBj2NZ7K0+6utrjnpXy2dHsvWletYARn3IK12KooZXnE3MzSzMhHE\n7620eELhITLiIldtYbgZwQ4/1g0+fixzpj8W5BccDWb0tha3hKg8Ce98WgiD2/iR\nkZMhEL5cJFliNrZeXB0R5Izv9xn+xhrq64ml3GmXqOw1CdGt7FOy/FRy+k79P7FW\n2AEMT31uZ9xRvIWgUgBXWVpEhrPAqsk0KnTVrwBhojspR2W4xpedfsxKW9o1xlLU\nlkXwoxN6k9z9nqryu/pemE22LPOo9JKz1Po+kWDBjkGBI7oBHf3mY8vak2eYatSN\nN0Q+26kIa5fgVUyiBCaUEza0unj91SrD0Y6lxEI3rRt/aQXPPnkfHxDmL9XcbmE+\nh4fNbogmwHM9lHwyU5usxWvWDDjWyTICqX2/RGf4M6W042u17Ubxr4ckXt3xqNeR\nKS0/Q79nTp6MdWKefMrzzdDSqCulj8nkY1cSwvV35YA1iQHzz1I5kaz/ok2QEFtM\nOjnDZ9imp7BCgpqqUsPC\n=0U2W\n-----END PGP SIGNATURE-----",
        "payload": "tree 020e20e50a06705db1d36c622def7e6f2b65de31\nparent 8ea7d31e384975019733b5778feabbd9955c79d8\nparent 5723bb44ce2c6bb14114aa7f211160702a47ac91\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1470009472 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1470010002 +0200\n\nMerge #8152: [Wallet] Remove CWalletDB* parameter from CWallet::AddToWallet\n\n5723bb4 Remove unused pwalletdb from CWallet::AddToWallet (Patrick Strateman)\n867f842 Remove CWalletDB* parameter from CWallet::AddToWallet (Patrick Strateman)\n00f09c9 Split CWallet::AddToWallet into AddToWallet and LoadToWallet. (Patrick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c1cd81848da9de1baf9c2f29c19c50e549de13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9c1cd81848da9de1baf9c2f29c19c50e549de13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c1cd81848da9de1baf9c2f29c19c50e549de13/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ea7d31e384975019733b5778feabbd9955c79d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ea7d31e384975019733b5778feabbd9955c79d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ea7d31e384975019733b5778feabbd9955c79d8"
      },
      {
        "sha": "5723bb44ce2c6bb14114aa7f211160702a47ac91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5723bb44ce2c6bb14114aa7f211160702a47ac91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5723bb44ce2c6bb14114aa7f211160702a47ac91"
      }
    ],
    "stats": {
      "total": 249,
      "additions": 121,
      "deletions": 128
    },
    "files": [
      {
        "sha": "fe8b53ceb0c1af8de6d4d506ef613b8491790e48",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b9c1cd81848da9de1baf9c2f29c19c50e549de13",
        "patch": "@@ -309,8 +309,7 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     if (pwalletMain->IsMine(tx)) {\n-        CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\", false);\n-        pwalletMain->AddToWallet(wtx, false, &walletdb);\n+        pwalletMain->AddToWallet(wtx, false);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "a6cada46a226c83d47d0db47e1828358bfd27efb",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=b9c1cd81848da9de1baf9c2f29c19c50e549de13",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     pwalletMain->AddAccountingEntry(ae, walletdb);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n@@ -100,7 +100,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         *static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n     }\n-    pwalletMain->AddToWallet(wtx, false, &walletdb);\n+    pwalletMain->AddToWallet(wtx);\n     vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;"
      },
      {
        "sha": "ee9254050ce7842c56a58451455af85456197e2c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 121,
        "changes": 235,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b9c1cd81848da9de1baf9c2f29c19c50e549de13",
        "patch": "@@ -741,138 +741,143 @@ void CWallet::MarkDirty()\n     }\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n {\n+    LOCK(cs_wallet);\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\", fFlushOnClose);\n+\n     uint256 hash = wtxIn.GetHash();\n \n-    if (fFromLoadWallet)\n+    // Inserts only if not already there, returns tx inserted or tx found\n+    pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n+    CWalletTx& wtx = (*ret.first).second;\n+    wtx.BindWallet(this);\n+    bool fInsertedNew = ret.second;\n+    if (fInsertedNew)\n     {\n-        mapWallet[hash] = wtxIn;\n-        CWalletTx& wtx = mapWallet[hash];\n-        wtx.BindWallet(this);\n+        wtx.nTimeReceived = GetAdjustedTime();\n+        wtx.nOrderPos = IncOrderPosNext(&walletdb);\n         wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n-        AddToSpends(hash);\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n-            if (mapWallet.count(txin.prevout.hash)) {\n-                CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n-                if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n-                    MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n-                }\n-            }\n-        }\n-    }\n-    else\n-    {\n-        LOCK(cs_wallet);\n-        // Inserts only if not already there, returns tx inserted or tx found\n-        pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n-        CWalletTx& wtx = (*ret.first).second;\n-        wtx.BindWallet(this);\n-        bool fInsertedNew = ret.second;\n-        if (fInsertedNew)\n-        {\n-            wtx.nTimeReceived = GetAdjustedTime();\n-            wtx.nOrderPos = IncOrderPosNext(pwalletdb);\n-            wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n-\n-            wtx.nTimeSmart = wtx.nTimeReceived;\n-            if (!wtxIn.hashUnset())\n+\n+        wtx.nTimeSmart = wtx.nTimeReceived;\n+        if (!wtxIn.hashUnset())\n+        {\n+            if (mapBlockIndex.count(wtxIn.hashBlock))\n             {\n-                if (mapBlockIndex.count(wtxIn.hashBlock))\n+                int64_t latestNow = wtx.nTimeReceived;\n+                int64_t latestEntry = 0;\n                 {\n-                    int64_t latestNow = wtx.nTimeReceived;\n-                    int64_t latestEntry = 0;\n+                    // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+                    int64_t latestTolerated = latestNow + 300;\n+                    const TxItems & txOrdered = wtxOrdered;\n+                    for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n                     {\n-                        // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-                        int64_t latestTolerated = latestNow + 300;\n-                        const TxItems & txOrdered = wtxOrdered;\n-                        for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                        CWalletTx *const pwtx = (*it).second.first;\n+                        if (pwtx == &wtx)\n+                            continue;\n+                        CAccountingEntry *const pacentry = (*it).second.second;\n+                        int64_t nSmartTime;\n+                        if (pwtx)\n                         {\n-                            CWalletTx *const pwtx = (*it).second.first;\n-                            if (pwtx == &wtx)\n-                                continue;\n-                            CAccountingEntry *const pacentry = (*it).second.second;\n-                            int64_t nSmartTime;\n-                            if (pwtx)\n-                            {\n-                                nSmartTime = pwtx->nTimeSmart;\n-                                if (!nSmartTime)\n-                                    nSmartTime = pwtx->nTimeReceived;\n-                            }\n-                            else\n-                                nSmartTime = pacentry->nTime;\n-                            if (nSmartTime <= latestTolerated)\n-                            {\n-                                latestEntry = nSmartTime;\n-                                if (nSmartTime > latestNow)\n-                                    latestNow = nSmartTime;\n-                                break;\n-                            }\n+                            nSmartTime = pwtx->nTimeSmart;\n+                            if (!nSmartTime)\n+                                nSmartTime = pwtx->nTimeReceived;\n+                        }\n+                        else\n+                            nSmartTime = pacentry->nTime;\n+                        if (nSmartTime <= latestTolerated)\n+                        {\n+                            latestEntry = nSmartTime;\n+                            if (nSmartTime > latestNow)\n+                                latestNow = nSmartTime;\n+                            break;\n                         }\n                     }\n-\n-                    int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n-                    wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n                 }\n-                else\n-                    LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n-                             wtxIn.GetHash().ToString(),\n-                             wtxIn.hashBlock.ToString());\n+\n+                int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n+                wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n             }\n-            AddToSpends(hash);\n+            else\n+                LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n+                         wtxIn.GetHash().ToString(),\n+                         wtxIn.hashBlock.ToString());\n         }\n+        AddToSpends(hash);\n+    }\n \n-        bool fUpdated = false;\n-        if (!fInsertedNew)\n+    bool fUpdated = false;\n+    if (!fInsertedNew)\n+    {\n+        // Merge\n+        if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n         {\n-            // Merge\n-            if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n-            {\n-                wtx.hashBlock = wtxIn.hashBlock;\n-                fUpdated = true;\n-            }\n-            // If no longer abandoned, update\n-            if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n-            {\n-                wtx.hashBlock = wtxIn.hashBlock;\n-                fUpdated = true;\n-            }\n-            if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n-            {\n-                wtx.nIndex = wtxIn.nIndex;\n-                fUpdated = true;\n-            }\n-            if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n-            {\n-                wtx.fFromMe = wtxIn.fFromMe;\n-                fUpdated = true;\n-            }\n+            wtx.hashBlock = wtxIn.hashBlock;\n+            fUpdated = true;\n+        }\n+        // If no longer abandoned, update\n+        if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n+        {\n+            wtx.hashBlock = wtxIn.hashBlock;\n+            fUpdated = true;\n         }\n+        if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n+        {\n+            wtx.nIndex = wtxIn.nIndex;\n+            fUpdated = true;\n+        }\n+        if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n+        {\n+            wtx.fFromMe = wtxIn.fFromMe;\n+            fUpdated = true;\n+        }\n+    }\n \n-        //// debug print\n-        LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+    //// debug print\n+    LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n-        // Write to disk\n-        if (fInsertedNew || fUpdated)\n-            if (!pwalletdb->WriteTx(wtx))\n-                return false;\n+    // Write to disk\n+    if (fInsertedNew || fUpdated)\n+        if (!walletdb.WriteTx(wtx))\n+            return false;\n \n-        // Break debit/credit balance caches:\n-        wtx.MarkDirty();\n+    // Break debit/credit balance caches:\n+    wtx.MarkDirty();\n \n-        // Notify UI of new or updated transaction\n-        NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n+    // Notify UI of new or updated transaction\n+    NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n-        // notify an external script when a wallet transaction comes in or is updated\n-        std::string strCmd = GetArg(\"-walletnotify\", \"\");\n+    // notify an external script when a wallet transaction comes in or is updated\n+    std::string strCmd = GetArg(\"-walletnotify\", \"\");\n \n-        if ( !strCmd.empty())\n-        {\n-            boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-            boost::thread t(runCommand, strCmd); // thread runs free\n-        }\n+    if ( !strCmd.empty())\n+    {\n+        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    }\n+\n+    return true;\n+}\n \n+bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n+{\n+    uint256 hash = wtxIn.GetHash();\n+\n+    mapWallet[hash] = wtxIn;\n+    CWalletTx& wtx = mapWallet[hash];\n+    wtx.BindWallet(this);\n+    wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n+    AddToSpends(hash);\n+    BOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+        if (mapWallet.count(txin.prevout.hash)) {\n+            CWalletTx& prevtx = mapWallet[txin.prevout.hash];\n+            if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n+                MarkConflicted(prevtx.hashBlock, wtx.GetHash());\n+            }\n+        }\n     }\n+\n     return true;\n }\n \n@@ -909,11 +914,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n             if (pblock)\n                 wtx.SetMerkleBranch(*pblock);\n \n-            // Do not flush the wallet here for performance reasons\n-            // this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n-            CWalletDB walletdb(strWalletFile, \"r+\", false);\n-\n-            return AddToWallet(wtx, false, &walletdb);\n+            return AddToWallet(wtx, false);\n         }\n     }\n     return false;\n@@ -2446,17 +2447,12 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         LOCK2(cs_main, cs_wallet);\n         LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.ToString());\n         {\n-            // This is only to keep the database open to defeat the auto-flush for the\n-            // duration of this scope.  This is the only place where this optimization\n-            // maybe makes sense; please don't do it anywhere else.\n-            CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,\"r+\") : NULL;\n-\n             // Take key pair from key pool so it won't be used again\n             reservekey.KeepKey();\n \n             // Add tx to wallet, because if it has change it's also ours,\n             // otherwise just for transaction history.\n-            AddToWallet(wtxNew, false, pwalletdb);\n+            AddToWallet(wtxNew);\n \n             // Notify that old coins are spent\n             set<CWalletTx*> setCoins;\n@@ -2466,9 +2462,6 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n                 coin.BindWallet(this);\n                 NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n             }\n-\n-            if (fFileBacked)\n-                delete pwalletdb;\n         }\n \n         // Track how many getdata requests our transaction gets"
      },
      {
        "sha": "236ef85114e1a4afd6b80701c041f4b5886f3f27",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b9c1cd81848da9de1baf9c2f29c19c50e549de13",
        "patch": "@@ -729,7 +729,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n+    bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);"
      },
      {
        "sha": "543522ca6485c111c3ed048bc42a9ca35fa2a07d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9c1cd81848da9de1baf9c2f29c19c50e549de13/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b9c1cd81848da9de1baf9c2f29c19c50e549de13",
        "patch": "@@ -400,7 +400,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (wtx.nOrderPos == -1)\n                 wss.fAnyUnordered = true;\n \n-            pwallet->AddToWallet(wtx, true, NULL);\n+            pwallet->LoadToWallet(wtx);\n         }\n         else if (strType == \"acentry\")\n         {"
      }
    ]
  },
  {
    "sha": "c7e05b35ab0a791c7a8e2d863e716fdec6f3f671",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2UwNWIzNWFiMGE3OTFjN2E4ZTJkODYzZTcxNmZkZWM2ZjNmNjcx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-01T00:07:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-01T00:12:47Z"
      },
      "message": "Merge #8432: Make CWallet::fFileBacked private.\n\n29c2d99 Make CWallet::fFileBacked private. (Patrick Strateman)",
      "tree": {
        "sha": "35e71b7fc36174ad2f87d6e4b4027cfaa9b9ff02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35e71b7fc36174ad2f87d6e4b4027cfaa9b9ff02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJXnpP/AAoJENuhpnN5oakxKRcP/3JEtHuOnZvXdH6HCI4yvYkI\n7hwgvA2YA9tBjEM9QT27yR41xvYgXaohQNTEpWGCgJyYDwc0J954BdCG6jyMN5JZ\nRcj3vRbesCnJz6zYShKAGYExZPRisKrToyUDbkrXLATRqWF4ocZCu0NydVDp2A5H\n8+0sd3+YEe8L0pG55eOKpyhh8MNLJctzjCzJNa8JJd0KCkHPjl8jQAIy7dZ/oym6\n35kriMJ+3a9R798XcIxntckkgQsqixGnMLRXU0gZI8B6Xy9nyYMkI3qfkiJpHBbI\njlc9ggOH4gLWSpAl7AnpSVp/upYL7nAi1bcP7OaNavJvdRvRQjaAcdVdymaqKAVK\nv5dzKG+QnhVQvuzSOJsRNdD71IFFibwZJSIvw+kpw5mYYMr3H0dvCVYOyZvKrKsT\n3HX5jllo86Elj+IqN7aF7pI8ehY5ObNpr7h+iPWLc945DAccTuRunN/+QfScKB6C\nWddoPReEd8V4/ByezOJ9r1Lf8StdoEG8ktxXaUVs6Qro1MxbcWugxJATpZ3JB32O\nsPis88lKMNK8X/6h1/KcqFGpi+5Fp6ByALrErgI2s7ndKPv7fqHQ/YUvwP4qtdKf\nfeVCCLOaA6uQ5rgk5VHn3cX084V2xmK+iSE6Ylq9HM5VgcGMJ6tjVEi0SRV+xC4x\ngdFbn8TyLCNMxvwsMzO5\n=szmz\n-----END PGP SIGNATURE-----",
        "payload": "tree 35e71b7fc36174ad2f87d6e4b4027cfaa9b9ff02\nparent b9c1cd81848da9de1baf9c2f29c19c50e549de13\nparent 29c2d99bc937c7288b64ab8778dc5f4fd74b4f82\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1470010036 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1470010367 +0200\n\nMerge #8432: Make CWallet::fFileBacked private.\n\n29c2d99 Make CWallet::fFileBacked private. (Patrick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9c1cd81848da9de1baf9c2f29c19c50e549de13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9c1cd81848da9de1baf9c2f29c19c50e549de13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9c1cd81848da9de1baf9c2f29c19c50e549de13"
      },
      {
        "sha": "29c2d99bc937c7288b64ab8778dc5f4fd74b4f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c2d99bc937c7288b64ab8778dc5f4fd74b4f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29c2d99bc937c7288b64ab8778dc5f4fd74b4f82"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "50c94ccfbcd959fe7ca657be08bceea5584b3767",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c7e05b35ab0a791c7a8e2d863e716fdec6f3f671",
        "patch": "@@ -581,6 +581,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n+    bool fFileBacked;\n public:\n     /*\n      * Main wallet lock.\n@@ -591,7 +592,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     mutable CCriticalSection cs_wallet;\n \n-    bool fFileBacked;\n     std::string strWalletFile;\n \n     std::set<int64_t> setKeyPool;"
      }
    ]
  },
  {
    "sha": "7fdbce9de43c600776e00a2f2042d302cfa4e411",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmRiY2U5ZGU0M2M2MDA3NzZlMDBhMmYyMDQyZDMwMmNmYTRlNDEx",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-08-01T01:30:32Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-08-01T01:30:32Z"
      },
      "message": "[doc] Increase recommended memory in gitian build guide",
      "tree": {
        "sha": "32cb7a1f9ac47e8493cd57a2a32df996cba638a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32cb7a1f9ac47e8493cd57a2a32df996cba638a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fdbce9de43c600776e00a2f2042d302cfa4e411",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJXnqY4AAoJEC7rn1zAlSbBjhkP/0WGv5Rd37QjyQl2b+IcyYEP\n5oYaxIe5SVCXWJaX30paICBdj82Sfg4xnAjhbc8Hwdh4kJPuvECmdL6mOtPsDUes\nW7sZ0LZEf2KAPkqVGetwHqQwucqHDbSJeAoCP5dwbvu4u4y0dNltHQIoQdj6IkFB\nydZIkpjZ4WX63EYyOWWmEiEpPV3AQb/Tsxd/rctAkaCygApVPeJ09c3xLA+YDA+v\nv/eTVm9J7o8wIHWyk4TgNgveJtWgTrGXqX0sDc6+ptXuGJFJSU4oWq0vbax2EPMq\n3d7J8JCQH/Gcw1IXxBkk9Y3fKfhTA/iYJnRibZQCnbrBDX3BiCPVdLPgPlAiWZrU\n7ANmXJ0GJyuW3BKONuyzwQXENsWPW5eEr7K0FfAhyKhtZAtTDSPvnWglTDjip0yT\nkl5eKuiPPpLzmN32PH77KMmTLgXsTEBgn7LJhK7ArwwjPlx8/rtyc3wBWuKl3J0p\nMEoPHR9VH18k7o1jo4npF5oCCzJV6rsUB35zLMFOx9kMBcnl2R/qsA9dmECBjYNK\n/JrqeIAcI6wqRdjv42Dpt9aiMIAsFxJJaudNf/Qp1D2UpHnH8l8UxG9CFQQ1+zQ8\nbdGBwIa6alIbdVs+G84FBTboGvJWtIq/RmqCr6U9yPqT9PEeiI82rIf+A6OIHPFB\nvfHWVtKDh7MCHILrLsY9\n=ZsFm\n-----END PGP SIGNATURE-----",
        "payload": "tree 32cb7a1f9ac47e8493cd57a2a32df996cba638a0\nparent c7e05b35ab0a791c7a8e2d863e716fdec6f3f671\nauthor fanquake <fanquake@gmail.com> 1470015032 +0800\ncommitter fanquake <fanquake@gmail.com> 1470015032 +0800\n\n[doc] Increase recommended memory in gitian build guide\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdbce9de43c600776e00a2f2042d302cfa4e411",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fdbce9de43c600776e00a2f2042d302cfa4e411",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdbce9de43c600776e00a2f2042d302cfa4e411/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e05b35ab0a791c7a8e2d863e716fdec6f3f671",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "938f92ff1281fab3c4707368b881ff40905fb55b",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fdbce9de43c600776e00a2f2042d302cfa4e411/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fdbce9de43c600776e00a2f2042d302cfa4e411/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=7fdbce9de43c600776e00a2f2042d302cfa4e411",
        "patch": "@@ -55,7 +55,7 @@ In the VirtualBox GUI click \"New\" and choose the following parameters in the wiz\n \n ![](gitian-building/create_vm_memsize.png)\n \n-- Memory Size: at least 1024MB, anything less will really slow down the build.\n+- Memory Size: at least 3000MB, anything less and the build might not complete.\n \n ![](gitian-building/create_vm_hard_disk.png)\n "
      },
      {
        "sha": "6f42cda73f3cabb02e39ae0309ac67f419a168c7",
        "filename": "doc/gitian-building/create_vm_memsize.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fdbce9de43c600776e00a2f2042d302cfa4e411/doc/gitian-building/create_vm_memsize.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fdbce9de43c600776e00a2f2042d302cfa4e411/doc/gitian-building/create_vm_memsize.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_memsize.png?ref=7fdbce9de43c600776e00a2f2042d302cfa4e411"
      }
    ]
  },
  {
    "sha": "ea268747b6d417a406977e9b4931badce29b9d7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTI2ODc0N2I2ZDQxN2E0MDY5NzdlOWI0OTMxYmFkY2UyOWI5ZDdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-01T08:42:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-01T08:42:31Z"
      },
      "message": "Merge #8419: Enable size accounting in mining unit tests\n\n8bfd708 Enable size accounting in mining unit tests (Suhas Daftuar)",
      "tree": {
        "sha": "15edbf00f8e52d30fa72415b87409e3200f350c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15edbf00f8e52d30fa72415b87409e3200f350c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea268747b6d417a406977e9b4931badce29b9d7a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXnwt3AAoJEHSBCwEjRsmmIywH/0HaIZXywl5ItRoh/Z707SGP\npNafc7DqPVLaEFEs5Tl1G9AexkHC+KbsHAh0H4gFpKY0wKR8QWfWsoElnHf3UJuf\nmesdL7Khxqro7a3LH7Y7cJPe3i33bMhGY1axUhbh3rtyMmJtEhHABYJMASAWWJBU\nH6nGOuRdYbJHeYAGscPcI48him/95KD0OFFWcxeAsDOA26Mjvs5ymMbSRsKjCSaR\nflsf+lhHHJPOvDBtdF4XV2bEcucKWksWf1FZdeqNMLkIkiXuZ8TWUxYGEoTEbhkj\nO9Jdh5duLFl4nLB5505aFCjRgpA3a1DcrtUwUbk0sj6F+amPMgW8pl1n279Xj0U=\n=eQ2W\n-----END PGP SIGNATURE-----",
        "payload": "tree 15edbf00f8e52d30fa72415b87409e3200f350c4\nparent c7e05b35ab0a791c7a8e2d863e716fdec6f3f671\nparent 8bfd70817bf8b8b07b81660e47c88dd122b7423f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470040947 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470040951 +0200\n\nMerge #8419: Enable size accounting in mining unit tests\n\n8bfd708 Enable size accounting in mining unit tests (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea268747b6d417a406977e9b4931badce29b9d7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea268747b6d417a406977e9b4931badce29b9d7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea268747b6d417a406977e9b4931badce29b9d7a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e05b35ab0a791c7a8e2d863e716fdec6f3f671",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e05b35ab0a791c7a8e2d863e716fdec6f3f671"
      },
      {
        "sha": "8bfd70817bf8b8b07b81660e47c88dd122b7423f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bfd70817bf8b8b07b81660e47c88dd122b7423f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bfd70817bf8b8b07b81660e47c88dd122b7423f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "15fceb963a59f1c81165fd31e5e41ee02e83c3ae",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea268747b6d417a406977e9b4931badce29b9d7a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea268747b6d417a406977e9b4931badce29b9d7a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=ea268747b6d417a406977e9b4931badce29b9d7a",
        "patch": "@@ -181,9 +181,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n-    // Disable size accounting (CPFP does not support it)\n-    mapArgs[\"-blockmaxsize\"] = strprintf(\"%u\", MAX_BLOCK_SERIALIZED_SIZE);\n-\n+    // Note that by default, these tests run with size accounting enabled.\n     const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;"
      }
    ]
  },
  {
    "sha": "fa4439d3554435bdf0ef47861835f10d41bcdc1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ0MzlkMzU1NDQzNWJkZjBlZjQ3ODYxODM1ZjEwZDQxYmNkYzFh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-07-31T13:35:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-01T10:33:20Z"
      },
      "message": "[qa] Rework hd wallet dump test",
      "tree": {
        "sha": "239f620b66c354cd915d16dbe436c45036a11712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/239f620b66c354cd915d16dbe436c45036a11712"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4439d3554435bdf0ef47861835f10d41bcdc1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4439d3554435bdf0ef47861835f10d41bcdc1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4439d3554435bdf0ef47861835f10d41bcdc1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4439d3554435bdf0ef47861835f10d41bcdc1a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea268747b6d417a406977e9b4931badce29b9d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea268747b6d417a406977e9b4931badce29b9d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea268747b6d417a406977e9b4931badce29b9d7a"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 64,
      "deletions": 80
    },
    "files": [
      {
        "sha": "6028d2c20b19178b60b224cb8b144389a12a47ef",
        "filename": "qa/rpc-tests/wallet-dump.py",
        "status": "modified",
        "additions": 64,
        "deletions": 80,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4439d3554435bdf0ef47861835f10d41bcdc1a/qa/rpc-tests/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4439d3554435bdf0ef47861835f10d41bcdc1a/qa/rpc-tests/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-dump.py?ref=fa4439d3554435bdf0ef47861835f10d41bcdc1a",
        "patch": "@@ -4,9 +4,52 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import os\n-import shutil\n+from test_framework.util import (start_nodes, start_node, assert_equal, bitcoind_processes)\n+\n+\n+def read_dump(file_name, addrs, hd_master_addr_old):\n+    \"\"\"\n+    Read the given dump, count the addrs that match, count change and reserve.\n+    Also check that the old hd_master is inactive\n+    \"\"\"\n+    with open(file_name) as inputfile:\n+        found_addr = 0\n+        found_addr_chg = 0\n+        found_addr_rsv = 0\n+        hd_master_addr_ret = None\n+        for line in inputfile:\n+            # only read non comment lines\n+            if line[0] != \"#\" and len(line) > 10:\n+                # split out some data\n+                key_label, comment = line.split(\"#\")\n+                # key = key_label.split(\" \")[0]\n+                keytype = key_label.split(\" \")[2]\n+                if len(comment) > 1:\n+                    addr_keypath = comment.split(\" addr=\")[1]\n+                    addr = addr_keypath.split(\" \")[0]\n+                    keypath = None\n+                    if keytype == \"inactivehdmaster=1\":\n+                        # ensure the old master is still available\n+                        assert(hd_master_addr_old == addr)\n+                    elif keytype == \"hdmaster=1\":\n+                        # ensure we have generated a new hd master key\n+                        assert(hd_master_addr_old != addr)\n+                        hd_master_addr_ret = addr\n+                    else:\n+                        keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n+\n+                    # count key types\n+                    for addrObj in addrs:\n+                        if addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                            found_addr += 1\n+                            break\n+                        elif keytype == \"change=1\":\n+                            found_addr_chg += 1\n+                            break\n+                        elif keytype == \"reserve=1\":\n+                            found_addr_rsv += 1\n+                            break\n+        return found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n \n \n class WalletDumpTest(BitcoinTestFramework):\n@@ -15,106 +58,47 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n+        self.extra_args = [[\"-keypool=90\"]]\n \n     def setup_network(self, split=False):\n-        extra_args = [[\"-keypool=100\"]]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n \n-        #generate 20 addresses to compare against the dump\n+        # generate 20 addresses to compare against the dump\n         test_addr_count = 20\n         addrs = []\n         for i in range(0,test_addr_count):\n             addr = self.nodes[0].getnewaddress()\n             vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n             addrs.append(vaddr)\n+        # Should be a no-op:\n+        self.nodes[0].keypoolrefill()\n \n         # dump unencrypted wallet\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n \n-        #open file\n-        inputfile = open(tmpdir + \"/node0/wallet.unencrypted.dump\")\n-        found_addr = 0\n-        found_addr_chg = 0\n-        found_addr_rsv = 0\n-        hdmasteraddr = \"\"\n-        for line in inputfile:\n-            #only read non comment lines\n-            if line[0] != \"#\" and len(line) > 10:\n-                #split out some data\n-                keyLabel, comment = line.split(\"#\")\n-                key = keyLabel.split(\" \")[0]\n-                keytype = keyLabel.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addrKeypath = comment.split(\" addr=\")[1]\n-                    addr = addrKeypath.split(\" \")[0]\n-                    keypath = \"\"\n-                    if keytype != \"hdmaster=1\":\n-                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n-                    else:\n-                        #keep hd master for later comp.\n-                        hdmasteraddr = addr\n-\n-                    #count key types\n-                    for addrObj in addrs:\n-                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n-                            found_addr+=1\n-                            break\n-                        elif (keytype == \"change=1\"):\n-                            found_addr_chg+=1\n-                            break\n-                        elif (keytype == \"reserve=1\"):\n-                            found_addr_rsv+=1\n-                            break\n-        assert(found_addr == test_addr_count) #all keys must be in the dump\n-        assert(found_addr_chg == 50) #50 blocks where mined\n-        assert(found_addr_rsv == 100) #100 reserve keys (keypool)\n+        found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n+            read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, None)\n+        assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n+        assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n+        assert_equal(found_addr_rsv, 90 + 1)  # keypool size (TODO: fix off-by-one)\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n-        self.nodes[0] = start_node(0, self.options.tmpdir)\n+        self.nodes[0] = start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n+        # Should be a no-op:\n+        self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n \n-        #open dump done with an encrypted wallet\n-        inputfile = open(tmpdir + \"/node0/wallet.encrypted.dump\")\n-        found_addr = 0\n-        found_addr_chg = 0\n-        found_addr_rsv = 0\n-        for line in inputfile:\n-            if line[0] != \"#\" and len(line) > 10:\n-                keyLabel, comment = line.split(\"#\")\n-                key = keyLabel.split(\" \")[0]\n-                keytype = keyLabel.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addrKeypath = comment.split(\" addr=\")[1]\n-                    addr = addrKeypath.split(\" \")[0]\n-                    keypath = \"\"\n-                    if keytype != \"hdmaster=1\":\n-                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n-                    else:\n-                        #ensure we have generated a new hd master key\n-                        assert(hdmasteraddr != addr)\n-                    if keytype == \"inactivehdmaster=1\":\n-                        #ensure the old master is still available\n-                        assert(hdmasteraddr == addr)\n-                    for addrObj in addrs:\n-                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n-                            found_addr+=1\n-                            break\n-                        elif (keytype == \"change=1\"):\n-                            found_addr_chg+=1\n-                            break\n-                        elif (keytype == \"reserve=1\"):\n-                            found_addr_rsv+=1\n-                            break\n-\n-        assert(found_addr == test_addr_count)\n-        assert(found_addr_chg == 150) #old reserve keys are marked as change now\n-        assert(found_addr_rsv == 100) #keypool size\n+        found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_enc = \\\n+            read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, hd_master_addr_unenc)\n+        assert_equal(found_addr, test_addr_count)\n+        assert_equal(found_addr_chg, 90 + 1 + 50)  # old reserve keys are marked as change now\n+        assert_equal(found_addr_rsv, 90 + 1)  # keypool size (TODO: fix off-by-one)\n \n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      }
    ]
  },
  {
    "sha": "2c517b3928a68c6e36b18262081a401a741cd4cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzUxN2IzOTI4YTY4YzZlMzZiMTgyNjIwODFhNDAxYTc0MWNkNGNk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-08-01T16:40:38Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-08-01T16:40:38Z"
      },
      "message": "Fix p2p-feefilter.py for changed tx relay behavior",
      "tree": {
        "sha": "5e765a817b0fe3dfed67db659fe99e953ed7d25e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e765a817b0fe3dfed67db659fe99e953ed7d25e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c517b3928a68c6e36b18262081a401a741cd4cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c517b3928a68c6e36b18262081a401a741cd4cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c517b3928a68c6e36b18262081a401a741cd4cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c517b3928a68c6e36b18262081a401a741cd4cd/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea268747b6d417a406977e9b4931badce29b9d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea268747b6d417a406977e9b4931badce29b9d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea268747b6d417a406977e9b4931badce29b9d7a"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "96d99d38a73c13cbf43b99e8dd8cca57684b25e4",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c517b3928a68c6e36b18262081a401a741cd4cd/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c517b3928a68c6e36b18262081a401a741cd4cd/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=2c517b3928a68c6e36b18262081a401a741cd4cd",
        "patch": "@@ -62,6 +62,7 @@ def setup_network(self):\n \n     def run_test(self):\n         node1 = self.nodes[1]\n+        node0 = self.nodes[0]\n         # Get out of IBD\n         node1.generate(1)\n         sync_blocks(self.nodes)\n@@ -91,8 +92,17 @@ def run_test(self):\n         node1.settxfee(Decimal(\"0.00010000\"))\n         [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         sync_mempools(self.nodes) # must be sure node 0 has received all txs \n-        time.sleep(10) # wait 10 secs to be sure its doesn't relay any\n-        assert(allInvsMatch([], test_node))\n+\n+        # Send one transaction from node0 that should be received, so that we\n+        # we can sync the test on receipt (if node1's txs were relayed, they'd\n+        # be received by the time this node0 tx is received). This is\n+        # unfortunately reliant on the current relay behavior where we batch up\n+        # to 35 entries in an inv, which means that when this next transaction\n+        # is eligible for relay, the prior transactions from node1 are eligible\n+        # as well.\n+        node0.settxfee(Decimal(\"0.00020000\"))\n+        txids = [node0.sendtoaddress(node0.getnewaddress(), 1)]\n+        assert(allInvsMatch(txids, test_node))\n         test_node.clear_invs()\n \n         # Remove fee filter and check that txs are received again"
      }
    ]
  },
  {
    "sha": "63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2MwM2RkNDFjYzBlNWQwNWQ0MjFmZDdhNTc0ZmY1M2ExZGJiOTJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-02T06:25:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-02T06:26:57Z"
      },
      "message": "Merge #8418: Add tests for compact blocks\n\n45c7ddd Add p2p test for BIP 152 (compact blocks) (Suhas Daftuar)\n9a22a6c Add support for compactblocks to mininode (Suhas Daftuar)\na8689fd Tests: refactor compact size serialization in mininode (Suhas Daftuar)\n9c8593d Implement SipHash in Python (Pieter Wuille)\n56c87e9 Allow changing BIP9 parameters on regtest (Suhas Daftuar)",
      "tree": {
        "sha": "ee7b1c0a551dfd14a66a4cc7c1e4d931fc7edd6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee7b1c0a551dfd14a66a4cc7c1e4d931fc7edd6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXoD0xAAoJEHSBCwEjRsmmYgIH/Aif5OE1sXa3Kq6X+vBgZM62\n6+KFDQ2GMQJZ/rwN5+CjWHccbOnTlDeNhtFkSDcStmffvVJOO1MyY8gSpT3IZ1gq\nhJjJ4JJXPdM9dEcFAmrKx60gBF1w6aNOxlAwa83th2pegzcI0gW7Ao8muKZo7cNx\niCDgSeuTdB4D0vCs3237P1PylEercvXPLHsoPbX69WF9u88DZ8zQQeQmudlON7u1\n796hLnR7gHg6x2g1gJes+zlD1IPQVaqlOl/l13PnBxKidDqJBp5sW9gqmQ/zGa+1\nWo9UFGfdHuMeSZ8qGVLMWPsn7Xc9uG9x4dy4VuTyF/3x+MMwIq/cNuevyDqwl3Y=\n=iB68\n-----END PGP SIGNATURE-----",
        "payload": "tree ee7b1c0a551dfd14a66a4cc7c1e4d931fc7edd6a\nparent ea268747b6d417a406977e9b4931badce29b9d7a\nparent 45c7ddd109465e03551f5b39c2e650c243b4a078\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470119125 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470119217 +0200\n\nMerge #8418: Add tests for compact blocks\n\n45c7ddd Add p2p test for BIP 152 (compact blocks) (Suhas Daftuar)\n9a22a6c Add support for compactblocks to mininode (Suhas Daftuar)\na8689fd Tests: refactor compact size serialization in mininode (Suhas Daftuar)\n9c8593d Implement SipHash in Python (Pieter Wuille)\n56c87e9 Allow changing BIP9 parameters on regtest (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea268747b6d417a406977e9b4931badce29b9d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea268747b6d417a406977e9b4931badce29b9d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea268747b6d417a406977e9b4931badce29b9d7a"
      },
      {
        "sha": "45c7ddd109465e03551f5b39c2e650c243b4a078",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c7ddd109465e03551f5b39c2e650c243b4a078",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45c7ddd109465e03551f5b39c2e650c243b4a078"
      }
    ],
    "stats": {
      "total": 1102,
      "additions": 1026,
      "deletions": 76
    },
    "files": [
      {
        "sha": "f65a3eefc3937eea7bc7aa62e8a0a5999365c132",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "patch": "@@ -142,6 +142,7 @@\n     'segwit.py',\n     'importprunedfunds.py',\n     'signmessages.py',\n+    'p2p-compactblocks.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "7fe7ecc16c6e19ae3fb4e9ece144f28fcee60740",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "added",
        "additions": 608,
        "deletions": 0,
        "changes": 608,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "patch": "@@ -0,0 +1,608 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.siphash import siphash256\n+from test_framework.script import CScript, OP_TRUE\n+\n+'''\n+CompactBlocksTest -- test compact blocks (BIP 152)\n+'''\n+\n+\n+# TestNode: A peer we use to send messages to bitcoind, and store responses.\n+class TestNode(SingleNodeConnCB):\n+    def __init__(self):\n+        SingleNodeConnCB.__init__(self)\n+        self.last_sendcmpct = None\n+        self.last_headers = None\n+        self.last_inv = None\n+        self.last_cmpctblock = None\n+        self.block_announced = False\n+        self.last_getdata = None\n+        self.last_getblocktxn = None\n+        self.last_block = None\n+        self.last_blocktxn = None\n+\n+    def on_sendcmpct(self, conn, message):\n+        self.last_sendcmpct = message\n+\n+    def on_block(self, conn, message):\n+        self.last_block = message\n+\n+    def on_cmpctblock(self, conn, message):\n+        self.last_cmpctblock = message\n+        self.block_announced = True\n+\n+    def on_headers(self, conn, message):\n+        self.last_headers = message\n+        self.block_announced = True\n+\n+    def on_inv(self, conn, message):\n+        self.last_inv = message\n+        self.block_announced = True\n+\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_getblocktxn(self, conn, message):\n+        self.last_getblocktxn = message\n+\n+    def on_blocktxn(self, conn, message):\n+        self.last_blocktxn = message\n+\n+    # Requires caller to hold mininode_lock\n+    def received_block_announcement(self):\n+        return self.block_announced\n+\n+    def clear_block_announcement(self):\n+        with mininode_lock:\n+            self.block_announced = False\n+            self.last_inv = None\n+            self.last_headers = None\n+            self.last_cmpctblock = None\n+\n+    def get_headers(self, locator, hashstop):\n+        msg = msg_getheaders()\n+        msg.locator.vHave = locator\n+        msg.hashstop = hashstop\n+        self.connection.send_message(msg)\n+\n+    def send_header_for_blocks(self, new_blocks):\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in new_blocks]\n+        self.send_message(headers_message)\n+\n+\n+class CompactBlocksTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.utxos = []\n+\n+    def setup_network(self):\n+        self.nodes = []\n+\n+        # Turn off segwit in this test, as compact blocks don't currently work\n+        # with segwit.  (After BIP 152 is updated to support segwit, we can\n+        # test behavior with and without segwit enabled by adding a second node\n+        # to the test.)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [[\"-debug\", \"-logtimemicros=1\", \"-bip9params=segwit:0:0\"]])\n+\n+    def build_block_on_tip(self):\n+        height = self.nodes[0].getblockcount()\n+        tip = self.nodes[0].getbestblockhash()\n+        mtp = self.nodes[0].getblockheader(tip)['mediantime']\n+        block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n+        block.solve()\n+        return block\n+\n+    # Create 10 more anyone-can-spend utxo's for testing.\n+    def make_utxos(self):\n+        block = self.build_block_on_tip()\n+        self.test_node.send_and_ping(msg_block(block))\n+        assert(int(self.nodes[0].getbestblockhash(), 16) == block.sha256)\n+        self.nodes[0].generate(100)\n+\n+        total_value = block.vtx[0].vout[0].nValue\n+        out_value = total_value // 10\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(block.vtx[0].sha256, 0), b''))\n+        for i in range(10):\n+            tx.vout.append(CTxOut(out_value, CScript([OP_TRUE])))\n+        tx.rehash()\n+\n+        block2 = self.build_block_on_tip()\n+        block2.vtx.append(tx)\n+        block2.hashMerkleRoot = block2.calc_merkle_root()\n+        block2.solve()\n+        self.test_node.send_and_ping(msg_block(block2))\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block2.sha256)\n+        self.utxos.extend([[tx.sha256, i, out_value] for i in range(10)])\n+        return\n+\n+    # Test \"sendcmpct\":\n+    # - No compact block announcements or getdata(MSG_CMPCT_BLOCK) unless\n+    #   sendcmpct is sent.\n+    # - If sendcmpct is sent with version > 0, the message is ignored.\n+    # - If sendcmpct is sent with boolean 0, then block announcements are not\n+    #   made with compact blocks.\n+    # - If sendcmpct is then sent with boolean 1, then new block announcements\n+    #   are made with compact blocks.\n+    def test_sendcmpct(self):\n+        print(\"Testing SENDCMPCT p2p message... \")\n+\n+        # Make sure we get a version 0 SENDCMPCT message from our peer\n+        def received_sendcmpct():\n+            return (self.test_node.last_sendcmpct is not None)\n+        got_message = wait_until(received_sendcmpct, timeout=30)\n+        assert(got_message)\n+        assert_equal(self.test_node.last_sendcmpct.version, 1)\n+\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+\n+        def check_announcement_of_new_block(node, peer, predicate):\n+            self.test_node.clear_block_announcement()\n+            node.generate(1)\n+            got_message = wait_until(peer.received_block_announcement, timeout=30)\n+            assert(got_message)\n+            with mininode_lock:\n+                assert(predicate)\n+\n+        # We shouldn't get any block announcements via cmpctblock yet.\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None)\n+\n+        # Try one more time, this time after requesting headers.\n+        self.test_node.clear_block_announcement()\n+        self.test_node.get_headers(locator=[tip], hashstop=0)\n+        wait_until(self.test_node.received_block_announcement, timeout=30)\n+        self.test_node.clear_block_announcement()\n+\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None and self.test_node.last_inv is not None)\n+\n+        # Now try a SENDCMPCT message with too-high version\n+        sendcmpct = msg_sendcmpct()\n+        sendcmpct.version = 2\n+        self.test_node.send_message(sendcmpct)\n+\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None)\n+\n+        # Now try a SENDCMPCT message with valid version, but announce=False\n+        self.test_node.send_message(msg_sendcmpct())\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None)\n+\n+        # Finally, try a SENDCMPCT message with announce=True\n+        sendcmpct.version = 1\n+        sendcmpct.announce = True\n+        self.test_node.send_message(sendcmpct)\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is not None)\n+\n+        # Try one more time\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is not None)\n+\n+        # Try one more time, after turning on sendheaders\n+        self.test_node.send_message(msg_sendheaders())\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is not None)\n+\n+        # Now turn off announcements\n+        sendcmpct.announce = False\n+        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda: self.test_node.last_cmpctblock is None and self.test_node.last_headers is not None)\n+\n+    # This test actually causes bitcoind to (reasonably!) disconnect us, so do this last.\n+    def test_invalid_cmpctblock_message(self):\n+        print(\"Testing invalid index in cmpctblock message...\")\n+        self.nodes[0].generate(101)\n+        block = self.build_block_on_tip()\n+\n+        cmpct_block = P2PHeaderAndShortIDs()\n+        cmpct_block.header = CBlockHeader(block)\n+        cmpct_block.prefilled_txn_length = 1\n+        # This index will be too high\n+        prefilled_txn = PrefilledTransaction(1, block.vtx[0])\n+        cmpct_block.prefilled_txn = [prefilled_txn]\n+        self.test_node.send_and_ping(msg_cmpctblock(cmpct_block))\n+        assert(int(self.nodes[0].getbestblockhash(), 16) == block.hashPrevBlock)\n+\n+    # Compare the generated shortids to what we expect based on BIP 152, given\n+    # bitcoind's choice of nonce.\n+    def test_compactblock_construction(self):\n+        print(\"Testing compactblock headers and shortIDs are correct...\")\n+\n+        # Generate a bunch of transactions.\n+        self.nodes[0].generate(101)\n+        num_transactions = 25\n+        address = self.nodes[0].getnewaddress()\n+        for i in range(num_transactions):\n+            self.nodes[0].sendtoaddress(address, 0.1)\n+\n+        # Now mine a block, and look at the resulting compact block.\n+        self.test_node.clear_block_announcement()\n+        block_hash = int(self.nodes[0].generate(1)[0], 16)\n+\n+        # Store the raw block in our internal format.\n+        block = FromHex(CBlock(), self.nodes[0].getblock(\"%02x\" % block_hash, False))\n+        [tx.calc_sha256() for tx in block.vtx]\n+        block.rehash()\n+\n+        # Don't care which type of announcement came back for this test; just\n+        # request the compact block if we didn't get one yet.\n+        wait_until(self.test_node.received_block_announcement, timeout=30)\n+\n+        with mininode_lock:\n+            if self.test_node.last_cmpctblock is None:\n+                self.test_node.clear_block_announcement()\n+                inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n+                self.test_node.send_message(msg_getdata([inv]))\n+\n+        wait_until(self.test_node.received_block_announcement, timeout=30)\n+\n+        # Now we should have the compactblock\n+        header_and_shortids = None\n+        with mininode_lock:\n+            assert(self.test_node.last_cmpctblock is not None)\n+            # Convert the on-the-wire representation to absolute indexes\n+            header_and_shortids = HeaderAndShortIDs(self.test_node.last_cmpctblock.header_and_shortids)\n+\n+        # Check that we got the right block!\n+        header_and_shortids.header.calc_sha256()\n+        assert_equal(header_and_shortids.header.sha256, block_hash)\n+\n+        # Make sure the prefilled_txn appears to have included the coinbase\n+        assert(len(header_and_shortids.prefilled_txn) >= 1)\n+        assert_equal(header_and_shortids.prefilled_txn[0].index, 0)\n+\n+        # Check that all prefilled_txn entries match what's in the block.\n+        for entry in header_and_shortids.prefilled_txn:\n+            entry.tx.calc_sha256()\n+            assert_equal(entry.tx.sha256, block.vtx[entry.index].sha256)\n+\n+        # Check that the cmpctblock message announced all the transactions.\n+        assert_equal(len(header_and_shortids.prefilled_txn) + len(header_and_shortids.shortids), len(block.vtx))\n+\n+        # And now check that all the shortids are as expected as well.\n+        # Determine the siphash keys to use.\n+        [k0, k1] = header_and_shortids.get_siphash_keys()\n+\n+        index = 0\n+        while index < len(block.vtx):\n+            if (len(header_and_shortids.prefilled_txn) > 0 and\n+                    header_and_shortids.prefilled_txn[0].index == index):\n+                # Already checked prefilled transactions above\n+                header_and_shortids.prefilled_txn.pop(0)\n+            else:\n+                shortid = calculate_shortid(k0, k1, block.vtx[index].sha256)\n+                assert_equal(shortid, header_and_shortids.shortids[0])\n+                header_and_shortids.shortids.pop(0)\n+            index += 1\n+\n+    # Test that bitcoind requests compact blocks when we announce new blocks\n+    # via header or inv, and that responding to getblocktxn causes the block\n+    # to be successfully reconstructed.\n+    def test_compactblock_requests(self):\n+        print(\"Testing compactblock requests... \")\n+\n+        # Try announcing a block with an inv or header, expect a compactblock\n+        # request\n+        for announce in [\"inv\", \"header\"]:\n+            block = self.build_block_on_tip()\n+            with mininode_lock:\n+                self.test_node.last_getdata = None\n+\n+            if announce == \"inv\":\n+                self.test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n+            else:\n+                self.test_node.send_header_for_blocks([block])\n+            success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=30)\n+            assert(success)\n+            assert_equal(len(self.test_node.last_getdata.inv), 1)\n+            assert_equal(self.test_node.last_getdata.inv[0].type, 4)\n+            assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+\n+            # Send back a compactblock message that omits the coinbase\n+            comp_block = HeaderAndShortIDs()\n+            comp_block.header = CBlockHeader(block)\n+            comp_block.nonce = 0\n+            comp_block.shortids = [1]  # this is useless, and wrong\n+            self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+            # Expect a getblocktxn message.\n+            with mininode_lock:\n+                assert(self.test_node.last_getblocktxn is not None)\n+                absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+            assert_equal(absolute_indexes, [0])  # should be a coinbase request\n+\n+            # Send the coinbase, and verify that the tip advances.\n+            msg = msg_blocktxn()\n+            msg.block_transactions.blockhash = block.sha256\n+            msg.block_transactions.transactions = [block.vtx[0]]\n+            self.test_node.send_and_ping(msg)\n+            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+    # Create a chain of transactions from given utxo, and add to a new block.\n+    def build_block_with_transactions(self, utxo, num_transactions):\n+        block = self.build_block_on_tip()\n+\n+        for i in range(num_transactions):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(utxo[0], utxo[1]), b''))\n+            tx.vout.append(CTxOut(utxo[2] - 1000, CScript([OP_TRUE])))\n+            tx.rehash()\n+            utxo = [tx.sha256, 0, tx.vout[0].nValue]\n+            block.vtx.append(tx)\n+\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block\n+\n+    # Test that we only receive getblocktxn requests for transactions that the\n+    # node needs, and that responding to them causes the block to be\n+    # reconstructed.\n+    def test_getblocktxn_requests(self):\n+        print(\"Testing getblocktxn requests...\")\n+\n+        # First try announcing compactblocks that won't reconstruct, and verify\n+        # that we receive getblocktxn messages back.\n+        utxo = self.utxos.pop(0)\n+\n+        block = self.build_block_with_transactions(utxo, 5)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+\n+        comp_block = HeaderAndShortIDs()\n+        comp_block.initialize_from_block(block)\n+\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        with mininode_lock:\n+            assert(self.test_node.last_getblocktxn is not None)\n+            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+        assert_equal(absolute_indexes, [1, 2, 3, 4, 5])\n+        msg = msg_blocktxn()\n+        msg.block_transactions = BlockTransactions(block.sha256, block.vtx[1:])\n+        self.test_node.send_and_ping(msg)\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+        utxo = self.utxos.pop(0)\n+        block = self.build_block_with_transactions(utxo, 5)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+\n+        # Now try interspersing the prefilled transactions\n+        comp_block.initialize_from_block(block, prefill_list=[0, 1, 5])\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        with mininode_lock:\n+            assert(self.test_node.last_getblocktxn is not None)\n+            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+        assert_equal(absolute_indexes, [2, 3, 4])\n+        msg.block_transactions = BlockTransactions(block.sha256, block.vtx[2:5])\n+        self.test_node.send_and_ping(msg)\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+        # Now try giving one transaction ahead of time.\n+        utxo = self.utxos.pop(0)\n+        block = self.build_block_with_transactions(utxo, 5)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+        self.test_node.send_and_ping(msg_tx(block.vtx[1]))\n+        assert(block.vtx[1].hash in self.nodes[0].getrawmempool())\n+\n+        # Prefill 4 out of the 6 transactions, and verify that only the one\n+        # that was not in the mempool is requested.\n+        comp_block.initialize_from_block(block, prefill_list=[0, 2, 3, 4])\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        with mininode_lock:\n+            assert(self.test_node.last_getblocktxn is not None)\n+            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+        assert_equal(absolute_indexes, [5])\n+\n+        msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]])\n+        self.test_node.send_and_ping(msg)\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+        # Now provide all transactions to the node before the block is\n+        # announced and verify reconstruction happens immediately.\n+        utxo = self.utxos.pop(0)\n+        block = self.build_block_with_transactions(utxo, 10)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+        for tx in block.vtx[1:]:\n+            self.test_node.send_message(msg_tx(tx))\n+        self.test_node.sync_with_ping()\n+        # Make sure all transactions were accepted.\n+        mempool = self.nodes[0].getrawmempool()\n+        for tx in block.vtx[1:]:\n+            assert(tx.hash in mempool)\n+\n+        # Clear out last request.\n+        with mininode_lock:\n+            self.test_node.last_getblocktxn = None\n+\n+        # Send compact block\n+        comp_block.initialize_from_block(block, prefill_list=[0])\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        with mininode_lock:\n+            # Shouldn't have gotten a request for any transaction\n+            assert(self.test_node.last_getblocktxn is None)\n+        # Tip should have updated\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+    # Incorrectly responding to a getblocktxn shouldn't cause the block to be\n+    # permanently failed.\n+    def test_incorrect_blocktxn_response(self):\n+        print(\"Testing handling of incorrect blocktxn responses...\")\n+\n+        if (len(self.utxos) == 0):\n+            self.make_utxos()\n+        utxo = self.utxos.pop(0)\n+\n+        block = self.build_block_with_transactions(utxo, 10)\n+        self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n+        # Relay the first 5 transactions from the block in advance\n+        for tx in block.vtx[1:6]:\n+            self.test_node.send_message(msg_tx(tx))\n+        self.test_node.sync_with_ping()\n+        # Make sure all transactions were accepted.\n+        mempool = self.nodes[0].getrawmempool()\n+        for tx in block.vtx[1:6]:\n+            assert(tx.hash in mempool)\n+\n+        # Send compact block\n+        comp_block = HeaderAndShortIDs()\n+        comp_block.initialize_from_block(block, prefill_list=[0])\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        absolute_indexes = []\n+        with mininode_lock:\n+            assert(self.test_node.last_getblocktxn is not None)\n+            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+        assert_equal(absolute_indexes, [6, 7, 8, 9, 10])\n+\n+        # Now give an incorrect response.\n+        # Note that it's possible for bitcoind to be smart enough to know we're\n+        # lying, since it could check to see if the shortid matches what we're\n+        # sending, and eg disconnect us for misbehavior.  If that behavior\n+        # change were made, we could just modify this test by having a\n+        # different peer provide the block further down, so that we're still\n+        # verifying that the block isn't marked bad permanently. This is good\n+        # enough for now.\n+        msg = msg_blocktxn()\n+        msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]] + block.vtx[7:])\n+        self.test_node.send_and_ping(msg)\n+\n+        # Tip should not have updated\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+\n+        # We should receive a getdata request\n+        success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=10)\n+        assert(success)\n+        assert_equal(len(self.test_node.last_getdata.inv), 1)\n+        assert_equal(self.test_node.last_getdata.inv[0].type, 2)\n+        assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+\n+        # Deliver the block\n+        self.test_node.send_and_ping(msg_block(block))\n+        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+\n+    def test_getblocktxn_handler(self):\n+        print(\"Testing getblocktxn handler...\")\n+\n+        # bitcoind won't respond for blocks whose height is more than 15 blocks\n+        # deep.\n+        MAX_GETBLOCKTXN_DEPTH = 15\n+        chain_height = self.nodes[0].getblockcount()\n+        current_height = chain_height\n+        while (current_height >= chain_height - MAX_GETBLOCKTXN_DEPTH):\n+            block_hash = self.nodes[0].getblockhash(current_height)\n+            block = FromHex(CBlock(), self.nodes[0].getblock(block_hash, False))\n+\n+            msg = msg_getblocktxn()\n+            msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [])\n+            num_to_request = random.randint(1, len(block.vtx))\n+            msg.block_txn_request.from_absolute(sorted(random.sample(range(len(block.vtx)), num_to_request)))\n+            self.test_node.send_message(msg)\n+            success = wait_until(lambda: self.test_node.last_blocktxn is not None, timeout=10)\n+            assert(success)\n+\n+            [tx.calc_sha256() for tx in block.vtx]\n+            with mininode_lock:\n+                assert_equal(self.test_node.last_blocktxn.block_transactions.blockhash, int(block_hash, 16))\n+                all_indices = msg.block_txn_request.to_absolute()\n+                for index in all_indices:\n+                    tx = self.test_node.last_blocktxn.block_transactions.transactions.pop(0)\n+                    tx.calc_sha256()\n+                    assert_equal(tx.sha256, block.vtx[index].sha256)\n+                self.test_node.last_blocktxn = None\n+            current_height -= 1\n+\n+        # Next request should be ignored, as we're past the allowed depth.\n+        block_hash = self.nodes[0].getblockhash(current_height)\n+        msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [0])\n+        self.test_node.send_and_ping(msg)\n+        with mininode_lock:\n+            assert_equal(self.test_node.last_blocktxn, None)\n+\n+    def test_compactblocks_not_at_tip(self):\n+        print(\"Testing compactblock requests/announcements not at chain tip...\")\n+\n+        # Test that requesting old compactblocks doesn't work.\n+        MAX_CMPCTBLOCK_DEPTH = 11\n+        new_blocks = []\n+        for i in range(MAX_CMPCTBLOCK_DEPTH):\n+            self.test_node.clear_block_announcement()\n+            new_blocks.append(self.nodes[0].generate(1)[0])\n+            wait_until(self.test_node.received_block_announcement, timeout=30)\n+\n+        self.test_node.clear_block_announcement()\n+        self.test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        success = wait_until(lambda: self.test_node.last_cmpctblock is not None, timeout=30)\n+        assert(success)\n+\n+        self.test_node.clear_block_announcement()\n+        self.nodes[0].generate(1)\n+        wait_until(self.test_node.received_block_announcement, timeout=30)\n+        self.test_node.clear_block_announcement()\n+        self.test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        success = wait_until(lambda: self.test_node.last_block is not None, timeout=30)\n+        assert(success)\n+        with mininode_lock:\n+            self.test_node.last_block.block.calc_sha256()\n+            assert_equal(self.test_node.last_block.block.sha256, int(new_blocks[0], 16))\n+\n+        # Generate an old compactblock, and verify that it's not accepted.\n+        cur_height = self.nodes[0].getblockcount()\n+        hashPrevBlock = int(self.nodes[0].getblockhash(cur_height-5), 16)\n+        block = self.build_block_on_tip()\n+        block.hashPrevBlock = hashPrevBlock\n+        block.solve()\n+\n+        comp_block = HeaderAndShortIDs()\n+        comp_block.initialize_from_block(block)\n+        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+\n+        tips = self.nodes[0].getchaintips()\n+        found = False\n+        for x in tips:\n+            if x[\"hash\"] == block.hash:\n+                assert_equal(x[\"status\"], \"headers-only\")\n+                found = True\n+                break\n+        assert(found)\n+\n+        # Requesting this block via getblocktxn should silently fail\n+        # (to avoid fingerprinting attacks).\n+        msg = msg_getblocktxn()\n+        msg.block_txn_request = BlockTransactionsRequest(block.sha256, [0])\n+        with mininode_lock:\n+            self.test_node.last_blocktxn = None\n+        self.test_node.send_and_ping(msg)\n+        with mininode_lock:\n+            assert(self.test_node.last_blocktxn is None)\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        self.test_node = TestNode()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.test_node))\n+        self.test_node.add_connection(connections[0])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        # Test logic begins here\n+        self.test_node.wait_for_verack()\n+\n+        # We will need UTXOs to construct transactions in later tests.\n+        self.make_utxos()\n+\n+        self.test_sendcmpct()\n+        self.test_compactblock_construction()\n+        self.test_compactblock_requests()\n+        self.test_getblocktxn_requests()\n+        self.test_getblocktxn_handler()\n+        self.test_compactblocks_not_at_tip()\n+        self.test_incorrect_blocktxn_response()\n+        self.test_invalid_cmpctblock_message()\n+\n+\n+if __name__ == '__main__':\n+    CompactBlocksTest().main()"
      },
      {
        "sha": "caffab35351df437f8828baa60284f0b3ac79cac",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 297,
        "deletions": 76,
        "changes": 373,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "patch": "@@ -36,9 +36,10 @@\n from threading import Thread\n import logging\n import copy\n+from test_framework.siphash import siphash256\n \n BIP0031_VERSION = 60000\n-MY_VERSION = 60001  # past bip-31 for ping/pong\n+MY_VERSION = 70014  # past bip-31 for ping/pong\n MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n \n MAX_INV_SZ = 50000\n@@ -52,7 +53,7 @@\n NODE_WITNESS = (1 << 3)\n \n # Keep our own socket map for asyncore, so that we can track disconnects\n-# ourselves (to workaround an issue with closing an asyncore socket when \n+# ourselves (to workaround an issue with closing an asyncore socket when\n # using select)\n mininode_socket_map = dict()\n \n@@ -74,25 +75,34 @@ def ripemd160(s):\n def hash256(s):\n     return sha256(sha256(s))\n \n+def ser_compact_size(l):\n+    r = b\"\"\n+    if l < 253:\n+        r = struct.pack(\"B\", l)\n+    elif l < 0x10000:\n+        r = struct.pack(\"<BH\", 253, l)\n+    elif l < 0x100000000:\n+        r = struct.pack(\"<BI\", 254, l)\n+    else:\n+        r = struct.pack(\"<BQ\", 255, l)\n+    return r\n \n-def deser_string(f):\n+def deser_compact_size(f):\n     nit = struct.unpack(\"<B\", f.read(1))[0]\n     if nit == 253:\n         nit = struct.unpack(\"<H\", f.read(2))[0]\n     elif nit == 254:\n         nit = struct.unpack(\"<I\", f.read(4))[0]\n     elif nit == 255:\n         nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    return nit\n+\n+def deser_string(f):\n+    nit = deser_compact_size(f)\n     return f.read(nit)\n \n def ser_string(s):\n-    if len(s) < 253:\n-        return struct.pack(\"B\", len(s)) + s\n-    elif len(s) < 0x10000:\n-        return struct.pack(\"<BH\", 253, len(s)) + s\n-    elif len(s) < 0x100000000:\n-        return struct.pack(\"<BI\", 254, len(s)) + s\n-    return struct.pack(\"<BQ\", 255, len(s)) + s\n+    return ser_compact_size(len(s)) + s\n \n def deser_uint256(f):\n     r = 0\n@@ -125,13 +135,7 @@ def uint256_from_compact(c):\n \n \n def deser_vector(f, c):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    nit = deser_compact_size(f)\n     r = []\n     for i in range(nit):\n         t = c()\n@@ -144,15 +148,7 @@ def deser_vector(f, c):\n # entries in the vector (we use this for serializing the vector of transactions\n # for a witness block).\n def ser_vector(l, ser_function_name=None):\n-    r = b\"\"\n-    if len(l) < 253:\n-        r = struct.pack(\"B\", len(l))\n-    elif len(l) < 0x10000:\n-        r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, len(l))\n-    else:\n-        r = struct.pack(\"<BQ\", 255, len(l))\n+    r = ser_compact_size(len(l))\n     for i in l:\n         if ser_function_name:\n             r += getattr(i, ser_function_name)()\n@@ -162,13 +158,7 @@ def ser_vector(l, ser_function_name=None):\n \n \n def deser_uint256_vector(f):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    nit = deser_compact_size(f)\n     r = []\n     for i in range(nit):\n         t = deser_uint256(f)\n@@ -177,28 +167,14 @@ def deser_uint256_vector(f):\n \n \n def ser_uint256_vector(l):\n-    r = b\"\"\n-    if len(l) < 253:\n-        r = struct.pack(\"B\", len(l))\n-    elif len(l) < 0x10000:\n-        r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, len(l))\n-    else:\n-        r = struct.pack(\"<BQ\", 255, len(l))\n+    r = ser_compact_size(len(l))\n     for i in l:\n         r += ser_uint256(i)\n     return r\n \n \n def deser_string_vector(f):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    nit = deser_compact_size(f)\n     r = []\n     for i in range(nit):\n         t = deser_string(f)\n@@ -207,28 +183,14 @@ def deser_string_vector(f):\n \n \n def ser_string_vector(l):\n-    r = b\"\"\n-    if len(l) < 253:\n-        r = struct.pack(\"B\", len(l))\n-    elif len(l) < 0x10000:\n-        r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, len(l))\n-    else:\n-        r = struct.pack(\"<BQ\", 255, len(l))\n+    r = ser_compact_size(len(l))\n     for sv in l:\n         r += ser_string(sv)\n     return r\n \n \n def deser_int_vector(f):\n-    nit = struct.unpack(\"<B\", f.read(1))[0]\n-    if nit == 253:\n-        nit = struct.unpack(\"<H\", f.read(2))[0]\n-    elif nit == 254:\n-        nit = struct.unpack(\"<I\", f.read(4))[0]\n-    elif nit == 255:\n-        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    nit = deser_compact_size(f)\n     r = []\n     for i in range(nit):\n         t = struct.unpack(\"<i\", f.read(4))[0]\n@@ -237,15 +199,7 @@ def deser_int_vector(f):\n \n \n def ser_int_vector(l):\n-    r = b\"\"\n-    if len(l) < 253:\n-        r = struct.pack(\"B\", len(l))\n-    elif len(l) < 0x10000:\n-        r = struct.pack(\"<BH\", 253, len(l))\n-    elif len(l) < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, len(l))\n-    else:\n-        r = struct.pack(\"<BQ\", 255, len(l))\n+    r = ser_compact_size(len(l))\n     for i in l:\n         r += struct.pack(\"<i\", i)\n     return r\n@@ -294,7 +248,8 @@ class CInv(object):\n         1: \"TX\",\n         2: \"Block\",\n         1|MSG_WITNESS_FLAG: \"WitnessTx\",\n-        2|MSG_WITNESS_FLAG : \"WitnessBlock\"\n+        2|MSG_WITNESS_FLAG : \"WitnessBlock\",\n+        4: \"CompactBlock\"\n     }\n \n     def __init__(self, t=0, h=0):\n@@ -781,6 +736,187 @@ def __repr__(self):\n             % (len(self.vchMsg), len(self.vchSig))\n \n \n+class PrefilledTransaction(object):\n+    def __init__(self, index=0, tx = None):\n+        self.index = index\n+        self.tx = tx\n+\n+    def deserialize(self, f):\n+        self.index = deser_compact_size(f)\n+        self.tx = CTransaction()\n+        self.tx.deserialize(f)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += ser_compact_size(self.index)\n+        if with_witness:\n+            r += self.tx.serialize_with_witness()\n+        else:\n+            r += self.tx.serialize_without_witness()\n+        return r\n+\n+    def __repr__(self):\n+        return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n+\n+# This is what we send on the wire, in a cmpctblock message.\n+class P2PHeaderAndShortIDs(object):\n+    def __init__(self):\n+        self.header = CBlockHeader()\n+        self.nonce = 0\n+        self.shortids_length = 0\n+        self.shortids = []\n+        self.prefilled_txn_length = 0\n+        self.prefilled_txn = []\n+\n+    def deserialize(self, f):\n+        self.header.deserialize(f)\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.shortids_length = deser_compact_size(f)\n+        for i in range(self.shortids_length):\n+            # shortids are defined to be 6 bytes in the spec, so append\n+            # two zero bytes and read it in as an 8-byte number\n+            self.shortids.append(struct.unpack(\"<Q\", f.read(6) + b'\\x00\\x00')[0])\n+        self.prefilled_txn = deser_vector(f, PrefilledTransaction)\n+        self.prefilled_txn_length = len(self.prefilled_txn)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += self.header.serialize()\n+        r += struct.pack(\"<Q\", self.nonce)\n+        r += ser_compact_size(self.shortids_length)\n+        for x in self.shortids:\n+            # We only want the first 6 bytes\n+            r += struct.pack(\"<Q\", x)[0:6]\n+        r += ser_vector(self.prefilled_txn)\n+        return r\n+\n+    def __repr__(self):\n+        return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n+\n+\n+# Calculate the BIP 152-compact blocks shortid for a given transaction hash\n+def calculate_shortid(k0, k1, tx_hash):\n+    expected_shortid = siphash256(k0, k1, tx_hash)\n+    expected_shortid &= 0x0000ffffffffffff\n+    return expected_shortid\n+\n+# This version gets rid of the array lengths, and reinterprets the differential\n+# encoding into indices that can be used for lookup.\n+class HeaderAndShortIDs(object):\n+    def __init__(self, p2pheaders_and_shortids = None):\n+        self.header = CBlockHeader()\n+        self.nonce = 0\n+        self.shortids = []\n+        self.prefilled_txn = []\n+\n+        if p2pheaders_and_shortids != None:\n+            self.header = p2pheaders_and_shortids.header\n+            self.nonce = p2pheaders_and_shortids.nonce\n+            self.shortids = p2pheaders_and_shortids.shortids\n+            last_index = -1\n+            for x in p2pheaders_and_shortids.prefilled_txn:\n+                self.prefilled_txn.append(PrefilledTransaction(x.index + last_index + 1, x.tx))\n+                last_index = self.prefilled_txn[-1].index\n+\n+    def to_p2p(self):\n+        ret = P2PHeaderAndShortIDs()\n+        ret.header = self.header\n+        ret.nonce = self.nonce\n+        ret.shortids_length = len(self.shortids)\n+        ret.shortids = self.shortids\n+        ret.prefilled_txn_length = len(self.prefilled_txn)\n+        ret.prefilled_txn = []\n+        last_index = -1\n+        for x in self.prefilled_txn:\n+            ret.prefilled_txn.append(PrefilledTransaction(x.index - last_index - 1, x.tx))\n+            last_index = x.index\n+        return ret\n+\n+    def get_siphash_keys(self):\n+        header_nonce = self.header.serialize()\n+        header_nonce += struct.pack(\"<Q\", self.nonce)\n+        hash_header_nonce_as_str = sha256(header_nonce)\n+        key0 = struct.unpack(\"<Q\", hash_header_nonce_as_str[0:8])[0]\n+        key1 = struct.unpack(\"<Q\", hash_header_nonce_as_str[8:16])[0]\n+        return [ key0, key1 ]\n+\n+    def initialize_from_block(self, block, nonce=0, prefill_list = [0]):\n+        self.header = CBlockHeader(block)\n+        self.nonce = nonce\n+        self.prefilled_txn = [ PrefilledTransaction(i, block.vtx[i]) for i in prefill_list ]\n+        self.shortids = []\n+        [k0, k1] = self.get_siphash_keys()\n+        for i in range(len(block.vtx)):\n+            if i not in prefill_list:\n+                self.shortids.append(calculate_shortid(k0, k1, block.vtx[i].sha256))\n+\n+    def __repr__(self):\n+        return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n+\n+\n+class BlockTransactionsRequest(object):\n+\n+    def __init__(self, blockhash=0, indexes = None):\n+        self.blockhash = blockhash\n+        self.indexes = indexes if indexes != None else []\n+\n+    def deserialize(self, f):\n+        self.blockhash = deser_uint256(f)\n+        indexes_length = deser_compact_size(f)\n+        for i in range(indexes_length):\n+            self.indexes.append(deser_compact_size(f))\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += ser_uint256(self.blockhash)\n+        r += ser_compact_size(len(self.indexes))\n+        for x in self.indexes:\n+            r += ser_compact_size(x)\n+        return r\n+\n+    # helper to set the differentially encoded indexes from absolute ones\n+    def from_absolute(self, absolute_indexes):\n+        self.indexes = []\n+        last_index = -1\n+        for x in absolute_indexes:\n+            self.indexes.append(x-last_index-1)\n+            last_index = x\n+\n+    def to_absolute(self):\n+        absolute_indexes = []\n+        last_index = -1\n+        for x in self.indexes:\n+            absolute_indexes.append(x+last_index+1)\n+            last_index = absolute_indexes[-1]\n+        return absolute_indexes\n+\n+    def __repr__(self):\n+        return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n+\n+\n+class BlockTransactions(object):\n+\n+    def __init__(self, blockhash=0, transactions = None):\n+        self.blockhash = blockhash\n+        self.transactions = transactions if transactions != None else []\n+\n+    def deserialize(self, f):\n+        self.blockhash = deser_uint256(f)\n+        self.transactions = deser_vector(f, CTransaction)\n+\n+    def serialize(self, with_witness=False):\n+        r = b\"\"\n+        r += ser_uint256(self.blockhash)\n+        if with_witness:\n+            r += ser_vector(self.transactions, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.transactions)\n+        return r\n+\n+    def __repr__(self):\n+        return \"BlockTransactions(hash=%064x transactions=%s)\" % (self.blockhash, repr(self.transactions))\n+\n+\n # Objects that correspond to messages on the wire\n class msg_version(object):\n     command = b\"version\"\n@@ -1215,6 +1351,79 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_feefilter(feerate=%08x)\" % self.feerate\n \n+class msg_sendcmpct(object):\n+    command = b\"sendcmpct\"\n+\n+    def __init__(self):\n+        self.announce = False\n+        self.version = 1\n+\n+    def deserialize(self, f):\n+        self.announce = struct.unpack(\"<?\", f.read(1))[0]\n+        self.version = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<?\", self.announce)\n+        r += struct.pack(\"<Q\", self.version)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n+\n+class msg_cmpctblock(object):\n+    command = b\"cmpctblock\"\n+\n+    def __init__(self, header_and_shortids = None):\n+        self.header_and_shortids = header_and_shortids\n+\n+    def deserialize(self, f):\n+        self.header_and_shortids = P2PHeaderAndShortIDs()\n+        self.header_and_shortids.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.header_and_shortids.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n+\n+class msg_getblocktxn(object):\n+    command = b\"getblocktxn\"\n+\n+    def __init__(self):\n+        self.block_txn_request = None\n+\n+    def deserialize(self, f):\n+        self.block_txn_request = BlockTransactionsRequest()\n+        self.block_txn_request.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_txn_request.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n+\n+class msg_blocktxn(object):\n+    command = b\"blocktxn\"\n+\n+    def __init__(self):\n+        self.block_transactions = BlockTransactions()\n+\n+    def deserialize(self, f):\n+        self.block_transactions.deserialize(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_transactions.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n+\n # This is what a callback should look like for NodeConn\n # Reimplement the on_* functions to provide handling for events\n class NodeConnCB(object):\n@@ -1295,6 +1504,10 @@ def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n     def on_feefilter(self, conn, message): pass\n     def on_sendheaders(self, conn, message): pass\n+    def on_sendcmpct(self, conn, message): pass\n+    def on_cmpctblock(self, conn, message): pass\n+    def on_getblocktxn(self, conn, message): pass\n+    def on_blocktxn(self, conn, message): pass\n \n # More useful callbacks and functions for NodeConnCB's which have a single NodeConn\n class SingleNodeConnCB(NodeConnCB):\n@@ -1311,6 +1524,10 @@ def add_connection(self, conn):\n     def send_message(self, message):\n         self.connection.send_message(message)\n \n+    def send_and_ping(self, message):\n+        self.send_message(message)\n+        self.sync_with_ping()\n+\n     def on_pong(self, conn, message):\n         self.last_pong = message\n \n@@ -1344,7 +1561,11 @@ class NodeConn(asyncore.dispatcher):\n         b\"reject\": msg_reject,\n         b\"mempool\": msg_mempool,\n         b\"feefilter\": msg_feefilter,\n-        b\"sendheaders\": msg_sendheaders\n+        b\"sendheaders\": msg_sendheaders,\n+        b\"sendcmpct\": msg_sendcmpct,\n+        b\"cmpctblock\": msg_cmpctblock,\n+        b\"getblocktxn\": msg_getblocktxn,\n+        b\"blocktxn\": msg_blocktxn\n     }\n     MAGIC_BYTES = {\n         \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet"
      },
      {
        "sha": "9c0574bd931758cca0b1583da0269bec96b5d8bf",
        "filename": "qa/rpc-tests/test_framework/siphash.py",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/qa/rpc-tests/test_framework/siphash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/qa/rpc-tests/test_framework/siphash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/siphash.py?ref=63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "patch": "@@ -0,0 +1,64 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# siphash.py - Specialized SipHash-2-4 implementations\n+#\n+# This implements SipHash-2-4 for 256-bit integers.\n+\n+def rotl64(n, b):\n+    return n >> (64 - b) | (n & ((1 << (64 - b)) - 1)) << b\n+\n+def siphash_round(v0, v1, v2, v3):\n+    v0 = (v0 + v1) & ((1 << 64) - 1)\n+    v1 = rotl64(v1, 13)\n+    v1 ^= v0\n+    v0 = rotl64(v0, 32)\n+    v2 = (v2 + v3) & ((1 << 64) - 1)\n+    v3 = rotl64(v3, 16)\n+    v3 ^= v2\n+    v0 = (v0 + v3) & ((1 << 64) - 1)\n+    v3 = rotl64(v3, 21)\n+    v3 ^= v0\n+    v2 = (v2 + v1) & ((1 << 64) - 1)\n+    v1 = rotl64(v1, 17)\n+    v1 ^= v2\n+    v2 = rotl64(v2, 32)\n+    return (v0, v1, v2, v3)\n+\n+def siphash256(k0, k1, h):\n+    n0 = h & ((1 << 64) - 1)\n+    n1 = (h >> 64) & ((1 << 64) - 1)\n+    n2 = (h >> 128) & ((1 << 64) - 1)\n+    n3 = (h >> 192) & ((1 << 64) - 1)\n+    v0 = 0x736f6d6570736575 ^ k0\n+    v1 = 0x646f72616e646f6d ^ k1\n+    v2 = 0x6c7967656e657261 ^ k0\n+    v3 = 0x7465646279746573 ^ k1 ^ n0\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= n0\n+    v3 ^= n1\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= n1\n+    v3 ^= n2\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= n2\n+    v3 ^= n3\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= n3\n+    v3 ^= 0x2000000000000000\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0 ^= 0x2000000000000000\n+    v2 ^= 0xFF\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    v0, v1, v2, v3 = siphash_round(v0, v1, v2, v3)\n+    return v0 ^ v1 ^ v2 ^ v3"
      },
      {
        "sha": "d6032440e3bb2a37694b4c25a612b3e22e5b33df",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "patch": "@@ -303,6 +303,12 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n+\n+    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+    {\n+        consensus.vDeployments[d].nStartTime = nStartTime;\n+        consensus.vDeployments[d].nTimeout = nTimeout;\n+    }\n };\n static CRegTestParams regTestParams;\n \n@@ -330,4 +336,9 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n+\n+void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+{\n+    regTestParams.UpdateBIP9Parameters(d, nStartTime, nTimeout);\n+}\n  "
      },
      {
        "sha": "0c3820b7c6e725ff5e468606c3b985185fb41754",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "patch": "@@ -112,4 +112,9 @@ CChainParams& Params(const std::string& chain);\n  */\n void SelectParams(const std::string& chain);\n \n+/**\n+ * Allows modifying the BIP9 regtest parameters.\n+ */\n+void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n+\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "5dc3ac023ccf837f9cc206c7dcc3c7941477dfec",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "patch": "@@ -410,6 +410,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n+        strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified bip9 deployment (regtest-only)\");\n     }\n     string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n@@ -975,6 +976,41 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n+    if (!mapMultiArgs[\"-bip9params\"].empty()) {\n+        // Allow overriding bip9 parameters for testing\n+        if (!Params().MineBlocksOnDemand()) {\n+            return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n+        }\n+        const vector<string>& deployments = mapMultiArgs[\"-bip9params\"];\n+        for (auto i : deployments) {\n+            std::vector<std::string> vDeploymentParams;\n+            boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n+            if (vDeploymentParams.size() != 3) {\n+                return InitError(\"BIP9 parameters malformed, expecting deployment:start:end\");\n+            }\n+            int64_t nStartTime, nTimeout;\n+            if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n+                return InitError(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n+            }\n+            if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n+                return InitError(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n+            }\n+            bool found = false;\n+            for (int i=0; i<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++i)\n+            {\n+                if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[i].name) == 0) {\n+                    UpdateRegtestBIP9Parameters(Consensus::DeploymentPos(i), nStartTime, nTimeout);\n+                    found = true;\n+                    LogPrintf(\"Setting BIP9 activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                return InitError(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n+            }\n+        }\n+    }\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Initialize elliptic curve code"
      },
      {
        "sha": "fa9624f13daf5508d21571c50d2540f5580ba8e3",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "patch": "@@ -122,6 +122,10 @@ BOOST_AUTO_TEST_CASE(siphash)\n         hasher3.Write(uint64_t(x)|(uint64_t(x+1)<<8)|(uint64_t(x+2)<<16)|(uint64_t(x+3)<<24)|\n                      (uint64_t(x+4)<<32)|(uint64_t(x+5)<<40)|(uint64_t(x+6)<<48)|(uint64_t(x+7)<<56));\n     }\n+\n+    CHashWriter ss(SER_DISK, CLIENT_VERSION);\n+    ss << CTransaction();\n+    BOOST_CHECK_EQUAL(SipHashUint256(1, 2, ss.GetHash()), 0x79751e980c2a0a35ULL);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "115265bb1060533bc1b73a10c5ca17ad64fbaf45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTUyNjViYjEwNjA1MzNiYzFiNzNhMTBjNWNhMTdhZDY0ZmJhZjQ1",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-08-02T08:26:05Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-08-02T08:26:05Z"
      },
      "message": "Trivial: bip -> BIP in help text and comment",
      "tree": {
        "sha": "b7a2df022e77ea65d0f8aec4cfd3575e1b54c796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7a2df022e77ea65d0f8aec4cfd3575e1b54c796"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/115265bb1060533bc1b73a10c5ca17ad64fbaf45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/115265bb1060533bc1b73a10c5ca17ad64fbaf45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/115265bb1060533bc1b73a10c5ca17ad64fbaf45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/115265bb1060533bc1b73a10c5ca17ad64fbaf45/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a3560afef8c8eeb3a1537f1e655190da824d5785",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/115265bb1060533bc1b73a10c5ca17ad64fbaf45/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/115265bb1060533bc1b73a10c5ca17ad64fbaf45/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=115265bb1060533bc1b73a10c5ca17ad64fbaf45",
        "patch": "@@ -410,7 +410,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified bip9 deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n     string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n@@ -977,7 +977,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (!mapMultiArgs[\"-bip9params\"].empty()) {\n-        // Allow overriding bip9 parameters for testing\n+        // Allow overriding BIP9 parameters for testing\n         if (!Params().MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }"
      }
    ]
  },
  {
    "sha": "0fc00bea5d24f4a6715f7069adb7b7396c981308",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmMwMGJlYTVkMjRmNGE2NzE1ZjcwNjlhZGI3YjczOTZjOTgxMzA4",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-08-02T08:26:54Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-08-02T08:26:54Z"
      },
      "message": "Do not shadow previous local variable",
      "tree": {
        "sha": "48a0c5c588b328d649ee57abe3a667178c8caffe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48a0c5c588b328d649ee57abe3a667178c8caffe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fc00bea5d24f4a6715f7069adb7b7396c981308",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc00bea5d24f4a6715f7069adb7b7396c981308",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fc00bea5d24f4a6715f7069adb7b7396c981308",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc00bea5d24f4a6715f7069adb7b7396c981308/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "115265bb1060533bc1b73a10c5ca17ad64fbaf45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/115265bb1060533bc1b73a10c5ca17ad64fbaf45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/115265bb1060533bc1b73a10c5ca17ad64fbaf45"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cb3dfe3aa49affd7afbd4501b398f22a99baca3f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc00bea5d24f4a6715f7069adb7b7396c981308/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc00bea5d24f4a6715f7069adb7b7396c981308/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0fc00bea5d24f4a6715f7069adb7b7396c981308",
        "patch": "@@ -996,10 +996,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 return InitError(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n             }\n             bool found = false;\n-            for (int i=0; i<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++i)\n+            for (int j=0; j<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j)\n             {\n-                if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[i].name) == 0) {\n-                    UpdateRegtestBIP9Parameters(Consensus::DeploymentPos(i), nStartTime, nTimeout);\n+                if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[j].name) == 0) {\n+                    UpdateRegtestBIP9Parameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n                     found = true;\n                     LogPrintf(\"Setting BIP9 activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n                     break;"
      }
    ]
  },
  {
    "sha": "2eed09fe1e3d0ece00fa9ab8d4408da565c33f67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWVkMDlmZTFlM2QwZWNlMDBmYTlhYjhkNDQwOGRhNTY1YzMzZjY3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T08:58:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T08:58:59Z"
      },
      "message": "Merge #8442: [qa] Rework hd wallet dump test\n\nfa4439d [qa] Rework hd wallet dump test (MarcoFalke)",
      "tree": {
        "sha": "cae3be409f93ac5ad7f44e89091e57ffbfe29395",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cae3be409f93ac5ad7f44e89091e57ffbfe29395"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2eed09fe1e3d0ece00fa9ab8d4408da565c33f67",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXobJTAAoJEHSBCwEjRsmmqK0IAL0kv9FnGbkJoYTr1sNhGSt/\nrIMKuIn2rOYVzy76SqdHYoKco49lWE05aiq3FbIosCo3N9qKk0qr92LGytllMW9c\naWPRErNvotapvbl45WA8rjXv+3XdpRlvE5qCNeNcuTU0NKHsQULrwgV9MAOPPXki\nEjAWFQp1USG1ErDaa1VMgjhiB3UDY2CUjjCBSkbPRU3lQ8D6V1/A2o/UuF2iqJN7\nZC8Siv+rksjKegSKeOSOp++GdnTrsKEUFTU6wEpPgXGYAvFEbeeRYIpEuok86f15\nhcUWCIEQORTgGslI21Xg5WbcIZCnce9TeeKSow5dzaOM/5IjfBEgaZmHlUMCxuk=\n=xAC+\n-----END PGP SIGNATURE-----",
        "payload": "tree cae3be409f93ac5ad7f44e89091e57ffbfe29395\nparent 63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f\nparent fa4439d3554435bdf0ef47861835f10d41bcdc1a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470214705 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470214739 +0200\n\nMerge #8442: [qa] Rework hd wallet dump test\n\nfa4439d [qa] Rework hd wallet dump test (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eed09fe1e3d0ece00fa9ab8d4408da565c33f67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2eed09fe1e3d0ece00fa9ab8d4408da565c33f67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eed09fe1e3d0ece00fa9ab8d4408da565c33f67/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63c03dd41cc0e5d05d421fd7a574ff53a1dbb92f"
      },
      {
        "sha": "fa4439d3554435bdf0ef47861835f10d41bcdc1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4439d3554435bdf0ef47861835f10d41bcdc1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4439d3554435bdf0ef47861835f10d41bcdc1a"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 64,
      "deletions": 80
    },
    "files": [
      {
        "sha": "6028d2c20b19178b60b224cb8b144389a12a47ef",
        "filename": "qa/rpc-tests/wallet-dump.py",
        "status": "modified",
        "additions": 64,
        "deletions": 80,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eed09fe1e3d0ece00fa9ab8d4408da565c33f67/qa/rpc-tests/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eed09fe1e3d0ece00fa9ab8d4408da565c33f67/qa/rpc-tests/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-dump.py?ref=2eed09fe1e3d0ece00fa9ab8d4408da565c33f67",
        "patch": "@@ -4,9 +4,52 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import os\n-import shutil\n+from test_framework.util import (start_nodes, start_node, assert_equal, bitcoind_processes)\n+\n+\n+def read_dump(file_name, addrs, hd_master_addr_old):\n+    \"\"\"\n+    Read the given dump, count the addrs that match, count change and reserve.\n+    Also check that the old hd_master is inactive\n+    \"\"\"\n+    with open(file_name) as inputfile:\n+        found_addr = 0\n+        found_addr_chg = 0\n+        found_addr_rsv = 0\n+        hd_master_addr_ret = None\n+        for line in inputfile:\n+            # only read non comment lines\n+            if line[0] != \"#\" and len(line) > 10:\n+                # split out some data\n+                key_label, comment = line.split(\"#\")\n+                # key = key_label.split(\" \")[0]\n+                keytype = key_label.split(\" \")[2]\n+                if len(comment) > 1:\n+                    addr_keypath = comment.split(\" addr=\")[1]\n+                    addr = addr_keypath.split(\" \")[0]\n+                    keypath = None\n+                    if keytype == \"inactivehdmaster=1\":\n+                        # ensure the old master is still available\n+                        assert(hd_master_addr_old == addr)\n+                    elif keytype == \"hdmaster=1\":\n+                        # ensure we have generated a new hd master key\n+                        assert(hd_master_addr_old != addr)\n+                        hd_master_addr_ret = addr\n+                    else:\n+                        keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n+\n+                    # count key types\n+                    for addrObj in addrs:\n+                        if addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                            found_addr += 1\n+                            break\n+                        elif keytype == \"change=1\":\n+                            found_addr_chg += 1\n+                            break\n+                        elif keytype == \"reserve=1\":\n+                            found_addr_rsv += 1\n+                            break\n+        return found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n \n \n class WalletDumpTest(BitcoinTestFramework):\n@@ -15,106 +58,47 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n+        self.extra_args = [[\"-keypool=90\"]]\n \n     def setup_network(self, split=False):\n-        extra_args = [[\"-keypool=100\"]]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n \n-        #generate 20 addresses to compare against the dump\n+        # generate 20 addresses to compare against the dump\n         test_addr_count = 20\n         addrs = []\n         for i in range(0,test_addr_count):\n             addr = self.nodes[0].getnewaddress()\n             vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n             addrs.append(vaddr)\n+        # Should be a no-op:\n+        self.nodes[0].keypoolrefill()\n \n         # dump unencrypted wallet\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n \n-        #open file\n-        inputfile = open(tmpdir + \"/node0/wallet.unencrypted.dump\")\n-        found_addr = 0\n-        found_addr_chg = 0\n-        found_addr_rsv = 0\n-        hdmasteraddr = \"\"\n-        for line in inputfile:\n-            #only read non comment lines\n-            if line[0] != \"#\" and len(line) > 10:\n-                #split out some data\n-                keyLabel, comment = line.split(\"#\")\n-                key = keyLabel.split(\" \")[0]\n-                keytype = keyLabel.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addrKeypath = comment.split(\" addr=\")[1]\n-                    addr = addrKeypath.split(\" \")[0]\n-                    keypath = \"\"\n-                    if keytype != \"hdmaster=1\":\n-                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n-                    else:\n-                        #keep hd master for later comp.\n-                        hdmasteraddr = addr\n-\n-                    #count key types\n-                    for addrObj in addrs:\n-                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n-                            found_addr+=1\n-                            break\n-                        elif (keytype == \"change=1\"):\n-                            found_addr_chg+=1\n-                            break\n-                        elif (keytype == \"reserve=1\"):\n-                            found_addr_rsv+=1\n-                            break\n-        assert(found_addr == test_addr_count) #all keys must be in the dump\n-        assert(found_addr_chg == 50) #50 blocks where mined\n-        assert(found_addr_rsv == 100) #100 reserve keys (keypool)\n+        found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n+            read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, None)\n+        assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n+        assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n+        assert_equal(found_addr_rsv, 90 + 1)  # keypool size (TODO: fix off-by-one)\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n-        self.nodes[0] = start_node(0, self.options.tmpdir)\n+        self.nodes[0] = start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n+        # Should be a no-op:\n+        self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n \n-        #open dump done with an encrypted wallet\n-        inputfile = open(tmpdir + \"/node0/wallet.encrypted.dump\")\n-        found_addr = 0\n-        found_addr_chg = 0\n-        found_addr_rsv = 0\n-        for line in inputfile:\n-            if line[0] != \"#\" and len(line) > 10:\n-                keyLabel, comment = line.split(\"#\")\n-                key = keyLabel.split(\" \")[0]\n-                keytype = keyLabel.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addrKeypath = comment.split(\" addr=\")[1]\n-                    addr = addrKeypath.split(\" \")[0]\n-                    keypath = \"\"\n-                    if keytype != \"hdmaster=1\":\n-                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n-                    else:\n-                        #ensure we have generated a new hd master key\n-                        assert(hdmasteraddr != addr)\n-                    if keytype == \"inactivehdmaster=1\":\n-                        #ensure the old master is still available\n-                        assert(hdmasteraddr == addr)\n-                    for addrObj in addrs:\n-                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n-                            found_addr+=1\n-                            break\n-                        elif (keytype == \"change=1\"):\n-                            found_addr_chg+=1\n-                            break\n-                        elif (keytype == \"reserve=1\"):\n-                            found_addr_rsv+=1\n-                            break\n-\n-        assert(found_addr == test_addr_count)\n-        assert(found_addr_chg == 150) #old reserve keys are marked as change now\n-        assert(found_addr_rsv == 100) #keypool size\n+        found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_enc = \\\n+            read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, hd_master_addr_unenc)\n+        assert_equal(found_addr, test_addr_count)\n+        assert_equal(found_addr_chg, 90 + 1 + 50)  # old reserve keys are marked as change now\n+        assert_equal(found_addr_rsv, 90 + 1)  # keypool size (TODO: fix off-by-one)\n \n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      }
    ]
  },
  {
    "sha": "fc93486d2a0066a8b52e072000f0b5b6c568dccb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzkzNDg2ZDJhMDA2NmE4YjUyZTA3MjAwMGYwYjViNmM1NjhkY2Ni",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T09:00:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T09:00:30Z"
      },
      "message": "Merge #8428: Update README.md inside of src/test/\n\nb8db185 Update README.md (Chris Stewart)",
      "tree": {
        "sha": "6f8d127fbf35f49addc1f70be1f9d2f57c90137c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f8d127fbf35f49addc1f70be1f9d2f57c90137c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc93486d2a0066a8b52e072000f0b5b6c568dccb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXobKuAAoJEHSBCwEjRsmm7eMH/0SG5SilMOxvOKpGy6GXIPvl\n/viOppoVR8y6xpSkanWTLWo9wIyTxYCuoYyAAAg//KXitawwxvsLGv/ePyFzYOAr\neyfIji0MHD/Q2yQtty/BrkqrfpalXxzgrnGu7cavlsALlZ7pXjX57svY2pubsiGf\ngwvJwoe8OG0tqkZy7nY8zSQqZv+i5p6wVMH8G7qtkOZqe3AacmQXLnvhlpIvxe94\nhC5m5R6eP/eBS+orUZONXVlo4P7jaJNltnyX+NayZfSOvsQ8GDmHNoOGyi2bGLuj\nbFhiOUC6OcXpdqccEWJKkopZ+9LQg9K4Vxi1Enq5fYyTIGkUBv4s7kbY1ecYAJU=\n=Gru9\n-----END PGP SIGNATURE-----",
        "payload": "tree 6f8d127fbf35f49addc1f70be1f9d2f57c90137c\nparent 2eed09fe1e3d0ece00fa9ab8d4408da565c33f67\nparent b8db185952c815444b7052092472ef9af3a42e89\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470214817 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470214830 +0200\n\nMerge #8428: Update README.md inside of src/test/\n\nb8db185 Update README.md (Chris Stewart)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc93486d2a0066a8b52e072000f0b5b6c568dccb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc93486d2a0066a8b52e072000f0b5b6c568dccb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc93486d2a0066a8b52e072000f0b5b6c568dccb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2eed09fe1e3d0ece00fa9ab8d4408da565c33f67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eed09fe1e3d0ece00fa9ab8d4408da565c33f67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2eed09fe1e3d0ece00fa9ab8d4408da565c33f67"
      },
      {
        "sha": "b8db185952c815444b7052092472ef9af3a42e89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8db185952c815444b7052092472ef9af3a42e89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8db185952c815444b7052092472ef9af3a42e89"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "61462642bfb9c8df1fd708ded994a84d077f122b",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc93486d2a0066a8b52e072000f0b5b6c568dccb/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc93486d2a0066a8b52e072000f0b5b6c568dccb/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=fc93486d2a0066a8b52e072000f0b5b6c568dccb",
        "patch": "@@ -5,18 +5,15 @@ sense to simply use this framework rather than require developers to\n configure some other framework (we want as few impediments to creating\n unit tests as possible).\n \n-The build system is setup to compile an executable called \"test_bitcoin\"\n+The build system is setup to compile an executable called `test_bitcoin`\n that runs all of the unit tests.  The main source file is called\n-test_bitcoin.cpp, which simply includes other files that contain the\n-actual unit tests (outside of a couple required preprocessor\n-directives).  The pattern is to create one test file for each class or\n-source file for which you want to create unit tests.  The file naming\n-convention is \"<source_filename>_tests.cpp\" and such files should wrap\n-their tests in a test suite called \"<source_filename>_tests\".  For an\n-examples of this pattern, examine uint160_tests.cpp and\n-uint256_tests.cpp.\n-\n-Add the source files to /src/Makefile.test.include to add them to the build.\n+test_bitcoin.cpp. To add a new unit test file to our test suite you need \n+to add the file to `src/Makefile.test.include`. The pattern is to create \n+one test file for each class or source file for which you want to create \n+unit tests.  The file naming convention is `<source_filename>_tests.cpp` \n+and such files should wrap their tests in a test suite \n+called `<source_filename>_tests`. For an example of this pattern, \n+examine `uint256_tests.cpp`.\n \n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n@@ -31,5 +28,5 @@ example, to run just the getarg_tests verbosely:\n \n     test_bitcoin --run_test=getarg_tests/doubledash\n \n-Run  test_bitcoin --help   for the full list.\n+Run `test_bitcoin --help` for the full list.\n "
      }
    ]
  },
  {
    "sha": "ced2d5ef7c3bc53edccef669ec5105627b482e2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWQyZDVlZjdjM2JjNTNlZGNjZWY2NjllYzUxMDU2MjdiNDgyZTJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T09:05:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T09:05:29Z"
      },
      "message": "Merge #8446: [Trivial] BIP9 parameters on regtest cleanup\n\n0fc00be Do not shadow previous local variable (Pavel Jan\u00edk)\n115265b Trivial: bip -> BIP in help text and comment (Pavel Jan\u00edk)",
      "tree": {
        "sha": "b2f7aae67fa3e198c4cc431ed652f3487e12f52c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2f7aae67fa3e198c4cc431ed652f3487e12f52c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ced2d5ef7c3bc53edccef669ec5105627b482e2f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXobPZAAoJEHSBCwEjRsmmylAH/ji3tY5zBFi6cIvyUkcyhncp\n5QQ55n4K0XZIFNrBy6XowU0TtUi7iZ7I0UXYbm6kohKlbkHE1gKex/w9SpMe8G46\n1o3VxwBIjU7Cfk1j/VSpSxcQSeFG1GIAA6btTXWSwOvTRMmIBqsivyKadx1Tqkwv\nbBGGdBh9x6892uaJMuCfqYXUjUJ91CSQzfCWSKMN8zID5ZzN1GLge3VPwhpRvamL\nvqlW3+jxdsSwluOf+iEZ0N1fz/IOtUZEbzRHjtNKWEpTwZZ9HOP1aWb3MhfIenoQ\n6nSHETs2DrcmvbXzlPLPypkHHUe19Y8hb75FIDlES4NTLKYu2+VBQh92VZ+kD+4=\n=bjjh\n-----END PGP SIGNATURE-----",
        "payload": "tree b2f7aae67fa3e198c4cc431ed652f3487e12f52c\nparent fc93486d2a0066a8b52e072000f0b5b6c568dccb\nparent 0fc00bea5d24f4a6715f7069adb7b7396c981308\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470215116 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470215129 +0200\n\nMerge #8446: [Trivial] BIP9 parameters on regtest cleanup\n\n0fc00be Do not shadow previous local variable (Pavel Jan\u00edk)\n115265b Trivial: bip -> BIP in help text and comment (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced2d5ef7c3bc53edccef669ec5105627b482e2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ced2d5ef7c3bc53edccef669ec5105627b482e2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced2d5ef7c3bc53edccef669ec5105627b482e2f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc93486d2a0066a8b52e072000f0b5b6c568dccb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc93486d2a0066a8b52e072000f0b5b6c568dccb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc93486d2a0066a8b52e072000f0b5b6c568dccb"
      },
      {
        "sha": "0fc00bea5d24f4a6715f7069adb7b7396c981308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc00bea5d24f4a6715f7069adb7b7396c981308",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fc00bea5d24f4a6715f7069adb7b7396c981308"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cb3dfe3aa49affd7afbd4501b398f22a99baca3f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced2d5ef7c3bc53edccef669ec5105627b482e2f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced2d5ef7c3bc53edccef669ec5105627b482e2f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ced2d5ef7c3bc53edccef669ec5105627b482e2f",
        "patch": "@@ -410,7 +410,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified bip9 deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n     string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n@@ -977,7 +977,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (!mapMultiArgs[\"-bip9params\"].empty()) {\n-        // Allow overriding bip9 parameters for testing\n+        // Allow overriding BIP9 parameters for testing\n         if (!Params().MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n@@ -996,10 +996,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 return InitError(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n             }\n             bool found = false;\n-            for (int i=0; i<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++i)\n+            for (int j=0; j<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j)\n             {\n-                if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[i].name) == 0) {\n-                    UpdateRegtestBIP9Parameters(Consensus::DeploymentPos(i), nStartTime, nTimeout);\n+                if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[j].name) == 0) {\n+                    UpdateRegtestBIP9Parameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n                     found = true;\n                     LogPrintf(\"Setting BIP9 activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n                     break;"
      }
    ]
  },
  {
    "sha": "194110fb911db06eaee3098651a6eea085105e0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTQxMTBmYjkxMWRiMDZlYWVlMzA5ODY1MWE2ZWVhMDg1MTA1ZTBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T09:50:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T09:50:45Z"
      },
      "message": "Merge #8189: rename mapAddrCount to mapNetGroupNodes\n\n657fc19 rename mapAddrCount to mapNetGroupNodes (instagibbs)",
      "tree": {
        "sha": "8d2418904a4bd233d4c61bfb0652061f4d2cbdfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d2418904a4bd233d4c61bfb0652061f4d2cbdfd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/194110fb911db06eaee3098651a6eea085105e0a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXob51AAoJEHSBCwEjRsmmB8sH+QGAd8xYuSjI5O0+yX3mjYY5\nXtwtrbHU6mr9bAWMrZSUIWeg5WjEypC9c6Edprte4cbvPTGtVcHVrC0FH7/IHseD\nkUQ+dhrhKxxoXMBRIOeA9LQn4UEPbaCi4pJP9xcwqtu32FSaLTc+LyyU+AgG8gyC\ndIv3DrSdtUyvhMtN69aqY5xTPb0Itj1ft8Cglh4LCK2q2RTC8X5aOunE8d0o9w8m\n4P4HolNqwDFRzXrpp4LzPErtPPEf2pk6ysD7fi4Fej9zGAWfsbO0FfjiLO9ulBBC\nY7hagYAjPGIqyUoal8GpqgpwAuXrALeVfKicIcZs61cP0KGRx55ZIJFvVmOFsGA=\n=/gzW\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d2418904a4bd233d4c61bfb0652061f4d2cbdfd\nparent ced2d5ef7c3bc53edccef669ec5105627b482e2f\nparent 657fc19d6535b33748dafcf63cc0248c6fa0ee7a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470217810 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470217845 +0200\n\nMerge #8189: rename mapAddrCount to mapNetGroupNodes\n\n657fc19 rename mapAddrCount to mapNetGroupNodes (instagibbs)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/194110fb911db06eaee3098651a6eea085105e0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/194110fb911db06eaee3098651a6eea085105e0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/194110fb911db06eaee3098651a6eea085105e0a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ced2d5ef7c3bc53edccef669ec5105627b482e2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced2d5ef7c3bc53edccef669ec5105627b482e2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ced2d5ef7c3bc53edccef669ec5105627b482e2f"
      },
      {
        "sha": "657fc19d6535b33748dafcf63cc0248c6fa0ee7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/657fc19d6535b33748dafcf63cc0248c6fa0ee7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/657fc19d6535b33748dafcf63cc0248c6fa0ee7a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4a7fa2228a097c2beeb16ea5fcd45162947961ea",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/194110fb911db06eaee3098651a6eea085105e0a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/194110fb911db06eaee3098651a6eea085105e0a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=194110fb911db06eaee3098651a6eea085105e0a",
        "patch": "@@ -982,11 +982,11 @@ static bool AttemptToEvictConnection() {\n     uint64_t naMostConnections;\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n-    std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapAddrCounts;\n+    std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapNetGroupNodes;\n     BOOST_FOREACH(const NodeEvictionCandidate &node, vEvictionCandidates) {\n-        mapAddrCounts[node.nKeyedNetGroup].push_back(node);\n-        int64_t grouptime = mapAddrCounts[node.nKeyedNetGroup][0].nTimeConnected;\n-        size_t groupsize = mapAddrCounts[node.nKeyedNetGroup].size();\n+        mapNetGroupNodes[node.nKeyedNetGroup].push_back(node);\n+        int64_t grouptime = mapNetGroupNodes[node.nKeyedNetGroup][0].nTimeConnected;\n+        size_t groupsize = mapNetGroupNodes[node.nKeyedNetGroup].size();\n \n         if (groupsize > nMostConnections || (groupsize == nMostConnections && grouptime > nMostConnectionsTime)) {\n             nMostConnections = groupsize;\n@@ -996,7 +996,7 @@ static bool AttemptToEvictConnection() {\n     }\n \n     // Reduce to the network group with the most connections\n-    vEvictionCandidates = std::move(mapAddrCounts[naMostConnections]);\n+    vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n     NodeId evicted = vEvictionCandidates.front().id;"
      }
    ]
  },
  {
    "sha": "5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzdhNWUxZjY2ZDg2MTFkODRkNjZjN2UwMjk1YmQ0MWM3MWY4NWJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T10:49:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-03T10:50:19Z"
      },
      "message": "Merge #8439: [doc] Increase recommended memory in gitian build guide\n\n7fdbce9 [doc] Increase recommended memory in gitian build guide (fanquake)",
      "tree": {
        "sha": "5a7d349ec425cd2c64b3409208bae8b43eacf4a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a7d349ec425cd2c64b3409208bae8b43eacf4a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXocxrAAoJEHSBCwEjRsmmdkUIALO3+CA083JZd0kL01VsWjuc\naXgemQbqVtt0gJ5Je3kY79VBOiTay9JZseu8rqBEy3D7DVKl4ZWg4kolym8qNFzH\nfLqLvO8eSF2rsHHaGc4KpSgQoQnZsCIiXwrXupZShL7PzkAACDGH4yh4UBul+f2I\ndkCktbHBDjqrbY1C33kOHJoxDsJHjreceTbbxv98Skum9rq6ZYYIDXlOxGnMYmWq\nR5aPWjgQ9L0YCK5E12q69DIMcv0HJH0MYakNEHz9uyZgyMNQMWRWYe6aYaCY6UhU\ni9nPn+CibEbGPzSh9IFFxEz8Xl+0vm/0IKBOO6rcwwspiIBsKXy88Dx4aHcyijo=\n=wCt8\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a7d349ec425cd2c64b3409208bae8b43eacf4a8\nparent 194110fb911db06eaee3098651a6eea085105e0a\nparent 7fdbce9de43c600776e00a2f2042d302cfa4e411\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470221368 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470221419 +0200\n\nMerge #8439: [doc] Increase recommended memory in gitian build guide\n\n7fdbce9 [doc] Increase recommended memory in gitian build guide (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "194110fb911db06eaee3098651a6eea085105e0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/194110fb911db06eaee3098651a6eea085105e0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/194110fb911db06eaee3098651a6eea085105e0a"
      },
      {
        "sha": "7fdbce9de43c600776e00a2f2042d302cfa4e411",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdbce9de43c600776e00a2f2042d302cfa4e411",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fdbce9de43c600776e00a2f2042d302cfa4e411"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "938f92ff1281fab3c4707368b881ff40905fb55b",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
        "patch": "@@ -55,7 +55,7 @@ In the VirtualBox GUI click \"New\" and choose the following parameters in the wiz\n \n ![](gitian-building/create_vm_memsize.png)\n \n-- Memory Size: at least 1024MB, anything less will really slow down the build.\n+- Memory Size: at least 3000MB, anything less and the build might not complete.\n \n ![](gitian-building/create_vm_hard_disk.png)\n "
      },
      {
        "sha": "6f42cda73f3cabb02e39ae0309ac67f419a168c7",
        "filename": "doc/gitian-building/create_vm_memsize.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf/doc/gitian-building/create_vm_memsize.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf/doc/gitian-building/create_vm_memsize.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_memsize.png?ref=5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf"
      }
    ]
  },
  {
    "sha": "37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2Q4M2JiMGE5ODA5OTYzMzhkOWJjOWRiZGJmMDE3NWVlYWJhOWEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-04T09:55:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-04T10:20:35Z"
      },
      "message": "Merge #8391: Consensus: Remove ISM\n\n122786d Consensus: Remove ISM (NicolasDorier)",
      "tree": {
        "sha": "597d0a22c003d9e8dac39ead346b98e3ad2bcf91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/597d0a22c003d9e8dac39ead346b98e3ad2bcf91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXoxbzAAoJEHSBCwEjRsmmdLcH/1cwjhraQpixRJZLxMrhR0sS\nioSNCKtNONER1AJXYApQgzmwY/tQirjzWDTHfvXOfuGwu4TunEKmLLgy8jCq6ZEM\n7uFQx6hQAuqYn4DLtUxRrdj9uyeU4gj5YRZsp4qJMO3bkP6PNv/EdAojtJWpTap1\noL9D9weLQMvgH4qxqbPz6RODEImegoKsbASCpWd0ga5FkrDAHdU3wFjYwOKMAWnB\nmBtWWI0+a3G3ZoAZ6jVAnPndBJ9ABZTdnTB4zR+eFouB+FmimhknuXLCoK6s/OvQ\n1jvzxZ04Xg2zbQCEmh0fKp7R96O5fyMM+C/yTJN4ws7IJpDCj/AiMOuUyp48iCw=\n=4r01\n-----END PGP SIGNATURE-----",
        "payload": "tree 597d0a22c003d9e8dac39ead346b98e3ad2bcf91\nparent 5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf\nparent 122786d0e0170c73536360b705af711e1338adbf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470304525 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470306035 +0200\n\nMerge #8391: Consensus: Remove ISM\n\n122786d Consensus: Remove ISM (NicolasDorier)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf"
      },
      {
        "sha": "122786d0e0170c73536360b705af711e1338adbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/122786d0e0170c73536360b705af711e1338adbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/122786d0e0170c73536360b705af711e1338adbf"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 83,
      "deletions": 107
    },
    "files": [
      {
        "sha": "e903b2fbf07b329746081dfe0c98c3c322736bbc",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
        "patch": "@@ -71,9 +71,9 @@ def get_tests(self):\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n-        ''' 98 more version 3 blocks '''\n+        ''' 398 more version 3 blocks '''\n         test_blocks = []\n-        for i in range(98):\n+        for i in range(398):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -118,24 +118,6 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n-        '''\n-        Check that the new CLTV rules are enforced in the 751st version 4\n-        block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n-        cltv_invalidate(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 4\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        self.last_block_time += 1\n-        yield TestInstance([[block, False]])\n-\n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n         for i in range(199):\n@@ -169,6 +151,24 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n+        '''\n+        Check that the new CLTV rules are enforced in the 951st version 4\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n         ''' Mine 1 old version block, should be invalid '''\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3"
      },
      {
        "sha": "baa77b92a05bbfb69551245021bf9248bf2708c2",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
        "patch": "@@ -30,7 +30,8 @@ def run_test(self):\n         cnt = self.nodes[0].getblockcount()\n \n         # Mine some old-version blocks\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(200)\n+        cnt += 100\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 100):\n             raise AssertionError(\"Failed to mine 100 version=3 blocks\")"
      },
      {
        "sha": "3bad5af5e67a44dd623201d75980a4461162a434",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
        "patch": "@@ -79,9 +79,9 @@ def get_tests(self):\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n-        ''' 98 more version 2 blocks '''\n+        ''' 298 more version 2 blocks '''\n         test_blocks = []\n-        for i in range(98):\n+        for i in range(298):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 2\n             block.rehash()\n@@ -124,25 +124,7 @@ def get_tests(self):\n         self.last_block_time += 1\n         self.tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n-\n-        ''' \n-        Check that the new DERSIG rules are enforced in the 751st version 3\n-        block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n-        unDERify(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-        self.last_block_time += 1\n-        yield TestInstance([[block, False]])\n+        yield TestInstance([[block, True]])       \n \n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n@@ -177,6 +159,24 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n+        ''' \n+        Check that the new DERSIG rules are enforced in the 951st version 3\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        unDERify(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n         ''' Mine 1 old version block, should be invalid '''\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 2"
      },
      {
        "sha": "ea6e3aada24ad6091608ae71d4deed0cbcd3f44a",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
        "patch": "@@ -71,11 +71,10 @@ class CMainParams : public CChainParams {\n     CMainParams() {\n         strNetworkID = \"main\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.nMajorityEnforceBlockUpgrade = 750;\n-        consensus.nMajorityRejectBlockOutdated = 950;\n-        consensus.nMajorityWindow = 1000;\n         consensus.BIP34Height = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n+        consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n+        consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -167,11 +166,10 @@ class CTestNetParams : public CChainParams {\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.nMajorityEnforceBlockUpgrade = 51;\n-        consensus.nMajorityRejectBlockOutdated = 75;\n-        consensus.nMajorityWindow = 100;\n         consensus.BIP34Height = 21111;\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n+        consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n+        consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -247,11 +245,10 @@ class CRegTestParams : public CChainParams {\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n-        consensus.nMajorityEnforceBlockUpgrade = 750;\n-        consensus.nMajorityRejectBlockOutdated = 950;\n-        consensus.nMajorityWindow = 1000;\n-        consensus.BIP34Height = -1; // BIP34 has not necessarily activated on regtest\n+        consensus.BIP34Height = 100000000; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n         consensus.BIP34Hash = uint256();\n+        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n+        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;"
      },
      {
        "sha": "5b2f49184fc3f6d2a1a28e8c69e5f5271600fc20",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
        "patch": "@@ -39,13 +39,13 @@ struct BIP9Deployment {\n struct Params {\n     uint256 hashGenesisBlock;\n     int nSubsidyHalvingInterval;\n-    /** Used to check majorities for block version upgrade */\n-    int nMajorityEnforceBlockUpgrade;\n-    int nMajorityRejectBlockOutdated;\n-    int nMajorityWindow;\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;\n+    /** Block height at which BIP65 becomes active */\n+    int BIP65Height;\n+    /** Block height at which BIP66 becomes active */\n+    int BIP66Height;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments."
      },
      {
        "sha": "2a8772a97dd25dcd27dfd4bbdf65ef32e9e90af2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 31,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
        "patch": "@@ -106,11 +106,6 @@ map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n map<COutPoint, set<map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/**\n- * Returns true if there are nRequired or more blocks of minVersion or above\n- * in the last Consensus::Params::nMajorityWindow blocks, starting at pstart and going backwards.\n- */\n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams);\n static void CheckBlockIndex(const Consensus::Params& consensusParams);\n \n /** Constant stuff for coinbase transactions we create: */\n@@ -2372,15 +2367,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n-    // when 75% of the network has upgraded:\n-    if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    // Start enforcing the DERSIG (BIP66) rule\n+    if (pindex->nHeight >= chainparams.GetConsensus().BIP66Height) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n-    // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n-    // blocks, when 75% of the network has upgraded:\n-    if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+    // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n+    if (pindex->nHeight >= chainparams.GetConsensus().BIP65Height) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n@@ -3504,6 +3497,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n \n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n+    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n@@ -3517,10 +3511,12 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n-    for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n-        if (block.nVersion < version && IsSuperMajority(version, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", version - 1),\n-                                 strprintf(\"rejected nVersion=0x%08x block\", version - 1));\n+    // check for version 2, 3 and 4 upgrades\n+    if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n+       (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n+       (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n+                                 strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n \n     return true;\n }\n@@ -3546,9 +3542,8 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n         }\n     }\n \n-    // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n-    // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-    if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n+    // Enforce rule that the coinbase starts with serialized block height\n+    if (nHeight >= consensusParams.BIP34Height)\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n@@ -3722,19 +3717,6 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)\n-{\n-    unsigned int nFound = 0;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && nFound < nRequired && pstart != NULL; i++)\n-    {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n-    }\n-    return (nFound >= nRequired);\n-}\n-\n-\n bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n {\n     {"
      },
      {
        "sha": "e3c32d905af74a0b2f307fc53694eb61f1c8d930",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 20,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
        "patch": "@@ -817,22 +817,23 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n }\n \n /** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int minVersion, CBlockIndex* pindex, int nRequired, const Consensus::Params& consensusParams)\n+static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n-    int nFound = 0;\n-    CBlockIndex* pstart = pindex;\n-    for (int i = 0; i < consensusParams.nMajorityWindow && pstart != NULL; i++)\n+    UniValue rv(UniValue::VOBJ);\n+    bool activated = false;\n+    switch(version)\n     {\n-        if (pstart->nVersion >= minVersion)\n-            ++nFound;\n-        pstart = pstart->pprev;\n+        case 2:\n+            activated = pindex->nHeight >= consensusParams.BIP34Height;\n+            break;\n+        case 3:\n+            activated = pindex->nHeight >= consensusParams.BIP66Height;\n+            break;\n+        case 4:\n+            activated = pindex->nHeight >= consensusParams.BIP65Height;\n+            break;\n     }\n-\n-    UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"status\", nFound >= nRequired));\n-    rv.push_back(Pair(\"found\", nFound));\n-    rv.push_back(Pair(\"required\", nRequired));\n-    rv.push_back(Pair(\"window\", consensusParams.nMajorityWindow));\n+    rv.push_back(Pair(\"status\", activated));\n     return rv;\n }\n \n@@ -841,8 +842,7 @@ static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex*\n     UniValue rv(UniValue::VOBJ);\n     rv.push_back(Pair(\"id\", name));\n     rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"enforce\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams.nMajorityRejectBlockOutdated, consensusParams)));\n+    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams)));\n     return rv;\n }\n \n@@ -897,13 +897,9 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\"\n             \"        \\\"version\\\": xx,         (numeric) block version\\n\"\n-            \"        \\\"enforce\\\": {           (object) progress toward enforcing the softfork rules for new-version blocks\\n\"\n+            \"        \\\"reject\\\": {            (object) progress toward rejecting pre-softfork blocks\\n\"\n             \"           \\\"status\\\": xx,       (boolean) true if threshold reached\\n\"\n-            \"           \\\"found\\\": xx,        (numeric) number of blocks with the new version found\\n\"\n-            \"           \\\"required\\\": xx,     (numeric) number of blocks required to trigger\\n\"\n-            \"           \\\"window\\\": xx,       (numeric) maximum size of examined window of recent blocks\\n\"\n             \"        },\\n\"\n-            \"        \\\"reject\\\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \\\"enforce\\\")\\n\"\n             \"     }, ...\\n\"\n             \"  ],\\n\"\n             \"  \\\"bip9_softforks\\\": {          (object) status of BIP9 softforks in progress\\n\""
      }
    ]
  },
  {
    "sha": "f97d335942ae1a78c4898acf8640d99f4deaa6d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTdkMzM1OTQyYWUxYTc4YzQ4OThhY2Y4NjQwZDk5ZjRkZWFhNmQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-04T10:21:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-04T10:33:21Z"
      },
      "message": "Merge #8392: Fix several node initialization issues\n\n9d4eb9a Do diskspace check before import thread is started (Pieter Wuille)\naa59f2e Add extra message to avoid a long 'Loading banlist' (Pieter Wuille)\n0fd2a33 Use a signal to continue init after genesis activation (Pieter Wuille)",
      "tree": {
        "sha": "133c24dcf1d2728db1e92d3f9e597ea1c9aa3079",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/133c24dcf1d2728db1e92d3f9e597ea1c9aa3079"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f97d335942ae1a78c4898acf8640d99f4deaa6d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXoxnxAAoJEHSBCwEjRsmmWK0H/2SGm++l+XP+pTMIkYfHCLUm\ns3WDXvnpzOMJmVghH3ec/MO9j7RDkqsc3o0m9zIZqi/vEVWsGY0LuAdmx+3eJZlr\nUxkIVj+7JgSoUj6GqwafM8jioW1ZrirULPB3BHlvS+OylJz1nwG9zILkG+B4M8iA\nPlf6rexlABoU0RclrrmMsu2keKqxYORcd3rIIgDY9S9AqaFWLR/FbSefgV8OWeWw\np5A+7Ili8N/5203453CAcri5vRL+DFjy27dsF9vzD+063Qwq/liXK6dG7JoGFmvB\nIjlvAC9eb3cj80/LjLIfsO4xwLfsorFn4xveSjO78uWPxKS/Lohx8xfJBs0eIW8=\n=fkzP\n-----END PGP SIGNATURE-----",
        "payload": "tree 133c24dcf1d2728db1e92d3f9e597ea1c9aa3079\nparent 37d83bb0a980996338d9bc9dbdbf0175eeaba9a2\nparent 9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470306119 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470306801 +0200\n\nMerge #8392: Fix several node initialization issues\n\n9d4eb9a Do diskspace check before import thread is started (Pieter Wuille)\naa59f2e Add extra message to avoid a long 'Loading banlist' (Pieter Wuille)\n0fd2a33 Use a signal to continue init after genesis activation (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f97d335942ae1a78c4898acf8640d99f4deaa6d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f97d335942ae1a78c4898acf8640d99f4deaa6d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f97d335942ae1a78c4898acf8640d99f4deaa6d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37d83bb0a980996338d9bc9dbdbf0175eeaba9a2"
      },
      {
        "sha": "9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d4eb9ad99f7c3abf7abaeaf7ea51f98f9445e75"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 40,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4d9de6cfc8c9f325e90f691506eaf388346824ae",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 13,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f97d335942ae1a78c4898acf8640d99f4deaa6d3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f97d335942ae1a78c4898acf8640d99f4deaa6d3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f97d335942ae1a78c4898acf8640d99f4deaa6d3",
        "patch": "@@ -511,6 +511,21 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n     boost::thread t(runCommand, strCmd); // thread runs free\n }\n \n+static bool fHaveGenesis = false;\n+static boost::mutex cs_GenesisWait;\n+static CConditionVariable condvar_GenesisWait;\n+\n+static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n+{\n+    if (pBlockIndex != NULL) {\n+        {\n+            boost::unique_lock<boost::mutex> lock_GenesisWait(cs_GenesisWait);\n+            fHaveGenesis = true;\n+        }\n+        condvar_GenesisWait.notify_all();\n+    }\n+}\n+\n struct CImportingNow\n {\n     CImportingNow() {\n@@ -1322,7 +1337,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     break;\n                 }\n \n-                if (!fReindex) {\n+                if (!fReindex && chainActive.Tip() != NULL) {\n                     uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n                     if (!RewindBlockIndex(chainparams)) {\n                         strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n@@ -1439,6 +1454,17 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 10: import blocks\n \n+    if (!CheckDiskSpace())\n+        return false;\n+\n+    // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n+    // No locking, as this happens before any background thread is started.\n+    if (chainActive.Tip() == NULL) {\n+        uiInterface.NotifyBlockTip.connect(BlockNotifyGenesisWait);\n+    } else {\n+        fHaveGenesis = true;\n+    }\n+\n     if (mapArgs.count(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n@@ -1448,26 +1474,20 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         BOOST_FOREACH(const std::string& strFile, mapMultiArgs[\"-loadblock\"])\n             vImportFiles.push_back(strFile);\n     }\n+\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n \n     // Wait for genesis block to be processed\n-    bool fHaveGenesis = false;\n-    while (!fHaveGenesis && !fRequestShutdown) {\n-        {\n-            LOCK(cs_main);\n-            fHaveGenesis = (chainActive.Tip() != NULL);\n-        }\n-\n-        if (!fHaveGenesis) {\n-            MilliSleep(10);\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs_GenesisWait);\n+        while (!fHaveGenesis) {\n+            condvar_GenesisWait.wait(lock);\n         }\n+        uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }\n \n     // ********************************************************* Step 11: start node\n \n-    if (!CheckDiskSpace())\n-        return false;\n-\n     if (!strErrors.str().empty())\n         return InitError(strErrors.str());\n "
      },
      {
        "sha": "3a07190a6210f233674aaea6dd47795de6632b27",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f97d335942ae1a78c4898acf8640d99f4deaa6d3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f97d335942ae1a78c4898acf8640d99f4deaa6d3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f97d335942ae1a78c4898acf8640d99f4deaa6d3",
        "patch": "@@ -4313,8 +4313,6 @@ bool InitBlockIndex(const CChainParams& chainparams)\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n                 return error(\"LoadBlockIndex(): genesis block not accepted\");\n-            if (!ActivateBestChain(state, chainparams, &block))\n-                return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {"
      },
      {
        "sha": "4bbe5059df188c74b9d1f6c67435f52394cd00e2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f97d335942ae1a78c4898acf8640d99f4deaa6d3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f97d335942ae1a78c4898acf8640d99f4deaa6d3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f97d335942ae1a78c4898acf8640d99f4deaa6d3",
        "patch": "@@ -2050,6 +2050,8 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         DumpBanlist();\n     }\n \n+    uiInterface.InitMessage(_(\"Starting network threads...\"));\n+\n     fAddressesInitialized = true;\n \n     if (semOutbound == NULL) {"
      },
      {
        "sha": "056f2982cf1eb0e8e8eca76cda73dd0b2acecc67",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f97d335942ae1a78c4898acf8640d99f4deaa6d3/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f97d335942ae1a78c4898acf8640d99f4deaa6d3/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f97d335942ae1a78c4898acf8640d99f4deaa6d3",
        "patch": "@@ -60,6 +60,11 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n         InitBlockIndex(chainparams);\n+        {\n+            CValidationState state;\n+            bool ok = ActivateBestChain(state, chainparams);\n+            BOOST_CHECK(ok);\n+        }\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);"
      }
    ]
  },
  {
    "sha": "6e6ab2c3238264b34c0c83ebf703502f5ec72848",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTZhYjJjMzIzODI2NGIzNGMwYzgzZWJmNzAzNTAyZjVlYzcyODQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-04T11:31:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-04T11:31:06Z"
      },
      "message": "Merge #8444: Fix p2p-feefilter.py for changed tx relay behavior\n\n2c517b3 Fix p2p-feefilter.py for changed tx relay behavior (Suhas Daftuar)",
      "tree": {
        "sha": "43d2c77a406b541d8ae70cf541904452bde07bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43d2c77a406b541d8ae70cf541904452bde07bdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e6ab2c3238264b34c0c83ebf703502f5ec72848",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJXoyd6AAoJEHSBCwEjRsmmtisH/0tgdxr5O6s+9GQqC84Fomck\nsQrlttfDiLauAQO4fqnroAMZmXv8KE7u0d+O2aIXlA2/ITxmZ2kLutGR0IEnZ4bp\n6eVKGihhFbj86fSY+PIhau6xH4V5wmbwXvpO6uzTlyuyAl5SlV30Xqqtxs0ZKGq/\nk/b0BeDCx2w4/oeD1ZILe68PrqvMWh3MWRiTunDFApVRBz0ndye6SOLWUMM1Kxsy\nNe7Zb+mPvS+l/2ipmKBELw0RhwyB2f/qZ0JaqLCeGtWnrxJ+KHQ2QHbkSHiWR0Sw\nXIrXl3InhWG06zb8H6i/pHZSU317usyXyyFhdAs44gWlKHLB+iHMylmyQn/vJKk=\n=89t4\n-----END PGP SIGNATURE-----",
        "payload": "tree 43d2c77a406b541d8ae70cf541904452bde07bdd\nparent f97d335942ae1a78c4898acf8640d99f4deaa6d3\nparent 2c517b3928a68c6e36b18262081a401a741cd4cd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1470310263 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1470310266 +0200\n\nMerge #8444: Fix p2p-feefilter.py for changed tx relay behavior\n\n2c517b3 Fix p2p-feefilter.py for changed tx relay behavior (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e6ab2c3238264b34c0c83ebf703502f5ec72848",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e6ab2c3238264b34c0c83ebf703502f5ec72848",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e6ab2c3238264b34c0c83ebf703502f5ec72848/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f97d335942ae1a78c4898acf8640d99f4deaa6d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f97d335942ae1a78c4898acf8640d99f4deaa6d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f97d335942ae1a78c4898acf8640d99f4deaa6d3"
      },
      {
        "sha": "2c517b3928a68c6e36b18262081a401a741cd4cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c517b3928a68c6e36b18262081a401a741cd4cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c517b3928a68c6e36b18262081a401a741cd4cd"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "96d99d38a73c13cbf43b99e8dd8cca57684b25e4",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e6ab2c3238264b34c0c83ebf703502f5ec72848/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e6ab2c3238264b34c0c83ebf703502f5ec72848/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=6e6ab2c3238264b34c0c83ebf703502f5ec72848",
        "patch": "@@ -62,6 +62,7 @@ def setup_network(self):\n \n     def run_test(self):\n         node1 = self.nodes[1]\n+        node0 = self.nodes[0]\n         # Get out of IBD\n         node1.generate(1)\n         sync_blocks(self.nodes)\n@@ -91,8 +92,17 @@ def run_test(self):\n         node1.settxfee(Decimal(\"0.00010000\"))\n         [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n         sync_mempools(self.nodes) # must be sure node 0 has received all txs \n-        time.sleep(10) # wait 10 secs to be sure its doesn't relay any\n-        assert(allInvsMatch([], test_node))\n+\n+        # Send one transaction from node0 that should be received, so that we\n+        # we can sync the test on receipt (if node1's txs were relayed, they'd\n+        # be received by the time this node0 tx is received). This is\n+        # unfortunately reliant on the current relay behavior where we batch up\n+        # to 35 entries in an inv, which means that when this next transaction\n+        # is eligible for relay, the prior transactions from node1 are eligible\n+        # as well.\n+        node0.settxfee(Decimal(\"0.00020000\"))\n+        txids = [node0.sendtoaddress(node0.getnewaddress(), 1)]\n+        assert(allInvsMatch(txids, test_node))\n         test_node.clear_invs()\n \n         # Remove fee filter and check that txs are received again"
      }
    ]
  }
]