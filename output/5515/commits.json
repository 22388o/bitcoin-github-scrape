[
  {
    "sha": "0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmNjNGUxZTA0MDgyZGFmNmU5N2UwNWJmYjI2ZTRiOTRlNTRlYTUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-12-20T10:35:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-22T23:49:54Z"
      },
      "message": "Assert on probable deadlocks if the second lock isnt try_lock",
      "tree": {
        "sha": "a3f9d2cf96fc33e95cd1c7193c4e3e43e5bfa3c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3f9d2cf96fc33e95cd1c7193c4e3e43e5bfa3c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6b11e793a2d1a106238a2838f5df1d3124217b"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 39,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1837e8d53ddb12ff01f3edec7ba88224a152f1c0",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 10,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
        "patch": "@@ -33,20 +33,22 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n+        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n+    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -62,23 +64,52 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n+    // We attempt to not assert on probably-not deadlocks by assuming that\n+    // a try lock will immediately have otherwise bailed if it had\n+    // failed to get the lock\n+    // We do this by, for the locks which triggered the potential deadlock,\n+    // in either lockorder, checking that the second of the two which is locked\n+    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n+    bool firstLocked = false;\n+    bool secondLocked = false;\n+    bool onlyMaybeDeadlock = false;\n+\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    firstLocked = false;\n+    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -101,10 +132,8 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2)) {\n+            if (lockorders.count(p2))\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n-                break;\n-            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -119,7 +148,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n }\n \n void LeaveCritical()"
      }
    ]
  }
]