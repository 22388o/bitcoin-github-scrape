[
  {
    "sha": "d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzVkZGNhOTFlYmJjZjhkOGI3OTBjM2I5ZjhjZjIxOGZhZmI3YTUz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-02T16:44:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-19T11:04:07Z"
      },
      "message": "p2p: enable CAddrMan::GetAddr_() by network, add doxygen",
      "tree": {
        "sha": "5264e3a68bbffed7b708b9c513bb91d6a31d53f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5264e3a68bbffed7b708b9c513bb91d6a31d53f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCk8KcACgkQT1chs9Dj\nkh0kqg/+NRsCiwFJjUk37tEpLE4dk2duu+yUnfc6PiWU1p/4HkGZZkVETSUEf0ky\n8lwOW+f4zGt4Bj/9n8NBFcRyYDdmyyOTKP/Ew0PT6lFFZuVsRVRc3R1HW9+Ot7ub\nDofEwlPBPiTlJ9uc8NFsNhJfgM5WExIAN7NJy8LhiwBdcbra+fq1xJaxNsQwByHy\n955TYUESnaO7syh04BK33UUfph+iFt2IReOgsXkUlq0GU/pS4oHxZKFAHkBm195d\n3Fe8RdKWq7isK5/2eUL4AwZSWG60mHxHz/LOdVzPASYyA9dHMf6qhUkzTEGLFUzm\n8+ViGWo27AOnSGAT+WJeN6ki5fytiSTiurFnMVOmjUTFFuUe48pFn5w3H6E+9fOH\nLO/LvV4eNZ23te516Dsk+zurhZZUpLZTizJ1girzbMqXPoL4oR+rh4mGIVOGm8lA\n+YWd+0DfY2pLe/19gO5QqDf80e6MhUP/TIq8OZzsj4ePhgnN+lzF369mSh7a8RsE\nTbEMl9LV3ZgaJ0K9I4osAeUqV2QNGtaPK6XKbjasUfd7yg9S8OOOIfRpcCDiX9dO\n+v9PIVrEDE4Sx7imeEnh2/SHFbl+HfZd0U7cdPWgYjl3KJrhOg/opTiwGDdQaQEk\nyRAZIGPPAm8AnL841K5Z4umyNAxEhtPOD+47hRP7U2FSICLUovQ=\n=MS8D\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKNQL2187PREskD9D/LbdFZ5BMnCKgumOxi2R8WqzxBmCP/wEGf/sZPOSCpn\n91rWNa7uxt8I8QRgpPCp8AinDOtamE84awCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQjq6i/iui7jbdJOY7\n3R1klgjxBGCk8KjwCP5OSMcghe2yAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t8BCl2mGVCbpw32EXNKHktHXBCPEEYKTwqPAIH7Zt\nV9K/BpAAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5264e3a68bbffed7b708b9c513bb91d6a31d53f9\nparent 4da26fb85d6d6d205a2794ccb98beee1302b4a25\nauthor Jon Atack <jon@atack.com> 1619973857 +0200\ncommitter Jon Atack <jon@atack.com> 1621422247 +0200\n\np2p: enable CAddrMan::GetAddr_() by network, add doxygen\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4da26fb85d6d6d205a2794ccb98beee1302b4a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4da26fb85d6d6d205a2794ccb98beee1302b4a25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4da26fb85d6d6d205a2794ccb98beee1302b4a25"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 21,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ae2f1c23a2b502ecd3fa679e9e0c82eb3ab92f43",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53",
        "patch": "@@ -7,9 +7,11 @@\n \n #include <hash.h>\n #include <logging.h>\n+#include <netaddress.h>\n #include <serialize.h>\n \n #include <cmath>\n+#include <optional>\n \n int CAddrInfo::GetTriedBucket(const uint256& nKey, const std::vector<bool> &asmap) const\n {\n@@ -481,7 +483,7 @@ int CAddrMan::Check_()\n }\n #endif\n \n-void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size_t max_pct)\n+void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size_t max_pct, std::optional<Network> network)\n {\n     size_t nNodes = vRandom.size();\n     if (max_pct != 0) {\n@@ -501,8 +503,14 @@ void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size\n         assert(mapInfo.count(vRandom[n]) == 1);\n \n         const CAddrInfo& ai = mapInfo[vRandom[n]];\n-        if (!ai.IsTerrible())\n-            vAddr.push_back(ai);\n+\n+        // Filter by network (optional)\n+        if (network != std::nullopt && ai.GetNetClass() != network) continue;\n+\n+        // Filter for quality\n+        if (ai.IsTerrible()) continue;\n+\n+        vAddr.push_back(ai);\n     }\n }\n "
      },
      {
        "sha": "cf059478a5945bc264066292a567fbf46f6b1f0a",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53",
        "patch": "@@ -20,6 +20,7 @@\n #include <hash.h>\n #include <iostream>\n #include <map>\n+#include <optional>\n #include <set>\n #include <stdint.h>\n #include <streams.h>\n@@ -278,8 +279,15 @@ friend class CAddrManTest;\n     int Check_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n #endif\n \n-    //! Select several addresses at once.\n-    void GetAddr_(std::vector<CAddress> &vAddr, size_t max_addresses, size_t max_pct) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    /**\n+     * Return all or many randomly selected addresses, optionally by network.\n+     *\n+     * @param[out] vAddr         Vector of randomly selected addresses from vRandom.\n+     * @param[in] max_addresses  Maximum number of addresses to return (0 = all).\n+     * @param[in] max_pct        Maximum percentage of addresses to return (0 = all).\n+     * @param[in] network        Select only addresses of this network (nullopt = all).\n+     */\n+    void GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size_t max_pct, std::optional<Network> network = std::nullopt) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** We have successfully connected to this peer. Calling this function\n      *  updates the CAddress's nTime, which is used in our IsTerrible()"
      }
    ]
  },
  {
    "sha": "c38981e748f438d972ba12ba998c8a8a597e01c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzg5ODFlNzQ4ZjQzOGQ5NzJiYTEyYmE5OThjOGE4YTU5N2UwMWMx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2021-05-12T14:53:25Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-19T11:04:09Z"
      },
      "message": "p2p: pull time call out of loop in CAddrMan::GetAddr_()",
      "tree": {
        "sha": "c34e8fa0dbdda0967531e2a551845c33f134a57b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c34e8fa0dbdda0967531e2a551845c33f134a57b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c38981e748f438d972ba12ba998c8a8a597e01c1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCk8KkACgkQT1chs9Dj\nkh3E+w/+O8ZJ0bF6jrJqV/IDS3uEmME/Lb8zp3xQpPCLfRRZ+qob89oZ/b+fcXS0\nYvF4JLixTrvyJr8gOmtbHvByow/+Jlt0m7ubB6kWjeIqGpwFwo5cmrw4ZuVMAcsJ\nn5XIbMaKK465SOYk32qblohePViS1fqFnDTBciuWMdlu4h5FdbGLUkSIUjH85LeB\nEq1RnLSl9gnNPIJkjIkouj7U/BQzvsXoiHHWEWS73P0960mpxsR8UIg1aDyIBz/O\nKoZ77JT/LyB0bY5QOrxudgERDN6nnQDTun/hCxSDr0oo/YkzTLcs1/SALzhzmHzJ\nT6hR6gBOb7+gahwX9EfCn6FgrgpGZVcwvH3BgxAvFwWEYqv0YPrC3ReBp8omvQPe\n9jCOjQxQ9jaScnmcKAqSgGqqe4VGtak4SgbUc68AJr3aq3fGh8uVWJTy0JE2U7yc\nwFO4ZLmwVfunj1y58I4QTabIa4J7qpJyqS5hk8ywDb+/PCU8hBOqJ3vH7Trids6n\n4l9mtylQmLEDWfnCt+v9Ve7D7H5ENEjfuA+Wvjj+TN/0HwnzkFx6lVpAioqRlHAl\nmJ6UzlrPE1/0NH6o0TFDEM4kgyLJAnr2WiRIYxDC2ZNaPnIk28u0CLxgr/Do9/u8\nfCrPj03RfwP3lgRfQwkQcDPzAOpqGTQwFtVRfYbk8ZKAHYi51hw=\n=vE9o\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBymdwI800NKfpDFBHTajU+wUdzOGM0gUzQA/8oe/MwECP/wEB8eCtkno0yV\nWKjyjJqLrh8I8SCIFAKeQbjj8IO2mphlrZS3ADdrtSQVwqXeTvUv4DSmkwjxBGCk\n8KrwCFQs/2TO+B19AIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRh\nbGxheHkuY29t//AQZKMNcXatAA2lCsBUARGmLAjxBGCk8KrwCL8xfcGa0gxJAIPf\n4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMu\nb3Jn8BDB7lwZZIebeyMnc2ZjLn31CPEgHnmTRVrYFT4oGjAG6iW06VGgg1cRkPrL\nKgcTMHHEiY0I8QRgpPCr8AgZvG26mJk20gCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c34e8fa0dbdda0967531e2a551845c33f134a57b\nparent d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53\nauthor Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com> 1620831205 +0200\ncommitter Jon Atack <jon@atack.com> 1621422249 +0200\n\np2p: pull time call out of loop in CAddrMan::GetAddr_()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c38981e748f438d972ba12ba998c8a8a597e01c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c38981e748f438d972ba12ba998c8a8a597e01c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c38981e748f438d972ba12ba998c8a8a597e01c1/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d35ddca91ebbcf8d8b790c3b9f8cf218fafb7a53"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ceab1689d7eeb3e72c17534621df02249bd783df",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c38981e748f438d972ba12ba998c8a8a597e01c1/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c38981e748f438d972ba12ba998c8a8a597e01c1/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=c38981e748f438d972ba12ba998c8a8a597e01c1",
        "patch": "@@ -494,6 +494,7 @@ void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size\n     }\n \n     // gather a list of random nodes, skipping those of low quality\n+    const int64_t now{GetAdjustedTime()};\n     for (unsigned int n = 0; n < vRandom.size(); n++) {\n         if (vAddr.size() >= nNodes)\n             break;\n@@ -508,7 +509,7 @@ void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size\n         if (network != std::nullopt && ai.GetNetClass() != network) continue;\n \n         // Filter for quality\n-        if (ai.IsTerrible()) continue;\n+        if (ai.IsTerrible(now)) continue;\n \n         vAddr.push_back(ai);\n     }"
      }
    ]
  },
  {
    "sha": "a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDlmM2RkYmJhYmZiOTcxYTUzN2YwYTZjN2FmZmIyNGUyMGZmMTky",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-02T17:03:49Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-19T11:04:11Z"
      },
      "message": "p2p: allow CAddrMan::GetAddr() by network, add doxygen",
      "tree": {
        "sha": "cc02675331f5744b962ec6aaac5b1a341da1de6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc02675331f5744b962ec6aaac5b1a341da1de6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCk8KwACgkQT1chs9Dj\nkh2ZmA/+MIfBcZEGr/LGMaYL3ZKZalv2kOw1OLrQ7E0WZVLw5ip7BSQfXyX7A05N\nr1apTIFJWbiprz9vgmEuKfnaGoOMdnocTP7AENX21L3MAD7rIm7ZyZa7CxheKmOQ\nmawuCnoFQmCRuB10FYL0bc84WDKk7Ka/eH3HBJE6rT4AcPM9y8BITQ9cROD2GEVf\nDCnlLY2ojP6M5mzx25SngL7vSYoSO8DpF6YocsBneIUSLKOLgqo/qz6WowljygKA\n/wslAJcmCcU+qZhmcLM4zbIQ6XETRCpvjUJt5JaEW2BCVHgG7yZTCdMEmRF5BcjG\nZTAJNJCjHdzPy4cPnetDwdnuopBmB4/x8NHpq384w1IpWXJPgzk6/coO96y2lXWB\nBNlIxAd9ADADadXsQdX5pgawCKXn82UEumTZyvwrFrYXayKa0W6ODfizTa9D8e64\nMxIjtdH8ugJdnhvcu23xtMKUiPJ+l4k4QjcvrMVfNjtvchllfxqTz60T5eq8zfUG\nC9rd9iOv3HcsODS27cNiznEjiB/YxwQlpac6nzQsn9pDEpnKl4odrlnNEwqJv4z5\ngWLSkRcytDAKiAGXt6bf7Va/nAp02Vs/DpNbLL8FCu9bUVRuy55Pm8xEjbtUNjIj\nCsLDdrkHnrwSaLOkQI/TL4ZCq3zDchvbsV4vED2bnvNjB95rrJ8=\n=088N\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIL0fYj+06Jd/bSLaKFXCLuQoBXKM+bdKh2qmNHG131ZiCP/wELyvD1UpKbRH\nnxDgWUgnwocI8QRgpPCt8AhjThdjNSdqdACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEMtWT5rhJFvjduOzF8qe\noDMI8QRgpPCt8AgDWz6tKWx50ACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQ/0dKUmeN3U8bwuktuZQFpAjxIFv4M/Nas3BBkQ+0\nWtzLz8IDDBDsR6frZ/3BV7oDK5udCPEgwVVE0ADI7uE75URSG0cwZXoQ0vstHcRw\ngyRD7KQ5vq8I8QRgpPCt8Aiiqr/Tv25BhACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree cc02675331f5744b962ec6aaac5b1a341da1de6c\nparent c38981e748f438d972ba12ba998c8a8a597e01c1\nauthor Jon Atack <jon@atack.com> 1619975029 +0200\ncommitter Jon Atack <jon@atack.com> 1621422251 +0200\n\np2p: allow CAddrMan::GetAddr() by network, add doxygen\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c38981e748f438d972ba12ba998c8a8a597e01c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c38981e748f438d972ba12ba998c8a8a597e01c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c38981e748f438d972ba12ba998c8a8a597e01c1"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 24,
      "deletions": 13
    },
    "files": [
      {
        "sha": "eaedfd318cc0cf0b4a61c44a24ec119b452fde43",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
        "patch": "@@ -287,7 +287,7 @@ friend class CAddrManTest;\n      * @param[in] max_pct        Maximum percentage of addresses to return (0 = all).\n      * @param[in] network        Select only addresses of this network (nullopt = all).\n      */\n-    void GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size_t max_pct, std::optional<Network> network = std::nullopt) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void GetAddr_(std::vector<CAddress>& vAddr, size_t max_addresses, size_t max_pct, std::optional<Network> network) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** We have successfully connected to this peer. Calling this function\n      *  updates the CAddress's nTime, which is used in our IsTerrible()\n@@ -723,14 +723,20 @@ friend class CAddrManTest;\n         return addrRet;\n     }\n \n-    //! Return a bunch of addresses, selected at random.\n-    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct)\n+    /**\n+     * Return all or many randomly selected addresses, optionally by network.\n+     *\n+     * @param[in] max_addresses  Maximum number of addresses to return (0 = all).\n+     * @param[in] max_pct        Maximum percentage of addresses to return (0 = all).\n+     * @param[in] network        Select only addresses of this network (nullopt = all).\n+     */\n+    std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct, std::optional<Network> network)\n     {\n         Check();\n         std::vector<CAddress> vAddr;\n         {\n             LOCK(cs);\n-            GetAddr_(vAddr, max_addresses, max_pct);\n+            GetAddr_(vAddr, max_addresses, max_pct, network);\n         }\n         Check();\n         return vAddr;"
      },
      {
        "sha": "b7bd8a32612b6481e5b7f51dea5de25ea7a6112b",
        "filename": "src/bench/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
        "patch": "@@ -7,6 +7,7 @@\n #include <random.h>\n #include <util/time.h>\n \n+#include <optional>\n #include <vector>\n \n /* A \"source\" is a source address from which we have received a bunch of other addresses. */\n@@ -98,7 +99,7 @@ static void AddrManGetAddr(benchmark::Bench& bench)\n     FillAddrMan(addrman);\n \n     bench.run([&] {\n-        const auto& addresses = addrman.GetAddr(2500, 23);\n+        const auto& addresses = addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23, /* network */ std::nullopt);\n         assert(addresses.size() > 0);\n     });\n }"
      },
      {
        "sha": "dfdf9eb8fab9a3f7ac9c19f7d8f15e924af58030",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
        "patch": "@@ -2671,7 +2671,7 @@ CConnman::~CConnman()\n \n std::vector<CAddress> CConnman::GetAddresses(size_t max_addresses, size_t max_pct) const\n {\n-    std::vector<CAddress> addresses = addrman.GetAddr(max_addresses, max_pct);\n+    std::vector<CAddress> addresses = addrman.GetAddr(max_addresses, max_pct, /* network */ std::nullopt);\n     if (m_banman) {\n         addresses.erase(std::remove_if(addresses.begin(), addresses.end(),\n                         [this](const CAddress& addr){return m_banman->IsDiscouraged(addr) || m_banman->IsBanned(addr);}),"
      },
      {
        "sha": "49b40924e02137fa3f3beb7737d1af5aa14ec288",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n+#include <optional>\n #include <string>\n \n class CAddrManTest : public CAddrMan\n@@ -392,7 +393,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     // Test: Sanity check, GetAddr should never return anything if addrman\n     //  is empty.\n     BOOST_CHECK_EQUAL(addrman.size(), 0U);\n-    std::vector<CAddress> vAddr1 = addrman.GetAddr(/* max_addresses */ 0, /* max_pct */0);\n+    std::vector<CAddress> vAddr1 = addrman.GetAddr(/* max_addresses */ 0, /* max_pct */ 0, /* network */ std::nullopt);\n     BOOST_CHECK_EQUAL(vAddr1.size(), 0U);\n \n     CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8333), NODE_NONE);\n@@ -415,15 +416,15 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     BOOST_CHECK(addrman.Add(addr4, source2));\n     BOOST_CHECK(addrman.Add(addr5, source1));\n \n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 0, /* max_pct */ 0).size(), 5U);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 0, /* max_pct */ 0, /* network */ std::nullopt).size(), 5U);\n     // Net processing asks for 23% of addresses. 23% of 5 is 1 rounded down.\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23).size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23, /* network */ std::nullopt).size(), 1U);\n \n     // Test: Ensure GetAddr works with new and tried addresses.\n     addrman.Good(CAddress(addr1, NODE_NONE));\n     addrman.Good(CAddress(addr2, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 0, /* max_pct */ 0).size(), 5U);\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23).size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 0, /* max_pct */ 0, /* network */ std::nullopt).size(), 5U);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23, /* network */ std::nullopt).size(), 1U);\n \n     // Test: Ensure GetAddr still returns 23% when addrman has many addrs.\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n@@ -438,7 +439,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n         if (i % 8 == 0)\n             addrman.Good(addr);\n     }\n-    std::vector<CAddress> vAddr = addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23);\n+    std::vector<CAddress> vAddr = addrman.GetAddr(/* max_addresses */ 2500, /* max_pct */ 23, /* network */ std::nullopt);\n \n     size_t percent23 = (addrman.size() * 23) / 100;\n     BOOST_CHECK_EQUAL(vAddr.size(), percent23);"
      },
      {
        "sha": "98ae32a8d0a0f5b1c9431cbe6936ab4c263bc9e6",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49f3ddbbabfb971a537f0a6c7affb24e20ff192/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
        "patch": "@@ -60,7 +60,10 @@ FUZZ_TARGET_INIT(addrman, initialize_addrman)\n                 (void)addr_man.Select(fuzzed_data_provider.ConsumeBool());\n             },\n             [&] {\n-                (void)addr_man.GetAddr(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096), fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096));\n+                (void)addr_man.GetAddr(\n+                    /* max_addresses */ fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096),\n+                    /* max_pct */ fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 4096),\n+                    /* network */ std::nullopt);\n             },\n             [&] {\n                 const std::optional<CAddress> opt_address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);"
      }
    ]
  },
  {
    "sha": "80ba294854e5025bcada58f1403858e6ea1d4380",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGJhMjk0ODU0ZTUwMjViY2FkYTU4ZjE0MDM4NThlNmVhMWQ0Mzgw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-02T17:05:42Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-19T11:05:54Z"
      },
      "message": "p2p: allow CConnman::GetAddresses() by network, add doxygen",
      "tree": {
        "sha": "24849fb98a37fdf03e65b92d4b030dc547c9a07b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24849fb98a37fdf03e65b92d4b030dc547c9a07b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80ba294854e5025bcada58f1403858e6ea1d4380",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCk8RgACgkQT1chs9Dj\nkh0hvA//Q7MW9FmfzA3m1W58MLVs0WuxxfRofj5OrzR9Wm3vJ+VHBGvv3y9ZkE7c\naJKcM/RAYArSllc5GcBKm7eWWdv4HYsdffnspOvnr8BQe8REpdPTk7kUrMxFyjzf\no943KebzbxH97Xo1d86yCBW7e51WAZOTr1pEXQbKs4ylCeJBa+1zuFv/KswaSPPI\nSwWm1ieCxZ5FNxF0HDvM35cUR8dsFRncvrw+NRGWDJ3abo/o/feumPYyb07DfxFE\nzZSFtq4PhbpW8vaFCxO4Pj9hYxLoQFn3pjY5HGgNZvq9oFjBopjXOvIZ5UbcXbNt\nOs/31VpKUNXIRWpgPeLKl92A5gAFAFs2DD3BE/qm8s8Z9wW/cck3Dy9CIpmiKHaf\nNyYIysem7dsZwyCxn3L2NDpkxXE3XZ+xdPSNBBVVQoyIeCSXRqyfaSGqWgykCrVC\nt42ngoNFPOvsX95Z1TfhPMMl2l9rbIoUjd0JR1nhMNxE1Rk+rXn4uN8+kZFJGLcg\nfcz8xfU3pEX8MIN32AWGVxOJVavKorrlyeIaHXVuWrXz/+psuMONcW3H1LHj24TB\nO+3DdSsY7zHk9TEkftDv/HcDDf63ebKLSkZn5fC8EWs0aPCO0T2wIcEiohHsN+aQ\n0XF4InI83JJktTbq2T5ClY/nKdUK2Kn3gKVr61rfq5lm71ptDH8=\n=M2dU\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEbuWZltKYJC6EyamEPSmR/ZSVTEaT+2gktB7rvZpPlSCP/wEBdFMQOpGIkS\nNgP2j4jIU2oI8QRgpPEa8AjxMDEREnxNpgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQY5nToKzrszdV/iTM\nmIBD3AjxIJzocDmeJSVn5zA5U4Ba+j8MZyJaZK57rpzmtETjjsVaCPEEYKTxGvAI\nV65gjxyQ4zcAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmfwEK7U8+sWlBce2L0u3AimD0wI8SDj9yduAusfGulvJylF\nMBoeeAgZdCT+DgUxMaEqZu3riwjxBGCk8RnwCIqLPD98hMo9AIPf4w0u+QyOIyJo\ndHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 24849fb98a37fdf03e65b92d4b030dc547c9a07b\nparent a49f3ddbbabfb971a537f0a6c7affb24e20ff192\nauthor Jon Atack <jon@atack.com> 1619975142 +0200\ncommitter Jon Atack <jon@atack.com> 1621422354 +0200\n\np2p: allow CConnman::GetAddresses() by network, add doxygen\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ba294854e5025bcada58f1403858e6ea1d4380",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80ba294854e5025bcada58f1403858e6ea1d4380",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ba294854e5025bcada58f1403858e6ea1d4380/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49f3ddbbabfb971a537f0a6c7affb24e20ff192",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a49f3ddbbabfb971a537f0a6c7affb24e20ff192"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 24,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1322c971fb13544ad438e6dd4461b4f53ab89b28",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ba294854e5025bcada58f1403858e6ea1d4380/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ba294854e5025bcada58f1403858e6ea1d4380/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=80ba294854e5025bcada58f1403858e6ea1d4380",
        "patch": "@@ -16,6 +16,7 @@\n #include <crypto/sha256.h>\n #include <i2p.h>\n #include <net_permissions.h>\n+#include <netaddress.h>\n #include <netbase.h>\n #include <node/ui_interface.h>\n #include <protocol.h>\n@@ -2669,9 +2670,9 @@ CConnman::~CConnman()\n     Stop();\n }\n \n-std::vector<CAddress> CConnman::GetAddresses(size_t max_addresses, size_t max_pct) const\n+std::vector<CAddress> CConnman::GetAddresses(size_t max_addresses, size_t max_pct, std::optional<Network> network) const\n {\n-    std::vector<CAddress> addresses = addrman.GetAddr(max_addresses, max_pct, /* network */ std::nullopt);\n+    std::vector<CAddress> addresses = addrman.GetAddr(max_addresses, max_pct, network);\n     if (m_banman) {\n         addresses.erase(std::remove_if(addresses.begin(), addresses.end(),\n                         [this](const CAddress& addr){return m_banman->IsDiscouraged(addr) || m_banman->IsBanned(addr);}),\n@@ -2691,7 +2692,7 @@ std::vector<CAddress> CConnman::GetAddresses(CNode& requestor, size_t max_addres\n     auto r = m_addr_response_caches.emplace(cache_id, CachedAddrResponse{});\n     CachedAddrResponse& cache_entry = r.first->second;\n     if (cache_entry.m_cache_entry_expiration < current_time) { // If emplace() added new one it has expiration 0.\n-        cache_entry.m_addrs_response_cache = GetAddresses(max_addresses, max_pct);\n+        cache_entry.m_addrs_response_cache = GetAddresses(max_addresses, max_pct, /* network */ std::nullopt);\n         // Choosing a proper cache lifetime is a trade-off between the privacy leak minimization\n         // and the usefulness of ADDR responses to honest users.\n         //"
      },
      {
        "sha": "28f2d9ace6b9e30ed511bad8f46e5d3aeefba569",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ba294854e5025bcada58f1403858e6ea1d4380/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ba294854e5025bcada58f1403858e6ea1d4380/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=80ba294854e5025bcada58f1403858e6ea1d4380",
        "patch": "@@ -923,7 +923,14 @@ class CConnman\n     };\n \n     // Addrman functions\n-    std::vector<CAddress> GetAddresses(size_t max_addresses, size_t max_pct) const;\n+    /**\n+     * Return all or many randomly selected addresses, optionally by network.\n+     *\n+     * @param[in] max_addresses  Maximum number of addresses to return (0 = all).\n+     * @param[in] max_pct        Maximum percentage of addresses to return (0 = all).\n+     * @param[in] network        Select only addresses of this network (nullopt = all).\n+     */\n+    std::vector<CAddress> GetAddresses(size_t max_addresses, size_t max_pct, std::optional<Network> network) const;\n     /**\n      * Cache is used to minimize topology leaks, so it should\n      * be used for all non-trusted calls, for example, p2p."
      },
      {
        "sha": "cee241961012fb27b5946f0d967b9e4fc028d503",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ba294854e5025bcada58f1403858e6ea1d4380/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ba294854e5025bcada58f1403858e6ea1d4380/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=80ba294854e5025bcada58f1403858e6ea1d4380",
        "patch": "@@ -3586,7 +3586,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         pfrom.vAddrToSend.clear();\n         std::vector<CAddress> vAddr;\n         if (pfrom.HasPermission(NetPermissionFlags::Addr)) {\n-            vAddr = m_connman.GetAddresses(MAX_ADDR_TO_SEND, MAX_PCT_ADDR_TO_SEND);\n+            vAddr = m_connman.GetAddresses(MAX_ADDR_TO_SEND, MAX_PCT_ADDR_TO_SEND, /* network */ std::nullopt);\n         } else {\n             vAddr = m_connman.GetAddresses(pfrom, MAX_ADDR_TO_SEND, MAX_PCT_ADDR_TO_SEND);\n         }"
      },
      {
        "sha": "18e4355e8862d8844ad9dc0e3fab152910060f6f",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ba294854e5025bcada58f1403858e6ea1d4380/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ba294854e5025bcada58f1403858e6ea1d4380/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=80ba294854e5025bcada58f1403858e6ea1d4380",
        "patch": "@@ -28,6 +28,8 @@\n #include <version.h>\n #include <warnings.h>\n \n+#include <optional>\n+\n #include <univalue.h>\n \n const std::vector<std::string> CONNECTION_TYPE_DOC{\n@@ -878,7 +880,7 @@ static RPCHelpMan getnodeaddresses()\n     if (count < 0) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Address count out of range\");\n \n     // returns a shuffled list of CAddress\n-    const std::vector<CAddress> vAddr{connman.GetAddresses(count, /* max_pct */ 0)};\n+    const std::vector<CAddress> vAddr{connman.GetAddresses(count, /* max_pct */ 0, /* network */ std::nullopt)};\n     UniValue ret(UniValue::VARR);\n \n     for (const CAddress& addr : vAddr) {"
      },
      {
        "sha": "3e9998af30d63084056815779b208c12298b5511",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ba294854e5025bcada58f1403858e6ea1d4380/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ba294854e5025bcada58f1403858e6ea1d4380/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=80ba294854e5025bcada58f1403858e6ea1d4380",
        "patch": "@@ -71,10 +71,16 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n                 (void)connman.ForNode(fuzzed_data_provider.ConsumeIntegral<NodeId>(), [&](auto) { return fuzzed_data_provider.ConsumeBool(); });\n             },\n             [&] {\n-                (void)connman.GetAddresses(fuzzed_data_provider.ConsumeIntegral<size_t>(), fuzzed_data_provider.ConsumeIntegral<size_t>());\n+                (void)connman.GetAddresses(\n+                    /* max_addresses */ fuzzed_data_provider.ConsumeIntegral<size_t>(),\n+                    /* max_pct */ fuzzed_data_provider.ConsumeIntegral<size_t>(),\n+                    /* network */ std::nullopt);\n             },\n             [&] {\n-                (void)connman.GetAddresses(random_node, fuzzed_data_provider.ConsumeIntegral<size_t>(), fuzzed_data_provider.ConsumeIntegral<size_t>());\n+                (void)connman.GetAddresses(\n+                    /* requestor */ random_node,\n+                    /* max_addresses */ fuzzed_data_provider.ConsumeIntegral<size_t>(),\n+                    /* max_pct */ fuzzed_data_provider.ConsumeIntegral<size_t>());\n             },\n             [&] {\n                 (void)connman.GetDeterministicRandomizer(fuzzed_data_provider.ConsumeIntegral<uint64_t>());"
      }
    ]
  },
  {
    "sha": "6c98c099918bd20e2d3aa123643d6e3594e080e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Yzk4YzA5OTkxOGJkMjBlMmQzYWExMjM2NDNkNmUzNTk0ZTA4MGU0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-02T15:15:25Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-19T11:06:02Z"
      },
      "message": "rpc: enable filtering getnodeaddresses by network",
      "tree": {
        "sha": "7d0cc8cc68ab1ad9e518c55248581787df732e3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d0cc8cc68ab1ad9e518c55248581787df732e3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c98c099918bd20e2d3aa123643d6e3594e080e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCk8RoACgkQT1chs9Dj\nkh0cZQ/9HHw6q4iB7/QOaJfOHUQCb9dF8myQVfaCk7ejvsWs6sZnrgGqlvgVvWFj\nNH8oxyT1eFSamz0fBeamUj7eQJMKGlVtJXMZRJnODPLVWCuVjpjr49gVQ8DH77uf\nC1lumHrgPAct7WJOROOU6kKzVAsfDXjZERsjKJ8Q2YCNvmq9iWbQ67fjkm+gVm6+\nY5cOzWN5OtyKKyua1cS0R6OTGH2BP1CMCpzpfSQpUUfQhzipL4TI12YZWbnQ7gLp\nb5i9T2Sk2Xc55NR9muoC+0uPR0mDSw8PT3wUJzhBz6beUxiHHllKJIK+0TgT0rqY\nGsRRqTDVfyzFFICk9QahLbZ238jhdtSl/AWYXgOLh4mMpwAMCRnDqUrYonZea9bp\nik6Pmk6d932EOHzDfUKMNjG5TjhQMu4VbzejMOW5DfrVx8kS1ayCPtHZepBOyaO8\nb4QoFTkHLWbnk5TJVmYTpO3EJVAhAqBf28FmPpaVF3geS+tOEapoCjtU7/hiNsYX\nCL+qSDWSNhqAA76mpVzLoACkpnarIqKGk6tiTWI7iNK8obdmTFk3SrEZXarjcV8U\nFikaOF0ZArszbIOJhUYDqaJzn+lzx0IPyANAdbRTT+avc/1iz0B8/+dsNE0vmjMv\nASVTn1/ZD54OI/3s3o9iqpTr0CyBNufWQhN38weSDnGRk38xsxk=\n=exwq\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIP5RDA6N9TIBBrEegbb2YVGBa6AjfyiTpGOd96P3UNwQCP/wECpmd0JZT7VI\nvj0jp1jXZnAI8SCDshSNm4p0lOaQuOVB7M3fHYD5+UwwlcYB2QB80vR83AjxBGCk\n8RzwCA7meBlW/A+XAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQgUC/6YaAFTXyAIX9rPnjAwjxBGCk8RvwCEeI\nSNmSmiEcAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHku\nY29t8BCuEXndSxXaU0vNsNtLyFw4CPEEYKTxHPAIjSFI1AA4tU0Ag9/jDS75DI4u\nLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 7d0cc8cc68ab1ad9e518c55248581787df732e3b\nparent 80ba294854e5025bcada58f1403858e6ea1d4380\nauthor Jon Atack <jon@atack.com> 1619968525 +0200\ncommitter Jon Atack <jon@atack.com> 1621422362 +0200\n\nrpc: enable filtering getnodeaddresses by network\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c98c099918bd20e2d3aa123643d6e3594e080e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c98c099918bd20e2d3aa123643d6e3594e080e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c98c099918bd20e2d3aa123643d6e3594e080e4/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80ba294854e5025bcada58f1403858e6ea1d4380",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ba294854e5025bcada58f1403858e6ea1d4380",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80ba294854e5025bcada58f1403858e6ea1d4380"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "07b085ce740d50a1e1474df4ceb12b354f2c3e2d",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c98c099918bd20e2d3aa123643d6e3594e080e4/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c98c099918bd20e2d3aa123643d6e3594e080e4/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=6c98c099918bd20e2d3aa123643d6e3594e080e4",
        "patch": "@@ -853,6 +853,7 @@ static RPCHelpMan getnodeaddresses()\n                 \"\\nReturn known addresses, which can potentially be used to find new nodes in the network.\\n\",\n                 {\n                     {\"count\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The maximum number of addresses to return. Specify 0 to return all known addresses.\"},\n+                    {\"network\", RPCArg::Type::STR, RPCArg::DefaultHint{\"all networks\"}, \"Return only addresses of the specified network. Can be one of: \" + Join(GetNetworkNames(), \", \") + \".\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"\",\n@@ -869,7 +870,10 @@ static RPCHelpMan getnodeaddresses()\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getnodeaddresses\", \"8\")\n-            + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n+                    + HelpExampleCli(\"getnodeaddresses\", \"4 \\\"i2p\\\"\")\n+                    + HelpExampleCli(\"-named getnodeaddresses\", \"network=onion count=12\")\n+                    + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n+                    + HelpExampleRpc(\"getnodeaddresses\", \"4, \\\"i2p\\\"\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n@@ -879,8 +883,13 @@ static RPCHelpMan getnodeaddresses()\n     const int count{request.params[0].isNull() ? 1 : request.params[0].get_int()};\n     if (count < 0) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Address count out of range\");\n \n+    const std::optional<Network> network{request.params[1].isNull() ? std::nullopt : std::optional<Network>{ParseNetwork(request.params[1].get_str())}};\n+    if (network == NET_UNROUTABLE) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Network not recognized: %s\", request.params[1].get_str()));\n+    }\n+\n     // returns a shuffled list of CAddress\n-    const std::vector<CAddress> vAddr{connman.GetAddresses(count, /* max_pct */ 0, /* network */ std::nullopt)};\n+    const std::vector<CAddress> vAddr{connman.GetAddresses(count, /* max_pct */ 0, network)};\n     UniValue ret(UniValue::VARR);\n \n     for (const CAddress& addr : vAddr) {"
      }
    ]
  },
  {
    "sha": "3f89c0e9902338ad8a507a938dceeeb3191eece6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjg5YzBlOTkwMjMzOGFkOGE1MDdhOTM4ZGNlZWViMzE5MWVlY2U2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-02T17:42:29Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-19T11:06:04Z"
      },
      "message": "test: improve getnodeaddresses coverage, test by network",
      "tree": {
        "sha": "63a79b738ce8be62cab0d2cacb42e9af8066ff43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63a79b738ce8be62cab0d2cacb42e9af8066ff43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f89c0e9902338ad8a507a938dceeeb3191eece6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCk8RwACgkQT1chs9Dj\nkh3khRAAum3qnlDEQ/3/PS9VxcAJEL1KCX3rQnTojzjxqwNTTP3b3h/0dlLCivQ4\nZEwj/ICmNaV9akB4F/hIs67MPcQIDgRt3SKi8JqK0GzPem8EsDNImoo+dQWcGDn6\nSwsqCxCiGFH+mrWjxVu5yZFatEsVqP0KFV99qvK4ReMbHugMPWIYtnD9MzleZlur\nPG5mr+4LgPnucIO5FLfDvAzp9aYmnN6z96ypRKV40K+YHucFRUp0HwqbSuddv/Kt\nuxWBMYjirzHSyk7mzF1Z6IuKkVG94Frfnkgsvr/beB9mb7Br1LbG15SKohyie6kc\nSvp9c2yFHnFcCAWUQREcXwNTBZXZPHo1JipVfxW+0YYYB7A6G3ztK0l3pGiPnGJ2\nsCmMpgsD5mD045M5/whWfWnSWBwaPCEEkjw40zMFlL9KUmzUObvJnDLE5I3ufD6O\nl8JqA3NtNQ9aqranuEy+bexS8iroKWUPwuVvga32SRFWJEtux227/4LDdGlKxGnq\nhnpbyoyxE1ycesfEqC6QrWv+MAr7P+qO9CfZLTU7cuuaefRUBOhsB+L9HqjnW1US\nQXESJr3T4/aFQEgVJEQhN78rhtDK+M4/7r3z19sQ45pVQhJdc99RPmxbtsW3Mlza\noEx3Z2bG6VWJsztMbvJmB3Q2SEkqEyUN3l4VlewyirR+EKO5ehc=\n=sKHx\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEjwOKg3Uuaip6xfxzCdgSuatCYY+om/GGh7BZLRbaTrCP/wECEYGJV9HF2l\nROS+gRriBMoI8QRgpPEe8AiKsH+wbfJo6wCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEJzZRzBNFOHbpzIsmdfB\nRwcI8QRgpPEd8AimLwh86T5qjACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQ2b7Tt5NBRQm7P5w+WnNRLQjxBGCk8R7wCDozLLpo\niEauAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 63a79b738ce8be62cab0d2cacb42e9af8066ff43\nparent 6c98c099918bd20e2d3aa123643d6e3594e080e4\nauthor Jon Atack <jon@atack.com> 1619977349 +0200\ncommitter Jon Atack <jon@atack.com> 1621422364 +0200\n\ntest: improve getnodeaddresses coverage, test by network\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f89c0e9902338ad8a507a938dceeeb3191eece6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f89c0e9902338ad8a507a938dceeeb3191eece6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f89c0e9902338ad8a507a938dceeeb3191eece6/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c98c099918bd20e2d3aa123643d6e3594e080e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c98c099918bd20e2d3aa123643d6e3594e080e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c98c099918bd20e2d3aa123643d6e3594e080e4"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 30,
      "deletions": 19
    },
    "files": [
      {
        "sha": "2a58f8b3f776de4d4e1cd36fed225ca536a3aacf",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 30,
        "deletions": 19,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f89c0e9902338ad8a507a938dceeeb3191eece6/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f89c0e9902338ad8a507a938dceeeb3191eece6/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=3f89c0e9902338ad8a507a938dceeeb3191eece6",
        "patch": "@@ -187,43 +187,54 @@ def test_service_flags(self):\n     def test_getnodeaddresses(self):\n         self.log.info(\"Test getnodeaddresses\")\n         self.nodes[0].add_p2p_connection(P2PInterface())\n+        services = NODE_NETWORK | NODE_WITNESS\n \n-        # Add some addresses to the Address Manager over RPC. Due to the way\n-        # bucket and bucket position are calculated, some of these addresses\n-        # will collide.\n+        # Add an IPv6 address to the address manager.\n+        ipv6_addr = \"1233:3432:2434:2343:3234:2345:6546:4534\"\n+        self.nodes[0].addpeeraddress(address=ipv6_addr, port=8333)\n+\n+        # Add 10,000 IPv4 addresses to the address manager. Due to the way bucket\n+        # and bucket positions are calculated, some of these addresses will collide.\n         imported_addrs = []\n         for i in range(10000):\n             first_octet = i >> 8\n             second_octet = i % 256\n-            a = \"{}.{}.1.1\".format(first_octet, second_octet)  # IPV4\n+            a = f\"{first_octet}.{second_octet}.1.1\"\n             imported_addrs.append(a)\n             self.nodes[0].addpeeraddress(a, 8333)\n \n-        # Obtain addresses via rpc call and check they were ones sent in before.\n-        #\n-        # Maximum possible addresses in addrman is 10000, although actual\n-        # number will usually be less due to bucket and bucket position\n-        # collisions.\n-        node_addresses = self.nodes[0].getnodeaddresses(0)\n+        # Fetch the addresses via the RPC and test the results.\n+        assert_equal(len(self.nodes[0].getnodeaddresses()), 1)  # default count is 1\n+        assert_equal(len(self.nodes[0].getnodeaddresses(count=2)), 2)\n+        assert_equal(len(self.nodes[0].getnodeaddresses(network=\"ipv4\", count=8)), 8)\n+\n+        # Maximum possible addresses in AddrMan is 10000. The actual number will\n+        # usually be less due to bucket and bucket position collisions.\n+        node_addresses = self.nodes[0].getnodeaddresses(0, \"ipv4\")\n         assert_greater_than(len(node_addresses), 5000)\n         assert_greater_than(10000, len(node_addresses))\n         for a in node_addresses:\n             assert_greater_than(a[\"time\"], 1527811200)  # 1st June 2018\n-            assert_equal(a[\"services\"], NODE_NETWORK | NODE_WITNESS)\n+            assert_equal(a[\"services\"], services)\n             assert a[\"address\"] in imported_addrs\n             assert_equal(a[\"port\"], 8333)\n             assert_equal(a[\"network\"], \"ipv4\")\n \n-        node_addresses = self.nodes[0].getnodeaddresses(1)\n-        assert_equal(len(node_addresses), 1)\n+        # Test the IPv6 address.\n+        res = self.nodes[0].getnodeaddresses(0, \"ipv6\")\n+        assert_equal(len(res), 1)\n+        assert_equal(res[0][\"address\"], ipv6_addr)\n+        assert_equal(res[0][\"network\"], \"ipv6\")\n+        assert_equal(res[0][\"port\"], 8333)\n+        assert_equal(res[0][\"services\"], services)\n \n-        assert_raises_rpc_error(-8, \"Address count out of range\", self.nodes[0].getnodeaddresses, -1)\n+        # Test for the absence of onion and I2P addresses.\n+        for network in [\"onion\", \"i2p\"]:\n+            assert_equal(self.nodes[0].getnodeaddresses(0, network), [])\n \n-        # addrman's size cannot be known reliably after insertion, as hash collisions may occur\n-        # so only test that requesting a large number of addresses returns less than that\n-        LARGE_REQUEST_COUNT = 10000\n-        node_addresses = self.nodes[0].getnodeaddresses(LARGE_REQUEST_COUNT)\n-        assert_greater_than(LARGE_REQUEST_COUNT, len(node_addresses))\n+        # Test invalid arguments.\n+        assert_raises_rpc_error(-8, \"Address count out of range\", self.nodes[0].getnodeaddresses, -1)\n+        assert_raises_rpc_error(-8, \"Network not recognized: Foo\", self.nodes[0].getnodeaddresses, 1, \"Foo\")\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "ce6bca88e8c685c69686e0b8dc095ffc3e2ac34d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTZiY2E4OGU4YzY4NWM2OTY4NmUwYjhkYzA5NWZmYzNlMmFjMzRk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-03T19:09:21Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-19T11:06:06Z"
      },
      "message": "doc: release note for getnodeaddresses by network",
      "tree": {
        "sha": "651ad1612d4f8f37bacf20d81bbc4fc958ad1fd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/651ad1612d4f8f37bacf20d81bbc4fc958ad1fd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce6bca88e8c685c69686e0b8dc095ffc3e2ac34d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCk8R8ACgkQT1chs9Dj\nkh1reA//fyhc5eiR3TKrxG2zPqhmKXwQzYS9zv7Rj2qspFrQyshLbCaXEBgSaI7e\nsWQEVf8NG4ThUoLudTDVqy8TqlVzeIYLLuEOm1H7jCecP5BDkTeyBLlreBRFl63k\nE8h6lwfqDiSIWHEM6ELVeM20znCxD5+olfc3kkTiKYps/RPFDjWINiIazz1e74sm\nUo9SXZ6AycHkzqiFGr/CTLXTpalIj9nwSY1+bx0iO/d+HewRsfqw5WiDINTaxR2G\nNIzBjwashO3Mpd2bkOe9AJvrpo8ONG8WtR0gr/xghC55JTKzasN51EVQNISalK6G\nYFBUVhdxxbhr7XnW8fKBlzjMpVmLK/80hkZhbS1v1JlRdGdwPe1RR3VF5vxn+UJJ\n/Xx1kazMNE709m8Wc6UhVKs0xFPEiFVFknlPbWHcEd3H1wMymggtDBbZu+QUAuiL\nzttwwXniNubTXKlAOEQ8ZUR4fx0y4FRazIcGRdN5EpYeLmcpbfFyLlG9oXRqUt71\njmGhndcG9HRo6iuWMMi2ji6fw4wvmkOn2wIS5WglTRrMd1l0JkSR2EAFv7jzYxAl\n8LdNTkfnr48QzQDFbqaWV7yW/ivdX8Nd7MWVgIzK+W2pia3B1vRs8ukGhMVAFtTo\nkIFXDP5cBdBxzbLZiA2C/9uHVlQ3eQ1hLT0bLayzEsRdYfNwLBs=\n=qfN3\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILHsVln73wRVrHYGTJ3pWznJYINelrasAYUdZRQU/h0ECP/wEBaXfe0dhxcE\np25Y0RvCWZMI8QRgpPEg8AjRa3Xgc+kFOgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQhAxW+wNEE0Pb75+L\nRvqBmwjxBGCk8SDwCGjilzEc8AmwAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDmCXmTaOTfxlkkLnShFQp2CPEE\nYKTxH/AIh7KhmeTxqfEAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNh\ndGFsbGF4eS5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 651ad1612d4f8f37bacf20d81bbc4fc958ad1fd5\nparent 3f89c0e9902338ad8a507a938dceeeb3191eece6\nauthor Jon Atack <jon@atack.com> 1620068961 +0200\ncommitter Jon Atack <jon@atack.com> 1621422366 +0200\n\ndoc: release note for getnodeaddresses by network\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce6bca88e8c685c69686e0b8dc095ffc3e2ac34d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce6bca88e8c685c69686e0b8dc095ffc3e2ac34d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce6bca88e8c685c69686e0b8dc095ffc3e2ac34d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f89c0e9902338ad8a507a938dceeeb3191eece6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f89c0e9902338ad8a507a938dceeeb3191eece6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f89c0e9902338ad8a507a938dceeeb3191eece6"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "53106c9f82837ea4f83a2362679f28141b1772c5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce6bca88e8c685c69686e0b8dc095ffc3e2ac34d/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce6bca88e8c685c69686e0b8dc095ffc3e2ac34d/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=ce6bca88e8c685c69686e0b8dc095ffc3e2ac34d",
        "patch": "@@ -108,6 +108,12 @@ Updated RPCs\n   Respectively, these new fields indicate the duration of a ban and the time remaining until a ban expires,\n   both in seconds. Additionally, the `ban_created` field is repositioned to come before `banned_until`. (#21602)\n \n+- The `getnodeaddresses` RPC now returns a \"network\" field indicating the\n+  network type (ipv4, ipv6, onion, or i2p) for each address.  (#21594)\n+\n+- `getnodeaddresses` now also accepts a \"network\" argument (ipv4, ipv6, onion,\n+  or i2p) to return only addresses of the specified network.  (#21843)\n+\n Changes to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n \n New RPCs\n@@ -130,9 +136,6 @@ Changes to Wallet or GUI related settings can be found in the GUI or Wallet sect\n \n - Passing an invalid `-rpcauth` argument now cause bitcoind to fail to start.  (#20461)\n \n-- The `getnodeaddresses` RPC now returns a \"network\" field indicating the\n-  network type (ipv4, ipv6, onion, or i2p) for each address.  (#21594)\n-\n Tools and Utilities\n -------------------\n "
      }
    ]
  }
]