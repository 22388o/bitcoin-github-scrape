sipa,2016-06-06T13:06:57Z,"Here is a categorized list of the commits:\n- P2P/node/consensus (https://github.com/sipa/bitcoin/compare/4182520...7080d47)\n  - 8199125 BIP144: Serialization, hashes, relay (sender side)\n  - 04dd13a BIP141: Witness program\n  - 1fff664 BIP141: Commitment structure and deployment\n  - 902c279 BIP144: Handshake and relay (receiver side)\n  - 113b3e5 Refactor script validation to observe amounts\n",https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-223953094,223953094,
kanzure,2016-06-06T13:34:48Z,ACK for same git tree hash for 3cb46c1a4ac94f4a7f25368bc2ba3c784c901b89 and 17389dc466f2acf8bfa64ce0416f3b5281445a5c.\n,https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-223960154,223960154,
sipa,2016-06-12T20:32:47Z,Updated with a rebased/squashed version of the changes in #7910. The resulting tree should still be identical.\n,https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-225458658,225458658,
sipa,2016-06-13T20:33:47Z,Updated again.\n,https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-225699737,225699737,
sdaftuar,2016-06-17T05:05:30Z,ACK 74300b9a5ed24e9f7d80ecc39d4e19690732ccbe\n,https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-226681446,226681446,
jonasschnelli,2016-06-17T06:14:07Z,Reviewed everything. Tested different scenarios. Mostly focused on the wallet.\nACK 74300b9a5ed24e9f7d80ecc39d4e19690732ccbe\n,https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-226688777,226688777,
NicolasDorier,2016-06-17T10:27:31Z,"ACK 74300b9a5ed24e9f7d80ecc39d4e19690732ccbe (focused more on the scripting side, and tx signature v2, lightly reviewed the rest)\n",https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-226735778,226735778,
sipa,2016-06-22T14:08:19Z,"Rebased on top of #8068 and #8179.\n\nNote that since there is currently no written-down specification for how segwit should interact with compact blocks, I've taken the conservative approach of disabling compact blocks whenever the segwit softfork is defined (in practice this means that compact blocks won't be used on testnet, but will be on mainnet).\n\nDefining how segwit + compact blocks work ",https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-227755007,227755007,
sneurlax,2016-06-24T09:36:41Z,will run #8149 node! finally!\n,https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-228302453,228302453,
laanwj,2016-06-24T14:33:51Z,ACK f852813\n,https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-228362360,228362360,
skaag,2016-06-24T20:16:46Z,Exciting release! Great job :)\n,https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-228451450,228451450,
dcousens,2016-06-26T14:03:08Z,utACK 070dbc4 (w/ non-intensive testing done)\n,https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-228602955,228602955,
petertodd,2016-06-28T13:41:58Z,"utACK consensus critical parts, https://github.com/bitcoin/bitcoin/pull/8149/commits/070dbc48a9338375fd7ce0a86ee05b476cf487a4\n\nI wrote up an in-depth review here: https://petertodd.org/2016/segwit-consensus-critical-code-review\n\nNote that I think we may have an issue with the P2P code with the (non-consensus) handling of transactions; see the last part of my writeup: https://petertodd.org/2016",https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-229052191,229052191,
sipa,2016-11-02T16:29:59Z,"Since headers first sync (v0.10.0) we very regularly have blocks in\nmapBlockIndex that are not yet in the main chain. We first receive them as\nheaders, validate them and add them to mapBlockIndex. Then we use this\ninformation to determine which full blocks to download from which peers,\nand when we have them, they become candidates to be added to the main chain.\n",https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-257919334,257919334,
sdaftuar,2016-11-02T17:45:02Z,"@sipa @xenog: FYI the specific change to FindForkInGlobalIndex() was precipitated by the introduction of RewindBlockIndex(), which causes nodes that upgrade after segwit activation to disconnect blocks back to the activation point, so that the witness-version of those blocks could then be redownloaded and reconnected.  During that window, mapBlockIndex will be (far) ahead of chainActive.Tip().\n\n",https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-257943026,257943026,
sipa,2016-06-07T07:14:49Z,Please comment in #7910.\n,https://github.com/bitcoin/bitcoin/pull/8149#discussion_r66020110,66020110,src/test/sigopcount_tests.cpp
rebroad,2016-08-25T02:35:48Z,How does SegWit impact on the usefulness of Compact Blocks?\n,https://github.com/bitcoin/bitcoin/pull/8149#discussion_r76172305,76172305,src/main.cpp
sipa,2016-08-25T06:32:22Z,"@rebroad Read BIP 141, 143, 144.\n\nYes, segregated witness full nodes only download from other witness nodes.\nThere is no way around that: they require the witness data to be able to\nverify blocks, and non-witness nodes cannot provide that.\n\nSee #8393 for how to make compact blocks support segregated witness.\n",https://github.com/bitcoin/bitcoin/pull/8149#discussion_r76187086,76187086,src/main.cpp
rebroad,2016-08-25T10:10:41Z,"Ok, I have to ask (as I've been wondering about this for a while), but what is the purpose of this GetId() function? Why use it instead of the variable id?\n",https://github.com/bitcoin/bitcoin/pull/8149#discussion_r76216046,76216046,src/main.cpp
sipa,2016-08-25T10:13:27Z,http://stackoverflow.com/questions/1568091/why-use-getters-and-setters\n,https://github.com/bitcoin/bitcoin/pull/8149#discussion_r76216704,76216704,src/main.cpp
rebroad,2016-08-26T10:24:02Z,"How is this useful? `(pfrom->nServices & NODE_WITNESS)` is 33 characters, `State(pfrom->GetId())->fHaveWitness` is 35 characters. It's easier and quicker and uses up less memory to type the thing this variable returns.\n",https://github.com/bitcoin/bitcoin/pull/8149#discussion_r76397641,76397641,src/main.cpp
rebroad,2016-08-26T10:30:13Z,"Maybe I'm misreading the code, but once SegWit activates then where is the code that downloads blocks upon receiving a block inv? Block invs are no longer responded to?\n",https://github.com/bitcoin/bitcoin/pull/8149#discussion_r76398254,76398254,src/main.cpp
sipa,2016-08-26T10:34:35Z,Read the part of the line after `||`.\n,https://github.com/bitcoin/bitcoin/pull/8149#discussion_r76398705,76398705,src/main.cpp
rebroad,2016-08-26T10:51:44Z,"Sorry, it's taking me a while to get my head around this - I keep making the assumption that most nodes won't be running SegWit for some reason!!\n",https://github.com/bitcoin/bitcoin/pull/8149#discussion_r76400290,76400290,src/main.cpp
rebroad,2016-09-16T04:05:51Z,So witness nodes won't make outbound connections to non-witness nodes? This puts a reliance on witness nodes that can receive inbound connections as these will be the only witness nodes talking to the non-witness nodes.\n,https://github.com/bitcoin/bitcoin/pull/8149#discussion_r79103769,79103769,src/init.cpp
jprupp,2016-11-02T13:23:26Z,"I understand this as: if we have a block hash that the caller sent us in our `mapBlockIndex` that is not in the main chain, but is a descendant of our best block, then send our best block. Is there a case where our `mapBlockIndex` knows about a block that is higher than the tip of our chain? Are these data structures not kept in sync so that all the blocks in `mapBlockIndex` are also in `chain`?\n",https://github.com/bitcoin/bitcoin/pull/8149#discussion_r86138998,86138998,src/main.cpp
