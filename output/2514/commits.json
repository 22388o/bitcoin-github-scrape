[
  {
    "sha": "84db464b10036ce5f2d3a6276b2047fd87dec9d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGRiNDY0YjEwMDM2Y2U1ZjJkM2E2Mjc2YjIwNDdmZDg3ZGVjOWQ4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-04-11T20:53:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-04-11T22:07:22Z"
      },
      "message": "Add test patches for pull-tester to contrib/",
      "tree": {
        "sha": "2b69cedb714ee9de55268ac3635bcc86782c588e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b69cedb714ee9de55268ac3635bcc86782c588e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84db464b10036ce5f2d3a6276b2047fd87dec9d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84db464b10036ce5f2d3a6276b2047fd87dec9d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84db464b10036ce5f2d3a6276b2047fd87dec9d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84db464b10036ce5f2d3a6276b2047fd87dec9d8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3656a3c55833ee6afbe12f41fc7ab2471725e322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3656a3c55833ee6afbe12f41fc7ab2471725e322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3656a3c55833ee6afbe12f41fc7ab2471725e322"
      }
    ],
    "stats": {
      "total": 385,
      "additions": 385,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ed754cea7a3b420d5cd3b134379893579b9eea0c",
        "filename": "contrib/test-patches/README",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/README?ref=84db464b10036ce5f2d3a6276b2047fd87dec9d8",
        "patch": "@@ -0,0 +1,4 @@\n+These patches are applied when the automated pull-tester\n+tests each pull and when master is tested using jenkins.\n+You can find more information about the tests run at\n+http://jenkins.bluematt.me/pull-tester/files/"
      },
      {
        "sha": "04a8618286606e887c8b0cd4c495b5075cd1047d",
        "filename": "contrib/test-patches/bitcoind-comparison.patch",
        "status": "added",
        "additions": 196,
        "deletions": 0,
        "changes": 196,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/bitcoind-comparison.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/bitcoind-comparison.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/bitcoind-comparison.patch?ref=84db464b10036ce5f2d3a6276b2047fd87dec9d8",
        "patch": "@@ -0,0 +1,196 @@\n+diff --git a/src/main.cpp b/src/main.cpp\n+index 8c115c2..1e70ff2 100644\n+--- a/src/main.cpp\n++++ b/src/main.cpp\n+@@ -31,8 +31,8 @@ CTxMemPool mempool;\n+ unsigned int nTransactionsUpdated = 0;\n+ \n+ map<uint256, CBlockIndex*> mapBlockIndex;\n+-uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n+-static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n++uint256 hashGenesisBlock(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\");\n++static CBigNum bnProofOfWorkLimit(~uint256(0) >> 1);\n+ CBlockIndex* pindexGenesisBlock = NULL;\n+ int nBestHeight = -1;\n+ CBigNum bnBestChainWork = 0;\n+@@ -1055,7 +1055,7 @@ int64 static GetBlockValue(int nHeight, int64 nFees)\n+     int64 nSubsidy = 50 * COIN;\n+ \n+     // Subsidy is cut in half every 210000 blocks, which will occur approximately every 4 years\n+-    nSubsidy >>= (nHeight / 210000);\n++    nSubsidy >>= (nHeight / 150);\n+ \n+     return nSubsidy + nFees;\n+ }\n+@@ -2706,9 +2706,9 @@ bool InitBlockIndex() {\n+         block.hashPrevBlock = 0;\n+         block.hashMerkleRoot = block.BuildMerkleTree();\n+         block.nVersion = 1;\n+-        block.nTime    = 1231006505;\n+-        block.nBits    = 0x1d00ffff;\n+-        block.nNonce   = 2083236893;\n++        block.nTime    = 1296688602;\n++        block.nBits    = 0x207fffff;\n++        block.nNonce   = 2;\n+ \n+         if (fTestNet)\n+         {\n+@@ -3007,7 +3007,7 @@ bool static AlreadyHave(const CInv& inv)\n+ // The message start string is designed to be unlikely to occur in normal data.\n+ // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n+ // a large 4-byte int at any alignment.\n+-unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n++unsigned char pchMessageStart[4] = { 0xfa, 0xbf, 0xb5, 0xda };\n+ \n+ \n+ void static ProcessGetData(CNode* pfrom)\n+diff --git a/src/test/miner_tests.cpp b/src/test/miner_tests.cpp\n+index af28465..ee9a4db 100644\n+--- a/src/test/miner_tests.cpp\n++++ b/src/test/miner_tests.cpp\n+@@ -15,34 +15,117 @@ struct {\n+     unsigned char extranonce;\n+     unsigned int nonce;\n+ } blockinfo[] = {\n+-    {4, 0xa4a3e223}, {2, 0x15c32f9e}, {1, 0x0375b547}, {1, 0x7004a8a5},\n+-    {2, 0xce440296}, {2, 0x52cfe198}, {1, 0x77a72cd0}, {2, 0xbb5d6f84},\n+-    {2, 0x83f30c2c}, {1, 0x48a73d5b}, {1, 0xef7dcd01}, {2, 0x6809c6c4},\n+-    {2, 0x0883ab3c}, {1, 0x087bbbe2}, {2, 0x2104a814}, {2, 0xdffb6daa},\n+-    {1, 0xee8a0a08}, {2, 0xba4237c1}, {1, 0xa70349dc}, {1, 0x344722bb},\n+-    {3, 0xd6294733}, {2, 0xec9f5c94}, {2, 0xca2fbc28}, {1, 0x6ba4f406},\n+-    {2, 0x015d4532}, {1, 0x6e119b7c}, {2, 0x43e8f314}, {2, 0x27962f38},\n+-    {2, 0xb571b51b}, {2, 0xb36bee23}, {2, 0xd17924a8}, {2, 0x6bc212d9},\n+-    {1, 0x630d4948}, {2, 0x9a4c4ebb}, {2, 0x554be537}, {1, 0xd63ddfc7},\n+-    {2, 0xa10acc11}, {1, 0x759a8363}, {2, 0xfb73090d}, {1, 0xe82c6a34},\n+-    {1, 0xe33e92d7}, {3, 0x658ef5cb}, {2, 0xba32ff22}, {5, 0x0227a10c},\n+-    {1, 0xa9a70155}, {5, 0xd096d809}, {1, 0x37176174}, {1, 0x830b8d0f},\n+-    {1, 0xc6e3910e}, {2, 0x823f3ca8}, {1, 0x99850849}, {1, 0x7521fb81},\n+-    {1, 0xaacaabab}, {1, 0xd645a2eb}, {5, 0x7aea1781}, {5, 0x9d6e4b78},\n+-    {1, 0x4ce90fd8}, {1, 0xabdc832d}, {6, 0x4a34f32a}, {2, 0xf2524c1c},\n+-    {2, 0x1bbeb08a}, {1, 0xad47f480}, {1, 0x9f026aeb}, {1, 0x15a95049},\n+-    {2, 0xd1cb95b2}, {2, 0xf84bbda5}, {1, 0x0fa62cd1}, {1, 0xe05f9169},\n+-    {1, 0x78d194a9}, {5, 0x3e38147b}, {5, 0x737ba0d4}, {1, 0x63378e10},\n+-    {1, 0x6d5f91cf}, {2, 0x88612eb8}, {2, 0xe9639484}, {1, 0xb7fabc9d},\n+-    {2, 0x19b01592}, {1, 0x5a90dd31}, {2, 0x5bd7e028}, {2, 0x94d00323},\n+-    {1, 0xa9b9c01a}, {1, 0x3a40de61}, {1, 0x56e7eec7}, {5, 0x859f7ef6},\n+-    {1, 0xfd8e5630}, {1, 0x2b0c9f7f}, {1, 0xba700e26}, {1, 0x7170a408},\n+-    {1, 0x70de86a8}, {1, 0x74d64cd5}, {1, 0x49e738a1}, {2, 0x6910b602},\n+-    {0, 0x643c565f}, {1, 0x54264b3f}, {2, 0x97ea6396}, {2, 0x55174459},\n+-    {2, 0x03e8779a}, {1, 0x98f34d8f}, {1, 0xc07b2b07}, {1, 0xdfe29668},\n+-    {1, 0x3141c7c1}, {1, 0xb3b595f4}, {1, 0x735abf08}, {5, 0x623bfbce},\n+-    {2, 0xd351e722}, {1, 0xf4ca48c9}, {1, 0x5b19c670}, {1, 0xa164bf0e},\n+-    {2, 0xbbbeb305}, {2, 0xfe1c810a},\n++{4, 2762203683},\n++{2, 365113248},\n++{1, 58045772},\n++{1, 1879353512},\n++{2, 3460563607},\n++{2, 1389355416},\n++{1, 2007444690},\n++{2, 3143462790},\n++{2, 2213743660},\n++{1, 1218919771},\n++{1, 4017999107},\n++{2, 1745471173},\n++{2, 142846780},\n++{1, 142326754},\n++{2, 553953301},\n++{2, 3757796778},\n++{1, 4002023946},\n++{2, 3124901826},\n++{1, 2802010589},\n++{1, 877077181},\n++{3, 3593029427},\n++{2, 3969866902},\n++{2, 3392125996},\n++{1, 1805972490},\n++{2, 22889779},\n++{1, 1846647676},\n++{2, 1139340052},\n++{2, 664153912},\n++{2, 3044128027},\n++{2, 3010194979},\n++{2, 3514377385},\n++{2, 1807880922},\n++{1, 1661815113},\n++{2, 2588692156},\n++{2, 1431037239},\n++{1, 3594379210},\n++{2, 2701839377},\n++{1, 1973060452},\n++{2, 4218620174},\n++{1, 3895224884},\n++{1, 3812528857},\n++{3, 1703867851},\n++{2, 3123904294},\n++{5, 36151564},\n++{1, 2846294357},\n++{5, 3499546633},\n++{1, 924279160},\n++{1, 2198572304},\n++{1, 3336802574},\n++{2, 2185182379},\n++{1, 2575632458},\n++{1, 1965161345},\n++{1, 2865408940},\n++{1, 3594887915},\n++{5, 2062161796},\n++{5, 2641251194},\n++{1, 1290342362},\n++{1, 2883355438},\n++{6, 1244984107},\n++{2, 4065479712},\n++{2, 465481866},\n++{1, 2907174016},\n++{1, 2667735788},\n++{1, 363417673},\n++{2, 3519780275},\n++{2, 4165713317},\n++{1, 262548689},\n++{1, 3764359529},\n++{1, 2027001003},\n++{5, 1043862655},\n++{5, 1937481940},\n++{1, 1664585233},\n++{1, 1834979792},\n++{2, 2288070330},\n++{2, 3915617412},\n++{1, 3086662813},\n++{2, 430970259},\n++{1, 1519443249},\n++{2, 1540874280},\n++{2, 2496660261},\n++{1, 2847522842},\n++{1, 977329763},\n++{1, 1458040519},\n++{5, 2241822454},\n++{1, 4253963824},\n++{1, 722247551},\n++{1, 3127905834},\n++{1, 1903207432},\n++{1, 1893631657},\n++{1, 1960201429},\n++{1, 1239890082},\n++{2, 1762702850},\n++{0, 1681675873},\n++{1, 1411795775},\n++{2, 2548720534},\n++{2, 1427588186},\n++{2, 65566621},\n++{1, 2566081936},\n++{1, 3229297415},\n++{1, 3756168812},\n++{1, 826394561},\n++{1, 3015022068},\n++{1, 1935326986},\n++{5, 1648098256},\n++{2, 3545360164},\n++{1, 4106897609},\n++{1, 1528415857},\n++{1, 2707734286},\n++{2, 3149837061},\n++{2, 4263280906},\n++\n+ };\n+ \n+ // NOTE: These tests rely on CreateNewBlock doing its own self-validation!"
      },
      {
        "sha": "a5aec641ce3cd8d66a3bfc3d0d9794306457a75f",
        "filename": "contrib/test-patches/temp-revert-1.patch",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/temp-revert-1.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/temp-revert-1.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-1.patch?ref=84db464b10036ce5f2d3a6276b2047fd87dec9d8",
        "patch": "@@ -0,0 +1,21 @@\n+commit 4dcc8701ac0eb09d8992d19fb411cee3c9aaf394\n+Author: Matt Corallo <git@bluematt.me>\n+Date:   Sun Mar 24 20:45:44 2013 -0400\n+\n+    Revert \"Update unit test to match rule enforcement starts 21 March\"\n+    \n+    This reverts commit d3e8c6a9d3fad68b0eee4434401ec7b3066399a2.\n+\n+diff --git a/src/test/checkblock_tests.cpp b/src/test/checkblock_tests.cpp\n+index 3cfb6db..e167def 100644\n+--- a/src/test/checkblock_tests.cpp\n++++ b/src/test/checkblock_tests.cpp\n+@@ -52,7 +52,7 @@ BOOST_AUTO_TEST_CASE(May15)\n+     if (read_block(\"Mar12Fork.dat\", forkingBlock))\n+     {\n+         CValidationState state;\n+-        forkingBlock.nTime = tMay15-1; // Invalidates PoW\n++        BOOST_CHECK(!forkingBlock.CheckBlock(state, true, true));\n+         BOOST_CHECK(!forkingBlock.CheckBlock(state, false, false));\n+ \n+         // After May 15'th, big blocks are OK:"
      },
      {
        "sha": "1cd043d0d7739e927c297ec93afad552525aed7b",
        "filename": "contrib/test-patches/temp-revert-2.patch",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/temp-revert-2.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/temp-revert-2.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-2.patch?ref=84db464b10036ce5f2d3a6276b2047fd87dec9d8",
        "patch": "@@ -0,0 +1,20 @@\n+commit cfae26916dba311f6f75d444301c1f9362267c3e\n+Author: Matt Corallo <git@bluematt.me>\n+Date:   Sun Mar 24 20:45:50 2013 -0400\n+\n+    Revert \"Checkpoint at first block in 11 March chain fork\"\n+    \n+    This reverts commit f817c496a1482d05b22c8e539de67f07db1c09d9.\n+\n+diff --git a/src/checkpoints.cpp b/src/checkpoints.cpp\n+index 62234b9..9b11f0b 100644\n+--- a/src/checkpoints.cpp\n++++ b/src/checkpoints.cpp\n+@@ -44,7 +44,6 @@ namespace Checkpoints\n+         (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n+         (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n+         (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n+-        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n+         ;\n+     static const CCheckpointData data = {\n+         &mapCheckpoints,"
      },
      {
        "sha": "5c0775dfa58a6af51a1813577b4f92c1808dd666",
        "filename": "contrib/test-patches/temp-revert-3.patch",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/temp-revert-3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/temp-revert-3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-3.patch?ref=84db464b10036ce5f2d3a6276b2047fd87dec9d8",
        "patch": "@@ -0,0 +1,34 @@\n+commit ba84709c65b911798ddae1285d807f4cd036990d\n+Author: Matt Corallo <git@bluematt.me>\n+Date:   Sun Mar 24 20:45:56 2013 -0400\n+\n+    Revert \"Before 15 May, limit created block size to 500K\"\n+    \n+    This reverts commit 402f19b64530775a7e4ded025c80d8c16a55e454.\n+\n+diff --git a/src/main.cpp b/src/main.cpp\n+index 22baf0f..51ada0a 100644\n+--- a/src/main.cpp\n++++ b/src/main.cpp\n+@@ -2057,8 +2057,8 @@ bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerk\n+         return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n+ \n+     // Special short-term limits to avoid 10,000 BDB lock limit:\n+-    if (GetBlockTime() >= 1363867200 && // start enforcing 21 March 2013, noon GMT\n+-        GetBlockTime() < 1368576000)  // stop enforcing 15 May 2013 00:00:00\n++    if (GetBlockTime() > 1363039171 && // 11 March 2013, timestamp of block before the big fork\n++        GetBlockTime() < 1368576000)  // 15 May 2013 00:00:00\n+     {\n+         // Rule is: #unique txids referenced <= 4,500\n+         // ... to prevent 10,000 BDB lock exhaustion on old clients\n+@@ -4155,10 +4155,6 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n+     // Limit to betweeen 1K and MAX_BLOCK_SIZE-1K for sanity:\n+     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SIZE-1000), nBlockMaxSize));\n+ \n+-    // Special compatibility rule before 15 May: limit size to 500,000 bytes:\n+-    if (GetAdjustedTime() < 1368576000)\n+-        nBlockMaxSize = std::min(nBlockMaxSize, (unsigned int)(MAX_BLOCK_SIZE_GEN));\n+-\n+     // How much of the block should be dedicated to high-priority transactions,\n+     // included regardless of the fees they pay\n+     unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", 27000);"
      },
      {
        "sha": "f93d7549c0a13a5cceb069765b289f4b0b50b9e2",
        "filename": "contrib/test-patches/temp-revert-4.patch",
        "status": "added",
        "additions": 110,
        "deletions": 0,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/temp-revert-4.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84db464b10036ce5f2d3a6276b2047fd87dec9d8/contrib/test-patches/temp-revert-4.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/temp-revert-4.patch?ref=84db464b10036ce5f2d3a6276b2047fd87dec9d8",
        "patch": "@@ -0,0 +1,110 @@\n+commit ca96b88b61f647d4f56d5d06321dda08a43bf92f\n+Author: Matt Corallo <git@bluematt.me>\n+Date:   Sun Mar 24 20:46:01 2013 -0400\n+\n+    Revert \"CheckBlock rule until 15-May for 10,000 BDB lock compatibility\"\n+    \n+    This reverts commit 8c222dca4f961ad13ec64d690134a40d09b20813.\n+\n+diff --git a/src/main.cpp b/src/main.cpp\n+index 51ada0a..9a06dbf 100644\n+--- a/src/main.cpp\n++++ b/src/main.cpp\n+@@ -2056,25 +2056,6 @@ bool CBlock::CheckBlock(CValidationState &state, bool fCheckPOW, bool fCheckMerk\n+     if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n+         return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n+ \n+-    // Special short-term limits to avoid 10,000 BDB lock limit:\n+-    if (GetBlockTime() > 1363039171 && // 11 March 2013, timestamp of block before the big fork\n+-        GetBlockTime() < 1368576000)  // 15 May 2013 00:00:00\n+-    {\n+-        // Rule is: #unique txids referenced <= 4,500\n+-        // ... to prevent 10,000 BDB lock exhaustion on old clients\n+-        set<uint256> setTxIn;\n+-        for (size_t i = 0; i < vtx.size(); i++)\n+-        {\n+-            setTxIn.insert(vtx[i].GetHash());\n+-            if (i == 0) continue; // skip coinbase txin\n+-            BOOST_FOREACH(const CTxIn& txin, vtx[i].vin)\n+-                setTxIn.insert(txin.prevout.hash);\n+-        }\n+-        size_t nTxids = setTxIn.size();\n+-        if (nTxids > 4500)\n+-            return error(\"CheckBlock() : 15 May maxlocks violation\");\n+-    }\n+-\n+     // Check proof of work matches claimed amount\n+     if (fCheckPOW && !CheckProofOfWork(GetHash(), nBits))\n+         return state.DoS(50, error(\"CheckBlock() : proof of work failed\"));\n+diff --git a/src/test/checkblock_tests.cpp b/src/test/checkblock_tests.cpp\n+deleted file mode 100644\n+index e167def..0000000\n+--- a/src/test/checkblock_tests.cpp\n++++ /dev/null\n+@@ -1,66 +0,0 @@\n+-//\n+-// Unit tests for block.CheckBlock()\n+-//\n+-#include <algorithm>\n+-\n+-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n+-#include <boost/date_time/posix_time/posix_time_types.hpp>\n+-#include <boost/test/unit_test.hpp>\n+-#include <boost/foreach.hpp>\n+-\n+-#include \"main.h\"\n+-#include \"wallet.h\"\n+-#include \"net.h\"\n+-#include \"util.h\"\n+-\n+-BOOST_AUTO_TEST_SUITE(CheckBlock_tests)\n+-\n+-bool\n+-read_block(const std::string& filename, CBlock& block)\n+-{\n+-    namespace fs = boost::filesystem;\n+-    fs::path testFile = fs::current_path() / \"test\" / \"data\" / filename;\n+-#ifdef TEST_DATA_DIR\n+-    if (!fs::exists(testFile))\n+-    {\n+-        testFile = fs::path(BOOST_PP_STRINGIZE(TEST_DATA_DIR)) / filename;\n+-    }\n+-#endif\n+-    FILE* fp = fopen(testFile.string().c_str(), \"rb\");\n+-    if (!fp) return false;\n+-\n+-    fseek(fp, 8, SEEK_SET); // skip msgheader/size\n+-\n+-    CAutoFile filein = CAutoFile(fp, SER_DISK, CLIENT_VERSION);\n+-    if (!filein) return false;\n+-\n+-    filein >> block;\n+-\n+-    return true;\n+-}\n+-\n+-BOOST_AUTO_TEST_CASE(May15)\n+-{\n+-    // Putting a 1MB binary file in the git repository is not a great\n+-    // idea, so this test is only run if you manually download\n+-    // test/data/Mar12Fork.dat from\n+-    // http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/Mar12Fork.dat/download\n+-    unsigned int tMay15 = 1368576000;\n+-    SetMockTime(tMay15); // Test as if it was right at May 15\n+-\n+-    CBlock forkingBlock;\n+-    if (read_block(\"Mar12Fork.dat\", forkingBlock))\n+-    {\n+-        CValidationState state;\n+-        BOOST_CHECK(!forkingBlock.CheckBlock(state, true, true));\n+-        BOOST_CHECK(!forkingBlock.CheckBlock(state, false, false));\n+-\n+-        // After May 15'th, big blocks are OK:\n+-        forkingBlock.nTime = tMay15; // Invalidates PoW\n+-        BOOST_CHECK(forkingBlock.CheckBlock(state, false, false));\n+-    }\n+-\n+-    SetMockTime(0);\n+-}\n+-\n+-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]