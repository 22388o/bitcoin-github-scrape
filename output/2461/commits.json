[
  {
    "sha": "6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWQ3MWI1ZTRmYWEyZWE2ZDczOWVlZmE5YzNkY2MxNWRiODA0Mzlj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-04T22:43:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-07T17:19:13Z"
      },
      "message": "Make sure we always have a node to do IBD from\n\nThis introduces the concept of the 'sync node', which is the one we\nasked for missing blocks. In case the sync node goes away, a new one\nwill be selected.\n\nFor now, the heuristic is very simple, but it can easily be extended\nlater to add better policies.",
      "tree": {
        "sha": "4ae32dd9b5153c1fd1cad299518ede52a9f1bf69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ae32dd9b5153c1fd1cad299518ede52a9f1bf69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31dead887d7658660e89d14c22d494baeca874e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31dead887d7658660e89d14c22d494baeca874e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31dead887d7658660e89d14c22d494baeca874e9"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 60,
      "deletions": 19
    },
    "files": [
      {
        "sha": "06957ba52676613154b566e89a0dac3b88e9ada2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 12,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c",
        "patch": "@@ -3235,18 +3235,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             }\n         }\n \n-        // Ask the first connected node for block updates\n-        static int nAskedForBlocks = 0;\n-        if (!pfrom->fClient && !pfrom->fOneShot && !fImporting && !fReindex &&\n-            (pfrom->nStartingHeight > (nBestHeight - 144)) &&\n-            (pfrom->nVersion < NOBLKS_VERSION_START ||\n-             pfrom->nVersion >= NOBLKS_VERSION_END) &&\n-             (nAskedForBlocks < 1 || vNodes.size() <= 1))\n-        {\n-            nAskedForBlocks++;\n-            pfrom->PushGetBlocks(pindexBest, uint256(0));\n-        }\n-\n         // Relay alerts\n         {\n             LOCK(cs_mapAlerts);\n@@ -3855,6 +3843,12 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                 pto->PushMessage(\"ping\");\n         }\n \n+        // Start block sync\n+        if (pto->fStartSync && !fImporting && !fReindex) {\n+            pto->fStartSync = false;\n+            pto->PushGetBlocks(pindexBest, uint256(0));\n+        }\n+\n         // Resend wallet transactions that haven't gotten in a block yet\n         // Except during reindex, importing and IBD, when old wallet\n         // transactions become unconfirmed and spams other nodes."
      },
      {
        "sha": "4727f1e2e64f6219e89ea4422909397b7552cb5d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 7,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c",
        "patch": "@@ -44,6 +44,7 @@ static map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfReachable[NET_MAX] = {};\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n+static CNode* pnodeSync = NULL;\n uint64 nLocalHostNonce = 0;\n static std::vector<SOCKET> vhListenSocket;\n CAddrMan addrman;\n@@ -521,12 +522,16 @@ void CNode::CloseSocketDisconnect()\n         printf(\"disconnecting node %s\\n\", addrName.c_str());\n         closesocket(hSocket);\n         hSocket = INVALID_SOCKET;\n-\n-        // in case this fails, we'll empty the recv buffer when the CNode is deleted\n-        TRY_LOCK(cs_vRecvMsg, lockRecv);\n-        if (lockRecv)\n-            vRecvMsg.clear();\n     }\n+\n+    // in case this fails, we'll empty the recv buffer when the CNode is deleted\n+    TRY_LOCK(cs_vRecvMsg, lockRecv);\n+    if (lockRecv)\n+        vRecvMsg.clear();\n+\n+    // if this was the sync node, we'll need a new one\n+    if (this == pnodeSync)\n+        pnodeSync = NULL;\n }\n \n void CNode::Cleanup()\n@@ -1546,24 +1551,64 @@ bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOu\n }\n \n \n+// for now, use a very simple selection metric: the node from which we received\n+// most recently\n+double static NodeSyncScore(const CNode *pnode) {\n+    return -pnode->nLastRecv;\n+}\n \n+void static StartSync(const vector<CNode*> &vNodes) {\n+    CNode *pnodeNewSync = NULL;\n+    double dBestScore = 0;\n \n+    // fImporting and fReindex are accessed out of cs_main here, but only\n+    // as an optimization - they are checked again in SendMessages.\n+    if (fImporting || fReindex)\n+        return;\n \n-\n+    // Iterate over all nodes\n+    BOOST_FOREACH(CNode* pnode, vNodes) {\n+        // check preconditions for allowing a sync\n+        if (!pnode->fClient && !pnode->fOneShot &&\n+            !pnode->fDisconnect && pnode->fSuccessfullyConnected &&\n+            (pnode->nStartingHeight > (nBestHeight - 144)) &&\n+            (pnode->nVersion < NOBLKS_VERSION_START || pnode->nVersion >= NOBLKS_VERSION_END)) {\n+            // if ok, compare node's score with the best so far\n+            double dScore = NodeSyncScore(pnode);\n+            if (pnodeNewSync == NULL || dScore > dBestScore) {\n+                pnodeNewSync = pnode;\n+                dBestScore = dScore;\n+            }\n+        }\n+    }\n+    // if a new sync candidate was found, start sync!\n+    if (pnodeNewSync) {\n+        pnodeNewSync->fStartSync = true;\n+        pnodeSync = pnodeNewSync;\n+    }\n+}\n \n void ThreadMessageHandler()\n {\n     SetThreadPriority(THREAD_PRIORITY_BELOW_NORMAL);\n     while (true)\n     {\n+        bool fHaveSyncNode = false;\n+\n         vector<CNode*> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n+            BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n                 pnode->AddRef();\n+                if (pnode == pnodeSync)\n+                    fHaveSyncNode = true;\n+            }\n         }\n \n+        if (!fHaveSyncNode)\n+            StartSync(vNodesCopy);\n+\n         // Poll the connected nodes for messages\n         CNode* pnodeTrickle = NULL;\n         if (!vNodesCopy.empty())"
      },
      {
        "sha": "2a8b7f09eef61f071df8f888800a05b9d74b5184",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c",
        "patch": "@@ -202,6 +202,7 @@ class CNode\n     CBlockIndex* pindexLastGetBlocksBegin;\n     uint256 hashLastGetBlocksEnd;\n     int nStartingHeight;\n+    bool fStartSync;\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n@@ -242,6 +243,7 @@ class CNode\n         pindexLastGetBlocksBegin = 0;\n         hashLastGetBlocksEnd = 0;\n         nStartingHeight = -1;\n+        fStartSync = false;\n         fGetAddr = false;\n         nMisbehavior = 0;\n         fRelayTxes = false;"
      }
    ]
  },
  {
    "sha": "86648a8d16699ab392508a48bb867d3fc4f7d6cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjY0OGE4ZDE2Njk5YWIzOTI1MDhhNDhiYjg2N2QzZmM0ZjdkNmNm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-07T17:31:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-07T17:31:13Z"
      },
      "message": "Add bytessent, bytesrecv and syncnode to getpeerinfo",
      "tree": {
        "sha": "8791097b76870c494c545a036368c5673ae48efe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8791097b76870c494c545a036368c5673ae48efe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86648a8d16699ab392508a48bb867d3fc4f7d6cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86648a8d16699ab392508a48bb867d3fc4f7d6cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86648a8d16699ab392508a48bb867d3fc4f7d6cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86648a8d16699ab392508a48bb867d3fc4f7d6cf/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ed71b5e4faa2ea6d739eefa9c3dcc15db80439c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ccacb0b2918dde0b1334410fb0b815bcff76d34d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86648a8d16699ab392508a48bb867d3fc4f7d6cf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86648a8d16699ab392508a48bb867d3fc4f7d6cf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=86648a8d16699ab392508a48bb867d3fc4f7d6cf",
        "patch": "@@ -619,6 +619,9 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nReleaseTime);\n     X(nStartingHeight);\n     X(nMisbehavior);\n+    X(nSendBytes);\n+    X(nRecvBytes);\n+    stats.fSyncNode = (this == pnodeSync);\n }\n #undef X\n \n@@ -713,6 +716,7 @@ void SocketSendData(CNode *pnode)\n         int nBytes = send(pnode->hSocket, &data[pnode->nSendOffset], data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         if (nBytes > 0) {\n             pnode->nLastSend = GetTime();\n+            pnode->nSendBytes += nBytes;\n             pnode->nSendOffset += nBytes;\n             if (pnode->nSendOffset == data.size()) {\n                 pnode->nSendOffset = 0;\n@@ -976,6 +980,7 @@ void ThreadSocketHandler()\n                             if (!pnode->ReceiveMsgBytes(pchBuf, nBytes))\n                                 pnode->CloseSocketDisconnect();\n                             pnode->nLastRecv = GetTime();\n+                            pnode->nRecvBytes += nBytes;\n                         }\n                         else if (nBytes == 0)\n                         {"
      },
      {
        "sha": "719ef119bf533f1b3f4788ac3758c17e00b4fe09",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86648a8d16699ab392508a48bb867d3fc4f7d6cf/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86648a8d16699ab392508a48bb867d3fc4f7d6cf/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=86648a8d16699ab392508a48bb867d3fc4f7d6cf",
        "patch": "@@ -102,6 +102,9 @@ class CNodeStats\n     int64 nReleaseTime;\n     int nStartingHeight;\n     int nMisbehavior;\n+    uint64 nSendBytes;\n+    uint64 nRecvBytes;\n+    bool fSyncNode;\n };\n \n \n@@ -156,12 +159,14 @@ class CNode\n     CDataStream ssSend;\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent\n+    uint64 nSendBytes;\n     std::deque<CSerializeData> vSendMsg;\n     CCriticalSection cs_vSend;\n \n     std::deque<CInv> vRecvGetData;\n     std::deque<CNetMessage> vRecvMsg;\n     CCriticalSection cs_vRecvMsg;\n+    uint64 nRecvBytes;\n     int nRecvVersion;\n \n     int64 nLastSend;\n@@ -223,6 +228,8 @@ class CNode\n         nRecvVersion = MIN_PROTO_VERSION;\n         nLastSend = 0;\n         nLastRecv = 0;\n+        nSendBytes = 0;\n+        nRecvBytes = 0;\n         nLastSendEmpty = GetTime();\n         nTimeConnected = GetTime();\n         addr = addrIn;"
      },
      {
        "sha": "7e2bdd4146bb8c7cc96c86919e38f228a2549849",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86648a8d16699ab392508a48bb867d3fc4f7d6cf/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86648a8d16699ab392508a48bb867d3fc4f7d6cf/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=86648a8d16699ab392508a48bb867d3fc4f7d6cf",
        "patch": "@@ -51,13 +51,17 @@ Value getpeerinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"services\", strprintf(\"%08\"PRI64x, stats.nServices)));\n         obj.push_back(Pair(\"lastsend\", (boost::int64_t)stats.nLastSend));\n         obj.push_back(Pair(\"lastrecv\", (boost::int64_t)stats.nLastRecv));\n+        obj.push_back(Pair(\"bytessent\", (boost::int64_t)stats.nSendBytes));\n+        obj.push_back(Pair(\"bytesrecv\", (boost::int64_t)stats.nRecvBytes));\n         obj.push_back(Pair(\"conntime\", (boost::int64_t)stats.nTimeConnected));\n         obj.push_back(Pair(\"version\", stats.nVersion));\n         obj.push_back(Pair(\"subver\", stats.strSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));\n         obj.push_back(Pair(\"releasetime\", (boost::int64_t)stats.nReleaseTime));\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         obj.push_back(Pair(\"banscore\", stats.nMisbehavior));\n+        if (stats.fSyncNode)\n+            obj.push_back(Pair(\"syncnode\", true));\n \n         ret.push_back(obj);\n     }"
      }
    ]
  }
]