[
  {
    "sha": "d90351f0504c5d4057e560d64107a2f36d7bf3d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTAzNTFmMDUwNGM1ZDQwNTdlNTYwZDY0MTA3YTJmMzZkN2JmM2Q0",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-04-29T14:23:51Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-04-29T23:15:23Z"
      },
      "message": "More comments on the design of AttemptToEvictConnection.\n\nSome developers clearly don't get this and have been posting\n \"improvements\" that create clear vulnerabilities.  It should\n have been better explained in the code, since the design\n is somewhat subtle and getting it right is important.",
      "tree": {
        "sha": "e38f3b25f180e9103595d794b87572e997d3f1a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e38f3b25f180e9103595d794b87572e997d3f1a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d90351f0504c5d4057e560d64107a2f36d7bf3d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d90351f0504c5d4057e560d64107a2f36d7bf3d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d90351f0504c5d4057e560d64107a2f36d7bf3d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d90351f0504c5d4057e560d64107a2f36d7bf3d4/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20f9ecd343bbd305f0aeb829f42e61edea8de62f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20f9ecd343bbd305f0aeb829f42e61edea8de62f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20f9ecd343bbd305f0aeb829f42e61edea8de62f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ced371164addc9f45dae306ac47120ef57a07ad6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d90351f0504c5d4057e560d64107a2f36d7bf3d4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d90351f0504c5d4057e560d64107a2f36d7bf3d4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d90351f0504c5d4057e560d64107a2f36d7bf3d4",
        "patch": "@@ -877,6 +877,14 @@ class CompareNetGroupKeyed\n     }\n };\n \n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     std::vector<CNodeRef> vEvictionCandidates;\n     {\n@@ -905,15 +913,15 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n \n     if (vEvictionCandidates.empty()) return false;\n \n-    // Protect the 8 nodes with the best ping times.\n+    // Protect the 8 nodes with the lowest minimum ping time.\n     // An attacker cannot manipulate this metric without physically moving nodes closer to the target.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n     if (vEvictionCandidates.empty()) return false;\n \n     // Protect the half of the remaining nodes which have been connected the longest.\n-    // This replicates the existing implicit behavior.\n+    // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - static_cast<int>(vEvictionCandidates.size() / 2), vEvictionCandidates.end());\n \n@@ -941,6 +949,7 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     vEvictionCandidates = mapAddrCounts[naMostConnections];\n \n     // Do not disconnect peers if there is only one unprotected connection from their network group.\n+    // This step excessively favors netgroup diversity, and should be removed once more protective criteria are established.\n     if (vEvictionCandidates.size() <= 1)\n         // unless we prefer the new connection (for whitelisted peers)\n         if (!fPreferNewConnection)"
      }
    ]
  }
]