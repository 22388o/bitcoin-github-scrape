[
  {
    "sha": "b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGJjNjlkYmQ3ZTdlZWYxYjBkYjk1Njg1NmY5ZjMwZTE1OWU1YzVh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-20T12:23:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T21:53:57Z"
      },
      "message": "[wallet] MOVEONLY move CAffectedKeysVisitor",
      "tree": {
        "sha": "e1b37703003847e4f883da2dde86d3ff422aadf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1b37703003847e4f883da2dde86d3ff422aadf1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db825d293be8134505187352ec5844b70f37a43f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db825d293be8134505187352ec5844b70f37a43f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db825d293be8134505187352ec5844b70f37a43f"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "d7b0f3c0f391c7c9c864169c6e3d43d5af65b855",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a",
        "patch": "@@ -78,6 +78,38 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n }\n \n+class CAffectedKeysVisitor : public boost::static_visitor<void> {\n+private:\n+    const CKeyStore &keystore;\n+    std::vector<CKeyID> &vKeys;\n+\n+public:\n+    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n+\n+    void Process(const CScript &script) {\n+        txnouttype type;\n+        std::vector<CTxDestination> vDest;\n+        int nRequired;\n+        if (ExtractDestinations(script, type, vDest, nRequired)) {\n+            for (const CTxDestination &dest : vDest)\n+                boost::apply_visitor(*this, dest);\n+        }\n+    }\n+\n+    void operator()(const CKeyID &keyId) {\n+        if (keystore.HaveKey(keyId))\n+            vKeys.push_back(keyId);\n+    }\n+\n+    void operator()(const CScriptID &scriptId) {\n+        CScript script;\n+        if (keystore.GetCScript(scriptId, script))\n+            Process(script);\n+    }\n+\n+    void operator()(const CNoDestination &none) {}\n+};\n+\n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n     LOCK(cs_wallet);\n@@ -3559,38 +3591,6 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n \n /** @} */ // end of Actions\n \n-class CAffectedKeysVisitor : public boost::static_visitor<void> {\n-private:\n-    const CKeyStore &keystore;\n-    std::vector<CKeyID> &vKeys;\n-\n-public:\n-    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n-\n-    void Process(const CScript &script) {\n-        txnouttype type;\n-        std::vector<CTxDestination> vDest;\n-        int nRequired;\n-        if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            for (const CTxDestination &dest : vDest)\n-                boost::apply_visitor(*this, dest);\n-        }\n-    }\n-\n-    void operator()(const CKeyID &keyId) {\n-        if (keystore.HaveKey(keyId))\n-            vKeys.push_back(keyId);\n-    }\n-\n-    void operator()(const CScriptID &scriptId) {\n-        CScript script;\n-        if (keystore.GetCScript(scriptId, script))\n-            Process(script);\n-    }\n-\n-    void operator()(const CNoDestination &none) {}\n-};\n-\n void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();"
      }
    ]
  },
  {
    "sha": "92a4d6a10535bf08502d092f5c1cf41f6ced66d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmE0ZDZhMTA1MzViZjA4NTAyZDA5MmY1YzFjZjQxZjZjZWQ2NmQy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-20T13:32:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T21:57:48Z"
      },
      "message": "[wallet] add keypool restore functionality",
      "tree": {
        "sha": "b9b3d958191d665c28a5395dea0d4901ac988434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9b3d958191d665c28a5395dea0d4901ac988434"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92a4d6a10535bf08502d092f5c1cf41f6ced66d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a4d6a10535bf08502d092f5c1cf41f6ced66d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92a4d6a10535bf08502d092f5c1cf41f6ced66d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a4d6a10535bf08502d092f5c1cf41f6ced66d2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8bc69dbd7e7eef1b0db956856f9f30e159e5c5a"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 92,
      "deletions": 5
    },
    "files": [
      {
        "sha": "09039d8c1a743feab6465a844ce983d12c88d9c4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 0,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a4d6a10535bf08502d092f5c1cf41f6ced66d2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a4d6a10535bf08502d092f5c1cf41f6ced66d2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=92a4d6a10535bf08502d092f5c1cf41f6ced66d2",
        "patch": "@@ -1015,6 +1015,26 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+            std::set<CKeyID> keyPool;\n+            GetAllReserveKeys(keyPool);\n+            // loop though all outputs\n+            for(const CTxOut& txout: tx.vout) {\n+                // extract addresses and check if they match with an unused keypool key\n+                std::vector<CKeyID> vAffected;\n+                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n+                for (const CKeyID &keyid : vAffected) {\n+                    if (keyPool.count(keyid)) {\n+                        LogPrintf(\"%s: Detected a used Keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+                        MarkReserveKeysAsUsed(keyid);\n+                    }\n+                }\n+            }\n+\n             CWalletTx wtx(this, ptx);\n \n             // Get merkle branch if transaction was found in a block\n@@ -3522,6 +3542,57 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n+{\n+    LOCK(cs_wallet);\n+    CWalletDB walletdb(*dbw);\n+    auto it = std::begin(setKeyPool);\n+\n+    bool foundInternal = false;\n+    int64_t foundIndex = -1;\n+    for (const int64_t& id : setKeyPool) {\n+        CKeyPool keypool;\n+        if (!walletdb.ReadPool(id, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+        }\n+\n+        if (keypool.vchPubKey.GetID() == keyId) {\n+            foundInternal = keypool.fInternal;\n+            foundIndex = id;\n+            if (!keypool.fInternal) {\n+                SetAddressBook(keyId, \"\", \"receive\");\n+            }\n+            break;\n+        }\n+    }\n+\n+    // mark all keys up to the found key as used\n+    if (foundIndex >= 0) {\n+        while (it != std::end(setKeyPool)) {\n+            const int64_t& id = *(it);\n+            if (id > foundIndex) break; // setKeyPool is ordered\n+\n+            CKeyPool keypool;\n+            if (!walletdb.ReadPool(id, keypool)) {\n+                throw std::runtime_error(std::string(__func__) + \": read failed\");\n+            }\n+\n+            // only mark keys on the corresponding chain\n+            if (keypool.fInternal == foundInternal) {\n+                KeepKey(id);\n+                it = setKeyPool.erase(it);\n+                continue;\n+            }\n+\n+            ++it;\n+        }\n+    }\n+\n+    if (IsHDEnabled() && !TopUpKeyPool()) {\n+        LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+    }\n+}\n+\n void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n {\n     setAddress.clear();\n@@ -3912,6 +3983,18 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Keypool Restore: Make sure we always have a reasonable keypool size if HD is enabled\n+    if (walletInstance->IsHDEnabled()) {\n+        if (walletInstance->IsCrypted()) {\n+            InitWarning(_(\"You are using an encrypted HD wallet. If you recover an HD wallet, you may miss incoming or outgoing transactions.\"));\n+        } else {\n+            if (GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE) < HD_RESTORE_KEYPOOL_SIZE_MIN ) {\n+                InitWarning(_(\"Your keypool size is below the recommended limit for HD rescans. If you recover a HD wallet, you may miss incoming or outgoing transactions.\"));\n+            }\n+            walletInstance->TopUpKeyPool();\n+        }\n+\n+    }\n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!GetBoolArg(\"-rescan\", false))\n     {"
      },
      {
        "sha": "a4ccc2c6a32a75bb69eb0df9a93ee7088312c789",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a4d6a10535bf08502d092f5c1cf41f6ced66d2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a4d6a10535bf08502d092f5c1cf41f6ced66d2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=92a4d6a10535bf08502d092f5c1cf41f6ced66d2",
        "patch": "@@ -41,6 +41,7 @@ extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n+static const unsigned int HD_RESTORE_KEYPOOL_SIZE_MIN = 20;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -fallbackfee default\n@@ -979,6 +980,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReturnKey(int64_t nIndex);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n+    void MarkReserveKeysAsUsed(const CKeyID& keyId);\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();"
      },
      {
        "sha": "a2d41866b5932a24b0127ceb22452bb1443394e9",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a4d6a10535bf08502d092f5c1cf41f6ced66d2/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a4d6a10535bf08502d092f5c1cf41f6ced66d2/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=92a4d6a10535bf08502d092f5c1cf41f6ced66d2",
        "patch": "@@ -9,7 +9,6 @@\n     assert_equal,\n     connect_nodes_bi,\n )\n-import os\n import shutil\n \n \n@@ -72,10 +71,12 @@ def run_test (self):\n \n         self.log.info(\"Restore backup ...\")\n         self.stop_node(1)\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n+        # we need to delete the complete regtest directory\n+        # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n+        shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n+        shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n-        #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n@@ -85,11 +86,12 @@ def run_test (self):\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_+1)+\"'\")\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n-\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all()\n+        \n         # Needs rescan\n         self.stop_node(1)\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])\n-        #connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n         # send a tx and make sure its using the internal chain for the changeoutput"
      }
    ]
  },
  {
    "sha": "ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTMxNWQ1MmNhOWEzZWFhMmZjYTBjMTk5MmEzNDIwZTJkNmIxMWM3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-01-10T17:24:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T21:57:52Z"
      },
      "message": "[wallet] add option to pause block requests (is/setBlockRequestsPaused())",
      "tree": {
        "sha": "4e1c820883cf222dcac6fc74001715db0bebf6f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e1c820883cf222dcac6fc74001715db0bebf6f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92a4d6a10535bf08502d092f5c1cf41f6ced66d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a4d6a10535bf08502d092f5c1cf41f6ced66d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92a4d6a10535bf08502d092f5c1cf41f6ced66d2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "673e295204d6b3c9afaafd8f65b6c278c0a19ed1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7",
        "patch": "@@ -466,6 +466,8 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n+    if (isBlockRequestsPaused()) return;\n+\n     if (state->pindexBestKnownBlock == NULL || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < UintToArith256(consensusParams.nMinimumChainWork)) {\n         // This peer has nothing interesting.\n         return;"
      },
      {
        "sha": "e32d00c5208e82710fbd331f10150b51bf2eeb95",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7",
        "patch": "@@ -93,6 +93,10 @@ CScript COINBASE_FLAGS;\n \n const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n+/** if enable, blocks will not be requested automatically */\n+static const bool DEFAULT_BLOCK_REQUESTS_PAUSED = false;\n+std::atomic<bool> fPauseBlockRequests(DEFAULT_BLOCK_REQUESTS_PAUSED);\n+\n // Internal stuff\n namespace {\n \n@@ -4353,6 +4357,15 @@ void DumpMempool(void)\n     }\n }\n \n+bool isBlockRequestsPaused() {\n+    return fPauseBlockRequests;\n+}\n+\n+void setBlockRequestsPaused(bool state) {\n+    LogPrintf(\"%s Block Requests\\n\", (state ? \"Pause\" : \"Resume\"));\n+    fPauseBlockRequests = state;\n+}\n+\n //! Guess how far we are in the verification process at the given block index\n double GuessVerificationProgress(const ChainTxData& data, CBlockIndex *pindex) {\n     if (pindex == NULL)"
      },
      {
        "sha": "70eb6c8518098b4b94e63594c9939b185f7b4914",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7",
        "patch": "@@ -285,6 +285,13 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n \n+/**\n+ * Pausing block requests will temporarily pause the verification process.\n+ * Pausing won't prevent ActivateBestChain from connecting blocks (that are in flight or already on disk)\n+ */\n+bool isBlockRequestsPaused();\n+void setBlockRequestsPaused(bool state);\n+\n /**\n  *  Mark one block file as pruned.\n  */"
      }
    ]
  },
  {
    "sha": "c653ca24fb06975bfe5b0bbff6c4b27a5ff30397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjUzY2EyNGZiMDY5NzViZmU1YjBiYmZmNmM0YjI3YTVmZjMwMzk3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T12:39:59Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T21:57:52Z"
      },
      "message": "[wallet] add option to pause tip updates (is/setTipUpdatesPaused())",
      "tree": {
        "sha": "3865dda4a2252995f993a7673ae0592c4e36225b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3865dda4a2252995f993a7673ae0592c4e36225b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca315d52ca9a3eaa2fca0c1992a3420e2d6b11c7"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "464efb6d902ff079488f509a8a415058a83dc71f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c653ca24fb06975bfe5b0bbff6c4b27a5ff30397",
        "patch": "@@ -97,6 +97,10 @@ const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n static const bool DEFAULT_BLOCK_REQUESTS_PAUSED = false;\n std::atomic<bool> fPauseBlockRequests(DEFAULT_BLOCK_REQUESTS_PAUSED);\n \n+/** if enable, ActiveBestChain will ignore/refuse to do tip updates */\n+static const bool DEFAULT_TIP_UPDATE_PAUSED = false;\n+std::atomic<bool> fPauseTipUpdates(DEFAULT_TIP_UPDATE_PAUSED);\n+\n // Internal stuff\n namespace {\n \n@@ -2421,6 +2425,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n     // sanely for performance or correctness!\n \n+    if (isTipUpdatesPaused()) {\n+        LogPrintf(\"%s: ignore ActivateBestChain, tip update are disabled\\n\", std::string(__func__));\n+\n+        // we will abort with a return value of true to not trigger error routines/shutdown\n+        return true;\n+    }\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n     int nStopAtHeight = GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n@@ -4366,6 +4376,15 @@ void setBlockRequestsPaused(bool state) {\n     fPauseBlockRequests = state;\n }\n \n+bool isTipUpdatesPaused() {\n+    return fPauseTipUpdates;\n+}\n+\n+void setTipUpdatesPaused(bool state) {\n+    LogPrintf(\"%s Tip Updates\\n\", (state ? \"Pause\" : \"Resume\"));\n+    fPauseTipUpdates = state;\n+}\n+\n //! Guess how far we are in the verification process at the given block index\n double GuessVerificationProgress(const ChainTxData& data, CBlockIndex *pindex) {\n     if (pindex == NULL)"
      },
      {
        "sha": "00573feae21ae553fb8a2612106e3a049ee9906f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c653ca24fb06975bfe5b0bbff6c4b27a5ff30397",
        "patch": "@@ -292,6 +292,13 @@ double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n bool isBlockRequestsPaused();\n void setBlockRequestsPaused(bool state);\n \n+/**\n+ * Pausing tip updates temporarily pauses connecting new blocks\n+ * Pausing won't prevent the net logic from requesting more blocks for download (up to BLOCK_DOWNLOAD_WINDOW)\n+ */\n+bool isTipUpdatesPaused();\n+void setTipUpdatesPaused(bool state);\n+\n /**\n  *  Mark one block file as pruned.\n  */"
      }
    ]
  },
  {
    "sha": "877452b06ae86859c7c90c516637e48694f92400",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Nzc0NTJiMDZhZTg2ODU5YzdjOTBjNTE2NjM3ZTQ4Njk0ZjkyNDAw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-02T16:44:46Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T21:57:52Z"
      },
      "message": "[wallet] add request-halt flag to BlockConnected signal",
      "tree": {
        "sha": "72ba0cb75b71079e98c38338272a7661a8a2e04e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72ba0cb75b71079e98c38338272a7661a8a2e04e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/877452b06ae86859c7c90c516637e48694f92400",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877452b06ae86859c7c90c516637e48694f92400",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/877452b06ae86859c7c90c516637e48694f92400",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877452b06ae86859c7c90c516637e48694f92400/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c653ca24fb06975bfe5b0bbff6c4b27a5ff30397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c653ca24fb06975bfe5b0bbff6c4b27a5ff30397"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 58,
      "deletions": 28
    },
    "files": [
      {
        "sha": "ffff81d9f9642a478635d59a204b085f5bee7f80",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877452b06ae86859c7c90c516637e48694f92400/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877452b06ae86859c7c90c516637e48694f92400/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=877452b06ae86859c7c90c516637e48694f92400",
        "patch": "@@ -732,7 +732,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanI\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n }\n \n-void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) {\n     LOCK(cs_main);\n \n     std::vector<uint256> vOrphanErase;"
      },
      {
        "sha": "eb5cccf2688d66c92073cc799a79317894fea310",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877452b06ae86859c7c90c516637e48694f92400/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877452b06ae86859c7c90c516637e48694f92400/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=877452b06ae86859c7c90c516637e48694f92400",
        "patch": "@@ -34,7 +34,7 @@ class PeerLogicValidation : public CValidationInterface {\n public:\n     PeerLogicValidation(CConnman* connmanIn);\n \n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n     void BlockChecked(const CBlock& block, const CValidationState& state) override;\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;"
      },
      {
        "sha": "8cbec08e14f7e6663e468a9284b24f7e0445cc48",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877452b06ae86859c7c90c516637e48694f92400/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877452b06ae86859c7c90c516637e48694f92400/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=877452b06ae86859c7c90c516637e48694f92400",
        "patch": "@@ -2467,9 +2467,18 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n \n+            bool requestPause = false;\n             for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n                 assert(trace.pblock && trace.pindex);\n-                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, *trace.conflictedTxs);\n+                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, *trace.conflictedTxs, requestPause);\n+                if (requestPause) {\n+                    // in case we are in pruned mode, we have to halt verification and block requests\n+                    // to ensure the signal listener can keep up with the updates\n+                    if (fPruneMode) {\n+                        setBlockRequestsPaused(true);\n+                        setTipUpdatesPaused(true);\n+                    }\n+                }\n             }\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n@@ -2485,7 +2494,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         }\n \n         if (nStopAtHeight && pindexNewTip && pindexNewTip->nHeight >= nStopAtHeight) StartShutdown();\n-    } while (pindexNewTip != pindexMostWork);\n+    } while (pindexNewTip != pindexMostWork && !isTipUpdatesPaused());\n     CheckBlockIndex(chainparams.GetConsensus());\n \n     // Write changes periodically to disk, after relay."
      },
      {
        "sha": "c1b30c0800861ced3105a5458c78f90b5da1ce3e",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877452b06ae86859c7c90c516637e48694f92400/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877452b06ae86859c7c90c516637e48694f92400/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=877452b06ae86859c7c90c516637e48694f92400",
        "patch": "@@ -17,7 +17,7 @@\n struct MainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&, bool &)> BlockConnected;\n     boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n     boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n@@ -56,7 +56,7 @@ CMainSignals& GetMainSignals()\n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->TransactionAddedToMempool.connect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockConnected.connect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3, _4));\n     g_signals.m_internals->BlockDisconnected.connect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.m_internals->SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.m_internals->Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -71,7 +71,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.m_internals->Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.m_internals->SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.m_internals->TransactionAddedToMempool.disconnect(boost::bind(&CValidationInterface::TransactionAddedToMempool, pwalletIn, _1));\n-    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3));\n+    g_signals.m_internals->BlockConnected.disconnect(boost::bind(&CValidationInterface::BlockConnected, pwalletIn, _1, _2, _3, _4));\n     g_signals.m_internals->BlockDisconnected.disconnect(boost::bind(&CValidationInterface::BlockDisconnected, pwalletIn, _1));\n     g_signals.m_internals->UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.m_internals->NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n@@ -97,8 +97,8 @@ void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n     m_internals->TransactionAddedToMempool(ptx);\n }\n \n-void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n-    m_internals->BlockConnected(pblock, pindex, vtxConflicted);\n+void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) {\n+    m_internals->BlockConnected(pblock, pindex, vtxConflicted, requestPause);\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {"
      },
      {
        "sha": "828dd48f4b803245a51e515858251d58049b3fb8",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877452b06ae86859c7c90c516637e48694f92400/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877452b06ae86859c7c90c516637e48694f92400/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=877452b06ae86859c7c90c516637e48694f92400",
        "patch": "@@ -40,7 +40,7 @@ class CValidationInterface {\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      */\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted, bool &requestPause) {}\n     /** Notifies listeners of a block being disconnected */\n     virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n     /** Notifies listeners of the new active block chain on-disk. */\n@@ -84,7 +84,7 @@ class CMainSignals {\n \n     void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef &);\n-    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &);\n+    void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &, bool &);\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &);\n     void UpdatedTransaction(const uint256 &);\n     void SetBestChain(const CBlockLocator &);"
      },
      {
        "sha": "577c29bdd6ec67252d1c2f5250e650e54e992ef4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 14,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877452b06ae86859c7c90c516637e48694f92400/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877452b06ae86859c7c90c516637e48694f92400/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=877452b06ae86859c7c90c516637e48694f92400",
        "patch": "@@ -393,6 +393,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n+    if (m_sync_paused_for_keypool) return;\n     CWalletDB walletdb(*dbw);\n     walletdb.WriteBestBlock(loc);\n }\n@@ -1187,29 +1188,41 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n }\n \n void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n+    if (m_sync_paused_for_keypool) return;\n     LOCK2(cs_main, cs_wallet);\n     SyncTransaction(ptx);\n }\n \n-void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n-    LOCK2(cs_main, cs_wallet);\n-    // TODO: Temporarily ensure that mempool removals are notified before\n-    // connected transactions.  This shouldn't matter, but the abandoned\n-    // state of transactions in our wallet is currently cleared when we\n-    // receive another notification and there is a race condition where\n-    // notification of a connected conflict might cause an outside process\n-    // to abandon a transaction and then have it inadvertently cleared by\n-    // the notification that the conflicted transaction was evicted.\n-\n-    for (const CTransactionRef& ptx : vtxConflicted) {\n-        SyncTransaction(ptx);\n+void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) {\n+    if (m_sync_paused_for_keypool) {\n+        requestPause = true;\n+        return;\n     }\n-    for (size_t i = 0; i < pblock->vtx.size(); i++) {\n-        SyncTransaction(pblock->vtx[i], pindex, i);\n+\n+    {\n+        LOCK2(cs_main, cs_wallet);\n+        // TODO: Temporarily ensure that mempool removals are notified before\n+        // connected transactions.  This shouldn't matter, but the abandoned\n+        // state of transactions in our wallet is currently cleared when we\n+        // receive another notification and there is a race condition where\n+        // notification of a connected conflict might cause an outside process\n+        // to abandon a transaction and then have it inadvertently cleared by\n+        // the notification that the conflicted transaction was evicted.\n+\n+        for (const CTransactionRef& ptx : vtxConflicted) {\n+            SyncTransaction(ptx);\n+        }\n+        for (size_t i = 0; i < pblock->vtx.size(); i++) {\n+            SyncTransaction(pblock->vtx[i], pindex, i);\n+        }\n+        if (m_sync_paused_for_keypool) {\n+            requestPause = true;\n+        }\n     }\n }\n \n void CWallet::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) {\n+    if (m_sync_paused_for_keypool) return;\n     LOCK2(cs_main, cs_wallet);\n \n     for (const CTransactionRef& ptx : pblock->vtx) {"
      },
      {
        "sha": "7e565c964abca76a891e0be8c2f7ca84912d0a27",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877452b06ae86859c7c90c516637e48694f92400/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877452b06ae86859c7c90c516637e48694f92400/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=877452b06ae86859c7c90c516637e48694f92400",
        "patch": "@@ -656,6 +656,13 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     std::atomic<bool> fAbortRescan;\n     std::atomic<bool> fScanningWallet;\n \n+    /**\n+     * m_sync_paused_for_keypool temporarily pauses the transaction syncing process until\n+     * the keypool has been refilled (manual topup may be required for encrypted and locked wallets).\n+     * Not doing so may result in missing transactions in case of a HD recovery (or shared HD wallet).\n+     */\n+    std::atomic<bool> m_sync_paused_for_keypool;\n+\n     /**\n      * Select a set of coins such that nValueRet >= nTargetValue and at least\n      * all coins from coinControl are selected; Never select unconfirmed coins\n@@ -796,6 +803,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nRelockTime = 0;\n         fAbortRescan = false;\n         fScanningWallet = false;\n+        m_sync_paused_for_keypool = false;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n@@ -920,7 +928,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, bool update);"
      },
      {
        "sha": "6c10b32bc02c9fc0535d1c83930dac364aa663ca",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877452b06ae86859c7c90c516637e48694f92400/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877452b06ae86859c7c90c516637e48694f92400/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=877452b06ae86859c7c90c516637e48694f92400",
        "patch": "@@ -165,7 +165,7 @@ void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&\n     }\n }\n \n-void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)\n+void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause)\n {\n     for (const CTransactionRef& ptx : pblock->vtx) {\n         // Do a normal notify for each transaction added in the block"
      },
      {
        "sha": "d5adbe141641a289a5f56a86087829b701bcd695",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/877452b06ae86859c7c90c516637e48694f92400/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/877452b06ae86859c7c90c516637e48694f92400/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=877452b06ae86859c7c90c516637e48694f92400",
        "patch": "@@ -26,7 +26,7 @@ class CZMQNotificationInterface : public CValidationInterface\n \n     // CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted, bool &requestPause) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n "
      }
    ]
  },
  {
    "sha": "ad970bef541e0e018dc348e6747dc6e6b6f5ef9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDk3MGJlZjU0MWUwZTAxOGRjMzQ4ZTY3NDdkYzZlNmI2ZjVlZjlk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T14:03:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T21:57:52Z"
      },
      "message": "[wallet] pause wallet sync when the keypool requires extension",
      "tree": {
        "sha": "8ed1c562eafb983d91a97c4486e257702b422f8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ed1c562eafb983d91a97c4486e257702b422f8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "877452b06ae86859c7c90c516637e48694f92400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/877452b06ae86859c7c90c516637e48694f92400",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/877452b06ae86859c7c90c516637e48694f92400"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 71,
      "deletions": 0
    },
    "files": [
      {
        "sha": "72d48f88967d130f4d5aebc87ef3a82be23b8747",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ad970bef541e0e018dc348e6747dc6e6b6f5ef9d",
        "patch": "@@ -2089,6 +2089,10 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n \n     pwallet->TopUpKeyPool();\n \n+    // Give a hint to the wallet in case we have paused sync (we may have fall bellow the keypool min size limit).\n+    // This runs synchronous, at least during the resync, we can be sure the keypool can be topped up.\n+    pwallet->EventuallyRescanAfterKeypoolTopUp();\n+\n     int64_t nSleepTime = request.params[1].get_int64();\n     pwallet->nRelockTime = GetTime() + nSleepTime;\n     RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), boost::bind(LockWallet, pwallet), nSleepTime);"
      },
      {
        "sha": "1d4f8b74fc5b5a7ded19cbdaa329312e394e043f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ad970bef541e0e018dc348e6747dc6e6b6f5ef9d",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"fs.h\"\n+#include \"init.h\" //for StartShutdown()\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"validation.h\"\n@@ -1435,6 +1436,57 @@ bool CWallet::IsHDEnabled() const\n     return !hdChain.masterKeyID.IsNull();\n }\n \n+void CWallet::EventuallyRescanAfterKeypoolTopUp() {\n+    if (m_sync_paused_for_keypool) {\n+\n+        // for now, enable block requests and tip updates via the states\n+        // this will only be sufficient as long as only a single wallet adjusts these stats\n+        // switch to counters (instead of a single boolean state) could solve this\n+        ::setBlockRequestsPaused(false);\n+        ::setTipUpdatesPaused(false);\n+\n+        // disabled the per-wallet pause\n+        m_sync_paused_for_keypool = false;\n+\n+        const CChainParams& chainparams = Params();\n+        CValidationState state;\n+        if (!ActivateBestChain(state, chainparams)) {\n+            LogPrintf(\"Failed to connect best block\");\n+            StartShutdown();\n+        }\n+\n+        CBlockIndex *pindexRescan = chainActive.Genesis();\n+        CWalletDB walletdb(*dbw);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator)) {\n+            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+        }\n+\n+        if (chainActive.Tip() && chainActive.Tip() != pindexRescan) {\n+            //We can't rescan beyond non-pruned blocks, stop and throw an error\n+            //this might happen if a user uses a old wallet within a pruned node\n+            // or if he ran -disablewallet for a longer time, then decided to re-enable\n+            if (fPruneMode) {\n+                CBlockIndex *block = chainActive.Tip();\n+                while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block) {\n+                    block = block->pprev;\n+                }\n+\n+                if (pindexRescan != block) {\n+                    const static std::string pruneError = \"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\";\n+                    uiInterface.ThreadSafeMessageBox(pruneError, \"\", CClientUIInterface::MSG_ERROR);\n+                    StartShutdown();\n+                    throw std::runtime_error(pruneError);\n+                }\n+            }\n+            if (pindexRescan) {\n+                LogPrintf(\"Rescanning from height: %d\\n\", pindexRescan->nHeight);\n+            }\n+            ScanForWalletTransactions(pindexRescan, true);\n+        }\n+    }\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -1580,6 +1632,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n \n     CBlockIndex* pindex = pindexStart;\n     CBlockIndex* ret = nullptr;\n+    CBlockIndex* pindex_prev = NULL;\n     {\n         LOCK2(cs_main, cs_wallet);\n         fAbortRescan = false;\n@@ -1602,6 +1655,11 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool f\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n                     AddToWalletIfInvolvingMe(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n                 }\n+                if (m_sync_paused_for_keypool) {\n+                    LogPrintf(\"Aborting rescanning at block %d. Please extend the keypool first.\\n\", (pindex ? pindex->nHeight: 0));\n+                    return pindex_prev;\n+                }\n+                pindex_prev = pindex;\n             } else {\n                 ret = pindex;\n             }\n@@ -3604,6 +3662,13 @@ void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n     if (IsHDEnabled() && !TopUpKeyPool()) {\n         LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n     }\n+\n+    size_t extKeypoolSize = KeypoolCountExternalKeys();\n+    if (IsHDEnabled() && (extKeypoolSize < HD_RESTORE_KEYPOOL_SIZE_MIN || (setKeyPool.size()-extKeypoolSize) < HD_RESTORE_KEYPOOL_SIZE_MIN)) {\n+        // if the remaining keypool size is below the gap limit, refuse to cintinue with the sync\n+        m_sync_paused_for_keypool = true;\n+        LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+    }\n }\n \n void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const"
      },
      {
        "sha": "f482ac3f85298d4dd02dbf2479a3f2c4bfaba902",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ad970bef541e0e018dc348e6747dc6e6b6f5ef9d",
        "patch": "@@ -1136,6 +1136,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n        caller must ensure the current wallet version is correct before calling\n        this function). */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    void EventuallyRescanAfterKeypoolTopUp();\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "031eba3631cfb170f247998f3debde981c99d07e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzFlYmEzNjMxY2ZiMTcwZjI0Nzk5OGYzZGViZGU5ODFjOTlkMDdl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T15:07:06Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T21:59:20Z"
      },
      "message": "[wallet] check the keypool min size during startup and when retriving a key",
      "tree": {
        "sha": "1c07e8544799edf9aad50c1471b32a5e537c1f1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c07e8544799edf9aad50c1471b32a5e537c1f1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/031eba3631cfb170f247998f3debde981c99d07e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/031eba3631cfb170f247998f3debde981c99d07e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/031eba3631cfb170f247998f3debde981c99d07e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/031eba3631cfb170f247998f3debde981c99d07e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad970bef541e0e018dc348e6747dc6e6b6f5ef9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad970bef541e0e018dc348e6747dc6e6b6f5ef9d"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0af7b7f7dbfee993da63646e4b12ecfb3968d224",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/031eba3631cfb170f247998f3debde981c99d07e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/031eba3631cfb170f247998f3debde981c99d07e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=031eba3631cfb170f247998f3debde981c99d07e",
        "patch": "@@ -3348,6 +3348,7 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool int\n                 setKeyPool.erase(id);\n                 assert(keypool.vchPubKey.IsValid());\n                 LogPrintf(\"keypool reserve %d\\n\", nIndex);\n+                CheckKeypoolMinSize();\n                 return;\n             }\n         }\n@@ -3613,6 +3614,18 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+bool CWallet::CheckKeypoolMinSize() {\n+    LOCK(cs_wallet);\n+    size_t extKeypoolSize = KeypoolCountExternalKeys();\n+    if (IsHDEnabled() && (extKeypoolSize < HD_RESTORE_KEYPOOL_SIZE_MIN || (setKeyPool.size()-extKeypoolSize) < HD_RESTORE_KEYPOOL_SIZE_MIN)) {\n+        // if the remaining keypool size is below the gap limit, refuse to continue with the sync\n+        m_sync_paused_for_keypool = true;\n+        LogPrintf(\"%s: Keypool ran below min size, pause wallet sync\\n\", __func__);\n+        return false;\n+    }\n+    return true;\n+}\n+\n void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n {\n     LOCK(cs_wallet);\n@@ -3663,12 +3676,7 @@ void CWallet::MarkReserveKeysAsUsed(const CKeyID& keyId)\n         LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n     }\n \n-    size_t extKeypoolSize = KeypoolCountExternalKeys();\n-    if (IsHDEnabled() && (extKeypoolSize < HD_RESTORE_KEYPOOL_SIZE_MIN || (setKeyPool.size()-extKeypoolSize) < HD_RESTORE_KEYPOOL_SIZE_MIN)) {\n-        // if the remaining keypool size is below the gap limit, refuse to cintinue with the sync\n-        m_sync_paused_for_keypool = true;\n-        LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n-    }\n+    CheckKeypoolMinSize();\n }\n \n void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n@@ -4066,12 +4074,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         if (walletInstance->IsCrypted()) {\n             InitWarning(_(\"You are using an encrypted HD wallet. If you recover an HD wallet, you may miss incoming or outgoing transactions.\"));\n         } else {\n-            if (GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE) < HD_RESTORE_KEYPOOL_SIZE_MIN ) {\n-                InitWarning(_(\"Your keypool size is below the recommended limit for HD rescans. If you recover a HD wallet, you may miss incoming or outgoing transactions.\"));\n-            }\n             walletInstance->TopUpKeyPool();\n         }\n-\n+        if (!walletInstance->CheckKeypoolMinSize()) {\n+            InitWarning(_(\"Your keypool size is below the required limit for HD rescans. Wallet synchronisation is now paused until you have refilled the keypool.\"));\n+        }\n     }\n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!GetBoolArg(\"-rescan\", false))"
      },
      {
        "sha": "1979c3ab207e329395cb7f254d6d3795dfb9108c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/031eba3631cfb170f247998f3debde981c99d07e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/031eba3631cfb170f247998f3debde981c99d07e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=031eba3631cfb170f247998f3debde981c99d07e",
        "patch": "@@ -988,6 +988,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReturnKey(int64_t nIndex);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n+    bool CheckKeypoolMinSize();\n     void MarkReserveKeysAsUsed(const CKeyID& keyId);\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n "
      }
    ]
  },
  {
    "sha": "4abdce4a48c6e5d748c652cff7d906a522c4b463",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWJkY2U0YTQ4YzZlNWQ3NDhjNjUyY2ZmN2Q5MDZhNTIyYzRiNDYz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T15:26:36Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T22:00:16Z"
      },
      "message": "[wallet] add -keypoolrestoremin option",
      "tree": {
        "sha": "798d58f950fcbba0b1a1981ad6db6daa096bd902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/798d58f950fcbba0b1a1981ad6db6daa096bd902"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4abdce4a48c6e5d748c652cff7d906a522c4b463",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4abdce4a48c6e5d748c652cff7d906a522c4b463",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4abdce4a48c6e5d748c652cff7d906a522c4b463",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4abdce4a48c6e5d748c652cff7d906a522c4b463/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "031eba3631cfb170f247998f3debde981c99d07e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/031eba3631cfb170f247998f3debde981c99d07e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/031eba3631cfb170f247998f3debde981c99d07e"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "48730ffa5ac2eeba7c6eaa3d193908ad60969455",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abdce4a48c6e5d748c652cff7d906a522c4b463/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abdce4a48c6e5d748c652cff7d906a522c4b463/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4abdce4a48c6e5d748c652cff7d906a522c4b463",
        "patch": "@@ -3617,7 +3617,7 @@ void CReserveKey::ReturnKey()\n bool CWallet::CheckKeypoolMinSize() {\n     LOCK(cs_wallet);\n     size_t extKeypoolSize = KeypoolCountExternalKeys();\n-    if (IsHDEnabled() && (extKeypoolSize < HD_RESTORE_KEYPOOL_SIZE_MIN || (setKeyPool.size()-extKeypoolSize) < HD_RESTORE_KEYPOOL_SIZE_MIN)) {\n+    if (IsHDEnabled() && (extKeypoolSize < GetArg(\"-keypoolrestoremin\", DEFAULT_KEYPOOL_RESTORE_MIN) || (setKeyPool.size()-extKeypoolSize) < GetArg(\"-keypoolrestoremin\", DEFAULT_KEYPOOL_RESTORE_MIN))) {\n         // if the remaining keypool size is below the gap limit, refuse to continue with the sync\n         m_sync_paused_for_keypool = true;\n         LogPrintf(\"%s: Keypool ran below min size, pause wallet sync\\n\", __func__);\n@@ -3949,6 +3949,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n \n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n+        strUsage += HelpMessageOpt(\"-keypoolrestore min\", strprintf(_(\"If the keypool drops below this number of keys, generate new keys, or pause sync (default: %u)\"), DEFAULT_KEYPOOL_RESTORE_MIN));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n         strUsage += HelpMessageOpt(\"-walletrejectlongchains\", strprintf(_(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\"), DEFAULT_WALLET_REJECT_LONG_CHAINS));\n     }\n@@ -4070,12 +4071,18 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     RegisterValidationInterface(walletInstance);\n \n     // Keypool Restore: Make sure we always have a reasonable keypool size if HD is enabled\n+    unsigned int keypool_size = GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+    unsigned int keypool_restore_min = GetArg(\"-keypoolrestoremin\", DEFAULT_KEYPOOL_RESTORE_MIN);\n     if (walletInstance->IsHDEnabled()) {\n         if (walletInstance->IsCrypted()) {\n-            InitWarning(_(\"You are using an encrypted HD wallet. If you recover an HD wallet, you may miss incoming or outgoing transactions.\"));\n+            if (keypool_size < DEFAULT_KEYPOOL_RESTORE_MIN && keypool_size < keypool_restore_min) {\n+                LogPrintf(\"Parameter Interaction: keypool size (%d) must be larger than keypool restore minimum size for encrypted wallets (%d)\\n\", keypool_size, keypool_restore_min);\n+                SoftSetArg(\"-keypool\", std::to_string(keypool_restore_min));\n+            }\n         } else {\n             walletInstance->TopUpKeyPool();\n         }\n+\n         if (!walletInstance->CheckKeypoolMinSize()) {\n             InitWarning(_(\"Your keypool size is below the required limit for HD rescans. Wallet synchronisation is now paused until you have refilled the keypool.\"));\n         }"
      },
      {
        "sha": "8341732ef0c1609303158ad75cc2806c933d18e5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abdce4a48c6e5d748c652cff7d906a522c4b463/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abdce4a48c6e5d748c652cff7d906a522c4b463/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4abdce4a48c6e5d748c652cff7d906a522c4b463",
        "patch": "@@ -41,7 +41,9 @@ extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 100;\n-static const unsigned int HD_RESTORE_KEYPOOL_SIZE_MIN = 20;\n+//! If the keypool drops below this value, generate new keys (or pause sync if\n+//  unable to generate new keys)\n+static const unsigned int DEFAULT_KEYPOOL_RESTORE_MIN = 20;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -fallbackfee default"
      },
      {
        "sha": "9db4af17b39c23a209189db488df8461b1c2ced1",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abdce4a48c6e5d748c652cff7d906a522c4b463/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abdce4a48c6e5d748c652cff7d906a522c4b463/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=4abdce4a48c6e5d748c652cff7d906a522c4b463",
        "patch": "@@ -209,7 +209,7 @@ def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, b\n         datadir = os.path.join(dirname, \"node\" + str(i))\n         if binary is None:\n             binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(self.mocktime), \"-uacomment=testnode%d\" % i]\n+        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-keypoolrestoremin=0\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(self.mocktime), \"-uacomment=testnode%d\" % i]\n         if extra_args is not None:\n             args.extend(extra_args)\n         self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n@@ -379,7 +379,7 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(cachedir, i)\n-                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n+                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-keypoolrestoremin=0\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.bitcoind_processes[i] = subprocess.Popen(args)"
      },
      {
        "sha": null,
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4abdce4a48c6e5d748c652cff7d906a522c4b463/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4abdce4a48c6e5d748c652cff7d906a522c4b463/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=4abdce4a48c6e5d748c652cff7d906a522c4b463"
      }
    ]
  },
  {
    "sha": "cac1824e339ff5adf87e5a12a6359d5f3328e31f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWMxODI0ZTMzOWZmNWFkZjg3ZTVhMTJhNjM1OWQ1ZjMzMjhlMzFm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T14:51:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-14T22:00:17Z"
      },
      "message": "[wallet] [tests] add keypool restore functional test",
      "tree": {
        "sha": "bf404b6f272e65f7ad80c893023b68594b028f1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf404b6f272e65f7ad80c893023b68594b028f1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cac1824e339ff5adf87e5a12a6359d5f3328e31f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cac1824e339ff5adf87e5a12a6359d5f3328e31f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cac1824e339ff5adf87e5a12a6359d5f3328e31f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cac1824e339ff5adf87e5a12a6359d5f3328e31f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4abdce4a48c6e5d748c652cff7d906a522c4b463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4abdce4a48c6e5d748c652cff7d906a522c4b463",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4abdce4a48c6e5d748c652cff7d906a522c4b463"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 154,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bfd97ce3f6263058c29497db36f8f860cd90e277",
        "filename": "test/functional/keypool-restore.py",
        "status": "added",
        "additions": 153,
        "deletions": 0,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac1824e339ff5adf87e5a12a6359d5f3328e31f/test/functional/keypool-restore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac1824e339ff5adf87e5a12a6359d5f3328e31f/test/functional/keypool-restore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-restore.py?ref=cac1824e339ff5adf87e5a12a6359d5f3328e31f",
        "patch": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet key restore function.\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.util import assert_equal, connect_nodes_bi\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolrestoremin=20']]\n+\n+    def run_test(self):\n+        tmpdir = self.options.tmpdir\n+\n+        self.log.info(\"Initialize wallet including backups of unencrypted and encrypted wallet\")\n+        # stop and backup original wallet (only keypool has been initialized)\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.bak\")\n+\n+        # start again and encrypt wallet\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.nodes[1].encryptwallet('test')\n+        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        # node will be stopped during encryption, now do a backup\n+        shutil.copyfile(tmpdir + \"/node1/regtest/wallet.dat\", tmpdir + \"/hd.enc.bak\")\n+\n+        # start the node with encrypted wallet, get address in new pool at pos 50 (over the gap limit)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        for _ in range(50):\n+            addr_enc_oldpool = self.nodes[1].getnewaddress()\n+\n+        # now make sure we retrive an address in the extended pool\n+        self.nodes[1].walletpassphrase(\"test\", 10)\n+        for _ in range(80):\n+            addr_enc_extpool = self.nodes[1].getnewaddress()\n+\n+        # stop and load initial backup of the unencrypted wallet\n+        self.stop_node(1)\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        for _ in range(10):\n+            addr = self.nodes[1].getnewaddress()\n+\n+        self.nodes[0].generate(101)\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].validateaddress(addr)['hdkeypath'], \"m/0'/0'/11'\")\n+\n+        rawch = self.nodes[1].getrawchangeaddress()\n+        self.nodes[0].sendtoaddress(addr, 1)\n+        n0addr = self.nodes[0].getnewaddress()\n+        txdata = self.nodes[0].createrawtransaction([], {rawch: 2.0, n0addr: 3.0})\n+\n+        txdata_f = self.nodes[0].fundrawtransaction(txdata)\n+        txdata_s = self.nodes[0].signrawtransaction(txdata_f['hex'])\n+        self.nodes[0].sendrawtransaction(txdata_s['hex'])\n+\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[1].getbalance(), 3)\n+        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n+\n+        self.log.info(\"Testing with unencrypted wallet\")\n+        self.stop_node(1)\n+        shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n+        shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n+        shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[0].generate(1)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all()\n+        assert_equal(self.nodes[1].getbalance(), 3)  # make sure we have reconstructed the transaction\n+        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n+\n+        # now check if we have marked all keys up to the used keypool key as used\n+        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/12'\")\n+\n+        # make sure the key on the internal chain is also marked as used\n+        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getrawchangeaddress())['hdkeypath'], \"m/0'/1'/1'\")\n+\n+        # continue send funds (one in the main keypool over the gap limit, the other in the extended pool space)\n+        self.nodes[0].sendtoaddress(addr_enc_oldpool, 10)\n+        self.nodes[0].generate(1)\n+        stop_height = self.nodes[0].getblockchaininfo()['blocks']\n+        self.nodes[0].sendtoaddress(addr_enc_extpool, 5)\n+        self.nodes[0].generate(1)\n+\n+        #########################################################\n+        #########################################################\n+\n+        self.log.info(\"Testing with encrypted wallet\")\n+        # Try with the encrypted wallet (non pruning)\n+        self.stop_node(1)\n+        shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n+        shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n+        shutil.copyfile(tmpdir + \"/hd.enc.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        # Sync must be possible, though the wallet bestblock should lack behind\n+        self.sync_all()\n+\n+        # The balance should cover everything expect the very last tx of 5 BTC\n+        assert_equal(self.nodes[1].getbalance(), 13)\n+\n+        # unlock the wallet, the sync can continue then\n+        self.nodes[1].walletpassphrase(\"test\", 100)\n+        self.sync_all()  # sync is now possible\n+\n+        # we should now have restored all funds\n+        assert_equal(self.nodes[1].getbalance(), 18)  # all funds recovered\n+        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n+\n+        #########################################################\n+        #########################################################\n+\n+        self.log.info(\"Testing with encrypted wallet in prune mode\")\n+        # Now try with the encrypted wallet in prune mode\n+        self.stop_node(1)\n+        shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n+        shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n+        shutil.copyfile(tmpdir + \"/hd.enc.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1] + ['-prune=550'])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        # now we should only be capable to sync up to the second last block (pruned mode, sync will be paused)\n+        assert_equal(self.nodes[1].waitforblockheight(stop_height, 10 * 1000)['height'], stop_height)  # must be possible\n+\n+        # This must timeout now, we can't sync up to stop_height+1 (== most recent block)\n+        # Sync must be paused at this point\n+        assert_equal(self.nodes[1].waitforblockheight(stop_height + 1, 3 * 1000)['height'], stop_height)\n+\n+        # The balance should cover everything expect the very last tx of 5 BTC\n+        assert_equal(self.nodes[1].getbalance(), 13)\n+\n+        # unlock the wallet, the sync can continue then\n+        self.nodes[1].walletpassphrase(\"test\", 100)\n+        self.sync_all()  # sync is now possible\n+\n+        # we should now have restored all funds\n+        assert_equal(self.nodes[1].getbalance(), 18)\n+        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n+\n+if __name__ == '__main__':\n+    KeypoolRestoreTest().main()"
      },
      {
        "sha": "e7b55fa74f8a8d80fcc3cef52e3fa95da9076464",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac1824e339ff5adf87e5a12a6359d5f3328e31f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac1824e339ff5adf87e5a12a6359d5f3328e31f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=cac1824e339ff5adf87e5a12a6359d5f3328e31f",
        "patch": "@@ -55,6 +55,7 @@\n     # Scripts that are run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n+    'keypool-restore.py',\n     'walletbackup.py',\n     # vv Tests less than 5m vv\n     'p2p-fullblocktest.py',"
      }
    ]
  }
]