[
  {
    "sha": "e58598e833d5737900fe3c4369e26f2a08166892",
    "node_id": "C_kwDOABII59oAKGU1ODU5OGU4MzNkNTczNzkwMGZlM2M0MzY5ZTI2ZjJhMDgxNjY4OTI",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-28T11:46:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-28T11:51:19Z"
      },
      "message": "[addrman] Add doxygen comment to AddrMan::Add()\n\nDoes not document the return value since we're going to fix the\nsemantics in a future commit.",
      "tree": {
        "sha": "830b7c1529f3560a0417084f3660f6bbc877a6e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/830b7c1529f3560a0417084f3660f6bbc877a6e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e58598e833d5737900fe3c4369e26f2a08166892",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e58598e833d5737900fe3c4369e26f2a08166892",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e58598e833d5737900fe3c4369e26f2a08166892",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e58598e833d5737900fe3c4369e26f2a08166892/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1fbc827183ad4c9487c91c382477a5778320ea8a",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e58598e833d5737900fe3c4369e26f2a08166892/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e58598e833d5737900fe3c4369e26f2a08166892/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=e58598e833d5737900fe3c4369e26f2a08166892",
        "patch": "@@ -69,7 +69,14 @@ class AddrMan\n     //! Return the number of (unique) addresses in all tables.\n     size_t size() const;\n \n-    //! Add addresses to addrman's new table.\n+    /**\n+     * Attempt to add one or more addresses to addrman's new table.\n+     *\n+     * @param[in] vAddr           Address records to attempt to add.\n+     * @param[in] source          The address of the node that sent us these addr records.\n+     * @param[in] nTimePenalty    A \"time penalty\" to apply to the address record's nTime. If a peer\n+     *                            sends us an address record with nTime=n, then we'll add it to our\n+     *                            addrman with nTime=(n - nTimePenalty). */\n     bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0);\n \n     //! Mark an entry as accessible, possibly moving it from \"new\" to \"tried\"."
      }
    ]
  },
  {
    "sha": "2658eb6d68460272deefb3fcc653b03f6ec6e7cf",
    "node_id": "C_kwDOABII59oAKDI2NThlYjZkNjg0NjAyNzJkZWVmYjNmY2M2NTNiMDNmNmVjNmU3Y2Y",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-01T16:15:46Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-28T11:52:27Z"
      },
      "message": "[addrman] Rename Add_() to AddSingle()",
      "tree": {
        "sha": "1056a3ef4e7132d91a30bc1c3bd3d8f7f536079b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1056a3ef4e7132d91a30bc1c3bd3d8f7f536079b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2658eb6d68460272deefb3fcc653b03f6ec6e7cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2658eb6d68460272deefb3fcc653b03f6ec6e7cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2658eb6d68460272deefb3fcc653b03f6ec6e7cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2658eb6d68460272deefb3fcc653b03f6ec6e7cf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e58598e833d5737900fe3c4369e26f2a08166892",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e58598e833d5737900fe3c4369e26f2a08166892",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e58598e833d5737900fe3c4369e26f2a08166892"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b0555898e27f35aca3c4525c6ad600ea6405a21d",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2658eb6d68460272deefb3fcc653b03f6ec6e7cf/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2658eb6d68460272deefb3fcc653b03f6ec6e7cf/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=2658eb6d68460272deefb3fcc653b03f6ec6e7cf",
        "patch": "@@ -592,7 +592,7 @@ void AddrManImpl::Good_(const CService& addr, bool test_before_evict, int64_t nT\n     }\n }\n \n-bool AddrManImpl::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)\n+bool AddrManImpl::AddSingle(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)\n {\n     AssertLockHeld(cs);\n \n@@ -1034,7 +1034,7 @@ bool AddrManImpl::Add(const std::vector<CAddress>& vAddr, const CNetAddr& source\n     int nAdd = 0;\n     Check();\n     for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n-        nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n+        nAdd += AddSingle(*it, source, nTimePenalty) ? 1 : 0;\n     Check();\n     if (nAdd) {\n         LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);"
      },
      {
        "sha": "2d01881f2ef3484f6531a445c5bef783e5e4be17",
        "filename": "src/addrman_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2658eb6d68460272deefb3fcc653b03f6ec6e7cf/src/addrman_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2658eb6d68460272deefb3fcc653b03f6ec6e7cf/src/addrman_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman_impl.h?ref=2658eb6d68460272deefb3fcc653b03f6ec6e7cf",
        "patch": "@@ -244,7 +244,9 @@ class AddrManImpl\n \n     void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    bool Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    /** Attempt to add a single address to addrman's new table.\n+     *  @see AddrMan::Add() for parameters. */\n+    bool AddSingle(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n "
      }
    ]
  },
  {
    "sha": "2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
    "node_id": "C_kwDOABII59oAKDIwOTVkZjdiN2JmY2I5YWIwYzU3MTBhOTMxMTJmN2YzNDFlNzUzYzk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-01T16:26:08Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-28T13:00:21Z"
      },
      "message": "[addrman] Add Add_() inner function, fix Add() return semantics\n\nPreviously, Add() would return true if the function created a new\nAddressInfo object, even if that object could not be successfully\nentered into the new table and was deleted. That would happen if the new\ntable position was already taken and the existing entry could not be\nremoved.\n\nInstead, return true if the new AddressInfo object is successfully\nentered into the new table. This fixes a bug in the \"Added %i addresses\"\nlog, which would not always accurately log how many addresses had been\nadded.\n\np2p_addrv2_relay.py and p2p_addr_relay.py need to be updated since they\nwere incorrectly asserting on the buggy log (assuming that addresses are\nadded to addrman, when there could in fact be new table position\ncollisions that prevent some of those address records from being added).",
      "tree": {
        "sha": "22703ab84a8823e7ad923d8d6532ebb885d74aa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22703ab84a8823e7ad923d8d6532ebb885d74aa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2658eb6d68460272deefb3fcc653b03f6ec6e7cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2658eb6d68460272deefb3fcc653b03f6ec6e7cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2658eb6d68460272deefb3fcc653b03f6ec6e7cf"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 21,
      "deletions": 17
    },
    "files": [
      {
        "sha": "0222f625be8f7c8f26711cc8bdcabcdcb116f717",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
        "patch": "@@ -599,7 +599,6 @@ bool AddrManImpl::AddSingle(const CAddress& addr, const CNetAddr& source, int64_\n     if (!addr.IsRoutable())\n         return false;\n \n-    bool fNew = false;\n     int nId;\n     AddrInfo* pinfo = Find(addr, &nId);\n \n@@ -640,13 +639,12 @@ bool AddrManImpl::AddSingle(const CAddress& addr, const CNetAddr& source, int64_\n         pinfo = Create(addr, source, &nId);\n         pinfo->nTime = std::max((int64_t)0, (int64_t)pinfo->nTime - nTimePenalty);\n         nNew++;\n-        fNew = true;\n     }\n \n     int nUBucket = pinfo->GetNewBucket(nKey, source, m_asmap);\n     int nUBucketPos = pinfo->GetBucketPosition(nKey, true, nUBucket);\n+    bool fInsert = vvNew[nUBucket][nUBucketPos] == -1;\n     if (vvNew[nUBucket][nUBucketPos] != nId) {\n-        bool fInsert = vvNew[nUBucket][nUBucketPos] == -1;\n         if (!fInsert) {\n             AddrInfo& infoExisting = mapInfo[vvNew[nUBucket][nUBucketPos]];\n             if (infoExisting.IsTerrible() || (infoExisting.nRefCount > 1 && pinfo->nRefCount == 0)) {\n@@ -666,7 +664,19 @@ bool AddrManImpl::AddSingle(const CAddress& addr, const CNetAddr& source, int64_\n             }\n         }\n     }\n-    return fNew;\n+    return fInsert;\n+}\n+\n+bool AddrManImpl::Add_(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty)\n+{\n+    int added{0};\n+    for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++) {\n+        added += AddSingle(*it, source, nTimePenalty) ? 1 : 0;\n+    }\n+    if (added > 0) {\n+        LogPrint(BCLog::ADDRMAN, \"Added %i addresses (of %i) from %s: %i tried, %i new\\n\", added, vAddr.size(), source.ToString(), nTried, nNew);\n+    }\n+    return added > 0;\n }\n \n void AddrManImpl::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)\n@@ -1031,15 +1041,10 @@ size_t AddrManImpl::size() const\n bool AddrManImpl::Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty)\n {\n     LOCK(cs);\n-    int nAdd = 0;\n     Check();\n-    for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n-        nAdd += AddSingle(*it, source, nTimePenalty) ? 1 : 0;\n+    auto ret = Add_(vAddr, source, nTimePenalty);\n     Check();\n-    if (nAdd) {\n-        LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n-    }\n-    return nAdd > 0;\n+    return ret;\n }\n \n void AddrManImpl::Good(const CService& addr, int64_t nTime)"
      },
      {
        "sha": "a9f697f66f3176223d17943a1e60ecc6c84dc2e2",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
        "patch": "@@ -76,7 +76,8 @@ class AddrMan\n      * @param[in] source          The address of the node that sent us these addr records.\n      * @param[in] nTimePenalty    A \"time penalty\" to apply to the address record's nTime. If a peer\n      *                            sends us an address record with nTime=n, then we'll add it to our\n-     *                            addrman with nTime=(n - nTimePenalty). */\n+     *                            addrman with nTime=(n - nTimePenalty).\n+     * @return    true if at least one address is successfully added. */\n     bool Add(const std::vector<CAddress>& vAddr, const CNetAddr& source, int64_t nTimePenalty = 0);\n \n     //! Mark an entry as accessible, possibly moving it from \"new\" to \"tried\"."
      },
      {
        "sha": "c8eb73027e120c0902a0c20de0077a9af709325b",
        "filename": "src/addrman_impl.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/src/addrman_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/src/addrman_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman_impl.h?ref=2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
        "patch": "@@ -248,6 +248,8 @@ class AddrManImpl\n      *  @see AddrMan::Add() for parameters. */\n     bool AddSingle(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    bool Add_(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     std::pair<CAddress, int64_t> Select_(bool newOnly) const EXCLUSIVE_LOCKS_REQUIRED(cs);"
      },
      {
        "sha": "eabc11c46773c97af31f1b442d94c462a0f962d3",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
        "patch": "@@ -347,7 +347,7 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n     //Test: tried table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n     BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));"
      },
      {
        "sha": "9df74ad3a01dcc10406f7fff2b029b5d0ff3a962",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
        "patch": "@@ -152,7 +152,6 @@ def relay_tests(self):\n         msg = self.setup_addr_msg(num_ipv4_addrs)\n         with self.nodes[0].assert_debug_log(\n             [\n-                'Added {} addresses from 127.0.0.1: 0 tried'.format(num_ipv4_addrs),\n                 'received: addr (301 bytes) peer=1',\n             ]\n         ):"
      },
      {
        "sha": "f4be893d2c5511c67fb81325aa380f897877c57c",
        "filename": "test/functional/p2p_addrv2_relay.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/test/functional/p2p_addrv2_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2095df7b7bfcb9ab0c5710a93112f7f341e753c9/test/functional/p2p_addrv2_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addrv2_relay.py?ref=2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
        "patch": "@@ -72,9 +72,6 @@ def run_test(self):\n         addr_receiver = self.nodes[0].add_p2p_connection(AddrReceiver())\n         msg.addrs = ADDRS\n         with self.nodes[0].assert_debug_log([\n-                # The I2P address is not added to node's own addrman because it has no\n-                # I2P reachability (thus 10 - 1 = 9).\n-                'Added 9 addresses from 127.0.0.1: 0 tried',\n                 'received: addrv2 (159 bytes) peer=0',\n                 'sending addrv2 (159 bytes) peer=1',\n         ]):"
      }
    ]
  },
  {
    "sha": "61ec0539b26a902a41a2602187a71f9dba3c6935",
    "node_id": "C_kwDOABII59oAKDYxZWMwNTM5YjI2YTkwMmE0MWEyNjAyMTg3YTcxZjlkYmEzYzY5MzU",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-28T11:59:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-10-28T13:01:40Z"
      },
      "message": "[MOVEONLY] reorder functions in addrman_impl.h and addrman.cpp\n\nKeep the internal {Function}_() functions grouped together.\n\nReview with `git diff --color-moved=dimmed-zebra`",
      "tree": {
        "sha": "6b0aa0d4674497d20b720a4fba9515aae851d6c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b0aa0d4674497d20b720a4fba9515aae851d6c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61ec0539b26a902a41a2602187a71f9dba3c6935",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61ec0539b26a902a41a2602187a71f9dba3c6935",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61ec0539b26a902a41a2602187a71f9dba3c6935",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61ec0539b26a902a41a2602187a71f9dba3c6935/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2095df7b7bfcb9ab0c5710a93112f7f341e753c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2095df7b7bfcb9ab0c5710a93112f7f341e753c9"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 57,
      "deletions": 57
    },
    "files": [
      {
        "sha": "53d4f0a820fd6984f424fbef0e260cb144ad73f2",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 55,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61ec0539b26a902a41a2602187a71f9dba3c6935/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61ec0539b26a902a41a2602187a71f9dba3c6935/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=61ec0539b26a902a41a2602187a71f9dba3c6935",
        "patch": "@@ -537,61 +537,6 @@ void AddrManImpl::MakeTried(AddrInfo& info, int nId)\n     info.fInTried = true;\n }\n \n-void AddrManImpl::Good_(const CService& addr, bool test_before_evict, int64_t nTime)\n-{\n-    AssertLockHeld(cs);\n-\n-    int nId;\n-\n-    nLastGood = nTime;\n-\n-    AddrInfo* pinfo = Find(addr, &nId);\n-\n-    // if not found, bail out\n-    if (!pinfo)\n-        return;\n-\n-    AddrInfo& info = *pinfo;\n-\n-    // update info\n-    info.nLastSuccess = nTime;\n-    info.nLastTry = nTime;\n-    info.nAttempts = 0;\n-    // nTime is not updated here, to avoid leaking information about\n-    // currently-connected peers.\n-\n-    // if it is already in the tried set, don't do anything else\n-    if (info.fInTried)\n-        return;\n-\n-    // if it is not in new, something bad happened\n-    if (!Assume(info.nRefCount > 0)) {\n-        return;\n-    }\n-\n-    // which tried bucket to move the entry to\n-    int tried_bucket = info.GetTriedBucket(nKey, m_asmap);\n-    int tried_bucket_pos = info.GetBucketPosition(nKey, false, tried_bucket);\n-\n-    // Will moving this address into tried evict another entry?\n-    if (test_before_evict && (vvTried[tried_bucket][tried_bucket_pos] != -1)) {\n-        if (m_tried_collisions.size() < ADDRMAN_SET_TRIED_COLLISION_SIZE) {\n-            m_tried_collisions.insert(nId);\n-        }\n-        // Output the entry we'd be colliding with, for debugging purposes\n-        auto colliding_entry = mapInfo.find(vvTried[tried_bucket][tried_bucket_pos]);\n-        LogPrint(BCLog::ADDRMAN, \"Collision with %s while attempting to move %s to tried table. Collisions=%d\\n\",\n-                 colliding_entry != mapInfo.end() ? colliding_entry->second.ToString() : \"\",\n-                 addr.ToString(),\n-                 m_tried_collisions.size());\n-    } else {\n-        // move nId to the tried tables\n-        MakeTried(info, nId);\n-        LogPrint(BCLog::ADDRMAN, \"Moved %s mapped to AS%i to tried[%i][%i]\\n\",\n-                 addr.ToString(), addr.GetMappedAS(m_asmap), tried_bucket, tried_bucket_pos);\n-    }\n-}\n-\n bool AddrManImpl::AddSingle(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)\n {\n     AssertLockHeld(cs);\n@@ -667,6 +612,61 @@ bool AddrManImpl::AddSingle(const CAddress& addr, const CNetAddr& source, int64_\n     return fInsert;\n }\n \n+void AddrManImpl::Good_(const CService& addr, bool test_before_evict, int64_t nTime)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+\n+    nLastGood = nTime;\n+\n+    AddrInfo* pinfo = Find(addr, &nId);\n+\n+    // if not found, bail out\n+    if (!pinfo)\n+        return;\n+\n+    AddrInfo& info = *pinfo;\n+\n+    // update info\n+    info.nLastSuccess = nTime;\n+    info.nLastTry = nTime;\n+    info.nAttempts = 0;\n+    // nTime is not updated here, to avoid leaking information about\n+    // currently-connected peers.\n+\n+    // if it is already in the tried set, don't do anything else\n+    if (info.fInTried)\n+        return;\n+\n+    // if it is not in new, something bad happened\n+    if (!Assume(info.nRefCount > 0)) {\n+        return;\n+    }\n+\n+    // which tried bucket to move the entry to\n+    int tried_bucket = info.GetTriedBucket(nKey, m_asmap);\n+    int tried_bucket_pos = info.GetBucketPosition(nKey, false, tried_bucket);\n+\n+    // Will moving this address into tried evict another entry?\n+    if (test_before_evict && (vvTried[tried_bucket][tried_bucket_pos] != -1)) {\n+        if (m_tried_collisions.size() < ADDRMAN_SET_TRIED_COLLISION_SIZE) {\n+            m_tried_collisions.insert(nId);\n+        }\n+        // Output the entry we'd be colliding with, for debugging purposes\n+        auto colliding_entry = mapInfo.find(vvTried[tried_bucket][tried_bucket_pos]);\n+        LogPrint(BCLog::ADDRMAN, \"Collision with %s while attempting to move %s to tried table. Collisions=%d\\n\",\n+                 colliding_entry != mapInfo.end() ? colliding_entry->second.ToString() : \"\",\n+                 addr.ToString(),\n+                 m_tried_collisions.size());\n+    } else {\n+        // move nId to the tried tables\n+        MakeTried(info, nId);\n+        LogPrint(BCLog::ADDRMAN, \"Moved %s mapped to AS%i to tried[%i][%i]\\n\",\n+                 addr.ToString(), addr.GetMappedAS(m_asmap), tried_bucket, tried_bucket_pos);\n+    }\n+}\n+\n bool AddrManImpl::Add_(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty)\n {\n     int added{0};"
      },
      {
        "sha": "e7a9f0e76f99177e09b8fb629eac27faa77f9360",
        "filename": "src/addrman_impl.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61ec0539b26a902a41a2602187a71f9dba3c6935/src/addrman_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61ec0539b26a902a41a2602187a71f9dba3c6935/src/addrman_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman_impl.h?ref=61ec0539b26a902a41a2602187a71f9dba3c6935",
        "patch": "@@ -242,12 +242,12 @@ class AddrManImpl\n     //! Move an entry from the \"new\" table(s) to the \"tried\" table\n     void MakeTried(AddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-\n     /** Attempt to add a single address to addrman's new table.\n      *  @see AddrMan::Add() for parameters. */\n     bool AddSingle(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    void Good_(const CService& addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     bool Add_(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     void Attempt_(const CService& addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);"
      }
    ]
  }
]