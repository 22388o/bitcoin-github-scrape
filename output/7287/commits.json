[
  {
    "sha": "93fc58c7426b5f3c68f2657626698846fb512ee8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2ZjNThjNzQyNmI1ZjNjNjhmMjY1NzYyNjY5ODg0NmZiNTEyZWU4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-12-02T02:13:47Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-01-29T17:38:39Z"
      },
      "message": "Consensus: Remove calls to error() and FormatStateMessage() from some consensus code in main",
      "tree": {
        "sha": "1beb1caabf7ab44434329dcc01051b31f381993d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1beb1caabf7ab44434329dcc01051b31f381993d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93fc58c7426b5f3c68f2657626698846fb512ee8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93fc58c7426b5f3c68f2657626698846fb512ee8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93fc58c7426b5f3c68f2657626698846fb512ee8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93fc58c7426b5f3c68f2657626698846fb512ee8/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17ef279304a94ec01a8525189b80c163d931b1cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17ef279304a94ec01a8525189b80c163d931b1cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17ef279304a94ec01a8525189b80c163d931b1cf"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 32,
      "deletions": 51
    },
    "files": [
      {
        "sha": "8e35dc78df7c9faaeeca333c53245bdd19d1ab51",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 51,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93fc58c7426b5f3c68f2657626698846fb512ee8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93fc58c7426b5f3c68f2657626698846fb512ee8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=93fc58c7426b5f3c68f2657626698846fb512ee8",
        "patch": "@@ -814,12 +814,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n                               bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n {\n+    const uint256 hash = tx.GetHash();\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n     if (!CheckTransaction(tx, state))\n-        return false;\n+        return error(\"%s: CheckTransaction: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n@@ -837,7 +838,6 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n-    uint256 hash = tx.GetHash();\n     if (pool.exists(hash))\n         return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n@@ -1170,7 +1170,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n-            return false;\n+            return error(\"%s: CheckInputs: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -1964,7 +1964,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     // Check it again in case a previous version let a bad block in\n     if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n-        return false;\n+        return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n \n     // verify that the view's current state corresponds to the previous block\n     uint256 hashPrevBlock = pindex->pprev == NULL ? uint256() : pindex->pprev->GetBlockHash();\n@@ -2909,13 +2909,11 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n-        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n-                         REJECT_INVALID, \"high-hash\");\n+        return state.DoS(50, false, REJECT_INVALID, \"high-hash\", false, \"proof of work failed\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n-                             REJECT_INVALID, \"time-too-new\");\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-new\", \"block timestamp too far in the future\");\n \n     return true;\n }\n@@ -2937,15 +2935,13 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         bool mutated;\n         uint256 hashMerkleRoot2 = BlockMerkleRoot(block, &mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n-                             REJECT_INVALID, \"bad-txnmrklroot\", true);\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txnmrklroot\", true, \"hashMerkleRoot mismatch\");\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n         if (mutated)\n-            return state.DoS(100, error(\"CheckBlock(): duplicate transaction\"),\n-                             REJECT_INVALID, \"bad-txns-duplicate\", true);\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-duplicate\", true, \"duplicate transaction\");\n     }\n \n     // All potential-corruption validation must be done before we do any\n@@ -2954,33 +2950,28 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-blk-length\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, error(\"CheckBlock(): first tx is not coinbase\"),\n-                         REJECT_INVALID, \"bad-cb-missing\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-cb-missing\", false, \"first tx is not coinbase\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, error(\"CheckBlock(): more than one coinbase\"),\n-                             REJECT_INVALID, \"bad-cb-multiple\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-multiple\", false, \"more than one coinbase\");\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock(): CheckTransaction of %s failed with %s\",\n-                tx.GetHash().ToString(),\n-                FormatStateMessage(state));\n+            return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n+                                 strprintf(\"Transaction check failed (tx hash %s) %s\", tx.GetHash().ToString(), state.GetDebugMessage()));\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n-                         REJECT_INVALID, \"bad-blk-sigops\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", false, \"out-of-bounds SigOpCount\");\n \n     if (fCheckPOW && fCheckMerkleRoot)\n         block.fChecked = true;\n@@ -3007,28 +2998,17 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Check proof of work\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n-        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n-                         REJECT_INVALID, \"bad-diffbits\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n-                             REJECT_INVALID, \"time-too-old\");\n-\n-    // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n+        return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n \n-    // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-        return state.Invalid(error(\"%s: rejected nVersion=2 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n-\n-    // Reject block.nVersion=3 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 4 && IsSuperMajority(4, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n-        return state.Invalid(error(\"%s : rejected nVersion=3 block\", __func__),\n-                             REJECT_OBSOLETE, \"bad-version\");\n+    // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n+    for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n+        if (block.nVersion < version && IsSuperMajority(version, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+            return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(v%d)\", version - 1),\n+                                 strprintf(\"rejected nVersion=%d block\", version - 1));\n \n     return true;\n }\n@@ -3045,7 +3025,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n                                 ? pindexPrev->GetMedianTimePast()\n                                 : block.GetBlockTime();\n         if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n-            return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n+            return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", false, \"non-final transaction\");\n         }\n     }\n \n@@ -3056,7 +3036,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, error(\"%s: block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-height\", false, \"block height mismatch in coinbase\");\n         }\n     }\n \n@@ -3083,7 +3063,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n         }\n \n         if (!CheckBlockHeader(block, state))\n-            return false;\n+            return error(\"%s: Consensus::CheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n \n         // Get prev block index\n         CBlockIndex* pindexPrev = NULL;\n@@ -3099,7 +3079,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n \n         if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n-            return false;\n+            return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n     }\n     if (pindex == NULL)\n         pindex = AddToBlockIndex(block);\n@@ -3146,7 +3126,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n         }\n-        return false;\n+        return error(\"%s: %s\", __func__, FormatStateMessage(state));\n     }\n \n     int nHeight = pindex->nHeight;\n@@ -3197,7 +3177,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, c\n         bool fRequested = MarkBlockAsReceived(pblock->GetHash());\n         fRequested |= fForceProcessing;\n         if (!checked) {\n-            return error(\"%s: CheckBlock FAILED\", __func__);\n+            return error(\"%s: CheckBlock FAILED %s\", __func__, FormatStateMessage(state));\n         }\n \n         // Store to disk\n@@ -3231,11 +3211,11 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n-        return false;\n+        return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n-        return false;\n+        return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, pindexPrev))\n-        return false;\n+        return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, true))\n         return false;\n     assert(state.IsValid());\n@@ -3565,7 +3545,8 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state))\n-            return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__, \n+                         pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;"
      }
    ]
  }
]