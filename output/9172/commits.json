[
  {
    "sha": "a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDE1M2UyMGVjYTNmM2E3YmVjNWYwYjFmMTNkMGFlMDc1NTc0MTZi",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-04-22T22:19:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-12-15T12:29:03Z"
      },
      "message": "Simple fuzzing framework",
      "tree": {
        "sha": "ec87d3c368556358dd0d2e8844a77c38d5905e00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec87d3c368556358dd0d2e8844a77c38d5905e00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b68685a16a81729f4d10975171c23c407cd332e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b68685a16a81729f4d10975171c23c407cd332e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b68685a16a81729f4d10975171c23c407cd332e3"
      }
    ],
    "stats": {
      "total": 279,
      "additions": 279,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5dbce8aa7cc90ef65983f77534afa9515da0b0cc",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
        "patch": "@@ -6,6 +6,7 @@ src/bitcoind\n src/bitcoin-cli\n src/bitcoin-tx\n src/test/test_bitcoin\n+src/test/test_bitcoin_fuzzy\n src/qt/test/test_bitcoin-qt\n \n # autoreconf"
      },
      {
        "sha": "389be6c0585c32e6687ffcacfa844a6a467ddc4c",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
        "patch": "@@ -61,6 +61,7 @@ EXTRA_LIBRARIES += \\\n lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n \n bin_PROGRAMS =\n+noinst_PROGRAMS =\n TESTS =\n BENCHMARKS =\n "
      },
      {
        "sha": "190c69be5f9f849f2bddef493b278c1ca400bde1",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
        "patch": "@@ -4,6 +4,7 @@\n \n TESTS += test/test_bitcoin\n bin_PROGRAMS += test/test_bitcoin\n+noinst_PROGRAMS += test/test_bitcoin_fuzzy\n TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n@@ -38,6 +39,7 @@ RAW_TEST_FILES =\n \n GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)\n \n+# test_bitcoin binary #\n BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n   test/scriptnum10.h \\\n@@ -119,6 +121,25 @@ test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -s\n if ENABLE_ZMQ\n test_test_bitcoin_LDADD += $(ZMQ_LIBS)\n endif\n+#\n+\n+# test_bitcoin_fuzzy binary #\n+test_test_bitcoin_fuzzy_SOURCES = test/test_bitcoin_fuzzy.cpp\n+test_test_bitcoin_fuzzy_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_test_bitcoin_fuzzy_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_test_bitcoin_fuzzy_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+test_test_bitcoin_fuzzy_LDADD = \\\n+  $(LIBUNIVALUE) \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBSECP256K1)\n+\n+test_test_bitcoin_fuzzy_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+#\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\n "
      },
      {
        "sha": "e1abde16f49aac4dd72c4e3bef3e8b188a05bc97",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "added",
        "additions": 256,
        "deletions": 0,
        "changes": 256,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
        "patch": "@@ -0,0 +1,256 @@\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#include \"consensus/merkle.h\"\n+#include \"primitives/block.h\"\n+#include \"script/script.h\"\n+#include \"addrman.h\"\n+#include \"chain.h\"\n+#include \"coins.h\"\n+#include \"compressor.h\"\n+#include \"net.h\"\n+#include \"protocol.h\"\n+#include \"streams.h\"\n+#include \"undo.h\"\n+#include \"version.h\"\n+\n+#include <stdint.h>\n+#include <unistd.h>\n+\n+#include <algorithm>\n+#include <vector>\n+\n+enum TEST_ID {\n+    CBLOCK_DESERIALIZE=0,\n+    CTRANSACTION_DESERIALIZE,\n+    CBLOCKLOCATOR_DESERIALIZE,\n+    CBLOCKMERKLEROOT,\n+    CADDRMAN_DESERIALIZE,\n+    CBLOCKHEADER_DESERIALIZE,\n+    CBANENTRY_DESERIALIZE,\n+    CTXUNDO_DESERIALIZE,\n+    CBLOCKUNDO_DESERIALIZE,\n+    CCOINS_DESERIALIZE,\n+    CNETADDR_DESERIALIZE,\n+    CSERVICE_DESERIALIZE,\n+    CMESSAGEHEADER_DESERIALIZE,\n+    CADDRESS_DESERIALIZE,\n+    CINV_DESERIALIZE,\n+    CBLOOMFILTER_DESERIALIZE,\n+    CDISKBLOCKINDEX_DESERIALIZE,\n+    CTXOUTCOMPRESSOR_DESERIALIZE,\n+    TEST_ID_END\n+};\n+\n+bool read_stdin(std::vector<char> &data) {\n+    char buffer[1024];\n+    ssize_t length=0;\n+    while((length = read(STDIN_FILENO, buffer, 1024)) > 0) {\n+        data.insert(data.end(), buffer, buffer+length);\n+\n+        if (data.size() > (1<<20)) return false;\n+    }\n+    return length==0;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+    std::vector<char> buffer;\n+    if (!read_stdin(buffer)) return 0;\n+\n+    if (buffer.size() < sizeof(uint32_t)) return 0;\n+\n+    uint32_t test_id = 0xffffffff;\n+    memcpy(&test_id, &buffer[0], sizeof(uint32_t));\n+    buffer.erase(buffer.begin(), buffer.begin() + sizeof(uint32_t));\n+\n+    if (test_id >= TEST_ID_END) return 0;\n+\n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    try {\n+        int nVersion;\n+        ds >> nVersion;\n+        ds.SetVersion(nVersion);\n+    } catch (const std::ios_base::failure& e) {\n+        return 0;\n+    }\n+\n+    switch(test_id) {\n+        case CBLOCK_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBlock block;\n+                ds >> block;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CTRANSACTION_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CTransaction tx(deserialize, ds);\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOCKLOCATOR_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBlockLocator bl;\n+                ds >> bl;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOCKMERKLEROOT:\n+        {\n+            try\n+            {\n+                CBlock block;\n+                ds >> block;\n+                bool mutated;\n+                BlockMerkleRoot(block, &mutated);\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CADDRMAN_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CAddrMan am;\n+                ds >> am;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOCKHEADER_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBlockHeader bh;\n+                ds >> bh;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBANENTRY_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBanEntry be;\n+                ds >> be;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CTXUNDO_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CTxUndo tu;\n+                ds >> tu;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOCKUNDO_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBlockUndo bu;\n+                ds >> bu;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CCOINS_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CCoins block;\n+                ds >> block;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CNETADDR_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CNetAddr na;\n+                ds >> na;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CSERVICE_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CService s;\n+                ds >> s;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CMESSAGEHEADER_DESERIALIZE:\n+        {\n+            CMessageHeader::MessageStartChars pchMessageStart = {0x00, 0x00, 0x00, 0x00};\n+            try\n+            {\n+                CMessageHeader mh(pchMessageStart);\n+                ds >> mh;\n+                if (!mh.IsValid(pchMessageStart)) {return 0;}\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CADDRESS_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CAddress a;\n+                ds >> a;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CINV_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CInv i;\n+                ds >> i;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CBLOOMFILTER_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CBloomFilter bf;\n+                ds >> bf;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CDISKBLOCKINDEX_DESERIALIZE:\n+        {\n+            try\n+            {\n+                CDiskBlockIndex dbi;\n+                ds >> dbi;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+            break;\n+        }\n+        case CTXOUTCOMPRESSOR_DESERIALIZE:\n+        {\n+            CTxOut to;\n+            try\n+            {\n+                ds >> to;\n+            } catch (const std::ios_base::failure& e) {return 0;}\n+\n+            CTxOutCompressor toc(to);\n+            break;\n+        }\n+        default:\n+            return 0;\n+    }\n+    return 0;\n+}\n+"
      }
    ]
  },
  {
    "sha": "8b15434b59c6cd7368b4db680544cd77ed337bd3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjE1NDM0YjU5YzZjZDczNjhiNGRiNjgwNTQ0Y2Q3N2VkMzM3YmQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-16T11:25:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-12-15T12:29:03Z"
      },
      "message": "doc: Add bare-bones documentation for fuzzing",
      "tree": {
        "sha": "a223f694f718f7e244fae20c7c1bf7e6f4ad53a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a223f694f718f7e244fae20c7c1bf7e6f4ad53a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b15434b59c6cd7368b4db680544cd77ed337bd3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b15434b59c6cd7368b4db680544cd77ed337bd3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b15434b59c6cd7368b4db680544cd77ed337bd3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b15434b59c6cd7368b4db680544cd77ed337bd3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4153e20eca3f3a7bec5f0b1f13d0ae07557416b"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "36684e54012814f5ece7fd4f05f7e8c1e5cef01b",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b15434b59c6cd7368b4db680544cd77ed337bd3/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b15434b59c6cd7368b4db680544cd77ed337bd3/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=8b15434b59c6cd7368b4db680544cd77ed337bd3",
        "patch": "@@ -68,6 +68,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n - [Files](files.md)\n+- [Fuzz-testing](fuzzing.md)\n - [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n - [Init Scripts (systemd/upstart/openrc)](init.md)"
      },
      {
        "sha": "bf3ad17861c4b2b9fe8a3a8bf813d1f37f7687df",
        "filename": "doc/fuzzing.md",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b15434b59c6cd7368b4db680544cd77ed337bd3/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b15434b59c6cd7368b4db680544cd77ed337bd3/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=8b15434b59c6cd7368b4db680544cd77ed337bd3",
        "patch": "@@ -0,0 +1,66 @@\n+Fuzz-testing Bitcoin Core\n+==========================\n+\n+A special test harness `test_bitcoin_fuzzy` is provided to provide an easy\n+entry point for fuzzers and the like. In this document we'll describe how to\n+use it with AFL.\n+\n+Building AFL\n+-------------\n+\n+It is recommended to always use the latest version of afl:\n+```\n+wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz\n+tar -zxvf afl-latest.tgz\n+cd afl-<version>\n+make\n+export AFLPATH=$PWD\n+```\n+\n+Instrumentation\n+----------------\n+\n+To build Bitcoin Core using AFL instrumentation (this assumes that the\n+`AFLPATH` was set as above):\n+```\n+./configure --disable-ccache --disable-shared --enable-tests CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n+export AFL_HARDEN=1\n+cd src/\n+make test/test_bitcoin_fuzzy\n+```\n+We disable ccache because we don't want to pollute the ccache with instrumented\n+objects, and similarly don't want to use non-instrumented cached objects linked\n+in.\n+\n+Preparing fuzzing\n+------------------\n+\n+AFL needs an input directory with examples, and an output directory where it\n+will place examples that it found. These can be anywhere in the file system,\n+we'll define environment variables to make it easy to reference them.\n+\n+```\n+mkdir inputs\n+AFLIN=$PWD/inputs\n+mkdir outputs\n+AFLOUT=$PWD/outputs\n+```\n+\n+Example inputs are available from:\n+\n+- https://download.visucore.com/bitcoin/bitcoin_fuzzy_in.tar.xz\n+- http://strateman.ninja/fuzzing.tar.xz\n+\n+Extract these (or other starting inputs) into the `inputs` directory before starting fuzzing.\n+\n+Fuzzing\n+--------\n+\n+To start the actual fuzzing use:\n+```\n+$AFLPATH/afl-fuzz -i ${AFLIN} -o ${AFLOUT} -m52 -- test/test_bitcoin_fuzzy\n+```\n+\n+You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n+will print an error and suggestion if so.\n+"
      }
    ]
  }
]