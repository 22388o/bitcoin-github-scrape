jonasschnelli,2016-11-16T10:35:57Z,Concept ACK.\nAgree that a simple documentation would be useful.\nI guess right now you have to pipe in some data that will be used for the fuzz tests?\n,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-260911912,260911912,
laanwj,2016-11-16T10:38:16Z,> I guess right now you have to pipe in some data that will be used for the fuzz tests?\n\nPiping in data is the part that the fuzzer should do :)\n,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-260912390,260912390,
laanwj,2016-11-16T11:27:15Z,"I've added some bare-bones instructions on how to use AFL with Bitcoin Core. What I don't have are example inputs, so this doesn't do anything yet at the moment.\n\n@pstratem Would you mind sharing some of your example inputs?\n",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-260922689,260922689,
MarcoFalke,2016-11-16T12:11:04Z,Concept ACK. Would prefer to see at least one MWE.\n,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-260931056,260931056,
laanwj,2016-11-16T12:44:25Z,What's an MWE?\n,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-260937338,260937338,
MarcoFalke,2016-11-16T12:59:09Z,"Minimal working example: Just a code bit that is of the smallest size, but still demonstrates how the framework is used.\n",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-260940189,260940189,
laanwj,2016-11-16T13:04:53Z,"> Minimal working example: Just a code bit that is of the smallest size, but still demonstrates how the framework is used.\n\nAgreed. I demonstrate how to use the framework in the documentation I added, but there need to be some example inputs to put in `inputs/` or it croaks. I could make a few but I'd rather wait for Patrick a bit whether he already has some as it's quite time-consuming.\n",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-260941387,260941387,
pstratem,2016-11-19T05:05:38Z,@laanwj suggestion for where examples should go?\n\n(which directory)\n,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-261694082,261694082,
laanwj,2016-11-19T08:45:21Z,"Don't know. Probably a special repo with bitcoin core ""manual testing"" data\neventually. At this point though I'd be happy with a dropbox link as I'd\njust like to start fuzzing.\n",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-261701799,261701799,
gmaxwell,2016-11-19T10:48:21Z,"FWIW, I have a 24 core host grinding on this in AFL for most of a day on this... I guess I'll leave it running all weekend and spin up some more cores. if someone wants the resulting vectors after I cmin them, I'd be glad to hand them out.\n\n(I just started from some particularly dumb /dev/urandom starting points... a future improvement I would suggest (not this PR!) might be a command-line argum",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-261706872,261706872,
laanwj,2016-11-21T07:54:05Z,"> a future improvement I would suggest (not this PR!) might be a command-line argument that makes it serialize a dummy object or few for each of the modes and write out a set of files.\n\nYes that would be useful. Should ideally have realistic examples that come up in bitcoind itself (just grabbed from the wire randomly and saved) along with synthetic ones.\n\n> if someone wants the resulting ",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-261867225,261867225,
fanquake,2016-11-24T13:09:59Z,"Started testing this on OS X 10.12.\nafl compiles fine, and bitcoin configure completes (using afl-clang and afl-clang++ instead of afl-gcc and afl-gcc++):\n```\nOptions used to compile and link:\n  with wallet   = yes\n  with gui / qt = yes\n    qt version  = 5\n    with qr     = yes\n  with zmq      = yes\n  with test     = yes\n  with bench    = yes\n  with upnp     = yes\n  debug e",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-262772948,262772948,
fanquake,2016-11-24T13:37:49Z,"Given that one was working alright, I've moved to running five in parallel. Will leave them running for a while. You can use the afl-whatsup tool to watch the progress, sample output below:\n```\n$AFLPATH/afl-whatsup sync_dir\nstatus check tool for afl-fuzz by <lcamtuf@google.com>\n\nIndividual fuzzers\n==================\n\n>>> fuzzer01 (1 days, 0 hrs) <<<\n\n  cycle 1, lifetime speed 1",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-262778090,262778090,
MarcoFalke,2016-11-25T12:38:27Z,Concept ACK 18b4c6c,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-262949698,262949698,
laanwj,2016-11-25T14:14:05Z,I didn't have to change anything memory related on ubuntu at least\n,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-262964564,262964564,
fanquake,2016-11-25T14:15:46Z,"Some results. The ""Master"" instance is yet to complete a cycle (~62%), and the exec speed seems to have dropped off in the last few hours. Current stats:\n![screen shot 4](https://cloud.githubusercontent.com/assets/863730/20627617/30151cf6-b35c-11e6-9d4d-287f6e5acf0e.png)\nThe other instances all have similar output, and have run through ~80cycles:\n![screen shot 5](https://cloud.githubusercont",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-262964846,262964846,
theuni,2016-11-25T20:39:23Z,"tested ACK. Works well on OSX with AFL_NO_FORKSRV set (probably worth documenting that it's necessary there).\n\nAlso, feel free to take this as a simplification: https://github.com/theuni/bitcoin/commit/88b8f922c4b4a3db5d299cd64e0c9669269873a1",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-263020212,263020212,
laanwj,2016-11-26T12:32:55Z,@cfields thanks - though I'm not sure moving addrman to common is the right\nthing to do. It is decidedly a server thing and not used by any of the\nother (nontest) executables.\nAnd later on we may want to fuzz more things in _server.\n,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-263061005,263061005,
pstratem,2016-11-27T05:03:13Z,"@fanquake if you completely remove the memory limit there are a few tests which can use nearly unbounded amounts of memory\n\nI suggest running with:\n\nexport AFL_SKIP_CRASHES=1;\nexport AFL_PARAMETERS=""-t 1000+ -m 1024"";\n\nafl-fuzz $AFL_PARAMETERS -i fuzzing/input -o fuzzing/output ./bitcoin/src/test/test_bitcoin_fuzzy",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-263102640,263102640,
fanquake,2016-11-27T14:26:19Z,@pstratem Thanks for the suggestions. I've restarted some of the fuzzers with the new vars.,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-263125127,263125127,
fanquake,2016-11-29T12:49:41Z,"Wrapping up my testing of this. Results from individual fuzzers are below, and the sync_dir (outputs) as well as the inputs used are available for download.\n[inputs.zip](https://github.com/bitcoin/bitcoin/files/618966/inputs.zip)\n[sync_dir.zip](https://github.com/bitcoin/bitcoin/files/618954/sync_dir.zip)\nFuzzer 01 (deterministic tests): \n![fuzzer01](https://cloud.githubusercontent.com/ass",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-263561889,263561889,
sipa,2016-12-01T01:12:40Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-264048923,264048923,
MarcoFalke,2016-12-02T19:31:10Z,"I think this ready for merge and we should select and add appropriate afl-inputs in another pull.\n\n(Maybe fix the doc nits before merge?)",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-264541453,264541453,
laanwj,2016-12-03T06:42:46Z,"> I think this ready for merge and we should select and add appropriate afl-inputs in another pull.\n\nI don't think we should put the inputs in the repository. But I'll just add a link where they can be downloaded. Will fix the doc nits.\n",https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-264621520,264621520,
pstratem,2016-12-04T20:44:57Z,My current test cases are here http://strateman.ninja/fuzzing.tar.xz,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-264729708,264729708,
laanwj,2016-12-15T15:54:32Z,Switched to the new way of transaction deserialization. This should be ready for merge now.,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-267362993,267362993,
sipa,2016-12-15T17:21:59Z,utACK 8b15434b59c6cd7368b4db680544cd77ed337bd3 (apart from #9354).,https://github.com/bitcoin/bitcoin/pull/9172#issuecomment-267387195,267387195,
fanquake,2016-11-23T07:49:01Z,"For anyone wondering what `AFL_HARDEN` does. From the afl [README](http://lcamtuf.coredump.cx/afl/README.txt).\n```\nSetting AFL_HARDEN=1 when calling 'make' will cause the CC wrapper to\nautomatically enable code hardening options that make it easier to detect\nsimple memory bugs. Libdislocator, a helper library included with AFL (see\nlibdislocator/README.dislocator) can help uncover heap c",https://github.com/bitcoin/bitcoin/pull/9172#discussion_r89267189,89267189,doc/fuzzing.md
laanwj,2016-11-23T07:54:15Z,"It may actually be unnecessary with bitcoin core which already enables a lot of hardening options. Then again, it can't hurt either I think.",https://github.com/bitcoin/bitcoin/pull/9172#discussion_r89267591,89267591,doc/fuzzing.md
MarcoFalke,2016-11-25T12:37:57Z,"Âµnit:\n```sh\nmkdir test/afl-inputs\nAFLIN=$PWD/test/afl-inputs\n...",https://github.com/bitcoin/bitcoin/pull/9172#discussion_r89611964,89611964,doc/fuzzing.md
MarcoFalke,2016-11-25T14:01:26Z,I think the default memory needs to be increased to prevent OOM?,https://github.com/bitcoin/bitcoin/pull/9172#discussion_r89621347,89621347,doc/fuzzing.md
fanquake,2016-11-25T14:04:37Z,"Which OS did you see out of memory errors on? \nWhat did you need to increase it to to make it run?",https://github.com/bitcoin/bitcoin/pull/9172#discussion_r89621717,89621717,doc/fuzzing.md
MarcoFalke,2016-11-25T14:22:34Z,I used the inputs by @laanwj (`bitcoin_fuzzy_in.tar.xz`) and the default of `-m50` caused a failure in the dry run.,https://github.com/bitcoin/bitcoin/pull/9172#discussion_r89623973,89623973,doc/fuzzing.md
MarcoFalke,2016-11-25T14:26:09Z,Setting `-m52` seems to be enough in this case. (OS: fedora 24),https://github.com/bitcoin/bitcoin/pull/9172#discussion_r89624377,89624377,doc/fuzzing.md
fanquake,2016-11-29T12:52:47Z,"nit: we could also add .gitignore entries for test/inputs, test/outputs and test/sync_dir",https://github.com/bitcoin/bitcoin/pull/9172#discussion_r90002423,90002423,doc/fuzzing.md
laanwj,2016-12-05T07:38:47Z,"Well, this is just an example. There's no strong reason to make these directories inside the bitcoin repository.",https://github.com/bitcoin/bitcoin/pull/9172#discussion_r90814408,90814408,doc/fuzzing.md
MarcoFalke,2016-12-05T10:41:30Z,"```cpp\nerror: âclass CTransactionâ has no member named âUnserializeâ",https://github.com/bitcoin/bitcoin/pull/9172#discussion_r90839571,90839571,src/test/test_bitcoin_fuzzy.cpp
laanwj,2016-12-05T11:41:22Z,"right, this should probably be converted to CMutableTransaction",https://github.com/bitcoin/bitcoin/pull/9172#discussion_r90848546,90848546,src/test/test_bitcoin_fuzzy.cpp
