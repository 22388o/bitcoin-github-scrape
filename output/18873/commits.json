[
  {
    "sha": "fa3f9a05660687bf4146e089050e944a1d6cbe3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTNmOWEwNTY2MDY4N2JmNDE0NmUwODkwNTBlOTQ0YTFkNmNiZTNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-05T00:06:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-05T18:37:46Z"
      },
      "message": "test: Fix intermittent sync_blocks failures",
      "tree": {
        "sha": "36f1337187c072c11244547806832ab73ba1721e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36f1337187c072c11244547806832ab73ba1721e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3f9a05660687bf4146e089050e944a1d6cbe3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgpegv8CpiIgDsnvEa4QQLn+MRcbuROw34OSPsN/7bhgWXex0VZB5UmmuZEIUfe\n/GTfeR3Xu1h2iGps/7cIiaLTzpjcdJMNZxlZPp6EcrLnIQ2PcKx6KkQE+z3l/1/0\nPTmbwghDyxgDOwqO0ybOBznoJ5CYZ8kI+EQD2j5mQZTpLGSfo+82uWQAemI5kuBJ\nXBqNdivJS32QJ57JewAakoz/YLS/jdL3xEBuRmYjVgNMujZafBfwqxqXpTVsWVmA\nSzrDSrDqFDR3fU+lK4RbormxOayRXV93Ovt5xCXvPEOvXPhfPdCIxLLrajwsrS5D\n9++d0/0CMWjeNIcZo4TuhuTu4WNaHxRxp5G74KWiMhlGcvkVW6M1ZSXQFmxMZRbZ\nwme9PZJUSZe7ZqTLdZL6XVBX6YQuL+k1GMzKf6XlUBgxG0umy4PBxZ8BVA7md+Qy\nlh9NUUhFV4QCwDZfLLDN0EPO53vBQJJnwvExFD7UWh+wA+1cOtprRMHdUBsyfXXk\ntWXt8ZsN\n=7fcE\n-----END PGP SIGNATURE-----",
        "payload": "tree 36f1337187c072c11244547806832ab73ba1721e\nparent e727c2bdcab3660297f452c76c6f877038015c02\nauthor MarcoFalke <falke.marco@gmail.com> 1588637198 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1588703866 -0400\n\ntest: Fix intermittent sync_blocks failures\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3f9a05660687bf4146e089050e944a1d6cbe3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3f9a05660687bf4146e089050e944a1d6cbe3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3f9a05660687bf4146e089050e944a1d6cbe3c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e727c2bdcab3660297f452c76c6f877038015c02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e727c2bdcab3660297f452c76c6f877038015c02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e727c2bdcab3660297f452c76c6f877038015c02"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 42,
      "deletions": 26
    },
    "files": [
      {
        "sha": "82f13316853546553d2146d0555cc0d6e7a3a45c",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=fa3f9a05660687bf4146e089050e944a1d6cbe3c",
        "patch": "@@ -16,10 +16,8 @@\n import tempfile\n import urllib\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework,\n-)\n-from test_framework.util import assert_equal, wait_until\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n \n \n class LoadblockTest(BitcoinTestFramework):\n@@ -75,7 +73,7 @@ def run_test(self):\n         self.log.info(\"Restart second, unsynced node with bootstrap file\")\n         self.stop_node(1)\n         self.start_node(1, [\"-loadblock=\" + bootstrap_file])\n-        wait_until(lambda: self.nodes[1].getblockcount() == 100)\n+        assert_equal(self.nodes[1].getblockcount(), 100)  # start_node is blocking on all block files being imported\n \n         assert_equal(self.nodes[1].getblockchaininfo()['blocks'], 100)\n         assert_equal(self.nodes[0].getbestblockhash(), self.nodes[1].getbestblockhash())"
      },
      {
        "sha": "31cea8d1b7e7d05c4210b6db2ffdbde5d98e7d79",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=fa3f9a05660687bf4146e089050e944a1d6cbe3c",
        "patch": "@@ -10,10 +10,10 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import wait_until\n+from test_framework.util import assert_equal\n \n-class ReindexTest(BitcoinTestFramework):\n \n+class ReindexTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n@@ -24,7 +24,7 @@ def reindex(self, justchainstate=False):\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\"]]\n         self.start_nodes(extra_args)\n-        wait_until(lambda: self.nodes[0].getblockcount() == blockcount)\n+        assert_equal(self.nodes[0].getblockcount(), blockcount)  # start_node is blocking on reindex\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "3969da2eb0c17ddbf57fde56ff6dece460423a19",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=fa3f9a05660687bf4146e089050e944a1d6cbe3c",
        "patch": "@@ -95,8 +95,8 @@ def run_test(self):\n         self.start_node(1, extra_args=[\"-persistmempool=0\"])\n         self.start_node(0)\n         self.start_node(2)\n-        wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"], timeout=1)\n-        wait_until(lambda: self.nodes[2].getmempoolinfo()[\"loaded\"], timeout=1)\n+        assert self.nodes[0].getmempoolinfo()[\"loaded\"]  # start_node is blocking on the mempool being loaded\n+        assert self.nodes[2].getmempoolinfo()[\"loaded\"]\n         assert_equal(len(self.nodes[0].getrawmempool()), 6)\n         assert_equal(len(self.nodes[2].getrawmempool()), 5)\n         # The others have loaded their mempool. If node_1 loaded anything, we'd probably notice by now:\n@@ -117,13 +117,13 @@ def run_test(self):\n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         self.stop_nodes()\n         self.start_node(0, extra_args=[\"-persistmempool=0\", \"-disablewallet\"])\n-        wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"])\n+        assert self.nodes[0].getmempoolinfo()[\"loaded\"]\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0. Verify that it has the transactions in its mempool.\")\n         self.stop_nodes()\n         self.start_node(0)\n-        wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"])\n+        assert self.nodes[0].getmempoolinfo()[\"loaded\"]\n         assert_equal(len(self.nodes[0].getrawmempool()), 6)\n \n         mempooldat0 = os.path.join(self.nodes[0].datadir, self.chain, 'mempool.dat')\n@@ -137,7 +137,7 @@ def run_test(self):\n         os.rename(mempooldat0, mempooldat1)\n         self.stop_nodes()\n         self.start_node(1, extra_args=[])\n-        wait_until(lambda: self.nodes[1].getmempoolinfo()[\"loaded\"])\n+        assert self.nodes[1].getmempoolinfo()[\"loaded\"]\n         assert_equal(len(self.nodes[1].getrawmempool()), 6)\n \n         self.log.debug(\"Prevent bitcoind from writing mempool.dat to disk. Verify that `savemempool` fails\")"
      },
      {
        "sha": "404c1b207b7d911b29449917cb1be2fb3171ed4e",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fa3f9a05660687bf4146e089050e944a1d6cbe3c",
        "patch": "@@ -110,7 +110,7 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, factor, bitcoind, bi\n                          \"--gen-suppressions=all\", \"--exit-on-first-error=yes\",\n                          \"--error-exitcode=1\", \"--quiet\"] + self.args\n \n-        if self.version is None or self.version >= 190000:\n+        if self.version_is_at_least(190000):\n             self.args.append(\"-logthreadnames\")\n \n         self.cli = TestNodeCLI(bitcoin_cli, self.datadir)\n@@ -222,6 +222,27 @@ def wait_for_rpc_connection(self):\n                 rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.chain, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n                 rpc.getblockcount()\n                 # If the call to getblockcount() succeeds then the RPC connection is up\n+                if self.version_is_at_least(190000):\n+                    # getmempoolinfo.loaded is available since commit\n+                    # bb8ae2c (version 0.19.0)\n+                    wait_until(lambda: rpc.getmempoolinfo()['loaded'])\n+                    # Wait for the node to finish reindex, block import, and\n+                    # loading the mempool. Usually importing happens fast or\n+                    # even \"immediate\" when the node is started. However, there\n+                    # is no guarantee and sometimes ThreadImport might finish\n+                    # later. This is going to cause intermittent test failures,\n+                    # because generally the tests assume the node is fully\n+                    # ready after being started.\n+                    #\n+                    # For example, the node will reject block messages from p2p\n+                    # when it is still importing with the error \"Unexpected\n+                    # block message received\"\n+                    #\n+                    # The wait is done here to make tests as robust as possible\n+                    # and prevent racy tests and intermittent failures as much\n+                    # as possible. Some tests might not need this, but the\n+                    # overhead is trivial, and the added gurantees are worth\n+                    # the minimal performance cost.\n                 self.log.debug(\"RPC successfully started\")\n                 if self.use_cli:\n                     return\n@@ -274,14 +295,17 @@ def get_wallet_rpc(self, wallet_name):\n             wallet_path = \"wallet/{}\".format(urllib.parse.quote(wallet_name))\n             return RPCOverloadWrapper(self.rpc / wallet_path, descriptors=self.descriptors)\n \n+    def version_is_at_least(self, ver):\n+        return self.version is None or self.version >= ver\n+\n     def stop_node(self, expected_stderr='', wait=0):\n         \"\"\"Stop the node.\"\"\"\n         if not self.running:\n             return\n         self.log.debug(\"Stopping node\")\n         try:\n             # Do not use wait argument when testing older nodes, e.g. in feature_backwards_compatibility.py\n-            if self.version is None or self.version >= 180000:\n+            if self.version_is_at_least(180000):\n                 self.stop(wait=wait)\n             else:\n                 self.stop()"
      },
      {
        "sha": "90d17a806ceb3b6ec7b27d2593ab646ccd559fa2",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fa3f9a05660687bf4146e089050e944a1d6cbe3c",
        "patch": "@@ -18,7 +18,6 @@\n     assert_raises_rpc_error,\n     connect_nodes,\n     disconnect_nodes,\n-    wait_until,\n )\n \n \n@@ -98,7 +97,7 @@ def run_test(self):\n         # TODO: redo with eviction\n         self.stop_node(0)\n         self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n-        wait_until(lambda: self.nodes[0].getmempoolinfo()['loaded'])\n+        assert self.nodes[0].getmempoolinfo()['loaded']\n \n         # Verify txs no longer in either node's mempool\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -126,7 +125,7 @@ def run_test(self):\n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n         self.stop_node(0)\n         self.start_node(0, extra_args=[\"-minrelaytxfee=0.00001\"])\n-        wait_until(lambda: self.nodes[0].getmempoolinfo()['loaded'])\n+        assert self.nodes[0].getmempoolinfo()['loaded']\n \n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n@@ -148,7 +147,7 @@ def run_test(self):\n         # Remove using high relay fee again\n         self.stop_node(0)\n         self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n-        wait_until(lambda: self.nodes[0].getmempoolinfo()['loaded'])\n+        assert self.nodes[0].getmempoolinfo()['loaded']\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))"
      },
      {
        "sha": "9e295af3306c20373b018df7206f042da7f485ba",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3f9a05660687bf4146e089050e944a1d6cbe3c/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fa3f9a05660687bf4146e089050e944a1d6cbe3c",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet.\"\"\"\n from decimal import Decimal\n-import time\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -466,12 +465,8 @@ def run_test(self):\n         extra_args = [\"-walletrejectlongchains\", \"-limitancestorcount=\" + str(2 * chainlimit)]\n         self.start_node(0, extra_args=extra_args)\n \n-        # wait for loadmempool\n-        timeout = 10\n-        while (timeout > 0 and len(self.nodes[0].getrawmempool()) < chainlimit * 2):\n-            time.sleep(0.5)\n-            timeout -= 0.5\n-        assert_equal(len(self.nodes[0].getrawmempool()), chainlimit * 2)\n+        # wait until the wallet has submitted all transactions to the mempool\n+        wait_until(lambda: len(self.nodes[0].getrawmempool()) == chainlimit * 2)\n \n         node0_balance = self.nodes[0].getbalance()\n         # With walletrejectlongchains we will not create the tx and store it in our wallet."
      }
    ]
  }
]