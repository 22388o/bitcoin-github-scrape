[
  {
    "sha": "fa014de63e7f12d00d9d474332ce783c7c8c7378",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTAxNGRlNjNlN2YxMmQwMGQ5ZDQ3NDMzMmNlNzgzYzdjOGM3Mzc4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-17T21:54:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-17T22:56:05Z"
      },
      "message": "Remove mempool expiry",
      "tree": {
        "sha": "9583966c047b7e1d1255bce821c7cb38e51f35d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9583966c047b7e1d1255bce821c7cb38e51f35d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa014de63e7f12d00d9d474332ce783c7c8c7378",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhfygv/bAV7RYKFOVik0cjiIAY3oQq7fVYJE+ArX6UuJKXwbvmRBjDONLt9aAP8\nDo9MtPZdt8dKAj5lw2JhrCuXs6wqTdYl8TYOZ2sAz2qBqVn6bs/rhfn/sT/VwkyF\ndmzwFJFip1C/1zmXmcTeNZUT8agdWLW37OeGckJawpIQqB7drVdcJI63pS/IgDys\normBECyDGmc5Z1ioahw6TOccMOahfOFBJJD2IM6R7VcQJTmEW8h/xc8SoZbvplAf\n8bl0d9gZXa+XVt95slW/B2sP/lXC6is6TW56/AfV58wh3SvRD8qcc0avsP/hM2us\nvDzHxEX59viLNY1kpqYExurBbgCrwIEK6Oo2gtnL51qxr8+fBvysGBLDF5fkYDsh\niUq9JRumFFd3ntKsKHUbp6CwVu46Y2Koc6AE66M6CZL7nWmw/nYvgY05cV1maWjD\nL0y+U7qn8rLcsy0umoVp9+GOUfC92tAvxVuLbqB3Lnx0kQfh9zdwu4hNQz9L8JEy\nuH9PvzBK\n=Q90B\n-----END PGP SIGNATURE-----",
        "payload": "tree 9583966c047b7e1d1255bce821c7cb38e51f35d8\nparent 8f604361ebaa5263e614c21570a3256e4dbc3bcc\nauthor MarcoFalke <falke.marco@gmail.com> 1563400449 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1563404165 -0400\n\nRemove mempool expiry\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa014de63e7f12d00d9d474332ce783c7c8c7378",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa014de63e7f12d00d9d474332ce783c7c8c7378",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa014de63e7f12d00d9d474332ce783c7c8c7378/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f604361ebaa5263e614c21570a3256e4dbc3bcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f604361ebaa5263e614c21570a3256e4dbc3bcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f604361ebaa5263e614c21570a3256e4dbc3bcc"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 5,
      "deletions": 48
    },
    "files": [
      {
        "sha": "c5bf26d8f6a0f5fe58bcfc9d0a4d071c17affe19",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa014de63e7f12d00d9d474332ce783c7c8c7378/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa014de63e7f12d00d9d474332ce783c7c8c7378/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=fa014de63e7f12d00d9d474332ce783c7c8c7378",
        "patch": "@@ -81,11 +81,6 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n .IP\n Keep at most <n> unconnectable transactions in memory (default: 100)\n .HP\n-\\fB\\-mempoolexpiry=\\fR<n>\n-.IP\n-Do not keep transactions in the mempool longer than <n> hours (default:\n-336)\n-.HP\n \\fB\\-par=\\fR<n>\n .IP\n Set the number of script verification threads (\\fB\\-8\\fR to 16, 0 = auto, <0 ="
      },
      {
        "sha": "b132f1e480eaae2eed42c4b3eb1fed0e21827991",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa014de63e7f12d00d9d474332ce783c7c8c7378/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa014de63e7f12d00d9d474332ce783c7c8c7378/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=fa014de63e7f12d00d9d474332ce783c7c8c7378",
        "patch": "@@ -81,11 +81,6 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n .IP\n Keep at most <n> unconnectable transactions in memory (default: 100)\n .HP\n-\\fB\\-mempoolexpiry=\\fR<n>\n-.IP\n-Do not keep transactions in the mempool longer than <n> hours (default:\n-336)\n-.HP\n \\fB\\-par=\\fR<n>\n .IP\n Set the number of script verification threads (\\fB\\-8\\fR to 16, 0 = auto, <0 ="
      },
      {
        "sha": "8208f298fa7a9db73b8ec5eb49be572ce5a695af",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa014de63e7f12d00d9d474332ce783c7c8c7378",
        "patch": "@@ -396,7 +396,6 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "6462aee8a7389a771a7cc3cdc652c0b76d013b4c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fa014de63e7f12d00d9d474332ce783c7c8c7378",
        "patch": "@@ -917,22 +917,6 @@ void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPool\n     }\n }\n \n-int CTxMemPool::Expire(int64_t time) {\n-    AssertLockHeld(cs);\n-    indexed_transaction_set::index<entry_time>::type::iterator it = mapTx.get<entry_time>().begin();\n-    setEntries toremove;\n-    while (it != mapTx.get<entry_time>().end() && it->GetTime() < time) {\n-        toremove.insert(mapTx.project<0>(it));\n-        it++;\n-    }\n-    setEntries stage;\n-    for (txiter removeit : toremove) {\n-        CalculateDescendants(removeit, stage);\n-    }\n-    RemoveStaged(stage, false, MemPoolRemovalReason::EXPIRY);\n-    return stage.size();\n-}\n-\n void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, bool validFeeEstimate)\n {\n     setEntries setAncestors;"
      },
      {
        "sha": "9ff1cae4f4baec9c8eae438f2d345b22d854c45f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fa014de63e7f12d00d9d474332ce783c7c8c7378",
        "patch": "@@ -346,7 +346,6 @@ struct TxMempoolInfo\n  */\n enum class MemPoolRemovalReason {\n     UNKNOWN = 0, //!< Manually removed or unknown reason\n-    EXPIRY,      //!< Expired from mempool\n     SIZELIMIT,   //!< Removed in size limiting\n     REORG,       //!< Removed for reorganization\n     BLOCK,       //!< Removed for block\n@@ -657,9 +656,6 @@ class CTxMemPool\n       */\n     void TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n-    int Expire(int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-\n     /**\n      * Calculate the ancestor and descendant count for the given transaction.\n      * The counts include the transaction itself."
      },
      {
        "sha": "c7e4660bcf9b312adb70e531881410c782891476",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa014de63e7f12d00d9d474332ce783c7c8c7378",
        "patch": "@@ -309,13 +309,8 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n+static void LimitMempoolSize(CTxMemPool& pool, size_t limit) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n {\n-    int expired = pool.Expire(GetTime() - age);\n-    if (expired != 0) {\n-        LogPrint(BCLog::MEMPOOL, \"Expired %i transactions from the memory pool\\n\", expired);\n-    }\n-\n     std::vector<COutPoint> vNoSpendsRemaining;\n     pool.TrimToSize(limit, &vNoSpendsRemaining);\n     for (const COutPoint& removed : vNoSpendsRemaining)\n@@ -383,7 +378,7 @@ static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool,\n     // We also need to remove any now-immature transactions\n     mempool.removeForReorg(pcoinsTip.get(), ::ChainActive().Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+    LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n@@ -818,7 +813,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         // trim mempool and check if tx was trimmed\n         if (!bypass_limits) {\n-            LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+            LimitMempoolSize(pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n             if (!pool.exists(hash))\n                 return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n         }\n@@ -4631,7 +4626,6 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(CTxMemPool& pool)\n {\n     const CChainParams& chainparams = Params();\n-    int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n@@ -4640,10 +4634,8 @@ bool LoadMempool(CTxMemPool& pool)\n     }\n \n     int64_t count = 0;\n-    int64_t expired = 0;\n     int64_t failed = 0;\n     int64_t already_there = 0;\n-    int64_t nNow = GetTime();\n \n     try {\n         uint64_t version;\n@@ -4666,7 +4658,7 @@ bool LoadMempool(CTxMemPool& pool)\n                 pool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n             }\n             CValidationState state;\n-            if (nTime + nExpiryTimeout > nNow) {\n+            {\n                 LOCK(cs_main);\n                 AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nullptr /* pfMissingInputs */, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n@@ -4684,8 +4676,6 @@ bool LoadMempool(CTxMemPool& pool)\n                         ++failed;\n                     }\n                 }\n-            } else {\n-                ++expired;\n             }\n             if (ShutdownRequested())\n                 return false;\n@@ -4701,7 +4691,7 @@ bool LoadMempool(CTxMemPool& pool)\n         return false;\n     }\n \n-    LogPrintf(\"Imported mempool transactions from disk: %i succeeded, %i failed, %i expired, %i already there\\n\", count, failed, expired, already_there);\n+    LogPrintf(\"Imported mempool transactions from disk: %i succeeded, %i failed, %i already there\\n\", count, failed, already_there);\n     return true;\n }\n "
      },
      {
        "sha": "1bf6662842afdd60abb61ad2fe4d54a6db344b0d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa014de63e7f12d00d9d474332ce783c7c8c7378/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa014de63e7f12d00d9d474332ce783c7c8c7378",
        "patch": "@@ -64,8 +64,6 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n-/** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n-static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n /** Maximum kilobytes for transactions to store for processing during reorg */\n static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      }
    ]
  },
  {
    "sha": "fa1638d8fd2928db3cb744d0372bc757e6d40503",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE2MzhkOGZkMjkyOGRiM2NiNzQ0ZDAzNzJiYzc1N2U2ZDQwNTAz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-17T22:59:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-07-17T22:56:29Z"
      },
      "message": "Make txs replacable after 2 weeks",
      "tree": {
        "sha": "9e228c187b00461f9b3aa5addc599b6f4c93dd73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e228c187b00461f9b3aa5addc599b6f4c93dd73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1638d8fd2928db3cb744d0372bc757e6d40503",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjq9gwAlPIV0KXsky/5pPRAwclvIqs5g8BFZwxGwG5Lwkw2grIV03QuMInegdVh\nLSdO4TubpQ8fjuagS7R1ZdFupVwvrRiNCe1PqgUUOSY7LkTL8hCmM98rdOgm2cPa\nDX6VeqAkj9K/VZvTAc8mbRA3Xb2Adp7QkZUptb3KwZ0rifTteKQmFHGXK76ZLIPi\nsTLTIhOj2y7jXEr2TL2BJF0P4ZQVEoe56JTd2QuRX/b4hIrXwzG1OdZb+v2hu26Y\nxhgl5aNMxo94LmpkEmGCsdNsGxLBeK8BAtSVDzhayczo27iU14MegtMCKhZyM2Z3\nnYFhyBVlw3nrAPT5nKo+EeCKKl5xs+Su5a+y6Ng9ZuTHEHFAWjjWXGLUS8tcWgnp\n1xmdLIZweSs9tLCnZCckgVl0tHyxLs0lf4GfPSR0C1UwevbvcHRdejb0bs68sIEB\nPEcqDEQ1/ddGVtRnrqqayJbBb/5sos0LPh6TzkkMxRdh2qAsWJikkW+VGZ5AfL7k\nbT6UpUwQ\n=x0a8\n-----END PGP SIGNATURE-----",
        "payload": "tree 9e228c187b00461f9b3aa5addc599b6f4c93dd73\nparent fa014de63e7f12d00d9d474332ce783c7c8c7378\nauthor MarcoFalke <falke.marco@gmail.com> 1563404351 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1563404189 -0400\n\nMake txs replacable after 2 weeks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1638d8fd2928db3cb744d0372bc757e6d40503",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1638d8fd2928db3cb744d0372bc757e6d40503",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1638d8fd2928db3cb744d0372bc757e6d40503/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa014de63e7f12d00d9d474332ce783c7c8c7378",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa014de63e7f12d00d9d474332ce783c7c8c7378",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa014de63e7f12d00d9d474332ce783c7c8c7378"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5c55d8f43e4b1f1c801873c5b00c672b318f5259",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1638d8fd2928db3cb744d0372bc757e6d40503/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1638d8fd2928db3cb744d0372bc757e6d40503/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa1638d8fd2928db3cb744d0372bc757e6d40503",
        "patch": "@@ -395,6 +395,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-mempooltxtimeout=<n>\", strprintf(\"Consider transactions in the mempool replacable after <n> hours (default: %u)\", DEFAULT_TX_TIMEOUT.count()), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n@@ -1065,6 +1066,10 @@ bool AppInitParameterInteraction()\n     }\n \n     // mempool limits\n+    const int64_t mempool_timeout{gArgs.GetArg(\"-mempooltxtimeout\", DEFAULT_TX_TIMEOUT.count())};\n+    if (mempool_timeout < 0) return InitError(_(\"-mempooltxtimeout can not be negative\"));\n+    ::mempool.m_tx_timeout = std::chrono::hours{mempool_timeout};\n+\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)"
      },
      {
        "sha": "06a8fee76b1c3b01027ad39ce374bd901c66de06",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1638d8fd2928db3cb744d0372bc757e6d40503/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1638d8fd2928db3cb744d0372bc757e6d40503/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fa1638d8fd2928db3cb744d0372bc757e6d40503",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_TXMEMPOOL_H\n \n #include <atomic>\n+#include <chrono>\n #include <map>\n #include <memory>\n #include <set>\n@@ -32,6 +33,8 @@\n class CBlockIndex;\n extern CCriticalSection cs_main;\n \n+/** Default for -mempooltxtimeout */\n+constexpr std::chrono::hours DEFAULT_TX_TIMEOUT{336};\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n@@ -549,9 +552,8 @@ class CTxMemPool\n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs);\n     std::map<uint256, CAmount> mapDeltas;\n+    std::chrono::hours m_tx_timeout{DEFAULT_TX_TIMEOUT}; //!< After what time txs are considered replaceable\n \n-    /** Create a new CTxMemPool.\n-     */\n     explicit CTxMemPool(CBlockPolicyEstimator* estimator = nullptr);\n \n     /**"
      },
      {
        "sha": "45efec89fc08d6698dc27edb0fbc667e3cbc000b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1638d8fd2928db3cb744d0372bc757e6d40503/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1638d8fd2928db3cb744d0372bc757e6d40503/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa1638d8fd2928db3cb744d0372bc757e6d40503",
        "patch": "@@ -494,6 +494,9 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                         break;\n                     }\n                 }\n+                if (fReplacementOptOut) {\n+                    fReplacementOptOut = std::chrono::seconds{(*pool.GetIter(ptxConflicting->GetHash()))->GetTime()} + pool.m_tx_timeout > std::chrono::seconds{nAcceptTime};\n+                }\n                 if (fReplacementOptOut) {\n                     return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_DUPLICATE, \"txn-mempool-conflict\");\n                 }"
      }
    ]
  }
]