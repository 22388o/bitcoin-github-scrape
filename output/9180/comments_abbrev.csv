gmaxwell,2016-11-17T23:55:25Z,"Yes! This is indeed what I was referring to. Thanks!\n\nI'd rather the flag be a boolean (""Skip validation of burried blocks""), as is right now it's trivial to (accidentally) set it to 0 and not check anything, which isn't a configuration we should operate on; other people may also have opinions there.   One thing that will likely be requested is a unidirectional latch, similar to how IsInitialBlo",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261407827,261407827,
mruddy,2016-11-18T01:26:31Z,"Cool!\n\nAbout the flag: I'm flexible. I kind of like the ability to choose a time/depth/amount of work beyond just buried validation being allowed or not. It does make it easier for people to be extra conservative and increase it. Although, any non-boolean usage would be only for super-power-users and it might not be prudent to use values much lower than the default. I could make the minimum acce",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261422893,261422893,
gmaxwell,2016-11-18T07:42:23Z,"The latch isn't about checking the same block twice,  it's the idea that if there is a big reorg our definition of ""burried"" must be wrong and so we shouldn't skip validation of anything new that shows up.\n\nE.g.  you have    blocks  ""A B C D ..... Y Z ""  where B, C, D had their scriptchecks skipped because they were burred: then later  there is a reorg to   ""A B C' D' .... Y' Z' ZZ"", C' and D' s",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261468418,261468418,
gmaxwell,2016-11-18T07:43:01Z,@petertodd  @maaku   I recall both of you specifically having thoughts about this kind of functionality.\n,https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261468511,261468511,
mruddy,2016-11-18T19:47:09Z,"Thanks for the explanation @gmaxwell. I think I understand. Updates made to incorporate all of your feedback.\nI removed the new config option and just left it just gated by -checkpoints.\nOn the latch: I call it a high water mark in the code. It's not done yet (see the TODO), but figured I'd put up what I had so far to make sure I was on the right track.\nAlso, minor note: I added a new GetAncest",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261624534,261624534,
gmaxwell,2016-11-19T10:43:37Z,I'm going to try to prod people who are likely to oppose this and lets see if we can satisfy whatever concerns they have.\n,https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261706663,261706663,
petertodd,2016-11-19T13:31:32Z,"So, if I understand this correctly, this pull-req would define a certain amount of work at which point script validation is skipped?\n\nI don't think this is a good idea, as you're changing the system to quite clearly give miners the ability to override the rules of the system. This has political and legal implications. For example, if miners can override the rules of the system, it becomes tempti",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261714018,261714018,
gmaxwell,2016-11-19T20:33:55Z,"@petertodd \n\nThanks for taking the time to comment. I strongly believe that if we don't do something prudent here people will either do something more foolish, or there won't be full nodes around anymore for us to worry about them anymore.\n\nLets define work equivalent days (WED), as function of two blocks that returns the number of days of hashing that would be required to mine from the lower ",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261737915,261737915,
mruddy,2016-11-19T22:49:50Z,"@petertodd @gmaxwell Wow, the review you guys are doing is amazing! Good stuff, thanks!\n\nI've been thinking through all of it and have like a page of thoughts, but it came to mind that by itself (forgetting the high watermark part), the IsBuried code turns the full node into a hybrid SPV-full node when active (with a little bit of extra additional safety if there is a re-org). So, is the simples",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261745041,261745041,
mruddy,2016-11-20T00:30:54Z,"If hybrid node mode is not worth considering, then a full node implementing ""known-good, fully validate other"" could be implemented with a simple command line option that takes a known-good user-obtained block hash. The node operator would just have to find a trusted source for such a hash. What could be trusted would be up to the threat model for each user and would not be limited to just the sof",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261749562,261749562,
mruddy,2016-11-27T00:39:00Z,"I'm closing this for now. It was worth considering, but after thinking more about it, I don't want to affect the security model in order to get this ""catch-up"" time improvement.\nI ran some benchmark tests to verify that synching is CPU bound. It appears to be. I'm assuming it's mostly due to the ECDSA signature verification portion of script verification.\nSince it's CPU bound, over time the si",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-263094724,263094724,
gmaxwell,2016-11-27T02:16:16Z,You give up too quickly. I still thing this is interesting. :),https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-263098028,263098028,
mruddy,2016-11-27T11:32:05Z,"I think it's an interesting approach, but after thinking through Peter's feedback and appreciating more how this changes the security model of a node running it, it became less interesting to me.\n\nIt really does make it into a different security model node because even though the node still calculates a UTXO set and validates non-buried blocks as best it can with that set, it's not a fully val",https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-263117003,263117003,
