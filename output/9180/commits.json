[
  {
    "sha": "dfc5ed5e07ea145d6f11926a94da6fefde99469c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmM1ZWQ1ZTA3ZWExNDVkNmYxMTkyNmE5NGRhNmZlZmRlOTk0Njlj",
    "commit": {
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-11-17T04:36:58Z"
      },
      "committer": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-11-18T19:38:38Z"
      },
      "message": "remove script checking dependency on checkpoints - pow version",
      "tree": {
        "sha": "665a8fd292bafa1b007172281ed8c779f39d1810",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/665a8fd292bafa1b007172281ed8c779f39d1810"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfc5ed5e07ea145d6f11926a94da6fefde99469c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfc5ed5e07ea145d6f11926a94da6fefde99469c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dfc5ed5e07ea145d6f11926a94da6fefde99469c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfc5ed5e07ea145d6f11926a94da6fefde99469c/comments",
    "author": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9346f8429957e356d21c665bab59fe45bcf1f74e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9346f8429957e356d21c665bab59fe45bcf1f74e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9346f8429957e356d21c665bab59fe45bcf1f74e"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 56,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b7826d857026d7039835f63d5ee44dec6d658a20",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 8,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfc5ed5e07ea145d6f11926a94da6fefde99469c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfc5ed5e07ea145d6f11926a94da6fefde99469c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dfc5ed5e07ea145d6f11926a94da6fefde99469c",
        "patch": "@@ -2355,6 +2355,54 @@ static int64_t nTimeIndex = 0;\n static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n \n+bool IsBuried(const CBlockIndex* const ancestor, const CBlockIndex* const descendant, const int64_t age) {\n+    if (NULL == ancestor || NULL == descendant) {\n+        return false;\n+    }\n+    if (descendant->nChainWork <= ancestor->nChainWork) {\n+        return false; // not buried with respect to total proof of work\n+    }\n+    if (descendant->nTime <= ancestor->nTime) {\n+        return false; // not buried with respect to time\n+    }\n+    if (descendant->GetBlockTime() - ancestor->GetBlockTime() < age) {\n+        return false; // not buried with respect to time\n+    }\n+    if (descendant->GetAncestor(ancestor->nHeight) != ancestor) {\n+        return false; // not buried because ancestor is not really an ancestor of descendant (on different branches).\n+    }\n+    if (GetBlockProofEquivalentTime(*descendant, *ancestor, *descendant, Params().GetConsensus()) < age) {\n+        return false; // not buried with respect to current equivalent proof of work\n+    }\n+    return true; // the ancestor header is considered buried relative to the descendant header\n+}\n+\n+bool IsBuriedWithHighWatermark(const CBlockIndex* const ancestor, const CBlockIndex* const descendant, const int64_t age) {\n+    AssertLockHeld(cs_main); // guard buriedWorkHighWaterMark against inter-thread atomicity and ordering problems\n+    static const arith_uint256 ZERO;\n+    static arith_uint256 buriedWorkHighWaterMark;\n+    if (NULL == ancestor || NULL == descendant) {\n+        return false;\n+    }\n+    if (ZERO == buriedWorkHighWaterMark) {\n+        // TODO: need to init high water mark\n+        // get the tip from before the re-org and figure out the amount of work that would have triggered burial?\n+        // need to cover the case: sync a node, shut it down, start it, connect to a node that makes it do a large re-org.\n+        // but by the time we get here chainActive is wiped out and pindexBestHeader switched to the re-org'd branch...\n+    }\n+    if ((ZERO < buriedWorkHighWaterMark) && (ancestor->nChainWork <= buriedWorkHighWaterMark)) {\n+        // if we've previously buried a block and then we get another block with less or equal work\n+        // then we've re-organized and should validate the new block because our previous burying\n+        // assumptions were wrong.\n+        return false;\n+    }\n+    const bool result = IsBuried(ancestor, descendant, age);\n+    if (result) {\n+        buriedWorkHighWaterMark = ancestor->nChainWork;\n+    }\n+    return result;\n+}\n+\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n                   CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n {\n@@ -2378,14 +2426,14 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return true;\n     }\n \n-    bool fScriptChecks = true;\n-    if (fCheckpointsEnabled) {\n-        CBlockIndex *pindexLastCheckpoint = Checkpoints::GetLastCheckpoint(chainparams.Checkpoints());\n-        if (pindexLastCheckpoint && pindexLastCheckpoint->GetAncestor(pindex->nHeight) == pindex) {\n-            // This block is an ancestor of a checkpoint: disable script checks\n-            fScriptChecks = false;\n-        }\n-    }\n+    // age of a block, relative to the tip and considering both time and current equivalent proof of work,\n+    // after which it is considered sufficiently confirmed by (aka buried under) enough work to not fully\n+    // validate scripts/signatures anymore. 30 days of work at current tip work (aka hash) rate.\n+    const bool fScriptChecks = !fCheckpointsEnabled || // force full validation with -checkpoints=0\n+                               pindexBestHeader == pindex || // optimization for normal steady state operation where we get a new block and want to fully validate it\n+                               NULL == pindexBestHeader || // just to be safe\n+                               pindexBestHeader->nChainWork < UintToArith256(Params().GetConsensus().nMinimumChainWork) || // make network isolation attacks costly\n+                               !IsBuriedWithHighWatermark(pindex, pindexBestHeader, 30 * 24 * 60 * 60);\n \n     int64_t nTime1 = GetTimeMicros(); nTimeCheck += nTime1 - nTimeStart;\n     LogPrint(\"bench\", \"    - Sanity checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime1 - nTimeStart), nTimeCheck * 0.000001);"
      }
    ]
  }
]