[
  {
    "sha": "6c5cd9d022347abed8b61ca4ae4dc101461582fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzVjZDlkMDIyMzQ3YWJlZDhiNjFjYTRhZTRkYzEwMTQ2MTU4MmZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T12:05:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-28T12:20:59Z"
      },
      "message": "test: Add format-dependent comparison to bctest\n\nThis splits the output comparison for `bitcoin-tx` into two steps:\n\n- First, check for data mismatch, parsing the data as json or hex\n  depending on the extension of the output file\n\n- Then, check if the literal string matches\n\nFor either of these cases give a different error.\n\nThis prevents wild goose chases when e.g. a trailing space doesn't match\nexactly, and makes sure that both test output and examples are valid\ndata of the purported format.",
      "tree": {
        "sha": "ccee0f9fbc278d7e0e9522b381f9f1ab456cce05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccee0f9fbc278d7e0e9522b381f9f1ab456cce05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c5cd9d022347abed8b61ca4ae4dc101461582fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5cd9d022347abed8b61ca4ae4dc101461582fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c5cd9d022347abed8b61ca4ae4dc101461582fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5cd9d022347abed8b61ca4ae4dc101461582fe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86f9e3dbba416a142df47dbd646c8e8ba772c955"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 27,
      "deletions": 3
    },
    "files": [
      {
        "sha": "eab4fb734a2d4913fa88af8f0185a011de2b0bf1",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c5cd9d022347abed8b61ca4ae4dc101461582fe/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c5cd9d022347abed8b61ca4ae4dc101461582fe/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=6c5cd9d022347abed8b61ca4ae4dc101461582fe",
        "patch": "@@ -6,6 +6,15 @@\n import os\n import json\n import sys\n+import binascii\n+\n+def parse_output(a, fmt):\n+\tif fmt == 'json': # json: compare parsed data\n+\t\treturn json.loads(a)\n+\telif fmt == 'hex': # hex: parse and compare binary data\n+\t\treturn binascii.a2b_hex(a.strip())\n+\telse:\n+\t\traise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n \n def bctest(testDir, testObj, exeext):\n \n@@ -23,6 +32,7 @@ def bctest(testDir, testObj, exeext):\n \toutputData = None\n \tif \"output_cmp\" in testObj:\n \t\toutputFn = testObj['output_cmp']\n+\t\toutputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n \t\toutputData = open(testDir + \"/\" + outputFn).read()\n \t\tif not outputData:\n \t\t\tprint(\"Output data missing for \" + outputFn)\n@@ -34,9 +44,23 @@ def bctest(testDir, testObj, exeext):\n \t\tprint(\"OSError, Failed to execute \" + execprog)\n \t\tsys.exit(1)\n \n-\tif outputData and (outs[0] != outputData):\n-\t\tprint(\"Output data mismatch for \" + outputFn)\n-\t\tsys.exit(1)\n+\tif outputData:\n+\t\ttry:\n+\t\t\ta_parsed = parse_output(outs[0], outputType)\n+\t\texcept Exception as e:\n+\t\t\tprint('Error parsing command output as %s: %s' % (outputType,e))\n+\t\t\tsys.exit(1)\n+\t\ttry:\n+\t\t\tb_parsed = parse_output(outputData, outputType)\n+\t\texcept Exception as e:\n+\t\t\tprint('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n+\t\t\tsys.exit(1)\n+\t\tif a_parsed != b_parsed:\n+\t\t\tprint(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+\t\t\tsys.exit(1)\n+\t\tif outs[0] != outputData:\n+\t\t\tprint(\"Output formatting mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+\t\t\tsys.exit(1)\n \n \twantRC = 0\n \tif \"return_code\" in testObj:"
      }
    ]
  }
]