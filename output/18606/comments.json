[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612677390",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#issuecomment-612677390",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18606",
    "id": 612677390,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMjY3NzM5MA==",
    "user": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?u=553fed41054860471c4d4658273ab8dfd882fbba&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-12T21:19:17Z",
    "updated_at": "2020-04-12T21:25:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "It seems that even when using `SRCDIR` CI builds fail:  https://travis-ci.org/github/pierreN/bitcoin/jobs/674154306#L3417\r\n\r\nA decent way to fix this would be to add the bash auto-completion file to `Makefile.am`'s `EXTRA_DIST`. I updated the PR to reflect that.\r\n\r\nIf you think this is too intrusive, another more hackish way would be to just look for the file in the parent directories (https://github.com/pierreN/bitcoin/blob/feature-auto-cli-2/test/functional/tool_cli_completion.py#L260)?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612677390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613412109",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#issuecomment-613412109",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18606",
    "id": 613412109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzQxMjEwOQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-14T12:24:58Z",
    "updated_at": "2020-07-13T11:21:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19386 (rpc: Assert that RPCArg names are equal to CRPCCommand ones (server) by MarcoFalke)\n* #19262 (rpc: Replace OMITTED_NAMED_ARG with OMITTED by MarcoFalke)\n* #18788 (tests: Update more tests to work with descriptor wallets by achow101)\n* #16365 (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613412109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613426646",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#issuecomment-613426646",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18606",
    "id": 613426646,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzQyNjY0Ng==",
    "user": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?u=553fed41054860471c4d4658273ab8dfd882fbba&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-14T12:57:15Z",
    "updated_at": "2020-04-14T12:57:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Updated branch to partially get rid of conflict with #17356 (some conflict might be left if git is not clever enough).\r\n\r\nAdded a comment for #12674 : https://github.com/bitcoin/bitcoin/pull/12674/files#r408113386",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613426646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658944860",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#issuecomment-658944860",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18606",
    "id": 658944860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODk0NDg2MA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-15T18:58:56Z",
    "updated_at": "2020-07-15T18:58:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n\ud83d\udc19 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658944860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760438464",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#issuecomment-760438464",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18606",
    "id": 760438464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MDQzODQ2NA==",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?u=fc2e6f106f98731d49e9787f9cbfe86a17447c23&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-14T19:52:55Z",
    "updated_at": "2021-01-14T19:52:55Z",
    "author_association": "MEMBER",
    "body": "@pierreN is this something you plan on continuing to work on?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760438464/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802898381",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#issuecomment-802898381",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18606",
    "id": 802898381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjg5ODM4MQ==",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?u=fc2e6f106f98731d49e9787f9cbfe86a17447c23&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-19T15:02:48Z",
    "updated_at": "2021-03-19T15:02:48Z",
    "author_association": "MEMBER",
    "body": "@pierreN ping for rebase.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802898381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833886506",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#issuecomment-833886506",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18606",
    "id": 833886506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzg4NjUwNg==",
    "user": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?u=553fed41054860471c4d4658273ab8dfd882fbba&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-06T21:39:59Z",
    "updated_at": "2021-05-06T21:39:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry for the few months delay.\r\nI have a bit more time now and will try to follow through with this PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833886506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407226776",
    "pull_request_review_id": 391877669,
    "id": 407226776,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyNjc3Ng==",
    "diff_hunk": "@@ -1,141 +0,0 @@\n-# bash programmable completion for bitcoin-cli(1)",
    "path": "contrib/bitcoin-cli.bash-completion",
    "position": 1,
    "original_position": 1,
    "commit_id": "a08159006fc81b2e78ea5ab552c723f0123466d7",
    "original_commit_id": "b9ee5478b4045ec97f8a8c64e9b559091ff2a75a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why?\r\n\r\nI'd argue the file should stay in the old directory. All the functional test needs is read-access to the file. You can get the file path in the test with:\r\n\r\n```py\r\nos.path.join(config[\"environment\"][\"SRCDIR\"], 'contrib', ...",
    "created_at": "2020-04-12T17:13:29Z",
    "updated_at": "2020-04-14T12:46:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407226776",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407226776"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407226776"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407226776/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1,
    "original_line": 1,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407229833",
    "pull_request_review_id": 391879883,
    "id": 407229833,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyOTgzMw==",
    "diff_hunk": "@@ -1,141 +0,0 @@\n-# bash programmable completion for bitcoin-cli(1)",
    "path": "contrib/bitcoin-cli.bash-completion",
    "position": 1,
    "original_position": 1,
    "commit_id": "a08159006fc81b2e78ea5ab552c723f0123466d7",
    "original_commit_id": "b9ee5478b4045ec97f8a8c64e9b559091ff2a75a",
    "user": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks, I was missing the `config[\"environment\"]` variable. Branch updated.",
    "created_at": "2020-04-12T17:39:06Z",
    "updated_at": "2020-04-14T12:46:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407229833",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407229833"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407229833"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407229833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1,
    "original_line": 1,
    "side": "LEFT",
    "in_reply_to_id": 407226776
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261553",
    "pull_request_review_id": 391901212,
    "id": 407261553,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTU1Mw==",
    "diff_hunk": "@@ -0,0 +1,290 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests the bitcoin-cli bash autocompletion file.\n+\n+This checks that the bitcoin-cli bash autocompletion file in the\n+contrib/ folder match the RPC calls available.\n+\"\"\"\n+\n+from os import path\n+from re import compile, MULTILINE, DOTALL\n+from collections import defaultdict\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+# bash cli completion file header\n+COMPLETION_HEADER = \"\"\"# Dynamic bash programmable completion for bitcoin-cli(1)\n+#     DO NOT EDIT THIS FILE BY HAND -- THIS WILL FAIL THE FUNCTIONAL TEST tool_cli_completion\n+# This file is auto-generated by the functional test tool_cli_completion.\n+# If you want to modify this file, modify test/functional/tool_cli_completion.py and re-autogenerate\n+# this file via the --overwrite test flag.\n+\n+\"\"\"\n+\n+# option types which are limited to certain values\n+TYPED_OPTIONS = [\n+        [\"estimate_mode\", {\"UNSET\", \"ECONOMICAL\", \"CONSERVATIVE\"}],\n+        [\"sighashtype\", {\"ALL\", \"NONE\", \"SINGLE\", \"ALL|ANYONECANPAY\",\n+                         \"NONE|ANYONECANPAY\", \"SINGLE|ANYONECANPAY\"}]\n+]\n+\n+# regexp to extract arguments from the help of a single command\n+ARG_REGEXP = compile(r'.*Arguments\\s*:\\s*\\n*(.*)\\n*\\s*Result', MULTILINE | DOTALL)\n+\n+\n+class PossibleArgs():\n+    \"\"\" Helper class to store options associated to a command. \"\"\"\n+    def __init__(self, command):\n+        self.command = command\n+        self.arguments = {}\n+\n+    def set_args(self, position, values):\n+        \"\"\" Set the position-th positional argument as having values as possible values. \"\"\"\n+        if position in self.arguments:\n+            raise AssertionError((\"{} positional parameter already \"\n+                                 \"defined for command {}\").format(position, self.command))\n+\n+        self.arguments[position] = values\n+        return self\n+\n+    def set_bool_args(self, position):\n+        return self.set_args(position, {\"true\", \"false\"})\n+\n+    def set_file_args(self, position):\n+        # We consider an empty string as a file value for the sake of simplicity (don't\n+        # have to create an extra level of indirection).\n+        return self.set_args(position, {\"\"})\n+\n+    def set_unknwon_args(self, position):\n+        return self.set_args(position, {})\n+\n+    def has_option(self, position):\n+        return position in self.arguments and len(self.arguments[position]) > 0\n+\n+    def get_num_args(self):\n+        \"\"\" Return the max number of positional argument the option accepts. \"\"\"\n+        pos = list(self.arguments.keys())\n+        if len(pos) == 0:\n+            return 0\n+\n+        return max(pos)\n+\n+    def generate_autocomplete(self, pos):\n+        \"\"\" Generate the autocomplete file line relevent to the given position pos. \"\"\"\n+        if len(self.arguments[pos]) == 0:\n+            raise AssertionError(\"generating undefined arg id {} ({})\".format(pos, self.arguments))\n+\n+        # handle special file case\n+        if len(self.arguments[pos]) == 1 and len(next(iter(self.arguments[pos]))) == 0:\n+            return \"_filedir\"\n+\n+        # a set order is undefined, so we order args alphabetically\n+        args = list(self.arguments[pos])\n+        args.sort()\n+\n+        return \"COMPREPLY=( $( compgen -W \\\"\" + ' '.join(args) + \"\\\" -- \\\"$cur\\\" ) )\"\n+\n+\n+# commands where the option type can only be difficultly derived from the help message\n+SPECIAL_OPTIONS = [\n+        PossibleArgs(\"addnode\").set_args(2, {\"add\", \"remove\", \"onetry\"}),\n+        PossibleArgs(\"setban\").set_args(2, {\"add\", \"remove\"}),\n+]\n+\n+\n+def generate_start_complete(cword):\n+    \"\"\" Generate the start of an autocomplete block (beware of indentation). \"\"\"\n+    if cword > 1:\n+        return \"\"\"    if ((cword > {0})); then\n+        case ${{words[cword-{0}]}} in\"\"\".format(cword)\n+\n+    return \"    case \\\"$prev\\\" in\"\n+\n+\n+def generate_end_complete(cword):\n+    \"\"\" Generate the end of an autocomplete block. \"\"\"\n+    if cword > 1:\n+        return \"\\n{}esac\\n{}fi\\n\\n\".format(' '*8, ' '*4)\n+\n+    return \"\\n{}esac\\n\".format(' '*4)\n+\n+\n+class CliCompletionTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_cli()\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_bitcoind_zmq()  # zmq doesn't add commands to complete for now, but it might\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\n+            '--header',\n+            help='Static header part of the bitcoin-cli bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--footer',\n+            help='Static footer part of the bitcoin-cli bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--completion',\n+            help='Location of the current bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--overwrite',\n+            default=False,\n+            action='store_true',\n+            help='Force the test to pass by overwriting the file pointed by --completion '\n+                 'to a newly generated autocompletion file',\n+        )\n+\n+    def parse_single_helper(self, option):\n+        \"\"\" Complete the arguments of option via the RPC help command. \"\"\"\n+\n+        # if we can't find an argument list in the help text, then it has no option to add\n+        regexp_res = ARG_REGEXP.match(self.nodes[0].help(option.command))",
    "path": "test/functional/tool_cli_completion.py",
    "position": null,
    "original_position": 153,
    "commit_id": "a08159006fc81b2e78ea5ab552c723f0123466d7",
    "original_commit_id": "4576b77818156ebbcc9f6dbde5f3412ac6a3d1df",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        res = self.nodes[0].format(command=option.command, output=args_cli)\r\n```\r\n\r\nInstead of using regex to parse the pseudo doc-json, a hidden RPC could be added that spits out the format you want.\r\n\r\nI think all you need to do is register a formatter in RPCMan::Check",
    "created_at": "2020-04-12T22:43:48Z",
    "updated_at": "2020-04-14T12:46:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407261553",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261553"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407261553"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261553/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 153,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261681",
    "pull_request_review_id": 391901303,
    "id": 407261681,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTY4MQ==",
    "diff_hunk": "@@ -45,7 +45,8 @@ OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n \n DIST_CONTRIB = \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\\n-\t       $(top_srcdir)/contrib/linearize/linearize-hashes.py\n+\t       $(top_srcdir)/contrib/linearize/linearize-hashes.py \\\n+\t       $(top_srcdir)/contrib/bitcoin-cli.bash-completion",
    "path": "Makefile.am",
    "position": 6,
    "original_position": 6,
    "commit_id": "a08159006fc81b2e78ea5ab552c723f0123466d7",
    "original_commit_id": "4576b77818156ebbcc9f6dbde5f3412ac6a3d1df",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Looks good this way, if it makes out-of-tree builds happy. :+1: ",
    "created_at": "2020-04-12T22:44:57Z",
    "updated_at": "2020-04-14T12:46:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407261681",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261681"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407261681"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261681/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 49,
    "original_line": 49,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407927056",
    "pull_request_review_id": 392673218,
    "id": 407927056,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNzA1Ng==",
    "diff_hunk": "@@ -0,0 +1,290 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests the bitcoin-cli bash autocompletion file.\n+\n+This checks that the bitcoin-cli bash autocompletion file in the\n+contrib/ folder match the RPC calls available.\n+\"\"\"\n+\n+from os import path\n+from re import compile, MULTILINE, DOTALL\n+from collections import defaultdict\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+# bash cli completion file header\n+COMPLETION_HEADER = \"\"\"# Dynamic bash programmable completion for bitcoin-cli(1)\n+#     DO NOT EDIT THIS FILE BY HAND -- THIS WILL FAIL THE FUNCTIONAL TEST tool_cli_completion\n+# This file is auto-generated by the functional test tool_cli_completion.\n+# If you want to modify this file, modify test/functional/tool_cli_completion.py and re-autogenerate\n+# this file via the --overwrite test flag.\n+\n+\"\"\"\n+\n+# option types which are limited to certain values\n+TYPED_OPTIONS = [\n+        [\"estimate_mode\", {\"UNSET\", \"ECONOMICAL\", \"CONSERVATIVE\"}],\n+        [\"sighashtype\", {\"ALL\", \"NONE\", \"SINGLE\", \"ALL|ANYONECANPAY\",\n+                         \"NONE|ANYONECANPAY\", \"SINGLE|ANYONECANPAY\"}]\n+]\n+\n+# regexp to extract arguments from the help of a single command\n+ARG_REGEXP = compile(r'.*Arguments\\s*:\\s*\\n*(.*)\\n*\\s*Result', MULTILINE | DOTALL)\n+\n+\n+class PossibleArgs():\n+    \"\"\" Helper class to store options associated to a command. \"\"\"\n+    def __init__(self, command):\n+        self.command = command\n+        self.arguments = {}\n+\n+    def set_args(self, position, values):\n+        \"\"\" Set the position-th positional argument as having values as possible values. \"\"\"\n+        if position in self.arguments:\n+            raise AssertionError((\"{} positional parameter already \"\n+                                 \"defined for command {}\").format(position, self.command))\n+\n+        self.arguments[position] = values\n+        return self\n+\n+    def set_bool_args(self, position):\n+        return self.set_args(position, {\"true\", \"false\"})\n+\n+    def set_file_args(self, position):\n+        # We consider an empty string as a file value for the sake of simplicity (don't\n+        # have to create an extra level of indirection).\n+        return self.set_args(position, {\"\"})\n+\n+    def set_unknwon_args(self, position):\n+        return self.set_args(position, {})\n+\n+    def has_option(self, position):\n+        return position in self.arguments and len(self.arguments[position]) > 0\n+\n+    def get_num_args(self):\n+        \"\"\" Return the max number of positional argument the option accepts. \"\"\"\n+        pos = list(self.arguments.keys())\n+        if len(pos) == 0:\n+            return 0\n+\n+        return max(pos)\n+\n+    def generate_autocomplete(self, pos):\n+        \"\"\" Generate the autocomplete file line relevent to the given position pos. \"\"\"\n+        if len(self.arguments[pos]) == 0:\n+            raise AssertionError(\"generating undefined arg id {} ({})\".format(pos, self.arguments))\n+\n+        # handle special file case\n+        if len(self.arguments[pos]) == 1 and len(next(iter(self.arguments[pos]))) == 0:\n+            return \"_filedir\"\n+\n+        # a set order is undefined, so we order args alphabetically\n+        args = list(self.arguments[pos])\n+        args.sort()\n+\n+        return \"COMPREPLY=( $( compgen -W \\\"\" + ' '.join(args) + \"\\\" -- \\\"$cur\\\" ) )\"\n+\n+\n+# commands where the option type can only be difficultly derived from the help message\n+SPECIAL_OPTIONS = [\n+        PossibleArgs(\"addnode\").set_args(2, {\"add\", \"remove\", \"onetry\"}),\n+        PossibleArgs(\"setban\").set_args(2, {\"add\", \"remove\"}),\n+]\n+\n+\n+def generate_start_complete(cword):\n+    \"\"\" Generate the start of an autocomplete block (beware of indentation). \"\"\"\n+    if cword > 1:\n+        return \"\"\"    if ((cword > {0})); then\n+        case ${{words[cword-{0}]}} in\"\"\".format(cword)\n+\n+    return \"    case \\\"$prev\\\" in\"\n+\n+\n+def generate_end_complete(cword):\n+    \"\"\" Generate the end of an autocomplete block. \"\"\"\n+    if cword > 1:\n+        return \"\\n{}esac\\n{}fi\\n\\n\".format(' '*8, ' '*4)\n+\n+    return \"\\n{}esac\\n\".format(' '*4)\n+\n+\n+class CliCompletionTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_cli()\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_bitcoind_zmq()  # zmq doesn't add commands to complete for now, but it might\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\n+            '--header',\n+            help='Static header part of the bitcoin-cli bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--footer',\n+            help='Static footer part of the bitcoin-cli bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--completion',\n+            help='Location of the current bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--overwrite',\n+            default=False,\n+            action='store_true',\n+            help='Force the test to pass by overwriting the file pointed by --completion '\n+                 'to a newly generated autocompletion file',\n+        )\n+\n+    def parse_single_helper(self, option):\n+        \"\"\" Complete the arguments of option via the RPC help command. \"\"\"\n+\n+        # if we can't find an argument list in the help text, then it has no option to add\n+        regexp_res = ARG_REGEXP.match(self.nodes[0].help(option.command))",
    "path": "test/functional/tool_cli_completion.py",
    "position": null,
    "original_position": 153,
    "commit_id": "a08159006fc81b2e78ea5ab552c723f0123466d7",
    "original_commit_id": "4576b77818156ebbcc9f6dbde5f3412ac6a3d1df",
    "user": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, good idea. I have updated the branch to do that. Please have a look at the new code, thanks.\r\n\r\nNote that some non-hidden RPC calls didn't use RPCHelpMan::Check so I added a commit to fix that first (otherwise they wouldn't appear in the bash cli completion file).",
    "created_at": "2020-04-14T07:37:16Z",
    "updated_at": "2020-04-14T12:46:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407927056",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407927056"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r407927056"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407927056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 153,
    "side": "RIGHT",
    "in_reply_to_id": 407261553
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/410708249",
    "pull_request_review_id": 395920843,
    "id": 410708249,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwODI0OQ==",
    "diff_hunk": "@@ -0,0 +1,290 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests the bitcoin-cli bash autocompletion file.\n+\n+This checks that the bitcoin-cli bash autocompletion file in the\n+contrib/ folder match the RPC calls available.\n+\"\"\"\n+\n+from os import path\n+from re import compile, MULTILINE, DOTALL\n+from collections import defaultdict\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+# bash cli completion file header\n+COMPLETION_HEADER = \"\"\"# Dynamic bash programmable completion for bitcoin-cli(1)\n+#     DO NOT EDIT THIS FILE BY HAND -- THIS WILL FAIL THE FUNCTIONAL TEST tool_cli_completion\n+# This file is auto-generated by the functional test tool_cli_completion.\n+# If you want to modify this file, modify test/functional/tool_cli_completion.py and re-autogenerate\n+# this file via the --overwrite test flag.\n+\n+\"\"\"\n+\n+# option types which are limited to certain values\n+TYPED_OPTIONS = [\n+        [\"estimate_mode\", {\"UNSET\", \"ECONOMICAL\", \"CONSERVATIVE\"}],\n+        [\"sighashtype\", {\"ALL\", \"NONE\", \"SINGLE\", \"ALL|ANYONECANPAY\",\n+                         \"NONE|ANYONECANPAY\", \"SINGLE|ANYONECANPAY\"}]\n+]\n+\n+# regexp to extract arguments from the help of a single command\n+ARG_REGEXP = compile(r'.*Arguments\\s*:\\s*\\n*(.*)\\n*\\s*Result', MULTILINE | DOTALL)\n+\n+\n+class PossibleArgs():\n+    \"\"\" Helper class to store options associated to a command. \"\"\"\n+    def __init__(self, command):\n+        self.command = command\n+        self.arguments = {}\n+\n+    def set_args(self, position, values):\n+        \"\"\" Set the position-th positional argument as having values as possible values. \"\"\"\n+        if position in self.arguments:\n+            raise AssertionError((\"{} positional parameter already \"\n+                                 \"defined for command {}\").format(position, self.command))\n+\n+        self.arguments[position] = values\n+        return self\n+\n+    def set_bool_args(self, position):\n+        return self.set_args(position, {\"true\", \"false\"})\n+\n+    def set_file_args(self, position):\n+        # We consider an empty string as a file value for the sake of simplicity (don't\n+        # have to create an extra level of indirection).\n+        return self.set_args(position, {\"\"})\n+\n+    def set_unknwon_args(self, position):\n+        return self.set_args(position, {})\n+\n+    def has_option(self, position):\n+        return position in self.arguments and len(self.arguments[position]) > 0\n+\n+    def get_num_args(self):\n+        \"\"\" Return the max number of positional argument the option accepts. \"\"\"\n+        pos = list(self.arguments.keys())\n+        if len(pos) == 0:\n+            return 0\n+\n+        return max(pos)\n+\n+    def generate_autocomplete(self, pos):\n+        \"\"\" Generate the autocomplete file line relevent to the given position pos. \"\"\"\n+        if len(self.arguments[pos]) == 0:\n+            raise AssertionError(\"generating undefined arg id {} ({})\".format(pos, self.arguments))\n+\n+        # handle special file case\n+        if len(self.arguments[pos]) == 1 and len(next(iter(self.arguments[pos]))) == 0:\n+            return \"_filedir\"\n+\n+        # a set order is undefined, so we order args alphabetically\n+        args = list(self.arguments[pos])\n+        args.sort()\n+\n+        return \"COMPREPLY=( $( compgen -W \\\"\" + ' '.join(args) + \"\\\" -- \\\"$cur\\\" ) )\"\n+\n+\n+# commands where the option type can only be difficultly derived from the help message\n+SPECIAL_OPTIONS = [\n+        PossibleArgs(\"addnode\").set_args(2, {\"add\", \"remove\", \"onetry\"}),\n+        PossibleArgs(\"setban\").set_args(2, {\"add\", \"remove\"}),\n+]\n+\n+\n+def generate_start_complete(cword):\n+    \"\"\" Generate the start of an autocomplete block (beware of indentation). \"\"\"\n+    if cword > 1:\n+        return \"\"\"    if ((cword > {0})); then\n+        case ${{words[cword-{0}]}} in\"\"\".format(cword)\n+\n+    return \"    case \\\"$prev\\\" in\"\n+\n+\n+def generate_end_complete(cword):\n+    \"\"\" Generate the end of an autocomplete block. \"\"\"\n+    if cword > 1:\n+        return \"\\n{}esac\\n{}fi\\n\\n\".format(' '*8, ' '*4)\n+\n+    return \"\\n{}esac\\n\".format(' '*4)\n+\n+\n+class CliCompletionTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_cli()\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_bitcoind_zmq()  # zmq doesn't add commands to complete for now, but it might\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\n+            '--header',\n+            help='Static header part of the bitcoin-cli bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--footer',\n+            help='Static footer part of the bitcoin-cli bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--completion',\n+            help='Location of the current bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--overwrite',\n+            default=False,\n+            action='store_true',\n+            help='Force the test to pass by overwriting the file pointed by --completion '\n+                 'to a newly generated autocompletion file',\n+        )\n+\n+    def parse_single_helper(self, option):\n+        \"\"\" Complete the arguments of option via the RPC help command. \"\"\"\n+\n+        # if we can't find an argument list in the help text, then it has no option to add\n+        regexp_res = ARG_REGEXP.match(self.nodes[0].help(option.command))",
    "path": "test/functional/tool_cli_completion.py",
    "position": null,
    "original_position": 153,
    "commit_id": "a08159006fc81b2e78ea5ab552c723f0123466d7",
    "original_commit_id": "4576b77818156ebbcc9f6dbde5f3412ac6a3d1df",
    "user": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I hadn't notice #18531 when writing 412bb2f - I'll rebase this PR after #18531 is merged.\r\n",
    "created_at": "2020-04-18T14:57:06Z",
    "updated_at": "2020-04-18T14:57:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r410708249",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/410708249"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18606#discussion_r410708249"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18606"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/410708249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 153,
    "side": "RIGHT",
    "in_reply_to_id": 407261553
  }
]