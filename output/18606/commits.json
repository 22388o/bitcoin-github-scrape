[
  {
    "sha": "18602f1993e05091567bed57b98449e6b5a95a74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODYwMmYxOTkzZTA1MDkxNTY3YmVkNTdiOTg0NDllNmI1YTk1YTc0",
    "commit": {
      "author": {
        "name": "pierrenn",
        "email": "git@pnn.sh",
        "date": "2020-04-14T04:09:51Z"
      },
      "committer": {
        "name": "pierrenn",
        "email": "git@pnn.sh",
        "date": "2020-04-14T04:44:10Z"
      },
      "message": "rpc: make all unhidden actors use RPCHelpMan::Check",
      "tree": {
        "sha": "7c0ad7d67f2c55fbcbeeb0dfc0501bd88a6a0fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c0ad7d67f2c55fbcbeeb0dfc0501bd88a6a0fb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18602f1993e05091567bed57b98449e6b5a95a74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18602f1993e05091567bed57b98449e6b5a95a74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18602f1993e05091567bed57b98449e6b5a95a74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18602f1993e05091567bed57b98449e6b5a95a74/comments",
    "author": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5623ba89f050182ce9b1f570f3736b272b544b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5623ba89f050182ce9b1f570f3736b272b544b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5623ba89f050182ce9b1f570f3736b272b544b2"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 44,
      "deletions": 40
    },
    "files": [
      {
        "sha": "c48d5be54b48b94388bdf5b6a8d2e65754e70a51",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 19,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18602f1993e05091567bed57b98449e6b5a95a74/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18602f1993e05091567bed57b98449e6b5a95a74/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=18602f1993e05091567bed57b98449e6b5a95a74",
        "patch": "@@ -226,27 +226,28 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n \n static UniValue addnode(const JSONRPCRequest& request)\n {\n+    const RPCHelpMan help{\"addnode\",\n+                   \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n+                   \"Or try a connection to a node once.\\n\"\n+                   \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n+                   \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\",\n+                   {\n+                       {\"node\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The node (see getpeerinfo for nodes)\"},\n+                       {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n+                   },\n+                   RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+                   RPCExamples{\n+                       HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n+               + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n+                   },\n+    };\n+    help.Check(request);\n+\n     std::string strCommand;\n     if (!request.params[1].isNull())\n         strCommand = request.params[1].get_str();\n-    if (request.fHelp || request.params.size() != 2 ||\n-        (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n-        throw std::runtime_error(\n-            RPCHelpMan{\"addnode\",\n-                \"\\nAttempts to add or remove a node from the addnode list.\\n\"\n-                \"Or try a connection to a node once.\\n\"\n-                \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n-                \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\",\n-                {\n-                    {\"node\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The node (see getpeerinfo for nodes)\"},\n-                    {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n-                },\n-                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n-                RPCExamples{\n-                    HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n-            + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n-                },\n-            }.ToString());\n+    if (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\")\n+        throw std::runtime_error(help.ToString());\n \n     if(!g_rpc_node->connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n@@ -561,10 +562,12 @@ static UniValue setban(const JSONRPCRequest& request)\n                             + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\", 86400\")\n                 },\n     };\n+    help.Check(request);\n+\n     std::string strCommand;\n     if (!request.params[1].isNull())\n         strCommand = request.params[1].get_str();\n-    if (request.fHelp || !help.IsValidNumArgs(request.params.size()) || (strCommand != \"add\" && strCommand != \"remove\")) {\n+    if (strCommand != \"add\" && strCommand != \"remove\") {\n         throw std::runtime_error(help.ToString());\n     }\n     if (!g_rpc_node->banman) {"
      },
      {
        "sha": "a8daba1b0f95035af454ba5ca5e06d3e6a79d673",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18602f1993e05091567bed57b98449e6b5a95a74/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18602f1993e05091567bed57b98449e6b5a95a74/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=18602f1993e05091567bed57b98449e6b5a95a74",
        "patch": "@@ -129,19 +129,16 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n \n UniValue help(const JSONRPCRequest& jsonRequest)\n {\n-    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"help\",\n-                \"\\nList all commands, or get help for a specified command.\\n\",\n-                {\n-                    {\"command\", RPCArg::Type::STR, /* default */ \"all commands\", \"The command to get help on\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::STR, \"\", \"The help text\"\n-                },\n-                RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+    RPCHelpMan{\"help\",\n+        \"\\nList all commands, or get help for a specified command.\\n\",\n+        {\n+            {\"command\", RPCArg::Type::STR, /* default */ \"all commands\", \"The command to get help on\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::STR, \"\", \"The help text\"\n+        },\n+        RPCExamples{\"\"},\n+    }.Check(jsonRequest);\n \n     std::string strCommand;\n     if (jsonRequest.params.size() > 0)\n@@ -158,14 +155,18 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     // Also accept the hidden 'wait' integer argument (milliseconds)\n     // For instance, 'stop 1000' makes the call wait 1 second before returning\n     // to the client (intended for testing)\n-    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"stop\",\n-                \"\\nRequest a graceful shutdown of \" PACKAGE_NAME \".\",\n-                {},\n-                RPCResult{RPCResult::Type::STR, \"\", \"A string with the content '\" + RESULT + \"'\"},\n-                RPCExamples{\"\"},\n-            }.ToString());\n+    RPCHelpMan{\"stop\",\n+        \"\\nRequest a graceful shutdown of \" PACKAGE_NAME \".\",\n+        {\n+          {\"wait\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"Amount of ms before \"\n+                                                                           \"returning to the client \"\n+                                                                           \"(intended for testing)\"},\n+          {\"detach\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED_NAMED_ARG, \"deprecated\"}\n+        },\n+        RPCResult{RPCResult::Type::STR, \"\", \"A string with the content '\" + RESULT + \"'\"},\n+        RPCExamples{\"\"},\n+    }.Check(jsonRequest);\n+\n     // Event loop will exit after current HTTP requests have been handled, so\n     // this reply will get back to the client.\n     StartShutdown();"
      }
    ]
  },
  {
    "sha": "92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmE4YmY0MjJmNThhMjdlY2NlZTg3ZDEyMGQxYjNmYTFlYTI3NmNh",
    "commit": {
      "author": {
        "name": "pierrenn",
        "email": "git@pnn.sh",
        "date": "2020-04-14T04:28:03Z"
      },
      "committer": {
        "name": "pierrenn",
        "email": "git@pnn.sh",
        "date": "2020-04-14T12:44:25Z"
      },
      "message": "rpc: add format command with support for args_cli\n\n- add format command to get infos about commands via a particular format\n- add output format args_cli to get arguments type info of shown commands\n- refactor RPCArg::ToTypeString to be used accross multiple output formats\n- overload CRPCTable::execute to call != methods than in their request",
      "tree": {
        "sha": "9da02641cf356b8d6a511422d1843bd020227b31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9da02641cf356b8d6a511422d1843bd020227b31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/comments",
    "author": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18602f1993e05091567bed57b98449e6b5a95a74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18602f1993e05091567bed57b98449e6b5a95a74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18602f1993e05091567bed57b98449e6b5a95a74"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 119,
      "deletions": 38
    },
    "files": [
      {
        "sha": "dd5bb99de1f19edd3e08e07b3d9810f66628d7dd",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
        "patch": "@@ -26,6 +26,8 @@\n \n #include <univalue.h>\n \n+extern CRPCTable tableRPC;\n+\n static UniValue validateaddress(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"validateaddress\",\n@@ -576,6 +578,41 @@ UniValue logging(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue format(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"format\",\n+        \"\\nFormat data we have about an RPC command in the format specified by output.\\n\",\n+        {\n+            {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Command to query\" },\n+            {\"output\",  RPCArg::Type::STR, RPCArg::Optional::NO, \"Output format. Accepted values: args_cli\" },\n+        },\n+        RPCResult{RPCResult::Type::STR, \"data\", \"Formatted data about command.\"},\n+        RPCExamples{\"\"},\n+    }.Check(request);\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+    const std::string command = request.params[0].get_str();\n+\n+    JSONRPCRequest jreq(request);\n+    jreq.fHelp = true;\n+\n+    try\n+    {\n+        tableRPC.execute(command, jreq);\n+    }\n+    catch (const UniValue& e)\n+    {\n+        // only catch exceptions thrown by the actor\n+        if (e[\"code\"].get_int() != RPC_MISC_ERROR) {\n+          throw;\n+        }\n+\n+        return e[\"message\"];\n+    }\n+\n+    return NullUniValue;\n+}\n+\n static UniValue echo(const JSONRPCRequest& request)\n {\n     if (request.fHelp)\n@@ -614,6 +651,7 @@ static const CRPCCommand commands[] =\n     /* Not shown in help */\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            {\"timestamp\"}},\n     { \"hidden\",             \"mockscheduler\",          &mockscheduler,          {\"delta_time\"}},\n+    { \"hidden\",             \"format\",                 &format,                 {\"command\", \"output\"}},\n     { \"hidden\",             \"echo\",                   &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n     { \"hidden\",             \"echojson\",               &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n };"
      },
      {
        "sha": "9969cfcfb149781964912ee6e71982477f094356",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
        "patch": "@@ -419,7 +419,7 @@ static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, c\n     return out;\n }\n \n-UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n+UniValue CRPCTable::execute(const std::string& method, const JSONRPCRequest &request) const\n {\n     // Return immediately if in warmup\n     {\n@@ -429,7 +429,7 @@ UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n     }\n \n     // Find method\n-    auto it = mapCommands.find(request.strMethod);\n+    auto it = mapCommands.find(method);\n     if (it != mapCommands.end()) {\n         UniValue result;\n         for (const auto& command : it->second) {\n@@ -441,6 +441,11 @@ UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n     throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n }\n \n+UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n+{\n+  return this->execute(request.strMethod, request);\n+}\n+\n static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler)\n {\n     try"
      },
      {
        "sha": "97ac185acfbcf3e2ab609282f49ffd06f354ddcb",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
        "patch": "@@ -125,13 +125,23 @@ class CRPCTable\n     std::string help(const std::string& name, const JSONRPCRequest& helpreq) const;\n \n     /**\n-     * Execute a method.\n+     * Execute the method corresponding to request.strMethod.\n      * @param request The JSONRPCRequest to execute\n      * @returns Result of the call.\n      * @throws an exception (UniValue) when an error happens.\n      */\n     UniValue execute(const JSONRPCRequest &request) const;\n \n+    /**\n+     * Execute the method corresponding to method.\n+     * @param method method to execute\n+     * @param request The JSONRPCRequest to send to the method\n+     * @returns Result of the call.\n+     * @throws an exception (UniValue) when an error happens.\n+     */\n+    UniValue execute(const std::string& method, const JSONRPCRequest &request) const;\n+\n+\n     /**\n     * Returns a list of registered commands\n     * @returns List of registered commands."
      },
      {
        "sha": "3b85afbdcb216fc68c7ab9c895517b2b53b76701",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 34,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
        "patch": "@@ -505,6 +505,29 @@ std::string RPCHelpMan::ToString() const\n \n     return ret;\n }\n+std::string RPCHelpMan::ToStringArgsCli() const\n+{\n+    std::string res;\n+    for (const auto& arg : m_args) {\n+        const bool is_file = ToLower(arg.m_description).find(\"file\") != std::string::npos;\n+        res += arg.m_name + \":\" + (is_file ? \"file\" : arg.ToTypeString()) + \",\";\n+    }\n+\n+    if (res.size() > 0)\n+        res.pop_back();\n+\n+    return res;\n+}\n+std::string RPCHelpMan::ToString(const std::string& format) const\n+{\n+    if (format == \"default\")\n+        return this->ToString();\n+\n+    if (format == \"args_cli\")\n+        return this->ToStringArgsCli();\n+\n+    throw std::runtime_error(\"unrecognized help format\");\n+}\n \n bool RPCArg::IsOptional() const\n {\n@@ -515,47 +538,40 @@ bool RPCArg::IsOptional() const\n     }\n }\n \n+std::string RPCArg::ToTypeString() const\n+{\n+    switch (m_type) {\n+    case Type::STR_HEX:\n+    case Type::STR:\n+        return \"string\";\n+    case Type::NUM:\n+        return \"numeric\";\n+    case Type::AMOUNT:\n+        return \"numeric or string\";\n+    case Type::RANGE:\n+        return \"numeric or array\";\n+    case Type::BOOL:\n+        return \"boolean\";\n+    case Type::OBJ:\n+    case Type::OBJ_USER_KEYS:\n+        return \"json object\";\n+    case Type::ARR:\n+        return \"json array\";\n+    // no default case, so the compiler can warn about missing cases\n+    }\n+\n+    // gcc and msvc might complain we don't return anything even if we handle all cases\n+    throw std::runtime_error(\"unknown argument type\");\n+}\n+\n std::string RPCArg::ToDescriptionString() const\n {\n     std::string ret;\n     ret += \"(\";\n     if (m_type_str.size() != 0) {\n         ret += m_type_str.at(1);\n     } else {\n-        switch (m_type) {\n-        case Type::STR_HEX:\n-        case Type::STR: {\n-            ret += \"string\";\n-            break;\n-        }\n-        case Type::NUM: {\n-            ret += \"numeric\";\n-            break;\n-        }\n-        case Type::AMOUNT: {\n-            ret += \"numeric or string\";\n-            break;\n-        }\n-        case Type::RANGE: {\n-            ret += \"numeric or array\";\n-            break;\n-        }\n-        case Type::BOOL: {\n-            ret += \"boolean\";\n-            break;\n-        }\n-        case Type::OBJ:\n-        case Type::OBJ_USER_KEYS: {\n-            ret += \"json object\";\n-            break;\n-        }\n-        case Type::ARR: {\n-            ret += \"json array\";\n-            break;\n-        }\n-\n-            // no default case, so the compiler can warn about missing cases\n-        }\n+        ret += this->ToTypeString();\n     }\n     if (m_fallback.which() == 1) {\n         ret += \", optional, default=\" + boost::get<std::string>(m_fallback);"
      },
      {
        "sha": "8110d408b6e49bed8c01afc10423b58506c1b66b",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92a8bf422f58a27eccee87d120d1b3fa1ea276ca/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
        "patch": "@@ -198,6 +198,10 @@ struct RPCArg {\n      * Set oneline to get the oneline representation (less whitespace)\n      */\n     std::string ToStringObj(bool oneline) const;\n+    /**\n+     * Return the type as a string.\n+     */\n+    std::string ToTypeString() const;\n     /**\n      * Return the description string, including the argument type and whether\n      * the argument is required.\n@@ -322,6 +326,8 @@ class RPCHelpMan\n     RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples);\n \n     std::string ToString() const;\n+    std::string ToStringArgsCli() const;\n+    std::string ToString(const std::string& format) const;\n     /** If the supplied number of args is neither too small nor too high */\n     bool IsValidNumArgs(size_t num_args) const;\n     /**\n@@ -330,7 +336,13 @@ class RPCHelpMan\n      */\n     inline void Check(const JSONRPCRequest& request) const {\n         if (request.fHelp || !IsValidNumArgs(request.params.size())) {\n-            throw std::runtime_error(ToString());\n+            std::string help_format = \"default\";\n+            if (request.strMethod == \"format\") {\n+                RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VSTR});\n+                help_format = request.params[1].get_str();\n+            }\n+\n+            throw std::runtime_error(ToString(help_format));\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTU5YzNlNTYyY2FmMTBhOWQ1ZTIyY2MwMWNiZDFlMzVhZTFhYjc3",
    "commit": {
      "author": {
        "name": "pierrenn",
        "email": "git@pnn.sh",
        "date": "2020-04-14T04:48:53Z"
      },
      "committer": {
        "name": "pierrenn",
        "email": "git@pnn.sh",
        "date": "2020-04-14T12:44:25Z"
      },
      "message": "contrib: sync bitcoin-cli bash autocompletion",
      "tree": {
        "sha": "145b25ab656a3f4c7509835516fc6e0561133fb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/145b25ab656a3f4c7509835516fc6e0561133fb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77/comments",
    "author": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92a8bf422f58a27eccee87d120d1b3fa1ea276ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92a8bf422f58a27eccee87d120d1b3fa1ea276ca"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 56,
      "deletions": 21
    },
    "files": [
      {
        "sha": "a44d8df56fccb6f933a69bbceb1ca77be6ce86b4",
        "filename": "contrib/bitcoin-cli.bash-completion",
        "status": "modified",
        "additions": 56,
        "deletions": 21,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77/contrib/bitcoin-cli.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77/contrib/bitcoin-cli.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-cli.bash-completion?ref=e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77",
        "patch": "@@ -1,5 +1,10 @@\n-# bash programmable completion for bitcoin-cli(1)\n-# Copyright (c) 2012-2019 The Bitcoin Core developers\n+# Dynamic bash programmable completion for bitcoin-cli(1)\n+#     DO NOT EDIT THIS FILE BY HAND -- THIS WILL FAIL THE FUNCTIONAL TEST tool_cli_completion\n+# This file is auto-generated by the functional test tool_cli_completion.\n+# If you want to modify this file, modify test/functional/tool_cli_completion.py and re-autogenerate\n+# this file via the --overwrite test flag.\n+\n+# Copyright (c) 2012-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -28,71 +33,101 @@ _bitcoin_cli() {\n     COMPREPLY=()\n     _get_comp_words_by_ref -n = cur prev words cword\n \n+    if ((cword > 9)); then\n+        case ${words[cword-9]} in\n+            sendtoaddress)\n+                COMPREPLY=( $( compgen -W \"false true\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+        esac\n+    fi\n+\n+    if ((cword > 8)); then\n+        case ${words[cword-8]} in\n+            sendmany|sendtoaddress)\n+                COMPREPLY=( $( compgen -W \"CONSERVATIVE ECONOMICAL UNSET\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+        esac\n+    fi\n+\n+    if ((cword > 6)); then\n+        case ${words[cword-6]} in\n+            sendmany|sendtoaddress)\n+                COMPREPLY=( $( compgen -W \"false true\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n+        esac\n+    fi\n+\n     if ((cword > 5)); then\n         case ${words[cword-5]} in\n-            sendtoaddress)\n-                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+            createwallet|sendtoaddress|walletcreatefundedpsbt)\n+                COMPREPLY=( $( compgen -W \"false true\" -- \"$cur\" ) )\n                 return 0\n                 ;;\n         esac\n     fi\n \n     if ((cword > 4)); then\n         case ${words[cword-4]} in\n-            importaddress|listtransactions|setban)\n-                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+            createpsbt|createrawtransaction|getbalance|importaddress|listsinceblock|listtransactions|listunspent|setban|walletprocesspsbt)\n+                COMPREPLY=( $( compgen -W \"false true\" -- \"$cur\" ) )\n                 return 0\n                 ;;\n-            signrawtransactionwithkey|signrawtransactionwithwallet)\n-                COMPREPLY=( $( compgen -W \"ALL NONE SINGLE ALL|ANYONECANPAY NONE|ANYONECANPAY SINGLE|ANYONECANPAY\" -- \"$cur\" ) )\n+            signrawtransactionwithkey)\n+                COMPREPLY=( $( compgen -W \"ALL ALL|ANYONECANPAY NONE NONE|ANYONECANPAY SINGLE SINGLE|ANYONECANPAY\" -- \"$cur\" ) )\n                 return 0\n                 ;;\n         esac\n     fi\n \n     if ((cword > 3)); then\n         case ${words[cword-3]} in\n-            addmultisigaddress)\n+            converttopsbt|createwallet|fundrawtransaction|getbalance|gettransaction|gettxout|importaddress|importprivkey|importpubkey|listreceivedbyaddress|listreceivedbylabel|listsinceblock)\n+                COMPREPLY=( $( compgen -W \"false true\" -- \"$cur\" ) )\n                 return 0\n                 ;;\n-            getbalance|gettxout|importaddress|importpubkey|importprivkey|listreceivedbyaddress|listsinceblock)\n-                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+            signrawtransactionwithwallet|walletprocesspsbt)\n+                COMPREPLY=( $( compgen -W \"ALL ALL|ANYONECANPAY NONE NONE|ANYONECANPAY SINGLE SINGLE|ANYONECANPAY\" -- \"$cur\" ) )\n                 return 0\n                 ;;\n         esac\n     fi\n \n     if ((cword > 2)); then\n         case ${words[cword-2]} in\n+            converttopsbt|createwallet|decoderawtransaction|finalizepsbt|getblockheader|getmempoolancestors|getmempooldescendants|getrawtransaction|gettransaction|listreceivedbyaddress|listreceivedbylabel|setwalletflag|stop|walletprocesspsbt)\n+                COMPREPLY=( $( compgen -W \"false true\" -- \"$cur\" ) )\n+                return 0\n+                ;;\n             addnode)\n-                COMPREPLY=( $( compgen -W \"add remove onetry\" -- \"$cur\" ) )\n+                COMPREPLY=( $( compgen -W \"add onetry remove\" -- \"$cur\" ) )\n                 return 0\n                 ;;\n             setban)\n                 COMPREPLY=( $( compgen -W \"add remove\" -- \"$cur\" ) )\n                 return 0\n                 ;;\n-            fundrawtransaction|getblock|getblockheader|getmempoolancestors|getmempooldescendants|getrawtransaction|gettransaction|listreceivedbyaddress|sendrawtransaction)\n-                COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+            estimatesmartfee)\n+                COMPREPLY=( $( compgen -W \"CONSERVATIVE ECONOMICAL UNSET\" -- \"$cur\" ) )\n                 return 0\n                 ;;\n         esac\n     fi\n \n     case \"$prev\" in\n-        backupwallet|dumpwallet|importwallet)\n-            _filedir\n-            return 0\n-            ;;\n-        getaddednodeinfo|getrawmempool|lockunspent)\n-            COMPREPLY=( $( compgen -W \"true false\" -- \"$cur\" ) )\n+        getrawmempool|lockunspent|sethdseed|setnetworkactive)\n+            COMPREPLY=( $( compgen -W \"false true\" -- \"$cur\" ) )\n             return 0\n             ;;\n-        getbalance|getnewaddress|listtransactions|sendmany)\n+        backupwallet|dumpwallet|importwallet|loadwallet)\n+            _filedir\n             return 0\n             ;;\n     esac\n \n+\n     case \"$cur\" in\n         -conf=*)\n             cur=\"${cur#*=}\""
      }
    ]
  },
  {
    "sha": "a08159006fc81b2e78ea5ab552c723f0123466d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDgxNTkwMDZmYzgxYjJlNzhlYTVhYjU1MmM3MjNmMDEyMzQ2NmQ3",
    "commit": {
      "author": {
        "name": "pierrenn",
        "email": "git@pnn.sh",
        "date": "2020-04-14T04:56:43Z"
      },
      "committer": {
        "name": "pierrenn",
        "email": "git@pnn.sh",
        "date": "2020-04-14T12:44:25Z"
      },
      "message": "test: keeps bitcoin-cli autocomplete in sync\n\nAdd a functional test which parses available RPC commands, generates\nthe associated bitcoin-cli autocomplete file and checks that the current\nautocomplete file matches.\nAn outdated autocomplete file can be updated via the --overwrite test\nparameter.",
      "tree": {
        "sha": "d4105eff9ced4164ba6a89917f61209eee3b69ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4105eff9ced4164ba6a89917f61209eee3b69ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a08159006fc81b2e78ea5ab552c723f0123466d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a08159006fc81b2e78ea5ab552c723f0123466d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a08159006fc81b2e78ea5ab552c723f0123466d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a08159006fc81b2e78ea5ab552c723f0123466d7/comments",
    "author": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pierreN",
      "id": 946757,
      "node_id": "MDQ6VXNlcjk0Njc1Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/946757?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pierreN",
      "html_url": "https://github.com/pierreN",
      "followers_url": "https://api.github.com/users/pierreN/followers",
      "following_url": "https://api.github.com/users/pierreN/following{/other_user}",
      "gists_url": "https://api.github.com/users/pierreN/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pierreN/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pierreN/subscriptions",
      "organizations_url": "https://api.github.com/users/pierreN/orgs",
      "repos_url": "https://api.github.com/users/pierreN/repos",
      "events_url": "https://api.github.com/users/pierreN/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pierreN/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e159c3e562caf10a9d5e22cc01cbd1e35ae1ab77"
      }
    ],
    "stats": {
      "total": 370,
      "additions": 369,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cfc4e836d89296eea15535423009bbe572f41e51",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08159006fc81b2e78ea5ab552c723f0123466d7/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08159006fc81b2e78ea5ab552c723f0123466d7/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=a08159006fc81b2e78ea5ab552c723f0123466d7",
        "patch": "@@ -45,7 +45,8 @@ OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n \n DIST_CONTRIB = \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\\n-\t       $(top_srcdir)/contrib/linearize/linearize-hashes.py\n+\t       $(top_srcdir)/contrib/linearize/linearize-hashes.py \\\n+\t       $(top_srcdir)/contrib/bitcoin-cli.bash-completion\n \n DIST_SHARE = \\\n   $(top_srcdir)/share/genbuild.sh \\"
      },
      {
        "sha": "7150f26e8ef6197b61b3cdd6a8d46fe8a9363e5a",
        "filename": "test/functional/data/completion/bitcoin-cli.footer.bash-completion",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08159006fc81b2e78ea5ab552c723f0123466d7/test/functional/data/completion/bitcoin-cli.footer.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08159006fc81b2e78ea5ab552c723f0123466d7/test/functional/data/completion/bitcoin-cli.footer.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/completion/bitcoin-cli.footer.bash-completion?ref=a08159006fc81b2e78ea5ab552c723f0123466d7",
        "patch": "@@ -0,0 +1,48 @@\n+\n+\n+    case \"$cur\" in\n+        -conf=*)\n+            cur=\"${cur#*=}\"\n+            _filedir\n+            return 0\n+            ;;\n+        -datadir=*)\n+            cur=\"${cur#*=}\"\n+            _filedir -d\n+            return 0\n+            ;;\n+        -*=*)\t# prevent nonsense completions\n+            return 0\n+            ;;\n+        *)\n+            local helpopts commands\n+\n+            # only parse -help if senseful\n+            if [[ -z \"$cur\" || \"$cur\" =~ ^- ]]; then\n+                helpopts=$($bitcoin_cli -help 2>&1 | awk '$1 ~ /^-/ { sub(/=.*/, \"=\"); print $1 }' )\n+            fi\n+\n+            # only parse help if senseful\n+            if [[ -z \"$cur\" || \"$cur\" =~ ^[a-z] ]]; then\n+                commands=$(_bitcoin_rpc help 2>/dev/null | awk '$1 ~ /^[a-z]/ { print $1; }')\n+            fi\n+\n+            COMPREPLY=( $( compgen -W \"$helpopts $commands\" -- \"$cur\" ) )\n+\n+            # Prevent space if an argument is desired\n+            if [[ $COMPREPLY == *= ]]; then\n+                compopt -o nospace\n+            fi\n+            return 0\n+            ;;\n+    esac\n+} &&\n+complete -F _bitcoin_cli bitcoin-cli\n+\n+# Local variables:\n+# mode: shell-script\n+# sh-basic-offset: 4\n+# sh-indent-comment: t\n+# indent-tabs-mode: nil\n+# End:\n+# ex: ts=4 sw=4 et filetype=sh"
      },
      {
        "sha": "d1475f9d0774e773759d84c97f2ec3d38b1c4345",
        "filename": "test/functional/data/completion/bitcoin-cli.header.bash-completion",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08159006fc81b2e78ea5ab552c723f0123466d7/test/functional/data/completion/bitcoin-cli.header.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08159006fc81b2e78ea5ab552c723f0123466d7/test/functional/data/completion/bitcoin-cli.header.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/completion/bitcoin-cli.header.bash-completion?ref=a08159006fc81b2e78ea5ab552c723f0123466d7",
        "patch": "@@ -0,0 +1,29 @@\n+# Copyright (c) 2012-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# call $bitcoin-cli for RPC\n+_bitcoin_rpc() {\n+    # determine already specified args necessary for RPC\n+    local rpcargs=()\n+    for i in ${COMP_LINE}; do\n+        case \"$i\" in\n+            -conf=*|-datadir=*|-regtest|-rpc*|-testnet)\n+                rpcargs=( \"${rpcargs[@]}\" \"$i\" )\n+                ;;\n+        esac\n+    done\n+    $bitcoin_cli \"${rpcargs[@]}\" \"$@\"\n+}\n+\n+_bitcoin_cli() {\n+    local cur prev words=() cword\n+    local bitcoin_cli\n+\n+    # save and use original argument to invoke bitcoin-cli for -help, help and RPC\n+    # as bitcoin-cli might not be in $PATH\n+    bitcoin_cli=\"$1\"\n+\n+    COMPREPLY=()\n+    _get_comp_words_by_ref -n = cur prev words cword\n+"
      },
      {
        "sha": "6a7e078ac3951eab8c944820110bc0444a9907ed",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08159006fc81b2e78ea5ab552c723f0123466d7/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08159006fc81b2e78ea5ab552c723f0123466d7/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a08159006fc81b2e78ea5ab552c723f0123466d7",
        "patch": "@@ -115,6 +115,7 @@\n     'mempool_resurrect.py',\n     'wallet_txn_doublespend.py --mineblock',\n     'tool_wallet.py',\n+    'tool_cli_completion.py',\n     'wallet_txn_clone.py',\n     'wallet_txn_clone.py --segwit',\n     'rpc_getchaintips.py',"
      },
      {
        "sha": "393c617474aaae54e1590f66f148db994b2bd928",
        "filename": "test/functional/tool_cli_completion.py",
        "status": "added",
        "additions": 289,
        "deletions": 0,
        "changes": 289,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08159006fc81b2e78ea5ab552c723f0123466d7/test/functional/tool_cli_completion.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08159006fc81b2e78ea5ab552c723f0123466d7/test/functional/tool_cli_completion.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_cli_completion.py?ref=a08159006fc81b2e78ea5ab552c723f0123466d7",
        "patch": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests the bitcoin-cli bash autocompletion file.\n+\n+This checks that the bitcoin-cli bash autocompletion file in the\n+contrib/ folder match the RPC calls available.\n+\"\"\"\n+\n+from os import path\n+from collections import defaultdict\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+# bash cli completion file header\n+COMPLETION_HEADER = \"\"\"# Dynamic bash programmable completion for bitcoin-cli(1)\n+#     DO NOT EDIT THIS FILE BY HAND -- THIS WILL FAIL THE FUNCTIONAL TEST tool_cli_completion\n+# This file is auto-generated by the functional test tool_cli_completion.\n+# If you want to modify this file, modify test/functional/tool_cli_completion.py and re-autogenerate\n+# this file via the --overwrite test flag.\n+\n+\"\"\"\n+\n+# option types which are limited to certain values\n+TYPED_OPTIONS = [\n+        [\"estimate_mode\", {\"UNSET\", \"ECONOMICAL\", \"CONSERVATIVE\"}],\n+        [\"sighashtype\", {\"ALL\", \"NONE\", \"SINGLE\", \"ALL|ANYONECANPAY\",\n+                         \"NONE|ANYONECANPAY\", \"SINGLE|ANYONECANPAY\"}]\n+]\n+\n+\n+class PossibleArgs():\n+    \"\"\" Helper class to store options associated to a command. \"\"\"\n+    def __init__(self, command):\n+        self.command = command\n+        self.arguments = {}\n+\n+    def set_args(self, position, values):\n+        \"\"\" Set the position-th positional argument as having values as possible values. \"\"\"\n+        if position in self.arguments:\n+            raise AssertionError((\"{} positional parameter already \"\n+                                 \"defined for command {}\").format(position, self.command))\n+\n+        self.arguments[position] = values\n+        return self\n+\n+    def set_bool_args(self, position):\n+        return self.set_args(position, {\"true\", \"false\"})\n+\n+    def set_file_args(self, position):\n+        # We consider an empty string as a file value for the sake of simplicity (don't\n+        # have to create an extra level of indirection).\n+        return self.set_args(position, {\"\"})\n+\n+    def set_unknwon_args(self, position):\n+        return self.set_args(position, {})\n+\n+    def set_typed_option(self, position, arg_name):\n+        \"\"\" Checks if arg_name is a typed option; if it is, sets it and return True. \"\"\"\n+        for option_type in TYPED_OPTIONS:\n+            if arg_name == option_type[0]:\n+                self.set_args(position, option_type[1])\n+                return True\n+\n+        return False\n+\n+    def has_option(self, position):\n+        return position in self.arguments and len(self.arguments[position]) > 0\n+\n+    def get_num_args(self):\n+        \"\"\" Return the max number of positional argument the option accepts. \"\"\"\n+        pos = list(self.arguments.keys())\n+        if len(pos) == 0:\n+            return 0\n+\n+        return max(pos)\n+\n+    def generate_autocomplete(self, pos):\n+        \"\"\" Generate the autocomplete file line relevent to the given position pos. \"\"\"\n+        if len(self.arguments[pos]) == 0:\n+            raise AssertionError(\"generating undefined arg id {} ({})\".format(pos, self.arguments))\n+\n+        # handle special file case\n+        if len(self.arguments[pos]) == 1 and len(next(iter(self.arguments[pos]))) == 0:\n+            return \"_filedir\"\n+\n+        # a set order is undefined, so we order args alphabetically\n+        args = list(self.arguments[pos])\n+        args.sort()\n+\n+        return \"COMPREPLY=( $( compgen -W \\\"\" + ' '.join(args) + \"\\\" -- \\\"$cur\\\" ) )\"\n+\n+\n+# commands where the option type can only be difficultly derived from the help message\n+SPECIAL_OPTIONS = [\n+        PossibleArgs(\"addnode\").set_args(2, {\"add\", \"remove\", \"onetry\"}),\n+        PossibleArgs(\"setban\").set_args(2, {\"add\", \"remove\"}),\n+]\n+\n+\n+def generate_start_complete(cword):\n+    \"\"\" Generate the start of an autocomplete block (beware of indentation). \"\"\"\n+    if cword > 1:\n+        return \"\"\"    if ((cword > {0})); then\n+        case ${{words[cword-{0}]}} in\"\"\".format(cword)\n+\n+    return \"    case \\\"$prev\\\" in\"\n+\n+\n+def generate_end_complete(cword):\n+    \"\"\" Generate the end of an autocomplete block. \"\"\"\n+    if cword > 1:\n+        return \"\\n{}esac\\n{}fi\\n\\n\".format(' '*8, ' '*4)\n+\n+    return \"\\n{}esac\\n\".format(' '*4)\n+\n+\n+class CliCompletionTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_cli()\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_bitcoind_zmq()  # zmq doesn't add commands to complete for now, but it might\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\n+            '--header',\n+            help='Static header part of the bitcoin-cli bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--footer',\n+            help='Static footer part of the bitcoin-cli bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--completion',\n+            help='Location of the current bash completion file',\n+        )\n+\n+        parser.add_argument(\n+            '--overwrite',\n+            default=False,\n+            action='store_true',\n+            help='Force the test to pass by overwriting the file pointed by --completion '\n+                 'to a newly generated autocompletion file',\n+        )\n+\n+    def parse_single_helper(self, option):\n+        \"\"\" Complete the arguments of option via the RPC format command. \"\"\"\n+\n+        res = self.nodes[0].format(command=option.command, output='args_cli')\n+        if len(res) == 0:\n+            return option\n+\n+        if res.count('\\n') > 1:\n+            raise AssertionError(\"command {} doesn't support format RPC. Should it be a hidden \"\n+                                 \"command? Please call RPCHelpMan::Check when adding a new \"\n+                                 \"non-hidden command. Returned: {}\".format(option.command, res))\n+\n+        for idx, argument in enumerate(res.split(\",\")):\n+            elems = argument.split(\":\")\n+\n+            if option.set_typed_option(idx+1, elems[0]):\n+                continue\n+\n+            if elems[1] == \"boolean\":\n+                option.set_bool_args(idx+1)\n+                continue\n+\n+            if elems[1] == \"file\":\n+                option.set_file_args(idx+1)\n+                continue\n+\n+            if not option.has_option(idx+1):\n+                option.set_unknwon_args(idx+1)\n+\n+        return option\n+\n+    def get_command_options(self, command):\n+        \"\"\" Returns the corresponding PossibleArgs for the command. \"\"\"\n+\n+        # verify it's not a special option first\n+        for soption in SPECIAL_OPTIONS:\n+            if command == soption.command:\n+                return self.parse_single_helper(soption)\n+\n+        return self.parse_single_helper(PossibleArgs(command))\n+\n+    def generate_completion_block(self, options):\n+        commands = [o.command for o in options]\n+        self.log.info(\"Generating part of the completion file for options {}\".format(commands))\n+\n+        if len(options) == 0:\n+            return \"\"\n+\n+        generated = \"\"\n+        max_pos_options = max(options, key=lambda o: o.get_num_args()).get_num_args()\n+        for cword in range(max_pos_options, 0, -1):\n+            this_options = [option for option in options if option.has_option(cword)]\n+            if len(this_options) == 0:\n+                continue\n+\n+            # group options by their arguments value\n+            grouped_options = defaultdict(list)\n+            for option in this_options:\n+                arg = option.generate_autocomplete(cword)\n+                grouped_options[arg].append(option)\n+\n+            # generate the cword block\n+            indent = 12 if cword > 1 else 8\n+            generated += generate_start_complete(cword)\n+            for line, opt_gr in grouped_options.items():\n+                opt_gr.sort(key=lambda o: o.command)  # show options alphabetically for clarity\n+                args = '|'.join([o.command for o in opt_gr])\n+                generated += \"\\n{}{})\\n\".format(' '*indent, args)\n+                generated += \"{0}{1}\\n{0}return 0\\n{0};;\".format(' '*(indent+4), line)\n+            generated += generate_end_complete(cword)\n+\n+        return generated\n+\n+    def generate_completion_file(self, commands):\n+        try:\n+            with open(self.options.header, 'r', encoding='utf-8') as header_file:\n+                header = header_file.read()\n+\n+            with open(self.options.footer, 'r', encoding='utf-8') as footer_file:\n+                footer = footer_file.read()\n+        except Exception as e:\n+            raise AssertionError((\"Could not read header/footer ({} and {}) files. Tell the test \"\n+                                 \"where to find them using the --header/--footer parameters ({}).\")\n+                                 .format(self.options.header, self.options.footer, e))\n+\n+        return COMPLETION_HEADER + header + commands + footer\n+\n+    def write_completion_file(self, new_file):\n+        try:\n+            with open(self.options.completion, 'w', encoding='utf-8') as completion_file:\n+                completion_file.write(new_file)\n+        except Exception as e:\n+            raise AssertionError((\"Could not write the autocomplete file to {}. Tell the test \"\n+                                 \"where to find it using the --completion parameters ({}).\")\n+                                 .format(self.options.completion, e))\n+\n+    def read_completion_file(self):\n+        try:\n+            with open(self.options.completion, 'r', encoding='utf-8') as completion_file:\n+                return completion_file.read()\n+        except Exception as e:\n+            raise AssertionError((\"Could not read the autocomplete file ({}) file. Tell the test \"\n+                                 \"where to find it using the --completion parameters ({}).\")\n+                                 .format(self.options.completion, e))\n+\n+    def run_test(self):\n+        # self.config is not available in self.add_options, so complete filepaths here\n+        srcdir = self.config[\"environment\"][\"SRCDIR\"]\n+        test_data_dir = path.join(srcdir, 'test', 'functional', 'data', 'completion')\n+        if self.options.header is None or len(self.options.header) == 0:\n+            self.options.header = path.join(test_data_dir, 'bitcoin-cli.header.bash-completion')\n+        if self.options.footer is None or len(self.options.footer) == 0:\n+            self.options.footer = path.join(test_data_dir, 'bitcoin-cli.footer.bash-completion')\n+        if self.options.completion is None or len(self.options.completion) == 0:\n+            self.options.completion = path.join(srcdir, 'contrib', 'bitcoin-cli.bash-completion')\n+\n+        self.log.info(\"Parsing help commands to get all commands arguments...\")\n+        commands = self.nodes[0].help().split(\"\\n\")\n+        commands = [c.split(' ')[0] for c in commands if not c.startswith(\"== \") and len(c) > 0]\n+        commands = [self.get_command_options(c) for c in commands]\n+\n+        self.log.info(\"Generating new autocompletion file...\")\n+        commands = self.generate_completion_block(commands)\n+        new_completion = self.generate_completion_file(commands)\n+\n+        if self.options.overwrite:\n+            self.log.info(\"Overwriting autocompletion file...\")\n+            self.write_completion_file(new_completion)\n+\n+        self.log.info(\"Checking that generated and original completion files matches...\")\n+        completion = self.read_completion_file()\n+        assert_equal(new_completion, completion)\n+\n+\n+if __name__ == '__main__':\n+    CliCompletionTest().main()"
      }
    ]
  }
]