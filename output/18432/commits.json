[
  {
    "sha": "25cb97000ea2be1b7080668a767d6c4bbf534dac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWNiOTcwMDBlYTJiZTFiNzA4MDY2OGE3NjdkNmM0YmJmNTM0ZGFj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-26T19:01:25Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-24T09:18:12Z"
      },
      "message": "Use std::locale::classic() when using stringstreams",
      "tree": {
        "sha": "92b42380949b3b69d965fc1ffa3e121b412f1fb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92b42380949b3b69d965fc1ffa3e121b412f1fb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25cb97000ea2be1b7080668a767d6c4bbf534dac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cb97000ea2be1b7080668a767d6c4bbf534dac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25cb97000ea2be1b7080668a767d6c4bbf534dac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cb97000ea2be1b7080668a767d6c4bbf534dac/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64139803f1225dab26197a20314109d37fa87d5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64139803f1225dab26197a20314109d37fa87d5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64139803f1225dab26197a20314109d37fa87d5f"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 32,
      "deletions": 4
    },
    "files": [
      {
        "sha": "052ec74329b180742a915ed9b355d171183c1da9",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <locale>\n #include <mutex>\n #include <sstream>\n #include <set>\n@@ -213,6 +214,7 @@ const std::string& ListBlockFilterTypes()\n     static std::once_flag flag;\n     std::call_once(flag, []() {\n             std::stringstream ret;\n+            ret.imbue(std::locale::classic());\n             bool first = true;\n             for (auto entry : g_filter_types) {\n                 if (!first) ret << \", \";"
      },
      {
        "sha": "89c1658cb83b933fa18f8168423342508ee992fd",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <tinyformat.h>\n \n+#include <locale>\n \n /**\n  * Name of client reported in the 'version' message. Report the same name\n@@ -87,6 +88,7 @@ std::string FormatFullVersion()\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)\n {\n     std::ostringstream ss;\n+    ss.imbue(std::locale::classic());\n     ss << \"/\";\n     ss << name << \":\" << FormatVersion(nClientVersion);\n     if (!comments.empty())"
      },
      {
        "sha": "249df59d430f29d24ef0cb423849225334eb6913",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -8,6 +8,8 @@\n #include <hash.h>\n #include <tinyformat.h>\n \n+#include <locale>\n+\n uint256 CBlockHeader::GetHash() const\n {\n     return SerializeHash(*this);\n@@ -16,6 +18,7 @@ uint256 CBlockHeader::GetHash() const\n std::string CBlock::ToString() const\n {\n     std::stringstream s;\n+    s.imbue(std::locale::classic());\n     s << strprintf(\"CBlock(hash=%s, ver=0x%08x, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\\n\",\n         GetHash().ToString(),\n         nVersion,"
      },
      {
        "sha": "d3694aa274a8ee744c9a7bf5d18c1778ef0189d1",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -27,6 +27,7 @@\n #include <wallet/coincontrol.h>\n #include <wallet/wallet.h> // for CRecipient\n \n+#include <locale>\n #include <stdint.h>\n \n #include <QDebug>\n@@ -469,6 +470,7 @@ bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t\n     CTxDestination dest = DecodeDestination(sAddress);\n \n     std::stringstream ss;\n+    ss.imbue(std::locale::classic());\n     ss << nId;\n     std::string key = \"rr\" + ss.str(); // \"rr\" prefix = \"receive request\" in destdata\n "
      },
      {
        "sha": "980867e57dd37496e2bbb5dd52b8803cc90cbba1",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -9,10 +9,11 @@\n #include <boost/test/unit_test.hpp>\n \n #include <cmath>\n+#include <cstdint>\n #include <iomanip>\n #include <limits>\n+#include <locale>\n #include <sstream>\n-#include <stdint.h>\n #include <string>\n \n BOOST_FIXTURE_TEST_SUITE(arith_uint256_tests, BasicTestingSetup)\n@@ -57,6 +58,7 @@ const arith_uint256 HalfL = (OneL << 255);\n static std::string ArrayToString(const unsigned char A[], unsigned int width)\n {\n     std::stringstream Stream;\n+    Stream.imbue(std::locale::classic());\n     Stream << std::hex;\n     for (unsigned int i = 0; i < width; ++i)\n     {"
      },
      {
        "sha": "b0157d3d978c4771e86f54c26beccee35f7af012",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -50,6 +50,7 @@ const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n static std::string ArrayToString(const unsigned char A[], unsigned int width)\n {\n     std::stringstream Stream;\n+    Stream.imbue(std::locale::classic());\n     Stream << std::hex;\n     for (unsigned int i = 0; i < width; ++i)\n     {"
      },
      {
        "sha": "dac92854732a47ad85461109b983bd5a80f9c034",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -176,6 +176,7 @@ struct TestArgsManager : public ArgsManager\n     void ReadConfigString(const std::string str_config)\n     {\n         std::istringstream streamConfig(str_config);\n+        streamConfig.imbue(std::locale::classic());\n         {\n             LOCK(cs_args);\n             m_settings.ro_config.clear();\n@@ -952,6 +953,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n             conf += \"\\n\";\n         }\n         std::istringstream conf_stream(conf);\n+        conf_stream.imbue(std::locale::classic());\n         BOOST_CHECK(parser.ReadConfigStream(conf_stream, \"filepath\", error));\n         BOOST_CHECK_EQUAL(error, \"\");\n \n@@ -1089,6 +1091,7 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n             conf += \"\\n\";\n         }\n         std::istringstream conf_stream(conf);\n+        conf_stream.imbue(std::locale::classic());\n         BOOST_CHECK(parser.ReadConfigStream(conf_stream, \"filepath\", error));\n         BOOST_CHECK_EQUAL(error, \"\");\n "
      },
      {
        "sha": "3e4cc11bf50781bb652d13838e4621c98e7aaf81",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -143,6 +143,7 @@ namespace tfm = tinyformat;\n // Implementation details.\n #include <algorithm>\n #include <iostream>\n+#include <locale>    // Added for Bitcoin Core\n #include <sstream>\n #include <stdexcept> // Added for Bitcoin Core\n \n@@ -288,6 +289,7 @@ template<typename T>\n inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)\n {\n     std::ostringstream tmp;\n+    tmp.imbue(std::locale::classic()); // Added for Bitcoin Core\n     tmp << value;\n     std::string result = tmp.str();\n     out.write(result.c_str(), (std::min)(ntrunc, static_cast<int>(result.size())));\n@@ -912,6 +914,7 @@ inline void formatImpl(std::ostream& out, const char* fmt,\n             // it crudely by formatting into a temporary string stream and\n             // munging the resulting string.\n             std::ostringstream tmpStream;\n+            tmpStream.imbue(std::locale::classic()); // Added for Bitcoin Core\n             tmpStream.copyfmt(out);\n             tmpStream.setf(std::ios::showpos);\n             arg.format(tmpStream, fmt, fmtEnd, ntrunc);\n@@ -1070,6 +1073,7 @@ template<typename... Args>\n std::string format(const char* fmt, const Args&... args)\n {\n     std::ostringstream oss;\n+    oss.imbue(std::locale::classic()); // Added for Bitcoin Core\n     format(oss, fmt, args...);\n     return oss.str();\n }\n@@ -1099,6 +1103,7 @@ inline void format(std::ostream& out, const char* fmt)\n inline std::string format(const char* fmt)\n {\n     std::ostringstream oss;\n+    oss.imbue(std::locale::classic()); // Added for Bitcoin Core\n     format(oss, fmt);\n     return oss.str();\n }\n@@ -1126,6 +1131,7 @@ template<TINYFORMAT_ARGTYPES(n)>                                          \\\n std::string format(const char* fmt, TINYFORMAT_VARARGS(n))                \\\n {                                                                         \\\n     std::ostringstream oss;                                               \\\n+    oss.imbue(std::locale::classic()); /* Added for Bitcoin Core */       \\\n     format(oss, fmt, TINYFORMAT_PASSARGS(n));                             \\\n     return oss.str();                                                     \\\n }                                                                         \\\n@@ -1152,9 +1158,7 @@ TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMAT_FUNCS)\n template<typename... Args>\n std::string format(const std::string &fmt, const Args&... args)\n {\n-    std::ostringstream oss;\n-    format(oss, fmt.c_str(), args...);\n-    return oss.str();\n+    return format(fmt.c_str(), args...);\n }\n \n } // namespace tinyformat"
      },
      {
        "sha": "8f9d93712cd921c0902a2c5ee49a28b8eb9fec40",
        "filename": "src/util/bip32.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/util/bip32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/util/bip32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <locale>\n #include <sstream>\n #include <stdio.h>\n #include <tinyformat.h>\n@@ -12,6 +13,7 @@\n bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)\n {\n     std::stringstream ss(keypath_str);\n+    ss.imbue(std::locale::classic());\n     std::string item;\n     bool first = true;\n     while (std::getline(ss, item, '/')) {"
      },
      {
        "sha": "1b82bbfb7d40ecc332c0e89a89949d6264f3bdb4",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -13,6 +13,7 @@\n #include <cstring>\n #include <errno.h>\n #include <limits>\n+#include <locale>\n \n static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n \n@@ -369,6 +370,7 @@ bool ParseDouble(const std::string& str, double *out)\n std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n {\n     std::stringstream out;\n+    out.imbue(std::locale::classic());\n     size_t ptr = 0;\n     size_t indented = 0;\n     while (ptr < in.size())"
      },
      {
        "sha": "9de791e9257bb73233a130240f6efd0c910bc3cb",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -8,6 +8,7 @@\n #include <util/strencodings.h>\n #include <util/translation.h>\n \n+#include <locale>\n #include <stdint.h>\n \n #ifndef WIN32\n@@ -453,6 +454,7 @@ bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive,\n         flags |= DB_AGGRESSIVE;\n \n     std::stringstream strDump;\n+    strDump.imbue(std::locale::classic());\n \n     Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, &strDump, flags);"
      },
      {
        "sha": "d4a82cc11fb09fa941935d4bba97214a2a9a3d3b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25cb97000ea2be1b7080668a767d6c4bbf534dac/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "patch": "@@ -19,6 +19,7 @@\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n+#include <locale>\n #include <stdint.h>\n #include <tuple>\n \n@@ -32,6 +33,7 @@ using interfaces::FoundBlock;\n \n std::string static EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n+    ret.imbue(std::locale::classic());\n     for (const unsigned char c : str) {\n         if (c <= 32 || c >= 128 || c == '%') {\n             ret << '%' << HexStr(&c, &c + 1);\n@@ -44,6 +46,7 @@ std::string static EncodeDumpString(const std::string &str) {\n \n static std::string DecodeDumpString(const std::string &str) {\n     std::stringstream ret;\n+    ret.imbue(std::locale::classic());\n     for (unsigned int pos = 0; pos < str.length(); pos++) {\n         unsigned char c = str[pos];\n         if (c == '%' && pos+2 < str.length()) {"
      }
    ]
  },
  {
    "sha": "2aa0f6fa9a8dde15494ef298590193257054971d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWEwZjZmYTlhOGRkZTE1NDk0ZWYyOTg1OTAxOTMyNTcwNTQ5NzFk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-29T13:43:05Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-24T09:18:12Z"
      },
      "message": "util: Add LocaleIndependentStream<T>() and LocaleIndependentStringStream()",
      "tree": {
        "sha": "8351f67295247ff93df14d4ac82047434ebc43f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8351f67295247ff93df14d4ac82047434ebc43f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aa0f6fa9a8dde15494ef298590193257054971d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa0f6fa9a8dde15494ef298590193257054971d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa0f6fa9a8dde15494ef298590193257054971d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa0f6fa9a8dde15494ef298590193257054971d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25cb97000ea2be1b7080668a767d6c4bbf534dac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25cb97000ea2be1b7080668a767d6c4bbf534dac"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "da1a1abf0f64a955fd01dab752c7269c8c67dc68",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aa0f6fa9a8dde15494ef298590193257054971d/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aa0f6fa9a8dde15494ef298590193257054971d/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=2aa0f6fa9a8dde15494ef298590193257054971d",
        "patch": "@@ -54,6 +54,17 @@ NODISCARD inline bool ValidAsCString(const std::string& str) noexcept\n     return str.size() == strlen(str.c_str());\n }\n \n+template <typename T>\n+NODISCARD inline T LocaleIndependentStream() noexcept {\n+    T stream;\n+    stream.imbue(std::locale::classic());\n+    return stream;\n+}\n+\n+NODISCARD inline std::stringstream LocaleIndependentStringStream() noexcept {\n+    return LocaleIndependentStream<std::stringstream>();\n+}\n+\n /**\n  * Locale-independent version of std::to_string\n  */"
      }
    ]
  },
  {
    "sha": "55f5c2c79fb2843f553102f97eac6880e01bdde7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWY1YzJjNzlmYjI4NDNmNTUzMTAyZjk3ZWFjNjg4MGUwMWJkZGU3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-29T14:43:33Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-24T09:18:27Z"
      },
      "message": "util: Use LocaleIndependentStringStream() to get a std::stringstream with locale std::locale::classic()",
      "tree": {
        "sha": "18db01255ef67664e54dc7831251c8d42c6acbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18db01255ef67664e54dc7831251c8d42c6acbc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55f5c2c79fb2843f553102f97eac6880e01bdde7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f5c2c79fb2843f553102f97eac6880e01bdde7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55f5c2c79fb2843f553102f97eac6880e01bdde7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f5c2c79fb2843f553102f97eac6880e01bdde7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2aa0f6fa9a8dde15494ef298590193257054971d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aa0f6fa9a8dde15494ef298590193257054971d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aa0f6fa9a8dde15494ef298590193257054971d"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 38,
      "deletions": 54
    },
    "files": [
      {
        "sha": "978f17c78dae6644bccca0237bd97c2823439726",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <locale>\n #include <mutex>\n #include <sstream>\n #include <set>\n@@ -14,6 +13,7 @@\n #include <script/script.h>\n #include <streams.h>\n #include <util/golombrice.h>\n+#include <util/string.h>\n \n /// SerType used to serialize parameters in GCS filter encoding.\n static constexpr int GCS_SER_TYPE = SER_NETWORK;\n@@ -213,8 +213,7 @@ const std::string& ListBlockFilterTypes()\n \n     static std::once_flag flag;\n     std::call_once(flag, []() {\n-            std::stringstream ret;\n-            ret.imbue(std::locale::classic());\n+            std::stringstream ret = LocaleIndependentStringStream();\n             bool first = true;\n             for (auto entry : g_filter_types) {\n                 if (!first) ret << \", \";"
      },
      {
        "sha": "dcb4ee7f311505c0598830c57f3dcff75dc6080a",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -3,10 +3,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <clientversion.h>\n-\n #include <tinyformat.h>\n-\n-#include <locale>\n+#include <util/string.h>\n \n /**\n  * Name of client reported in the 'version' message. Report the same name\n@@ -87,8 +85,7 @@ std::string FormatFullVersion()\n  */\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)\n {\n-    std::ostringstream ss;\n-    ss.imbue(std::locale::classic());\n+    std::stringstream ss = LocaleIndependentStringStream();\n     ss << \"/\";\n     ss << name << \":\" << FormatVersion(nClientVersion);\n     if (!comments.empty())"
      },
      {
        "sha": "22c3d9ef9fe3e86f37962140f05348083e23c032",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -7,8 +7,10 @@\n \n #include <hash.h>\n #include <tinyformat.h>\n+#include <util/string.h>\n \n-#include <locale>\n+#include <sstream>\n+#include <string>\n \n uint256 CBlockHeader::GetHash() const\n {\n@@ -17,8 +19,7 @@ uint256 CBlockHeader::GetHash() const\n \n std::string CBlock::ToString() const\n {\n-    std::stringstream s;\n-    s.imbue(std::locale::classic());\n+    std::stringstream s = LocaleIndependentStringStream();\n     s << strprintf(\"CBlock(hash=%s, ver=0x%08x, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\\n\",\n         GetHash().ToString(),\n         nVersion,"
      },
      {
        "sha": "3a243ca854f3a0f9312191af244b6e5e52261241",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -23,12 +23,12 @@\n #include <key_io.h>\n #include <psbt.h>\n #include <ui_interface.h>\n+#include <util/string.h>\n #include <util/system.h> // for GetBoolArg\n #include <wallet/coincontrol.h>\n #include <wallet/wallet.h> // for CRecipient\n \n-#include <locale>\n-#include <stdint.h>\n+#include <cstdint>\n \n #include <QDebug>\n #include <QMessageBox>\n@@ -469,8 +469,7 @@ bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t\n {\n     CTxDestination dest = DecodeDestination(sAddress);\n \n-    std::stringstream ss;\n-    ss.imbue(std::locale::classic());\n+    std::stringstream ss = LocaleIndependentStringStream();\n     ss << nId;\n     std::string key = \"rr\" + ss.str(); // \"rr\" prefix = \"receive request\" in destdata\n "
      },
      {
        "sha": "288e2c880a83293a53934d0e43cd05d58489fdd6",
        "filename": "src/test/arith_uint256_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/test/arith_uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/test/arith_uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/arith_uint256_tests.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -5,6 +5,7 @@\n #include <arith_uint256.h>\n #include <test/util/setup_common.h>\n #include <uint256.h>\n+#include <util/string.h>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -57,8 +58,7 @@ const arith_uint256 MaxL = arith_uint256V(std::vector<unsigned char>(MaxArray,Ma\n const arith_uint256 HalfL = (OneL << 255);\n static std::string ArrayToString(const unsigned char A[], unsigned int width)\n {\n-    std::stringstream Stream;\n-    Stream.imbue(std::locale::classic());\n+    std::stringstream Stream = LocaleIndependentStringStream();\n     Stream << std::hex;\n     for (unsigned int i = 0; i < width; ++i)\n     {"
      },
      {
        "sha": "ad1a599dfb77311d7a7f4f3cf93bfc5e57da09e2",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -6,6 +6,7 @@\n #include <streams.h>\n #include <test/util/setup_common.h>\n #include <uint256.h>\n+#include <util/string.h>\n #include <version.h>\n \n #include <boost/test/unit_test.hpp>\n@@ -49,8 +50,7 @@ const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));\n \n static std::string ArrayToString(const unsigned char A[], unsigned int width)\n {\n-    std::stringstream Stream;\n-    Stream.imbue(std::locale::classic());\n+    std::stringstream Stream = LocaleIndependentStringStream();\n     Stream << std::hex;\n     for (unsigned int i = 0; i < width; ++i)\n     {"
      },
      {
        "sha": "631d218c72c6958bcc793f918bcdf5f0c2825fd0",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -175,8 +175,8 @@ struct TestArgsManager : public ArgsManager\n     TestArgsManager() { m_network_only_args.clear(); }\n     void ReadConfigString(const std::string str_config)\n     {\n-        std::istringstream streamConfig(str_config);\n-        streamConfig.imbue(std::locale::classic());\n+        std::stringstream streamConfig = LocaleIndependentStringStream();\n+        streamConfig << str_config;\n         {\n             LOCK(cs_args);\n             m_settings.ro_config.clear();\n@@ -952,8 +952,8 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n             conf += conf_val;\n             conf += \"\\n\";\n         }\n-        std::istringstream conf_stream(conf);\n-        conf_stream.imbue(std::locale::classic());\n+        std::stringstream conf_stream = LocaleIndependentStringStream();\n+        conf_stream << conf;\n         BOOST_CHECK(parser.ReadConfigStream(conf_stream, \"filepath\", error));\n         BOOST_CHECK_EQUAL(error, \"\");\n \n@@ -1090,8 +1090,8 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n             conf += argstr + 1;\n             conf += \"\\n\";\n         }\n-        std::istringstream conf_stream(conf);\n-        conf_stream.imbue(std::locale::classic());\n+        std::stringstream conf_stream = LocaleIndependentStringStream();\n+        conf_stream << conf;\n         BOOST_CHECK(parser.ReadConfigStream(conf_stream, \"filepath\", error));\n         BOOST_CHECK_EQUAL(error, \"\");\n "
      },
      {
        "sha": "2518047e2aa45804f1ed715ae9b96388afe4b22d",
        "filename": "src/util/bip32.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/util/bip32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/util/bip32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -2,18 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <locale>\n #include <sstream>\n #include <stdio.h>\n #include <tinyformat.h>\n #include <util/bip32.h>\n #include <util/strencodings.h>\n-\n+#include <util/string.h>\n \n bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)\n {\n-    std::stringstream ss(keypath_str);\n-    ss.imbue(std::locale::classic());\n+    std::stringstream ss = LocaleIndependentStringStream();\n+    ss << keypath_str;\n     std::string item;\n     bool first = true;\n     while (std::getline(ss, item, '/')) {"
      },
      {
        "sha": "5c2c8dab5bb8577ea2cdb8780ff95cf587f2bd03",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -9,11 +9,10 @@\n #include <tinyformat.h>\n \n #include <algorithm>\n+#include <cerrno>\n #include <cstdlib>\n #include <cstring>\n-#include <errno.h>\n #include <limits>\n-#include <locale>\n \n static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n \n@@ -359,8 +358,8 @@ bool ParseDouble(const std::string& str, double *out)\n         return false;\n     if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n         return false;\n-    std::istringstream text(str);\n-    text.imbue(std::locale::classic());\n+    std::stringstream text = LocaleIndependentStringStream();\n+    text << str;\n     double result;\n     text >> result;\n     if(out) *out = result;\n@@ -369,8 +368,7 @@ bool ParseDouble(const std::string& str, double *out)\n \n std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n {\n-    std::stringstream out;\n-    out.imbue(std::locale::classic());\n+    std::stringstream out = LocaleIndependentStringStream();\n     size_t ptr = 0;\n     size_t indented = 0;\n     while (ptr < in.size())"
      },
      {
        "sha": "a17ebea33977b63127d50d38bdff2cdd05986bf0",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -54,15 +54,10 @@ NODISCARD inline bool ValidAsCString(const std::string& str) noexcept\n     return str.size() == strlen(str.c_str());\n }\n \n-template <typename T>\n-NODISCARD inline T LocaleIndependentStream() noexcept {\n-    T stream;\n-    stream.imbue(std::locale::classic());\n-    return stream;\n-}\n-\n NODISCARD inline std::stringstream LocaleIndependentStringStream() noexcept {\n-    return LocaleIndependentStream<std::stringstream>();\n+    std::stringstream ss;\n+    ss.imbue(std::locale::classic());\n+    return ss;\n }\n \n /**\n@@ -71,8 +66,7 @@ NODISCARD inline std::stringstream LocaleIndependentStringStream() noexcept {\n template <typename T>\n std::string ToString(const T& t)\n {\n-    std::ostringstream oss;\n-    oss.imbue(std::locale::classic());\n+    std::stringstream oss = LocaleIndependentStringStream();\n     oss << t;\n     return oss.str();\n }"
      },
      {
        "sha": "ecb264aa89703f56f71dab68bb7215514cf3a653",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -6,10 +6,10 @@\n #include <wallet/db.h>\n \n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/translation.h>\n \n-#include <locale>\n-#include <stdint.h>\n+#include <cstdint>\n \n #ifndef WIN32\n #include <sys/stat.h>\n@@ -453,8 +453,7 @@ bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive,\n     if (fAggressive)\n         flags |= DB_AGGRESSIVE;\n \n-    std::stringstream strDump;\n-    strDump.imbue(std::locale::classic());\n+    std::stringstream strDump = LocaleIndependentStringStream();\n \n     Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, &strDump, flags);"
      },
      {
        "sha": "fa0228af7232a89a9f9dec9b724499bc51273863",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f5c2c79fb2843f553102f97eac6880e01bdde7/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=55f5c2c79fb2843f553102f97eac6880e01bdde7",
        "patch": "@@ -13,13 +13,13 @@\n #include <script/standard.h>\n #include <sync.h>\n #include <util/bip32.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <util/translation.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n-#include <locale>\n #include <stdint.h>\n #include <tuple>\n \n@@ -32,8 +32,7 @@\n using interfaces::FoundBlock;\n \n std::string static EncodeDumpString(const std::string &str) {\n-    std::stringstream ret;\n-    ret.imbue(std::locale::classic());\n+    std::stringstream ret = LocaleIndependentStringStream();\n     for (const unsigned char c : str) {\n         if (c <= 32 || c >= 128 || c == '%') {\n             ret << '%' << HexStr(&c, &c + 1);\n@@ -45,8 +44,7 @@ std::string static EncodeDumpString(const std::string &str) {\n }\n \n static std::string DecodeDumpString(const std::string &str) {\n-    std::stringstream ret;\n-    ret.imbue(std::locale::classic());\n+    std::stringstream ret = LocaleIndependentStringStream();\n     for (unsigned int pos = 0; pos < str.length(); pos++) {\n         unsigned char c = str[pos];\n         if (c == '%' && pos+2 < str.length()) {"
      }
    ]
  }
]