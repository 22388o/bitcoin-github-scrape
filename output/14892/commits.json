[
  {
    "sha": "0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWU0MmExMGVjNGEzYmY3MjU4Njk1ZWVhZTZhMTljZDY2ZDc4OGNm",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-12-07T10:26:10Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-12-07T11:13:51Z"
      },
      "message": "test: Extract BuildCrediting/SpendingTransaction to shared factories folder\n\nThis is a first step toward a library of common factory functions for test and\nbench purposes.",
      "tree": {
        "sha": "ec172b828432f1d0972dc8918db2153ea46352ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec172b828432f1d0972dc8918db2153ea46352ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJcClXxAAoJEG7l83hfeLNFFTMIAJG5+UyBnipPqeOpS8d+sIvm\ndooOv8PJ9/uTJEEGcdlm0g73fGXdptUNToQrlpUuM12VNW7oKJgmVePV9w7Ktid8\n/h5lYJeixuJforRPqZBaFyk0HJHKEy7o6Qnxz93Io+viwvakVLKigntrbuC3bW5h\nSLznls4uYjpIS1Kh1I7jqHf8WAxKFwa2oVUNs0sKETUJhvIMpJa8vxYISqrVShDX\nPD+AVTljHkunvcW9HjOHVrewO6ffsbjp40JWF/xZTN5pQqUaIR9JEi87qeu1Skrd\nBjT7MFUa+bll6rnVk79v+DE1eUT1DS30pmLhXbz7TmHzdrq2+gyV+0LbQbEBiOQ=\n=eKxF\n-----END PGP SIGNATURE-----",
        "payload": "tree ec172b828432f1d0972dc8918db2153ea46352ac\nparent f8456256c8cb68562c6392c6f715b64fcdfa3fe7\nauthor Ben Woosley <ben.woosley@gmail.com> 1544178370 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1544181231 -0800\n\ntest: Extract BuildCrediting/SpendingTransaction to shared factories folder\n\nThis is a first step toward a library of common factory functions for test and\nbench purposes.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8456256c8cb68562c6392c6f715b64fcdfa3fe7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8456256c8cb68562c6392c6f715b64fcdfa3fe7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8456256c8cb68562c6392c6f715b64fcdfa3fe7"
      }
    ],
    "stats": {
      "total": 210,
      "additions": 107,
      "deletions": 103
    },
    "files": [
      {
        "sha": "1d78334f9711fb47648ac08ec56c9bb0523997d6",
        "filename": "build_msvc/testconsensus/testconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 17,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/build_msvc/testconsensus/testconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/build_msvc/testconsensus/testconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.cpp?ref=0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
        "patch": "@@ -7,23 +7,7 @@\n #include <..\\src\\streams.h>\n #include <..\\src\\version.h>\n \n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, int nValue = 0)\n-{\n-    CMutableTransaction txSpend;\n-    txSpend.nVersion = 1;\n-    txSpend.nLockTime = 0;\n-    txSpend.vin.resize(1);\n-    txSpend.vout.resize(1);\n-    txSpend.vin[0].scriptWitness = scriptWitness;\n-    txSpend.vin[0].prevout.hash = uint256();\n-    txSpend.vin[0].prevout.n = 0;\n-    txSpend.vin[0].scriptSig = scriptSig;\n-    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n-    txSpend.vout[0].scriptPubKey = CScript();\n-    txSpend.vout[0].nValue = nValue;\n-\n-    return txSpend;\n-}\n+#include <..\\src\\factories\\transactions.h>\n \n int main()\n {"
      },
      {
        "sha": "d7d3b6f77c67d8c372958535568bc06be56a1983",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
        "patch": "@@ -30,6 +30,7 @@ LIBBITCOIN_CONSENSUS=libbitcoin_consensus.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO_BASE=crypto/libbitcoin_crypto_base.a\n+LIBBITCOIN_FACTORIES=factories/libbitcoin_factories.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n \n@@ -70,7 +71,8 @@ EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_ZMQ)\n+  $(LIBBITCOIN_ZMQ) \\\n+  $(LIBBITCOIN_FACTORIES)\n \n lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n \n@@ -445,6 +447,14 @@ libbitcoin_util_a_SOURCES += compat/glibc_compat.cpp\n AM_LDFLAGS += $(COMPAT_LDFLAGS)\n endif\n \n+factories_libbitcoin_factories_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+factories_libbitcoin_factories_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+factories_libbitcoin_factories_a_SOURCES = \\\n+  factories/transactions.cpp \\\n+  $(BITCOIN_CORE_H)\n+factories_libbitcoin_factories_a_LIBADD = \\\n+  $(LIBBITCOIN_CONSENSUS)\n+\n # cli: shared between bitcoin-cli and bitcoin-qt\n libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "2318156812f55b6adca9df6d8b70a29cdb928579",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
        "patch": "@@ -34,7 +34,7 @@ bench_bench_bitcoin_SOURCES = \\\n \n nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n \n-bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n+bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/ -I$(builddir)/factories/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_WALLET) \\\n@@ -43,6 +43,7 @@ bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_FACTORIES) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\"
      },
      {
        "sha": "371a32de6712913189deb2af62d45e24d68c0970",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
        "patch": "@@ -122,13 +122,13 @@ BITCOIN_TEST_SUITE += \\\n endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TEST_SUITE) $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n-test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS)\n+test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS) -I$(builddir)/factories/\n test_test_bitcoin_LDADD =\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif\n \n-test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_FACTORIES) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \\\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n "
      },
      {
        "sha": "a0f90e8e26730f3b8d9c384bac70135d4f57d96c",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 36,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
        "patch": "@@ -11,44 +11,10 @@\n #include <script/sign.h>\n #include <script/standard.h>\n #include <streams.h>\n+#include <factories/transactions.h>\n \n #include <array>\n \n-// FIXME: Dedup with BuildCreditingTransaction in test/script_tests.cpp.\n-static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n-{\n-    CMutableTransaction txCredit;\n-    txCredit.nVersion = 1;\n-    txCredit.nLockTime = 0;\n-    txCredit.vin.resize(1);\n-    txCredit.vout.resize(1);\n-    txCredit.vin[0].prevout.SetNull();\n-    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n-    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n-    txCredit.vout[0].scriptPubKey = scriptPubKey;\n-    txCredit.vout[0].nValue = 1;\n-\n-    return txCredit;\n-}\n-\n-// FIXME: Dedup with BuildSpendingTransaction in test/script_tests.cpp.\n-static CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n-{\n-    CMutableTransaction txSpend;\n-    txSpend.nVersion = 1;\n-    txSpend.nLockTime = 0;\n-    txSpend.vin.resize(1);\n-    txSpend.vout.resize(1);\n-    txSpend.vin[0].prevout.hash = txCredit.GetHash();\n-    txSpend.vin[0].prevout.n = 0;\n-    txSpend.vin[0].scriptSig = scriptSig;\n-    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n-    txSpend.vout[0].scriptPubKey = CScript();\n-    txSpend.vout[0].nValue = txCredit.vout[0].nValue;\n-\n-    return txSpend;\n-}\n-\n // Microbenchmark for verification of a basic P2WPKH script. Can be easily\n // modified to measure performance of other types of scripts.\n static void VerifyScriptBench(benchmark::State& state)\n@@ -72,7 +38,7 @@ static void VerifyScriptBench(benchmark::State& state)\n     CScript scriptPubKey = CScript() << witnessversion << ToByteVector(pubkeyHash);\n     CScript scriptSig;\n     CScript witScriptPubkey = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkeyHash) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    const CMutableTransaction& txCredit = BuildCreditingTransaction(scriptPubKey);\n+    const CMutableTransaction& txCredit = BuildCreditingTransaction(scriptPubKey, 1);\n     CMutableTransaction txSpend = BuildSpendingTransaction(scriptSig, txCredit);\n     CScriptWitness& witness = txSpend.vin[0].scriptWitness;\n     witness.stack.emplace_back();"
      },
      {
        "sha": "dbdc84512e195a40408ddbcfafd2cdcab3b3c959",
        "filename": "src/factories/transactions.cpp",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/factories/transactions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/factories/transactions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/factories/transactions.cpp?ref=0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
        "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <factories/transactions.h>\n+\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, int nValue, const uint256& prevout_hash)\n+{\n+    CMutableTransaction txSpend;\n+    txSpend.nVersion = 1;\n+    txSpend.nLockTime = 0;\n+    txSpend.vin.resize(1);\n+    txSpend.vout.resize(1);\n+    txSpend.vin[0].prevout.hash = prevout_hash;\n+    txSpend.vin[0].prevout.n = 0;\n+    txSpend.vin[0].scriptSig = scriptSig;\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txSpend.vout[0].scriptPubKey = CScript();\n+    txSpend.vout[0].nValue = nValue;\n+\n+    return txSpend;\n+}\n+\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, int nValue, const uint256& prevout_hash)\n+{\n+    CMutableTransaction txSpend{BuildSpendingTransaction(scriptSig, nValue, prevout_hash)};\n+    txSpend.vin[0].scriptWitness = scriptWitness;\n+\n+    return txSpend;\n+}\n+\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n+{\n+    return BuildSpendingTransaction(scriptSig, txCredit.vout[0].nValue, txCredit.GetHash());\n+}\n+\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CMutableTransaction& txCredit)\n+{\n+    CMutableTransaction txSpend{BuildSpendingTransaction(scriptSig, txCredit)};\n+    txSpend.vin[0].scriptWitness = scriptWitness;\n+\n+    return txSpend;\n+}\n+\n+CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue)\n+{\n+    CMutableTransaction txCredit;\n+    txCredit.nVersion = 1;\n+    txCredit.nLockTime = 0;\n+    txCredit.vin.resize(1);\n+    txCredit.vout.resize(1);\n+    txCredit.vin[0].prevout.SetNull();\n+    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txCredit.vout[0].scriptPubKey = scriptPubKey;\n+    txCredit.vout[0].nValue = nValue;\n+\n+    return txCredit;\n+}"
      },
      {
        "sha": "2cf19c649d183fa064091fe40525ff5759c5c93b",
        "filename": "src/factories/transactions.h",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/factories/transactions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/factories/transactions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/factories/transactions.h?ref=0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
        "patch": "@@ -0,0 +1,16 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_FACTORIES_TRANSACTIONS_H\n+#define BITCOIN_FACTORIES_TRANSACTIONS_H\n+\n+#include <primitives/transaction.h>\n+\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, int nValue, const uint256& prevout_hash = uint256());\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, int nValue, const uint256& prevout_hash = uint256());\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit);\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CMutableTransaction& txCredit);\n+\n+CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue);\n+\n+#endif"
      },
      {
        "sha": "22d47b7a41dd42b195dfe33b1c41645a77aa1515",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 46,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ee42a10ec4a3bf7258695eeae6a19cd66d788cf/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=0ee42a10ec4a3bf7258695eeae6a19cd66d788cf",
        "patch": "@@ -14,6 +14,7 @@\n #include <util/strencodings.h>\n #include <test/test_bitcoin.h>\n #include <rpc/server.h>\n+#include <factories/transactions.h>\n \n #if defined(HAVE_CONSENSUS_LIB)\n #include <script/bitcoinconsensus.h>\n@@ -121,40 +122,6 @@ static ScriptError_t ParseScriptError(const std::string &name)\n \n BOOST_FIXTURE_TEST_SUITE(script_tests, BasicTestingSetup)\n \n-CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue = 0)\n-{\n-    CMutableTransaction txCredit;\n-    txCredit.nVersion = 1;\n-    txCredit.nLockTime = 0;\n-    txCredit.vin.resize(1);\n-    txCredit.vout.resize(1);\n-    txCredit.vin[0].prevout.SetNull();\n-    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n-    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n-    txCredit.vout[0].scriptPubKey = scriptPubKey;\n-    txCredit.vout[0].nValue = nValue;\n-\n-    return txCredit;\n-}\n-\n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CTransaction& txCredit)\n-{\n-    CMutableTransaction txSpend;\n-    txSpend.nVersion = 1;\n-    txSpend.nLockTime = 0;\n-    txSpend.vin.resize(1);\n-    txSpend.vout.resize(1);\n-    txSpend.vin[0].scriptWitness = scriptWitness;\n-    txSpend.vin[0].prevout.hash = txCredit.GetHash();\n-    txSpend.vin[0].prevout.n = 0;\n-    txSpend.vin[0].scriptSig = scriptSig;\n-    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n-    txSpend.vout[0].scriptPubKey = CScript();\n-    txSpend.vout[0].nValue = txCredit.vout[0].nValue;\n-\n-    return txSpend;\n-}\n-\n void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScriptWitness& scriptWitness, int flags, const std::string& message, int scriptError, CAmount nValue = 0)\n {\n     bool expect = (scriptError == SCRIPT_ERR_OK);\n@@ -163,7 +130,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n     ScriptError err;\n-    const CTransaction txCredit{BuildCreditingTransaction(scriptPubKey, nValue)};\n+    const CMutableTransaction txCredit{BuildCreditingTransaction(scriptPubKey, nValue)};\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, scriptWitness, txCredit);\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n@@ -328,8 +295,9 @@ class TestBuilder\n             redeemscript = scriptPubKey;\n             scriptPubKey = CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemscript)) << OP_EQUAL;\n         }\n-        creditTx = MakeTransactionRef(BuildCreditingTransaction(scriptPubKey, nValue));\n-        spendTx = BuildSpendingTransaction(CScript(), CScriptWitness(), *creditTx);\n+        CMutableTransaction creditMutTx = BuildCreditingTransaction(scriptPubKey, nValue);\n+        spendTx = BuildSpendingTransaction(CScript(), CScriptWitness(), creditMutTx);\n+        creditTx = MakeTransactionRef(creditMutTx);\n     }\n \n     TestBuilder& ScriptError(ScriptError_t err)\n@@ -1075,7 +1043,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CScript scriptPubKey12;\n     scriptPubKey12 << OP_1 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n \n-    const CTransaction txFrom12{BuildCreditingTransaction(scriptPubKey12)};\n+    const CMutableTransaction txFrom12{BuildCreditingTransaction(scriptPubKey12, 0)};\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n@@ -1106,7 +1074,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     CScript scriptPubKey23;\n     scriptPubKey23 << OP_2 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << ToByteVector(key3.GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n \n-    const CTransaction txFrom23{BuildCreditingTransaction(scriptPubKey23)};\n+    const CMutableTransaction txFrom23{BuildCreditingTransaction(scriptPubKey23, 0)};\n     CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom23);\n \n     std::vector<CKey> keys;\n@@ -1188,7 +1156,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n         keystore.AddKey(key);\n     }\n \n-    CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n+    CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()), 0);\n     CMutableTransaction txTo = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom);\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     SignatureData scriptSig;\n@@ -1511,7 +1479,7 @@ BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_returns_true)\n     CScriptWitness wit;\n \n     scriptPubKey << OP_1;\n-    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CMutableTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n     CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -1534,7 +1502,7 @@ BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_index_err)\n     CScriptWitness wit;\n \n     scriptPubKey << OP_EQUAL;\n-    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CMutableTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n     CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -1557,7 +1525,7 @@ BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_size)\n     CScriptWitness wit;\n \n     scriptPubKey << OP_EQUAL;\n-    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CMutableTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n     CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -1580,7 +1548,7 @@ BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_tx_serialization)\n     CScriptWitness wit;\n \n     scriptPubKey << OP_EQUAL;\n-    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CMutableTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n     CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -1603,7 +1571,7 @@ BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_amount_required_err)\n     CScriptWitness wit;\n \n     scriptPubKey << OP_EQUAL;\n-    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CMutableTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n     CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -1626,7 +1594,7 @@ BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_invalid_flags)\n     CScriptWitness wit;\n \n     scriptPubKey << OP_EQUAL;\n-    CTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n+    CMutableTransaction creditTx = BuildCreditingTransaction(scriptPubKey, 1);\n     CTransaction spendTx = BuildSpendingTransaction(scriptSig, wit, creditTx);\n \n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);"
      }
    ]
  }
]