[
  {
    "sha": "6170ec5d3ac2bc206068b270e5722a7ecd3a8f26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTcwZWM1ZDNhYzJiYzIwNjA2OGIyNzBlNTcyMmE3ZWNkM2E4ZjI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-03-07T23:30:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-08-07T00:22:53Z"
      },
      "message": "Do not query all DNS seed at once\n\nInstead, when necessary, query 3. If that leads to a sufficient number\nof connects, stop. If not, query 3 more, and so on.",
      "tree": {
        "sha": "0bbd839910da4190056df9a1c1c968e4f61ce028",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bbd839910da4190056df9a1c1c968e4f61ce028"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6170ec5d3ac2bc206068b270e5722a7ecd3a8f26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6170ec5d3ac2bc206068b270e5722a7ecd3a8f26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6170ec5d3ac2bc206068b270e5722a7ecd3a8f26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6170ec5d3ac2bc206068b270e5722a7ecd3a8f26/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 34,
      "deletions": 27
    },
    "files": [
      {
        "sha": "35a85fad7a9a448bdecc2901a69fc814f0f7434a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 27,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6170ec5d3ac2bc206068b270e5722a7ecd3a8f26/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6170ec5d3ac2bc206068b270e5722a7ecd3a8f26/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6170ec5d3ac2bc206068b270e5722a7ecd3a8f26",
        "patch": "@@ -49,6 +49,9 @@ static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\"\n // Dump addresses to peers.dat every 15 minutes (900s)\n static constexpr int DUMP_PEERS_INTERVAL = 15 * 60;\n \n+/** Number of DNS seeds to query when the number of connections is low. */\n+static constexpr int DNSSEEDS_TO_QUERY_AT_ONCE = 3;\n+\n // We add a random period time (0 to 1 seconds) to feeler connections to prevent synchronization.\n #define FEELER_SLEEP_WINDOW 1\n \n@@ -1508,35 +1511,41 @@ void StopMapPort()\n \n void CConnman::ThreadDNSAddressSeed()\n {\n-    // goal: only query DNS seeds if address need is acute\n-    // Avoiding DNS seeds when we don't need them improves user privacy by\n-    //  creating fewer identifying DNS requests, reduces trust by giving seeds\n-    //  less influence on the network topology, and reduces traffic to the seeds.\n-    if ((addrman.size() > 0) &&\n-        (!gArgs.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n-        if (!interruptNet.sleep_for(std::chrono::seconds(11)))\n-            return;\n+    FastRandomContext rng;\n+    std::vector<std::string> seeds = Params().DNSSeeds();\n+    Shuffle(seeds.begin(), seeds.end(), rng);\n+    int seeds_right_now = 0; // Number of seeds left before testing if we have enough connections\n+    int found = 0;\n \n-        LOCK(cs_vNodes);\n-        int nRelevant = 0;\n-        for (const CNode* pnode : vNodes) {\n-            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n-        }\n-        if (nRelevant >= 2) {\n-            LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n-            return;\n-        }\n+    if (gArgs.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED)) {\n+        // When -forcednsseed is provided, query all.\n+        seeds_right_now = seeds.size();\n     }\n \n-    const std::vector<std::string> &vSeeds = Params().DNSSeeds();\n-    int found = 0;\n+    for (const std::string& seed : seeds) {\n+        // goal: only query DNS seed if address need is acute\n+        // Avoiding DNS seeds when we don't need them improves user privacy by\n+        // creating fewer identifying DNS requests, reduces trust by giving seeds\n+        // less influence on the network topology, and reduces traffic to the seeds.\n+        if (addrman.size() > 0 && seeds_right_now == 0) {\n+            if (!interruptNet.sleep_for(std::chrono::seconds(11))) return;\n \n-    LogPrintf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n+            LOCK(cs_vNodes);\n+            int nRelevant = 0;\n+            for (const CNode* pnode : vNodes) {\n+                nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+            }\n+            if (nRelevant >= 2) {\n+                LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n+                return;\n+            }\n+            seeds_right_now += DNSSEEDS_TO_QUERY_AT_ONCE;\n+        }\n \n-    for (const std::string &seed : vSeeds) {\n         if (interruptNet) {\n             return;\n         }\n+        LogPrintf(\"Loading addresses from DNS seed %s\\n\", seed);\n         if (HaveNameProxy()) {\n             AddOneShot(seed);\n         } else {\n@@ -1549,13 +1558,11 @@ void CConnman::ThreadDNSAddressSeed()\n                 continue;\n             }\n             unsigned int nMaxIPs = 256; // Limits number of IPs learned from a DNS seed\n-            if (LookupHost(host.c_str(), vIPs, nMaxIPs, true))\n-            {\n-                for (const CNetAddr& ip : vIPs)\n-                {\n+            if (LookupHost(host.c_str(), vIPs, nMaxIPs, true)) {\n+                for (const CNetAddr& ip : vIPs) {\n                     int nOneDay = 24*3600;\n                     CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n-                    addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old\n+                    addr.nTime = GetTime() - 3*nOneDay - rng.randrange(4*nOneDay); // use a random age between 3 and 7 days old\n                     vAdd.push_back(addr);\n                     found++;\n                 }\n@@ -1566,8 +1573,8 @@ void CConnman::ThreadDNSAddressSeed()\n                 AddOneShot(seed);\n             }\n         }\n+        --seeds_right_now;\n     }\n-\n     LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n }\n "
      }
    ]
  }
]