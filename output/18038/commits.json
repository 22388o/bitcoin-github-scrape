[
  {
    "sha": "89eeb4a3335f8e871cc3f5286af4546dff66172a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWVlYjRhMzMzNWY4ZTg3MWNjM2Y1Mjg2YWY0NTQ2ZGZmNjYxNzJh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-29T16:12:59Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "message": "[mempool] Track \"unbroadcast\" transactions\n\n- Mempool tracks locally submitted transactions (wallet or rpc)\n- Transactions are removed from set when the node receives a GETDATA request\n  from a peer, or if the transaction is removed from the mempool.",
      "tree": {
        "sha": "6705d43114fbd4a7d308c10a9f3ef27c0556c81f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6705d43114fbd4a7d308c10a9f3ef27c0556c81f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89eeb4a3335f8e871cc3f5286af4546dff66172a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89eeb4a3335f8e871cc3f5286af4546dff66172a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89eeb4a3335f8e871cc3f5286af4546dff66172a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89eeb4a3335f8e871cc3f5286af4546dff66172a/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23991ee53af21c2fdc28f6e8e002dc1455c71098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23991ee53af21c2fdc28f6e8e002dc1455c71098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23991ee53af21c2fdc28f6e8e002dc1455c71098"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 41,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4756d35fe5cad97643c121ead88ebd5fb27c3737",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89eeb4a3335f8e871cc3f5286af4546dff66172a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89eeb4a3335f8e871cc3f5286af4546dff66172a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=89eeb4a3335f8e871cc3f5286af4546dff66172a",
        "patch": "@@ -1556,7 +1556,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n-void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnman* connman, const CTxMemPool& mempool, const std::atomic<bool>& interruptMsgProc) LOCKS_EXCLUDED(cs_main)\n+void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnman* connman, CTxMemPool& mempool, const std::atomic<bool>& interruptMsgProc) LOCKS_EXCLUDED(cs_main)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -1605,7 +1605,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n                     push = true;\n                 }\n             }\n-            if (!push) {\n+\n+            if (push) {\n+                // We interpret fulfilling a GETDATA for a transaction as a\n+                // successful initial broadcast and remove it from our\n+                // unbroadcast set.\n+                mempool.RemoveUnbroadcastTx(inv.hash);\n+            } else {\n                 vNotFound.push_back(inv);\n             }\n         }"
      },
      {
        "sha": "3841d8687db45018d0c3ef4cf6b77e144229b84c",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89eeb4a3335f8e871cc3f5286af4546dff66172a/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89eeb4a3335f8e871cc3f5286af4546dff66172a/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=89eeb4a3335f8e871cc3f5286af4546dff66172a",
        "patch": "@@ -78,6 +78,10 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool tracks locally submitted transactions to make a\n+        // best-effort of initial broadcast\n+        node.mempool->AddUnbroadcastTx(hashTx);\n+\n         RelayTransaction(hashTx, *node.connman);\n     }\n "
      },
      {
        "sha": "a6701d0f8c9391be5c641c54a70be9fb4a1c4f3a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89eeb4a3335f8e871cc3f5286af4546dff66172a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89eeb4a3335f8e871cc3f5286af4546dff66172a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=89eeb4a3335f8e871cc3f5286af4546dff66172a",
        "patch": "@@ -417,6 +417,8 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     for (const CTxIn& txin : it->GetTx().vin)\n         mapNextTx.erase(txin.prevout);\n \n+    RemoveUnbroadcastTx(hash, true /* add logging because unchecked */ );\n+\n     if (vTxHashes.size() > 1) {\n         vTxHashes[it->vTxHashesIdx] = std::move(vTxHashes.back());\n         vTxHashes[it->vTxHashesIdx].second->vTxHashesIdx = it->vTxHashesIdx;\n@@ -919,6 +921,15 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 12 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n+void CTxMemPool::RemoveUnbroadcastTx(const uint256& txid, const bool unchecked) {\n+    LOCK(cs);\n+\n+    if (m_unbroadcast_txids.erase(txid))\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"Removed %i from set of unbroadcast txns%s\\n\", txid.GetHex(), (unchecked ? \" before confirmation that txn was sent out\" : \"\"));\n+    }\n+}\n+\n void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);"
      },
      {
        "sha": "4bee78b8d677a1ac50465814860cd5785ffcc014",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89eeb4a3335f8e871cc3f5286af4546dff66172a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89eeb4a3335f8e871cc3f5286af4546dff66172a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=89eeb4a3335f8e871cc3f5286af4546dff66172a",
        "patch": "@@ -549,6 +549,9 @@ class CTxMemPool\n \n     std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** track locally submitted transactions to periodically retry initial broadcast */\n+    std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);\n+\n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs);\n     std::map<uint256, CAmount> mapDeltas;\n@@ -698,6 +701,21 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n+    /** Adds a transaction to the unbroadcast set */\n+    void AddUnbroadcastTx(const uint256& txid) {\n+        LOCK(cs);\n+        m_unbroadcast_txids.insert(txid);\n+    }\n+\n+    /** Removes a transaction from the unbroadcast set */\n+    void RemoveUnbroadcastTx(const uint256& txid, const bool unchecked = false);\n+\n+    /** Returns transactions in unbroadcast set */\n+    const std::set<uint256> GetUnbroadcastTxs() const {\n+        LOCK(cs);\n+        return m_unbroadcast_txids;\n+    }\n+\n private:\n     /** UpdateForDescendants is used by UpdateTransactionsFromBlock to update\n      *  the descendants for a single transaction that has been added to the"
      }
    ]
  },
  {
    "sha": "7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTkzZWVjY2UzYmM1YTFiN2JiMDI4NGUwNmY5ZTJlNjk0NTRmNWJh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T01:35:07Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "message": "[util] Add method that returns random time in milliseconds",
      "tree": {
        "sha": "8121fa55daa531931d75252b63075f423b445af8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8121fa55daa531931d75252b63075f423b445af8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89eeb4a3335f8e871cc3f5286af4546dff66172a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89eeb4a3335f8e871cc3f5286af4546dff66172a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89eeb4a3335f8e871cc3f5286af4546dff66172a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f1032feaaf2b90135783e26576f4c7ebdbfe82b4",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
        "patch": "@@ -592,6 +592,11 @@ std::chrono::microseconds GetRandMicros(std::chrono::microseconds duration_max)\n     return std::chrono::microseconds{GetRand(duration_max.count())};\n }\n \n+std::chrono::milliseconds GetRandMillis(std::chrono::milliseconds duration_max) noexcept\n+{\n+    return std::chrono::milliseconds{GetRand(duration_max.count())};\n+}\n+\n int GetRandInt(int nMax) noexcept\n {\n     return GetRand(nMax);"
      },
      {
        "sha": "46e3ecc34c6bf51dd63201b0b431d0324ebfb37e",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
        "patch": "@@ -69,6 +69,7 @@\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n uint64_t GetRand(uint64_t nMax) noexcept;\n std::chrono::microseconds GetRandMicros(std::chrono::microseconds duration_max) noexcept;\n+std::chrono::milliseconds GetRandMillis(std::chrono::milliseconds duration_max) noexcept;\n int GetRandInt(int nMax) noexcept;\n uint256 GetRandHash() noexcept;\n "
      }
    ]
  },
  {
    "sha": "e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjVlNDJmMjBhM2FhMzk2NTFmYmMxZjlmYTNkZjFhNDlmMWY1ODY4",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-29T16:19:27Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "message": "[p2p] Reattempt initial send of unbroadcast transactions\n\nEvery 10-15 minutes, the scheduler kicks off a job that queues unbroadcast\ntransactions onto each node.",
      "tree": {
        "sha": "a12777257a609b794d8922379d5f1dc6df5ea1f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a12777257a609b794d8922379d5f1dc6df5ea1f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e93eecce3bc5a1b7bb0284e06f9e2e69454f5ba"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d641c2b0cb9c35a6cc7f8f35b786cd27254f0d79",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
        "patch": "@@ -779,6 +779,19 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         PushNodeVersion(pnode, connman, GetTime());\n }\n \n+void PeerLogicValidation::ReattemptInitialBroadcast(CScheduler& scheduler) const\n+{\n+    std::set<uint256> unbroadcast_txids = m_mempool.GetUnbroadcastTxs();\n+\n+    for (const uint256& txid : unbroadcast_txids) {\n+        RelayTransaction(txid, *connman);\n+    }\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n+    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n+}\n+\n void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n     fUpdateConnectionTime = false;\n     LOCK(cs_main);\n@@ -1128,6 +1141,10 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n     scheduler.scheduleEvery([this, consensusParams] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n+\n+    // schedule next run for 10-15 minutes in the future\n+    const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n+    scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n }\n \n /**"
      },
      {
        "sha": "d02678c7c378206fbd370116b7b5c096bab31286",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
        "patch": "@@ -75,6 +75,8 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n     /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n     void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n+    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n \n private:\n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip"
      }
    ]
  },
  {
    "sha": "dc1da48dc5e5526215561311c184a8cbc345ecdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzFkYTQ4ZGM1ZTU1MjYyMTU1NjEzMTFjMTg0YThjYmMzNDVlY2Rj",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-29T16:21:02Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "message": "[wallet] Update the rebroadcast frequency to be ~1/day.\n\nSince the mempool unbroadcast mechanism handles the reattempts for initial\nbroadcast, the wallet rebroadcast attempts can be much less frequent\n(previously ~1/30 min)",
      "tree": {
        "sha": "356652687f4ae7d122a7d2d63a8d4ade6a0448f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/356652687f4ae7d122a7d2d63a8d4ade6a0448f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc1da48dc5e5526215561311c184a8cbc345ecdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc1da48dc5e5526215561311c184a8cbc345ecdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc1da48dc5e5526215561311c184a8cbc345ecdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc1da48dc5e5526215561311c184a8cbc345ecdc/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e25e42f20a3aa39651fbc1f9fa3df1a49f1f5868"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6eee0ccfc6a1309ee924883ad00b0d360fc37243",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc1da48dc5e5526215561311c184a8cbc345ecdc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc1da48dc5e5526215561311c184a8cbc345ecdc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dc1da48dc5e5526215561311c184a8cbc345ecdc",
        "patch": "@@ -1978,7 +1978,8 @@ void CWallet::ResendWalletTransactions()\n     // that these are our transactions.\n     if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n+    // resend 12-36 hours from now, ~1 day on average.\n+    nNextResend = GetTime() + (12 * 60 * 60) + GetRand(24 * 60 * 60);\n     if (fFirst) return;\n \n     // Only do it if there's been a new block since last time"
      },
      {
        "sha": "bb12212b5963eae09d51e0144732e26491348347",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc1da48dc5e5526215561311c184a8cbc345ecdc/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc1da48dc5e5526215561311c184a8cbc345ecdc/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=dc1da48dc5e5526215561311c184a8cbc345ecdc",
        "patch": "@@ -69,9 +69,10 @@ def run_test(self):\n         node.p2ps[1].sync_with_ping()\n         assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n \n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n+        self.log.info(\"Bump time & check that transaction is rebroadcast\")\n+        # Transaction should be rebroadcast approximately 24 hours in the future,\n+        # but can range from 12-36. So bump 36 hours to be sure.\n+        rebroadcast_time = int(time.time()) + 36 * 60 * 60\n         node.setmocktime(rebroadcast_time)\n         wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n "
      }
    ]
  },
  {
    "sha": "6851502472d3625416f0e7796e9f2a0379d14d49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODUxNTAyNDcyZDM2MjU0MTZmMGU3Nzk2ZTlmMmEwMzc5ZDE0ZDQ5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-31T02:52:25Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "message": "[refactor/test] Extract P2PTxInvStore into test framework",
      "tree": {
        "sha": "9dd95ba8351e778f1bf03aa3eb4b3629a098db40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dd95ba8351e778f1bf03aa3eb4b3629a098db40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6851502472d3625416f0e7796e9f2a0379d14d49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6851502472d3625416f0e7796e9f2a0379d14d49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6851502472d3625416f0e7796e9f2a0379d14d49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6851502472d3625416f0e7796e9f2a0379d14d49/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc1da48dc5e5526215561311c184a8cbc345ecdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc1da48dc5e5526215561311c184a8cbc345ecdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc1da48dc5e5526215561311c184a8cbc345ecdc"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 24,
      "deletions": 19
    },
    "files": [
      {
        "sha": "a76a25d1285d769529522612227102b04449eee7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851502472d3625416f0e7796e9f2a0379d14d49/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851502472d3625416f0e7796e9f2a0379d14d49/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=6851502472d3625416f0e7796e9f2a0379d14d49",
        "patch": "@@ -12,7 +12,10 @@\n P2PConnection: A low-level connection object to a node's P2P interface\n P2PInterface: A high-level interface object for communicating to a node over P2P\n P2PDataStore: A p2p interface class that keeps a store of transactions and blocks\n-              and can respond correctly to getdata and getheaders messages\"\"\"\n+              and can respond correctly to getdata and getheaders messages\n+P2PTxInvStore: A p2p interface class that inherits from P2PDataStore, and keeps\n+              a count of how many times each txid has been announced.\"\"\"\n+\n import asyncio\n from collections import defaultdict\n from io import BytesIO\n@@ -606,3 +609,20 @@ def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False,\n                 # Check that none of the txs are now in the mempool\n                 for tx in txs:\n                     assert tx.hash not in raw_mempool, \"{} tx found in mempool\".format(tx.hash)\n+\n+class P2PTxInvStore(P2PInterface):\n+    \"\"\"A P2PInterface which stores a count of how many times each txid has been announced.\"\"\"\n+    def __init__(self):\n+        super().__init__()\n+        self.tx_invs_received = defaultdict(int)\n+\n+    def on_inv(self, message):\n+        # Store how many times invs have been received for each tx.\n+        for i in message.inv:\n+            if i.type == MSG_TX:\n+                # save txid\n+                self.tx_invs_received[i.hash] += 1\n+\n+    def get_invs(self):\n+        with mininode_lock:\n+            return list(self.tx_invs_received.keys())"
      },
      {
        "sha": "0ce29b548121e6ffbd1333955900ab7b77b56978",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6851502472d3625416f0e7796e9f2a0379d14d49/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6851502472d3625416f0e7796e9f2a0379d14d49/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=6851502472d3625416f0e7796e9f2a0379d14d49",
        "patch": "@@ -3,29 +3,14 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that the wallet resends transactions periodically.\"\"\"\n-from collections import defaultdict\n import time\n \n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import ToHex\n-from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.mininode import P2PTxInvStore, mininode_lock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, wait_until\n \n-\n-class P2PStoreTxInvs(P2PInterface):\n-    def __init__(self):\n-        super().__init__()\n-        self.tx_invs_received = defaultdict(int)\n-\n-    def on_inv(self, message):\n-        # Store how many times invs have been received for each tx.\n-        for i in message.inv:\n-            if i.type == 1:\n-                # save txid\n-                self.tx_invs_received[i.hash] += 1\n-\n-\n class ResendWalletTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -36,7 +21,7 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node.add_p2p_connection(P2PTxInvStore())\n \n         self.log.info(\"Create a new transaction and wait until it's broadcast\")\n         txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n@@ -51,7 +36,7 @@ def run_test(self):\n         wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n \n         # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node.add_p2p_connection(P2PTxInvStore())\n \n         self.log.info(\"Create a block\")\n         # Create and submit a block without the transaction."
      }
    ]
  },
  {
    "sha": "297a1785360c4db662a7f3d3ade7b6b503258d39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTdhMTc4NTM2MGM0ZGI2NjJhN2YzZDNhZGU3YjZiNTAzMjU4ZDM5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-29T16:23:10Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "message": "[test] Integration tests for unbroadcast functionality\n\nCheck that...\n- mempool tracks & reattempts delivery of a transaction where a GETDATA hasn't\n  been requested by a peer yet.\n- transaction delivery is not attempted again after GETDATA is received.\n- transaction is removed from the unbroadcast set when its removed from the\n  mempool.",
      "tree": {
        "sha": "57acebb7265e853b00a1272d8fb4873c4e1637a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57acebb7265e853b00a1272d8fb4873c4e1637a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/297a1785360c4db662a7f3d3ade7b6b503258d39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/297a1785360c4db662a7f3d3ade7b6b503258d39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/297a1785360c4db662a7f3d3ade7b6b503258d39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/297a1785360c4db662a7f3d3ade7b6b503258d39/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6851502472d3625416f0e7796e9f2a0379d14d49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6851502472d3625416f0e7796e9f2a0379d14d49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6851502472d3625416f0e7796e9f2a0379d14d49"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 97,
      "deletions": 0
    },
    "files": [
      {
        "sha": "391c946b64e08eed6b5710cca5da5e6be5eeb456",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297a1785360c4db662a7f3d3ade7b6b503258d39/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297a1785360c4db662a7f3d3ade7b6b503258d39/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=297a1785360c4db662a7f3d3ade7b6b503258d39",
        "patch": "@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test that the mempool ensures transaction delivery by periodically sending\n+to peers until a GETDATA is received.\"\"\"\n+\n+import time\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    create_confirmed_utxos,\n+    disconnect_nodes,\n+)\n+\n+\n+class MempoolUnbroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_broadcast()\n+        self.test_txn_removal()\n+\n+    def test_broadcast(self):\n+        self.log.info(\"Test that mempool reattempts delivery of locally submitted transaction\")\n+        node = self.nodes[0]\n+\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 10)\n+\n+        disconnect_nodes(node, 1)\n+\n+        self.log.info(\"Generate transactions that only node 0 knows about\")\n+\n+        # generate a wallet txn\n+        addr = node.getnewaddress()\n+        wallet_tx_hsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # generate a txn using sendrawtransaction\n+        us0 = utxos.pop()\n+        inputs = [{\"txid\": us0[\"txid\"], \"vout\": us0[\"vout\"]}]\n+        outputs = {addr: 0.0001}\n+        tx = node.createrawtransaction(inputs, outputs)\n+        node.settxfee(min_relay_fee)\n+        txF = node.fundrawtransaction(tx)\n+        txFS = node.signrawtransactionwithwallet(txF[\"hex\"])\n+        rpc_tx_hsh = node.sendrawtransaction(txFS[\"hex\"])\n+\n+        # check that second node doesn't have these two txns\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh not in mempool\n+        assert wallet_tx_hsh not in mempool\n+\n+        self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n+        connect_nodes(node, 1)\n+\n+        # fast forward into the future & ensure that the second node has the txns\n+        node.mockscheduler(15 * 60)  # 15 min in seconds\n+        self.sync_mempools(timeout=30)\n+        mempool = self.nodes[1].getrawmempool()\n+        assert rpc_tx_hsh in mempool\n+        assert wallet_tx_hsh in mempool\n+\n+        self.log.info(\"Add another connection & ensure transactions aren't broadcast again\")\n+\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+        node.mockscheduler(15 * 60)\n+        time.sleep(5)\n+        assert_equal(len(conn.get_invs()), 0)\n+\n+    def test_txn_removal(self):\n+        self.log.info(\"Test that transactions removed from mempool are removed from unbroadcast set\")\n+        node = self.nodes[0]\n+        disconnect_nodes(node, 1)\n+        node.disconnect_p2ps\n+\n+        # since the node doesn't have any connections, it will not receive\n+        # any GETDATAs & thus the transaction will remain in the unbroadcast set.\n+        addr = node.getnewaddress()\n+        txhsh = node.sendtoaddress(addr, 0.0001)\n+\n+        # check transaction was removed from unbroadcast set due to presence in\n+        # a block\n+        removal_reason = \"Removed {} from set of unbroadcast txns before confirmation that txn was sent out\".format(txhsh)\n+        with node.assert_debug_log([removal_reason]):\n+            node.generate(1)\n+\n+if __name__ == \"__main__\":\n+    MempoolUnbroadcastTest().main()"
      },
      {
        "sha": "e0036955b06efee4d9111667c542f0b2e7ee6bd2",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/297a1785360c4db662a7f3d3ade7b6b503258d39/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/297a1785360c4db662a7f3d3ade7b6b503258d39/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=297a1785360c4db662a7f3d3ade7b6b503258d39",
        "patch": "@@ -207,6 +207,7 @@\n     'p2p_unrequested_blocks.py',\n     'feature_includeconf.py',\n     'feature_asmap.py',\n+    'mempool_unbroadcast.py',\n     'rpc_deriveaddresses.py',\n     'rpc_deriveaddresses.py --usecli',\n     'rpc_scantxoutset.py',"
      }
    ]
  },
  {
    "sha": "50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGZjNGRmNmM0ZThhODRiZGRhMTNhZGU3YmVkN2EyMTMxNzk2ZjAw",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-03-17T17:39:25Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-23T21:42:25Z"
      },
      "message": "[mempool] Persist unbroadcast set to mempool.dat\n\nEnsure that the unbroadcast set will still be meaningful if the node is\nrestarted.",
      "tree": {
        "sha": "f30b5fa6cad650ce39e7259b5a71d8c5b28ae731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f30b5fa6cad650ce39e7259b5a71d8c5b28ae731"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50fc4df6c4e8a84bdda13ade7bed7a2131796f00/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "297a1785360c4db662a7f3d3ade7b6b503258d39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/297a1785360c4db662a7f3d3ade7b6b503258d39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/297a1785360c4db662a7f3d3ade7b6b503258d39"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 55,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8282402d9a6cfbf6b7856d4250cbf75a512f278d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50fc4df6c4e8a84bdda13ade7bed7a2131796f00/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50fc4df6c4e8a84bdda13ade7bed7a2131796f00/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
        "patch": "@@ -4970,6 +4970,7 @@ bool LoadMempool(CTxMemPool& pool)\n     int64_t expired = 0;\n     int64_t failed = 0;\n     int64_t already_there = 0;\n+    int64_t unbroadcast = 0;\n     int64_t nNow = GetTime();\n \n     try {\n@@ -5023,12 +5024,21 @@ bool LoadMempool(CTxMemPool& pool)\n         for (const auto& i : mapDeltas) {\n             pool.PrioritiseTransaction(i.first, i.second);\n         }\n+\n+        std::set<uint256> unbroadcast_txids;\n+        file >> unbroadcast_txids;\n+        unbroadcast = unbroadcast_txids.size();\n+\n+        for (const auto& txid : unbroadcast_txids) {\n+            pool.AddUnbroadcastTx(txid);\n+        }\n+\n     } catch (const std::exception& e) {\n         LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());\n         return false;\n     }\n \n-    LogPrintf(\"Imported mempool transactions from disk: %i succeeded, %i failed, %i expired, %i already there\\n\", count, failed, expired, already_there);\n+    LogPrintf(\"Imported mempool transactions from disk: %i succeeded, %i failed, %i expired, %i already there, %i waiting for initial broadcast\\n\", count, failed, expired, already_there, unbroadcast);\n     return true;\n }\n \n@@ -5038,6 +5048,7 @@ bool DumpMempool(const CTxMemPool& pool)\n \n     std::map<uint256, CAmount> mapDeltas;\n     std::vector<TxMempoolInfo> vinfo;\n+    std::set<uint256> unbroadcast_txids;\n \n     static Mutex dump_mutex;\n     LOCK(dump_mutex);\n@@ -5048,6 +5059,7 @@ bool DumpMempool(const CTxMemPool& pool)\n             mapDeltas[i.first] = i.second;\n         }\n         vinfo = pool.infoAll();\n+        unbroadcast_txids = pool.GetUnbroadcastTxs();\n     }\n \n     int64_t mid = GetTimeMicros();\n@@ -5072,6 +5084,10 @@ bool DumpMempool(const CTxMemPool& pool)\n         }\n \n         file << mapDeltas;\n+\n+        LogPrintf(\"Writing %d unbroadcast transactions to disk.\\n\", unbroadcast_txids.size());\n+        file << unbroadcast_txids;\n+\n         if (!FileCommit(file.Get()))\n             throw std::runtime_error(\"FileCommit failed\");\n         file.fclose();"
      },
      {
        "sha": "f5e9c49648cda7a88d2920f714216729686c74a3",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 35,
        "deletions": 5,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50fc4df6c4e8a84bdda13ade7bed7a2131796f00/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50fc4df6c4e8a84bdda13ade7bed7a2131796f00/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
        "patch": "@@ -40,10 +40,13 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import P2PTxInvStore\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than_or_equal,\n     assert_raises_rpc_error,\n+    connect_nodes,\n+    disconnect_nodes,\n     wait_until,\n )\n \n@@ -80,6 +83,11 @@ def run_test(self):\n         assert_greater_than_or_equal(tx_creation_time, tx_creation_time_lower)\n         assert_greater_than_or_equal(tx_creation_time_higher, tx_creation_time)\n \n+        # disconnect nodes & make a txn that remains in the unbroadcast set.\n+        disconnect_nodes(self.nodes[0], 2)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"12\"))\n+        connect_nodes(self.nodes[0], 2)\n+\n         self.log.debug(\"Stop-start the nodes. Verify that node0 has the transactions in its mempool and node1 does not. Verify that node2 calculates its balance correctly after loading wallet transactions.\")\n         self.stop_nodes()\n         # Give this node a head-start, so we can be \"extra-sure\" that it didn't load anything later\n@@ -89,7 +97,7 @@ def run_test(self):\n         self.start_node(2)\n         wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"], timeout=1)\n         wait_until(lambda: self.nodes[2].getmempoolinfo()[\"loaded\"], timeout=1)\n-        assert_equal(len(self.nodes[0].getrawmempool()), 5)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 6)\n         assert_equal(len(self.nodes[2].getrawmempool()), 5)\n         # The others have loaded their mempool. If node_1 loaded anything, we'd probably notice by now:\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n@@ -105,17 +113,18 @@ def run_test(self):\n         self.nodes[2].syncwithvalidationinterfacequeue()  # Flush mempool to wallet\n         assert_equal(node2_balance, self.nodes[2].getbalance())\n \n+        # start node0 with wallet disabled so wallet transactions don't get resubmitted\n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         self.stop_nodes()\n-        self.start_node(0, extra_args=[\"-persistmempool=0\"])\n+        self.start_node(0, extra_args=[\"-persistmempool=0\", \"-disablewallet\"])\n         wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0. Verify that it has the transactions in its mempool.\")\n         self.stop_nodes()\n         self.start_node(0)\n         wait_until(lambda: self.nodes[0].getmempoolinfo()[\"loaded\"])\n-        assert_equal(len(self.nodes[0].getrawmempool()), 5)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 6)\n \n         mempooldat0 = os.path.join(self.nodes[0].datadir, self.chain, 'mempool.dat')\n         mempooldat1 = os.path.join(self.nodes[1].datadir, self.chain, 'mempool.dat')\n@@ -124,12 +133,12 @@ def run_test(self):\n         self.nodes[0].savemempool()\n         assert os.path.isfile(mempooldat0)\n \n-        self.log.debug(\"Stop nodes, make node1 use mempool.dat from node0. Verify it has 5 transactions\")\n+        self.log.debug(\"Stop nodes, make node1 use mempool.dat from node0. Verify it has 6 transactions\")\n         os.rename(mempooldat0, mempooldat1)\n         self.stop_nodes()\n         self.start_node(1, extra_args=[])\n         wait_until(lambda: self.nodes[1].getmempoolinfo()[\"loaded\"])\n-        assert_equal(len(self.nodes[1].getrawmempool()), 5)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 6)\n \n         self.log.debug(\"Prevent bitcoind from writing mempool.dat to disk. Verify that `savemempool` fails\")\n         # to test the exception we are creating a tmp folder called mempool.dat.new\n@@ -139,6 +148,27 @@ def run_test(self):\n         assert_raises_rpc_error(-1, \"Unable to dump mempool to disk\", self.nodes[1].savemempool)\n         os.rmdir(mempooldotnew1)\n \n+        self.test_persist_unbroadcast()\n+\n+    def test_persist_unbroadcast(self):\n+        node0 = self.nodes[0]\n+        self.start_node(0)\n+\n+        # clear out mempool\n+        node0.generate(1)\n+\n+        # disconnect nodes to make a txn that remains in the unbroadcast set.\n+        disconnect_nodes(node0, 1)\n+        node0.sendtoaddress(self.nodes[1].getnewaddress(), Decimal(\"12\"))\n+\n+        # shutdown, then startup with wallet disabled\n+        self.stop_nodes()\n+        self.start_node(0, extra_args=[\"-disablewallet\"])\n+\n+        # check that txn gets broadcast due to unbroadcast logic\n+        conn = node0.add_p2p_connection(P2PTxInvStore())\n+        node0.mockscheduler(16*60) # 15 min + 1 for buffer\n+        wait_until(lambda: len(conn.get_invs()) == 1)\n \n if __name__ == '__main__':\n     MempoolPersistTest().main()"
      },
      {
        "sha": "a561f28b9176014b2c34fe1d98c9c006c41dc437",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50fc4df6c4e8a84bdda13ade7bed7a2131796f00/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50fc4df6c4e8a84bdda13ade7bed7a2131796f00/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=50fc4df6c4e8a84bdda13ade7bed7a2131796f00",
        "patch": "@@ -58,6 +58,9 @@ def test_broadcast(self):\n         assert rpc_tx_hsh not in mempool\n         assert wallet_tx_hsh not in mempool\n \n+        # ensure that unbroadcast txs are persisted to mempool.dat\n+        self.restart_node(0)\n+\n         self.log.info(\"Reconnect nodes & check if they are sent to node 1\")\n         connect_nodes(node, 1)\n "
      }
    ]
  }
]