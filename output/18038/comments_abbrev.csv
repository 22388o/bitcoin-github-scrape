DrahtBot,2020-01-31 08:39:36,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18807 ([WIP] unbroadcast follow-ups by amitiuttarwar)\n* #18781 (Add templated GetRandDuration<> by MarcoFalke)\n* #18764",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-580639076,580639076,
amitiuttarwar,2020-02-27 20:14:33,travis failure seems unrelated- `feature_fee_estimation.py` ,https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-592155950,592155950,
MarcoFalke,2020-02-27 20:43:20,"It could be a crash, because node1 stops to log anything at all",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-592167518,592167518,
amitiuttarwar,2020-03-17 21:14:03,looks like I have severely aggravated Travis. whoops 🙈. looking into it. ,https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-600304555,600304555,
amitiuttarwar,2020-03-18 00:08:37,"@ariard \n\n> If I understand well this PR, it introduces a initial-broadcast reattempt mechanism through mempool tracking and GETDATA monitoring. Compare to wallet rebroadcast, the safety catch of new one isn't confirmation-based but network-based so once you have reasonable propagation (reasonable=1) you stop initial-broadcast. \n\nYup. \n\n> But I don't grasp where the privacy win is in i",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-600359498,600359498,
MarcoFalke,2020-03-18 15:18:39,Changed title to indicate that this only improves *wallet* privacy,https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-600683350,600683350,
ariard,2020-03-19 19:15:31,"> Does that logic make sense to you? Please poke holes at it :) Or let me know if you have any questions.\n\nI think we agree, missed inventory filter implications at first, maybe should get some message in your first commit to track goal aimed:\n\n""Previously, in case of rebroadcast, a spying node may learn transaction\norigin if it was connected to the node during a ~1/15min period.\n\nNo",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-601366971,601366971,
amitiuttarwar,2020-03-26 22:35:34,"thank you for the thoughtful reviews! pushed changes incorporating the feedback. \n\ncurrently looking into CI failures. appveyor is failing on `feature_versionbits_warning.py`, but travis is failing on `mempool_persist`, so I'm investigating. ",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-604722444,604722444,
MarcoFalke,2020-03-27 00:32:07,"Previous runs: \n* https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/31747734\n* https://travis-ci.org/github/bitcoin/bitcoin/builds/667378104\n\nI think they are intermittent failures, so I am going to re-run this pull\n\nOpen-Close to re-run ci. See https://github.com/bitcoin/bitcoin/issues/15847#issuecomment-487591130",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-604755044,604755044,
amitiuttarwar,2020-03-30 18:28:18,"the travis valgrind build is failing on `p2p_permissions` test. \n\ntrying to make sense of the logs... looks like node1 has an unclean shutdown, possibly because the RPC is attempted to be stopped more than once? \nI'm a bit confused because it looks like  `test_framework/authproxy.py` is throwing a `ConnectionResetError` from `_request`, but that method should be catching the error? but I thi",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-606165779,606165779,
amitiuttarwar,2020-03-30 19:18:17,"@ariard - addressing your 2 outstanding review comments\n\nRE: wtxid - there is some additional code needed to support unbroadcast set & wtxid relay. I'll work on the patch & depending on timing around which PR is ready for merge first, include the patch here or offer it on the other PR. Thanks again for pointing that out :) \n\nRE: `filterInventoryKnown` - to make this easier to realize, I me",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-606190183,606190183,
amitiuttarwar,2020-03-31 00:16:08,"ok! travis is green, all current review comments are addressed. \n\nthis PR is ready for another round of review! \nthanks in advance :) ",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-606320113,606320113,
sipa,2020-04-02 02:39:49,"Do we have any numbers on how important wallet rebroadcasting is? I have a small concern that stopping the ""fast"" initial broadcast after a single successful transmission may sometimes not be enough (e.g. the peer it's sent to goes offline before forwarding it further). This seems unlikely to happen (both we only submitting once, and them failing immediately afterwards), and even if it happens, it",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-607588970,607588970,
naumenkogs,2020-04-02 19:19:01,Code review re-ACK,https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-608054603,608054603,
amitiuttarwar,2020-04-02 22:17:44,"thanks for the review @sipa! \n\nunfortunately, I don't have any real-life numbers of wallet rebroadcast usage for getting a transaction initially broadcast. I'd love relevant data. (anyone reading this... ) please let me know if you have any ideas of how I could get relevant info. \n\nI've mostly been operating in theoretical possibility space & have come to the same conclusion- the likelihoo",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-608120418,608120418,
MarcoFalke,2020-04-15 23:13:54,"> this PR adds local data that identifies your own transactions (mempool.dat unbroadcast set and debug logs). I think that's fine - if your bitcoin datadir is compromised you probably have bigger problems.\n\nAll the information should already be accessible today in wallet.dat, and debug.log, so this is not getting worse.",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-614325394,614325394,
jnewbery,2020-04-16 02:23:40,"> All the information should already be accessible today in wallet.dat, and debug.log, so this is not getting worse.\n\nwallet.dat could be stored externally, and without wallet logging enabled I don't think debug.log will indicate which transactions are yours. But like I said, I don't think it's a big concern.",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-614376730,614376730,
MarcoFalke,2020-04-16 11:46:22,"With wallet logging disabled, the tx source is still leaked through ATMP logging, validationinterface logging, RPC logging and NET logging. You'd probably have to pass -nodebuglogfile to make sure nothing is leaked.",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-614602524,614602524,
fjahr,2020-04-23 12:56:26,"The underlying assumption here seems to be that all nodes are online 24/7 (or at least several days after a tx broadcast). I have heard from some users that they have a node on their laptop that is not online often but when they want to send a tx they launch it, wait for it to sync, and then broadcast the tx before shutting it down again. Should such a usage pattern be taken into consideration or ",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618387031,618387031,
MarcoFalke,2020-04-23 13:05:58,@fjahr Can you explain why this is the underlying assumption? A node on a laptop should work fine wiht this. In fact this improves the user experience on exactly such systems.,https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618391912,618391912,
fjahr,2020-04-23 13:10:44,"> @fjahr Can you explain why this is the underlying assumption? A node on a laptop should work fine wiht this. In fact this improves the user experience on exactly such systems.\n\nThe way I understand the logic it seems like if a first attempt at broadcasting the tx fails, the user would need to remember that and relaunch their node ~24h later to retry which may be inconvenient compared to keep",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618394374,618394374,
MarcoFalke,2020-04-23 13:21:49,"I don't think we can trivially solve the case where you have only connections to malicious nodes that pretend to want your transaction, but then drop it on the floor.\n\nAre you saying that waiting another hour after start-up could improve the peers you have and they'd be less like to drop your txs on the floor?",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618396450,618396450,
fjahr,2020-04-23 14:04:15,"I guess I just misunderstood the unbroadcast logic and it's differences to the old wallet rebroadcast, now that I am reviewing the code it makes more sense and I see how it's not an issue for these types of users.",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618412982,618412982,
amitiuttarwar,2020-04-23 18:23:32,"thanks for the reviews @MarcoFalke, @jnewbery & @fjahr \n\nI've addressed all review comments. Fixed the issues with raciness around dumping & loading unbroadcast set to `mempool.dat`. Updated so `m_unbroadcast_txids` is private & exposes public methods to add / remove / get the set. And a bunch of small nit fixes. \n\n@fjahr \n> The underlying assumption here seems to be that all nodes are o",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618569598,618569598,
MarcoFalke,2020-04-23 19:12:59,"ACK c365159b8922320ba542db97a43ae72a177380bb 💎\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK c365159b8922320ba542db97a43ae72a177380bb 💎\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi5TQv/UfFNEB6lDNi7ZjPTVQhYPj6JQsYc9pN6r8vGARGWt22PX9t2ep",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618603179,618603179,
MarcoFalke,2020-04-23 22:22:54,"ACK 50fc4df6c4e8a84bdda13ade7bed7a2131796f00, I think this is ready for merge now 👻\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 50fc4df6c4e8a84bdda13ade7bed7a2131796f00, I think this is ready for merge now 👻\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYA",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618702204,618702204,
sipa,2020-04-24 01:12:24,utACK 50fc4df6c4e8a84bdda13ade7bed7a2131796f00,https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618748286,618748286,
MarcoFalke,2020-04-24 12:01:35,"@fjahr @naumenkogs @jnewbery @ariard Maybe one more re-ACK to push this over the finish line? :pray: \n\nMerging this early gives more time to test while it is in master until the release of 0.21.0",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-618968618,618968618,
naumenkogs,2020-04-24 13:35:43,utACK 50fc4df,https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-619014282,619014282,
amitiuttarwar,2020-04-28 22:11:04,"thank you for the reviews everyone! 🙏 \n\nThe current tip `50fc4df` currently has 6 ACKs on it, so I've opened #18807 to address the last bits. \n\n@jonatack \n\n> ISTM #16698 (comment) should be mentioned up-front in the PR description as well as a co-author mention in the relevant commit\n\nI’ve updated the PR description to reflect this but I disagree that a co-author mention is necessa",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-620881993,620881993,
MarcoFalke,2020-04-29 19:56:02,"The rebroadcast behaviour changes for own wallets connected on the p2p interface, as opposed to local wallets or wallets connected on the rpc interface.\n\nFor context, see the IRC log: https://bitcoincore.reviews/18038.html",https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-621429126,621429126,
MarcoFalke,2020-02-27 21:00:46,Why is this not saved to disk? It seems that on restart this set is cleared regardless of whether the tx was sent out.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385368573,385368573,src/txmempool.h
MarcoFalke,2020-02-28 16:31:36,"The comment is incorrect, since a tx is *not* removed when it is not sent, e.g. because it was not found.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385795095,385795095,src/net_processing.cpp
MarcoFalke,2020-02-28 16:32:32,"Why is the tx not removed when it was initially sent out after 15 minutes, e.g. when it was removed from mapRelay and then relayed from the mempool.\n\nI think this code should go down into the `if(push)` branch",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385795542,385795542,src/net_processing.cpp
MarcoFalke,2020-02-28 16:33:19,"```suggestion\n        LogPrint(BCLog::NET, ""Removed %i from m_unbroadcast_txids before tx was sent out. \n"", hash.GetHex());\n```",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385795926,385795926,src/txmempool.cpp
MarcoFalke,2020-02-28 16:38:26,"```suggestion\n    scheduler.scheduleEvery([]{this->AttemptInitialBroadcast();}, REATTEMPT_BROADCAST_INTERVAL.count() );\n```\n\n",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385798846,385798846,src/net.cpp
amitiuttarwar,2020-02-28 17:15:38,"great point. originally I was thinking of doing as a follow up PR (see [here](https://gist.github.com/amitiuttarwar/b592ee410e1f02ac0d44fcbed4621dba#follow-up-prs)), but now that this unbroadcast logic is broken out into its own PR I agree it makes sense here. I'll implement.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385818114,385818114,src/txmempool.h
naumenkogs,2020-02-28 18:44:44,"This is not frequency 1/day (as the PR post says). It's a value between 0 and 24 hours, with an average of 12 hours. You probably want to do 12*60*60 + GetRand(12*60*60) or something like that?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385860440,385860440,src/wallet/wallet.cpp
naumenkogs,2020-02-28 18:54:54,"How do you know that it won't be rejected due to ""filterInventoryKnown""?\nWhat is the rationale here?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385865086,385865086,src/net_processing.cpp
amitiuttarwar,2020-03-02 19:50:48,"It might. Which upholds the same guarantees as the previous logic it's replacing.\n\nOn current master, wallet transactions get rebroadcast through a scheduler flow that makes its way to `ResendWalletTransactions`, which selects transactions to rebroadcast then invokes `SubmitMemoryPoolAndRelay`. This goes to `BroadcastTransaction`, which checks ATMP then relays via `RelayTransaction`, which use",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r386613286,386613286,src/net_processing.cpp
ajtowns,2020-03-03 00:27:53,`12*60*60 + GetRand(12*60*60)` would get an average of 24 hours with a range of 12-36,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r386732669,386732669,src/wallet/wallet.cpp
amitiuttarwar,2020-03-03 03:33:35,"you are right, this is a mistake. thanks 🙏🏽",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r386781925,386781925,src/net_processing.cpp
naumenkogs,2020-03-03 16:07:11,"@ajtowns yeah, that's what would be closer to 1/day, right? Not sure what you meant to say.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387124518,387124518,src/wallet/wallet.cpp
naumenkogs,2020-03-03 16:17:25,"Ah I see. Just want to be clear that if the network is not really used, the bloom filter doesn't roll and transaction may be not rebroadcast in days.\nIf that's what you have in mind when designing the whole thing, let's just leave a comment that this can happen.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387131829,387131829,src/net_processing.cpp
ajtowns,2020-03-04 03:08:30,"Oh my god. `12*60*60 + GetRand(24*60*60)` was what I was trying to type; min of 12h, max of 36h, average of 24h.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387426782,387426782,src/wallet/wallet.cpp
ajtowns,2020-03-04 03:28:20,"The `filterInventoryKnown` is per-peer though, so it just won't be rebroadcast to a peer that already knew about it somehow; but it'll stay in the unbroadcast set and be retried for other peers until a getdata actually makes its way through (or until it gets dropped from the mempool)? If all of your peers ignore your INV and don't request a GETDATA, you'll not send more INVs until you find a new p",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387431128,387431128,src/net_processing.cpp
ajtowns,2020-03-04 03:30:54,"`m_unbroadcast_txids` declaration is missing the `GUARDED_BY(cs)` thread safety annotation, and I think the errors adding that turns up indicates there's more locking needed which probably explains the node segfaulting in travis.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387431682,387431682,src/txmempool.h
MarcoFalke,2020-03-04 13:24:02,"While I couldn't come up with a privacy-leaking attack based on this being a constant, I'd still suggest to make the delay random to avoid network-wide synchronized events that don't need to be synchronized",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387662775,387662775,src/net.cpp
naumenkogs,2020-03-04 14:35:45,"Agree, I think we should do what you just suggested.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387705673,387705673,src/wallet/wallet.cpp
naumenkogs,2020-03-04 15:40:29,"Maybe it's the naming that confuses me. It's called ""rebroadcast"", not ""consider to rebroadcast"".\n>even if you did, those peers would probably still not send a GETDATA anyway\n\nNot sure about that. If transaction expires from a mempool, and there's not much activity on-chain, filter would still prevent us from re-announcing it. The correspondence between the two is questionable.\n\nBut yeah",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r387750082,387750082,src/net_processing.cpp
ariard,2020-03-16 20:31:56,Have you weighted implications of wtxid-relay (#18044) ? I think you will need to track both txid/wtxid for backward-compability with non-upgraded nodes.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393293074,393293074,src/txmempool.h
ariard,2020-03-16 20:40:29,"""periodically (REATTEMPT_BROADCAST_INTERVAL)""",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393297027,393297027,src/txmempool.h
amitiuttarwar,2020-03-17 20:22:46,this is the best option I've been able to identify for how to check if we are at the end of the file. would love to hear about any cleaner solutions.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393946770,393946770,src/validation.cpp
amitiuttarwar,2020-03-17 20:39:14,"- added logic to save unbroadcast set to disk\n- added thread safety annotation & missing locks from lots of call sites 😛\n\nthank you both for this feedback 🙏🏽\nwould love further review on the added logic ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393955311,393955311,src/txmempool.h
amitiuttarwar,2020-03-17 20:43:04,"I don't fully understand what you mean here. Are you pointing out that there are other ways the transaction gets removed from the set?\n\nI updated to: ""We intepret processing a GETDATA for a transaction as a successful initial broadcast and remove it from our unbroadcast set."" \n\nDoes that seem reasonable? Or am I still missing the point? \n",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393957572,393957572,src/net_processing.cpp
amitiuttarwar,2020-03-17 20:43:33,Fixed. Thanks again.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393957842,393957842,src/net_processing.cpp
amitiuttarwar,2020-03-17 20:46:24,"I updated it to ""from m_unbroadcast_txids before confirmation that txn was sent out"", but I feel uncertain... saying ""before GETDATA was received"" seems more clear & specific than ""confirmation that txn was sent out"". Could you explain further why you didn't like it? \n\nis this related to [this](https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385795095)?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393959353,393959353,src/txmempool.cpp
amitiuttarwar,2020-03-17 20:49:44,"updated.\n\nfunny to update the code to match the comment language rather than vice versa 😛 but I don't have a strong preference around 12-36hrs vs 0-24hrs, both have small tradeoffs. ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393961149,393961149,src/wallet/wallet.cpp
amitiuttarwar,2020-03-17 21:01:56,"> Maybe it's the naming that confuses me. It's called ""rebroadcast"", not ""consider to rebroadcast"".\n\nthe language I'm introducing is ""unbroadcast"", which means consider it as initial broadcast. but there are these interactions with `filterInventoryKnown` to consider in different cases. \n\nI added some comments [here](https://github.com/bitcoin/bitcoin/pull/18038/files#diff-eff7adeaec73a7697",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393968358,393968358,src/net_processing.cpp
MarcoFalke,2020-03-17 21:30:03,Needs rebase to make the `const CTxMemPool&` non-const,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393982029,393982029,src/net_processing.cpp
amitiuttarwar,2020-03-17 22:00:51,"updated. although I was surprised to find out I had to pass ""this"" through in the capture list. ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r393995780,393995780,src/net.cpp
amitiuttarwar,2020-03-17 22:20:12,"ah, I thought through the possible privacy leaks but didn't think about weird circumstances that could lead to synchronized network-wide events. \n\nupdated reattempts to be between 10-15 minutes, chosen every time a node starts up.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394003478,394003478,src/net.cpp
amitiuttarwar,2020-03-17 22:24:54,thanks!,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394005374,394005374,src/net_processing.cpp
amitiuttarwar,2020-03-17 22:27:44,"ah, good point. will think this through. thanks! ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394006471,394006471,src/txmempool.h
amitiuttarwar,2020-03-17 22:28:21,"going to pass on this one, especially since I removed the constant for some variability in intervals.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394006704,394006704,src/txmempool.h
MarcoFalke,2020-03-18 15:36:32,"in commit 77748da2269bd7f2304ebc3b8616d3a584e7c65f:\n\nCan be written shorter as\n```suggestion\n                if (WITH_LOCK(mempool.cs, return mempool.m_unbroadcast_txids.erase(inv.hash);)) {\n```",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394440617,394440617,src/net_processing.cpp
MarcoFalke,2020-03-18 15:40:03,"in commit 77748da:\n\nPlease use `node.mempool` and not the global",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394443323,394443323,src/node/transaction.cpp
MarcoFalke,2020-03-18 15:55:31,"in commit 2f3f449dc9c89420a444cc8263c5a5fe537a475b:\n\nI still haven't figured out  a way to exploit this for privacy leaks, but making each node pick a unique fingerprint (heartbeat between 10-15 minutes) doesn't seem too great. Sometimes nodes offer a tor p2p interface and a clearnet p2p interface and ideally those should be uncorrelated. Obviously horribly broken in the current p2p implementa",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394455686,394455686,src/net.cpp
MarcoFalke,2020-03-18 15:59:39,"in commit 2f3f449dc9c89420a444cc8263c5a5fe537a475b:\n\nstyle nit. Can be a reference because it is never null\n```suggestion\nvoid PeerLogicValidation::QueueUnbroadcastTxs(CNode& pnode)\n```",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394459225,394459225,src/net_processing.cpp
MarcoFalke,2020-03-18 16:00:01,"in commit 2f3f449dc9c89420a444cc8263c5a5fe537a475b:\n\nPlease use m_mempool and not the global.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394459527,394459527,src/net_processing.cpp
MarcoFalke,2020-03-18 16:14:58,"in commit 2f3f449:\n\nI don't understand this comment, why would it have weaker delivery guarantees? Is it the bloom filter false positive rate?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394470334,394470334,src/net_processing.cpp
MarcoFalke,2020-03-18 16:15:44,"in commit 2f3f449:\n\nCan be const?\n\n```suggestion\n    void QueueUnbroadcastTxs(CNode& node) const override;\n```",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394470902,394470902,src/net_processing.h
MarcoFalke,2020-03-18 16:20:35,"in commit f40f6875f5570cb25882d8a04a6cbeb61ee7366d:\n\nStyle nit. Could add trailing comma for symmetry, git blame, and code formatters?\n\n```suggestion\n        hex_str_to_bytes,\n```",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394474255,394474255,test/functional/mempool_unbroadcast.py
MarcoFalke,2020-03-18 16:22:27,"In commit f40f6875f5570cb25882d8a04a6cbeb61ee7366d:\n\nI think assert is a statement, not a function, so should be without `()`\n```suggestion\n        assert wallet_tx_hsh not in mempool\n```",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394475575,394475575,test/functional/mempool_unbroadcast.py
MarcoFalke,2020-03-18 16:23:54,"in commit f40f6875f5570cb25882d8a04a6cbeb61ee7366d:\n\nCould do the same test again with a `self.nodes[0].restart_node()` added here?\n\nThis way it will test to persist txs on disk.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394476596,394476596,test/functional/mempool_unbroadcast.py
MarcoFalke,2020-03-18 16:27:01,"in commit f40f6875f5570cb25882d8a04a6cbeb61ee7366d:\n\nCan be shorter, because self.sync_mempools() does the same, I think\n```suggestion\n        self.sync_mempools()\n```",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394478852,394478852,test/functional/mempool_unbroadcast.py
MarcoFalke,2020-03-18 16:29:47,"in commit f40f687:\n\nDoes the block need to be created manually? What about a simple two-liner?\n\n```\nself.nodes[0].sendtoaddress()\nself.nodes[0].generate(1)\n```\n\nAlternatively, if you want to test both wallet txs and rpc txs, you could factor out the tx-creation code from the previous test case into a new helper function and call it here.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394480786,394480786,test/functional/mempool_unbroadcast.py
MarcoFalke,2020-03-18 16:33:27,"in commit b0f6a238335d96c9f5f7c2b83aabd56ab4f47a71:\n\nWhy is this needed?\n\nI think you can just go ahead and assume that the set was serialized. If it wasn't it will result in a one-time `LogPrintf` that the mempool data couldn't be deserialized. I think this is fine if it is mentioned in the release notes or as a code comment or not at all.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394483205,394483205,src/validation.cpp
naumenkogs,2020-03-18 17:01:38,"Although this is supposed to happen extremely rare, I think Marco's comment is very valid. I agree with his suggestion.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394502466,394502466,src/net.cpp
practicalswift,2020-03-18 17:26:33,"@amitiuttarwar Since this is a new file, you might want to run [`black`](https://black.readthedocs.io/en/stable/) on the entire file to get proper formatting which addresses MarcoFalke's nit and all other formatting nits :)",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394518591,394518591,test/functional/mempool_unbroadcast.py
practicalswift,2020-03-18 17:27:02,@amitiuttarwar Same goes for this one: `black` on the entire file to get proper formatting for free :),https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394518928,394518928,test/functional/mempool_unbroadcast.py
MarcoFalke,2020-03-18 18:01:03,"@practicalswift \nStyle is subjective and we allow the pull request author to pick the style, as long as it is reasonable. We don't require a specific python formatter. While black or yapf (https://github.com/bitcoin/bitcoin/blob/master/.style.yapf) or the built-in formatter of your editor can be used, they are not mandatory.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394540166,394540166,test/functional/mempool_unbroadcast.py
practicalswift,2020-03-18 20:05:30,@MarcoFalke Have I claimed anything else? :)  This is _your_ style nit - I'm just suggesting a way to address it automatically :),https://github.com/bitcoin/bitcoin/pull/18038#discussion_r394608061,394608061,test/functional/mempool_unbroadcast.py
ariard,2020-03-19 18:52:25,"See https://github.com/ariard/bitcoin/commit/2d8ae9a838f5c6ec43db15a7bd36554c351b7442, I find a bit weird to schedule a mempool task from connection manager instead of message processing layer. It should achieve the same goal while removing one new method (or have you already considered this and turn away for a good reason) ?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r395248783,395248783,src/net.cpp
amitiuttarwar,2020-03-23 19:57:29,"no, simpler.. just mean some transactions will get filtered & not relayed because of `filterInventoryKnown`. this was a result of the confusion & conversation in https://github.com/bitcoin/bitcoin/pull/18038#discussion_r385865086. \n\nbut maybe without that context this comment is misleading? appreciate any feedback on how to clarify. right now I'm thinking of just deleting the second paragraph.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r396720480,396720480,src/net_processing.cpp
MarcoFalke,2020-03-23 19:59:40,Why would `filterInventoryKnown` return a match when the transaction was initially never sent out to that peer?,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r396721669,396721669,src/net_processing.cpp
amitiuttarwar,2020-03-23 22:13:42,eg. if you disconnect wifi & submit a txn to your mempool. code will add to the bloom filters but the transaction never actually went anywhere ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r396788390,396788390,src/net_processing.cpp
amitiuttarwar,2020-03-24 21:38:06,"so, are you proposing \n- remove writing the boolean `has_unbroadcast_txns` to the file [here](https://github.com/bitcoin/bitcoin/pull/18038/files#diff-24efdb00bfbe56b140fb006b562cc70bR5121)\n- remove try block above, just leave the `file>>pool.m_unbroadcast_txids;` code below \n- if there are no `m_unbroadcast_txids`, there will be a `LogPrintf` that ""Failed to deserialize mempool data on disk",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397477029,397477029,src/validation.cpp
amitiuttarwar,2020-03-25 00:05:58,"yeah great point. p2p fingerprints are never good. thanks for pointing out. \n\nhaving `AttemptInitialBroadcast` call `ScheduleNextInitialBroadcast` to schedule the next `AttemptInitialBroadcast` seems a bit much to me (and I'd have to pass the scheduler through anyways), so I'll just schedule the next invocation at the end of the function itself. ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397535101,397535101,src/net.cpp
MarcoFalke,2020-03-25 00:11:11,The logprint should only happen on node update. A serialized empty set is hopefully different from no serialized set.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397536773,397536773,src/validation.cpp
MarcoFalke,2020-03-25 00:12:58,"See here:\n\nhttps://github.com/bitcoin/bitcoin/blob/5236b2e267a58870239673c7ec85e5df0cb8fc8e/src/serialize.h#L972",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397537337,397537337,src/validation.cpp
naumenkogs,2020-03-25 00:55:31,"Yeah, so in normal case we'll get this error once: when the node is updated to use this code, and attempts to use the file from previous runs. Which is, yeah, not ideal, but probably fine.\nIf you'd really want to avoid that, I'd rather add versioning of the file, rather than having bools like that you suggest.\n(See how we do versioning in peers.dat AddrMan serialization if interested)",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397549618,397549618,src/validation.cpp
MarcoFalke,2020-03-25 14:49:41,"This file is already versioned, but the version shouldn't be bumped because that will silently drop *all* transactions of the mempool",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397914899,397914899,src/validation.cpp
naumenkogs,2020-03-25 15:58:40,"Why does it have to drop all transactions? The new code can just be aware of the previous version, and not attempt to read unbroadcast_txs in that case, but just carefully read all old transactions (the advantage over this current PR is that no error is thrown/logged).",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397970619,397970619,src/validation.cpp
MarcoFalke,2020-03-25 16:14:03,"> Why does it have to drop all transactions?\n\nWhen bumping the version here and assuming the code is merged into 0.21.0, then reading a mempool.dat created by Bitcoin Core 0.21.0 will fail completely on a Bitcoin Core 0.20.0, because the code is already released and the logic of that code is to drop all transactions when the version is not equal to 1.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397982629,397982629,src/validation.cpp
naumenkogs,2020-03-25 16:19:19,"True. But who would use a mempool.dat from 0.21 on 0.20 node? I would say the most common scenario is opposite, upgrading from 0.20 to 0.21.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397986621,397986621,src/validation.cpp
MarcoFalke,2020-03-25 16:22:58,"Miners might want to upgrade, test the new version for a bit and then downgrade temporarily because they noticed an RPC breaking change. They should be able to continue mining on the txs they had before. For many users, a version upgrade/downgrade is the only time they restart the node. So this is the only time when this code is run and can provide them with value. If the code fails to be useful i",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397989382,397989382,src/validation.cpp
MarcoFalke,2020-03-25 16:24:34,"If you guys think that a try-catch is useful to avoid the debug LogPrint, fine. I am ok with that too. But I don't see a reason for this boolean.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397990626,397990626,src/validation.cpp
naumenkogs,2020-03-25 16:31:58,I also don't see a good reason for this boolean.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r397996259,397996259,src/validation.cpp
amitiuttarwar,2020-03-25 21:47:21,ok! I'm following now. I wasn't aware of the serialization logic. I'll remove the bool & try-catch as well. thanks!,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398190554,398190554,src/validation.cpp
amitiuttarwar,2020-03-25 21:52:07,"this is awesome! thanks for the patch. I was also realizing there's a simpler flow via `RelayTransaction`, but I agree that kicking off the process in `PeerLogicValidation` constructor makes more sense conceptually than `CConnman::Start`. Also I like your rename to `ReattemptInitialBroadcast`, small change but makes intentions more obvious. Thank you! 🙏🏽",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398192894,398192894,src/net.cpp
MarcoFalke,2020-03-26 14:56:13,Indeed nice patch @ariard ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398637924,398637924,src/net.cpp
amitiuttarwar,2020-03-26 16:41:11,"pass on this one. the `num` var gets compiled out regardless, and I personally think its much clearer to have it broken out, and helps indicate that erasing returns a number thats evaluated for the if statement",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398721924,398721924,src/net_processing.cpp
amitiuttarwar,2020-03-26 16:41:20,fixed ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398722015,398722015,src/node/transaction.cpp
amitiuttarwar,2020-03-26 16:42:29,fixed. thanks!,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398722892,398722892,src/net.cpp
amitiuttarwar,2020-03-26 16:44:06,"method no longer exists, but pass by reference for `ReattemptInitialBroadcast`",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398724101,398724101,src/net_processing.cpp
amitiuttarwar,2020-03-26 16:44:38,"method no longer exists, but fixed in `ReattemptInitialBroadcast`",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398724543,398724543,src/net_processing.cpp
amitiuttarwar,2020-03-26 16:46:43,updated this so comment above `ReattemptInitialBroadcast` just notes that unbroadcast txs will be passed through `filterInventoryKnown`. Leaving the tradeoff analysis for reviewers / future people writing code. ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398726113,398726113,src/net_processing.cpp
amitiuttarwar,2020-03-26 16:47:10,Method no longer exists but made `ReattemptInitialBroadcast` const. ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398726490,398726490,src/net_processing.h
amitiuttarwar,2020-03-26 16:48:12,fixed! thanks for the style tips ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398727249,398727249,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-03-26 16:48:30,fixed ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398727457,398727457,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-03-26 16:48:46,good idea! updated.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398727723,398727723,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-03-26 16:49:04,updated ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398727977,398727977,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-03-26 16:51:39,"ahahhahaha omg I'm glad its been a while since I wrote this test & I don't remember how long I spent figuring out how to manually make the txn and block 😝\n\ntwo-liner is much cleaner. I feel comfortable with the coverage of wallet & rpc from previous test.\n\nthanks! ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398729959,398729959,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-03-26 16:52:01,fixed! thanks again,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398730247,398730247,src/validation.cpp
amitiuttarwar,2020-03-26 16:52:43,incorporated. thanks again! ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r398730775,398730775,src/net.cpp
amitiuttarwar,2020-03-31 00:14:40,"from https://github.com/bitcoin/bitcoin/pull/18038#issuecomment-606190183\n\nRE: wtxid - there is some additional code needed to support unbroadcast set & wtxid relay. I'll work on the patch & depending on timing around which PR is ready for merge first, include the patch here or offer it on the other PR. Thanks again for pointing that out :)",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r400569145,400569145,src/txmempool.h
MarcoFalke,2020-04-13 18:47:25,"e82fdd329c812623c6e8a9022322fe43e1000c5b\n\n```suggestion\n                    LogPrint(BCLog::NET, ""Removed %i from the set of unbroadcast txs\n"", inv.hash.GetHex());\n```\n\nAny reason for the trailing whitespace?\n\nAlso, leaking source code names into the debug log might cause parse issues when the symbol is renamed",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407647622,407647622,src/net_processing.cpp
MarcoFalke,2020-04-13 18:48:03,"```suggestion\n        LogPrint(BCLog::NET, ""Removed %i from set of unbroadcast txs before confirmation that txn was sent out\n"", hash.GetHex());\n```\n\nSame",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407648006,407648006,src/txmempool.cpp
MarcoFalke,2020-04-13 18:49:09,"This should probably be a doxygen comment. See the developer notes on how to get one.\n```suggestion\n    /** track locally submitted transactions & periodically retry initial broadcast */\n```",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407648718,407648718,src/txmempool.h
MarcoFalke,2020-04-13 18:56:47,"a11968c8780424ddb0fd01341101bb28ff6953a8\n\nSorry, I still don't understand why this comment is relevant to rebroadcasting. I remember in an earlier discussion you mentioned that a user might disconnect their wifi. A tx might get added to filterInventoryKnown, but then never sent out.\n\nI don't think this is true. Either, we reconnect the wifi and be still connected to the peer, in which case",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407652787,407652787,src/net_processing.cpp
MarcoFalke,2020-04-13 19:00:39,"```suggestion\n    const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n```\n\nYou might have to add `GetRandMillis` by copying from `GetRandMicros`.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407655025,407655025,src/net_processing.cpp
MarcoFalke,2020-04-13 19:18:00,"6307582b4d30167a931678d12e99a00a0e75e81a\n\nThis is not safe. You are erasing the existing content of the `m_unbroadcast_txids`",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407664223,407664223,src/validation.cpp
MarcoFalke,2020-04-13 19:21:04,This is racy and you might end up with zombie txids here that are never removed because the corresponding mempool tx has not been written to disk,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r407665982,407665982,src/validation.cpp
jnewbery,2020-04-15 21:41:43,"Is there a reason this is categorized as a NET log? I think it makes more sense as a MEMPOOL, or even uncategorized as a `LogPrintf()`.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409150876,409150876,src/txmempool.cpp
jnewbery,2020-04-15 21:42:29,Agree that it's better to avoid using variable names in logs.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409151246,409151246,src/txmempool.cpp
jnewbery,2020-04-15 21:45:58,"I also think this whitespace is ugly, but I think you can leave removing it for another time!",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409152838,409152838,src/net.cpp
jnewbery,2020-04-15 22:01:06,I agree with Marco that this comment can just be removed.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409159855,409159855,src/net_processing.cpp
jnewbery,2020-04-15 22:08:42,"I prefer all classes in the framework to have a docstring, even if it's very simple. This one would be something like:\n\n""A P2PInterface which stores a count of how many times each txid has been announced""",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409163442,409163442,test/functional/test_framework/mininode.py
jnewbery,2020-04-15 22:11:29,Can we import `MSG_TX` from `.messages` and `if i.type == MSG_TX` to remove the magic 1 number?,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409164540,409164540,test/functional/test_framework/mininode.py
jnewbery,2020-04-15 22:13:22,nit: sort :stuck_out_tongue: ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409165264,409165264,test/functional/mempool_unbroadcast.py
jnewbery,2020-04-15 22:17:04,nit: could declare these two times as constants.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409166712,409166712,src/net_processing.cpp
jnewbery,2020-04-15 22:20:26,I don't think this is true. You added a `P2PTxInvStore` in `test_broadcast()` which I think is still connected.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409168043,409168043,test/functional/mempool_unbroadcast.py
jnewbery,2020-04-15 22:23:01,"You can also verify this by using `assert_debug_log()` to check that the ""Removed %i from m_unbroadcast_txids before confirmation that txn was sent out"" log has been printed. That might be simpler than connected a new peer.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409169031,409169031,test/functional/mempool_unbroadcast.py
jnewbery,2020-04-15 22:44:29,"> but the version shouldn't be bumped because that will silently drop all transactions of the mempool\n\n@MarcoFalke - this is interesting. It means if we ever have to bump the version number we'd have to do something like:\n\n- Bitcoin Core version X only understands mempool.dat v1\n- add mempool.dat v2 parsing logic in Bitcoin Core version X+1\n- add mempoo.dat v2 writing logic in Bitcoin ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409177251,409177251,src/validation.cpp
jnewbery,2020-04-15 22:50:23,I agree. All of the data should be brought out of the mempool under one lock. Make a local `std::set<uint256>` and populate it under the same lock as `mapDeltas` and `vinfo` get populated.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409179516,409179516,src/validation.cpp
MarcoFalke,2020-04-15 23:10:07,Our guidelines say that whitespace may be fixed up when the line is touched for other reasons. I doubt anyone is going to touch an empty line any time soon. It seems fine to remove an empty line in net.cpp in a pull request that modifies p2p code.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409186292,409186292,src/net.cpp
jnewbery,2020-04-16 19:01:29,Touching a file in a commit for no other reason than to remove the whitespace doesn't make any sense! I'm surprised that you would think otherwise.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r409782771,409782771,src/net.cpp
amitiuttarwar,2020-04-23 17:32:01,fixed,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413989313,413989313,src/net_processing.cpp
amitiuttarwar,2020-04-23 17:32:44,fixed,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413989766,413989766,src/txmempool.cpp
amitiuttarwar,2020-04-23 17:37:22,fixed & added doxygen comments for new methods I introduced into txmempool ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413992829,413992829,src/txmempool.h
amitiuttarwar,2020-04-23 17:38:18,"> we reconnect the wifi and be still connected to the peer, in which case we can push the inv out and wait for them to request the tx. \n\nah, I didn't realize. thanks! \n\nremoved the comment. ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413993391,413993391,src/net_processing.cpp
amitiuttarwar,2020-04-23 17:40:46,added the method `GetRandMillis` & updated here. I was thinking might make sense to have a template for the different chrono types? I haven't looked into it yet but you mentioned that it wouldn't work? ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413994990,413994990,src/net_processing.cpp
amitiuttarwar,2020-04-23 17:42:24,"ah, thanks for catching. fixed via new mempool methods",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413996219,413996219,src/validation.cpp
amitiuttarwar,2020-04-23 17:42:58,oops. thanks for catching. fixed ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413996603,413996603,src/validation.cpp
amitiuttarwar,2020-04-23 17:43:26,historic that I didn't notice. fixed now,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413996903,413996903,src/txmempool.cpp
amitiuttarwar,2020-04-23 17:44:31,"😢\n\nunfortunately I can't disagree that its silly to touch a file _just_ to remove whitespace.\n\nempty lines in net.cpp... I will be back for you! ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413997604,413997604,src/net.cpp
amitiuttarwar,2020-04-23 17:44:49,done,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413997770,413997770,test/functional/test_framework/mininode.py
amitiuttarwar,2020-04-23 17:47:57,"turns out, `MSG_TX` was already imported. fixed.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r413999950,413999950,test/functional/test_framework/mininode.py
amitiuttarwar,2020-04-23 17:48:29,fixed,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414000297,414000297,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-23 17:49:33,"pass on this one, I pulled `delta` out for readability, but breaking into two constants seems a bit overkill to me",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414000987,414000987,src/net_processing.cpp
amitiuttarwar,2020-04-23 17:54:17,"good point! looks like since `P2PTxInvStore` overwrites the `on_inv` function, it doesn't send back a `GETDATA`, so the relevant piece of functionality from a connection isn't triggered.\n\nfor this PR, I added a line to `disconnect_p2ps` so the expectations make more sense (making the comment true). \n\nbut I do think its confusing that `P2PTxInvStore` inherits from `P2PInterface` but abandon",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414004345,414004345,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-23 17:54:54,seems more straightforward so I updated,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414004728,414004728,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-23 17:58:51,"> I think to avoid the debug LogPrint we can wrap the m_unbroadcast_txids parsing in its own try-except\n\nI considered doing this but decided not to because a one-time error message (with functionality working fine) seems more desirable than a nested try / catch statement that would probably live in the code for a very long time.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414007402,414007402,src/validation.cpp
amitiuttarwar,2020-04-23 18:02:43,also added to the docstring at the top of the file.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414010082,414010082,test/functional/test_framework/mininode.py
MarcoFalke,2020-04-23 19:01:14,"This doesn't work. You can try by modifying the string above\n\nThe type needs to be an array",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414048438,414048438,test/functional/mempool_unbroadcast.py
MarcoFalke,2020-04-23 19:03:27,Please use the same for consistency. Either by copy-pasting from above or by putting the two lines into a function,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414049819,414049819,src/net_processing.cpp
MarcoFalke,2020-04-23 19:12:28,"Any reason why these are inline? I think we don't that elsewhere.\n\nAlso, it might be good to move the implementation of this one to the cpp file, so that logging doesn't have to be included in the header and compiled on every include.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414055529,414055529,src/txmempool.h
amitiuttarwar,2020-04-23 19:28:45,"thought it was more efficient since these functions are so simple. \n\nwe don't have inline functions in txmempool, but there are plenty scattered around the codebase. \n\n👍 RE logging. I can def move this function to the cpp. Do you prefer I move them all? ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414065418,414065418,src/txmempool.h
MarcoFalke,2020-04-23 19:35:46,"The others can stay, but I think the `inline` keyword is still not needed? (With ""inline"" I meant ""`inline`"" (the keyword))",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414069725,414069725,src/txmempool.h
amitiuttarwar,2020-04-23 20:01:17,"oh interesting.. reading around, seems like `inline` keyword is just a compiler hint & usually the compiler will deduce when necessary? the code compiles fine when I remove them. is there any harm in leaving it in? on the flip, is there any time they *should* be used? ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414085582,414085582,src/txmempool.h
sipa,2020-04-23 20:10:58,"@amitiuttarwar `inline` has two independent effects:\n* A hint to the compiler that it should try inlining the function (both in C and C++). Modern compilers will do this automatically in many cases, with or without the keyword.\n* Indicating that this symbol may appear in multiple modules (but they will all be identical). This is only in C++, and makes it possible to have code in header files (",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414091130,414091130,src/txmempool.h
MarcoFalke,2020-04-23 20:24:52,@amitiuttarwar Done here: #18751 ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414099396,414099396,src/net_processing.cpp
amitiuttarwar,2020-04-23 21:18:53,"ah okay, this is very helpful. I think I'm understanding- its a clue to the compiler to try expanding in line, as well as an indicator that the symbol defined in more than one translation unit are the same, which the compiler can enforce. when a member function is defined, not just declared, within the class definition- the compiler automatically interprets this as an inline member function. so, t",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414131405,414131405,src/txmempool.h
amitiuttarwar,2020-04-23 21:24:10,"but, since I'm pulling out the definition of `RemoveUnbroadcastTx` to `txmempool.cpp`, it will no longer be automatically inlined. So, adding `inline` there would be a hint to the compiler to inline the function at the call sites, but the compiler might do it anyway / ignore. \n\nis this sounding correct?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414134271,414134271,src/txmempool.h
sipa,2020-04-23 21:25:21,"> that the symbol defined in more than one translation unit are the same\n\nNot just that they're the same; that they may occur in multiple translation units in the first place. Without `inline` (or a member being defined in a class body), you will get a linker error if you define the same symbol in multiple translation units.\n\nUnless (there's always an unless...), it's in an anonymous names",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414134919,414134919,src/txmempool.h
sipa,2020-04-23 21:30:00,"Once you've moved the function definition to the .cpp file, it can only get inlined anymore inside the txmempool.cpp translation unit (until we enable LTO, which we currently don't do by default or in releases). With or without `inline`, it will still get inlined there, and with or without `inline` it won't get inlined elsewhere. Adding the keyword may still make it a stronger hint to the compiler",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414137349,414137349,src/txmempool.h
amitiuttarwar,2020-04-23 21:38:52,"ok ya, got the part where `inline` indicates permission for same symbol in multiple translation units. the part about `inline` in `.cpp` being limited to the file unless the optimization is enabled makes sense. and the special case for anonymous namespace is 🤯 and I'm going to go have to learn / tinker more 😛 \n\nbut first I'm going to push fixups. thanks so much for these explanations! I'm lear",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414141955,414141955,src/txmempool.h
amitiuttarwar,2020-04-23 21:48:43,good catch. fixed,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414147048,414147048,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-23 21:48:52,fixed,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414147133,414147133,src/net_processing.cpp
amitiuttarwar,2020-04-23 21:50:17,"removed `inline` keywords, moved `RemoveUnbroadcastTx` function definition to `txmempool.cpp` & removed including `logging.h` in the header.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414147829,414147829,src/txmempool.h
sipa,2020-04-23 22:42:39,"Perhaps this section for deserializing unbroadcast txids can be moved to a separate `try` ... `catch` block, so that the normal ""Imported ..."" message appears rather than a deserialization error?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414172020,414172020,src/validation.cpp
amitiuttarwar,2020-04-23 23:41:57,is this in regards to preventing the one-time error when upgrading? or more general possible errors?,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414195526,414195526,src/validation.cpp
sipa,2020-04-23 23:53:24,"Ah, it seems the return value of LoadMempool is actually ignored in case of failure, so it's indeed just a warning issue. It would seem cleaner that LoadMempool returns either returns true for successfully loaded (whether unbroadcast_txids was present or not), and false + empty mempool otherwise. That's just code esthetics though, no need to address it here.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414199728,414199728,src/validation.cpp
naumenkogs,2020-04-24 13:28:11,"Imagine in future we will not care about privacy here (e.g., use Tor or whatnot), and allow `push` for unsolicited GETDATA.\nThen, if the condition for rebroadcast is still `if (push)` it would be trivial to censor a transaction by sending unsolicited GETDATA. It means that with this code, effectiveness of rebroadcast depend on this privacy behaviour we have.\nI'm afraid that this non-obvious re",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414575673,414575673,src/net_processing.cpp
MarcoFalke,2020-04-24 13:39:46,"Sorry, I don't follow. How would a node send GETDATA without knowing the txid? Also, how would it censor (prevent you other connections from sending a GETDATA) by just sending a GETDATA?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414583726,414583726,src/net_processing.cpp
fjahr,2020-04-24 17:07:51,"You are missing the parenthesis behind the function call: `node.disconnect_p2ps()` so this line is not doing the disconnecting at the moment. So the comment is indeed wrong and it just ""accidentally"" works because `P2PTxInvStore` doesn't send a `GETDATA`. I think I would expect it to send a `GETDATA` because it is part of the framework now, but in general, I think the `P2PInterface` is there so yo",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414729953,414729953,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-24 20:20:36,"I'm not fully following either, but a couple of points to highlight: \n- lets distinguish *unbroadcast* from *rebroadcast*. unbroadcast is extra attempts at successful initial broadcast. rebroadcast is repeated broadcasts (from the POV of the node, which cannot know full picture). \n- in this implementation, if victim sends INV to only one peer, peer is adversarial, replies back with GETDATA but",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414839572,414839572,src/net_processing.cpp
amitiuttarwar,2020-04-24 20:23:50,"🤦‍♀️ sigh. thanks for catching! \n\nya I agree with the reasoning of in test vs framework. I'll do a small followup to add parens & have `P2PTxInvStore` call through super. ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414841223,414841223,test/functional/mempool_unbroadcast.py
naumenkogs,2020-04-24 21:13:03,"Imagine a lightning node submits a tx, but it is offline, and will be online in 30 minutes to relay it from Unbroadcast.\nNow an attacker connect to the victim once they got online, and send GETDATA for that transaction (before a victim broadcasts from unbroadcast).\n\nRight now, it will be ignored, because it's unsolicited (for privacy reasons!).\nIf we discard those privacy reasons, and now ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414866281,414866281,src/net_processing.cpp
ariard,2020-04-24 23:14:40,"Yes that's a good point, in LN there is class of transaction where txid is known from remote party due to the fact they counter-sign them (HTLC-timeout) but honest party have to broadcast with time-constrain to avoid any risk of money-loss.\n\nRight now most of implementations are pretty aggressive at triggering rebroadcast at every block, i.e calling again `sendrawtransaction` which isn't great",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414913018,414913018,src/net_processing.cpp
MarcoFalke,2020-04-24 23:21:07,"A simpler fix would be to add a one-line check that `pfrom` is outbound, no?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414914956,414914956,src/net_processing.cpp
ariard,2020-04-24 23:42:02,"89eeb4a\n\nShould we annotate this new methods `EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs)` to increase confidence that lock order is preserved ? (like some of them are called from node helpers code and we may refactor lock tacking there at some point)",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414920979,414920979,src/txmempool.h
ariard,2020-04-24 23:49:56,"e25e42f\n\nYou could have comment that rational of recursively calling `scheduleFromNow` is to get a different `delta` every time and that way avoid an observable reattempt-period fingerprint.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414923208,414923208,src/net_processing.cpp
ariard,2020-04-24 23:52:16,"dc1da48\n\n@MarcoFalke should we add a release note for this, I mean that's a substantial wallet behavior change and people may have stuff depending on this ? ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414923848,414923848,src/wallet/wallet.cpp
ariard,2020-04-25 00:31:59,"I think that's okay as a fix, it won't degrade the reliability improvement of aimed by this PR because we already announce sooner to outbound. But we should document better these maybe-cases of time-sensitive tx propagation obstruction (both at p2p/mempool layers) like last thread on ml shows.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414934194,414934194,src/net_processing.cpp
amitiuttarwar,2020-04-25 01:20:40,yeah definitely. I'm planning to add a release note as a follow up.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414944454,414944454,src/wallet/wallet.cpp
jonatack,2020-04-26 18:58:10,"In e25e42f, would suggest replacing the two instances of `const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});` and their associated comments, with a well-named function that can be called directly within each `scheduleFromNow`. The function could be Doxygen-commented with @ariard's https://github.com/bitcoin/bitcoin/pull/18038#discussion_r4149",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415376599,415376599,src/net_processing.cpp
jonatack,2020-04-27 10:46:29,"297a178 suggestion\n```diff\n+MAX_INITIAL_BROADCAST_DELAY = 15 * 60  # 15 minutes in seconds\n \n class MempoolUnbroadcastTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -65,7 +66,7 @@ class MempoolUnbroadcastTest(BitcoinTestFramework):\n         connect_nodes(node, 1)\n \n         # fast forward into the future & ensure that the second node has the txns\n-        node.m",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415707349,415707349,test/functional/mempool_unbroadcast.py
jonatack,2020-04-27 10:48:21,"297a178 is the 5 second sleep necessary? It adds 50% to the run time of this file which appears to pass reliably without it. If it is needed, could add a comment explaining why?",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415708579,415708579,test/functional/mempool_unbroadcast.py
jonatack,2020-04-27 10:50:29,"297a178 this looks like a bug?\n```diff\n-        node.disconnect_p2ps\n+        node.disconnect_p2ps()\n```",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415709839,415709839,test/functional/mempool_unbroadcast.py
jonatack,2020-04-27 11:58:33,"In dc1da48 I think a test is missing here to check that the transaction is not rebroadcast the first 12 hours.\n```python\n        # Check transaction is rebroadcast in 12-36 hour time interval.\n        time_now = int(time.time())\n\n        self.log.info(""Bump time 12 hours from now, check transaction is not yet rebroadcast"")\n        rebroadcast_time = time_now  + (12 * 60 * 60)\n       ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415750840,415750840,test/functional/wallet_resendwallettransactions.py
jonatack,2020-04-27 12:45:41,"> [89eeb4a](https://github.com/bitcoin/bitcoin/commit/89eeb4a3335f8e871cc3f5286af4546dff66172a)\n> \n> Should we annotate this new methods `EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs)` to increase confidence that lock order is preserved ? (like some of them are called from node helpers code and we may refactor lock tacking there at some point)\n\nWas asking myself this as well.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415780848,415780848,src/txmempool.h
MarcoFalke,2020-04-27 12:49:21,"Enforcing lock order with annotations has never been done in the past. This is generally a layer violation, see also https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-605657525",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r415783405,415783405,src/txmempool.h
jnewbery,2020-04-28 18:20:28,"For follow-up PR: I think it should now be possible to remove the `nLastResend` logic, since we'd always expect there to be a block in the 12-36 hours since the last rebroadcast attempt.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416826914,416826914,src/wallet/wallet.cpp
jnewbery,2020-04-28 18:32:02,"I think it's to give the scheduler thread time to wake and call `ReattemptInitialBroadcast()` again. If you remove the sleep, then the transaction could potentially be broadcast after the assert_equal below and the test wouldn't test that the tx isn't being unbroadcast.\n\nI think the sleep could be a bit shorter, and a comment wouldn't harm, but only if the PR is being retouched.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416834316,416834316,test/functional/mempool_unbroadcast.py
jnewbery,2020-04-28 18:36:32,"When you're retouching this, I suggest moving the disconnection logic to the end of `test_broadcast()`, so that each sub-test starts with the same state (no connections). It's not a problem now, but in larger test files where there are many subtests, lingering state between subtests makes debugging more difficult.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416837031,416837031,test/functional/mempool_unbroadcast.py
jnewbery,2020-04-28 18:38:07,"(for a future PR) it'd be a nice enhancement to update:\n\n- the `getmempoolinfo` RPC to show an unbroadcast count\n- the `getrawmempool` RPCs to show an unbroadcast flag for each transaction\n\nThat'd make it easier to test this directly rather than through log-parsing.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416837980,416837980,test/functional/mempool_unbroadcast.py
jnewbery,2020-04-28 19:18:29,"For a follow-up, I think we should sanity check that the transaction still exists in the mempool before rebroadcasting. If not, delete the entry from the unbroadcast set.\n\nIf we don't do this, then a logic error where the entry isn't removed from the unbroadcast set when the tx is removed from the mempool turns into a memory leak and a network spam.\n\n(Removal logic in removeUnchecked() is ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416861609,416861609,src/net_processing.cpp
jnewbery,2020-04-28 19:19:48,"I think this could be an unordered_set for constant-time insertion/lookup, but the size is going to be so small that it doesn't matter.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416862364,416862364,src/txmempool.h
amitiuttarwar,2020-04-28 21:42:35,👍 added in https://github.com/bitcoin/bitcoin/pull/18807/commits/b5bb038f0eae2eefb923343fdb05b3992c32c208,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416941785,416941785,src/net_processing.cpp
amitiuttarwar,2020-04-28 21:43:09,added here: https://github.com/bitcoin/bitcoin/pull/18807/commits/bff4e9a5005409811e3f48c8d8877d63b32c9054,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416942057,416942057,src/wallet/wallet.cpp
amitiuttarwar,2020-04-28 21:48:27,fixed here: https://github.com/bitcoin/bitcoin/pull/18807/commits/97f15b487f064cf359e8042afa25a5d0fb88bf8c ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416944577,416944577,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-28 21:49:03,"yes, see https://github.com/bitcoin/bitcoin/pull/18038#discussion_r414729953.\nfixed in https://github.com/bitcoin/bitcoin/pull/18807/commits/97f15b487f064cf359e8042afa25a5d0fb88bf8c.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416944839,416944839,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-28 21:49:48,taken in https://github.com/bitcoin/bitcoin/pull/18807/commits/97f15b487f064cf359e8042afa25a5d0fb88bf8c (PR #18807),https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416945180,416945180,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-28 21:52:13,yup. reduced sleep and added comment here: 97f15b487f064cf359e8042afa25a5d0fb88bf8c (PR #18807),https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416946204,416946204,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-28 21:53:01,thanks! added test here: e77984eaeb1fc10d66e64574f006c2781b38fec7 (PR#18807),https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416946573,416946573,test/functional/wallet_resendwallettransactions.py
amitiuttarwar,2020-04-28 21:53:59,"thanks for the suggestion but I am a pass. I tried it out and it comes out to be about double the code overall, and a lot of passing the scheduler around.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416946993,416946993,src/net_processing.cpp
amitiuttarwar,2020-04-28 21:55:04,"yes good point. noted here https://github.com/bitcoin/bitcoin/pull/18807#issue-410374742 and will incorporate into the follow-up. resolving this comment in favor of tracking there.\n\nthanks!  ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416947490,416947490,src/wallet/wallet.cpp
amitiuttarwar,2020-04-28 21:56:00,makes sense. updated here: 97f15b487f064cf359e8042afa25a5d0fb88bf8c (PR #18807) and will keep in mind when writing future tests. ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416947934,416947934,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-28 21:58:01,yeah totally agree. also was planning this for follow up. I've noted as a todo here: https://github.com/bitcoin/bitcoin/pull/18807#issue-410374742. Resolving this conversation and will track there.,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416948901,416948901,src/net_processing.cpp
jonatack,2020-04-28 22:00:14,thanks @amitiuttarwar ,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416949893,416949893,test/functional/wallet_resendwallettransactions.py
amitiuttarwar,2020-04-28 22:02:09,"good idea! def seems useful to expose some unbroadcast info via the RPCs. I've added it to the follow up todos here: https://github.com/bitcoin/bitcoin/pull/18807#issue-410374742.\n\nbut not sure how what you're proposing would lead to being able to change this test? because this test is verifying the _reason_ the txn was removed from unbroadcast set. If we just check that its no longer in the s",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416950770,416950770,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-28 22:20:51,"ah, that makes sense. enforces the same uniqueness guarantees that I need, but the ordering is unnecessary.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r416958964,416958964,src/txmempool.h
amitiuttarwar,2020-04-29 00:57:16,"we don't acquire `cs_main` lock for this function, so I don't understand how this comment is applicable? ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417012141,417012141,src/txmempool.h
jnewbery,2020-04-29 01:20:08,"If you disconnect all P2P connections, then there's no peer to send a GETDATA.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417017563,417017563,test/functional/mempool_unbroadcast.py
MarcoFalke,2020-04-29 01:25:12,"Maybe the comments were not about lock order, but whether the cs_main lock is needed as per #14963? :thinking: \n\nHaven't thought about this, but if I had to guess, I'd say no.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417018771,417018771,src/txmempool.h
amitiuttarwar,2020-04-29 01:48:40,"in that case yes (assuming the test actually works and you don't accidentally write a bug like I did :)) \n\nwhat I'm trying to get at is that the log parsing tests the expectation more directly by confirming the reason for removal. the removal reasons / code pathways are simple enough right now, but over time they might change and if we were just checking for removal the test might not fail eve",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417024192,417024192,test/functional/mempool_unbroadcast.py
amitiuttarwar,2020-04-29 02:19:49,"ok, updating to check `pfrom` is from outbound sounds good to me. increases delivery guarantee for the general case too. I added this to the todo list on follow ups pr https://github.com/bitcoin/bitcoin/pull/18807#issue-410374742. code is just 1 line change, but I want to make sure to update other relevant comments to clarify its removed via _outbound_ getdata & hopefully add a test case. \n\nI'",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417031606,417031606,src/net_processing.cpp
robot-visions,2020-04-29 06:31:56,"If I add `time.sleep(10)` before or after `connect_nodes`, then the test fails locally for me (the mempool for node 2 has 6, instead of the expected 5 transactions).\n\nDoes this test depend on particular timings (e.g. node 1 doesn't have time to relay the transaction to node 2 before the nodes are all shut down)?  If so, in a future change would it make sense to either (i) document the necessar",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417093232,417093232,test/functional/mempool_persist.py
jnewbery,2020-04-29 15:31:00,"I'm not sure this is actually testing anything. If you bump the mocktime and then immediately assert that you haven't received the tx, you haven't given the scheduler any time to do anything.",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417408126,417408126,test/functional/wallet_resendwallettransactions.py
amitiuttarwar,2020-04-29 18:04:20,"ah, based on another review comment or two, ended up implementing here 191fc04e9bb99589f204ccfceece7d715a82f4c0 (PR #18807)",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r417509808,417509808,src/validation.cpp
amitiuttarwar,2020-05-01 19:27:34,"on further thought, I don't think it makes sense to only remove unbroadcast txns on receiving `GETDATA` from outbound peers. \n\nthis relies on the expectation that outbound peers get the txn before inbound peers (otherwise they might relay), which isn't necessarily true in edge cases. if we were to implement, I'd want to add logic to remove from unbroadcast set if we receive an `inv` from a pee",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r418699291,418699291,src/net_processing.cpp
amitiuttarwar,2020-05-01 21:55:21,"good catch! this is a bug. line 87 isn't actually disconnecting the two nodes because its passing `node_num` of `2` rather than `1`\n\nI've added commit 41fd9c1b7b372d7769e005db1d92000c0373651e on the follow-up PR #18807 to fix this issue.\n\nthank you! ",https://github.com/bitcoin/bitcoin/pull/18038#discussion_r418754629,418754629,test/functional/mempool_persist.py
robot-visions,2020-05-02 03:33:34,Confirmed that with 41fd9c1b7b372d7769e005db1d92000c0373651e the test passes even with random `time.sleep(10)` thrown.  Thanks for updating!,https://github.com/bitcoin/bitcoin/pull/18038#discussion_r418864246,418864246,test/functional/mempool_persist.py
