[
  {
    "sha": "a4f78f00d1063723ba27c2754d82ef56c4b8183d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGY3OGYwMGQxMDYzNzIzYmEyN2MyNzU0ZDgyZWY1NmM0YjgxODNk",
    "commit": {
      "author": {
        "name": "Ian T",
        "email": "hello@chainquery.com",
        "date": "2015-08-31T19:03:58Z"
      },
      "committer": {
        "name": "Ian T",
        "email": "hello@chainquery.com",
        "date": "2015-08-31T19:03:58Z"
      },
      "message": "Update rpc generate help to include \"required\"\n\nThe `generate` RPC has no default numblocks and a numeric value is required.",
      "tree": {
        "sha": "df6d0de2b3198065185f1af2e8dca4fac643880c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df6d0de2b3198065185f1af2e8dca4fac643880c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4f78f00d1063723ba27c2754d82ef56c4b8183d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f78f00d1063723ba27c2754d82ef56c4b8183d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f78f00d1063723ba27c2754d82ef56c4b8183d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f78f00d1063723ba27c2754d82ef56c4b8183d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "af9305a7e8a40014508fb66a22ae95e8afe142c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9305a7e8a40014508fb66a22ae95e8afe142c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af9305a7e8a40014508fb66a22ae95e8afe142c6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "91de37fdccffc908b01b70c7e469821653e3fd96",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4f78f00d1063723ba27c2754d82ef56c4b8183d/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4f78f00d1063723ba27c2754d82ef56c4b8183d/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a4f78f00d1063723ba27c2754d82ef56c4b8183d",
        "patch": "@@ -119,7 +119,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n             \"generate numblocks\\n\"\n             \"\\nMine blocks immediately (before the RPC call returns)\\n\"\n             \"\\nNote: this function can only be used on the regtest network\\n\"\n-            \"1. numblocks    (numeric) How many blocks are generated immediately.\\n\"\n+            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n             \"\\nResult\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "380fdb4326187dfdec9675dcc72e4b0a909c6bd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODBmZGI0MzI2MTg3ZGZkZWM5Njc1ZGNjNzJlNGIwYTkwOWM2YmQ4",
    "commit": {
      "author": {
        "name": "Ian T",
        "email": "hello@chainquery.com",
        "date": "2015-08-31T19:04:54Z"
      },
      "committer": {
        "name": "Ian T",
        "email": "hello@chainquery.com",
        "date": "2015-08-31T19:04:54Z"
      },
      "message": "Merge pull request #1 from ChainQuery/ChainQuery-rpc-generate-help-required\n\nUpdate rpc generate help to include \"required\"",
      "tree": {
        "sha": "df6d0de2b3198065185f1af2e8dca4fac643880c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df6d0de2b3198065185f1af2e8dca4fac643880c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/380fdb4326187dfdec9675dcc72e4b0a909c6bd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/380fdb4326187dfdec9675dcc72e4b0a909c6bd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/380fdb4326187dfdec9675dcc72e4b0a909c6bd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/380fdb4326187dfdec9675dcc72e4b0a909c6bd8/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "af9305a7e8a40014508fb66a22ae95e8afe142c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9305a7e8a40014508fb66a22ae95e8afe142c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af9305a7e8a40014508fb66a22ae95e8afe142c6"
      },
      {
        "sha": "a4f78f00d1063723ba27c2754d82ef56c4b8183d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f78f00d1063723ba27c2754d82ef56c4b8183d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f78f00d1063723ba27c2754d82ef56c4b8183d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "91de37fdccffc908b01b70c7e469821653e3fd96",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/380fdb4326187dfdec9675dcc72e4b0a909c6bd8/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/380fdb4326187dfdec9675dcc72e4b0a909c6bd8/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=380fdb4326187dfdec9675dcc72e4b0a909c6bd8",
        "patch": "@@ -119,7 +119,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n             \"generate numblocks\\n\"\n             \"\\nMine blocks immediately (before the RPC call returns)\\n\"\n             \"\\nNote: this function can only be used on the regtest network\\n\"\n-            \"1. numblocks    (numeric) How many blocks are generated immediately.\\n\"\n+            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n             \"\\nResult\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "7552d1e3df902fbce4775a3ea08b4e171ee86d45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTUyZDFlM2RmOTAyZmJjZTQ3NzVhM2VhMDhiNGUxNzFlZTg2ZDQ1",
    "commit": {
      "author": {
        "name": "Chain Query",
        "email": "hello@chainquery.com",
        "date": "2015-09-03T17:08:51Z"
      },
      "committer": {
        "name": "Chain Query",
        "email": "hello@chainquery.com",
        "date": "2015-09-03T17:08:51Z"
      },
      "message": "Revert \"Merge pull request #1 from ChainQuery/ChainQuery-rpc-generate-help-required\"\n\nThis reverts commit 380fdb4326187dfdec9675dcc72e4b0a909c6bd8, reversing\nchanges made to af9305a7e8a40014508fb66a22ae95e8afe142c6.",
      "tree": {
        "sha": "a9e112f54f6db66537e90ba35c38edd2678ab588",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9e112f54f6db66537e90ba35c38edd2678ab588"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7552d1e3df902fbce4775a3ea08b4e171ee86d45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7552d1e3df902fbce4775a3ea08b4e171ee86d45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7552d1e3df902fbce4775a3ea08b4e171ee86d45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7552d1e3df902fbce4775a3ea08b4e171ee86d45/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "380fdb4326187dfdec9675dcc72e4b0a909c6bd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/380fdb4326187dfdec9675dcc72e4b0a909c6bd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/380fdb4326187dfdec9675dcc72e4b0a909c6bd8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "620a46be156920bf1fb28f62d54ccde96f905319",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7552d1e3df902fbce4775a3ea08b4e171ee86d45/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7552d1e3df902fbce4775a3ea08b4e171ee86d45/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=7552d1e3df902fbce4775a3ea08b4e171ee86d45",
        "patch": "@@ -119,7 +119,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n             \"generate numblocks\\n\"\n             \"\\nMine blocks immediately (before the RPC call returns)\\n\"\n             \"\\nNote: this function can only be used on the regtest network\\n\"\n-            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"1. numblocks    (numeric) How many blocks are generated immediately.\\n\"\n             \"\\nResult\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGQyNWZhMzdhMTRjMTFlZTJjN2ZiZDgxNDZmZjZiOTQ0ZGVjMTMy",
    "commit": {
      "author": {
        "name": "Chain Query",
        "email": "hello@chainquery.com",
        "date": "2015-09-03T17:22:23Z"
      },
      "committer": {
        "name": "Chain Query",
        "email": "hello@chainquery.com",
        "date": "2015-09-03T17:22:23Z"
      },
      "message": "Merge remote-tracking branch 'bitcoin/master'",
      "tree": {
        "sha": "0caade1f90630a930a73e5dd61293f31e18e0b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0caade1f90630a930a73e5dd61293f31e18e0b08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7552d1e3df902fbce4775a3ea08b4e171ee86d45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7552d1e3df902fbce4775a3ea08b4e171ee86d45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7552d1e3df902fbce4775a3ea08b4e171ee86d45"
      },
      {
        "sha": "69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69dc5b51a023a23ae66017f05fa43a0203f3c627"
      }
    ],
    "stats": {
      "total": 415,
      "additions": 270,
      "deletions": 145
    },
    "files": [
      {
        "sha": "c8785144adc03df3400e315b22d8d73e4eb2dc37",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -6,6 +6,7 @@\n \n os: linux\n language: cpp\n+compiler: gcc\n env:\n   global:\n     - MAKEJOBS=-j3\n@@ -30,18 +31,21 @@ matrix:\n     - compiler: \": ARM\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n+      env: HOST=i686-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": 32-bit + dash\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n+      env: HOST=x86_64-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": bitcoind\"\n       env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n+  exclude:\n+    - compiler: gcc\n install:\n+    - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n before_script:"
      },
      {
        "sha": "dfde0d43ecee34e6bab14b74fc673807df98e978",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -204,7 +204,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/pull-tester/run-bitcoin-cli qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n+EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n "
      },
      {
        "sha": "460c1f8e2edc7e08eba3b49e60c41ded9b0c2434",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 28,
        "deletions": 25,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -11,57 +11,60 @@ The following is a list of assets used in the bitcoin source and their proper at\n \n ### Assets Used\n     src/qt/res/icons/add.png\n-    src/qt/res/icons/address-book.png,\n+    src/qt/res/icons/address-book.png\n     src/qt/res/icons/configure.png\n     src/qt/res/icons/debugwindow.png\n-    src/qt/res/icons/edit.png,\n-    src/qt/res/icons/exitcopy.png\n-    src/qt/res/icons/editpaste.png,\n+    src/qt/res/icons/edit.png\n+    src/qt/res/icons/editcopy.png\n+    src/qt/res/icons/editpaste.png\n     src/qt/res/icons/export.png\n-    src/qt/res/icons/eye.png,\n+    src/qt/res/icons/eye.png\n     src/qt/res/icons/filesave.png\n-    src/qt/res/icons/history.png,\n+    src/qt/res/icons/history.png\n     src/qt/res/icons/info.png\n-    src/qt/res/icons/key.png,\n+    src/qt/res/icons/key.png\n     src/qt/res/icons/lock_*.png\n-    src/qt/res/icons/open.png,\n+    src/qt/res/icons/open.png\n     src/qt/res/icons/overview.png\n-    src/qt/res/icons/quit.png,\n+    src/qt/res/icons/quit.png\n     src/qt/res/icons/receive.png\n-    src/qt/res/icons/remove.png,\n+    src/qt/res/icons/remove.png\n     src/qt/res/icons/send.png\n-    src/qt/res/icons/synced.png,\n+    src/qt/res/icons/synced.png\n     src/qt/res/icons/transaction*.png\n-    src/qt/res/icons/tx_output.png,\n+    src/qt/res/icons/tx_output.png\n     src/qt/res/icons/warning.png\n \n Other\n -----------------------\n \n ### Info\n * Designer: Jonas Schnelli, Bitboy, Stephen Hutchings, Marco Falke\n-* Bitcoin Icon: Based on the original bitcoin logo from Bitboy\n-* Network connection icon: Inspired by flow-merge.svg from Stephen Hutchings\n-* Some icons are based on Stephan Hutchings Typicons\n+* Bitcoin icon: Based on the original bitcoin logo from Bitboy\n+* Network connection icons: Marco Falke, inspired by flow-merge.svg from Stephen Hutchings\n+* Transaction-mined icon: Jonas Schnelli\n+* Other icons are based on Stephan Hutchings Typicons\n * License: MIT\n \n ### Assets Used\n     src/qt/res/icons/about.png\n-    src/qt/res/icons/about_qt.png,\n+    src/qt/res/icons/about_qt.png\n     src/qt/res/icons/bitcoin.icns\n-    src/qt/res/icons/bitcoin.ico,\n+    src/qt/res/icons/bitcoin.ico\n     src/qt/res/icons/bitcoin.png\n-    src/qt/res/icons/clock*.png,\n+    src/qt/res/icons/clock*.png\n     src/qt/res/icons/connect*.png\n-    src/qt/res/icons/eye_minus.png,\n+    src/qt/res/icons/eye_minus.png\n     src/qt/res/icons/eye_plus.png\n-    src/qt/res/icons/verify.png,\n+    src/qt/res/icons/verify.png\n     src/qt/res/icons/tx_inout.png\n-    src/qt/res/icons/tx_input.png,\n-    src/qt/res/src/bitcoin.svg,\n-    src/qt/res/src/clock*.svg\n-    src/qt/res/src/connect*.svg,\n+    src/qt/res/icons/tx_input.png\n+    src/qt/res/icons/tx_mined.png\n+    src/qt/res/src/bitcoin.svg\n+    src/qt/res/src/clock_*.svg\n+    src/qt/res/src/connect-*.svg\n     src/qt/res/src/mine.svg\n     src/qt/res/src/qt.svg\n-    src/qt/res/src/tx*.svg,\n+    src/qt/res/src/tx_*.svg\n+    src/qt/res/src/transaction0.svg\n     src/qt/res/src/verify.svg"
      },
      {
        "sha": "95e501ac6967b25e8e30eea666d9f77b7386ac56",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -154,7 +154,8 @@ make install\n \n # Configure Bitcoin Core to use our own-built instance of BDB\n cd $BITCOIN_ROOT\n-./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n+./autogen.sh\n+./configure LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" # (other args...)\n ```\n \n **Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below)."
      },
      {
        "sha": "f928cd09e347946e59cbfe0fc5ded48acd201db3",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -5,8 +5,8 @@ CURDIR=$(cd $(dirname \"$0\"); pwd)\n # Get BUILDDIR and REAL_BITCOIND\n . \"${CURDIR}/tests-config.sh\"\n \n-export BITCOINCLI=${BUILDDIR}/qa/pull-tester/run-bitcoin-cli\n export BITCOIND=${REAL_BITCOIND}\n+export BITCOINCLI=${REAL_BITCOINCLI}\n \n #Run the tests\n "
      },
      {
        "sha": "93c25bb9fca29e20e4b3b75718978e303268fac1",
        "filename": "qa/pull-tester/run-bitcoin-cli",
        "status": "removed",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7552d1e3df902fbce4775a3ea08b4e171ee86d45/qa/pull-tester/run-bitcoin-cli",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7552d1e3df902fbce4775a3ea08b4e171ee86d45/qa/pull-tester/run-bitcoin-cli",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoin-cli?ref=7552d1e3df902fbce4775a3ea08b4e171ee86d45",
        "patch": "@@ -1,13 +0,0 @@\n-#!/bin/bash\n-\n-# This is a thin wrapper around bitcoin-cli that strips the Windows-style EOLs\n-# from the output if present. It is necessary when using bitcoin-cli.exe on\n-# Linux since shells will interpret the line-endings as part of the result.\n-\n-CURDIR=$(cd $(dirname \"$0\"); pwd)\n-# Get BUILDDIR and REAL_BITCOIND\n-\n-# Grab the value of $REAL_BITCOINCLI which may be bitcoin-cli.exe.\n-. \"${CURDIR}/tests-config.sh\"\n-\n-\"${REAL_BITCOINCLI}\" \"$@\" | sed 's/\\r//'"
      },
      {
        "sha": "3759cc8162871dcea0f09b1e7cae3428fa460f72",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -78,8 +78,17 @@ def initialize_chain(test_dir):\n     bitcoind and bitcoin-cli must be in search path.\n     \"\"\"\n \n-    if not os.path.isdir(os.path.join(\"cache\", \"node0\")):\n-        devnull = open(\"/dev/null\", \"w+\")\n+    if (not os.path.isdir(os.path.join(\"cache\",\"node0\"))\n+        or not os.path.isdir(os.path.join(\"cache\",\"node1\")) \n+        or not os.path.isdir(os.path.join(\"cache\",\"node2\")) \n+        or not os.path.isdir(os.path.join(\"cache\",\"node3\"))):\n+\n+        #find and delete old cache directories if any exist\n+        for i in range(4):\n+            if os.path.isdir(os.path.join(\"cache\",\"node\"+str(i))): \n+                shutil.rmtree(os.path.join(\"cache\",\"node\"+str(i)))\n+\n+        devnull = open(os.devnull, \"w\")\n         # Create cache directories, run bitcoinds:\n         for i in range(4):\n             datadir=initialize_datadir(\"cache\", i)\n@@ -171,7 +180,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     args = [ binary, \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n-    devnull = open(\"/dev/null\", \"w+\")\n+    devnull = open(os.devnull, \"w\")\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n         print \"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n     subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir] +"
      },
      {
        "sha": "3aebe4f7be2f76cbb75aedd2cbb734c7256294d7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -335,7 +335,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n-    strUsage += HelpMessageOpt(\"-whiteconnections=<n>\", strprintf(_(\"Reserve this many inbound connections for whitelisted peers (default: %d)\"), 0));\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -754,25 +753,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n-    int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n-    nWhiteConnections = std::max(nUserWhiteConnections, 0);\n-\n-    if ((mapArgs.count(\"-whitelist\")) || (mapArgs.count(\"-whitebind\"))) {\n-        if (!(mapArgs.count(\"-maxconnections\"))) {\n-            // User is using whitelist feature,\n-            // but did not specify -maxconnections parameter.\n-            // Silently increase the default to compensate,\n-            // so that the whitelist connection reservation feature\n-            // does not inadvertently reduce the default\n-            // inbound connection capacity of the network.\n-            nMaxConnections += nWhiteConnections;\n-        }\n-    } else {\n-        // User not using whitelist feature.\n-        // Silently disable connection reservation,\n-        // for the same reason as above.\n-        nWhiteConnections = 0;\n-    }\n \n     // Trim requested connection counts, to fit into system limitations\n     nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n@@ -784,13 +764,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (nMaxConnections < nUserMaxConnections)\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n-    // Connection capacity is prioritized in this order:\n-    // outbound connections (hardcoded to 8),\n-    // then whitelisted connections,\n-    // then non-whitelisted connections get whatever's left (if any).\n-    if ((nWhiteConnections > 0) && (nWhiteConnections >= (nMaxConnections - 8)))\n-        InitWarning(strprintf(_(\"All non-whitelisted incoming connections will be dropped, because -whiteconnections is %d and -maxconnections is only %d.\"), nWhiteConnections, nMaxConnections));\n-\n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n     fDebug = !mapMultiArgs[\"-debug\"].empty();\n@@ -968,8 +941,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Using data directory %s\\n\", strDataDir);\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile().string());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n-    if (nWhiteConnections > 0)\n-        LogPrintf(\"Reserving %i of these connections for whitelisted inbound peers\\n\", nWhiteConnections);\n     std::ostringstream strErrors;\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);"
      },
      {
        "sha": "35fbec666594c6bf564442bd36d83d348395cbba",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -4522,6 +4522,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (pingUsecTime > 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom->nPingUsecTime = pingUsecTime;\n+                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime, pingUsecTime);\n                     } else {\n                         // This should never happen\n                         sProblem = \"Timing mishap\";"
      },
      {
        "sha": "4909d5fd408711b188ada68fd1ddfe0b3f2d0458",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 217,
        "deletions": 59,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -81,7 +81,6 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n-int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n std::string strSubVersion;\n \n@@ -776,6 +775,222 @@ void SocketSendData(CNode *pnode)\n \n static list<CNode*> vNodesDisconnected;\n \n+class CNodeRef {\n+public:\n+    CNodeRef(CNode *pnode) : _pnode(pnode) {\n+        LOCK(cs_vNodes);\n+        _pnode->AddRef();\n+    }\n+\n+    ~CNodeRef() {\n+        LOCK(cs_vNodes);\n+        _pnode->Release();\n+    }\n+\n+    CNode& operator *() const {return *_pnode;};\n+    CNode* operator ->() const {return _pnode;};\n+\n+    CNodeRef& operator =(const CNodeRef& other)\n+    {\n+        if (this != &other) {\n+            LOCK(cs_vNodes);\n+\n+            _pnode->Release();\n+            _pnode = other._pnode;\n+            _pnode->AddRef();\n+        }\n+        return *this;\n+    }\n+\n+    CNodeRef(const CNodeRef& other):\n+        _pnode(other._pnode)\n+    {\n+        LOCK(cs_vNodes);\n+        _pnode->AddRef();\n+    }\n+private:\n+    CNode *_pnode;\n+};\n+\n+static bool ReverseCompareNodeMinPingTime(const CNodeRef &a, const CNodeRef &b)\n+{\n+    return a->nMinPingUsecTime > b->nMinPingUsecTime;\n+}\n+\n+static bool ReverseCompareNodeTimeConnected(const CNodeRef &a, const CNodeRef &b)\n+{\n+    return a->nTimeConnected > b->nTimeConnected;\n+}\n+\n+class CompareNetGroupKeyed\n+{\n+    std::vector<unsigned char> vchSecretKey;\n+public:\n+    CompareNetGroupKeyed()\n+    {\n+        vchSecretKey.resize(32, 0);\n+        GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n+    }\n+\n+    bool operator()(const CNodeRef &a, const CNodeRef &b)\n+    {\n+        std::vector<unsigned char> vchGroupA, vchGroupB;\n+        CSHA256 hashA, hashB;\n+        std::vector<unsigned char> vchA(32), vchB(32);\n+\n+        vchGroupA = a->addr.GetGroup();\n+        vchGroupB = b->addr.GetGroup();\n+\n+        hashA.Write(begin_ptr(vchGroupA), vchGroupA.size());\n+        hashB.Write(begin_ptr(vchGroupB), vchGroupB.size());\n+\n+        hashA.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n+        hashB.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n+\n+        hashA.Finalize(begin_ptr(vchA));\n+        hashB.Finalize(begin_ptr(vchB));\n+\n+        return vchA < vchB;\n+    }\n+};\n+\n+static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n+    std::vector<CNodeRef> vEvictionCandidates;\n+    {\n+        LOCK(cs_vNodes);\n+\n+        BOOST_FOREACH(CNode *node, vNodes) {\n+            if (node->fWhitelisted)\n+                continue;\n+            if (!node->fInbound)\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            if (node->addr.IsLocal())\n+                continue;\n+            vEvictionCandidates.push_back(CNodeRef(node));\n+        }\n+    }\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Protect connections with certain characteristics\n+\n+    // Deterministically select 4 peers to protect by netgroup.\n+    // An attacker cannot predict which netgroups will be protected.\n+    static CompareNetGroupKeyed comparerNetGroupKeyed;\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Protect the 8 nodes with the best ping times.\n+    // An attacker cannot manipulate this metric without physically moving nodes closer to the target.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Protect the half of the remaining nodes which have been connected the longest.\n+    // This replicates the existing implicit behavior.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - static_cast<int>(vEvictionCandidates.size() / 2), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Identify the network group with the most connections\n+    std::vector<unsigned char> naMostConnections;\n+    unsigned int nMostConnections = 0;\n+    std::map<std::vector<unsigned char>, std::vector<CNodeRef> > mapAddrCounts;\n+    BOOST_FOREACH(const CNodeRef &node, vEvictionCandidates) {\n+        mapAddrCounts[node->addr.GetGroup()].push_back(node);\n+\n+        if (mapAddrCounts[node->addr.GetGroup()].size() > nMostConnections) {\n+            nMostConnections = mapAddrCounts[node->addr.GetGroup()].size();\n+            naMostConnections = node->addr.GetGroup();\n+        }\n+    }\n+\n+    // Reduce to the network group with the most connections\n+    vEvictionCandidates = mapAddrCounts[naMostConnections];\n+\n+    // Do not disconnect peers if there is only 1 connection from their network group\n+    if (vEvictionCandidates.size() <= 1)\n+        // unless we prefer the new connection (for whitelisted peers)\n+        if (!fPreferNewConnection)\n+            return false;\n+\n+    // Disconnect the most recent connection from the network group with the most connections\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+    vEvictionCandidates[0]->fDisconnect = true;\n+\n+    return true;\n+}\n+\n+static void AcceptConnection(const ListenSocket& hListenSocket) {\n+    struct sockaddr_storage sockaddr;\n+    socklen_t len = sizeof(sockaddr);\n+    SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n+    CAddress addr;\n+    int nInbound = 0;\n+    int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n+\n+    if (hSocket != INVALID_SOCKET)\n+        if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n+            LogPrintf(\"Warning: Unknown socket family\\n\");\n+\n+    bool whitelisted = hListenSocket.whitelisted || CNode::IsWhitelistedRange(addr);\n+    {\n+        LOCK(cs_vNodes);\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n+            if (pnode->fInbound)\n+                nInbound++;\n+    }\n+\n+    if (hSocket == INVALID_SOCKET)\n+    {\n+        int nErr = WSAGetLastError();\n+        if (nErr != WSAEWOULDBLOCK)\n+            LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n+        return;\n+    }\n+\n+    if (!IsSelectableSocket(hSocket))\n+    {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+        return;\n+    }\n+\n+    if (CNode::IsBanned(addr) && !whitelisted)\n+    {\n+        LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+        return;\n+    }\n+\n+    if (nInbound >= nMaxInbound)\n+    {\n+        if (!AttemptToEvictConnection(whitelisted)) {\n+            // No connection to evict, disconnect the new connection\n+            LogPrint(\"net\", \"failed to find an eviction candidate - connection dropped (full)\\n\");\n+            CloseSocket(hSocket);\n+            return;\n+        }\n+    }\n+\n+    CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+    pnode->AddRef();\n+    pnode->fWhitelisted = whitelisted;\n+\n+    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n+\n+    {\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(pnode);\n+    }\n+}\n+\n void ThreadSocketHandler()\n {\n     unsigned int nPrevNodeCount = 0;\n@@ -933,64 +1148,7 @@ void ThreadSocketHandler()\n         {\n             if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n             {\n-                struct sockaddr_storage sockaddr;\n-                socklen_t len = sizeof(sockaddr);\n-                SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n-                CAddress addr;\n-                int nInbound = 0;\n-                int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n-\n-                if (hSocket != INVALID_SOCKET)\n-                    if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n-                        LogPrintf(\"Warning: Unknown socket family\\n\");\n-\n-                bool whitelisted = hListenSocket.whitelisted || CNode::IsWhitelistedRange(addr);\n-                {\n-                    LOCK(cs_vNodes);\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                        if (pnode->fInbound)\n-                            nInbound++;\n-                }\n-\n-                if (hSocket == INVALID_SOCKET)\n-                {\n-                    int nErr = WSAGetLastError();\n-                    if (nErr != WSAEWOULDBLOCK)\n-                        LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n-                }\n-                else if (!IsSelectableSocket(hSocket))\n-                {\n-                    LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (nInbound >= nMaxInbound)\n-                {\n-                    LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n-                {\n-                    LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (CNode::IsBanned(addr) && !whitelisted)\n-                {\n-                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else\n-                {\n-                    CNode* pnode = new CNode(hSocket, addr, \"\", true);\n-                    pnode->AddRef();\n-                    pnode->fWhitelisted = whitelisted;\n-\n-                    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n-\n-                    {\n-                        LOCK(cs_vNodes);\n-                        vNodes.push_back(pnode);\n-                    }\n-                }\n+                AcceptConnection(hListenSocket);\n             }\n         }\n "
      },
      {
        "sha": "f370bf1ff4a00c0c7c074d0f9d034ca3b7f0f165",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dd25fa37a14c11ee2c7fbd8146ff6b944dec132/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4dd25fa37a14c11ee2c7fbd8146ff6b944dec132",
        "patch": "@@ -143,19 +143,8 @@ extern uint64_t nLocalServices;\n extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n \n-// The allocation of connections against the maximum allowed (nMaxConnections)\n-// is prioritized as follows:\n-// 1st: Outbound connections (MAX_OUTBOUND_CONNECTIONS)\n-// 2nd: Inbound connections from whitelisted peers (nWhiteConnections)\n-// 3rd: Inbound connections from non-whitelisted peers\n-// Thus, the number of connection slots for the general public to use is:\n-// nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + nWhiteConnections)\n-// Any additional inbound connections beyond limits will be immediately closed\n-\n /** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n-/** Number of connection slots to reserve for inbound from whitelisted peers */\n-extern int nWhiteConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n@@ -395,6 +384,8 @@ class CNode\n     int64_t nPingUsecStart;\n     // Last measured round-trip time.\n     int64_t nPingUsecTime;\n+    // Best measured round-trip time.\n+    int64_t nMinPingUsecTime;\n     // Whether a ping is requested.\n     bool fPingQueued;\n "
      }
    ]
  }
]