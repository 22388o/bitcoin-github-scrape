[
  {
    "sha": "67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzM3NmRhYWY1Y2I0ZmE4YjZhYWMwYTk0ZWQyZDI5ZTM0NjFiMjQ3",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-14T14:38:29Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T14:56:22Z"
      },
      "message": "policy: switch to weight units for feerate computation\n\nSince Segregated Witness activation and the transaction size being determined in\nwieght units, our internal logic for transaction size (and thus feerates) has relied\non virtual bytes.\nVirtual bytes are useful for non-technical end-user experience, but can cause some issues\nif the whole logic rely on this raw division.\n\nFor instance, if stored as an integer, the transaction size will be truncated, which can\nlead to wrong feerate calculation. In order to patch this, GetVirtualTransactionSize()\nrounds up.\nThis led to not only protecting the users from paying too-low fees and seeing their\ntransaction rejected, but this also implicitly increased the minimum feerate for\nrelaying transactions. For instance a minrelayfee(rate) of 1000sat/kvbyte is of 253sat/kWU,\nwhile we could expect it to be 250sat/perkWU (see issue # 13283).\n\nUsing constants in weight units will allow us to avoid raw roundings for feerate computation\nand to get an accurate feerate estimation (and a deterministic relay policy), while keeping\nthe cosiness of vbytes for non-technical end-users.",
      "tree": {
        "sha": "7c3f6ccf1a0ae9925f4c9722fb9cf3f25c1b6391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c3f6ccf1a0ae9925f4c9722fb9cf3f25c1b6391"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4hyxYACgkQ4T/BRc0/\nQwRvYQwAmim820qpNyDGecFyRa5yi4sUHm8mdlwN7E+hVlqy1eHMsitvFBtWidNz\nO2IuYicPA5TISHE79Hg9wo1jFS26+xnfkQmyRhLyMO4GqZ0UegdnY46X0BgAWYTV\nlRyX1cjFvQ1QTsqC2fQwXfEg8pm0IarpQZ2rmmp+3FrEtd0Mg6wLoMnYR4MxKGT2\n1qL0rZYWBxUtgDxjpRZD2ukUJEy3HgtzgVHLOQ12ZXv5K+EssuIlhccLxXNH+CVv\n/dwPPPhtMjcN+LR3R0KfD2f9GNkscq0uJhubGCuAfkUfCj37L/47HIIv7obxYPHJ\ncdG8rf5gAm1eQQ3G3qkietgHYZGUcZSd6T+3LyrDeU64J/xXV2uxVDuBpr1vWgX4\nx+itTOzyzotHWFTJDahU9zhhoUvg+zF7zHDhr0pBgftCORi/+2JuY0ZUwM3loajD\n1dZa/fpfODZTrngseSsC2KYc/q1B6DfRfWpz8tle+bmZh8CMkBOiOV+AHwER4enG\ne/Z4X5zr\n=ym94\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c3f6ccf1a0ae9925f4c9722fb9cf3f25c1b6391\nparent 0deba680646fc5c2bd4ead59933605970ae80995\nauthor darosior <darosior@protonmail.com> 1573742309 +0100\ncommitter darosior <darosior@protonmail.com> 1579272982 +0100\n\npolicy: switch to weight units for feerate computation\n\nSince Segregated Witness activation and the transaction size being determined in\nwieght units, our internal logic for transaction size (and thus feerates) has relied\non virtual bytes.\nVirtual bytes are useful for non-technical end-user experience, but can cause some issues\nif the whole logic rely on this raw division.\n\nFor instance, if stored as an integer, the transaction size will be truncated, which can\nlead to wrong feerate calculation. In order to patch this, GetVirtualTransactionSize()\nrounds up.\nThis led to not only protecting the users from paying too-low fees and seeing their\ntransaction rejected, but this also implicitly increased the minimum feerate for\nrelaying transactions. For instance a minrelayfee(rate) of 1000sat/kvbyte is of 253sat/kWU,\nwhile we could expect it to be 250sat/perkWU (see issue # 13283).\n\nUsing constants in weight units will allow us to avoid raw roundings for feerate computation\nand to get an accurate feerate estimation (and a deterministic relay policy), while keeping\nthe cosiness of vbytes for non-technical end-users.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0deba680646fc5c2bd4ead59933605970ae80995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0deba680646fc5c2bd4ead59933605970ae80995",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0deba680646fc5c2bd4ead59933605970ae80995"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 58,
      "deletions": 43
    },
    "files": [
      {
        "sha": "aef2590142e5dbf00dd4f01aac87d440fe6edd4a",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "patch": "@@ -158,5 +158,9 @@ static inline int64_t GetTransactionInputWeight(const CTxIn& txin)\n     // scriptWitness size is added here because witnesses and txins are split up in segwit serialization.\n     return ::GetSerializeSize(txin, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, PROTOCOL_VERSION);\n }\n+static inline int64_t GetTransactionOutputWeight(const CTxOut& txout)\n+{\n+    return ::GetSerializeSize(txout, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+}\n \n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "c6b941ba3cca185c5b02681e5fa1241c9762e773",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "patch": "@@ -1044,7 +1044,7 @@ bool AppInitParameterInteraction()\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-incrementalrelayfee\", \"\"), n))\n             return InitError(AmountErrMsg(\"incrementalrelayfee\", gArgs.GetArg(\"-incrementalrelayfee\", \"\")).translated);\n-        incrementalRelayFee = CFeeRate(n);\n+        incrementalRelayFee = CFeeRate(n / WITNESS_SCALE_FACTOR);\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n@@ -1081,7 +1081,7 @@ bool AppInitParameterInteraction()\n             return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")).translated);\n         }\n         // High fee check is done afterward in CWallet::CreateWalletFromFile()\n-        ::minRelayTxFee = CFeeRate(n);\n+        ::minRelayTxFee = CFeeRate(n / WITNESS_SCALE_FACTOR);\n     } else if (incrementalRelayFee > ::minRelayTxFee) {\n         // Allow only setting incrementalRelayFee to control both\n         ::minRelayTxFee = incrementalRelayFee;\n@@ -1104,7 +1104,7 @@ bool AppInitParameterInteraction()\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n))\n             return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")).translated);\n-        dustRelayFee = CFeeRate(n);\n+        dustRelayFee = CFeeRate(n / WITNESS_SCALE_FACTOR);\n     }\n \n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());"
      },
      {
        "sha": "dfc5f2cff3db81e5fc9fe089d039a70745bfc858",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "patch": "@@ -3,27 +3,28 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/consensus.h>\n #include <policy/feerate.h>\n \n #include <tinyformat.h>\n \n const std::string CURRENCY_UNIT = \"BTC\";\n \n-CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n+CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nWeight)\n {\n-    assert(nBytes_ <= uint64_t(std::numeric_limits<int64_t>::max()));\n-    int64_t nSize = int64_t(nBytes_);\n+    assert(nWeight <= uint64_t(std::numeric_limits<int64_t>::max()));\n+    int64_t nSize = int64_t(nWeight);\n \n     if (nSize > 0)\n         nSatoshisPerK = nFeePaid * 1000 / nSize;\n     else\n         nSatoshisPerK = 0;\n }\n \n-CAmount CFeeRate::GetFee(size_t nBytes_) const\n+CAmount CFeeRate::GetFee(size_t nWeight) const\n {\n-    assert(nBytes_ <= uint64_t(std::numeric_limits<int64_t>::max()));\n-    int64_t nSize = int64_t(nBytes_);\n+    assert(nWeight <= uint64_t(std::numeric_limits<int64_t>::max()));\n+    int64_t nSize = int64_t(nWeight);\n \n     CAmount nFee = nSatoshisPerK * nSize / 1000;\n \n@@ -39,5 +40,5 @@ CAmount CFeeRate::GetFee(size_t nBytes_) const\n \n std::string CFeeRate::ToString() const\n {\n-    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n+    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK * WITNESS_SCALE_FACTOR % COIN, CURRENCY_UNIT);\n }"
      },
      {
        "sha": "ed3b19a33ba704317638b8d6185cec60f8e78cd0",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "patch": "@@ -14,29 +14,29 @@\n extern const std::string CURRENCY_UNIT;\n \n /**\n- * Fee rate in satoshis per kilobyte: CAmount / kB\n+ * Fee rate in satoshis per weight: CAmount / kW\n  */\n class CFeeRate\n {\n private:\n-    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-weightunit\n \n public:\n-    /** Fee rate of 0 satoshis per kB */\n+    /** Fee rate of 0 satoshis per kWU */\n     CFeeRate() : nSatoshisPerK(0) { }\n     template<typename I>\n     explicit CFeeRate(const I _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) {\n         // We've previously had bugs creep in from silent double->int conversion...\n         static_assert(std::is_integral<I>::value, \"CFeeRate should be used without floats\");\n     }\n-    /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\n-    CFeeRate(const CAmount& nFeePaid, size_t nBytes);\n+    /** Constructor for a fee rate in satoshis per kW. The size in weight units must not exceed (2^63 - 1) */\n+    CFeeRate(const CAmount& nFeePaid, size_t nWeight);\n     /**\n-     * Return the fee in satoshis for the given size in bytes.\n+     * Return the fee in satoshis for the given size in weight units.\n      */\n-    CAmount GetFee(size_t nBytes) const;\n+    CAmount GetFee(size_t nWeight) const;\n     /**\n-     * Return the fee in satoshis for a size of 1000 bytes\n+     * Return the fee in satoshis for a size of 1000 weight units.\n      */\n     CAmount GetFeePerK() const { return GetFee(1000); }\n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }"
      },
      {
        "sha": "c30f2472a59d9d328022704dc72fc87f92af55cc",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 13,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "patch": "@@ -14,32 +14,40 @@\n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n {\n     // \"Dust\" is defined in terms of dustRelayFee,\n-    // which has units satoshis-per-kilobyte.\n+    // which has units satoshis-per-kiloweightunit.\n     // If you'd pay more in fees than the value of the output\n     // to spend something, then we consider it dust.\n-    // A typical spendable non-segwit txout is 34 bytes big, and will\n-    // need a CTxIn of at least 148 bytes to spend:\n+    // A typical spendable non-segwit txout is 136 weight units big, and will\n+    // need a CTxIn of at least 592 weight units to\n+    // spend (if spent by a legacy transaction).\n+    // So dust is a spendable txout less than\n+    // 728*dustRelayFee/1000 (in satoshis).\n+    // 546 satoshis at the default rate of 750 sat/WU.\n+    // A typical spendable segwit txout is 124 weight units big, and will\n+    // need a CTxIn of at least 268 weight units to spend:\n     // so dust is a spendable txout less than\n-    // 182*dustRelayFee/1000 (in satoshis).\n-    // 546 satoshis at the default rate of 3000 sat/kB.\n-    // A typical spendable segwit txout is 31 bytes big, and will\n-    // need a CTxIn of at least 67 bytes to spend:\n-    // so dust is a spendable txout less than\n-    // 98*dustRelayFee/1000 (in satoshis).\n-    // 294 satoshis at the default rate of 3000 sat/kB.\n+    // 392*dustRelayFee/1000 (in satoshis).\n+    // 294 satoshis at the default rate of 750 sat/WU.\n     if (txout.scriptPubKey.IsUnspendable())\n         return 0;\n \n-    size_t nSize = GetSerializeSize(txout);\n+    size_t nSize = GetTransactionOutputWeight(txout);\n     int witnessversion = 0;\n     std::vector<unsigned char> witnessprogram;\n \n     if (txout.scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n         // sum the sizes of the parts of a transaction input\n         // with 75% segwit discount applied to the script size.\n-        nSize += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n+        nSize += 32 * WITNESS_SCALE_FACTOR; // txid\n+        nSize += 4 * WITNESS_SCALE_FACTOR; // vout\n+        nSize += 1 * WITNESS_SCALE_FACTOR; // Script size\n+        nSize += 107; // Script\n+        nSize += 4 * WITNESS_SCALE_FACTOR; // sequence\n     } else {\n-        nSize += (32 + 4 + 1 + 107 + 4); // the 148 mentioned above\n+        nSize += 32 * WITNESS_SCALE_FACTOR; // txid\n+        nSize += 4 * WITNESS_SCALE_FACTOR; // vout\n+        nSize += 108 * WITNESS_SCALE_FACTOR; // Script\n+        nSize += 4 * WITNESS_SCALE_FACTOR; // sequence\n     }\n \n     return dustRelayFeeIn.GetFee(nSize);"
      },
      {
        "sha": "cbe0ea1471186c410c6d7d526be0839b85fcc914",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "patch": "@@ -18,8 +18,8 @@ class CTxOut;\n \n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;\n-/** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/\n-static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n+/** Default for -blockmintxfee, which sets the minimum feerate (sat/kWU) for a transaction in blocks created by mining code **/\n+static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 250;\n /** The maximum weight for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n /** The minimum non-witness size for transactions we're willing to relay/mine (1 segwit input + 1 P2WPKH output = 82 bytes) */\n@@ -30,8 +30,8 @@ static const unsigned int MAX_P2SH_SIGOPS = 15;\n static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n-/** Default for -incrementalrelayfee, which sets the minimum feerate increase for mempool limiting or BIP 125 replacement **/\n-static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;\n+/** Default for -incrementalrelayfee, which sets the minimum feerate in sat/kWU increase for mempool limiting or BIP 125 replacement **/\n+static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 250;\n /** Default for -bytespersigop */\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n /** Default for -permitbaremultisig */\n@@ -42,12 +42,12 @@ static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n /** The maximum size of a standard witnessScript */\n static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n-/** Min feerate for defining dust. Historically this has been based on the\n+/** Min feerate in sat/kWU for defining dust. Historically this has been based on the\n  * minRelayTxFee, however changing the dust limit changes which transactions are\n  * standard and should be done with care and ideally rarely. It makes sense to\n  * only increase the dust limit after prior releases were already not creating\n  * outputs below the new threshold */\n-static const unsigned int DUST_RELAY_TX_FEE = 3000;\n+static const unsigned int DUST_RELAY_TX_FEE = 750;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "182fdd62c21e9d3b9ffdfaafb17cb4ff8a0d37ac",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "patch": "@@ -106,8 +106,9 @@ BOOST_AUTO_TEST_CASE(BinaryOperatorTest)\n BOOST_AUTO_TEST_CASE(ToStringTest)\n {\n     CFeeRate feeRate;\n+    // 1 sat/kWU\n     feeRate = CFeeRate(1);\n-    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.00000001 BTC/kB\");\n+    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.00000004 BTC/kB\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d132a2a9af34de7596707c8f36ecec0c57dd86c5",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "patch": "@@ -702,7 +702,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n \n     // Check dust with default relay fee:\n-    CAmount nDustThreshold = 182 * dustRelayFee.GetFeePerK()/1000;\n+    CAmount nDustThreshold = 728 * dustRelayFee.GetFeePerK()/1000;\n     BOOST_CHECK_EQUAL(nDustThreshold, 546);\n     // dust:\n     t.vout[0].nValue = nDustThreshold - 1;\n@@ -737,8 +737,9 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(IsStandardTx(CTransaction(t), reason));\n \n     // Check dust with odd relay fee to verify rounding:\n-    // nDustThreshold = 182 * 3702 / 1000\n-    dustRelayFee = CFeeRate(3702);\n+    // nDustThreshold = 728 * 3702/4 / 1000\n+    // 728 * 3702/4 / 1000 == 182 * 3702 / 1000\n+    dustRelayFee = CFeeRate(3702 / WITNESS_SCALE_FACTOR);\n     // dust:\n     t.vout[0].nValue = 673 - 1;\n     reason.clear();"
      },
      {
        "sha": "b51c3f24d75d2d5890cef176a612e99aa5031bdc",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "patch": "@@ -49,8 +49,8 @@ struct DisconnectedBlockTransactions;\n struct PrecomputedTransactionData;\n struct LockPoints;\n \n-/** Default for -minrelaytxfee, minimum relay fee for transactions */\n-static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n+/** Default for -minrelaytxfee, minimum relay feerate for transactions */\n+static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 250;\n /** Default for -limitancestorcount, max number of in-mempool ancestors */\n static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;\n /** Default for -limitancestorsize, maximum kilobytes of tx + all in-mempool ancestors */"
      }
    ]
  },
  {
    "sha": "d592eb333ec9d8ab397f349430955f22b778e9fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTkyZWIzMzNlYzlkOGFiMzk3ZjM0OTQzMDk1NWYyMmI3NzhlOWZj",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-12T20:38:37Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T14:56:28Z"
      },
      "message": "txmempool: Introduce weigh unit counters in addition to vbyte ones\n\nThis adds transaction size utils in weight where there were only virtual\nbyte ones. This will allow to use weight units for feerate computation\nlater on while keeping accurate vbyte computation for not breaking the\nAPI.",
      "tree": {
        "sha": "3c5b8220e31206c85f235cb7649311510a95c675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c5b8220e31206c85f235cb7649311510a95c675"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d592eb333ec9d8ab397f349430955f22b778e9fc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4hyxwACgkQ4T/BRc0/\nQwQThQv/TPsHsMc7o2VJ1owlJ0RvoVLx9pXrW+clBVDs9A7w8twjIyVsq3xrsuri\nXLOcrqpaHyU9bPzAZ95Hb/+HbsG/mw0adY5Rkq/xmXtYs9S1mU/A65bCZhLuBoOb\n8en5mpSTs5Dj5Vu2nXCDMGvsj0mzqtcTqNKRSzvlo2YKZUGfvsI6Qy11nJLH0kT5\nT8hdKrb3E1EIrSzg5x4prnWwbIyRc+0VnMmx8nPse2AryF+HC5u5VNctM/Vr6hm6\nX95mUZdtWYSO2PyEt5e4gDeO+bUVR7EmcP4Lyk9HVADVR7XwppUZ1GdhHd7tWFhU\nI5H5E3SucWwNxqk7oxv/rKTRyQK+isNO0WJy0jBiOYm+DWAxOvh38Y+avSrLSD1/\nYcpPfeIXHw+87e7GGsn/wG1TMLhYXy0KZQ87IFB2QFQ8lCVLsVZ43gaIijO1QLgu\n2vaozk9E6l5ym3YVB8dIY8xjxCxBuRVzEwp15a1MeKIIgzxl4fBFIg4clgHF2sQ/\nsxkaSkP1\n=vBdU\n-----END PGP SIGNATURE-----",
        "payload": "tree 3c5b8220e31206c85f235cb7649311510a95c675\nparent 67376daaf5cb4fa8b6aac0a94ed2d29e3461b247\nauthor darosior <darosior@protonmail.com> 1573591117 +0100\ncommitter darosior <darosior@protonmail.com> 1579272988 +0100\n\ntxmempool: Introduce weigh unit counters in addition to vbyte ones\n\nThis adds transaction size utils in weight where there were only virtual\nbyte ones. This will allow to use weight units for feerate computation\nlater on while keeping accurate vbyte computation for not breaking the\nAPI.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d592eb333ec9d8ab397f349430955f22b778e9fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d592eb333ec9d8ab397f349430955f22b778e9fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d592eb333ec9d8ab397f349430955f22b778e9fc/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67376daaf5cb4fa8b6aac0a94ed2d29e3461b247"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 76,
      "deletions": 37
    },
    "files": [
      {
        "sha": "03d0692cebac28dd9a98f214276470988227b04d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 23,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d592eb333ec9d8ab397f349430955f22b778e9fc/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d592eb333ec9d8ab397f349430955f22b778e9fc/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d592eb333ec9d8ab397f349430955f22b778e9fc",
        "patch": "@@ -26,13 +26,15 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFe\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n     nCountWithDescendants = 1;\n-    nSizeWithDescendants = GetTxSize();\n+    nVirtualSizeWithDescendants = GetTxSize();\n+    nWeightWithDescendants = GetTxWeight();\n     nModFeesWithDescendants = nFee;\n \n     feeDelta = 0;\n \n     nCountWithAncestors = 1;\n-    nSizeWithAncestors = GetTxSize();\n+    nVirtualSizeWithAncestors = GetTxSize();\n+    nWeightWithAncestors = GetTxWeight();\n     nModFeesWithAncestors = nFee;\n     nSigOpCostWithAncestors = sigOpCost;\n }\n@@ -84,19 +86,21 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     // setAllDescendants now contains all in-mempool descendants of updateIt.\n     // Update and add to cached descendant map\n     int64_t modifySize = 0;\n+    int64_t modifyWeight = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n     for (txiter cit : setAllDescendants) {\n         if (!setExclude.count(cit->GetTx().GetHash())) {\n             modifySize += cit->GetTxSize();\n+            modifyWeight += cit->GetTxWeight();\n             modifyFee += cit->GetModifiedFee();\n             modifyCount++;\n             cachedDescendants[updateIt].insert(cit);\n             // Update ancestor state for each descendant\n-            mapTx.modify(cit, update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n+            mapTx.modify(cit, update_ancestor_state(updateIt->GetTxSize(), updateIt->GetTxWeight(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n         }\n     }\n-    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n+    mapTx.modify(updateIt, update_descendant_state(modifySize, modifyWeight, modifyFee, modifyCount));\n }\n \n // vHashesToUpdate is the set of transaction hashes from a disconnected block\n@@ -218,24 +222,27 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n     }\n     const int64_t updateCount = (add ? 1 : -1);\n     const int64_t updateSize = updateCount * it->GetTxSize();\n+    const int64_t updateWeight = updateCount * it->GetTxWeight();\n     const CAmount updateFee = updateCount * it->GetModifiedFee();\n     for (txiter ancestorIt : setAncestors) {\n-        mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n+        mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateWeight, updateFee, updateCount));\n     }\n }\n \n void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors)\n {\n     int64_t updateCount = setAncestors.size();\n     int64_t updateSize = 0;\n+    int64_t updateWeight = 0;\n     CAmount updateFee = 0;\n     int64_t updateSigOpsCost = 0;\n     for (txiter ancestorIt : setAncestors) {\n         updateSize += ancestorIt->GetTxSize();\n+        updateWeight += ancestorIt->GetTxWeight();\n         updateFee += ancestorIt->GetModifiedFee();\n         updateSigOpsCost += ancestorIt->GetSigOpCost();\n     }\n-    mapTx.modify(it, update_ancestor_state(updateSize, updateFee, updateCount, updateSigOpsCost));\n+    mapTx.modify(it, update_ancestor_state(updateSize, updateWeight, updateFee, updateCount, updateSigOpsCost));\n }\n \n void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n@@ -263,10 +270,11 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n             CalculateDescendants(removeIt, setDescendants);\n             setDescendants.erase(removeIt); // don't update state for self\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n+            int64_t modifyWeight = -((int64_t)removeIt->GetTxWeight());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n             int modifySigOps = -removeIt->GetSigOpCost();\n             for (txiter dit : setDescendants) {\n-                mapTx.modify(dit, update_ancestor_state(modifySize, modifyFee, -1, modifySigOps));\n+                mapTx.modify(dit, update_ancestor_state(modifySize, modifyWeight, modifyFee, -1, modifySigOps));\n             }\n         }\n     }\n@@ -304,19 +312,23 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n     }\n }\n \n-void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\n+void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, int64_t modifyWeight, CAmount modifyFee, int64_t modifyCount)\n {\n-    nSizeWithDescendants += modifySize;\n-    assert(int64_t(nSizeWithDescendants) > 0);\n+    nVirtualSizeWithDescendants += modifySize;\n+    assert(int64_t(nVirtualSizeWithDescendants) > 0);\n+    nWeightWithDescendants += modifyWeight;\n+    assert(int64_t(nWeightWithDescendants) > 0);\n     nModFeesWithDescendants += modifyFee;\n     nCountWithDescendants += modifyCount;\n     assert(int64_t(nCountWithDescendants) > 0);\n }\n \n-void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)\n+void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, int64_t modifyWeight, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)\n {\n-    nSizeWithAncestors += modifySize;\n-    assert(int64_t(nSizeWithAncestors) > 0);\n+    nVirtualSizeWithAncestors += modifySize;\n+    assert(int64_t(nVirtualSizeWithAncestors) > 0);\n+    nWeightWithAncestors += modifyWeight;\n+    assert(int64_t(nWeightWithAncestors) > 0);\n     nModFeesWithAncestors += modifyFee;\n     nCountWithAncestors += modifyCount;\n     assert(int64_t(nCountWithAncestors) > 0);\n@@ -395,7 +407,8 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n     UpdateEntryForAncestors(newit, setAncestors);\n \n     nTransactionsUpdated++;\n-    totalTxSize += entry.GetTxSize();\n+    totalTxVirtualSize += entry.GetTxSize();\n+    totalTxWeight += entry.GetTxWeight();\n     if (minerPolicyEstimator) {minerPolicyEstimator->processTransaction(entry, validFeeEstimate);}\n \n     vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n@@ -423,7 +436,8 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     } else\n         vTxHashes.clear();\n \n-    totalTxSize -= it->GetTxSize();\n+    totalTxVirtualSize -= it->GetTxSize();\n+    totalTxWeight -= it->GetTxWeight();\n     cachedInnerUsage -= it->DynamicMemoryUsage();\n     cachedInnerUsage -= memusage::DynamicUsage(mapLinks[it].parents) + memusage::DynamicUsage(mapLinks[it].children);\n     mapLinks.erase(it);\n@@ -582,7 +596,8 @@ void CTxMemPool::_clear()\n     mapLinks.clear();\n     mapTx.clear();\n     mapNextTx.clear();\n-    totalTxSize = 0;\n+    totalTxVirtualSize = 0;\n+    totalTxWeight = 0;\n     cachedInnerUsage = 0;\n     lastRollingFeeUpdate = GetTime();\n     blockSinceLastRollingFeeBump = false;\n@@ -616,7 +631,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     LogPrint(BCLog::MEMPOOL, \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n-    uint64_t checkTotal = 0;\n+    uint64_t checkTotalVsize = 0;\n+    uint64_t checkTotalWeight = 0;\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n@@ -625,7 +641,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n-        checkTotal += it->GetTxSize();\n+        checkTotalVsize += it->GetTxSize();\n+        checkTotalWeight += it->GetTxWeight();\n         innerUsage += it->DynamicMemoryUsage();\n         const CTransaction& tx = it->GetTx();\n         txlinksMap::const_iterator linksiter = mapLinks.find(it);\n@@ -660,35 +677,40 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);\n         uint64_t nCountCheck = setAncestors.size() + 1;\n         uint64_t nSizeCheck = it->GetTxSize();\n+        uint64_t nWeightCheck = it->GetTxWeight();\n         CAmount nFeesCheck = it->GetModifiedFee();\n         int64_t nSigOpCheck = it->GetSigOpCost();\n \n         for (txiter ancestorIt : setAncestors) {\n             nSizeCheck += ancestorIt->GetTxSize();\n+            nWeightCheck += ancestorIt->GetTxWeight();\n             nFeesCheck += ancestorIt->GetModifiedFee();\n             nSigOpCheck += ancestorIt->GetSigOpCost();\n         }\n \n         assert(it->GetCountWithAncestors() == nCountCheck);\n         assert(it->GetSizeWithAncestors() == nSizeCheck);\n+        assert(it->GetWeightWithAncestors() == nWeightCheck);\n         assert(it->GetSigOpCostWithAncestors() == nSigOpCheck);\n         assert(it->GetModFeesWithAncestors() == nFeesCheck);\n \n         // Check children against mapNextTx\n         CTxMemPool::setEntries setChildrenCheck;\n         auto iter = mapNextTx.lower_bound(COutPoint(it->GetTx().GetHash(), 0));\n-        uint64_t child_sizes = 0;\n+        uint64_t child_sizes = 0, child_weights = 0;\n         for (; iter != mapNextTx.end() && iter->first->hash == it->GetTx().GetHash(); ++iter) {\n             txiter childit = mapTx.find(iter->second->GetHash());\n             assert(childit != mapTx.end()); // mapNextTx points to in-mempool transactions\n             if (setChildrenCheck.insert(childit).second) {\n                 child_sizes += childit->GetTxSize();\n+                child_weights += childit->GetTxWeight();\n             }\n         }\n         assert(setChildrenCheck == GetMemPoolChildren(it));\n         // Also check to make sure size is greater than sum with immediate children.\n         // just a sanity check, not definitive that this calc is correct...\n         assert(it->GetSizeWithDescendants() >= child_sizes + it->GetTxSize());\n+        assert(it->GetWeightWithDescendants() >= child_weights + it->GetTxWeight());\n \n         if (fDependsWait)\n             waitingOnDependants.push_back(&(*it));\n@@ -717,7 +739,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         assert(&tx == it->second);\n     }\n \n-    assert(totalTxSize == checkTotal);\n+    assert(totalTxVirtualSize == checkTotalVsize);\n+    assert(totalTxWeight == checkTotalWeight);\n     assert(innerUsage == cachedInnerUsage);\n }\n \n@@ -780,7 +803,7 @@ void CTxMemPool::queryHashes(std::vector<uint256>& vtxid) const\n }\n \n static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator it) {\n-    return TxMempoolInfo{it->GetSharedTx(), it->GetTime(), it->GetFee(), it->GetTxSize(), it->GetModifiedFee() - it->GetFee()};\n+    return TxMempoolInfo{it->GetSharedTx(), it->GetTime(), it->GetFee(), it->GetTxWeight(), it->GetTxSize(), it->GetModifiedFee() - it->GetFee()};\n }\n \n std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n@@ -830,14 +853,14 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n             std::string dummy;\n             CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n             for (txiter ancestorIt : setAncestors) {\n-                mapTx.modify(ancestorIt, update_descendant_state(0, nFeeDelta, 0));\n+                mapTx.modify(ancestorIt, update_descendant_state(0, 0, nFeeDelta, 0));\n             }\n             // Now update all descendants' modified fees with ancestors\n             setEntries setDescendants;\n             CalculateDescendants(it, setDescendants);\n             setDescendants.erase(it);\n             for (txiter descendantIt : setDescendants) {\n-                mapTx.modify(descendantIt, update_ancestor_state(0, nFeeDelta, 0, 0));\n+                mapTx.modify(descendantIt, update_ancestor_state(0, 0, nFeeDelta, 0, 0));\n             }\n             ++nTransactionsUpdated;\n         }"
      },
      {
        "sha": "55a2c25426807a13aa194d13fb34010fe9e6d4ce",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 30,
        "deletions": 14,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d592eb333ec9d8ab397f349430955f22b778e9fc/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d592eb333ec9d8ab397f349430955f22b778e9fc/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d592eb333ec9d8ab397f349430955f22b778e9fc",
        "patch": "@@ -80,12 +80,14 @@ class CTxMemPoolEntry\n     // mempool; if we remove this transaction we must remove all of these\n     // descendants as well.\n     uint64_t nCountWithDescendants;  //!< number of descendant transactions\n-    uint64_t nSizeWithDescendants;   //!< ... and size\n+    uint64_t nVirtualSizeWithDescendants;   //!< ... and virtual size\n+    uint64_t nWeightWithDescendants;\n     CAmount nModFeesWithDescendants; //!< ... and total fees (all including us)\n \n     // Analogous statistics for ancestor transactions\n     uint64_t nCountWithAncestors;\n-    uint64_t nSizeWithAncestors;\n+    uint64_t nVirtualSizeWithAncestors;\n+    uint64_t nWeightWithAncestors;\n     CAmount nModFeesWithAncestors;\n     int64_t nSigOpCostWithAncestors;\n \n@@ -108,23 +110,25 @@ class CTxMemPoolEntry\n     const LockPoints& GetLockPoints() const { return lockPoints; }\n \n     // Adjusts the descendant state.\n-    void UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n+    void UpdateDescendantState(int64_t modifySize, int64_t modifyWeight, CAmount modifyFee, int64_t modifyCount);\n     // Adjusts the ancestor state\n-    void UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps);\n+    void UpdateAncestorState(int64_t modifySize, int64_t modifyWeight, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps);\n     // Updates the fee delta used for mining priority score, and the\n     // modified fees with descendants.\n     void UpdateFeeDelta(int64_t feeDelta);\n     // Update the LockPoints after a reorg\n     void UpdateLockPoints(const LockPoints& lp);\n \n     uint64_t GetCountWithDescendants() const { return nCountWithDescendants; }\n-    uint64_t GetSizeWithDescendants() const { return nSizeWithDescendants; }\n+    uint64_t GetSizeWithDescendants() const { return nVirtualSizeWithDescendants; }\n+    uint64_t GetWeightWithDescendants() const { return nWeightWithDescendants; }\n     CAmount GetModFeesWithDescendants() const { return nModFeesWithDescendants; }\n \n     bool GetSpendsCoinbase() const { return spendsCoinbase; }\n \n     uint64_t GetCountWithAncestors() const { return nCountWithAncestors; }\n-    uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }\n+    uint64_t GetSizeWithAncestors() const { return nVirtualSizeWithAncestors; }\n+    uint64_t GetWeightWithAncestors() const { return nWeightWithAncestors; }\n     CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }\n     int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n \n@@ -134,30 +138,32 @@ class CTxMemPoolEntry\n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index.\n struct update_descendant_state\n {\n-    update_descendant_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount) :\n-        modifySize(_modifySize), modifyFee(_modifyFee), modifyCount(_modifyCount)\n+    update_descendant_state(int64_t _modifySize, int64_t _modifyWeight, CAmount _modifyFee, int64_t _modifyCount) :\n+        modifySize(_modifySize), modifyWeight(_modifyWeight), modifyFee(_modifyFee), modifyCount(_modifyCount)\n     {}\n \n     void operator() (CTxMemPoolEntry &e)\n-        { e.UpdateDescendantState(modifySize, modifyFee, modifyCount); }\n+        { e.UpdateDescendantState(modifySize, modifyWeight, modifyFee, modifyCount); }\n \n     private:\n         int64_t modifySize;\n+        int64_t modifyWeight;\n         CAmount modifyFee;\n         int64_t modifyCount;\n };\n \n struct update_ancestor_state\n {\n-    update_ancestor_state(int64_t _modifySize, CAmount _modifyFee, int64_t _modifyCount, int64_t _modifySigOpsCost) :\n-        modifySize(_modifySize), modifyFee(_modifyFee), modifyCount(_modifyCount), modifySigOpsCost(_modifySigOpsCost)\n+    update_ancestor_state(int64_t _modifySize, int64_t _modifyWeight, CAmount _modifyFee, int64_t _modifyCount, int64_t _modifySigOpsCost) :\n+        modifySize(_modifySize), modifyWeight(_modifyWeight), modifyFee(_modifyFee), modifyCount(_modifyCount), modifySigOpsCost(_modifySigOpsCost)\n     {}\n \n     void operator() (CTxMemPoolEntry &e)\n-        { e.UpdateAncestorState(modifySize, modifyFee, modifyCount, modifySigOpsCost); }\n+        { e.UpdateAncestorState(modifySize, modifyWeight, modifyFee, modifyCount, modifySigOpsCost); }\n \n     private:\n         int64_t modifySize;\n+        int64_t modifyWeight;\n         CAmount modifyFee;\n         int64_t modifyCount;\n         int64_t modifySigOpsCost;\n@@ -335,6 +341,9 @@ struct TxMempoolInfo\n     /** Fee of the transaction. */\n     CAmount fee;\n \n+    /** Virtual size of the transaction. */\n+    size_t weight;\n+\n     /** Virtual size of the transaction. */\n     size_t vsize;\n \n@@ -447,7 +456,8 @@ class CTxMemPool\n     std::atomic<unsigned int> nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n-    uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n+    uint64_t totalTxWeight;\n+    uint64_t totalTxVirtualSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141.\n     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n     mutable int64_t lastRollingFeeUpdate;\n@@ -681,7 +691,13 @@ class CTxMemPool\n     uint64_t GetTotalTxSize() const\n     {\n         LOCK(cs);\n-        return totalTxSize;\n+        return totalTxVirtualSize;\n+    }\n+\n+    uint64_t GetTotalTxWeight() const\n+    {\n+        LOCK(cs);\n+        return totalTxWeight;\n     }\n \n     bool exists(const uint256& hash) const"
      }
    ]
  },
  {
    "sha": "3f37f614d6dcdb7aa65433e067f0d519ad876319",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjM3ZjYxNGQ2ZGNkYjdhYTY1NDMzZTA2N2YwZDUxOWFkODc2MzE5",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-12T20:58:44Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:40Z"
      },
      "message": "txmempool: use weight units to measure transaction size\n\nMost constants are unchanged but timed by 4 at initialization, mainly to avoid a big diff by rewriting all 'GetArg's because we need to still expose parameters as taking vbytes.",
      "tree": {
        "sha": "72082ddf5b969d230fca6481fc1b08f0fcf22f4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72082ddf5b969d230fca6481fc1b08f0fcf22f4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f37f614d6dcdb7aa65433e067f0d519ad876319",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L0ACgkQ4T/BRc0/\nQwT/QQv/VjT3wevVcB6VDylN421Et/MM9qh4/hT4vpuf3Mosgw0XWiD0LLDBDn8L\nEouDYTjrHAPglzcU8rhl3LMGEF02dBUgvIV65iSdPeEbpEVw20OMUAkulbRDIraR\neUb09RIVcKX08sEFsvU/zKYLnaVbncsb1/rEosJnc+cu6Qx9ziNvq4SOz7TRowb7\n5lKP5VOK8TSoX0thksYlqaSrr4OVYuEBliPGt5hypI3Cd3S0dNwVMZzOQ+3ezraC\nCI//gZR98n8Kj2vLy1RNDRsr5XmrMEymNLgvVCOR4hv9kuRGLlgJrL+ZnBF8vm+c\nzTDSSCyHzH9TgY31dc3ttPmrI9ZSLLQuIz0UOoMFMqFRjVzn28yaKvb9mLOJaoSc\ndhN6LtpHXHUn0UAt+uCD2eGIyY3n7e1ziinUapbQVxaXOlWJEzPJn/SrDQ18kDZp\notgZnKek5T3IqQg1YPMk8D4+p4Um+NIIlGmN825lPoT/Y3JfHP0+BojR/NpvA24X\ndxIwPafs\n=0SyF\n-----END PGP SIGNATURE-----",
        "payload": "tree 72082ddf5b969d230fca6481fc1b08f0fcf22f4b\nparent d592eb333ec9d8ab397f349430955f22b778e9fc\nauthor darosior <darosior@protonmail.com> 1573592324 +0100\ncommitter darosior <darosior@protonmail.com> 1579278520 +0100\n\ntxmempool: use weight units to measure transaction size\n\nMost constants are unchanged but timed by 4 at initialization, mainly to avoid a big diff by rewriting all 'GetArg's because we need to still expose parameters as taking vbytes.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f37f614d6dcdb7aa65433e067f0d519ad876319",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f37f614d6dcdb7aa65433e067f0d519ad876319",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f37f614d6dcdb7aa65433e067f0d519ad876319/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d592eb333ec9d8ab397f349430955f22b778e9fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d592eb333ec9d8ab397f349430955f22b778e9fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d592eb333ec9d8ab397f349430955f22b778e9fc"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 57,
      "deletions": 52
    },
    "files": [
      {
        "sha": "4aa7c58d85f1d5be5e54b1ae9f3ae9b700a216d7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "patch": "@@ -1033,8 +1033,8 @@ bool AppInitParameterInteraction()\n     }\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000 * WITNESS_SCALE_FACTOR;\n+    int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40 * WITNESS_SCALE_FACTOR;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\").translated, std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n@@ -1440,6 +1440,7 @@ bool AppInitMain(NodeContext& node)\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    // We use weight units to measure size, but this variable is only used for printing usage statistics in bytes.\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));"
      },
      {
        "sha": "cbfb135ffa5b252ca2a06ae266b0c6890babdd91",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "patch": "@@ -303,9 +303,9 @@ class ChainImpl : public Chain\n         CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries ancestors;\n         auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000 * WITNESS_SCALE_FACTOR;\n         auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * WITNESS_SCALE_FACTOR;\n         std::string unused_error_string;\n         LOCK(::mempool.cs);\n         return ::mempool.CalculateMemPoolAncestors(entry, ancestors, limit_ancestor_count, limit_ancestor_size,\n@@ -321,7 +321,7 @@ class ChainImpl : public Chain\n     }\n     CFeeRate mempoolMinFee() override\n     {\n-        return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000 * WITNESS_SCALE_FACTOR);\n     }\n     CFeeRate relayMinFee() override { return ::minRelayTxFee; }\n     CFeeRate relayIncrementalFee() override { return ::incrementalRelayFee; }"
      },
      {
        "sha": "76b6dc719fe858a82ede00d32567da550274bd8c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "patch": "@@ -4053,7 +4053,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // We don't want white listed peers to filter txs to us if we have -whitelistforcerelay\n         if (pto->m_tx_relay != nullptr && pto->nVersion >= FEEFILTER_VERSION && gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n             !pto->HasPermission(PF_FORCERELAY)) {\n-            CAmount currentFilter = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+            CAmount currentFilter = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000 * WITNESS_SCALE_FACTOR).GetFeePerK();\n             int64_t timeNow = GetTimeMicros();\n             if (timeNow > pto->m_tx_relay->nextSendTimeFeeFilter) {\n                 static CFeeRate default_feerate(DEFAULT_MIN_RELAY_TX_FEE);"
      },
      {
        "sha": "40ef2a289afe1d406700830c75e23a50897b6f06",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/validation.h>\n #include <policy/policy.h>\n #include <txmempool.h>\n #include <util/system.h>\n@@ -311,7 +312,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx2.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx2.vout[0].nValue = 2 * COIN;\n     pool.addUnchecked(entry.Fee(20000LL).FromTx(tx2));\n-    uint64_t tx2Size = GetVirtualTransactionSize(CTransaction(tx2));\n+    uint64_t tx2Size = GetTransactionWeight(CTransaction(tx2));\n \n     /* lowest fee */\n     CMutableTransaction tx3 = CMutableTransaction();\n@@ -359,7 +360,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx6.vout.resize(1);\n     tx6.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx6.vout[0].nValue = 20 * COIN;\n-    uint64_t tx6Size = GetVirtualTransactionSize(CTransaction(tx6));\n+    uint64_t tx6Size = GetTransactionWeight(CTransaction(tx6));\n \n     pool.addUnchecked(entry.Fee(0LL).FromTx(tx6));\n     BOOST_CHECK_EQUAL(pool.size(), 6U);\n@@ -378,7 +379,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx7.vout.resize(1);\n     tx7.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx7.vout[0].nValue = 10 * COIN;\n-    uint64_t tx7Size = GetVirtualTransactionSize(CTransaction(tx7));\n+    uint64_t tx7Size = GetTransactionWeight(CTransaction(tx7));\n \n     /* set the fee to just below tx2's feerate when including ancestor */\n     CAmount fee = (20000/tx2Size)*(tx7Size + tx6Size) - 1;\n@@ -443,11 +444,11 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx2.vout[0].nValue = 10 * COIN;\n     pool.addUnchecked(entry.Fee(5000LL).FromTx(tx2));\n \n-    pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * WITNESS_SCALE_FACTOR); // should do nothing\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n     BOOST_CHECK(pool.exists(tx2.GetHash()));\n \n-    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // should remove the lower-feerate transaction\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * WITNESS_SCALE_FACTOR * 3 / 4); // should remove the lower-feerate transaction\n     BOOST_CHECK(pool.exists(tx1.GetHash()));\n     BOOST_CHECK(!pool.exists(tx2.GetHash()));\n \n@@ -461,18 +462,18 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     tx3.vout[0].nValue = 10 * COIN;\n     pool.addUnchecked(entry.Fee(20000LL).FromTx(tx3));\n \n-    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * WITNESS_SCALE_FACTOR * 3 / 4); // tx3 should pay for tx2 (CPFP)\n     BOOST_CHECK(!pool.exists(tx1.GetHash()));\n     BOOST_CHECK(pool.exists(tx2.GetHash()));\n     BOOST_CHECK(pool.exists(tx3.GetHash()));\n \n-    pool.TrimToSize(GetVirtualTransactionSize(CTransaction(tx1))); // mempool is limited to tx1's size in memory usage, so nothing fits\n+    pool.TrimToSize(GetTransactionWeight(CTransaction(tx1))); // mempool is limited to tx1's size in memory usage, so nothing fits\n     BOOST_CHECK(!pool.exists(tx1.GetHash()));\n     BOOST_CHECK(!pool.exists(tx2.GetHash()));\n     BOOST_CHECK(!pool.exists(tx3.GetHash()));\n \n-    CFeeRate maxFeeRateRemoved(25000, GetVirtualTransactionSize(CTransaction(tx3)) + GetVirtualTransactionSize(CTransaction(tx2)));\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    CFeeRate maxFeeRateRemoved(25000, GetTransactionWeight(CTransaction(tx3)) + GetTransactionWeight(CTransaction(tx2)));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 250);\n \n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vin.resize(2);\n@@ -528,7 +529,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n \n     // we only require this to remove, at max, 2 txn, because it's not clear what we're really optimizing for aside from that\n-    pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * WITNESS_SCALE_FACTOR - 1);\n     BOOST_CHECK(pool.exists(tx4.GetHash()));\n     BOOST_CHECK(pool.exists(tx6.GetHash()));\n     BOOST_CHECK(!pool.exists(tx7.GetHash()));\n@@ -537,7 +538,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n         pool.addUnchecked(entry.Fee(1000LL).FromTx(tx5));\n     pool.addUnchecked(entry.Fee(9000LL).FromTx(tx7));\n \n-    pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * WITNESS_SCALE_FACTOR / 2); // should maximize mempool size by only removing 5/7\n     BOOST_CHECK(pool.exists(tx4.GetHash()));\n     BOOST_CHECK(!pool.exists(tx5.GetHash()));\n     BOOST_CHECK(pool.exists(tx6.GetHash()));\n@@ -549,24 +550,24 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     std::vector<CTransactionRef> vtx;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 250);\n     // ... we should keep the same min fee until we get a block\n     pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/2.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 250)/2.0));\n     // ... then feerate should drop 1/2 each halflife\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * WITNESS_SCALE_FACTOR * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 250)/4.0));\n     // ... with a 1/2 halflife when mempool is < 1/2 its target size\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * WITNESS_SCALE_FACTOR * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 250)/8.0));\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n     SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n-    // ... but feerate should never drop below 1000\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 250);\n+    // ... but feerate should never drop below 250\n \n     SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);"
      },
      {
        "sha": "4d533a9cb74c7c42437a79766f8d9f1c599e8d37",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/validation.h>\n #include <policy/policy.h>\n #include <policy/fees.h>\n #include <txmempool.h>\n@@ -44,7 +45,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     tx.vin[0].scriptSig = garbage;\n     tx.vout.resize(1);\n     tx.vout[0].nValue=0LL;\n-    CFeeRate baseRate(basefee, GetVirtualTransactionSize(CTransaction(tx)));\n+    CFeeRate baseRate(basefee, GetTransactionWeight(CTransaction(tx)));\n \n     // Create a fake block\n     std::vector<CTransactionRef> block;"
      },
      {
        "sha": "e03ebe1254ed2cbd26f358194a68d871ee83b907",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "patch": "@@ -177,16 +177,16 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         parentHashes = GetMemPoolParents(it);\n     }\n \n-    size_t totalSizeWithAncestors = entry.GetTxSize();\n+    size_t totalSizeWithAncestors = entry.GetTxWeight();\n \n     while (!parentHashes.empty()) {\n         txiter stageit = *parentHashes.begin();\n \n         setAncestors.insert(stageit);\n         parentHashes.erase(stageit);\n-        totalSizeWithAncestors += stageit->GetTxSize();\n+        totalSizeWithAncestors += stageit->GetTxWeight();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        if (stageit->GetWeightWithDescendants() + entry.GetTxWeight() > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n         } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n@@ -1017,9 +1017,10 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n     int64_t time = GetTime();\n     if (time > lastRollingFeeUpdate + 10) {\n         double halflife = ROLLING_FEE_HALFLIFE;\n-        if (DynamicMemoryUsage() < sizelimit / 4)\n+        // The memory usage is in (real) bytes, though the size is in weight units.\n+        if (DynamicMemoryUsage() * WITNESS_SCALE_FACTOR < sizelimit / 4)\n             halflife /= 4;\n-        else if (DynamicMemoryUsage() < sizelimit / 2)\n+        else if (DynamicMemoryUsage() * WITNESS_SCALE_FACTOR < sizelimit / 2)\n             halflife /= 2;\n \n         rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n@@ -1046,14 +1047,15 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n-    while (!mapTx.empty() && DynamicMemoryUsage() > sizelimit) {\n+    // The DynamicMemoryUsage is in (real) bytes, but our size in weight units.\n+    while (!mapTx.empty() && DynamicMemoryUsage() * WITNESS_SCALE_FACTOR > sizelimit) {\n         indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n         // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n         // equal to txn which were removed with no block in between.\n-        CFeeRate removed(it->GetModFeesWithDescendants(), it->GetSizeWithDescendants());\n+        CFeeRate removed(it->GetModFeesWithDescendants(), it->GetWeightWithDescendants());\n         removed += incrementalRelayFee;\n         trackPackageRemoved(removed);\n         maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);"
      },
      {
        "sha": "b8825bcdd2b7d70ebacc6e8f00110f15d3a70be1",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "patch": "@@ -233,15 +233,15 @@ class CompareTxMemPoolEntryByDescendantScore\n     {\n         // Compare feerate with descendants to feerate of the transaction, and\n         // return the fee/size for the max.\n-        double f1 = (double)a.GetModifiedFee() * a.GetSizeWithDescendants();\n-        double f2 = (double)a.GetModFeesWithDescendants() * a.GetTxSize();\n+        double f1 = (double)a.GetModifiedFee() * a.GetWeightWithDescendants();\n+        double f2 = (double)a.GetModFeesWithDescendants() * a.GetTxWeight();\n \n         if (f2 > f1) {\n             mod_fee = a.GetModFeesWithDescendants();\n-            size = a.GetSizeWithDescendants();\n+            size = a.GetWeightWithDescendants();\n         } else {\n             mod_fee = a.GetModifiedFee();\n-            size = a.GetTxSize();\n+            size = a.GetTxWeight();\n         }\n     }\n };\n@@ -258,8 +258,8 @@ class CompareTxMemPoolEntryByScore\n public:\n     bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n-        double f1 = (double)a.GetFee() * b.GetTxSize();\n-        double f2 = (double)b.GetFee() * a.GetTxSize();\n+        double f1 = (double)a.GetFee() * b.GetTxWeight();\n+        double f2 = (double)b.GetFee() * a.GetTxWeight();\n         if (f1 == f2) {\n             return b.GetTx().GetHash() < a.GetTx().GetHash();\n         }\n@@ -307,15 +307,15 @@ class CompareTxMemPoolEntryByAncestorFee\n     {\n         // Compare feerate with ancestors to feerate of the transaction, and\n         // return the fee/size for the min.\n-        double f1 = (double)a.GetModifiedFee() * a.GetSizeWithAncestors();\n-        double f2 = (double)a.GetModFeesWithAncestors() * a.GetTxSize();\n+        double f1 = (double)a.GetModifiedFee() * a.GetWeightWithAncestors();\n+        double f2 = (double)a.GetModFeesWithAncestors() * a.GetTxWeight();\n \n         if (f1 > f2) {\n             mod_fee = a.GetModFeesWithAncestors();\n-            size = a.GetSizeWithAncestors();\n+            size = a.GetWeightWithAncestors();\n         } else {\n             mod_fee = a.GetModifiedFee();\n-            size = a.GetTxSize();\n+            size = a.GetTxWeight();\n         }\n     }\n };"
      },
      {
        "sha": "d231075cdf5804425fdf89787792928a458f69e3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "patch": "@@ -385,7 +385,7 @@ static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool,\n     // We also need to remove any now-immature transactions\n     mempool.removeForReorg(&::ChainstateActive().CoinsTip(), ::ChainActive().Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000 * WITNESS_SCALE_FACTOR, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n@@ -432,9 +432,9 @@ class MemPoolAccept\n public:\n     MemPoolAccept(CTxMemPool& mempool) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&::ChainstateActive().CoinsTip(), m_pool),\n         m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n-        m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n+        m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000*WITNESS_SCALE_FACTOR),\n         m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n-        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {}\n+        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000*WITNESS_SCALE_FACTOR) {}\n \n     // We put the arguments we're handed into a struct, so we can pass them\n     // around easier.\n@@ -502,7 +502,7 @@ class MemPoolAccept\n     // Compare a package's feerate against minimum allowed.\n     bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state)\n     {\n-        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n+        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000 * WITNESS_SCALE_FACTOR).GetFee(package_size);\n         if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool min fee not met\", strprintf(\"%d < %d\", package_fee, mempoolRejectFee));\n         }\n@@ -692,7 +692,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     entry.reset(new CTxMemPoolEntry(ptx, nFees, nAcceptTime, ::ChainActive().Height(),\n             fSpendsCoinbase, nSigOpsCost, lp));\n-    unsigned int nSize = entry->GetTxSize();\n+    unsigned int nSize = entry->GetTxWeight();\n \n     if (nSigOpsCost > MAX_STANDARD_TX_SIGOPS_COST)\n         return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-too-many-sigops\",\n@@ -811,7 +811,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             // mean high feerate children are ignored when deciding whether\n             // or not to replace, we do require the replacement to pay more\n             // overall fees too, mitigating most cases.\n-            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n+            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxWeight());\n             if (newFeeRate <= oldFeeRate)\n             {\n                 return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n@@ -839,7 +839,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             }\n             for (CTxMemPool::txiter it : allConflicting) {\n                 nConflictingFees += it->GetModifiedFee();\n-                nConflictingSize += it->GetTxSize();\n+                nConflictingSize += it->GetTxWeight();\n             }\n         } else {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n@@ -975,11 +975,11 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     // Remove conflicting transactions from the mempool\n     for (CTxMemPool::txiter it : allConflicting)\n     {\n-        LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n+        LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta weight units\\n\",\n                 it->GetTx().GetHash().ToString(),\n                 hash.ToString(),\n                 FormatMoney(nModifiedFees - nConflictingFees),\n-                (int)entry->GetTxSize() - (int)nConflictingSize);\n+                (int)entry->GetTxWeight() - (int)nConflictingSize);\n         if (args.m_replaced_transactions)\n             args.m_replaced_transactions->push_back(it->GetSharedTx());\n     }\n@@ -997,7 +997,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        LimitMempoolSize(m_pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000 * WITNESS_SCALE_FACTOR, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }"
      },
      {
        "sha": "6548130df439655cf085720eeac98d081ec15cc7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f37f614d6dcdb7aa65433e067f0d519ad876319/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "patch": "@@ -64,7 +64,7 @@ static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n  * ancestor and is no larger than this. Not really any reason to make this\n  * configurable as it doesn't materially change DoS parameters.\n  */\n-static const unsigned int EXTRA_DESCENDANT_TX_SIZE_LIMIT = 10000;\n+static const unsigned int EXTRA_DESCENDANT_TX_SIZE_LIMIT = 40000;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n /** Maximum kilobytes for transactions to store for processing during reorg */"
      }
    ]
  },
  {
    "sha": "4451345484d82d37c343d71ee489023314c59fa4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDUxMzQ1NDg0ZDgyZDM3YzM0M2Q3MWVlNDg5MDIzMzE0YzU5ZmE0",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-11T17:09:23Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:46Z"
      },
      "message": "miner: switch to weight-based accounting for packages\n\nThis adds weight units counter to the 'CTxMemPoolModifiedEntry' struct\nto make weights the packages size unit.\n\nThis also treats block min feerate as per weight units, while leaving\nintact the vbyte shroud for the user.",
      "tree": {
        "sha": "230309d1ba474de4c6a4629a53e29349c1dca41f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/230309d1ba474de4c6a4629a53e29349c1dca41f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4451345484d82d37c343d71ee489023314c59fa4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L4ACgkQ4T/BRc0/\nQwQTlgv7BQIkfO82yl4GwIiEkbvpUmMFLkDdFRsD+mhQkUP0yS88+4Bgabxvz7m7\nwrtvd4m9ZAjeSpADntNI877mFrTelEIEvnVlNGFVI6sRR3gMNi9PQU8WLTlLprPC\npNXbC9e0PCm4h1/GhHJq9x2MxA1jNJy1JV35mBZJo94NC64IRM7XwMoEgjK23UqD\nrJ82cm4wy0wwJowRgFzo7he3Ov53IrTLXn9me/WExQsux7Pa1rvT74aRMr0bbC5g\ntUObZR54kre1mbzeaSm2BOWnPInnw3cWD2+6zXRS/tmrFq71rNqjtP7XtWerD5RZ\nKsEn8cxYtkGxQd2gE+8CoMmt2p3L5xuvUf0k1DUlQSjWnHfmwvhVmxRZmAFhnqN7\nc2wDoMd/p+xOcaUcX6g0X67iempzzGxErHjQEWd3v/H6RhEFNEU4Ibq9q2F6T84t\nxCWxjgcfEn4mPyEVUuIJttSFeOKc3FCj3HEmZRa0J5aKVSx7Sj17IO3W38tdp9jA\n1/kst+4n\n=Pdk4\n-----END PGP SIGNATURE-----",
        "payload": "tree 230309d1ba474de4c6a4629a53e29349c1dca41f\nparent 3f37f614d6dcdb7aa65433e067f0d519ad876319\nauthor darosior <darosior@protonmail.com> 1573492163 +0100\ncommitter darosior <darosior@protonmail.com> 1579278526 +0100\n\nminer: switch to weight-based accounting for packages\n\nThis adds weight units counter to the 'CTxMemPoolModifiedEntry' struct\nto make weights the packages size unit.\n\nThis also treats block min feerate as per weight units, while leaving\nintact the vbyte shroud for the user.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4451345484d82d37c343d71ee489023314c59fa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4451345484d82d37c343d71ee489023314c59fa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4451345484d82d37c343d71ee489023314c59fa4/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f37f614d6dcdb7aa65433e067f0d519ad876319",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f37f614d6dcdb7aa65433e067f0d519ad876319"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 14,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a1670d0f5567158cbe2601b3123ccd264ffbc4e6",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4451345484d82d37c343d71ee489023314c59fa4/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4451345484d82d37c343d71ee489023314c59fa4/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4451345484d82d37c343d71ee489023314c59fa4",
        "patch": "@@ -62,7 +62,7 @@ static BlockAssembler::Options DefaultOptions()\n     options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n     CAmount n = 0;\n     if (gArgs.IsArgSet(\"-blockmintxfee\") && ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n)) {\n-        options.blockMinFeeRate = CFeeRate(n);\n+        options.blockMinFeeRate = CFeeRate(n / WITNESS_SCALE_FACTOR);\n     } else {\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     }\n@@ -191,8 +191,7 @@ void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n \n bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost) const\n {\n-    // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n-    if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n+    if (nBlockWeight + packageSize >= nBlockMaxWeight)\n         return false;\n     if (nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST)\n         return false;\n@@ -227,8 +226,8 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n \n     bool fPrintPriority = gArgs.GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n     if (fPrintPriority) {\n-        LogPrintf(\"fee %s txid %s\\n\",\n-                  CFeeRate(iter->GetModifiedFee(), iter->GetTxSize()).ToString(),\n+        LogPrintf(\"feerate %s txid %s\\n\",\n+                  CFeeRate(iter->GetModifiedFee(), iter->GetTxWeight()).ToString(),\n                   iter->GetTx().GetHash().ToString());\n     }\n }\n@@ -249,6 +248,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n             if (mit == mapModifiedTx.end()) {\n                 CTxMemPoolModifiedEntry modEntry(desc);\n                 modEntry.nSizeWithAncestors -= it->GetTxSize();\n+                modEntry.nWeightWithAncestors -= it->GetTxWeight();\n                 modEntry.nModFeesWithAncestors -= it->GetModifiedFee();\n                 modEntry.nSigOpCostWithAncestors -= it->GetSigOpCost();\n                 mapModifiedTx.insert(modEntry);\n@@ -355,11 +355,11 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         // contain anything that is inBlock.\n         assert(!inBlock.count(iter));\n \n-        uint64_t packageSize = iter->GetSizeWithAncestors();\n+        uint64_t packageSize = iter->GetWeightWithAncestors();\n         CAmount packageFees = iter->GetModFeesWithAncestors();\n         int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();\n         if (fUsingModified) {\n-            packageSize = modit->nSizeWithAncestors;\n+            packageSize = modit->nWeightWithAncestors;\n             packageFees = modit->nModFeesWithAncestors;\n             packageSigOpsCost = modit->nSigOpCostWithAncestors;\n         }"
      },
      {
        "sha": "799e980450f01d7fee2b428ab0c63d710d339cbd",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4451345484d82d37c343d71ee489023314c59fa4/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4451345484d82d37c343d71ee489023314c59fa4/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=4451345484d82d37c343d71ee489023314c59fa4",
        "patch": "@@ -40,18 +40,22 @@ struct CTxMemPoolModifiedEntry {\n     {\n         iter = entry;\n         nSizeWithAncestors = entry->GetSizeWithAncestors();\n+        nWeightWithAncestors = entry->GetWeightWithAncestors();\n         nModFeesWithAncestors = entry->GetModFeesWithAncestors();\n         nSigOpCostWithAncestors = entry->GetSigOpCostWithAncestors();\n     }\n \n     int64_t GetModifiedFee() const { return iter->GetModifiedFee(); }\n     uint64_t GetSizeWithAncestors() const { return nSizeWithAncestors; }\n+    uint64_t GetWeightWithAncestors() const { return nWeightWithAncestors; }\n     CAmount GetModFeesWithAncestors() const { return nModFeesWithAncestors; }\n     size_t GetTxSize() const { return iter->GetTxSize(); }\n+    size_t GetTxWeight() const { return iter->GetTxWeight(); }\n     const CTransaction& GetTx() const { return iter->GetTx(); }\n \n     CTxMemPool::txiter iter;\n     uint64_t nSizeWithAncestors;\n+    uint64_t nWeightWithAncestors;\n     CAmount nModFeesWithAncestors;\n     int64_t nSigOpCostWithAncestors;\n };\n@@ -116,6 +120,7 @@ struct update_for_parent_inclusion\n     {\n         e.nModFeesWithAncestors -= iter->GetFee();\n         e.nSizeWithAncestors -= iter->GetTxSize();\n+        e.nWeightWithAncestors -= iter->GetTxWeight();\n         e.nSigOpCostWithAncestors -= iter->GetSigOpCost();\n     }\n "
      },
      {
        "sha": "5d94925ace50072a0296e3aee8b478757958e51c",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4451345484d82d37c343d71ee489023314c59fa4/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4451345484d82d37c343d71ee489023314c59fa4/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=4451345484d82d37c343d71ee489023314c59fa4",
        "patch": "@@ -7,6 +7,7 @@\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n #include <miner.h>\n #include <policy/policy.h>\n #include <script/standard.h>\n@@ -143,7 +144,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000; // 0 fee\n     uint256 hashFreeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(0).FromTx(tx));\n-    size_t freeTxSize = ::GetSerializeSize(tx, PROTOCOL_VERSION);\n+    size_t freeTxSize = GetTransactionWeight(CTransaction(tx));\n \n     // Calculate a fee on child transaction that will put the package just\n     // below the block min tx fee (assuming 1 child tx of the same size)."
      }
    ]
  },
  {
    "sha": "67e2c768ec4c90661e4a2189dcd333aa3dafde25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2UyYzc2OGVjNGM5MDY2MWU0YTIxODlkY2QzMzNhYTNkYWZkZTI1",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-11T00:08:58Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:46Z"
      },
      "message": "wallet: use weight units for fee computation\n\nThe functional tests in wallet_basic.py are also modified to check feerates\nusing weight units, as we don't round up anymore for transaction size computation.",
      "tree": {
        "sha": "9ae32fec5b1054fda8a33e31648682b1a10cc509",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ae32fec5b1054fda8a33e31648682b1a10cc509"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67e2c768ec4c90661e4a2189dcd333aa3dafde25",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L4ACgkQ4T/BRc0/\nQwRW0Av/WhSNPhkaa8/uMWZX/Mbtjp7zSYMAx+3BHmsL9qXk5mLq0kNjeJI9w4G6\ni7npBtajN5XN5wbsRrqdS80FCRafggW4fTjCe71dLq5klrqf6xjafRiPLmql3x2O\nJKgj0uU7/5pcrKwFLeh35dRSgTDSr2bF3LGTHvUzBZX4WSWqG4aj8l/tm7EmEhZR\nxq9zmih1SKKqXLBFBifcIYmx4kP0Xqis3nZbuJVetvLYwHxjKv9JJ2qOcNChnNNg\nGAG8347dpDwG8ue6Y2pyq3oVG0UtBgRIdBCPBd9dX7W1yOaxUqgxicQvI9qiiNNJ\npIvM3QPgkjjpE6lwQS58XTlIcOUvXd5RUf5sNRFKjQwyY3bravnpB6Nkk+a0wMxX\ngG6JLWY7g+mt1bglUybLd9M+Xh2Iov/R4ggFARcbdbv1HoHK77LCAvGADIbrii21\nX+dETf9gqsw/PB4z0RkEAGWeEi50gw9C2wP1XlFrUGIY4CU+olmzAcRSimRXzoNw\nR1FN9WHn\n=mHgb\n-----END PGP SIGNATURE-----",
        "payload": "tree 9ae32fec5b1054fda8a33e31648682b1a10cc509\nparent 4451345484d82d37c343d71ee489023314c59fa4\nauthor darosior <darosior@protonmail.com> 1573430938 +0100\ncommitter darosior <darosior@protonmail.com> 1579278526 +0100\n\nwallet: use weight units for fee computation\n\nThe functional tests in wallet_basic.py are also modified to check feerates\nusing weight units, as we don't round up anymore for transaction size computation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67e2c768ec4c90661e4a2189dcd333aa3dafde25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67e2c768ec4c90661e4a2189dcd333aa3dafde25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67e2c768ec4c90661e4a2189dcd333aa3dafde25/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4451345484d82d37c343d71ee489023314c59fa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4451345484d82d37c343d71ee489023314c59fa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4451345484d82d37c343d71ee489023314c59fa4"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 79,
      "deletions": 55
    },
    "files": [
      {
        "sha": "ea03bbb1e9227ea9e10d224f1b6a725e67565efd",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=67e2c768ec4c90661e4a2189dcd333aa3dafde25",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/validation.h>\n #include <interfaces/chain.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n@@ -81,7 +82,7 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n     // Given old total fee and transaction size, calculate the old feeRate\n     isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n     CAmount old_fee = wtx.GetDebit(filter) - wtx.tx->GetValueOut();\n-    const int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t txSize = GetTransactionWeight(*(wtx.tx));\n     CFeeRate nOldFeeRate(old_fee, txSize);\n     // Min total fee is old fee + relay fee\n     CAmount minTotalFee = nOldFeeRate.GetFee(maxTxSize) + incrementalRelayFee.GetFee(maxTxSize);\n@@ -112,12 +113,9 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n \n static CFeeRate EstimateFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CAmount old_fee, CCoinControl& coin_control)\n {\n-    // Get the fee rate of the original transaction. This is calculated from\n-    // the tx fee/vsize, so it may have been rounded down. Add 1 satoshi to the\n-    // result.\n-    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    // Get the fee rate of the original transaction.\n+    int64_t txSize = GetTransactionWeight(*(wtx.tx));\n     CFeeRate feerate(old_fee, txSize);\n-    feerate += CFeeRate(1);\n \n     // The node has a configurable incremental relay fee. Increment the fee by\n     // the minimum of that and the wallet's conservative\n@@ -189,7 +187,7 @@ Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, co\n     }\n \n     // Calculate the expected size of the new transaction.\n-    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    int64_t txSize = GetTransactionWeight(*(wtx.tx));\n     const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, wallet);\n     if (maxNewTxSize < 0) {\n         errors.push_back(\"Transaction contains inputs that cannot be signed\");"
      },
      {
        "sha": "e734d15a997a348e416f1e4ce46a529a3a6b946c",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=67e2c768ec4c90661e4a2189dcd333aa3dafde25",
        "patch": "@@ -15,9 +15,15 @@ CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes)\n }\n \n \n-CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, FeeCalculation* feeCalc)\n+CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxWeight, const CCoinControl& coin_control, FeeCalculation* feeCalc)\n {\n-    return GetMinimumFeeRate(wallet, coin_control, feeCalc).GetFee(nTxBytes);\n+    CFeeRate min_feerate = GetMinimumFeeRate(wallet, coin_control, feeCalc);\n+    CAmount fees = min_feerate.GetFee(nTxWeight);\n+    // Avoid fees below minimum treshold because of truncation\n+    if (fees * 1000 / nTxWeight < min_feerate.GetFee(1000)) {\n+        fees++;\n+    }\n+    return fees;\n }\n \n CFeeRate GetRequiredFeeRate(const CWallet& wallet)"
      },
      {
        "sha": "9f387ea07551b29673082ddde12fe5f8c326a11a",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=67e2c768ec4c90661e4a2189dcd333aa3dafde25",
        "patch": "@@ -8,6 +8,7 @@\n #include <stdint.h>\n #include <vector>\n \n+#include <consensus/validation.h>\n #include <interfaces/chain.h>\n #include <node/context.h>\n #include <policy/policy.h>\n@@ -623,12 +624,12 @@ static size_t CalculateNestedKeyhashInputSize(bool use_max_sig)\n \n     CTxIn tx_in;\n     UpdateInput(tx_in, sig_data);\n-    return (size_t)GetVirtualTransactionInputSize(tx_in);\n+    return (size_t)GetTransactionInputWeight(tx_in);\n }\n \n BOOST_FIXTURE_TEST_CASE(dummy_input_size_test, TestChain100Setup)\n {\n-    BOOST_CHECK_EQUAL(CalculateNestedKeyhashInputSize(false), DUMMY_NESTED_P2WPKH_INPUT_SIZE);\n+    BOOST_CHECK_EQUAL(CalculateNestedKeyhashInputSize(false), DUMMY_NESTED_P2WPKH_INPUT_SIZE - 1);\n     BOOST_CHECK_EQUAL(CalculateNestedKeyhashInputSize(true), DUMMY_NESTED_P2WPKH_INPUT_SIZE);\n }\n "
      },
      {
        "sha": "50573a5c375f8870bc9dfbf7270ec93c6de3ef6c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 24,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=67e2c768ec4c90661e4a2189dcd333aa3dafde25",
        "patch": "@@ -1496,7 +1496,7 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wall\n     if (!wallet->DummySignTx(txNew, txouts, use_max_sig)) {\n         return -1;\n     }\n-    return GetVirtualTransactionSize(CTransaction(txNew));\n+    return GetTransactionWeight(CTransaction(txNew));\n }\n \n int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet, bool use_max_sig)\n@@ -1506,7 +1506,7 @@ int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet,\n     if (!wallet->DummySignInput(txn.vin[0], txout, use_max_sig)) {\n         return -1;\n     }\n-    return GetVirtualTransactionInputSize(txn.vin[0]);\n+    return GetTransactionInputWeight(txn.vin[0]);\n }\n \n void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n@@ -2596,7 +2596,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n     FeeCalculation feeCalc;\n     CAmount nFeeNeeded;\n-    int nBytes;\n+    int nWeightUnits;\n     {\n         std::set<CInputCoin> setCoins;\n         auto locked_chain = chain().lock();\n@@ -2638,7 +2638,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 scriptChange = GetScriptForDestination(dest);\n             }\n             CTxOut change_prototype_txout(0, scriptChange);\n-            coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n+            coin_selection_params.change_output_size = GetTransactionOutputWeight(change_prototype_txout);\n \n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n@@ -2667,7 +2667,8 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n                 // vouts to the payees\n                 if (!coin_selection_params.m_subtract_fee_outputs) {\n-                    coin_selection_params.tx_noinputs_size = 11; // Static vsize overhead + outputs vsize. 4 nVersion, 4 nLocktime, 1 input count, 1 output count, 1 witness overhead (dummy, flag, stack size)\n+                    // Static weight overhead + outputs size. 4*4 nVersion, 4*4 nLocktime, 1*4 input count, 1*4 output count, 1 witness overhead (dummy, flag, stack size)\n+                    coin_selection_params.tx_noinputs_size = (4 + 4 + 1 + 1) * WITNESS_SCALE_FACTOR + 1;\n                 }\n                 for (const auto& recipient : vecSend)\n                 {\n@@ -2686,7 +2687,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     }\n                     // Include the fee cost for outputs. Note this is only used for BnB right now\n                     if (!coin_selection_params.m_subtract_fee_outputs) {\n-                        coin_selection_params.tx_noinputs_size += ::GetSerializeSize(txout, PROTOCOL_VERSION);\n+                        coin_selection_params.tx_noinputs_size += GetTransactionOutputWeight(txout);\n                     }\n \n                     if (IsDust(txout, chain().relayDustFee()))\n@@ -2775,13 +2776,13 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n                 }\n \n-                nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n-                if (nBytes < 0) {\n+                nWeightUnits = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n+                if (nWeightUnits < 0) {\n                     strFailReason = _(\"Signing transaction failed\").translated;\n                     return false;\n                 }\n \n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n+                nFeeNeeded = GetMinimumFee(*this, nWeightUnits, coin_control, &feeCalc);\n                 if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n                     // eventually allow a fallback fee\n                     strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\").translated;\n@@ -2800,7 +2801,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     // (because of reduced tx size) and so we should add a\n                     // change output. Only try this once.\n                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n+                        unsigned int tx_size_with_change = nWeightUnits + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n                         CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n                         CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n@@ -2920,8 +2921,8 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     // accidental re-use.\n     reservedest.KeepDestination();\n \n-    WalletLogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n-              nFeeRet, nBytes, nFeeNeeded, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n+    WalletLogPrintf(\"Fee Calculation: Fee:%d Weight units:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n+              nFeeRet, nWeightUnits, nFeeNeeded, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n               feeCalc.est.pass.start, feeCalc.est.pass.end,\n               100 * feeCalc.est.pass.withinTarget / (feeCalc.est.pass.totalConfirmed + feeCalc.est.pass.inMempool + feeCalc.est.pass.leftMempool),\n               feeCalc.est.pass.withinTarget, feeCalc.est.pass.totalConfirmed, feeCalc.est.pass.inMempool, feeCalc.est.pass.leftMempool,\n@@ -3763,11 +3764,11 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             error = AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")).translated;\n             return nullptr;\n         }\n-        if (n > HIGH_TX_FEE_PER_KB) {\n+        if (n / WITNESS_SCALE_FACTOR > HIGH_TX_FEERATE_PER_WU) {\n             warnings.push_back(AmountHighWarn(\"-mintxfee\").translated + \" \" +\n                               _(\"This is the minimum transaction fee you pay on every transaction.\").translated);\n         }\n-        walletInstance->m_min_fee = CFeeRate(n);\n+        walletInstance->m_min_fee = CFeeRate(n / WITNESS_SCALE_FACTOR);\n     }\n \n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n@@ -3776,11 +3777,11 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", \"\"));\n             return nullptr;\n         }\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n+        if (nFeePerK / WITNESS_SCALE_FACTOR > HIGH_TX_FEERATE_PER_WU) {\n             warnings.push_back(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n                               _(\"This is the transaction fee you may pay when fee estimates are not available.\").translated);\n         }\n-        walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n+        walletInstance->m_fallback_fee = CFeeRate(nFeePerK / WITNESS_SCALE_FACTOR);\n     }\n     // Disable fallback fee in case value was set to 0, enable if non-null value\n     walletInstance->m_allow_fallback_fee = walletInstance->m_fallback_fee.GetFeePerK() != 0;\n@@ -3791,23 +3792,23 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-discardfee\", \"\"));\n             return nullptr;\n         }\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n+        if (nFeePerK / WITNESS_SCALE_FACTOR > HIGH_TX_FEERATE_PER_WU) {\n             warnings.push_back(AmountHighWarn(\"-discardfee\").translated + \" \" +\n                               _(\"This is the transaction fee you may discard if change is smaller than dust at this level\").translated);\n         }\n-        walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n+        walletInstance->m_discard_rate = CFeeRate(nFeePerK / WITNESS_SCALE_FACTOR);\n     }\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n             error = AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")).translated;\n             return nullptr;\n         }\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n+        if (nFeePerK / WITNESS_SCALE_FACTOR > HIGH_TX_FEERATE_PER_WU) {\n             warnings.push_back(AmountHighWarn(\"-paytxfee\").translated + \" \" +\n                               _(\"This is the transaction fee you will pay if you send a transaction.\").translated);\n         }\n-        walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n+        walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK / WITNESS_SCALE_FACTOR, 1000);\n         if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\").translated,\n                 gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString());\n@@ -3821,18 +3822,18 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             error = AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")).translated;\n             return nullptr;\n         }\n-        if (nMaxFee > HIGH_MAX_TX_FEE) {\n+        if (nMaxFee / WITNESS_SCALE_FACTOR > HIGH_MAX_TX_FEE) {\n             warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\").translated);\n         }\n-        if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n+        if (CFeeRate(nMaxFee / WITNESS_SCALE_FACTOR, 1000) < chain.relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\").translated,\n                                        gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n-        walletInstance->m_default_max_tx_fee = nMaxFee;\n+        walletInstance->m_default_max_tx_fee = nMaxFee / WITNESS_SCALE_FACTOR;\n     }\n \n-    if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\n+    if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEERATE_PER_WU) {\n         warnings.push_back(AmountHighWarn(\"-minrelaytxfee\").translated + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\").translated);\n     }"
      },
      {
        "sha": "991df9bb6c6b9023f7dbd7f0f692a14baab071d7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67e2c768ec4c90661e4a2189dcd333aa3dafde25/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=67e2c768ec4c90661e4a2189dcd333aa3dafde25",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_WALLET_H\n \n #include <amount.h>\n+#include <consensus/consensus.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n #include <outputtype.h>\n@@ -65,11 +66,11 @@ constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n //! -fallbackfee default\n static const CAmount DEFAULT_FALLBACK_FEE = 0;\n //! -discardfee default\n-static const CAmount DEFAULT_DISCARD_FEE = 10000;\n+static const CAmount DEFAULT_DISCARD_FEE = 2500;\n //! -mintxfee default\n-static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n+static const CAmount DEFAULT_TRANSACTION_MINFEE = 250;\n //! minimum recommended increment for BIP 125 replacement txs\n-static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n+static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 1250;\n //! Default for -spendzeroconfchange\n static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n //! Default for -walletrejectlongchains\n@@ -82,13 +83,13 @@ static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n //! -maxtxfee default\n constexpr CAmount DEFAULT_TRANSACTION_MAXFEE{COIN / 10};\n-//! Discourage users to set fees higher than this amount (in satoshis) per kB\n-constexpr CAmount HIGH_TX_FEE_PER_KB{COIN / 100};\n+//! Discourage users to set fees higher than this amount (in satoshis) per weight unit\n+constexpr CAmount HIGH_TX_FEERATE_PER_WU{COIN / 100 / WITNESS_SCALE_FACTOR};\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n-constexpr CAmount HIGH_MAX_TX_FEE{100 * HIGH_TX_FEE_PER_KB};\n+constexpr CAmount HIGH_MAX_TX_FEE{100 * HIGH_TX_FEERATE_PER_WU};\n \n-//! Pre-calculated constants for input size estimation in *virtual size*\n-static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n+//! Pre-calculated constants for input size estimation in *weight units*\n+static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 364;\n \n class CCoinControl;\n class COutput;"
      },
      {
        "sha": "ec44c6731a95d72363ce09a533aa399b2f1e5cd7",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67e2c768ec4c90661e4a2189dcd333aa3dafde25/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67e2c768ec4c90661e4a2189dcd333aa3dafde25/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=67e2c768ec4c90661e4a2189dcd333aa3dafde25",
        "patch": "@@ -645,18 +645,25 @@ def test_option_feerate(self):\n \n         # Make sure there is exactly one input so coin selection can't skew the result.\n         assert_equal(len(self.nodes[3].listunspent(1)), 1)\n+        # Use a feerate that won't make GetFees() truncate (and thus make us\n+        # round up fee result in GetMinimumFees())\n+        feerate = Decimal(\"0.00001012\")\n+        self.nodes[3].settxfee(feerate)\n \n         inputs = []\n         outputs = {self.nodes[3].getnewaddress() : 1}\n         rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n         result = self.nodes[3].fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by settxfee)\n-        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n-        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n+        result2 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2 * feerate})\n+        result3 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 10 * feerate})\n         assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by -maxtxfee\", self.nodes[3].fundrawtransaction, rawtx, {\"feeRate\": 1})\n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n \n+        # Reset feerate\n+        self.nodes[3].settxfee(self.min_relay_tx_fee)\n+\n     def test_address_reuse(self):\n         \"\"\"Test no address reuse occurs.\"\"\"\n         self.log.info(\"Test fundrawtxn does not reuse addresses\")"
      },
      {
        "sha": "4b3f1b8ee405e69541ca75e9230511109a5a81f0",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67e2c768ec4c90661e4a2189dcd333aa3dafde25/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67e2c768ec4c90661e4a2189dcd333aa3dafde25/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=67e2c768ec4c90661e4a2189dcd333aa3dafde25",
        "patch": "@@ -39,14 +39,14 @@ def setup_network(self):\n         connect_nodes(self.nodes[0], 2)\n         self.sync_all(self.nodes[0:3])\n \n-    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_weight, tx_size):\n         \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n         fee = balance_with_fee - curr_balance\n-        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n+        assert_fee_amount(fee, tx_size, fee_per_weight * 1000)\n         return curr_balance\n \n-    def get_vsize(self, txn):\n-        return self.nodes[0].decoderawtransaction(txn)['vsize']\n+    def get_size(self, txn):\n+        return self.nodes[0].decoderawtransaction(txn)['weight']\n \n     def run_test(self):\n         # Check that there's no UTXO on none of the nodes\n@@ -187,12 +187,14 @@ def run_test(self):\n \n         # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n-        fee_per_byte = Decimal('0.001') / 1000\n-        self.nodes[2].settxfee(fee_per_byte * 1000)\n+        fee_per_weight = Decimal('0.001') / 250\n+        self.nodes[2].settxfee(fee_per_weight * 4 * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all(self.nodes[0:3])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(),\n+                                           Decimal('84'), fee_per_weight,\n+                                           self.get_size(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n@@ -201,14 +203,19 @@ def run_test(self):\n         self.sync_all(self.nodes[0:3])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(),\n+                                           Decimal('20'), fee_per_weight,\n+                                           self.get_size(self.nodes[2].gettransaction(txid)['hex']))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n         self.sync_all(self.nodes[0:3])\n         node_0_bal += Decimal('10')\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(),\n+                                           node_2_bal - Decimal('10'),\n+                                           fee_per_weight,\n+                                           self.get_size(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n@@ -217,7 +224,10 @@ def run_test(self):\n         self.sync_all(self.nodes[0:3])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(),\n+                                           node_0_bal + Decimal('10'),\n+                                           fee_per_weight,\n+                                           self.get_size(self.nodes[2].gettransaction(txid)['hex']))\n \n         self.start_node(3)\n         connect_nodes(self.nodes[0], 3)"
      }
    ]
  },
  {
    "sha": "c845d41f3bf91cde08c0c2f284327ee95c487b9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODQ1ZDQxZjNiZjkxY2RlMDhjMGMyZjI4NDMyN2VlOTVjNDg3Yjlj",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-07T17:38:07Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:46Z"
      },
      "message": "policy/fees: use weight units for fee estimation",
      "tree": {
        "sha": "6c6e880469e45e2b9e5261c25f330bca8ab9d1f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c6e880469e45e2b9e5261c25f330bca8ab9d1f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c845d41f3bf91cde08c0c2f284327ee95c487b9c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L4ACgkQ4T/BRc0/\nQwRMvgv8Dsuz6146da4c8RjJUkVFPiwIrKKlvoTZv1XJJT2Axqy1WSxWboFK39nD\nBLNU5K/ctKOvUmNp33nMgXWJeLxyHpLfezD7kBGfLJw90HdFJq80Vx86Y2l6g5/m\n+zW5CFxc6XCnieiDg5vBWcnY6pkVgvskUSy+uNIUtAx2SblUr04ruypoj1O81ycl\nIiHWncbOynvxAHnNV5q0e6sQhb5WBbGYwDQtxK4TvgsACAYwgP+tLNIqgz80ZPB2\nZpno1z9ZSL69tA9A6mj/GViFV5XXIZgLB1j2ChSQCUoP5mcfpsT21e/um1RXpv1M\n+RMAQfUJgzPHpgogF4x+Ku0okkiO4Zi1KG/QkmCZOhPj+mLEu9sFTt4m4A2mRmvt\no51wac6lLEjMN90qzSKToHfOHBZXh9yG+fQSv4j+P67ZSmPlMRo4vYyIrKmMKQTq\n8FfV3H4FkGOi9Fe8KvKwFtTgsaA+F8zezMOIJSwHGxiERntLMgiiHL6HRWfGtDrK\nb/K9yn3L\n=K84t\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c6e880469e45e2b9e5261c25f330bca8ab9d1f0\nparent 67e2c768ec4c90661e4a2189dcd333aa3dafde25\nauthor darosior <darosior@protonmail.com> 1573148287 +0100\ncommitter darosior <darosior@protonmail.com> 1579278526 +0100\n\npolicy/fees: use weight units for fee estimation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c845d41f3bf91cde08c0c2f284327ee95c487b9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c845d41f3bf91cde08c0c2f284327ee95c487b9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c845d41f3bf91cde08c0c2f284327ee95c487b9c/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67e2c768ec4c90661e4a2189dcd333aa3dafde25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67e2c768ec4c90661e4a2189dcd333aa3dafde25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67e2c768ec4c90661e4a2189dcd333aa3dafde25"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "45177a9010a36b2fe9c89b6831c50ab648233255",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c845d41f3bf91cde08c0c2f284327ee95c487b9c/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c845d41f3bf91cde08c0c2f284327ee95c487b9c/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=c845d41f3bf91cde08c0c2f284327ee95c487b9c",
        "patch": "@@ -537,8 +537,8 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     }\n     trackedTxs++;\n \n-    // Feerates are stored and reported as BTC-per-kb:\n-    CFeeRate feeRate(entry.GetFee(), entry.GetTxSize());\n+    // Feerates are stored and reported as BTC-per-kWU:\n+    CFeeRate feeRate(entry.GetFee(), entry.GetTxWeight());\n \n     mapMemPoolTxs[hash].blockHeight = txHeight;\n     unsigned int bucketIndex = feeStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n@@ -567,8 +567,8 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n         return false;\n     }\n \n-    // Feerates are stored and reported as BTC-per-kb:\n-    CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n+    // Feerates are stored and reported as BTC-per-kWU:\n+    CFeeRate feeRate(entry->GetFee(), entry->GetTxWeight());\n \n     feeStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n     shortStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n@@ -865,7 +865,7 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n     try {\n         LOCK(m_cs_fee_estimator);\n-        fileout << 149900; // version required to read: 0.14.99 or later\n+        fileout << 199900; // version required to read: 0.19.99 or later\n         fileout << CLIENT_VERSION; // version that wrote the file\n         fileout << nBestSeenHeight;\n         if (BlockSpan() > HistoricalBlockSpan()/2) {\n@@ -900,9 +900,9 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n         unsigned int nFileBestSeenHeight;\n         filein >> nFileBestSeenHeight;\n \n-        if (nVersionRequired < 149900) {\n+        if (nVersionRequired < 199900) {\n             LogPrintf(\"%s: incompatible old fee estimation data (non-fatal). Version: %d\\n\", __func__, nVersionRequired);\n-        } else { // New format introduced in 149900\n+        } else { // New format introduced in 199900\n             unsigned int nFileHistoricalFirst, nFileHistoricalBest;\n             filein >> nFileHistoricalFirst >> nFileHistoricalBest;\n             if (nFileHistoricalFirst > nFileHistoricalBest || nFileHistoricalBest > nFileBestSeenHeight) {"
      },
      {
        "sha": "ad6290fa78e96eb3b9b39182c703345621201687",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c845d41f3bf91cde08c0c2f284327ee95c487b9c/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c845d41f3bf91cde08c0c2f284327ee95c487b9c/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=c845d41f3bf91cde08c0c2f284327ee95c487b9c",
        "patch": "@@ -169,7 +169,7 @@ class CBlockPolicyEstimator\n      * invalidates old estimates files. So leave it at 1000 unless it becomes\n      * necessary to lower it, and then lower it substantially.\n      */\n-    static constexpr double MIN_BUCKET_FEERATE = 1000;\n+    static constexpr double MIN_BUCKET_FEERATE = 250;\n     static constexpr double MAX_BUCKET_FEERATE = 1e7;\n \n     /** Spacing of FeeRate buckets"
      }
    ]
  },
  {
    "sha": "56d25201bc5c39fdfd39b49e82944ea282d06f9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmQyNTIwMWJjNWMzOWZkZmQzOWI0OWU4Mjk0NGVhMjgyZDA2Zjlk",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-11T15:59:13Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:46Z"
      },
      "message": "wallet/rpcwallet: convert user feerate I/O (from/to) virtual bytes\n\nWe now use weight units for an accurate fee computation internally, but\nwe don't want to break the API, so apply the vbyte factor for both RPC\ninputs and outputs.",
      "tree": {
        "sha": "d9ce1221bd454e5932d4c46ec5f7caed8d0304d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9ce1221bd454e5932d4c46ec5f7caed8d0304d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56d25201bc5c39fdfd39b49e82944ea282d06f9d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L4ACgkQ4T/BRc0/\nQwRRvwv/dH/rN9zanrufvdeqAyqGEcK9VeDu3lFjLovdE0O3p8yS6SnOxMgp3Shz\nUjOxPfEbT4aEKapWZ3DVRBuvY5A557ieuzDs1EziTuYsL2RujFgibvLaYYsSyHju\nLQA68YNyjc8cxqTlpTLFufx4UfeQ4WZUNDqq5b0aAeYc2GRhpXDUMiSSz0G+G02d\nS5zQKDBpQbuBgDjQcne1Ue+8gyhHvNbLSRph/tDys6geeXZID7vIV8a66dfPMeWR\nb2F03tOZiWJXhFRBQk2EaWvMy55Njtvtd7WFpb421d7FxR0P/5ZKcvjwOuh3rS/i\nxen1zRHx92ODozhPeZ6b8SU/cxEaY4L8bqHJ71YAf/AQIrORk0O455NLq8vBGNys\nNXl5WdwOn2aLte1EwMdqekHEjLCi0Vut47r4OzzYXPsm3lAtpZk1a3xgyNrH1nUH\nWHlQUPKzVm56pFsd5bidd0RovmJk3lM11o6/3IUdiqE+e2ZNb940ytu34F+YWttG\neiHWFJBP\n=IVgW\n-----END PGP SIGNATURE-----",
        "payload": "tree d9ce1221bd454e5932d4c46ec5f7caed8d0304d8\nparent c845d41f3bf91cde08c0c2f284327ee95c487b9c\nauthor darosior <darosior@protonmail.com> 1573487953 +0100\ncommitter darosior <darosior@protonmail.com> 1579278526 +0100\n\nwallet/rpcwallet: convert user feerate I/O (from/to) virtual bytes\n\nWe now use weight units for an accurate fee computation internally, but\nwe don't want to break the API, so apply the vbyte factor for both RPC\ninputs and outputs.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56d25201bc5c39fdfd39b49e82944ea282d06f9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56d25201bc5c39fdfd39b49e82944ea282d06f9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56d25201bc5c39fdfd39b49e82944ea282d06f9d/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c845d41f3bf91cde08c0c2f284327ee95c487b9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c845d41f3bf91cde08c0c2f284327ee95c487b9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c845d41f3bf91cde08c0c2f284327ee95c487b9c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d3ca1017b3a36db50a071f39a826bd15910daea2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56d25201bc5c39fdfd39b49e82944ea282d06f9d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56d25201bc5c39fdfd39b49e82944ea282d06f9d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=56d25201bc5c39fdfd39b49e82944ea282d06f9d",
        "patch": "@@ -2329,7 +2329,7 @@ static UniValue settxfee(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n \n     CAmount nAmount = AmountFromValue(request.params[0]);\n-    CFeeRate tx_fee_rate(nAmount, 1000);\n+    CFeeRate tx_fee_rate(nAmount / WITNESS_SCALE_FACTOR, 1000);\n     if (tx_fee_rate == CFeeRate(0)) {\n         // automatic selection\n     } else if (tx_fee_rate < pwallet->chain().relayMinFee()) {\n@@ -2483,7 +2483,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     if (pwallet->IsCrypted()) {\n         obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n-    obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFeePerK()));\n+    obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFee(1000 * WITNESS_SCALE_FACTOR)));\n     obj.pushKV(\"private_keys_enabled\", !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     obj.pushKV(\"avoid_reuse\", pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE));\n     if (pwallet->IsScanning()) {\n@@ -3062,7 +3062,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n \n         if (options.exists(\"feeRate\"))\n         {\n-            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n+            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]) / WITNESS_SCALE_FACTOR);\n             coinControl.fOverrideFeeRate = true;\n         }\n \n@@ -3413,7 +3413,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee %s (must be greater than 0)\", FormatMoney(totalFee)));\n             }\n         } else if (options.exists(\"fee_rate\")) {\n-            CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n+            CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]) / WITNESS_SCALE_FACTOR);\n             if (fee_rate <= CFeeRate(0)) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid fee_rate %s (must be greater than 0)\", fee_rate.ToString()));\n             }"
      }
    ]
  },
  {
    "sha": "9f1e569aa1eb621ac77b296e20768e5666db3810",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjFlNTY5YWExZWI2MjFhYzc3YjI5NmUyMDc2OGU1NjY2ZGIzODEw",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-09T19:51:15Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:46Z"
      },
      "message": "wallet/rpcwallet: allow to set feerate ('settxfee') in weight units",
      "tree": {
        "sha": "288dfc7c5a016511f99f012052c6532cf28a10b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/288dfc7c5a016511f99f012052c6532cf28a10b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f1e569aa1eb621ac77b296e20768e5666db3810",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L4ACgkQ4T/BRc0/\nQwTuXQwAwOGrCceLW2xEWYpfULbNcZg5ZgpM5ZOe7YeeNIp33CEW+jyfJZUWtTbe\nxZh7Me6yXG58E5T1tkWZp/qb8dI7Yoxkse0pN+pgAqHOe+bq5j/f1sGPsnyBCbm3\nyV37PoyD8G+1qYMpO2zG6FDzjWf0r6KZawF2kJsxKnp6D6JJwXJnqWixJpaXT64l\nuzIyyARwnjKRHUusvdzjHhkR4pp3sd6OBVWvHO2zsPLx6g9tSkRO5RzQIF5ygNxK\n+h8xLQ7oTEcspFAZjaP9elrWK7jI3tQlQ8kGQ6zvMH4cfl/MsYr39prcOPyMRxdO\nZvDy/7nRFeCwayt2eMlKPyOO4xgViNmgIJqiMCR3HVq3azQMaP9b/JqmS79Jkewp\nNdOOn86rJ3D+62ggux2s3Sc9q02e8HOgBLyi8qYt7G0LdIUoLAHQ6RuZrI6TeAZ1\nM7E3S1lYdKT2rfN8EhXWVJfDV4QM1/tIGE2Gd1yj0uNMlbuxbizXVWkq5zuiL5Sz\nK+lT46BC\n=ltCV\n-----END PGP SIGNATURE-----",
        "payload": "tree 288dfc7c5a016511f99f012052c6532cf28a10b6\nparent 56d25201bc5c39fdfd39b49e82944ea282d06f9d\nauthor darosior <darosior@protonmail.com> 1573329075 +0100\ncommitter darosior <darosior@protonmail.com> 1579278526 +0100\n\nwallet/rpcwallet: allow to set feerate ('settxfee') in weight units\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f1e569aa1eb621ac77b296e20768e5666db3810",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f1e569aa1eb621ac77b296e20768e5666db3810",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f1e569aa1eb621ac77b296e20768e5666db3810/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56d25201bc5c39fdfd39b49e82944ea282d06f9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56d25201bc5c39fdfd39b49e82944ea282d06f9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56d25201bc5c39fdfd39b49e82944ea282d06f9d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 17,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a6cf4ff7664e34839df0a132c7fd1c7fd50225aa",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f1e569aa1eb621ac77b296e20768e5666db3810/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f1e569aa1eb621ac77b296e20768e5666db3810/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=9f1e569aa1eb621ac77b296e20768e5666db3810",
        "patch": "@@ -40,6 +40,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendtoaddress\", 6 , \"conf_target\" },\n     { \"sendtoaddress\", 8, \"avoid_reuse\" },\n     { \"settxfee\", 0, \"amount\" },\n+    { \"settxfee\", 1, \"feerate_kwu\" },\n     { \"sethdseed\", 0, \"newkeypool\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n     { \"getreceivedbylabel\", 1, \"minconf\" },"
      },
      {
        "sha": "16e8312ca75775379cc61e09390956f6bc68aac6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f1e569aa1eb621ac77b296e20768e5666db3810/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f1e569aa1eb621ac77b296e20768e5666db3810/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9f1e569aa1eb621ac77b296e20768e5666db3810",
        "patch": "@@ -2312,24 +2312,28 @@ static UniValue settxfee(const JSONRPCRequest& request)\n     }\n \n             RPCHelpMan{\"settxfee\",\n-                \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\",\n+                \"\\nSet the transaction feerate for this wallet. Overrides the global -paytxfee command line parameter.\\n\",\n                 {\n-                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction feerate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"feerate_kwu\", RPCArg::Type::BOOL, /* default */ \"false\", \"Set the transaction feerate in \" + CURRENCY_UNIT + \"/kWU (kilo Weight Unit)\"},\n                 },\n                 RPCResult{\n             \"true|false        (boolean) Returns true if successful\\n\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"settxfee\", \"0.00001\")\n-            + HelpExampleRpc(\"settxfee\", \"0.00001\")\n+                    + HelpExampleCli(\"settxfee\", \"0.00001 true\")\n+                    + HelpExampleRpc(\"settxfee\", \"0.00001\")\n+                    + HelpExampleRpc(\"settxfee\", \"0.00001 true\")\n                 },\n             }.Check(request);\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n     CAmount nAmount = AmountFromValue(request.params[0]);\n-    CFeeRate tx_fee_rate(nAmount / WITNESS_SCALE_FACTOR, 1000);\n+    if (request.params[1].isNull() || !request.params[1].get_bool()) nAmount /= WITNESS_SCALE_FACTOR;\n+    CFeeRate tx_fee_rate(nAmount, 1000);\n     if (tx_fee_rate == CFeeRate(0)) {\n         // automatic selection\n     } else if (tx_fee_rate < pwallet->chain().relayMinFee()) {\n@@ -4302,7 +4306,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"avoid_reuse\"} },\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n     { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n-    { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n+    { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\", \"feerate_kwu\"} },\n     { \"wallet\",             \"setwalletflag\",                    &setwalletflag,                 {\"flag\",\"value\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },"
      },
      {
        "sha": "ea676deeaa707a4f2a26e771d0ca61100243e3b8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f1e569aa1eb621ac77b296e20768e5666db3810/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f1e569aa1eb621ac77b296e20768e5666db3810/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=9f1e569aa1eb621ac77b296e20768e5666db3810",
        "patch": "@@ -541,6 +541,13 @@ def run_test(self):\n         assert_array_result(tx[\"details\"], {\"category\": \"receive\"}, expected_receive_vout)\n         assert_equal(tx[verbose_field], self.nodes[0].decoderawtransaction(tx[\"hex\"]))\n \n+        # Sanity check for 'settxfee' second parameter\n+        feerate_set_wu = Decimal(\"0.0000025\")\n+        self.nodes[0].settxfee(feerate_set_wu * Decimal(4))\n+        feerate = self.nodes[0].getwalletinfo()[\"paytxfee\"]\n+        self.nodes[0].settxfee(feerate_set_wu, True)\n+        assert_equal(self.nodes[0].getwalletinfo()[\"paytxfee\"], feerate)\n+\n \n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  },
  {
    "sha": "01c749f9904a30d43f4233d529c305808794296b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWM3NDlmOTkwNGEzMGQ0M2Y0MjMzZDUyOWMzMDU4MDg3OTQyOTZi",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-07T17:17:19Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:47Z"
      },
      "message": "rpc/mining: allow \"estimatesmartfee\" to return feerate in weight units\n\nThis adds a parameter to get the resulting feerate in satoshis per kilo\nweight units instead of kilo virtual bytes.",
      "tree": {
        "sha": "3a905f3fb08d722c93e6dfb8923a80ed4e80defd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a905f3fb08d722c93e6dfb8923a80ed4e80defd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01c749f9904a30d43f4233d529c305808794296b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L8ACgkQ4T/BRc0/\nQwQJRwwA3yAf1MSZUWRkcIEQUxvfIkpklnt6zsWhLY89BPv6VdsX1OBKPy/JgET/\nWsXtdnA4L6xdzVm4gW90zb0gCWQ37Q7MvCjgT9Dv7dxog4dcL+Reez/7hmVJNaup\nM/tDQmDdjSwfRyU3oAcXzGSkgMme2vH6uc5BYlwfzQh9i0ki2blffHVmWILDso/L\nWhcSlUihXN3ujlah5Jc9Uo+Z+CW7TrMr65TS8f0ovTZKFuPROq7cEU3FHWRsg49N\nBTxswrPARor7OdJvWTXJYFbtMwGIyDEsK20kezUDzLteBVvI9IPkaI1naBMvNV5U\nAKUenskP0oEu8mSsOOjGy6L/4s131q+M5Qmgr6Lvog/kVyyI+74m+Un3QW1oQh2r\n6p1U9JWYpwpuyMpYpGUaEaiyc4n6zYYCmS4DTVSi0NvYHn8zNwVrCjURx6IZwbxR\ntsPowKB9VlIUu8zRcXOhrHTRB428GjNniNeiFTvUfENBhnTPeZN4NUiJVY7rytye\nYdzyvnvW\n=dlC5\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a905f3fb08d722c93e6dfb8923a80ed4e80defd\nparent 9f1e569aa1eb621ac77b296e20768e5666db3810\nauthor darosior <darosior@protonmail.com> 1573147039 +0100\ncommitter darosior <darosior@protonmail.com> 1579278527 +0100\n\nrpc/mining: allow \"estimatesmartfee\" to return feerate in weight units\n\nThis adds a parameter to get the resulting feerate in satoshis per kilo\nweight units instead of kilo virtual bytes.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c749f9904a30d43f4233d529c305808794296b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01c749f9904a30d43f4233d529c305808794296b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c749f9904a30d43f4233d529c305808794296b/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f1e569aa1eb621ac77b296e20768e5666db3810",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f1e569aa1eb621ac77b296e20768e5666db3810",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f1e569aa1eb621ac77b296e20768e5666db3810"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 58,
      "deletions": 32
    },
    "files": [
      {
        "sha": "618a383e7619476c6de02125a0535ee142164714",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c749f9904a30d43f4233d529c305808794296b/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c749f9904a30d43f4233d529c305808794296b/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=01c749f9904a30d43f4233d529c305808794296b",
        "patch": "@@ -140,6 +140,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatesmartfee\", 0, \"conf_target\" },\n+    { \"estimatesmartfee\", 2, \"feerate_kwu\" },\n     { \"estimaterawfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },"
      },
      {
        "sha": "0f56b62de385bb19223bce98c362201cbff84025",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c749f9904a30d43f4233d529c305808794296b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c749f9904a30d43f4233d529c305808794296b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=01c749f9904a30d43f4233d529c305808794296b",
        "patch": "@@ -831,9 +831,9 @@ static UniValue submitheader(const JSONRPCRequest& request)\n static UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"estimatesmartfee\",\n-                \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+                \"\\nEstimates the approximate fee per kilobyte or kiloweightunit needed for a transaction to begin\\n\"\n                 \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n-                \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n+                \"for which the estimate is valid. If enabled, uses virtual transaction size as defined\\n\"\n                 \"in BIP 141 (witness data is discounted).\\n\",\n                 {\n                     {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n@@ -846,10 +846,11 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n+                    {\"feerate_kwu\", RPCArg::Type::BOOL, /* default */ \"false\", \"Return fees in \" + CURRENCY_UNIT + \"/kWU (Weight Unit) instead of kilo virtual bytes.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_UNIT + \"/kWU\\n\"\n             \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n             \"}\\n\"\n@@ -882,7 +883,9 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n-        result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n+        CAmount feerate = feeRate.GetFeePerK();\n+        if (request.params[2].isNull() || !request.params[2].get_bool()) feerate *= WITNESS_SCALE_FACTOR;\n+        result.pushKV(\"feerate\", ValueFromAmount(feerate));\n     } else {\n         errors.push_back(\"Insufficient data or no feerate found\");\n         result.pushKV(\"errors\", errors);\n@@ -1010,7 +1013,7 @@ static const CRPCCommand commands[] =\n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },\n     { \"generating\",         \"generatetodescriptor\",   &generatetodescriptor,   {\"num_blocks\",\"descriptor\",\"maxtries\"} },\n \n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\", \"feerate_kwu\"} },\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },\n };"
      },
      {
        "sha": "101f9fefd6f0b6c3691527a54310417914489a84",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 49,
        "deletions": 27,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c749f9904a30d43f4233d529c305808794296b/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c749f9904a30d43f4233d529c305808794296b/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=01c749f9904a30d43f4233d529c305808794296b",
        "patch": "@@ -100,30 +100,6 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n \n \n-def check_estimates(node, fees_seen):\n-    \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n-\n-    delta = 1.0e-6  # account for rounding error\n-    last_feerate = float(max(fees_seen))\n-    all_smart_estimates = [node.estimatesmartfee(i) for i in range(1, 26)]\n-    for i, e in enumerate(all_smart_estimates):  # estimate is for i+1\n-        feerate = float(e[\"feerate\"])\n-        assert_greater_than(feerate, 0)\n-\n-        if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n-            raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n-                                 % (feerate, min(fees_seen), max(fees_seen)))\n-        if feerate - delta > last_feerate:\n-            raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\"\n-                                 % (feerate, last_feerate))\n-        last_feerate = feerate\n-\n-        if i == 0:\n-            assert_equal(e[\"blocks\"], 2)\n-        else:\n-            assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n-\n-\n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n@@ -169,6 +145,8 @@ def transact_and_mine(self, numblocks, mining_node):\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n                 tx_kbytes = (len(txhex) // 2) / 1000.0\n                 self.fees_per_kb.append(float(fee) / tx_kbytes)\n+                # No witness discount for these scripts without witness data\n+                self.fees_per_kwu.append(float(fee) / (tx_kbytes * 4))\n             self.sync_mempools(wait=.1)\n             mined = mining_node.getblock(mining_node.generate(1)[0], True)[\"tx\"]\n             self.sync_blocks(wait=.1)\n@@ -181,6 +159,49 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n+    def check_estimates(self):\n+        \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n+\n+        delta = 1.0e-6  # account for rounding error\n+        last_feerate = float(max(self.fees_per_kwu))\n+        smart_estimates = [self.nodes[1].estimatesmartfee(i, \"CONSERVATIVE\",\n+                                                          True) for i in range(1, 26)]\n+        for i, e in enumerate(smart_estimates):  # estimate is for i+1\n+            feerate = float(e[\"feerate\"])\n+            assert_greater_than(feerate, 0)\n+\n+            if feerate + delta < min(self.fees_per_kwu) or feerate - delta > max(self.fees_per_kwu):\n+                raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\" % (feerate, min(self.fees_per_kwu), max(self.fees_per_kwu)))\n+            if feerate - delta > last_feerate:\n+                raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\" % (feerate, last_feerate))\n+            last_feerate = feerate\n+\n+            if i == 0:\n+                assert_equal(e[\"blocks\"], 2)\n+            else:\n+                assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n+        # Test the legacy fee estimation, in btc / (virtual)kb\n+        last_feerate = float(max(self.fees_per_kb))\n+        smart_estimates = [self.nodes[1].estimatesmartfee(i) for i in range(1, 26)]\n+        for i, e in enumerate(smart_estimates):  # estimate is for i+1\n+            feerate = float(e[\"feerate\"])\n+            assert_greater_than(feerate, 0)\n+\n+            if feerate + delta < min(self.fees_per_kb) or feerate - delta > max(self.fees_per_kb):\n+                raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n+                                     % (feerate, min(self.fees_per_kb), max(self.fees_per_kb)))\n+            if feerate - delta > last_feerate:\n+                raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\"\n+                                     % (feerate, last_feerate))\n+            last_feerate = feerate\n+\n+            if i == 0:\n+                assert_equal(e[\"blocks\"], 2)\n+            else:\n+                assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n+\n+\n+\n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")\n@@ -224,6 +245,7 @@ def run_test(self):\n         self.sync_all()\n \n         self.fees_per_kb = []\n+        self.fees_per_kwu = []\n         self.memutxo = []\n         self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n         self.log.info(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n@@ -232,21 +254,21 @@ def run_test(self):\n             self.log.info(\"Creating transactions and mining them with a block size that can't keep up\")\n             # Create transactions and mine 10 small blocks with node 2, but create txs faster than we can mine\n             self.transact_and_mine(10, self.nodes[2])\n-            check_estimates(self.nodes[1], self.fees_per_kb)\n+            self.check_estimates()\n \n             self.log.info(\"Creating transactions and mining them at a block size that is just big enough\")\n             # Generate transactions while mining 10 more blocks, this time with node1\n             # which mines blocks with capacity just above the rate that transactions are being created\n             self.transact_and_mine(10, self.nodes[1])\n-            check_estimates(self.nodes[1], self.fees_per_kb)\n+            self.check_estimates()\n \n         # Finish by mining a normal-sized block:\n         while len(self.nodes[1].getrawmempool()) > 0:\n             self.nodes[1].generate(1)\n \n         self.sync_blocks(self.nodes[0:3], wait=.1)\n         self.log.info(\"Final estimates after emptying mempools\")\n-        check_estimates(self.nodes[1], self.fees_per_kb)\n+        self.check_estimates()\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "b1e95b7115bd268bab814807575c32ebe4c8fe88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWU5NWI3MTE1YmQyNjhiYWI4MTQ4MDc1NzVjMzJlYmU0YzhmZTg4",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-07T17:22:02Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:47Z"
      },
      "message": "rpc/mining: make \"estimaterawfee\" return feerate in weight units\n\nThere has been warnings since its inception that this API was not stable.\n\nSince we now estimate fees in weight units internally, it makes sense\nthat the raw estimatefee API returns the feerate in weight units.",
      "tree": {
        "sha": "fa3ac971d9f98c48cc8d9126f68a9af2526e300b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa3ac971d9f98c48cc8d9126f68a9af2526e300b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1e95b7115bd268bab814807575c32ebe4c8fe88",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L8ACgkQ4T/BRc0/\nQwTzxgwAypxsxQXzzmwCyiVnvBOTYDjwc1VPTJbFSj1mAun9J06cLLQj/z68nDF8\nGoZSZlNUm8TIHcRZmS2j2tJRPJ6vULgjaEgFS05Exvej0QdJ2UnZWAQDmJRZkN0K\n9Tp2TRV74Z/cSzqaiOa7uxVYPEg8RQpC3vAFjafHMpx7Wj2GSRBYdLa3O/GIrB5l\nZEQUVICg84+xBeSRIpdAY0Xwvtc+v6dzHH0+RiDBORNGY6dXKOwajn4AERyr3NOh\n918DKu+4Ia7q/JUFlitswyFhRsBXncgZuuMibL7saJwCO84IumOuUac1FXEsbPV3\n5z1JrXIig780P7tAtjfvfJLKZ5cyqBAK/dMGIgxzVQoxadpJ8+B1EYqNMGCOZxiI\nmU72lqzSdikjXFO2c6vG0XFsATA68ZyLFI87U5pTu8QE6xPhPsWsfxqEQ7Lr3CGy\nnIsIjxkvzut4e3uF9z6eI4lT70LHlVggpOdBBn3UaAKrC7Pn7ft9MFNqd6+B6Nki\nIBxlTCz9\n=56Q0\n-----END PGP SIGNATURE-----",
        "payload": "tree fa3ac971d9f98c48cc8d9126f68a9af2526e300b\nparent 01c749f9904a30d43f4233d529c305808794296b\nauthor darosior <darosior@protonmail.com> 1573147322 +0100\ncommitter darosior <darosior@protonmail.com> 1579278527 +0100\n\nrpc/mining: make \"estimaterawfee\" return feerate in weight units\n\nThere has been warnings since its inception that this API was not stable.\n\nSince we now estimate fees in weight units internally, it makes sense\nthat the raw estimatefee API returns the feerate in weight units.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1e95b7115bd268bab814807575c32ebe4c8fe88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1e95b7115bd268bab814807575c32ebe4c8fe88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1e95b7115bd268bab814807575c32ebe4c8fe88/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01c749f9904a30d43f4233d529c305808794296b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c749f9904a30d43f4233d529c305808794296b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01c749f9904a30d43f4233d529c305808794296b"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a13fec14015137a819fd183e908f2b817e612ed2",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1e95b7115bd268bab814807575c32ebe4c8fe88/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1e95b7115bd268bab814807575c32ebe4c8fe88/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b1e95b7115bd268bab814807575c32ebe4c8fe88",
        "patch": "@@ -901,9 +901,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n                 \"         implementation of fee estimation. The parameters it can be called with\\n\"\n                 \"         and the results it returns will change if the internal implementation changes.\\n\"\n-                \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-                \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n-                \"defined in BIP 141 (witness data is discounted).\\n\",\n+                \"\\nEstimates the approximate fee per kilo weight unit needed for a transaction to begin\\n\"\n+                \"confirmation within conf_target blocks if possible.\\n\",\n                 {\n                     {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n                     {\"threshold\", RPCArg::Type::NUM, /* default */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n@@ -913,7 +912,7 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 RPCResult{\n             \"{\\n\"\n             \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n-            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kWU\\n\"\n             \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n             \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n             \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\""
      }
    ]
  },
  {
    "sha": "501cf1d698b3287ac9b9fddf60367a728c70b2e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDFjZjFkNjk4YjMyODdhYzliOWZkZGY2MDM2N2E3MjhjNzBiMmUz",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-09T16:50:20Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:47Z"
      },
      "message": "rpc/net: expose feerates in virtual bytes\n\nWe now use weight units internally, but keep exposing virtual bytes\nto avoid breaking the API.",
      "tree": {
        "sha": "205b6754104fdaebd057a4a111ed078f1ececa33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/205b6754104fdaebd057a4a111ed078f1ececa33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/501cf1d698b3287ac9b9fddf60367a728c70b2e3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L8ACgkQ4T/BRc0/\nQwQbZgwAkphiEL4OJJyY/CRf1BalrRO0UT+EY5XApzBgsZ7+4qLu8ofkvPVa77aF\nMYeaX+X9ahtoYlPn2oHDiReLEMou7YxyolF8zm9Ebd9eS8ICNp23m+qCP3DR/7fv\n7tdFHQrx2THLTiBUmriLUJEcpQZtR8BN+JnxEy8J0oZofDJpsEM5E8tAERLKqMFh\nzD2qWXOpWdeUpkQHBMgN44wnrXF4m587SUV0nzeumkCSxX7fUXTs+l5tqXQq5rq+\nSUdDTdT19CEG+5wB36shIhq4PHy4IuZFty8X/m5WExqK9T+pp4km8fRlmAc9LEKL\nLrEKVPdkRi8A7ZUyoj3LERA8CNdw/TSeKu71zKBYWeMpAPZQPFN5wYG0XO8jp9YS\nqsqCQcPvKytRHb3WksI5P41tudJnHZp1c8RMuWtUr97vShXh6pGX5NadqVWNN+V2\nLoEdAYivHptAHVsO0qAHs4EmGDIxakJtE8fLJG8ZaH9n4dqGMX4AbVxxwSM43XFd\nc8L7KYUa\n=2Gis\n-----END PGP SIGNATURE-----",
        "payload": "tree 205b6754104fdaebd057a4a111ed078f1ececa33\nparent b1e95b7115bd268bab814807575c32ebe4c8fe88\nauthor darosior <darosior@protonmail.com> 1573318220 +0100\ncommitter darosior <darosior@protonmail.com> 1579278527 +0100\n\nrpc/net: expose feerates in virtual bytes\n\nWe now use weight units internally, but keep exposing virtual bytes\nto avoid breaking the API.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501cf1d698b3287ac9b9fddf60367a728c70b2e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/501cf1d698b3287ac9b9fddf60367a728c70b2e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501cf1d698b3287ac9b9fddf60367a728c70b2e3/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1e95b7115bd268bab814807575c32ebe4c8fe88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1e95b7115bd268bab814807575c32ebe4c8fe88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1e95b7115bd268bab814807575c32ebe4c8fe88"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "99b5421d5cad0ae33a83f774d584c2110d86ecb5",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/501cf1d698b3287ac9b9fddf60367a728c70b2e3/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/501cf1d698b3287ac9b9fddf60367a728c70b2e3/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=501cf1d698b3287ac9b9fddf60367a728c70b2e3",
        "patch": "@@ -191,7 +191,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             permissions.push_back(permission);\n         }\n         obj.pushKV(\"permissions\", permissions);\n-        obj.pushKV(\"minfeefilter\", ValueFromAmount(stats.minFeeFilter));\n+        obj.pushKV(\"minfeefilter\", ValueFromAmount(stats.minFeeFilter * WITNESS_SCALE_FACTOR));\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n         for (const auto& i : stats.mapSendBytesPerMsgCmd) {\n@@ -507,8 +507,8 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n         obj.pushKV(\"connections\",   (int)g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n     }\n     obj.pushKV(\"networks\",      GetNetworksInfo());\n-    obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n-    obj.pushKV(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK()));\n+    obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFee(1000 * WITNESS_SCALE_FACTOR)));\n+    obj.pushKV(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFee(1000 * WITNESS_SCALE_FACTOR)));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);"
      }
    ]
  },
  {
    "sha": "bedaf84928a77bb857885a67acebdafbf9d0601e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWRhZjg0OTI4YTc3YmI4NTc4ODVhNjdhY2ViZGFmYmY5ZDA2MDFl",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-09T17:25:55Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:47Z"
      },
      "message": "rpc/rawtransaction: rename the MAX_FEERATE constant\n\nThis makes it clearer that the constant is in sat/vkb, as the feerate\nparameters  currently exposed by the API are in sat/vkb.",
      "tree": {
        "sha": "84e551a6c5c0efe3227a5861e5af50f7d71b68b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84e551a6c5c0efe3227a5861e5af50f7d71b68b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bedaf84928a77bb857885a67acebdafbf9d0601e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L8ACgkQ4T/BRc0/\nQwTS7Qv/eJ6t+CGYpkSNkHOBG7LoQLObKjYVIAUORZ4ZRN97Kh0DUn/2ZjBehz7r\nFPbamlLmfphC5JPpmOIYaKPbAaAqIEH9Y/xQuNrFJu95lKBohW2BBY/1kht5qvHF\n53Yig3xFSWkv3SSMrwupj0ShQwLcAtz05c+XDXCs5Oe6qG1EiwegZQQvfqMEIn7C\n2mtBBEUA451tLiuT7I2LtJMMLauBvszheQMOFsJDa/I/QNa1ZJ2zj5W5lNvR0TWf\ngrS0I9hkcbLOG8PtRFT3f1pj2kCcQpHXSSKpFvbhGF4Bd5ef8Z+Pb6OUf3HJPMUC\nkLkmrNNFgt8bgmB/SvS1or9/UTPZ9vKqQwF9M+GvfY8j7d1LsC6bzDA5SFfYc27v\nqOKvGba5hvUQz8wIo6Hv9VDaQF7hPPG63NM8z4FWD78dxbdKnWcvkWgoWfBIK/Md\n5sOWN9MQr+xLJs5Ymsj+h/8odcdmXeJ4EhNajLTGD2iF6oXTIJ8fju3QxpZaZwxn\ntt0qIDB/\n=tGHZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 84e551a6c5c0efe3227a5861e5af50f7d71b68b0\nparent 501cf1d698b3287ac9b9fddf60367a728c70b2e3\nauthor darosior <darosior@protonmail.com> 1573320355 +0100\ncommitter darosior <darosior@protonmail.com> 1579278527 +0100\n\nrpc/rawtransaction: rename the MAX_FEERATE constant\n\nThis makes it clearer that the constant is in sat/vkb, as the feerate\nparameters  currently exposed by the API are in sat/vkb.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bedaf84928a77bb857885a67acebdafbf9d0601e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bedaf84928a77bb857885a67acebdafbf9d0601e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bedaf84928a77bb857885a67acebdafbf9d0601e/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "501cf1d698b3287ac9b9fddf60367a728c70b2e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501cf1d698b3287ac9b9fddf60367a728c70b2e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/501cf1d698b3287ac9b9fddf60367a728c70b2e3"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "039169f5a63b4167de4609b5f6f8a6c859ba8565",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bedaf84928a77bb857885a67acebdafbf9d0601e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bedaf84928a77bb857885a67acebdafbf9d0601e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bedaf84928a77bb857885a67acebdafbf9d0601e",
        "patch": "@@ -43,7 +43,7 @@\n  * By default, a transaction with a fee rate higher than this will be rejected\n  * by the RPCs. This can be overridden with the maxfeerate argument.\n  */\n-static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n+static const CFeeRate DEFAULT_MAX_RAW_TX_FEERATE_VBYTE{COIN / 10};\n \n static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n@@ -779,7 +779,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()),\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEERATE_VBYTE.GetFeePerK()),\n                         \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT +\n                             \"/kB.\\nSet to 0 to accept any fee rate.\\n\"},\n                 },\n@@ -809,7 +809,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n \n-    CFeeRate max_raw_tx_fee_rate = DEFAULT_MAX_RAW_TX_FEE_RATE;\n+    CFeeRate max_raw_tx_fee_rate = DEFAULT_MAX_RAW_TX_FEERATE_VBYTE;\n     // TODO: temporary migration code for old clients. Remove in v0.20\n     if (request.params[1].isBool()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second argument must be numeric (maxfeerate) and no longer supports a boolean. To allow a transaction with high fees, set maxfeerate to 0.\");\n@@ -843,7 +843,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEERATE_VBYTE.GetFeePerK()), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n                 },\n                 RPCResult{\n             \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n@@ -883,7 +883,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n     const uint256& tx_hash = tx->GetHash();\n \n-    CFeeRate max_raw_tx_fee_rate = DEFAULT_MAX_RAW_TX_FEE_RATE;\n+    CFeeRate max_raw_tx_fee_rate = DEFAULT_MAX_RAW_TX_FEERATE_VBYTE;\n     // TODO: temporary migration code for old clients. Remove in v0.20\n     if (request.params[1].isBool()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second argument must be numeric (maxfeerate) and no longer supports a boolean. To allow a transaction with high fees, set maxfeerate to 0.\");"
      }
    ]
  },
  {
    "sha": "708b2e3ed9746a9588b61d81c988138c763ec74a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDhiMmUzZWQ5NzQ2YTk1ODhiNjFkODFjOTg4MTM4Yzc2M2VjNzRh",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-09T17:42:03Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:47Z"
      },
      "message": "rpc/rawtransaction: add transaction weight to 'analyzepsbt' output",
      "tree": {
        "sha": "62fea02b1f5ce8e105660bb933fe1c96fccf013c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62fea02b1f5ce8e105660bb933fe1c96fccf013c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/708b2e3ed9746a9588b61d81c988138c763ec74a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L8ACgkQ4T/BRc0/\nQwQncAv/fOydyj82mDzHlYUPJ3KBUjtjvZ3pXSkP0uF5dcJCb916Gea0N6nHGqyA\ndfclC1JlMaazWi/SNrugH0fhexYclSojO9igiOcwduZXOxL1tCrnJvtJG7mTHHHS\nBz6HSqpPcnPi37sc8eIl4mM4EtNH3P03Hqm7OhmkMB0tqI2a1fs+X5GhWqiqPea1\n6zrG6nI+FlMOXuECOhDUWU098cOo/EhvEYcwHD7+MktYFAoDswkJJTc70HdEyDfB\nQwTAk8/bp1C05cC8FSf5tRXqx32p2xQ+O2sJWqNP4ZmAbRAg1dB2LtYEeZXSERIy\neCWsLfOibpONq05YOA1rAXQlko55/RfelSNxhYKzQSZTy7v/Pkjwhh/PrE66I4Ud\nU/bJGdQ1wI8T4XcoFO4rj2PQJc02SLKGmqURpBYKcinAq2tPxneM/f9p79urBMtf\nLyvZT0wEeJkEhAbl7ty1t7+u0au4ok59WVzLG8njnnx/e7Jdlu1kMmdh3WomicRL\naGztXDiZ\n=Fl1Q\n-----END PGP SIGNATURE-----",
        "payload": "tree 62fea02b1f5ce8e105660bb933fe1c96fccf013c\nparent bedaf84928a77bb857885a67acebdafbf9d0601e\nauthor darosior <darosior@protonmail.com> 1573321323 +0100\ncommitter darosior <darosior@protonmail.com> 1579278527 +0100\n\nrpc/rawtransaction: add transaction weight to 'analyzepsbt' output\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/708b2e3ed9746a9588b61d81c988138c763ec74a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/708b2e3ed9746a9588b61d81c988138c763ec74a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/708b2e3ed9746a9588b61d81c988138c763ec74a/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bedaf84928a77bb857885a67acebdafbf9d0601e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bedaf84928a77bb857885a67acebdafbf9d0601e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bedaf84928a77bb857885a67acebdafbf9d0601e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3ffe552f91037823f4521eec8390ee5c6a9c902f",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/708b2e3ed9746a9588b61d81c988138c763ec74a/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/708b2e3ed9746a9588b61d81c988138c763ec74a/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=708b2e3ed9746a9588b61d81c988138c763ec74a",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <coins.h>\n #include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n #include <node/psbt.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n@@ -116,8 +117,10 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n         if (success) {\n             CTransaction ctx = CTransaction(mtx);\n-            size_t size = GetVirtualTransactionSize(ctx, GetTransactionSigOpCost(ctx, view, STANDARD_SCRIPT_VERIFY_FLAGS));\n-            result.estimated_vsize = size;\n+            size_t vsize = GetVirtualTransactionSize(ctx, GetTransactionSigOpCost(ctx, view, STANDARD_SCRIPT_VERIFY_FLAGS));\n+            result.estimated_vsize = vsize;\n+            size_t weight = GetTransactionWeight(ctx);\n+            result.estimated_weight = weight;\n             // Estimate fee rate\n             CFeeRate feerate(fee, size);\n             result.estimated_feerate = feerate;"
      },
      {
        "sha": "4a3429afc474ca517df426abe45639d5060b0753",
        "filename": "src/node/psbt.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/708b2e3ed9746a9588b61d81c988138c763ec74a/src/node/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/708b2e3ed9746a9588b61d81c988138c763ec74a/src/node/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.h?ref=708b2e3ed9746a9588b61d81c988138c763ec74a",
        "patch": "@@ -25,8 +25,9 @@ struct PSBTInputAnalysis {\n  * Holds the results of AnalyzePSBT (miscellaneous information about a PSBT)\n  */\n struct PSBTAnalysis {\n-    Optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n-    Optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n+    Optional<size_t> estimated_vsize;      //!< Estimated size in virtual bytes of the transaction\n+    Optional<size_t> estimated_weight;      //!< Estimated size in weight units of the transaction\n+    Optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / virtual kbyte) of the transaction\n     Optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n     std::vector<PSBTInputAnalysis> inputs; //!< More information about the individual inputs of the transaction\n     PSBTRole next;                         //!< Which of the BIP 174 roles needs to handle the transaction next"
      },
      {
        "sha": "20d3e5ef0f68400756b55f625d8738325b9c5878",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/708b2e3ed9746a9588b61d81c988138c763ec74a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/708b2e3ed9746a9588b61d81c988138c763ec74a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=708b2e3ed9746a9588b61d81c988138c763ec74a",
        "patch": "@@ -1673,7 +1673,8 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n                 \"    }\\n\"\n                 \"    ,...\\n\"\n                 \"  ]\\n\"\n-                \"  \\\"estimated_vsize\\\" : vsize       (numeric, optional) Estimated vsize of the final signed transaction\\n\"\n+                \"  \\\"estimated_vsize\\\" : vsize       (numeric, optional) Estimated size in virtual bytes of the final signed transaction\\n\"\n+                \"  \\\"estimated_weight\\\" : weight       (numeric, optional) Estimated size in weight units of the final signed transaction\\n\"\n                 \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction in \" + CURRENCY_UNIT + \"/kB. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n                 \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n                 \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n@@ -1735,6 +1736,9 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n     if (psbta.estimated_vsize != nullopt) {\n         result.pushKV(\"estimated_vsize\", (int)*psbta.estimated_vsize);\n     }\n+    if (psbta.estimated_weight != nullopt) {\n+        result.pushKV(\"estimated_weight\", (int)*psbta.estimated_weight);\n+    }\n     if (psbta.estimated_feerate != nullopt) {\n         result.pushKV(\"estimated_feerate\", ValueFromAmount(psbta.estimated_feerate->GetFeePerK()));\n     }"
      },
      {
        "sha": "1898af3d656bfed82671779471fa891b924f322c",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/708b2e3ed9746a9588b61d81c988138c763ec74a/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/708b2e3ed9746a9588b61d81c988138c763ec74a/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=708b2e3ed9746a9588b61d81c988138c763ec74a",
        "patch": "@@ -411,6 +411,8 @@ def test_psbt_input_keys(psbt_input, keys):\n \n         # Check fee and size things\n         assert analyzed['fee'] == Decimal('0.001') and analyzed['estimated_vsize'] == 134 and analyzed['estimated_feerate'] == Decimal('0.00746268')\n+        # vsize = (weight + 3) // 4\n+        assert analyzed['estimated_weight'] == 533\n \n         # After signing and finalizing, needs extracting\n         signed = self.nodes[1].walletprocesspsbt(updated)['psbt']"
      }
    ]
  },
  {
    "sha": "8289007b0ba53bb24483b2f0326fbdf4a973ed25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Mjg5MDA3YjBiYTUzYmIyNDQ4M2IyZjAzMjZmYmRmNGE5NzNlZDI1",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-09T18:04:20Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:47Z"
      },
      "message": "rpc/rawtransaction: add a \"feerate in weight\" parameter to 'analyzepsbt'\n\nThis makes the feerate calculation in weight in node/psbt, then allows\nto deactivate the virtual bytes transformation when using the \"analyzepsbt\"\nRPC call.",
      "tree": {
        "sha": "c45cfc286b9359184ff552a222f4c54df5699abc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c45cfc286b9359184ff552a222f4c54df5699abc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8289007b0ba53bb24483b2f0326fbdf4a973ed25",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4L8ACgkQ4T/BRc0/\nQwRwwgv+Nsyr0VDCOKNKObxOd38ap0jS7GZdY1X999GKfG0hE5JrqNx+CQOeD/Ez\nwdlfze0IKFf8fmp6hp/kTGjFvGdELyb87HJIPr9jjT2OJ61I5BcdxVlF8JcZaPMt\nO41/qE7LKVaerGrIA6U76bHEgF3oKx/sqjIlwkvgi5Qhc133uc12Oc4o603W43hs\nZ3nZ3i/F+ixbk7tG5OS7EIiB3muvAO3yqLY2JVlfE7cxmWlfVUh7yTIs6x2Ye+Vf\nlIeAZfHMe81gRVBn6MwDFU9kd5qr198rW8LOQs8kLuc8CWHJj3qz2wBgsCEJsGUx\nKaL838bzgOQVihGX436EvpqLC91SgGNr2vTThTZ85a/t55VO0GMpaUUeR8RZp4EH\nlapW2TC3iY9ZxqT0+FKXRxiH/yxt+CEohr+Obcf6F7xw56/HoYUqZYpJIjtNEV/m\noytTmZyYNpbwWcDnVqU47FmRLn+fWqQsSmnU4BI99Fb5VJGhDA4MsSnIqhnhqc3c\nwv/S9yq+\n=/mph\n-----END PGP SIGNATURE-----",
        "payload": "tree c45cfc286b9359184ff552a222f4c54df5699abc\nparent 708b2e3ed9746a9588b61d81c988138c763ec74a\nauthor darosior <darosior@protonmail.com> 1573322660 +0100\ncommitter darosior <darosior@protonmail.com> 1579278527 +0100\n\nrpc/rawtransaction: add a \"feerate in weight\" parameter to 'analyzepsbt'\n\nThis makes the feerate calculation in weight in node/psbt, then allows\nto deactivate the virtual bytes transformation when using the \"analyzepsbt\"\nRPC call.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8289007b0ba53bb24483b2f0326fbdf4a973ed25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8289007b0ba53bb24483b2f0326fbdf4a973ed25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8289007b0ba53bb24483b2f0326fbdf4a973ed25/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "708b2e3ed9746a9588b61d81c988138c763ec74a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/708b2e3ed9746a9588b61d81c988138c763ec74a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/708b2e3ed9746a9588b61d81c988138c763ec74a"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 20,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b91ec48c0c34e8fdc1d03da40e0682dc2016d2de",
        "filename": "src/node/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8289007b0ba53bb24483b2f0326fbdf4a973ed25/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8289007b0ba53bb24483b2f0326fbdf4a973ed25/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=8289007b0ba53bb24483b2f0326fbdf4a973ed25",
        "patch": "@@ -122,7 +122,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n             size_t weight = GetTransactionWeight(ctx);\n             result.estimated_weight = weight;\n             // Estimate fee rate\n-            CFeeRate feerate(fee, size);\n+            CFeeRate feerate(fee, weight);\n             result.estimated_feerate = feerate;\n         }\n "
      },
      {
        "sha": "872e3605e3eb3a3777bd97f8d00de8b9de96671a",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8289007b0ba53bb24483b2f0326fbdf4a973ed25/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8289007b0ba53bb24483b2f0326fbdf4a973ed25/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8289007b0ba53bb24483b2f0326fbdf4a973ed25",
        "patch": "@@ -121,6 +121,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"finalizepsbt\", 1, \"extract\"},\n     { \"converttopsbt\", 1, \"permitsigdata\"},\n     { \"converttopsbt\", 2, \"iswitness\"},\n+    { \"analyzepsbt\", 1, \"feerate_kwu\" },\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },"
      },
      {
        "sha": "06599ea5354e2849a9e2d0be58fff4f65ca488e5",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8289007b0ba53bb24483b2f0326fbdf4a973ed25/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8289007b0ba53bb24483b2f0326fbdf4a973ed25/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8289007b0ba53bb24483b2f0326fbdf4a973ed25",
        "patch": "@@ -14,6 +14,7 @@\n #include <node/context.h>\n #include <node/psbt.h>\n #include <node/transaction.h>\n+#include <policy/feerate.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n@@ -1651,7 +1652,8 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n             RPCHelpMan{\"analyzepsbt\",\n             \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n             {\n-                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"},\n+                {\"feerate_kwu\", RPCArg::Type::BOOL, \"false\", \"Show feerate in \" + CURRENCY_UNIT + \"/kWU (kilo Weight Unit).\"}\n             },\n             RPCResult {\n                 \"{\\n\"\n@@ -1693,6 +1695,10 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n     if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n+    bool feerate_kwu = false;\n+    if (!request.params[1].isNull()) {\n+        feerate_kwu = request.params[1].get_bool();\n+    }\n \n     PSBTAnalysis psbta = AnalyzePSBT(psbtx);\n \n@@ -1740,7 +1746,9 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n         result.pushKV(\"estimated_weight\", (int)*psbta.estimated_weight);\n     }\n     if (psbta.estimated_feerate != nullopt) {\n-        result.pushKV(\"estimated_feerate\", ValueFromAmount(psbta.estimated_feerate->GetFeePerK()));\n+        CAmount fees = psbta.estimated_feerate->GetFeePerK();\n+        if (!feerate_kwu) fees = CFeeRate(*psbta.fee, *psbta.estimated_vsize).GetFeePerK();\n+        result.pushKV(\"estimated_feerate\", ValueFromAmount(fees));\n     }\n     if (psbta.fee != nullopt) {\n         result.pushKV(\"fee\", ValueFromAmount(*psbta.fee));\n@@ -1772,7 +1780,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n     { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\", \"descriptors\"} },\n     { \"rawtransactions\",    \"joinpsbts\",                    &joinpsbts,                 {\"txs\"} },\n-    { \"rawtransactions\",    \"analyzepsbt\",                  &analyzepsbt,               {\"psbt\"} },\n+    { \"rawtransactions\",    \"analyzepsbt\",                  &analyzepsbt,               {\"psbt\", \"feerate_kwu\"} },\n \n     { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },"
      },
      {
        "sha": "1b9eada3e013cb690b27dcc76ca4d3a9c84df1ce",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8289007b0ba53bb24483b2f0326fbdf4a973ed25/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8289007b0ba53bb24483b2f0326fbdf4a973ed25/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=8289007b0ba53bb24483b2f0326fbdf4a973ed25",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the Partially Signed Transaction RPCs.\n \"\"\"\n \n-from decimal import Decimal\n+from decimal import Decimal, getcontext\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -77,6 +77,7 @@ def test_utxo_conversion(self):\n         connect_nodes(self.nodes[0], 2)\n \n     def run_test(self):\n+        getcontext().prec = 6\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']\n \n@@ -413,6 +414,11 @@ def test_psbt_input_keys(psbt_input, keys):\n         assert analyzed['fee'] == Decimal('0.001') and analyzed['estimated_vsize'] == 134 and analyzed['estimated_feerate'] == Decimal('0.00746268')\n         # vsize = (weight + 3) // 4\n         assert analyzed['estimated_weight'] == 533\n+        analyzed_kwu = self.nodes[0].analyzepsbt(psbt=updated,\n+                                                 feerate_kwu=True)\n+        feerate = Decimal(analyzed_kwu['fee'] * 1000 /\n+                          analyzed_kwu['estimated_weight'])\n+        assert_equal(feerate, Decimal(analyzed_kwu['estimated_feerate']))\n \n         # After signing and finalizing, needs extracting\n         signed = self.nodes[1].walletprocesspsbt(updated)['psbt']"
      }
    ]
  },
  {
    "sha": "51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWFkNzhiNTBiZDBjM2I0NzI1NmJkNmM3NTRkMGFhNTFkY2Y3MmU0",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-15T14:38:29Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:48Z"
      },
      "message": "rpc/blockchain: convert feerate outputs to vbytes, expose transaction weight\n\nThis adds new fields to calls response returning transaction size and\nconvert already present feerate fields back to vbyte.",
      "tree": {
        "sha": "425b4bb8c7b3b68a2da6873ae6dde6632803cd64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/425b4bb8c7b3b68a2da6873ae6dde6632803cd64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4MAACgkQ4T/BRc0/\nQwSbfAwAm3dRLGMFzr89rDcDjkGad1/f9iCi3RFeG3lwfbluz6zqrlmsFppmLQBM\nutn8TmEGXiS9ps0jMZnGDMriuy0pJ4cmRkc7TofkeEDS62sD3MpLaW0yYk6ApGsz\n0IA0Tk0ORZ0qF2dIMVp9xyWgKQsGtqbeG30oLIgJXPM0fg11XnEZ4CNxSFrNHR+J\nszViTQvTsjDxSzhLeAr6x8KqPZOY1RPonIazldgMTqJV0Xr/LuRMXG+p74oDgvVX\nocl77zraxZFR4e207iR3JyU0NhHhspVO1lPdTszB4iIOhJuehvN9U/eoQb9C1Blz\n34D2IU7/4Mi+rtA4oLc7k/QZEK7EQ53+aPWmgdpvgvALITs33sxtPyBdbozI63Ea\nlXcNbNP4KdwKbbCIM+HGmh1TfA3gLePDKB42HOppMr8UCHGsLczFuL/NQeO78c3y\nGMwYPJvM8iqmT6Oz2cXle0gpVIRE0ehX48iIXvjNFUqNMlVqHbPGgq4GdTeEZ2YB\nkCxA5cb/\n=OqLa\n-----END PGP SIGNATURE-----",
        "payload": "tree 425b4bb8c7b3b68a2da6873ae6dde6632803cd64\nparent 8289007b0ba53bb24483b2f0326fbdf4a973ed25\nauthor darosior <darosior@protonmail.com> 1573828709 +0100\ncommitter darosior <darosior@protonmail.com> 1579278528 +0100\n\nrpc/blockchain: convert feerate outputs to vbytes, expose transaction weight\n\nThis adds new fields to calls response returning transaction size and\nconvert already present feerate fields back to vbyte.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8289007b0ba53bb24483b2f0326fbdf4a973ed25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8289007b0ba53bb24483b2f0326fbdf4a973ed25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8289007b0ba53bb24483b2f0326fbdf4a973ed25"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c22915500a7ecfed97ef93730d237a27e44ce3f9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4",
        "patch": "@@ -389,9 +389,11 @@ static std::string EntryDescriptionString()\n            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n            \"    \\\"descendantcount\\\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\\n\"\n            \"    \\\"descendantsize\\\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\\n\"\n+           \"    \\\"descendantweight\\\" : n,   (numeric) transaction weight of in-mempool descendants (including this one)\\n\"\n            \"    \\\"descendantfees\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\\n\"\n            \"    \\\"ancestorcount\\\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)\\n\"\n            \"    \\\"ancestorsize\\\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)\\n\"\n+           \"    \\\"ancestorweight\\\" : n,     (numeric) transaction weight of in-mempool ancestors (including this one)\\n\"\n            \"    \\\"ancestorfees\\\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\\n\"\n            \"    \\\"wtxid\\\" : hash,         (string) hash of serialized transaction, including witness data\\n\"\n            \"    \\\"fees\\\" : {\\n\"\n@@ -429,9 +431,11 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n     info.pushKV(\"height\", (int)e.GetHeight());\n     info.pushKV(\"descendantcount\", e.GetCountWithDescendants());\n     info.pushKV(\"descendantsize\", e.GetSizeWithDescendants());\n+    info.pushKV(\"descendantweight\", e.GetWeightWithDescendants());\n     info.pushKV(\"descendantfees\", e.GetModFeesWithDescendants());\n     info.pushKV(\"ancestorcount\", e.GetCountWithAncestors());\n     info.pushKV(\"ancestorsize\", e.GetSizeWithAncestors());\n+    info.pushKV(\"ancestorweight\", e.GetWeightWithAncestors());\n     info.pushKV(\"ancestorfees\", e.GetModFeesWithAncestors());\n     info.pushKV(\"wtxid\", pool.vTxHashes[e.vTxHashesIdx].first.ToString());\n     const CTransaction& tx = e.GetTx();\n@@ -1421,11 +1425,12 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"loaded\", pool.IsLoaded());\n     ret.pushKV(\"size\", (int64_t)pool.size());\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n+    ret.pushKV(\"weight\", (int64_t)pool.GetTotalTxWeight());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n-    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n-    ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n+    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK() * WITNESS_SCALE_FACTOR));\n+    ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK() * WITNESS_SCALE_FACTOR));\n \n     return ret;\n }\n@@ -1440,6 +1445,7 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n             \"  \\\"loaded\\\": true|false         (boolean) True if the mempool is fully loaded\\n\"\n             \"  \\\"size\\\": xxxxx,               (numeric) Current tx count\\n\"\n             \"  \\\"bytes\\\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n+            \"  \\\"weight\\\": xxxxx,              (numeric) Sum of all transactions weight.\\n\"\n             \"  \\\"usage\\\": xxxxx,              (numeric) Total memory usage for the mempool\\n\"\n             \"  \\\"maxmempool\\\": xxxxx,         (numeric) Maximum memory usage for the mempool\\n\"\n             \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\\n\""
      },
      {
        "sha": "67e16586143f921479a096c4f1ca5e3cf439ee0d",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4",
        "patch": "@@ -69,8 +69,10 @@ def run_test(self):\n         descendant_count = 1\n         descendant_fees = 0\n         descendant_vsize = 0\n+        descendant_weight = 0\n \n         ancestor_vsize = sum([mempool[tx]['vsize'] for tx in mempool])\n+        ancestor_weight = sum([mempool[tx]['weight'] for tx in mempool])\n         ancestor_count = MAX_ANCESTORS\n         ancestor_fees = sum([mempool[tx]['fee'] for tx in mempool])\n \n@@ -90,14 +92,18 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN)\n             assert_equal(mempool[x]['fees']['descendant'], descendant_fees)\n             descendant_vsize += mempool[x]['vsize']\n+            descendant_weight += mempool[x]['weight']\n             assert_equal(mempool[x]['descendantsize'], descendant_vsize)\n+            assert_equal(mempool[x]['descendantweight'], descendant_weight)\n             descendant_count += 1\n \n             # Check that ancestor calculations are correct\n             assert_equal(mempool[x]['ancestorcount'], ancestor_count)\n             assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN)\n             assert_equal(mempool[x]['ancestorsize'], ancestor_vsize)\n+            assert_equal(mempool[x]['ancestorweight'], ancestor_weight)\n             ancestor_vsize -= mempool[x]['vsize']\n+            ancestor_weight -= mempool[x]['weight']\n             ancestor_fees -= mempool[x]['fee']\n             ancestor_count -= 1\n "
      }
    ]
  },
  {
    "sha": "b165fd71b50add28b0143357c247db6240808d0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTY1ZmQ3MWI1MGFkZDI4YjAxNDMzNTdjMjQ3ZGI2MjQwODA4ZDBk",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-09T19:20:11Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:48Z"
      },
      "message": "rpc/blockchain: allow 'getblockstats' to return feerate in weight units",
      "tree": {
        "sha": "916b1a9aa4d67cd4caf3e86eff27d0849094ba63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/916b1a9aa4d67cd4caf3e86eff27d0849094ba63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b165fd71b50add28b0143357c247db6240808d0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4MAACgkQ4T/BRc0/\nQwT16wwAhareDV+g0iJksuJJbDTIG8SVx35rnN1oj5PDUiDUB+0Em9iKTvz2MRKW\ny+dncD1FBKx/zLTunqvW/mbOt5QR1QsvscMB3G97Iyg/xLHi4ROF3LQS8ahOlsXE\noqB1TEXX/X/LMeEGC8SIUCtAj1MYuQEwrDkpGpOVOEEAu8xpKXMCOW9+IgsrtTNq\nSP90NIDgiDlzLLKYeVZ73s+Xlq2FKgtQDgGdkxNIsVVoQe+4B/73zV/ZA5kWTGoI\nO5RU3P0UeMtCwrlM4NJbrok47ILOTzEnZVao8kHe/ayqIF01nEzog3YIJpOHZ/Vv\n38PLknbWBt1ftZdp/hi0yqYnftEMw8qwj3T6Fccwx5MGskCEnfli/9LDi0rZjOL4\nOGE6L92W0U/tqL91oGtdOIDr+veaat74vmb5BNtTiXEjUEAqrppKgqL5FB+STqdw\n5qBv9x8dVV2kn8j7GQUlb2f0yKKZx5BCvjF4wBybQwZxy5NodqAivu3ZSMYXLfmy\nnHgTSQOF\n=PDg0\n-----END PGP SIGNATURE-----",
        "payload": "tree 916b1a9aa4d67cd4caf3e86eff27d0849094ba63\nparent 51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4\nauthor darosior <darosior@protonmail.com> 1573327211 +0100\ncommitter darosior <darosior@protonmail.com> 1579278528 +0100\n\nrpc/blockchain: allow 'getblockstats' to return feerate in weight units\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b165fd71b50add28b0143357c247db6240808d0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b165fd71b50add28b0143357c247db6240808d0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b165fd71b50add28b0143357c247db6240808d0d/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51ad78b50bd0c3b47256bd6c754d0aa51dcf72e4"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 35,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c30bdbdd87b343fe973baeec66d51f16eb68fe6b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fd71b50add28b0143357c247db6240808d0d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fd71b50add28b0143357c247db6240808d0d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b165fd71b50add28b0143357c247db6240808d0d",
        "patch": "@@ -1719,6 +1719,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                             {\"time\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Selected statistic\"},\n                         },\n                         \"stats\"},\n+                    {\"feerate_kwu\", RPCArg::Type::BOOL, \"false\", \"Show feerate values in satoshis per weight unit instead of satoshis per virtual byte.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -1801,6 +1802,8 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n         }\n     }\n \n+    bool feerate_in_wu = !request.params[2].isNull() && request.params[2].get_bool();\n+\n     const CBlock block = GetBlockChecked(pindex);\n     const CBlockUndo blockUndo = GetUndoChecked(pindex);\n \n@@ -1898,8 +1901,13 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n             minfee = std::min(minfee, txfee);\n             totalfee += txfee;\n \n-            // New feerate uses satoshis per virtual byte instead of per serialized byte\n-            CAmount feerate = weight ? (txfee * WITNESS_SCALE_FACTOR) / weight : 0;\n+            // New feerate uses satoshis per weight instead of per serialized byte\n+            CAmount feerate;\n+            if (feerate_in_wu) {\n+                feerate = weight ? txfee / weight : 0;\n+            } else {\n+                feerate = weight ? (txfee * WITNESS_SCALE_FACTOR) / weight : 0;\n+            }\n             if (do_feerate_percentiles) {\n                 feerate_array.emplace_back(std::make_pair(feerate, weight));\n             }\n@@ -1918,7 +1926,11 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n \n     UniValue ret_all(UniValue::VOBJ);\n     ret_all.pushKV(\"avgfee\", (block.vtx.size() > 1) ? totalfee / (block.vtx.size() - 1) : 0);\n-    ret_all.pushKV(\"avgfeerate\", total_weight ? (totalfee * WITNESS_SCALE_FACTOR) / total_weight : 0); // Unit: sat/vbyte\n+    if (feerate_in_wu) {\n+        ret_all.pushKV(\"avgfeerate\", total_weight ? totalfee / total_weight : 0); // Unit: sat/weight unit\n+    } else {\n+        ret_all.pushKV(\"avgfeerate\", total_weight ? (totalfee * WITNESS_SCALE_FACTOR) / total_weight : 0); // Unit: sat/vbyte\n+    }\n     ret_all.pushKV(\"avgtxsize\", (block.vtx.size() > 1) ? total_size / (block.vtx.size() - 1) : 0);\n     ret_all.pushKV(\"blockhash\", pindex->GetBlockHash().GetHex());\n     ret_all.pushKV(\"feerate_percentiles\", feerates_res);\n@@ -2383,7 +2395,7 @@ static const CRPCCommand commands[] =\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      {} },\n     { \"blockchain\",         \"getchaintxstats\",        &getchaintxstats,        {\"nblocks\", \"blockhash\"} },\n-    { \"blockchain\",         \"getblockstats\",          &getblockstats,          {\"hash_or_height\", \"stats\"} },\n+    { \"blockchain\",         \"getblockstats\",          &getblockstats,          {\"hash_or_height\", \"stats\", \"feerate_kwu\"} },\n     { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       {} },\n     { \"blockchain\",         \"getblockcount\",          &getblockcount,          {} },\n     { \"blockchain\",         \"getblock\",               &getblock,               {\"blockhash\",\"verbosity|verbose\"} },"
      },
      {
        "sha": "f6fda68a653127ada3ead52231b8caa3caf1c330",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fd71b50add28b0143357c247db6240808d0d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fd71b50add28b0143357c247db6240808d0d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=b165fd71b50add28b0143357c247db6240808d0d",
        "patch": "@@ -137,6 +137,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"verifychain\", 1, \"nblocks\" },\n     { \"getblockstats\", 0, \"hash_or_height\" },\n     { \"getblockstats\", 1, \"stats\" },\n+    { \"getblockstats\", 2, \"feerate_kwu\" },\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },"
      },
      {
        "sha": "2a7df5a36f9431404514c48a7d6b9136aa61057c",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b165fd71b50add28b0143357c247db6240808d0d/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b165fd71b50add28b0143357c247db6240808d0d/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=b165fd71b50add28b0143357c247db6240808d0d",
        "patch": "@@ -130,6 +130,20 @@ def run_test(self):\n         stats = self.nodes[0].getblockstats(hash_or_height=1, stats=list(some_stats))\n         assert_equal(set(stats.keys()), some_stats)\n \n+        # Sanity check for the 'feerate_kwu' parameter\n+        feerate_vbyte = self.nodes[0].getblockstats(hash_or_height=103,\n+                                                    stats=[\"minfeerate\",\n+                                                           \"avgfeerate\"])\n+        feerate_weight = self.nodes[0].getblockstats(hash_or_height=103,\n+                                                     stats=[\"minfeerate\",\n+                                                            \"avgfeerate\"],\n+                                                     feerate_kwu=True)\n+        # For getblockstats, we don't round up for vbyte computation !\n+        assert_equal(feerate_weight[\"avgfeerate\"],\n+                     feerate_vbyte[\"avgfeerate\"] // 4)\n+        assert_equal(feerate_weight[\"minfeerate\"],\n+                     feerate_vbyte[\"minfeerate\"] // 4)\n+\n         # Test invalid parameters raise the proper json exceptions\n         tip = self.start_height + self.max_stat_pos\n         assert_raises_rpc_error(-8, 'Target block height %d after current tip %d' % (tip+1, tip),\n@@ -157,8 +171,10 @@ def run_test(self):\n                                 hash_or_height='000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f')\n \n         # Invalid number of args\n-        assert_raises_rpc_error(-1, 'getblockstats hash_or_height ( stats )', self.nodes[0].getblockstats, '00', 1, 2)\n-        assert_raises_rpc_error(-1, 'getblockstats hash_or_height ( stats )', self.nodes[0].getblockstats)\n+        assert_raises_rpc_error(-1, 'getblockstats hash_or_height ( stats feerate_kwu )',\n+                                self.nodes[0].getblockstats, '00', 1, True, 2)\n+        assert_raises_rpc_error(-1, 'getblockstats hash_or_height ( stats feerate_kwu )',\n+                                self.nodes[0].getblockstats)\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "3dc4f5d078daf5a020a80657fba143ff1805c0f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGM0ZjVkMDc4ZGFmNWEwMjBhODA2NTdmYmExNDNmZjE4MDVjMGYw",
    "commit": {
      "author": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2019-11-19T13:48:39Z"
      },
      "committer": {
        "name": "darosior",
        "email": "darosior@protonmail.com",
        "date": "2020-01-17T16:28:48Z"
      },
      "message": "test/functional: Add a test to check minimum relay feerate in weight",
      "tree": {
        "sha": "95686366732d8f63dd02a1aee6c4cc9e7d252db5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95686366732d8f63dd02a1aee6c4cc9e7d252db5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dc4f5d078daf5a020a80657fba143ff1805c0f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAl4h4MAACgkQ4T/BRc0/\nQwR1gwwAmEMo4EEJNqeVIgua4ceL40Drb2lLgf0w+PDOU8/ogRjgzxq4dbGEPYA/\nzfTA9n+IHPg+t5HYzG1XiPGMU43JhLRBHhChADArUfYqRKk6R606wL1bZ7A18cSJ\nK/VkIAhCCmBzh7w/lYf9Kim95e14txF29cddCZN7fsspHWojYw45Ukf4hpuHg6Tm\nH6flklWKV8MbGxn+jHnKwmtX9MBhFdY77x2Qb4P9dI7HmVbE8XNapwiwZv+Dj0NL\nhucmtuIQXReeD3PraGIMwVG0sw4wY6lVdu3GqB53/ntdL1+NeHyYRwgN8uMW2kR7\nqvcw5S4DBVibA6lLI5RAoi9Hvgbt1ewnh6EuAJF0yROD3voA8yzwjJkvbFu1ynaS\nBZ8NP+nIMnjY7MZwszc5yIbW6zvxtWLuECewpWJlE5iHqfgO4PKcHB3p0VB8BlGa\noFLJQsOP5qxMllJ/5Xi+gFlOMDwag5vvaTVDp9lh28uN7I46Y7C9oaHGb/9FOduQ\n2HiWymcu\n=O2zm\n-----END PGP SIGNATURE-----",
        "payload": "tree 95686366732d8f63dd02a1aee6c4cc9e7d252db5\nparent b165fd71b50add28b0143357c247db6240808d0d\nauthor darosior <darosior@protonmail.com> 1574171319 +0100\ncommitter darosior <darosior@protonmail.com> 1579278528 +0100\n\ntest/functional: Add a test to check minimum relay feerate in weight\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dc4f5d078daf5a020a80657fba143ff1805c0f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dc4f5d078daf5a020a80657fba143ff1805c0f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dc4f5d078daf5a020a80657fba143ff1805c0f0/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b165fd71b50add28b0143357c247db6240808d0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b165fd71b50add28b0143357c247db6240808d0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b165fd71b50add28b0143357c247db6240808d0d"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 101,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9397a5a2bf4473c2d59cbd51cdc4d54601e566e1",
        "filename": "test/functional/mempool_feerate.py",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dc4f5d078daf5a020a80657fba143ff1805c0f0/test/functional/mempool_feerate.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dc4f5d078daf5a020a80657fba143ff1805c0f0/test/functional/mempool_feerate.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_feerate.py?ref=3dc4f5d078daf5a020a80657fba143ff1805c0f0",
        "patch": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+    create_confirmed_utxos\n+)\n+\n+\n+def get_signed_tx(node, inputs, feerate, value_out, type):\n+    \"\"\"\n+    Generates a transaction to a {node}'s address, using speicified\n+    {inputs}, {feerate}, {value_out} and {type} of address.\n+    Returns the signed raw transaction.\n+    \"\"\"\n+    address = node.getnewaddress(address_type=type)\n+    output = {address: Decimal(value_out)}\n+    tx = node.createrawtransaction(inputs, output)\n+    tx = node.signrawtransactionwithwallet(tx)\n+    tx_size = node.decoderawtransaction(tx[\"hex\"])[\"weight\"]\n+    output[address] -= Decimal(tx_size) * feerate / Decimal(1000)\n+    tx = node.createrawtransaction(inputs, output)\n+    return node.signrawtransactionwithwallet(tx)[\"hex\"]\n+\n+\n+class FeerateTest(BitcoinTestFramework):\n+    \"\"\"\n+    Sanity checks for the minimum relay feerate in weight units.\n+    \"\"\"\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        getcontext().prec = 10\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+\n+        self.log.info(\"Generate some fresh utxos..\")\n+        min_feerate = Decimal(250) * Decimal(10**-8)\n+        utxos = create_confirmed_utxos(min_feerate,\n+                                       self.nodes[0], 4)\n+\n+        self.log.info(\"A transaction which pays exactly {} btc/kWU\"\n+                      \" should propagate\".format(min_feerate))\n+        utxo = utxos.pop()\n+        inputs = [{\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]}]\n+        amount = utxo[\"amount\"]\n+        # Test all address types. `bech32` would be relayed on old versions,\n+        # but not `legacy` nor `p2sh-segwit`.\n+        for addr_type in [\"legacy\", \"p2sh-segwit\", \"bech32\"]:\n+            tx = get_signed_tx(self.nodes[0], inputs, min_feerate,\n+                               amount, addr_type)\n+            txid = self.nodes[0].sendrawtransaction(tx)\n+            dec = self.nodes[0].decoderawtransaction(tx)\n+            self.sync_mempools(wait=.2)\n+            assert txid in self.nodes[1].getrawmempool()\n+            inputs[0] = {\"txid\": txid, \"vout\": 0}\n+            amount -= dec[\"weight\"] * min_feerate / Decimal(1000)\n+\n+        self.log.info(\"A transaction below {} btc/kWU should not\"\n+                      \" propagate\".format(min_feerate))\n+        for addr_type in [\"legacy\", \"p2sh-segwit\", \"bech32\"]:\n+            utxo = utxos.pop()\n+            inputs = [{\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]}]\n+            tx = get_signed_tx(self.nodes[0], inputs,\n+                               min_feerate - Decimal(2 * 10**-8),\n+                               utxo[\"amount\"], addr_type)\n+            # We should not be able to even send the transaction..\n+            assert_raises_rpc_error(-26, \"min relay fee not met\",\n+                                    self.nodes[0].sendrawtransaction, tx)\n+            # .. But if we try anyway ..\n+            self.stop_node(0)\n+            self.start_node(0, [\"-minrelaytxfee=0.00000001\"])\n+            txid = self.nodes[0].sendrawtransaction(tx)\n+            dec = self.nodes[0].decoderawtransaction(tx)\n+            # .. Our peer should not accept it.\n+            try:\n+                self.sync_mempools(wait=.2, timeout=2)\n+            except AssertionError:\n+                # The node #1 did not accept it (as expected)\n+                pass\n+            else:\n+                raise AssertionError(\"Transaction below minimum relay fee \"\n+                                     \"accepted by remote peer.\")\n+            assert txid not in self.nodes[1].getrawmempool()\n+            self.stop_node(0)\n+            self.start_node(0)\n+\n+\n+if __name__ == '__main__':\n+    FeerateTest().main()"
      },
      {
        "sha": "9f9d477cbefbf6d399ff5da2cd1742185e1bdafe",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dc4f5d078daf5a020a80657fba143ff1805c0f0/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dc4f5d078daf5a020a80657fba143ff1805c0f0/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=3dc4f5d078daf5a020a80657fba143ff1805c0f0",
        "patch": "@@ -125,6 +125,7 @@\n     'wallet_avoidreuse.py',\n     'mempool_reorg.py',\n     'mempool_persist.py',\n+    'mempool_feerate.py',\n     'wallet_multiwallet.py',\n     'wallet_multiwallet.py --usecli',\n     'wallet_createwallet.py',"
      }
    ]
  }
]