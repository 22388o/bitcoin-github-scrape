[
  {
    "sha": "66fe7b1a98c03f690dcf60d359baac124658aeae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmZlN2IxYTk4YzAzZjY5MGRjZjYwZDM1OWJhYWMxMjQ2NThhZWFl",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-04-29T14:11:49Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-04-29T14:11:49Z"
      },
      "message": "test: added test for upgradewallet RPC",
      "tree": {
        "sha": "8e9e7df9cdcc7a2abe64f728e1f372cd4ba43f89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e9e7df9cdcc7a2abe64f728e1f372cd4ba43f89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66fe7b1a98c03f690dcf60d359baac124658aeae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl6piyUACgkQJiaFvHjt\nEft34wf9GM9nPQkUXfCDL25VTNqAYflDc/ovleFMOm6KY2IO0/wIEpfZAuHlTFCu\novUbBgsK81yZ6KmVssZ7vtGZc2m91A4hKb5JEUHqDPAp++666y+L1XH5mzr9QRui\n1pRO7lh2FjnS1EZZ7qCqicDgX7Pna8ytEDlivYJUTTOhopxbtpmR0jCYjvCYk1O3\naT7uv/Tcg0pUNJnakOpPH/FoABQzlXgZ2dZrEzZ8nt8e0UXjxnBhQTheM4dUIgo1\nUDX730id1z3jkSIBSrW9IVWYxqmcf7KpA0g4mzpsGH9EOVmdVvpmH8CCW0nP4gEh\n7HFLHSOoDfmYwajwXvKoo3WNkOc0Vg==\n=dD3C\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e9e7df9cdcc7a2abe64f728e1f372cd4ba43f89\nparent eef90c14ed0f559e3f6e187341009270b84f45cb\nauthor Harris <brakmic@gmail.com> 1588169509 +0200\ncommitter Harris <brakmic@gmail.com> 1588169509 +0200\n\ntest: added test for upgradewallet RPC\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66fe7b1a98c03f690dcf60d359baac124658aeae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66fe7b1a98c03f690dcf60d359baac124658aeae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66fe7b1a98c03f690dcf60d359baac124658aeae/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eef90c14ed0f559e3f6e187341009270b84f45cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eef90c14ed0f559e3f6e187341009270b84f45cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eef90c14ed0f559e3f6e187341009270b84f45cb"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 165,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ab9d673101a8ec3d5e67c7e0dde51fa6aafb702a",
        "filename": "ci/test/05_before_script.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66fe7b1a98c03f690dcf60d359baac124658aeae/ci/test/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66fe7b1a98c03f690dcf60d359baac124658aeae/ci/test/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/05_before_script.sh?ref=66fe7b1a98c03f690dcf60d359baac124658aeae",
        "patch": "@@ -37,6 +37,6 @@ if [ -z \"$NO_DEPENDS\" ]; then\n fi\n if [ \"$TEST_PREVIOUS_RELEASES\" = \"true\" ]; then\n   BEGIN_FOLD previous-versions\n-  DOCKER_EXEC contrib/devtools/previous_release.sh -b -t \"$PREVIOUS_RELEASES_DIR\" v0.17.1 v0.18.1 v0.19.0.1\n+  DOCKER_EXEC contrib/devtools/previous_release.sh -b -t \"$PREVIOUS_RELEASES_DIR\" v0.15.2 v0.16.3 v0.17.1 v0.18.1 v0.19.0.1\n   END_FOLD\n fi"
      },
      {
        "sha": "eb9f6528b3b954f1e0f828c170f86abc82274f9e",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66fe7b1a98c03f690dcf60d359baac124658aeae/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66fe7b1a98c03f690dcf60d359baac124658aeae/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=66fe7b1a98c03f690dcf60d359baac124658aeae",
        "patch": "@@ -326,6 +326,13 @@ def initialize_datadir(dirname, n, chain):\n         os.makedirs(os.path.join(datadir, 'stdout'), exist_ok=True)\n     return datadir\n \n+def adjust_bitcoin_conf_for_pre_17(conf_file):\n+    with open(conf_file,'r', encoding='utf8') as conf:\n+        conf_data = conf.read()\n+    with open(conf_file, 'w', encoding='utf8') as conf:\n+        conf_data_changed = conf_data.replace('[regtest]', '')\n+        conf.write(conf_data_changed)\n+\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))\n "
      },
      {
        "sha": "b0fbdbbdb80cfb08791b9515396710036f7a0ace",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66fe7b1a98c03f690dcf60d359baac124658aeae/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66fe7b1a98c03f690dcf60d359baac124658aeae/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=66fe7b1a98c03f690dcf60d359baac124658aeae",
        "patch": "@@ -190,6 +190,7 @@\n     'wallet_import_rescan.py',\n     'wallet_import_with_label.py',\n     'wallet_importdescriptors.py',\n+    'wallet_upgradewallet.py',\n     'rpc_bind.py --ipv4',\n     'rpc_bind.py --ipv6',\n     'rpc_bind.py --nonloopback',"
      },
      {
        "sha": "d04bc4ce44c1223fc573e0d5351c49fec4be321b",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "added",
        "additions": 156,
        "deletions": 0,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66fe7b1a98c03f690dcf60d359baac124658aeae/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66fe7b1a98c03f690dcf60d359baac124658aeae/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=66fe7b1a98c03f690dcf60d359baac124658aeae",
        "patch": "@@ -0,0 +1,156 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"upgradewallet RPC functional test\n+\n+Test upgradewallet RPC. Download v0.15.2 v0.16.3 node binaries:\n+\n+contrib/devtools/previous_release.sh -b v0.15.2 v0.16.3\n+\"\"\"\n+\n+import os\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework, SkipTest\n+from test_framework.util import (\n+    adjust_bitcoin_conf_for_pre_17,\n+    assert_equal,\n+    assert_greater_than,\n+    assert_is_hex_string\n+)\n+\n+class UpgradeWalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [\n+            [\"-addresstype=bech32\"], # current wallet version\n+            [\"-usehd=1\"],            # v0.16.3 wallet\n+            [\"-usehd=0\"]             # v0.15.2 wallet\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    def setup_nodes(self):\n+        if os.getenv(\"TEST_PREVIOUS_RELEASES\") == \"false\":\n+            raise SkipTest(\"upgradewallet RPC tests\")\n+\n+        releases_path = os.getenv(\"PREVIOUS_RELEASES_DIR\") or os.getcwd() + \"/releases\"\n+        if not os.path.isdir(releases_path):\n+            if os.getenv(\"TEST_PREVIOUS_RELEASES\") == \"true\":\n+                raise AssertionError(\"TEST_PREVIOUS_RELEASES=1 but releases missing: \" + releases_path)\n+            raise SkipTest(\"This test requires binaries for previous releases\")\n+\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args, versions=[\n+            None,\n+            160300,\n+            150200\n+        ], binary=[\n+            self.options.bitcoind,\n+            releases_path + \"/v0.16.3/bin/bitcoind\",\n+            releases_path + \"/v0.15.2/bin/bitcoind\",\n+        ], binary_cli=[\n+            self.options.bitcoincli,\n+            releases_path + \"/v0.16.3/bin/bitcoin-cli\",\n+            releases_path + \"/v0.15.2/bin/bitcoin-cli\",\n+        ])\n+        # adapt bitcoin.conf, because older bitcoind's don't recognize config sections\n+        adjust_bitcoin_conf_for_pre_17(self.nodes[1].bitcoinconf)\n+        adjust_bitcoin_conf_for_pre_17(self.nodes[2].bitcoinconf)\n+        self.start_nodes()\n+\n+    def dumb_sync_blocks(self):\n+        \"\"\"\n+        Little helper to sync older wallets.\n+        Notice that v0.15.2's regtest is hardforked, so there is\n+        no sync for it.\n+        v0.15.2 is only being used to test for version upgrade\n+        and master hash key presence.\n+        v0.16.3 is being used to test for version upgrade and balances.\n+        Further info: https://github.com/bitcoin/bitcoin/pull/18774#discussion_r416967844\n+        \"\"\"\n+        node_from = self.nodes[0]\n+        v16_3_node = self.nodes[1]\n+        to_height = node_from.getblockcount()\n+        height = self.nodes[1].getblockcount()\n+        for i in range(height, to_height+1):\n+            b = node_from.getblock(blockhash=node_from.getblockhash(i), verbose=0)\n+            v16_3_node.submitblock(b)\n+        assert_equal(v16_3_node.getblockcount(), to_height)\n+\n+    def run_test(self):\n+        self.nodes[0].generatetoaddress(101, self.nodes[0].getnewaddress())\n+        self.dumb_sync_blocks()\n+        # # Sanity check the test framework:\n+        res = self.nodes[0].getblockchaininfo()\n+        assert_equal(res['blocks'], 101)\n+        node_master = self.nodes[0]\n+        v16_3_node  = self.nodes[1]\n+        v15_2_node  = self.nodes[2]\n+\n+        # Send coins to old wallets for later conversion checks.\n+        v16_3_wallet  = v16_3_node.get_wallet_rpc('wallet.dat')\n+        v16_3_address = v16_3_wallet.getnewaddress()\n+        node_master.generatetoaddress(101, v16_3_address)\n+        self.dumb_sync_blocks()\n+        v16_3_balance = v16_3_wallet.getbalance()\n+\n+        self.log.info(\"Test upgradewallet RPC...\")\n+        # Prepare for copying of the older wallet\n+        node_master_wallet_dir = os.path.join(node_master.datadir, \"regtest/wallets\")\n+        v16_3_wallet       = os.path.join(v16_3_node.datadir, \"regtest/wallets/wallet.dat\")\n+        v15_2_wallet       = os.path.join(v15_2_node.datadir, \"regtest/wallet.dat\")\n+        self.stop_nodes()\n+\n+        # Copy the 0.16.3 wallet to the last Bitcoin Core version and open it:\n+        shutil.rmtree(node_master_wallet_dir)\n+        os.mkdir(node_master_wallet_dir)\n+        shutil.copy(\n+            v16_3_wallet,\n+            node_master_wallet_dir\n+        )\n+        self.restart_node(0, ['-nowallet'])\n+        node_master.loadwallet('')\n+\n+        wallet = node_master.get_wallet_rpc('')\n+        old_version = wallet.getwalletinfo()[\"walletversion\"]\n+\n+        # calling upgradewallet without version arguments\n+        # should return nothing if successful\n+        assert_equal(wallet.upgradewallet(), \"\")\n+        new_version = wallet.getwalletinfo()[\"walletversion\"]\n+        # upgraded wallet version should be greater than older one\n+        assert_greater_than(new_version, old_version)\n+        # wallet should still contain the same balance\n+        assert_equal(wallet.getbalance(), v16_3_balance)\n+\n+        self.stop_node(0)\n+        # Copy the 0.15.2 wallet to the last Bitcoin Core version and open it:\n+        shutil.rmtree(node_master_wallet_dir)\n+        os.mkdir(node_master_wallet_dir)\n+        shutil.copy(\n+            v15_2_wallet,\n+            node_master_wallet_dir\n+        )\n+        self.restart_node(0, ['-nowallet'])\n+        node_master.loadwallet('')\n+\n+        wallet = node_master.get_wallet_rpc('')\n+        # should have no master key hash before conversion\n+        assert_equal('hdseedid' in wallet.getwalletinfo(), False)\n+        # calling upgradewallet with explicit version number\n+        # should return nothing if successful\n+        assert_equal(wallet.upgradewallet(169900), \"\")\n+        new_version = wallet.getwalletinfo()[\"walletversion\"]\n+        # upgraded wallet should have version 169900\n+        assert_equal(new_version, 169900)\n+        # after conversion master key hash should be present\n+        assert_is_hex_string(wallet.getwalletinfo()['hdseedid'])\n+\n+if __name__ == '__main__':\n+    UpgradeWalletTest().main()"
      }
    ]
  }
]