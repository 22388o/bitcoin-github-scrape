MarcoFalke,2020-06-14 12:48:44,"If it is impossible to return a nullptr, then why not return a plain `CBlockTemplate`?\n\n\n\n<!--\n\ndiff --git a/src/miner.cpp b/src/miner.cpp\nindex d9dcbe8a70..9569ab3ffb 100644\n--- a/src/miner.cpp\n+++ b/src/miner.cpp\n@@ -109,6 +109,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     if(!pblocktemplate.get())\n         return nullptr;",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643762257,643762257,
cculianu,2020-06-14 13:05:32,"@MarcoFalke Good question.  I'm not sure what the motivation is behind the `BlockAssembler` class and its design.  Outside of tests, it's only ever used in `getblocktemplate` and `generateBlocks` in `rpc/mining.cpp`.  It is always created as an ephemeral object on the stack and then after it is done creating a `CBlockTemplate`, it is immediately destroyed after the stack frame ends. \n\nWhy it a",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643764116,643764116,
MarcoFalke,2020-06-14 13:25:11,"What I meant is that simply removing nullptr checks is scary and will also fail to compile on some compilers/sanitizers/static analysers with warnings and errors enabled. Also, if the template ever only exists on the stack, then I don't see why it should live in the heap.\n\nI am not sure if there is a way in C++ to ensure an object can be efficiently moved, but a pre-C++11 alternative would be:",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643766357,643766357,
cculianu,2020-06-14 13:37:13,"Yeah that was the pre-C++11 canonical way to do it.  Also just returning the value was pretty much always guaranteed to not produce any copies and be equivalent to the ""pass down a non-const ref"" way..  (RVO/copy elision basically does that for you internally anyway).  \n\nThe example you show is the cheapest way (as is a proper RVO return by value), for sure.  Move semantics are ""almost free"" t",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643767759,643767759,
MarcoFalke,2020-06-14 14:11:20,"> new can never return nullptr\n\nOh, I meant that compilers can't know that `CreateNewBlock` never returns a nullptr.\n\n```cpp\nconst auto b = CreateNewBlock();\nb->Get();  // <-- Warning/Error here\n```\n\n> If you find this PR useless\n\nWe do appreciate refactoring changes that improve the code base. My feedback was about the current version of the pull request, which I believe can",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643771888,643771888,
cculianu,2020-06-14 16:03:36,"No static analyzer or compiler expects you to check every single pointer you get given or receive as a return value.  Having such a strict requirement would mean your code would be riddled with boilerplate checks everywhere.  (instead, at best, some static analyzers sometimes use heuristics to warn you about obviously bad usages).\n\nJust to reiterate -- code like this:\n\n```c++\nauto ptr = ",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643786641,643786641,
MarcoFalke,2020-06-14 17:48:27,"For our codebase, unique_ptr means that the pointer can be null. E.g.\n\n* https://github.com/bitcoin/bitcoin/blob/195822f1e05e2f36002c906667d4c639663f23b5/src/node/context.h#L43\n* https://github.com/bitcoin/bitcoin/blob/195822f1e05e2f36002c906667d4c639663f23b5/src/net.h#L835\n* ...\n\nSo I think it would be confusing to have one exception where a pointer type is used but at the same time i",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643799133,643799133,
cculianu,2020-06-14 18:44:03,"Right, but in this case the contract is that it cannot be null.  \n\nI get it -- this is a minor nit and not worth worrying about -- no worries.  I still maintain that it would be a code quality improvement.  It's a bit silly to see people checking `new`'s return value as if it can ever return `nullptr`.   If this doesn't utterly make you ""wtf"" when you read it:\n\n```c++\n    pblocktemplate.",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643805864,643805864,
DrahtBot,2020-06-15 19:52:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19283 (refactor: Remove unused BlockAssembler::pblock member var by MarcoFalke)\n\nIf you consider this pull request impo",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-644344116,644344116,
laanwj,2020-07-09 18:19:27,"I agree with @MarcoFalke. Please make it either impossible to return a nullptr (by returning a while object) or keep the checks somehow. Simply removing them is scary.\nEven though the check might, with some reasoning, be unnecessary right now, for maintainability and robustness some defense in depth doesn't hurt so NACK on this change as it is.",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-656278724,656278724,
DrahtBot,2020-07-09 18:38:10,<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-656287285,656287285,
cculianu,2020-07-10 08:02:07,"> Please make it either impossible to return a nullptr (\n\nMy point is -- *It's already impossible to return a nullptr*.  Which is why the check is silly.   It's the equivalent of doing:\n\n```\n   int a = 2;\n   if (a != 2) {\n      // .... code here to throw\n   }\n```\n\nThe above example may seem like an exaggeration, of course -- but if you stop to think about it -- it really is t",https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-656543341,656543341,
