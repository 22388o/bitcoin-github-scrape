[
  {
    "sha": "125ce3b2566249fbbf9a31facf61d8f758e9411f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjVjZTNiMjU2NjI0OWZiYmY5YTMxZmFjZjYxZDhmNzU4ZTk0MTFm",
    "commit": {
      "author": {
        "name": "Calin Culianu",
        "email": "calin.culianu@gmail.com",
        "date": "2020-06-14T12:10:23Z"
      },
      "committer": {
        "name": "Calin Culianu",
        "email": "calin.culianu@gmail.com",
        "date": "2020-06-14T12:10:23Z"
      },
      "message": "Remove checks for nullptr from BlockAssembler::CreateNewBlock\n\noperator new() does not normally ever return nullptr unless one\nexplicitly uses the `std::nothrow` version or unless one redefines it.  Neither\nis the case in this entire codebase, hence the check for nullptr for the\nreturn value from BlockAssembler::CreateNewBlock was entirely\nsuperfluous and all brances that test it would always evaluate to\nfalse. So, it can be safely removed in the interests of code quality.\n\nSee: https://en.cppreference.com/w/cpp/memory/new/operator_new\n\ntl;dr: operator new() either succeeds or throws std::bad_alloc, it can\nnever return nullptr.",
      "tree": {
        "sha": "db543e1f95eb76b256195f6ea63a4de3c92feeb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db543e1f95eb76b256195f6ea63a4de3c92feeb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/125ce3b2566249fbbf9a31facf61d8f758e9411f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQTUZRNfl9AEfhjpncMhgQpUIDHALAUCXuYUsgAKCRAhgQpUIDHA\nLKNsAQD7OjoTX3fd+P14mg8mtzpOfy+I91QZw2J/OcUzccnI6gD9GP3V3C2ZIa/i\npx3cc54+7U3Ic8g7h7NPhdeO13m7lc4=\n=W+E+\n-----END PGP SIGNATURE-----",
        "payload": "tree db543e1f95eb76b256195f6ea63a4de3c92feeb1\nparent 195822f1e05e2f36002c906667d4c639663f23b5\nauthor Calin Culianu <calin.culianu@gmail.com> 1592136623 +0300\ncommitter Calin Culianu <calin.culianu@gmail.com> 1592136623 +0300\n\nRemove checks for nullptr from BlockAssembler::CreateNewBlock\n\noperator new() does not normally ever return nullptr unless one\nexplicitly uses the `std::nothrow` version or unless one redefines it.  Neither\nis the case in this entire codebase, hence the check for nullptr for the\nreturn value from BlockAssembler::CreateNewBlock was entirely\nsuperfluous and all brances that test it would always evaluate to\nfalse. So, it can be safely removed in the interests of code quality.\n\nSee: https://en.cppreference.com/w/cpp/memory/new/operator_new\n\ntl;dr: operator new() either succeeds or throws std::bad_alloc, it can\nnever return nullptr.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/125ce3b2566249fbbf9a31facf61d8f758e9411f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/125ce3b2566249fbbf9a31facf61d8f758e9411f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/125ce3b2566249fbbf9a31facf61d8f758e9411f/comments",
    "author": {
      "login": "cculianu",
      "id": 266627,
      "node_id": "MDQ6VXNlcjI2NjYyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cculianu",
      "html_url": "https://github.com/cculianu",
      "followers_url": "https://api.github.com/users/cculianu/followers",
      "following_url": "https://api.github.com/users/cculianu/following{/other_user}",
      "gists_url": "https://api.github.com/users/cculianu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cculianu/subscriptions",
      "organizations_url": "https://api.github.com/users/cculianu/orgs",
      "repos_url": "https://api.github.com/users/cculianu/repos",
      "events_url": "https://api.github.com/users/cculianu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cculianu/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cculianu",
      "id": 266627,
      "node_id": "MDQ6VXNlcjI2NjYyNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266627?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cculianu",
      "html_url": "https://github.com/cculianu",
      "followers_url": "https://api.github.com/users/cculianu/followers",
      "following_url": "https://api.github.com/users/cculianu/following{/other_user}",
      "gists_url": "https://api.github.com/users/cculianu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cculianu/subscriptions",
      "organizations_url": "https://api.github.com/users/cculianu/orgs",
      "repos_url": "https://api.github.com/users/cculianu/repos",
      "events_url": "https://api.github.com/users/cculianu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cculianu/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "195822f1e05e2f36002c906667d4c639663f23b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195822f1e05e2f36002c906667d4c639663f23b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/195822f1e05e2f36002c906667d4c639663f23b5"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "203fdf2881fcd6b847fa16fa0816aa7ead08e09c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/125ce3b2566249fbbf9a31facf61d8f758e9411f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/125ce3b2566249fbbf9a31facf61d8f758e9411f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=125ce3b2566249fbbf9a31facf61d8f758e9411f",
        "patch": "@@ -107,8 +107,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     pblocktemplate.reset(new CBlockTemplate());\n \n-    if(!pblocktemplate.get())\n-        return nullptr;\n     pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Add dummy coinbase tx as first transaction"
      },
      {
        "sha": "3f8fc0ebf04a5c72d62c0432f3506b3b03237437",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/125ce3b2566249fbbf9a31facf61d8f758e9411f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/125ce3b2566249fbbf9a31facf61d8f758e9411f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=125ce3b2566249fbbf9a31facf61d8f758e9411f",
        "patch": "@@ -148,8 +148,6 @@ static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& me\n     while (nHeight < nHeightEnd && !ShutdownRequested())\n     {\n         std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(coinbase_script));\n-        if (!pblocktemplate.get())\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n \n         uint256 block_hash;\n@@ -349,9 +347,6 @@ static UniValue generateblock(const JSONRPCRequest& request)\n \n         CTxMemPool empty_mempool;\n         std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(empty_mempool, chainparams).CreateNewBlock(coinbase_script));\n-        if (!blocktemplate) {\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n-        }\n         block = blocktemplate->block;\n     }\n \n@@ -722,8 +717,6 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n         pblocktemplate = BlockAssembler(mempool, Params()).CreateNewBlock(scriptDummy);\n-        if (!pblocktemplate)\n-            throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n         // Need to update only after we know CreateNewBlock succeeded\n         pindexPrev = pindexPrevNew;"
      }
    ]
  }
]