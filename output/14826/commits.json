[
  {
    "sha": "0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTc1ZjQ0YTA5ZWQwN2ZmNWVlZWIxNDJhNGNlZmM0YWJhMGRkZjMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-11-10T20:29:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-11-27T20:23:49Z"
      },
      "message": "Replace CAffectedKeysVisitor with descriptor based logic",
      "tree": {
        "sha": "129d99945a39e34f640123d53fd07a5ac434082e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/129d99945a39e34f640123d53fd07a5ac434082e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdf146f3293c487afdc4d6d9f6b64099aa8bd28a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf146f3293c487afdc4d6d9f6b64099aa8bd28a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf146f3293c487afdc4d6d9f6b64099aa8bd28a"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 13,
      "deletions": 67
    },
    "files": [
      {
        "sha": "893e4a53693d5ba58bba2feb9eea68e99af2ad8f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 67,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
        "patch": "@@ -22,6 +22,7 @@\n #include <policy/rbf.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n+#include <script/descriptor.h>\n #include <script/script.h>\n #include <shutdown.h>\n #include <timedata.h>\n@@ -104,67 +105,17 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n }\n \n-/** A class to identify which pubkeys a script and a keystore have in common. */\n-class CAffectedKeysVisitor : public boost::static_visitor<void> {\n-private:\n-    const CKeyStore &keystore;\n-    std::vector<CKeyID> &vKeys;\n-\n-public:\n-    /**\n-     * @param[in] keystoreIn The CKeyStore that is queried for the presence of a pubkey.\n-     * @param[out] vKeysIn A vector to which a script's pubkey identifiers are appended if they are in the keystore.\n-     */\n-    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n-\n-    /**\n-     * Apply the visitor to each destination in a script, recursively to the redeemscript\n-     * in the case of p2sh destinations.\n-     * @param[in] script The CScript from which destinations are extracted.\n-     * @post Any CKeyIDs that script and keystore have in common are appended to the visitor's vKeys.\n-     */\n-    void Process(const CScript &script) {\n-        txnouttype type;\n-        std::vector<CTxDestination> vDest;\n-        int nRequired;\n-        if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            for (const CTxDestination &dest : vDest)\n-                boost::apply_visitor(*this, dest);\n-        }\n-    }\n-\n-    void operator()(const CKeyID &keyId) {\n-        if (keystore.HaveKey(keyId))\n-            vKeys.push_back(keyId);\n-    }\n-\n-    void operator()(const CScriptID &scriptId) {\n-        CScript script;\n-        if (keystore.GetCScript(scriptId, script))\n-            Process(script);\n-    }\n-\n-    void operator()(const WitnessV0ScriptHash& scriptID)\n-    {\n-        CScriptID id;\n-        CRIPEMD160().Write(scriptID.begin(), 32).Finalize(id.begin());\n-        CScript script;\n-        if (keystore.GetCScript(id, script)) {\n-            Process(script);\n-        }\n-    }\n-\n-    void operator()(const WitnessV0KeyHash& keyid)\n-    {\n-        CKeyID id(keyid);\n-        if (keystore.HaveKey(id)) {\n-            vKeys.push_back(id);\n-        }\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider)\n+{\n+    std::vector<CScript> dummy;\n+    FlatSigningProvider out;\n+    InferDescriptor(spk, provider)->Expand(0, DUMMY_SIGNING_PROVIDER, dummy, out);\n+    std::vector<CKeyID> ret;\n+    for (const auto& entry : out.pubkeys) {\n+        ret.push_back(entry.first);\n     }\n-\n-    template<typename X>\n-    void operator()(const X &none) {}\n-};\n+    return ret;\n+}\n \n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n@@ -977,9 +928,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n             // loop though all outputs\n             for (const CTxOut& txout: tx.vout) {\n                 // extract addresses and check if they match with an unused keypool key\n-                std::vector<CKeyID> vAffected;\n-                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n-                for (const CKeyID &keyid : vAffected) {\n+                for (const auto& keyid : GetAffectedKeys(txout.scriptPubKey, *this)) {\n                     std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n                     if (mi != m_pool_key_to_index.end()) {\n                         WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n@@ -3693,7 +3642,6 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n         return;\n \n     // find first block that affects those keys, if there are any left\n-    std::vector<CKeyID> vAffected;\n     for (const auto& entry : mapWallet) {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = entry.second;\n@@ -3703,14 +3651,12 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n             int nHeight = pindex->nHeight;\n             for (const CTxOut &txout : wtx.tx->vout) {\n                 // iterate over all their outputs\n-                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n-                for (const CKeyID &keyid : vAffected) {\n+                for (const auto &keyid : GetAffectedKeys(txout.scriptPubKey, *this)) {\n                     // ... and all their affected keys\n                     std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n                     if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n                         rit->second = pindex;\n                 }\n-                vAffected.clear();\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "02293e693d54ad16c373ac077c5f4825c6d51dcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjI5M2U2OTNkNTRhZDE2YzM3M2FjMDc3YzVmNDgyNWM2ZDUxZGNk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-11-28T10:46:36Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-11-28T12:28:13Z"
      },
      "message": "Avoid expanding descriptor scriptPubKeys",
      "tree": {
        "sha": "09ae5d11524cf64d7aa600b3bd4c068610bd306a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09ae5d11524cf64d7aa600b3bd4c068610bd306a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02293e693d54ad16c373ac077c5f4825c6d51dcd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02293e693d54ad16c373ac077c5f4825c6d51dcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02293e693d54ad16c373ac077c5f4825c6d51dcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02293e693d54ad16c373ac077c5f4825c6d51dcd/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 22,
      "deletions": 23
    },
    "files": [
      {
        "sha": "a556b2b82f495ff32ec93f3b695686c6fae1236b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=02293e693d54ad16c373ac077c5f4825c6d51dcd",
        "patch": "@@ -2252,7 +2252,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             if (!desc->IsRange()) range = 0;\n             for (int i = 0; i <= range; ++i) {\n                 std::vector<CScript> scripts;\n-                if (!desc->Expand(i, provider, scripts, provider)) {\n+                if (!desc->Expand(i, provider, &scripts, provider)) {\n                     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n                 }\n                 for (const auto& script : scripts) {"
      },
      {
        "sha": "7caf6f487f3788509fbffd90157d538c41f3b8f6",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=02293e693d54ad16c373ac077c5f4825c6d51dcd",
        "patch": "@@ -214,9 +214,9 @@ class AddressDescriptor final : public Descriptor\n     bool IsSolvable() const override { return false; }\n     std::string ToString() const override { return \"addr(\" + EncodeDestination(m_destination) + \")\"; }\n     bool ToPrivateString(const SigningProvider& arg, std::string& out) const override { out = ToString(); return true; }\n-    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>* output_scripts, FlatSigningProvider& out) const override\n     {\n-        output_scripts = std::vector<CScript>{GetScriptForDestination(m_destination)};\n+        if (output_scripts) *output_scripts = std::vector<CScript>{GetScriptForDestination(m_destination)};\n         return true;\n     }\n };\n@@ -233,9 +233,9 @@ class RawDescriptor final : public Descriptor\n     bool IsSolvable() const override { return false; }\n     std::string ToString() const override { return \"raw(\" + HexStr(m_script.begin(), m_script.end()) + \")\"; }\n     bool ToPrivateString(const SigningProvider& arg, std::string& out) const override { out = ToString(); return true; }\n-    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>* output_scripts, FlatSigningProvider& out) const override\n     {\n-        output_scripts = std::vector<CScript>{m_script};\n+        if (output_scripts) *output_scripts = std::vector<CScript>{m_script};\n         return true;\n     }\n };\n@@ -260,12 +260,12 @@ class SingleKeyDescriptor final : public Descriptor\n         out = m_fn_name + \"(\" + std::move(ret) + \")\";\n         return true;\n     }\n-    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>* output_scripts, FlatSigningProvider& out) const override\n     {\n         CPubKey key;\n         KeyOriginInfo info;\n         if (!m_provider->GetPubKey(pos, arg, key, info)) return false;\n-        output_scripts = std::vector<CScript>{m_script_fn(key)};\n+        if (output_scripts) *output_scripts = std::vector<CScript>{m_script_fn(key)};\n         out.origins.emplace(key.GetID(), std::move(info));\n         out.pubkeys.emplace(key.GetID(), key);\n         return true;\n@@ -316,7 +316,7 @@ class MultisigDescriptor : public Descriptor\n         return true;\n     }\n \n-    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>* output_scripts, FlatSigningProvider& out) const override\n     {\n         std::vector<std::pair<CPubKey, KeyOriginInfo>> entries;\n         entries.reserve(m_providers.size());\n@@ -332,7 +332,7 @@ class MultisigDescriptor : public Descriptor\n             out.origins.emplace(entry.first.GetID(), std::move(entry.second));\n             out.pubkeys.emplace(entry.first.GetID(), entry.first);\n         }\n-        output_scripts = std::vector<CScript>{GetScriptForMultisig(m_threshold, pubkeys)};\n+        if (output_scripts) *output_scripts = std::vector<CScript>{GetScriptForMultisig(m_threshold, pubkeys)};\n         return true;\n     }\n };\n@@ -357,15 +357,15 @@ class ConvertorDescriptor : public Descriptor\n         out = m_fn_name + \"(\" + std::move(ret) + \")\";\n         return true;\n     }\n-    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>* output_scripts, FlatSigningProvider& out) const override\n     {\n         std::vector<CScript> sub;\n-        if (!m_descriptor->Expand(pos, arg, sub, out)) return false;\n-        output_scripts.clear();\n+        if (!m_descriptor->Expand(pos, arg, &sub, out)) return false;\n+        if (output_scripts) output_scripts->clear();\n         for (const auto& script : sub) {\n             CScriptID id(script);\n             out.scripts.emplace(CScriptID(script), script);\n-            output_scripts.push_back(m_convert_fn(script));\n+            if (output_scripts) output_scripts->push_back(m_convert_fn(script));\n         }\n         return true;\n     }\n@@ -392,7 +392,7 @@ class ComboDescriptor final : public Descriptor\n         out = \"combo(\" + std::move(ret) + \")\";\n         return true;\n     }\n-    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>* output_scripts, FlatSigningProvider& out) const override\n     {\n         CPubKey key;\n         KeyOriginInfo info;\n@@ -401,7 +401,7 @@ class ComboDescriptor final : public Descriptor\n         {\n             CScript p2pk = GetScriptForRawPubKey(key);\n             CScript p2pkh = GetScriptForDestination(keyid);\n-            output_scripts = std::vector<CScript>{std::move(p2pk), std::move(p2pkh)};\n+            if (output_scripts) *output_scripts = std::vector<CScript>{std::move(p2pk), std::move(p2pkh)};\n             out.pubkeys.emplace(keyid, key);\n             out.origins.emplace(keyid, std::move(info));\n         }\n@@ -410,8 +410,8 @@ class ComboDescriptor final : public Descriptor\n             CScriptID p2wpkh_id(p2wpkh);\n             CScript p2sh_p2wpkh = GetScriptForDestination(p2wpkh_id);\n             out.scripts.emplace(p2wpkh_id, p2wpkh);\n-            output_scripts.push_back(std::move(p2wpkh));\n-            output_scripts.push_back(std::move(p2sh_p2wpkh));\n+            if (output_scripts) output_scripts->push_back(std::move(p2wpkh));\n+            if (output_scripts) output_scripts->push_back(std::move(p2sh_p2wpkh));\n         }\n         return true;\n     }"
      },
      {
        "sha": "bbad5171f7197059c9a983bb8d207d2853c7c913",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=02293e693d54ad16c373ac077c5f4825c6d51dcd",
        "patch": "@@ -46,10 +46,10 @@ struct Descriptor {\n      *\n      * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored.\n      * provider: the provider to query for private keys in case of hardened derivation.\n-     * output_script: the expanded scriptPubKeys will be put here.\n+     * output_script: optionally the expanded scriptPubKeys will be put here.\n      * out: scripts and public keys necessary for solving the expanded scriptPubKeys will be put here (may be equal to provider).\n      */\n-    virtual bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n+    virtual bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>* output_scripts, FlatSigningProvider& out) const = 0;\n };\n \n /** Parse a descriptor string. Included private keys are put in out. Returns nullptr if parsing fails. */"
      },
      {
        "sha": "5ea572a850a5cfd8b5a0f22d4f95197148d66b1b",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=02293e693d54ad16c373ac077c5f4825c6d51dcd",
        "patch": "@@ -90,7 +90,7 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n             const FlatSigningProvider& key_provider = (flags & HARDENED) ? keys_priv : keys_pub;\n             FlatSigningProvider script_provider;\n             std::vector<CScript> spks;\n-            BOOST_CHECK((t ? parse_priv : parse_pub)->Expand(i, key_provider, spks, script_provider));\n+            BOOST_CHECK((t ? parse_priv : parse_pub)->Expand(i, key_provider, &spks, script_provider));\n             BOOST_CHECK_EQUAL(spks.size(), ref.size());\n             for (size_t n = 0; n < spks.size(); ++n) {\n                 BOOST_CHECK_EQUAL(ref[n], HexStr(spks[n].begin(), spks[n].end()));\n@@ -108,7 +108,7 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n                 BOOST_CHECK_EQUAL(inferred->IsSolvable(), !(flags & UNSOLVABLE));\n                 std::vector<CScript> spks_inferred;\n                 FlatSigningProvider provider_inferred;\n-                BOOST_CHECK(inferred->Expand(0, provider_inferred, spks_inferred, provider_inferred));\n+                BOOST_CHECK(inferred->Expand(0, provider_inferred, &spks_inferred, provider_inferred));\n                 BOOST_CHECK_EQUAL(spks_inferred.size(), 1);\n                 BOOST_CHECK(spks_inferred[0] == spks[n]);\n                 BOOST_CHECK_EQUAL(IsSolvable(provider_inferred, spks_inferred[0]), !(flags & UNSOLVABLE));"
      },
      {
        "sha": "c4a2e7307a9fbf31e452d4aca90832f09c576feb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02293e693d54ad16c373ac077c5f4825c6d51dcd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=02293e693d54ad16c373ac077c5f4825c6d51dcd",
        "patch": "@@ -107,9 +107,8 @@ std::string COutput::ToString() const\n \n std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider)\n {\n-    std::vector<CScript> dummy;\n     FlatSigningProvider out;\n-    InferDescriptor(spk, provider)->Expand(0, DUMMY_SIGNING_PROVIDER, dummy, out);\n+    InferDescriptor(spk, provider)->Expand(0, DUMMY_SIGNING_PROVIDER, nullptr, out);\n     std::vector<CKeyID> ret;\n     for (const auto& entry : out.pubkeys) {\n         ret.push_back(entry.first);"
      }
    ]
  }
]