[
  {
    "sha": "cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmIwYTQ2Mjk5YmZiYjFiNGZlMzVmZjc0ZTBlMWJhZTY2NjZhMmRm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:54:25Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:54:25Z"
      },
      "message": "net: Move PF_ISIMPLICIT interpretation from AcceptConnection to new InitializePermissionFlags",
      "tree": {
        "sha": "6e41f26ea61d497ce80560f7eab07b461d2338bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e41f26ea61d497ce80560f7eab07b461d2338bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "23cac7dc694b2a0e803cf899508c3005653d8969",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df",
        "patch": "@@ -512,6 +512,16 @@ void CConnman::AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNet\n     }\n }\n \n+void CConnman::InitializePermissionFlags(NetPermissionFlags& flags) {\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::Implicit)) {\n+        NetPermissions::ClearFlag(flags, NetPermissionFlags::Implicit);\n+        if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) NetPermissions::AddFlag(flags, NetPermissionFlags::ForceRelay);\n+        if (gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)) NetPermissions::AddFlag(flags, NetPermissionFlags::Relay);\n+        NetPermissions::AddFlag(flags, NetPermissionFlags::Mempool);\n+        NetPermissions::AddFlag(flags, NetPermissionFlags::NoBan);\n+    }\n+}\n+\n std::string ConnectionTypeAsString(ConnectionType conn_type)\n {\n     switch (conn_type) {\n@@ -1118,13 +1128,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     int nMaxInbound = nMaxConnections - m_max_outbound;\n \n     AddWhitelistPermissionFlags(permissionFlags, addr);\n-    if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::Implicit)) {\n-        NetPermissions::ClearFlag(permissionFlags, NetPermissionFlags::Implicit);\n-        if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::ForceRelay);\n-        if (gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)) NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::Relay);\n-        NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::Mempool);\n-        NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::NoBan);\n-    }\n+    InitializePermissionFlags(permissionFlags);\n \n     {\n         LOCK(cs_vNodes);"
      },
      {
        "sha": "340a5daabac8bbcd804d05d69493405f8e46b27e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df",
        "patch": "@@ -1014,6 +1014,7 @@ class CConnman\n     bool AttemptToEvictConnection();\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type);\n     void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;\n+    static void InitializePermissionFlags(NetPermissionFlags& flags);\n \n     void DeleteNode(CNode* pnode);\n "
      }
    ]
  },
  {
    "sha": "3597c2f6372061c3cdc5df198b9a6286ec56b487",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTk3YzJmNjM3MjA2MWMzY2RjNWRmMTk4YjlhNjI4NmVjNTZiNDg3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:57:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:57:50Z"
      },
      "message": "net: Move extra service flag into InitializePermissionFlags",
      "tree": {
        "sha": "042e2cfa0d5bd26ea63375c20060d1a6e4e3a6c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/042e2cfa0d5bd26ea63375c20060d1a6e4e3a6c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3597c2f6372061c3cdc5df198b9a6286ec56b487",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3597c2f6372061c3cdc5df198b9a6286ec56b487",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3597c2f6372061c3cdc5df198b9a6286ec56b487",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3597c2f6372061c3cdc5df198b9a6286ec56b487/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfb0a46299bfbb1b4fe35ff74e0e1bae6666a2df"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ec9256554c0a45b509da25e22a0eaed177ddf24f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3597c2f6372061c3cdc5df198b9a6286ec56b487/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3597c2f6372061c3cdc5df198b9a6286ec56b487/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3597c2f6372061c3cdc5df198b9a6286ec56b487",
        "patch": "@@ -512,14 +512,18 @@ void CConnman::AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNet\n     }\n }\n \n-void CConnman::InitializePermissionFlags(NetPermissionFlags& flags) {\n+void CConnman::InitializePermissionFlags(NetPermissionFlags& flags, ServiceFlags& service_flags) {\n     if (NetPermissions::HasFlag(flags, NetPermissionFlags::Implicit)) {\n         NetPermissions::ClearFlag(flags, NetPermissionFlags::Implicit);\n         if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) NetPermissions::AddFlag(flags, NetPermissionFlags::ForceRelay);\n         if (gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)) NetPermissions::AddFlag(flags, NetPermissionFlags::Relay);\n         NetPermissions::AddFlag(flags, NetPermissionFlags::Mempool);\n         NetPermissions::AddFlag(flags, NetPermissionFlags::NoBan);\n     }\n+\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::BloomFilter)) {\n+        service_flags = static_cast<ServiceFlags>(service_flags | NODE_BLOOM);\n+    }\n }\n \n std::string ConnectionTypeAsString(ConnectionType conn_type)\n@@ -1128,7 +1132,8 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     int nMaxInbound = nMaxConnections - m_max_outbound;\n \n     AddWhitelistPermissionFlags(permissionFlags, addr);\n-    InitializePermissionFlags(permissionFlags);\n+    ServiceFlags nodeServices = nLocalServices;\n+    InitializePermissionFlags(permissionFlags, nodeServices);\n \n     {\n         LOCK(cs_vNodes);\n@@ -1185,11 +1190,6 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n \n-    ServiceFlags nodeServices = nLocalServices;\n-    if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::BloomFilter)) {\n-        nodeServices = static_cast<ServiceFlags>(nodeServices | NODE_BLOOM);\n-    }\n-\n     const bool inbound_onion = std::find(m_onion_binds.begin(), m_onion_binds.end(), addr_bind) != m_onion_binds.end();\n     CNode* pnode = new CNode(id, nodeServices, hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n     pnode->AddRef();"
      },
      {
        "sha": "7f30afec80d93d1bb54b2b525859eb174bfa3a0a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3597c2f6372061c3cdc5df198b9a6286ec56b487/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3597c2f6372061c3cdc5df198b9a6286ec56b487/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3597c2f6372061c3cdc5df198b9a6286ec56b487",
        "patch": "@@ -1014,7 +1014,7 @@ class CConnman\n     bool AttemptToEvictConnection();\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type);\n     void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;\n-    static void InitializePermissionFlags(NetPermissionFlags& flags);\n+    static void InitializePermissionFlags(NetPermissionFlags& flags, ServiceFlags& service_flags);\n \n     void DeleteNode(CNode* pnode);\n "
      }
    ]
  },
  {
    "sha": "81622ba1229984872ecb2c74db55e9901813150f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTYyMmJhMTIyOTk4NDg3MmVjYjJjNzRkYjU1ZTk5MDE4MTMxNTBm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T01:06:27Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T01:11:51Z"
      },
      "message": "Accept \"in\" and \"out\" flags to -whitelist to allow whitelisting outgoing connections",
      "tree": {
        "sha": "a2f5272173555975451d2541ce8db84de446de5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2f5272173555975451d2541ce8db84de446de5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81622ba1229984872ecb2c74db55e9901813150f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81622ba1229984872ecb2c74db55e9901813150f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81622ba1229984872ecb2c74db55e9901813150f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81622ba1229984872ecb2c74db55e9901813150f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3597c2f6372061c3cdc5df198b9a6286ec56b487",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3597c2f6372061c3cdc5df198b9a6286ec56b487",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3597c2f6372061c3cdc5df198b9a6286ec56b487"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 63,
      "deletions": 22
    },
    "files": [
      {
        "sha": "05c705d3d6f9466a39f978a21651bd77c29e9569",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81622ba1229984872ecb2c74db55e9901813150f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81622ba1229984872ecb2c74db55e9901813150f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=81622ba1229984872ecb2c74db55e9901813150f",
        "patch": "@@ -381,7 +381,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #endif\n     argsman.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from inbound peers is disabled, unless the peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from peers is disabled, unless the peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-coinstatsindex\", strprintf(\"Maintain coinstats index used by the gettxoutsetinfo RPC (default: %u)\", DEFAULT_COINSTATSINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-conf=<file>\", strprintf(\"Specify path to read-only configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -469,9 +469,11 @@ void SetupServerArgs(ArgsManager& argsman)\n         \"Use [host]:port notation for IPv6. Allowed permissions: \" + Join(NET_PERMISSIONS_DOC, \", \") + \". \"\n         \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n-    argsman.AddArg(\"-whitelist=<[permissions@]IP address or network>\", \"Add permission flags to the peers connecting from the given IP address (e.g. 1.2.3.4) or \"\n+    argsman.AddArg(\"-whitelist=<[permissions@]IP address or network>\", strprintf(\"Add permission flags to the peers using the given IP address (e.g. 1.2.3.4) or \"\n         \"CIDR-notated network (e.g. 1.2.3.0/24). Uses the same permissions as \"\n-        \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+        \"-whitebind. \"\n+        \"Additional flags in and out control whether permissions apply to incoming connections and/or outgoing (default: %s). \"\n+        \"Can be specified multiple times.\", \"incoming only\"), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions(argsman);\n \n@@ -529,8 +531,8 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     argsman.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kvB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    argsman.AddArg(\"-whitelistforcerelay\", strprintf(\"Add 'forcerelay' permission to whitelisted inbound peers with default permissions. This will relay transactions even if the transactions were already in the mempool. (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    argsman.AddArg(\"-whitelistrelay\", strprintf(\"Add 'relay' permission to whitelisted inbound peers with default permissions. This will accept relayed transactions even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-whitelistforcerelay\", strprintf(\"Add 'forcerelay' permission to whitelisted peers with default permissions. This will relay transactions even if the transactions were already in the mempool. (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-whitelistrelay\", strprintf(\"Add 'relay' permission to whitelisted peers with default permissions. This will accept relayed transactions even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n \n \n     argsman.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n@@ -1738,9 +1740,15 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     for (const auto& net : args.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n+        ConnectionDirection connection_direction;\n         bilingual_str error;\n-        if (!NetWhitelistPermissions::TryParse(net, subnet, error)) return InitError(error);\n-        connOptions.vWhitelistedRange.push_back(subnet);\n+        if (!NetWhitelistPermissions::TryParse(net, subnet, connection_direction, error)) return InitError(error);\n+        if (connection_direction & ConnectionDirection::In) {\n+            connOptions.vWhitelistedRange.push_back(subnet);\n+        }\n+        if (connection_direction & ConnectionDirection::Out) {\n+            connOptions.vWhitelistedRangeOutgoing.push_back(subnet);\n+        }\n     }\n \n     connOptions.vSeedNodes = args.GetArgs(\"-seednode\");"
      },
      {
        "sha": "4e6e7de6de2ae0151ca78c256f39b568182ba846",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81622ba1229984872ecb2c74db55e9901813150f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81622ba1229984872ecb2c74db55e9901813150f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=81622ba1229984872ecb2c74db55e9901813150f",
        "patch": "@@ -480,15 +480,22 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         return nullptr;\n     }\n \n+    NetPermissionFlags permission_flags = NetPermissionFlags::None;\n+    ServiceFlags node_services = nLocalServices;\n+    AddWhitelistPermissionFlags(permission_flags, addrConnect, vWhitelistedRangeOutgoing);\n+    InitializePermissionFlags(permission_flags, node_services);\n+\n     // Add node\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     if (!addr_bind.IsValid()) {\n         addr_bind = GetBindAddress(sock->Get());\n     }\n-    CNode* pnode = new CNode(id, nLocalServices, sock->Release(), addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, /* inbound_onion */ false);\n+    CNode* pnode = new CNode(id, node_services, sock->Release(), addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, /* inbound_onion */ false);\n     pnode->AddRef();\n \n+    pnode->m_permissionFlags = permission_flags;\n+\n     // We're making a new connection, harvest entropy from the time (and our peer count)\n     RandAddEvent((uint32_t)id);\n \n@@ -506,8 +513,8 @@ void CNode::CloseSocketDisconnect()\n     }\n }\n \n-void CConnman::AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const {\n-    for (const auto& subnet : vWhitelistedRange) {\n+void CConnman::AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr, const std::vector<NetWhitelistPermissions>& ranges) const {\n+    for (const auto& subnet : ranges) {\n         if (subnet.m_subnet.Match(addr)) NetPermissions::AddFlag(flags, subnet.m_flags);\n     }\n }\n@@ -1131,7 +1138,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     int nInbound = 0;\n     int nMaxInbound = nMaxConnections - m_max_outbound;\n \n-    AddWhitelistPermissionFlags(permissionFlags, addr);\n+    AddWhitelistPermissionFlags(permissionFlags, addr, vWhitelistedRange);\n     ServiceFlags nodeServices = nLocalServices;\n     InitializePermissionFlags(permissionFlags, nodeServices);\n "
      },
      {
        "sha": "3f09e78c71b80ee6911448a97d38ae646aca1eb0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81622ba1229984872ecb2c74db55e9901813150f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81622ba1229984872ecb2c74db55e9901813150f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=81622ba1229984872ecb2c74db55e9901813150f",
        "patch": "@@ -765,6 +765,7 @@ class CConnman\n         int64_t m_peer_connect_timeout = DEFAULT_PEER_CONNECT_TIMEOUT;\n         std::vector<std::string> vSeedNodes;\n         std::vector<NetWhitelistPermissions> vWhitelistedRange;\n+        std::vector<NetWhitelistPermissions> vWhitelistedRangeOutgoing;\n         std::vector<NetWhitebindPermissions> vWhiteBinds;\n         std::vector<CService> vBinds;\n         std::vector<CService> onion_binds;\n@@ -795,6 +796,7 @@ class CConnman\n             nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n         }\n         vWhitelistedRange = connOptions.vWhitelistedRange;\n+        vWhitelistedRangeOutgoing = connOptions.vWhitelistedRangeOutgoing;\n         {\n             LOCK(cs_vAddedNodes);\n             vAddedNodes = connOptions.m_added_nodes;\n@@ -1013,7 +1015,7 @@ class CConnman\n \n     bool AttemptToEvictConnection();\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type);\n-    void AddWhitelistPermissionFlags(NetPermissionFlags& flags, const CNetAddr &addr) const;\n+    void AddWhitelistPermissionFlags(NetPermissionFlags& output_flags, const CNetAddr &addr, const std::vector<NetWhitelistPermissions>& ranges) const;\n     static void InitializePermissionFlags(NetPermissionFlags& flags, ServiceFlags& service_flags);\n \n     void DeleteNode(CNode* pnode);\n@@ -1052,6 +1054,8 @@ class CConnman\n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n     std::vector<NetWhitelistPermissions> vWhitelistedRange;\n+    // Whitelisted ranges for outgoing connections.\n+    std::vector<NetWhitelistPermissions> vWhitelistedRangeOutgoing;\n \n     unsigned int nSendBufferMaxSize{0};\n     unsigned int nReceiveFloodSize{0};"
      },
      {
        "sha": "c072f83cfd38e214014df83c5bf51d6f713c2e6e",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81622ba1229984872ecb2c74db55e9901813150f/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81622ba1229984872ecb2c74db55e9901813150f/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=81622ba1229984872ecb2c74db55e9901813150f",
        "patch": "@@ -21,9 +21,10 @@ const std::vector<std::string> NET_PERMISSIONS_DOC{\n namespace {\n \n // Parse the following format: \"perm1,perm2@xxxxxx\"\n-bool TryParsePermissionFlags(const std::string& str, NetPermissionFlags& output, size_t& readen, bilingual_str& error)\n+bool TryParsePermissionFlags(const std::string& str, NetPermissionFlags& output, ConnectionDirection* output_connection_direction, size_t& readen, bilingual_str& error)\n {\n     NetPermissionFlags flags = NetPermissionFlags::None;\n+    ConnectionDirection connection_direction = ConnectionDirection::None;\n     const auto atSeparator = str.find('@');\n \n     // if '@' is not found (ie, \"xxxxx\"), the caller should apply implicit permissions\n@@ -52,6 +53,14 @@ bool TryParsePermissionFlags(const std::string& str, NetPermissionFlags& output,\n             else if (permission == \"all\") NetPermissions::AddFlag(flags, NetPermissionFlags::All);\n             else if (permission == \"relay\") NetPermissions::AddFlag(flags, NetPermissionFlags::Relay);\n             else if (permission == \"addr\") NetPermissions::AddFlag(flags, NetPermissionFlags::Addr);\n+            else if (permission == \"in\") connection_direction |= ConnectionDirection::In;\n+            else if (permission == \"out\") {\n+                if (!output_connection_direction) {\n+                    error = _(\"whitebind is only used for incoming connections\");\n+                    return false;\n+                }\n+                connection_direction |= ConnectionDirection::Out;\n+            }\n             else if (permission.length() == 0); // Allow empty entries\n             else {\n                 error = strprintf(_(\"Invalid P2P permission: '%s'\"), permission);\n@@ -61,7 +70,11 @@ bool TryParsePermissionFlags(const std::string& str, NetPermissionFlags& output,\n         readen++;\n     }\n \n+    // By default, whitelist only applies to incoming connections\n+    if (connection_direction == ConnectionDirection::None) connection_direction = ConnectionDirection::In;\n+\n     output = flags;\n+    if (output_connection_direction) *output_connection_direction = connection_direction;\n     error = Untranslated(\"\");\n     return true;\n }\n@@ -85,7 +98,7 @@ bool NetWhitebindPermissions::TryParse(const std::string& str, NetWhitebindPermi\n {\n     NetPermissionFlags flags;\n     size_t offset;\n-    if (!TryParsePermissionFlags(str, flags, offset, error)) return false;\n+    if (!TryParsePermissionFlags(str, flags, nullptr, offset, error)) return false;\n \n     const std::string strBind = str.substr(offset);\n     CService addrBind;\n@@ -104,11 +117,11 @@ bool NetWhitebindPermissions::TryParse(const std::string& str, NetWhitebindPermi\n     return true;\n }\n \n-bool NetWhitelistPermissions::TryParse(const std::string& str, NetWhitelistPermissions& output, bilingual_str& error)\n+bool NetWhitelistPermissions::TryParse(const std::string& str, NetWhitelistPermissions& output, ConnectionDirection& output_connection_direction, bilingual_str& error)\n {\n     NetPermissionFlags flags;\n     size_t offset;\n-    if (!TryParsePermissionFlags(str, flags, offset, error)) return false;\n+    if (!TryParsePermissionFlags(str, flags, &output_connection_direction, offset, error)) return false;\n \n     const std::string net = str.substr(offset);\n     CSubNet subnet;"
      },
      {
        "sha": "d22aac8efc7c16e70fe596a60a42563075efb52c",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81622ba1229984872ecb2c74db55e9901813150f/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81622ba1229984872ecb2c74db55e9901813150f/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=81622ba1229984872ecb2c74db55e9901813150f",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <netaddress.h>\n+#include <netbase.h>\n \n #include <string>\n #include <type_traits>\n@@ -81,7 +82,7 @@ class NetWhitebindPermissions : public NetPermissions\n class NetWhitelistPermissions : public NetPermissions\n {\n public:\n-    static bool TryParse(const std::string& str, NetWhitelistPermissions& output, bilingual_str& error);\n+    static bool TryParse(const std::string& str, NetWhitelistPermissions& output, ConnectionDirection& output_connection_direction, bilingual_str& error);\n     CSubNet m_subnet;\n };\n "
      },
      {
        "sha": "bfd06add138e7d3a4e1ecd77f2483c57c0be55ec",
        "filename": "src/test/fuzz/net_permissions.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81622ba1229984872ecb2c74db55e9901813150f/src/test/fuzz/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81622ba1229984872ecb2c74db55e9901813150f/src/test/fuzz/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net_permissions.cpp?ref=81622ba1229984872ecb2c74db55e9901813150f",
        "patch": "@@ -31,7 +31,8 @@ FUZZ_TARGET(net_permissions)\n \n     NetWhitelistPermissions net_whitelist_permissions;\n     bilingual_str error_net_whitelist_permissions;\n-    if (NetWhitelistPermissions::TryParse(s, net_whitelist_permissions, error_net_whitelist_permissions)) {\n+    ConnectionDirection connection_direction;\n+    if (NetWhitelistPermissions::TryParse(s, net_whitelist_permissions, connection_direction, error_net_whitelist_permissions)) {\n         (void)NetPermissions::ToStrings(net_whitelist_permissions.m_flags);\n         (void)NetPermissions::AddFlag(net_whitelist_permissions.m_flags, net_permission_flags);\n         assert(NetPermissions::HasFlag(net_whitelist_permissions.m_flags, net_permission_flags));"
      },
      {
        "sha": "ab03fb31e6450606d95bcac4947ec93c6127213e",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81622ba1229984872ecb2c74db55e9901813150f/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81622ba1229984872ecb2c74db55e9901813150f/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=81622ba1229984872ecb2c74db55e9901813150f",
        "patch": "@@ -356,6 +356,7 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     bilingual_str error;\n     NetWhitebindPermissions whitebindPermissions;\n     NetWhitelistPermissions whitelistPermissions;\n+    ConnectionDirection connection_direction;\n \n     // Detect invalid white bind\n     BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"\", whitebindPermissions, error));\n@@ -430,19 +431,25 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     BOOST_CHECK(error.original.find(\"Invalid P2P permission\") != std::string::npos);\n \n     // Check netmask error\n-    BOOST_CHECK(!NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban@1.2.3.4:32\", whitelistPermissions, error));\n+    BOOST_CHECK(!NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban@1.2.3.4:32\", whitelistPermissions, connection_direction, error));\n     BOOST_CHECK(error.original.find(\"Invalid netmask specified in -whitelist\") != std::string::npos);\n \n     // Happy path for whitelist parsing\n-    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"noban@1.2.3.4\", whitelistPermissions, error));\n+    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"noban@1.2.3.4\", whitelistPermissions, connection_direction, error));\n     BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, NetPermissionFlags::NoBan);\n     BOOST_CHECK(NetPermissions::HasFlag(whitelistPermissions.m_flags, NetPermissionFlags::NoBan));\n \n-    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay@1.2.3.4/32\", whitelistPermissions, error));\n+    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay@1.2.3.4/32\", whitelistPermissions, connection_direction, error));\n     BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, NetPermissionFlags::BloomFilter | NetPermissionFlags::ForceRelay | NetPermissionFlags::NoBan | NetPermissionFlags::Relay);\n     BOOST_CHECK(error.empty());\n     BOOST_CHECK_EQUAL(whitelistPermissions.m_subnet.ToString(), \"1.2.3.4/32\");\n-    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay,mempool@1.2.3.4/32\", whitelistPermissions, error));\n+    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay,mempool@1.2.3.4/32\", whitelistPermissions, connection_direction, error));\n+    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"in,relay@1.2.3.4\", whitelistPermissions, connection_direction, error));\n+    BOOST_CHECK_EQUAL(connection_direction, ConnectionDirection::In);\n+    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"out,bloom@1.2.3.4\", whitelistPermissions, connection_direction, error));\n+    BOOST_CHECK_EQUAL(connection_direction, ConnectionDirection::Out);\n+    BOOST_CHECK(NetWhitelistPermissions::TryParse(\"in,out,bloom@1.2.3.4\", whitelistPermissions, connection_direction, error));\n+    BOOST_CHECK_EQUAL(connection_direction, ConnectionDirection::Both);\n \n     const auto strings = NetPermissions::ToStrings(NetPermissionFlags::All);\n     BOOST_CHECK_EQUAL(strings.size(), 7U);"
      }
    ]
  }
]