[
  {
    "sha": "fb8a8cf2e610920e9eee61c19ed6080af064bb43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjhhOGNmMmU2MTA5MjBlOWVlZTYxYzE5ZWQ2MDgwYWYwNjRiYjQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-29T17:43:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-31T08:48:32Z"
      },
      "message": "rpc: Register calls where they are defined\n\nSplit out methods to every module, apart from 'help' and 'stop' which\nare implemented in rpcserver.cpp itself.\n\n- This makes it easier to add or remove RPC commands - no longer everything that includes\n    rpcserver.h has to be rebuilt when there's a change there.\n- Cleans up `rpc/server.h` by getting rid of the huge cluttered list of function definitions.\n- Removes most of the bitcoin-specific code from rpcserver.cpp and .h.\n\nContinues #7307 for the non-wallet.",
      "tree": {
        "sha": "982b45be4ded75a296f459b78b38b38ccfe0594a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/982b45be4ded75a296f459b78b38b38ccfe0594a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb8a8cf2e610920e9eee61c19ed6080af064bb43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8a8cf2e610920e9eee61c19ed6080af064bb43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb8a8cf2e610920e9eee61c19ed6080af064bb43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb8a8cf2e610920e9eee61c19ed6080af064bb43/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5131005e5b26d12b5b3f79c1c3f8ee08172fc386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5131005e5b26d12b5b3f79c1c3f8ee08172fc386",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5131005e5b26d12b5b3f79c1c3f8ee08172fc386"
      }
    ],
    "stats": {
      "total": 302,
      "additions": 165,
      "deletions": 137
    },
    "files": [
      {
        "sha": "1e54512cbddc1fceab15469a1e634473404d83a2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -130,6 +130,7 @@ BITCOIN_CORE_H = \\\n   rpc/client.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n+  rpc/register.h \\\n   scheduler.h \\\n   script/sigcache.h \\\n   script/sign.h \\"
      },
      {
        "sha": "0c371b288a5a3e708b7f335c0f0c930558039624",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -24,6 +24,7 @@\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"rpc/server.h\"\n+#include \"rpc/register.h\"\n #include \"script/standard.h\"\n #include \"script/sigcache.h\"\n #include \"scheduler.h\"\n@@ -913,10 +914,11 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         fPruneMode = true;\n     }\n \n+    RegisterAllCoreRPCCommands(tableRPC);\n #ifdef ENABLE_WALLET\n     bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n     if (!fDisableWallet)\n-        walletRegisterRPCCommands();\n+        RegisterWalletRPCCommands(tableRPC);\n #endif\n \n     nConnectTimeout = GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);"
      },
      {
        "sha": "2dff8d7daddfcf2f2481b86ea11454ad8e88c687",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -273,6 +273,9 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+// A bit of a hack - dependency on a function defined in rpc/blockchain.cpp\n+UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n+\n static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))"
      },
      {
        "sha": "b947609b1a1b7182095ce69fabb63c77340b4e57",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -911,3 +911,31 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n \n     return NullUniValue;\n }\n+\n+static const CRPCCommand commands[] =\n+{ //  category              name                      actor (function)         okSafeMode\n+  //  --------------------- ------------------------  -----------------------  ----------\n+    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true  },\n+    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true  },\n+    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true  },\n+    { \"blockchain\",         \"getblock\",               &getblock,               true  },\n+    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true  },\n+    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true  },\n+    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true  },\n+    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true  },\n+    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true  },\n+    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true  },\n+    { \"blockchain\",         \"gettxout\",               &gettxout,               true  },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true  },\n+    { \"blockchain\",         \"verifychain\",            &verifychain,            true  },\n+\n+    /* Not shown in help */\n+    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n+    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },\n+};\n+\n+void RegisterBlockchainRPCCommands(CRPCTable &tableRPC)\n+{\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        tableRPC.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+}"
      },
      {
        "sha": "b63ee2288918b33e9bfb88775027128293031089",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -781,3 +781,27 @@ UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n+\n+static const CRPCCommand commands[] =\n+{ //  category              name                      actor (function)         okSafeMode\n+  //  --------------------- ------------------------  -----------------------  ----------\n+    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true  },\n+    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true  },\n+    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true  },\n+    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true  },\n+    { \"mining\",             \"submitblock\",            &submitblock,            true  },\n+\n+    { \"generating\",         \"generate\",               &generate,               true  },\n+    { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true  },\n+\n+    { \"util\",               \"estimatefee\",            &estimatefee,            true  },\n+    { \"util\",               \"estimatepriority\",       &estimatepriority,       true  },\n+    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true  },\n+    { \"util\",               \"estimatesmartpriority\",  &estimatesmartpriority,  true  },\n+};\n+\n+void RegisterMiningRPCCommands(CRPCTable &tableRPC)\n+{\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        tableRPC.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+}"
      },
      {
        "sha": "e8a099b4452c4f4041c990eafe4070ec1884690c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -396,3 +396,21 @@ UniValue setmocktime(const UniValue& params, bool fHelp)\n \n     return NullUniValue;\n }\n+\n+static const CRPCCommand commands[] =\n+{ //  category              name                      actor (function)         okSafeMode\n+  //  --------------------- ------------------------  -----------------------  ----------\n+    { \"control\",            \"getinfo\",                &getinfo,                true  }, /* uses wallet if enabled */\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\n+    { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n+    { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n+\n+    /* Not shown in help */\n+    { \"hidden\",             \"setmocktime\",            &setmocktime,            true  },\n+};\n+\n+void RegisterMiscRPCCommands(CRPCTable &tableRPC)\n+{\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        tableRPC.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+}"
      },
      {
        "sha": "017cd6ca3218789b3a74ad67c72480773416d007",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -626,3 +626,25 @@ UniValue clearbanned(const UniValue& params, bool fHelp)\n \n     return NullUniValue;\n }\n+\n+static const CRPCCommand commands[] =\n+{ //  category              name                      actor (function)         okSafeMode\n+  //  --------------------- ------------------------  -----------------------  ----------\n+    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true  },\n+    { \"network\",            \"ping\",                   &ping,                   true  },\n+    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true  },\n+    { \"network\",            \"addnode\",                &addnode,                true  },\n+    { \"network\",            \"disconnectnode\",         &disconnectnode,         true  },\n+    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true  },\n+    { \"network\",            \"getnettotals\",           &getnettotals,           true  },\n+    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true  },\n+    { \"network\",            \"setban\",                 &setban,                 true  },\n+    { \"network\",            \"listbanned\",             &listbanned,             true  },\n+    { \"network\",            \"clearbanned\",            &clearbanned,            true  },\n+};\n+\n+void RegisterNetRPCCommands(CRPCTable &tableRPC)\n+{\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        tableRPC.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+}"
      },
      {
        "sha": "de8cd68f662677c7f6c44626dbc36876fb749502",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -841,3 +841,23 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n \n     return hashTx.GetHex();\n }\n+\n+static const CRPCCommand commands[] =\n+{ //  category              name                      actor (function)         okSafeMode\n+  //  --------------------- ------------------------  -----------------------  ----------\n+    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n+    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true  },\n+    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true  },\n+    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true  },\n+    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n+\n+    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          true  },\n+    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       true  },\n+};\n+\n+void RegisterRawTransactionRPCCommands(CRPCTable &tableRPC)\n+{\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        tableRPC.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+}"
      },
      {
        "sha": "01aa58a25d850d265df8c688b8e1e3c753d03131",
        "filename": "src/rpc/register.h",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/register.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/register.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/register.h?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -0,0 +1,32 @@\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPCREGISTER_H\n+#define BITCOIN_RPCREGISTER_H\n+\n+/** These are in one header file to avoid creating tons of single-function\n+ * headers for everything under src/rpc/ */\n+class CRPCTable;\n+\n+/** Register block chain RPC commands */\n+void RegisterBlockchainRPCCommands(CRPCTable &tableRPC);\n+/** Register P2P networking RPC commands */\n+void RegisterNetRPCCommands(CRPCTable &tableRPC);\n+/** Register miscellaneous RPC commands */\n+void RegisterMiscRPCCommands(CRPCTable &tableRPC);\n+/** Register mining RPC commands */\n+void RegisterMiningRPCCommands(CRPCTable &tableRPC);\n+/** Register raw transaction RPC commands */\n+void RegisterRawTransactionRPCCommands(CRPCTable &tableRPC);\n+\n+static inline void RegisterAllCoreRPCCommands(CRPCTable &tableRPC)\n+{\n+    RegisterBlockchainRPCCommands(tableRPC);\n+    RegisterNetRPCCommands(tableRPC);\n+    RegisterMiscRPCCommands(tableRPC);\n+    RegisterMiningRPCCommands(tableRPC);\n+    RegisterRawTransactionRPCCommands(tableRPC);\n+}\n+\n+#endif"
      },
      {
        "sha": "8326fe14d215063e43bdf985aeccd2891e423cda",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 64,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -256,72 +256,8 @@ static const CRPCCommand vRPCCommands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n     /* Overall control/query calls */\n-    { \"control\",            \"getinfo\",                &getinfo,                true  }, /* uses wallet if enabled */\n     { \"control\",            \"help\",                   &help,                   true  },\n     { \"control\",            \"stop\",                   &stop,                   true  },\n-\n-    /* P2P networking */\n-    { \"network\",            \"getnetworkinfo\",         &getnetworkinfo,         true  },\n-    { \"network\",            \"addnode\",                &addnode,                true  },\n-    { \"network\",            \"disconnectnode\",         &disconnectnode,         true  },\n-    { \"network\",            \"getaddednodeinfo\",       &getaddednodeinfo,       true  },\n-    { \"network\",            \"getconnectioncount\",     &getconnectioncount,     true  },\n-    { \"network\",            \"getnettotals\",           &getnettotals,           true  },\n-    { \"network\",            \"getpeerinfo\",            &getpeerinfo,            true  },\n-    { \"network\",            \"ping\",                   &ping,                   true  },\n-    { \"network\",            \"setban\",                 &setban,                 true  },\n-    { \"network\",            \"listbanned\",             &listbanned,             true  },\n-    { \"network\",            \"clearbanned\",            &clearbanned,            true  },\n-\n-    /* Block chain and UTXO */\n-    { \"blockchain\",         \"getblockchaininfo\",      &getblockchaininfo,      true  },\n-    { \"blockchain\",         \"getbestblockhash\",       &getbestblockhash,       true  },\n-    { \"blockchain\",         \"getblockcount\",          &getblockcount,          true  },\n-    { \"blockchain\",         \"getblock\",               &getblock,               true  },\n-    { \"blockchain\",         \"getblockhash\",           &getblockhash,           true  },\n-    { \"blockchain\",         \"getblockheader\",         &getblockheader,         true  },\n-    { \"blockchain\",         \"getchaintips\",           &getchaintips,           true  },\n-    { \"blockchain\",         \"getdifficulty\",          &getdifficulty,          true  },\n-    { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true  },\n-    { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true  },\n-    { \"blockchain\",         \"gettxout\",               &gettxout,               true  },\n-    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          true  },\n-    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       true  },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true  },\n-    { \"blockchain\",         \"verifychain\",            &verifychain,            true  },\n-\n-    /* Mining */\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true  },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          true  },\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       true  },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  true  },\n-    { \"mining\",             \"submitblock\",            &submitblock,            true  },\n-\n-    /* Coin generation */\n-    { \"generating\",         \"generate\",               &generate,               true  },\n-    { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true  },\n-\n-    /* Raw transactions */\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true  },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true  },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           true  },\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n-\n-    /* Utility functions */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\n-    { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n-    { \"util\",               \"estimatefee\",            &estimatefee,            true  },\n-    { \"util\",               \"estimatepriority\",       &estimatepriority,       true  },\n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       true  },\n-    { \"util\",               \"estimatesmartpriority\",  &estimatesmartpriority,  true  },\n-\n-    /* Not shown in help */\n-    { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n-    { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },\n-    { \"hidden\",             \"setmocktime\",            &setmocktime,            true  },\n };\n \n CRPCTable::CRPCTable()"
      },
      {
        "sha": "a7ed710ce60ad77cc354b5da33e4aecefb6f2740",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 0,
        "deletions": 59,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -181,65 +181,6 @@ extern std::string HelpExampleRpc(const std::string& methodname, const std::stri\n \n extern void EnsureWalletIsUnlocked();\n \n-extern UniValue getconnectioncount(const UniValue& params, bool fHelp); // in rpc/net.cpp\n-extern UniValue getpeerinfo(const UniValue& params, bool fHelp);\n-extern UniValue ping(const UniValue& params, bool fHelp);\n-extern UniValue addnode(const UniValue& params, bool fHelp);\n-extern UniValue disconnectnode(const UniValue& params, bool fHelp);\n-extern UniValue getaddednodeinfo(const UniValue& params, bool fHelp);\n-extern UniValue getnettotals(const UniValue& params, bool fHelp);\n-extern UniValue setban(const UniValue& params, bool fHelp);\n-extern UniValue listbanned(const UniValue& params, bool fHelp);\n-extern UniValue clearbanned(const UniValue& params, bool fHelp);\n-\n-extern UniValue generate(const UniValue& params, bool fHelp);\n-extern UniValue generatetoaddress(const UniValue& params, bool fHelp);\n-extern UniValue getnetworkhashps(const UniValue& params, bool fHelp);\n-extern UniValue getmininginfo(const UniValue& params, bool fHelp);\n-extern UniValue prioritisetransaction(const UniValue& params, bool fHelp);\n-extern UniValue getblocktemplate(const UniValue& params, bool fHelp);\n-extern UniValue submitblock(const UniValue& params, bool fHelp);\n-extern UniValue estimatefee(const UniValue& params, bool fHelp);\n-extern UniValue estimatepriority(const UniValue& params, bool fHelp);\n-extern UniValue estimatesmartfee(const UniValue& params, bool fHelp);\n-extern UniValue estimatesmartpriority(const UniValue& params, bool fHelp);\n-\n-extern UniValue verifymessage(const UniValue& params, bool fHelp);\n-extern UniValue createmultisig(const UniValue& params, bool fHelp);\n-extern UniValue validateaddress(const UniValue& params, bool fHelp);\n-extern UniValue getinfo(const UniValue& params, bool fHelp);\n-extern UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n-extern UniValue getnetworkinfo(const UniValue& params, bool fHelp);\n-extern UniValue setmocktime(const UniValue& params, bool fHelp);\n-\n-extern UniValue getrawtransaction(const UniValue& params, bool fHelp); // in rpc/rawtransaction.cpp\n-extern UniValue listunspent(const UniValue& params, bool fHelp);\n-extern UniValue lockunspent(const UniValue& params, bool fHelp);\n-extern UniValue listlockunspent(const UniValue& params, bool fHelp);\n-extern UniValue createrawtransaction(const UniValue& params, bool fHelp);\n-extern UniValue decoderawtransaction(const UniValue& params, bool fHelp);\n-extern UniValue decodescript(const UniValue& params, bool fHelp);\n-extern UniValue signrawtransaction(const UniValue& params, bool fHelp);\n-extern UniValue sendrawtransaction(const UniValue& params, bool fHelp);\n-extern UniValue gettxoutproof(const UniValue& params, bool fHelp);\n-extern UniValue verifytxoutproof(const UniValue& params, bool fHelp);\n-\n-extern UniValue getblockcount(const UniValue& params, bool fHelp); // in rpc/blockchain.cpp\n-extern UniValue getbestblockhash(const UniValue& params, bool fHelp);\n-extern UniValue getdifficulty(const UniValue& params, bool fHelp);\n-extern UniValue settxfee(const UniValue& params, bool fHelp);\n-extern UniValue getmempoolinfo(const UniValue& params, bool fHelp);\n-extern UniValue getrawmempool(const UniValue& params, bool fHelp);\n-extern UniValue getblockhash(const UniValue& params, bool fHelp);\n-extern UniValue getblockheader(const UniValue& params, bool fHelp);\n-extern UniValue getblock(const UniValue& params, bool fHelp);\n-extern UniValue gettxoutsetinfo(const UniValue& params, bool fHelp);\n-extern UniValue gettxout(const UniValue& params, bool fHelp);\n-extern UniValue verifychain(const UniValue& params, bool fHelp);\n-extern UniValue getchaintips(const UniValue& params, bool fHelp);\n-extern UniValue invalidateblock(const UniValue& params, bool fHelp);\n-extern UniValue reconsiderblock(const UniValue& params, bool fHelp);\n-\n bool StartRPC();\n void InterruptRPC();\n void StopRPC();"
      },
      {
        "sha": "1976ee2cb61f1122771e46ffd5cfe9e75a79bfe9",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -36,7 +36,7 @@ UniValue CallRPC(string args)\n     string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n     UniValue params = RPCConvertValues(strMethod, vArgs);\n-\n+    BOOST_CHECK(tableRPC[strMethod]);\n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {\n         UniValue result = (*method)(params, false);"
      },
      {
        "sha": "1f2e034b01a127d8cfe876844a1c614716b1dee1",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -17,6 +17,8 @@\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n+#include \"rpc/server.h\"\n+#include \"rpc/register.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n@@ -53,9 +55,12 @@ BasicTestingSetup::~BasicTestingSetup()\n TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n     const CChainParams& chainparams = Params();\n+        // Ideally we'd move all the RPC tests to the functional testing framework\n+        // instead of unit tests, but for now we need these here.\n+        RegisterAllCoreRPCCommands(tableRPC);\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n-        walletRegisterRPCCommands();\n+        RegisterWalletRPCCommands(tableRPC);\n #endif\n         ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));"
      },
      {
        "sha": "61c9846e114b3616801b78ba74398ab48f50ac0d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -2509,7 +2509,7 @@ extern UniValue importwallet(const UniValue& params, bool fHelp);\n extern UniValue importprunedfunds(const UniValue& params, bool fHelp);\n extern UniValue removeprunedfunds(const UniValue& params, bool fHelp);\n \n-const CRPCCommand vWalletRPCCommands[] =\n+static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n     //  --------------------- ------------------------    -----------------------    ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false },\n@@ -2559,14 +2559,8 @@ const CRPCCommand vWalletRPCCommands[] =\n     { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true  },\n };\n \n-void walletRegisterRPCCommands()\n+void RegisterWalletRPCCommands(CRPCTable &tableRPC)\n {\n-    unsigned int vcidx;\n-    for (vcidx = 0; vcidx < ARRAYLEN(vWalletRPCCommands); vcidx++)\n-    {\n-        const CRPCCommand *pcmd;\n-\n-        pcmd = &vWalletRPCCommands[vcidx];\n-        tableRPC.appendCommand(pcmd->name, pcmd);\n-    }\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        tableRPC.appendCommand(commands[vcidx].name, &commands[vcidx]);\n }"
      },
      {
        "sha": "a5de7e2de1456312bb61c9594fb9bd609cfa4b50",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb8a8cf2e610920e9eee61c19ed6080af064bb43/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=fb8a8cf2e610920e9eee61c19ed6080af064bb43",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_WALLET_RPCWALLET_H\n #define BITCOIN_WALLET_RPCWALLET_H\n \n-void walletRegisterRPCCommands();\n+class CRPCTable;\n+\n+void RegisterWalletRPCCommands(CRPCTable &tableRPC);\n \n #endif //BITCOIN_WALLET_RPCWALLET_H"
      }
    ]
  }
]