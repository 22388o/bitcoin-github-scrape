[
  {
    "sha": "9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzVhZjU4ZDUxY2VhN2QwY2YyYTU5OGE5OTc5ZWViYTEwM2IyM2Zm",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-09-24T14:59:17Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-09-25T16:14:52Z"
      },
      "message": "Consolidate redundant implementations of ParseHashStr\n\nThis change:\n* adds a length check to ParseHashStr, appropriate given its use to populate\n  a 256-bit number from a hex str.\n* allows the caller to handle the failure, which allows for the more\n  appropriate JSONRPCError on failure in prioritisetransaction rpc",
      "tree": {
        "sha": "8b75bcda130319567c94b2e37535f81d911b4d2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b75bcda130319567c94b2e37535f81d911b4d2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAluqXv0ACgkQTYykuhgE\nCQYO7w/9HfxVldzEQLS4Y2utn2vCl0nAgKl65s/gFZpKhci5NVmXLe+NcpHixMeJ\nxnILlo7Yx2IUWNtZ2ryBB+ySS1yqpzsPwftatrEa8ddQysbh0lginZzjxxJfNB+E\nti6Ew/VgGw9wXPreOQ8voet8wbPO2CLJVW1B+aKY5p5QQZ/k5/vb+0IaISF7tU13\nC++dTXunO7PDC3+oD4tphBY++4mlqv/63Wt97VeOzis5U8GKB1B3mROM38NfvuCW\noenxMpx3OCTrG9EaPe6udbiZ+6ge7zAZY6J+SwXJkYivoDS8r8LXFVJTeRs0ayb1\nA86tAE6Sy2/etSxA91Kfzfwe7UytBUq5OPJlzL0a89YKwrkZ34LCMlrbio2fuP4p\n6yfQFFMDAe+bkfk4C/7l3zH2ng7Ue4Viv/ENF3nMWNY+HoTjCaGIZuwvTnBzViIX\nPZdgxxD0qZPUeuVgDW8AAStX0iKTouP6SzAwhZaO9PF8dOPKzeuxjBinX4ZAhELW\nf+YGet3p0oD6PC1SbTKUuzClWt5TEDgD0ryJP1XibWVpcm4jki9RxyDfqYnKiwpq\nimo0IO+MIu3rYmaPGSYEeFspJ4emAQBDI/yA+jQQXt9xOzk9V/WfDyZOYRoQaja0\nWRm/JTRrr5n+QWaOQhLoycvX7KGlWAQPB7IAtMyfkZ3usc+Wnb8=\n=XXGp\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b75bcda130319567c94b2e37535f81d911b4d2d\nparent 990fc0de1afdfac8b711f39d9dbbab0c5f88a4c5\nauthor Ben Woosley <ben.woosley@gmail.com> 1537801157 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1537892092 -0700\n\nConsolidate redundant implementations of ParseHashStr\n\nThis change:\n* adds a length check to ParseHashStr, appropriate given its use to populate\n  a 256-bit number from a hex str.\n* allows the caller to handle the failure, which allows for the more\n  appropriate JSONRPCError on failure in prioritisetransaction rpc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "990fc0de1afdfac8b711f39d9dbbab0c5f88a4c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/990fc0de1afdfac8b711f39d9dbbab0c5f88a4c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/990fc0de1afdfac8b711f39d9dbbab0c5f88a4c5"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 87,
      "deletions": 22
    },
    "files": [
      {
        "sha": "a3fcb87675c525c0e52240990289b5a62abc37a9",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
        "patch": "@@ -240,10 +240,10 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n         throw std::runtime_error(\"TX input missing separator\");\n \n     // extract and validate TXID\n-    std::string strTxid = vStrInputParts[0];\n-    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+    uint256 txid;\n+    if (!ParseHashStr(vStrInputParts[0], txid)) {\n         throw std::runtime_error(\"invalid TX input txid\");\n-    uint256 txid(uint256S(strTxid));\n+    }\n \n     static const unsigned int minTxOutSz = 9;\n     static const unsigned int maxVout = MAX_BLOCK_WEIGHT / (WITNESS_SCALE_FACTOR * minTxOutSz);\n@@ -590,7 +590,10 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             if (!prevOut.checkObject(types))\n                 throw std::runtime_error(\"prevtxs internal object typecheck fail\");\n \n-            uint256 txid = ParseHashStr(prevOut[\"txid\"].get_str(), \"txid\");\n+            uint256 txid;\n+            if (!ParseHashStr(prevOut[\"txid\"].get_str(), txid)) {\n+                throw std::runtime_error(\"txid must be hexadecimal string (not '\" + prevOut[\"txid\"].get_str() + \"')\");\n+            }\n \n             const int nOut = prevOut[\"vout\"].get_int();\n             if (nOut < 0)"
      },
      {
        "sha": "2c3b64d81e66094fba0a59dd51b6e7ae5b218e44",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
        "patch": "@@ -25,7 +25,16 @@ std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDeco\n bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n-uint256 ParseHashStr(const std::string&, const std::string& strName);\n+\n+/**\n+ * Parse a hex string into 256 bits\n+ * @param[in] strHex a hex-formatted, 64-character string\n+ * @param[out] result the result of the parasing\n+ * @returns true if successful, false if not\n+ *\n+ * @see ParseHashV for an RPC-oriented version of this\n+ */\n+bool ParseHashStr(const std::string& strHex, uint256& result);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error);\n int ParseSighashString(const UniValue& sighash);"
      },
      {
        "sha": "301f99bc1c375544e70c65ae4a7060b7b2441a98",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
        "patch": "@@ -193,14 +193,13 @@ bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx,\n     return true;\n }\n \n-uint256 ParseHashStr(const std::string& strHex, const std::string& strName)\n+bool ParseHashStr(const std::string& strHex, uint256& result)\n {\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n+    if ((strHex.size() != 64) || !IsHex(strHex))\n+        return false;\n \n-    uint256 result;\n     result.SetHex(strHex);\n-    return result;\n+    return true;\n }\n \n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)"
      },
      {
        "sha": "1850c0b7a6bfeb1a5ea8c75a3e547cf3de6b8d53",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
        "patch": "@@ -105,15 +105,6 @@ static std::string AvailableDataFormatsString()\n     return formats;\n }\n \n-static bool ParseHashStr(const std::string& strReq, uint256& v)\n-{\n-    if (!IsHex(strReq) || (strReq.size() != 64))\n-        return false;\n-\n-    v.SetHex(strReq);\n-    return true;\n-}\n-\n static bool CheckWarmup(HTTPRequest* req)\n {\n     std::string statusmessage;"
      },
      {
        "sha": "4941ebd483f9490d748596d8d631691c5b166b4b",
        "filename": "src/test/blockfilter_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/test/blockfilter_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/src/test/blockfilter_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_tests.cpp?ref=9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
        "patch": "@@ -114,7 +114,8 @@ BOOST_AUTO_TEST_CASE(blockfilters_json_test)\n \n         unsigned int pos = 0;\n         /*int block_height =*/ test[pos++].get_int();\n-        /*uint256 block_hash =*/ ParseHashStr(test[pos++].get_str(), \"block_hash\");\n+        uint256 block_hash;\n+        BOOST_CHECK(ParseHashStr(test[pos++].get_str(), block_hash));\n \n         CBlock block;\n         BOOST_REQUIRE(DecodeHexBlk(block, test[pos++].get_str()));\n@@ -129,9 +130,11 @@ BOOST_AUTO_TEST_CASE(blockfilters_json_test)\n             tx_undo.vprevout.emplace_back(txout, 0, false);\n         }\n \n-        uint256 prev_filter_header_basic = ParseHashStr(test[pos++].get_str(), \"prev_filter_header_basic\");\n+        uint256 prev_filter_header_basic;\n+        BOOST_CHECK(ParseHashStr(test[pos++].get_str(), prev_filter_header_basic));\n         std::vector<unsigned char> filter_basic = ParseHex(test[pos++].get_str());\n-        uint256 filter_header_basic = ParseHashStr(test[pos++].get_str(), \"filter_header_basic\");\n+        uint256 filter_header_basic;\n+        BOOST_CHECK(ParseHashStr(test[pos++].get_str(), filter_header_basic));\n \n         BlockFilter computed_filter_basic(BlockFilterType::BASIC, block, block_undo);\n         BOOST_CHECK(computed_filter_basic.GetFilter().GetEncoded() == filter_basic);"
      },
      {
        "sha": "761923a8180ae79f62827eedbf98374996a76a18",
        "filename": "test/util/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/test/util/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c5af58d51cea7d0cf2a598a9979eeba103b23ff/test/util/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/bitcoin-util-test.json?ref=9c5af58d51cea7d0cf2a598a9979eeba103b23ff",
        "patch": "@@ -102,6 +102,30 @@\n     \"error_txt\": \"error: Invalid TX locktime requested\",\n     \"description\": \"Tests the check for invalid locktime value\"\n   },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=Z897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: invalid TX input txid\",\n+    \"description\": \"Tests the check for an invalid txid invalid hex\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6:0\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: invalid TX input txid\",\n+    \"description\": \"Tests the check for an invalid txid valid hex but too short\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f12:0\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: invalid TX input txid\",\n+    \"description\": \"Tests the check for an invalid txid valid hex but too long\"\n+  },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n@@ -280,6 +304,42 @@\n     \"error_txt\": \"error: prevtxs internal object typecheck fail\",\n     \"description\": \"Tests the check for invalid vout index in prevtxs for sign\"\n   },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+      \"in=4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485:0\",\n+      \"set=privatekeys:[\\\"5HpHagT65TZzG1PH3CSu63k8DbpvD8s5ip4nEB3kEsreAnchuDf\\\"]\",\n+      \"set=prevtxs:[{\\\"txid\\\":\\\"Zd49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59412\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n+      \"sign=ALL\",\n+      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: txid must be hexadecimal string (not 'Zd49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59412')\",\n+    \"description\": \"Tests the check for invalid txid due to invalid hex\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+      \"in=4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485:0\",\n+      \"set=privatekeys:[\\\"5HpHagT65TZzG1PH3CSu63k8DbpvD8s5ip4nEB3kEsreAnchuDf\\\"]\",\n+      \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc594\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n+      \"sign=ALL\",\n+      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: txid must be hexadecimal string (not '4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc594')\",\n+    \"description\": \"Tests the check for invalid txid valid hex, but too short\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+      \"in=4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485:0\",\n+      \"set=privatekeys:[\\\"5HpHagT65TZzG1PH3CSu63k8DbpvD8s5ip4nEB3kEsreAnchuDf\\\"]\",\n+      \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc5948512\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n+      \"sign=ALL\",\n+      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: txid must be hexadecimal string (not '4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc5948512')\",\n+    \"description\": \"Tests the check for invalid txid valid hex, but too long\"\n+  },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\", \"outpubkey=0:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397\", \"nversion=1\"],"
      }
    ]
  }
]