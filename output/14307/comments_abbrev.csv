practicalswift,2018-09-24T15:46:24Z,"Concept ACK\n\nThanks for taking on this issue. Closing #14288.",https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424023236,424023236,
DrahtBot,2018-09-24T16:36:48Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #13815 (util: Add [[nodiscard]] to all {Decode,Parse}[...](...) functions returning bool by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424040865,424040865,
Empact,2018-09-24T21:25:07Z,Rebased for #13424,https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424130493,424130493,
Empact,2018-09-24T21:49:59Z,Converted one parse from `uint256S` to `ParseHashStr` in bitcoin-tx. Was the only other place I could find with local validation of 64-char hex inputs.,https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424137504,424137504,
practicalswift,2018-09-24T22:03:21Z,What about adding `NODISCARD` (cherry-pick ca130493faed271bc05a2ad24db98a9cf167d159) to `ParseHashStr` to make sure all future callers check the return value?,https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424140674,424140674,
Empact,2018-09-25T04:56:57Z,"I like `NODISCARD` but am inclined to keep the changes separate for easier review. h/t #13815\nI reverted the change that added new user input to the exception message. Now the log impact should be net 0.",https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424207225,424207225,
Empact,2018-09-25T05:26:55Z,"@MarcoFalke added tests, only two of them fail before this change because of existing checks:\n* Tests the check for invalid txid valid hex, but too short\n* Tests the check for invalid txid valid hex, but too long\n",https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424211498,424211498,
Empact,2018-09-25T16:15:51Z,Switched the condition and added docs.,https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424408039,424408039,
l2a5b1,2018-09-25T16:57:53Z,"re-utACK 9c5af58\n\nThanks for addressing the review comments @Empact!",https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424421700,424421700,
MarcoFalke,2018-09-25T23:40:52Z,utACK 9c5af58d51,https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424536949,424536949,
promag,2018-09-26T22:45:15Z,utACK 9c5af58.,https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424893440,424893440,
practicalswift,2018-09-27T03:46:25Z,utACK 9c5af58d51cea7d0cf2a598a9979eeba103b23ff,https://github.com/bitcoin/bitcoin/pull/14307#issuecomment-424949227,424949227,
MarcoFalke,2018-09-24T15:20:24Z,nit: Could keep the name `strHex` and `result` to minimize the diff?,https://github.com/bitcoin/bitcoin/pull/14307#discussion_r219877773,219877773,src/core_read.cpp
practicalswift,2018-09-24T15:41:46Z,Nit: Redundant parentheses around `strReq.size() != 64` :-),https://github.com/bitcoin/bitcoin/pull/14307#discussion_r219886008,219886008,src/core_read.cpp
practicalswift,2018-09-24T15:43:39Z,"I know this is unchanged from the previous version, but could there be circumstances where this opens up for log file injection? Safer not to echo the input?",https://github.com/bitcoin/bitcoin/pull/14307#discussion_r219886678,219886678,src/bitcoin-tx.cpp
practicalswift,2018-09-24T15:45:47Z,"I know this is unchanged from the previous version, but could there be circumstances where this opens up for log file injection? Safer not to echo the input?",https://github.com/bitcoin/bitcoin/pull/14307#discussion_r219887407,219887407,src/rpc/mining.cpp
practicalswift,2018-09-24T21:49:59Z,Nit: Redundant parentheses around `strHex.size() != 64` :-),https://github.com/bitcoin/bitcoin/pull/14307#discussion_r220000723,220000723,src/core_read.cpp
practicalswift,2018-09-24T21:50:41Z,"I know this is unchanged from the previous version, but could there be circumstances where this opens up for log file injection? Safer not to echo the input?",https://github.com/bitcoin/bitcoin/pull/14307#discussion_r220000865,220000865,src/bitcoin-tx.cpp
Empact,2018-09-25T04:24:28Z,This had been changed so I switched it back.,https://github.com/bitcoin/bitcoin/pull/14307#discussion_r220055199,220055199,src/bitcoin-tx.cpp
Empact,2018-09-25T04:59:03Z,Could go either way but I like explicit precedence to guide the eye.,https://github.com/bitcoin/bitcoin/pull/14307#discussion_r220058714,220058714,src/core_read.cpp
l2a5b1,2018-09-25T11:41:37Z,"Perhaps we can document `bool ParseHashStr(const std::string& strHex, uint256& result)` and specify the pre-condition that the `strHex` argument must be a hexadecimal string with a length of 64 bytes.",https://github.com/bitcoin/bitcoin/pull/14307#discussion_r220157549,220157549,src/core_io.h
l2a5b1,2018-09-25T11:41:59Z,"Perhaps swap the two boolean conditions? If the condition `strHex.size()` is false then the function can return without having to evaluate the condition `IsHex(strHex)`\n\n```c++\nif ((strHex.size() != 64) || !IsHex(strHex)) return false;\n```\n",https://github.com/bitcoin/bitcoin/pull/14307#discussion_r220157639,220157639,src/core_read.cpp
promag,2018-09-25T23:46:32Z,`ParseHashV` could use `ParseHashStr`?,https://github.com/bitcoin/bitcoin/pull/14307#discussion_r220389834,220389834,src/core_io.h
Empact,2018-09-26T22:39:06Z,Happy to do that as a follow-up.,https://github.com/bitcoin/bitcoin/pull/14307#discussion_r220745105,220745105,src/core_io.h
