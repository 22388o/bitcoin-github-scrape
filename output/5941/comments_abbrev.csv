sipa,2015-03-24T11:59:50Z,"Someone should test how long it takes to find peers with this, when DNS seeding and the built-in seeds are disabled. I'm not able to test the next ~3 days or so.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85467980,85467980,
sipa,2015-03-24T13:00:59Z,"This is running on bitcoin.sipa.be, with -DDEBUG_ADDRMAN enabled.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85485701,85485701,
laanwj,2015-03-24T13:54:19Z,"Going to test this.\n\n> Someone should test how long it takes to find peers with this, when DNS seeding and the built-in seeds are disabled.\n\nOK, disabling those.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85504276,85504276,
jgarzik,2015-03-24T13:57:03Z,"Typically, (a) less than 11 seconds if you have a fresh addrman, or (b) sometimes hours or longer, if not.\n\nCurrent code skips DNS seeds & built in seeds automatically, if it manages to connect to some peers within a short amount of time.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85505285,85505285,
sipa,2015-03-24T14:05:08Z,"@jgarzik I mean after this patch. Reason is the bias changes in peer selection. If you have very few tried peers, the new code will likely very actively keep retrying those (as there is a 50% chance to pick a previously tried peer), and there is no bias towards more recently learned addresses anymore. Both probably slow down initial connection, but likely don't have that much impact in a working s",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85508773,85508773,
laanwj,2015-03-24T14:06:06Z,"It instantly found a peer on start:\n\n```\n2015-03-24 13:55:51 init message: Loading addresses...\n2015-03-24 13:55:51 Loaded 14669 addresses from peers.dat  664ms\n...\n2015-03-24 13:55:51 receive version message: /Satoshi:0.9.2/: version 70002, blocks=346129, ...\n```\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85509169,85509169,
gavinandresen,2015-03-24T20:18:53Z,Ran this with -dnsseed=0 and a peers.dat from a bitcoind that I stopped 23 hours ago:\n\n```\n2015-03-24 20:15:18 Loaded 12904 addresses from peers.dat  512ms\n   ...\n2015-03-24 20:15:30 connect() to 93.143.11.182:8333 failed after select(): Connection refused (61)\n2015-03-24 20:16:15 connect() to 85.199.110.252:8333 failed after select(): Connection refused (61)\n2015-03-24 20:16:16 receive ver,https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85676091,85676091,
ghost,2015-03-24T22:21:46Z,"utAck. The paper does not specify a countermeasure ""6"" in Section 7.\n\nWe've still got a bit to go (the symptoms being #5886, #5397, #5352, #5299), but great to see the attention on P2P. Let it remind us that P2P is at the (decentralized) core of Bitcoin Core as much as transactions are; arguably more so.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85717551,85717551,
sipa,2015-03-24T23:01:37Z,21E14: there are further countermeasures listed in the appendix.\n,https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85731182,85731182,
ghost,2015-03-25T00:11:50Z,"It's worth pointing out.\n\nThis may also be a good opportunity to tilt the balance of preprocessor directives vs ""magic"" values, e.g. ADDRMAN_TRIED_BUCKETS_PER_GROUP (2 occurrences) vs 24 \* 60 \* 60 & 60 \* 10.\n\nInterestingly, P2P is not very well reflected in the ongoing libification. As it stands, libbitcoin_server is its closest anchor, but the two are arguably distinct. A large subset of t",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-85746646,85746646,
fanquake,2015-03-26T03:35:45Z,"Running with -dnsseed=0\n\n```\n2015-03-26 03:21:39 init message: Loading addresses...\n2015-03-26 03:21:39 Loaded 12984 addresses from peers.dat  94ms\n2015-03-26 03:21:39 DNS seeding disabled\n2015-03-26 03:21:40 connect() to 199.167.100.226:8333 failed after select(): Connection refused (61)\n2015-03-26 03:21:52 receive version message: /Satoshi:0.9.3/: version 70002, blocks=349268, us=..., pee",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-86325153,86325153,
sipa,2015-03-27T18:41:14Z,"I tried a few times with -dnsseed=0 and a copy of bitcoin.sipa.be's peers.dat, and always had an initial connection between 15 and 30 seconds later.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-87048700,87048700,
laanwj,2015-03-30T14:44:16Z,Works for me - tested ACK\n,https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-87706705,87706705,
gmaxwell,2015-03-30T16:31:56Z,ACK.\n,https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-87743151,87743151,
jgarzik,2015-03-30T16:38:22Z,"ut ACK\n\nMy only nit:  I wonder if we could replace that '%' with a shift.  Could be, if the powers [of two] are aligned.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-87744467,87744467,
sipa,2015-03-30T17:05:42Z,"At -O2, gcc does strength reduction which should turns the modulo\noperations into bitmasking.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-87752729,87752729,
jgarzik,2015-03-30T17:22:13Z,"@sipa should, agreed.  With our 256 bit C++ implemented integer type, I wonder if that is true?\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-87759034,87759034,
sipa,2015-03-30T17:37:03Z,"There are no uint256's involved in the modulus operations. Hashing is\nperformed, then the lower 64 bits are extracted, and then a modulus is\napplied.\n\nBesides, uint256 does not even offer arithmetic operations anymore. It's\njust an encapsulated 256-size bit vector.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-87766117,87766117,
laanwj,2015-04-01T14:42:48Z,"Cherry-picked to 0.10 as aa587d4 0c6f334 214154e 2218d4b cf0218f b788994\nSome conflicts encountered with uint256 usage, but was easy to backport.\n",https://github.com/bitcoin/bitcoin/pull/5941#issuecomment-88509866,88509866,
