laanwj,2015-08-31T09:32:14Z,"Nice work. \n\nHowever I wonder in which cases does this provide more security than just rpcuser+rpcpassword or using a generated cookie?\n\nThe usual argument for public/private key authentication (in e.g. ssh) is that it allows using a single private key to authenticate to multiple servers, without the servers possessing enough information to authenticate to other servers. But I'm not convinced ",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136314946,136314946,
jonasschnelli,2015-08-31T09:43:56Z,"@laanwj: Made the same thoughts. I see use-cases in landscapes where bitcoind and the RPC client app do not lay on the same machine and sharing the secrets (even if the network is trusted) is unwanted.\n\nRight, it does not prevent from MiTM. It could be achieved easily by including a only increasing nonce in the request/signature. But this would break sharing the same user (we only support one) b",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136317148,136317148,
jonasschnelli,2015-08-31T09:53:29Z,But right. I'm also not sure if this would make sense to have in master. I just have the feeling that users will expose the RPC auth to the public (even if they add a reverse proxy).\n,https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136318727,136318727,
dcousens,2015-08-31T12:23:03Z,"Personally, [weak] concept NACK.\nI'd prefer the master RPC to be kept as simple as possible. \n\n> I see use-cases in landscapes where bitcoind and the RPC client app do not lay on the same machine and sharing the secrets (even if the network is trusted) is unwanted.\n\nIs that common though?\n\n> ... users will expose the RPC auth to the public ...\n\nThis is my concern too.\n",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136357381,136357381,
jgarzik,2015-08-31T13:18:14Z,"+1 for better auth.  I've always wanted better auth.\n\n+1 for auth that does not require sending a password over the wire (even if we recommend localhost etc.)\n\nMy idea was to add something standards supported - HTTP-Digest authentication with an already-specified digest, rather than inventing my own.\n\nThat said, this work is obviously better than Basic auth.\n",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136368556,136368556,
laanwj,2015-08-31T13:49:55Z,"I agree with @dcousens that we should keep RPC as simple as possible. Also: Adding any advanced authentication features makes it easier for users to expose RPC more widely. If you want to argue for that we should also keep SSL support, as without SSL ""digest authentication"" adds only very little, e.g. it's vulnerable to MiTM attacks (it's also based on MD5 which is basically broken...).\n",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136376976,136376976,
jgarzik,2015-08-31T13:58:05Z,"As simple as possible is removing RPC authentication.  If the argument is complexity and ""you shouldn't do that"" then remove all RPC auth and let the connection layer handle it.\n\nOtherwise merging a better option is obviously an improvement over choosing to keep a poor and insecure auth method.\n",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136378802,136378802,
jonasschnelli,2015-08-31T14:14:31Z,"Even if one uses `stunnel` (or a different encryption layer), i think storing a plaintext password in a config file on the remote system (where bitcoind is running) is not a way that i personally would support for a security critical application like bitcoind.\n\nOn modern operating systems with high adjustable permission systems i think a pub key based auth. can make sense.\n\nMaybe we keep this ",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136383006,136383006,
laanwj,2015-08-31T14:17:53Z,"Insecure in what use case? What is your attack scenario?\n\nJust saying ""more secure"" as if you need to check some checkboxes isn't useful, and will just cause people to make false assumptions. If it involves merging some horrible complex beast like HTTP digest authentication, it could in practice make things less secure by exposing bugs in little-tested/reviewed code paths.\n",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136383712,136383712,
laanwj,2015-08-31T14:19:01Z,> i think storing a plaintext password in a config file on the remote system (where bitcoind is running) is not a way that i personally would support for a security critical application like bitcoind.\n\nBut the private key is password-equivalent. Stealing it gives exactly the same permissions as stealing the password would. Again: what is the attack scenario you're trying to protect against?\n,https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136383945,136383945,
jonasschnelli,2015-08-31T14:27:59Z,> But the private key is password-equivalent. Stealing it gives exactly the same permissions as stealing the password would. Again: what is the attack scenario you're trying to protect against?\n\nRight. This is why i don't want to store the private key on the system that is running bitcoind (bitcoin.conf). What i want there is a public key verifying my authorization.\n\nAn attack scenario could b,https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136387796,136387796,
laanwj,2015-08-31T14:34:41Z,"Sure - public key authentication would prevent an attacker breaching the bitcoind node from getting the password (private key) from bitcoin.conf. But if the attacker already has access to the system running bitcoind, it's only one step toward stealing the wallet.dat, or manipulating/observing bitcoind directly in memory, bypassing RPC auth.\n\nEdit: I do like the ""server has different credentials ",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136390280,136390280,
dcousens,2015-08-31T16:54:19Z,"> Right. This is why i don't want to store the private key on the system that is running bitcoind (bitcoin.conf). What i want there is a public key verifying my authorization.\n\nAt which point,  if an attacker compromises the `bitcoind` system,  the threat model means he won't be able to get the clients private key.\nBut,  meh?\nAssuming the client private key is only used for this `bitcoind` ins",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136427330,136427330,
jgarzik,2015-08-31T17:16:42Z,"I think ""new technology stack"" is a bit over-stated.  Should be well within the reach of existing codebases while not breaking the rest.\n",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136432922,136432922,
gmaxwell,2015-09-06T08:28:27Z,I think using something custom here breaks most of the advantage of using http+json rpc in the first place. I think it's unlikely many callers would implement support for the custom thing.  If we had a whole custom RPC protocol it would be a different answer (and in that case I'd argue that it should be using a SPAKE protocol of some kind-- as those can get us mutual authentication to boot). \n\nS,https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138052171,138052171,
jonasschnelli,2015-09-06T11:15:16Z,"This PRs authentication methode is not new and has been widely deployed over Bitpay/Copay (https://github.com/bitpay/bitauth). But right. It's a new implementation and it would require some crypoanalysis.\n\nIf I'm right, using auth digest would mean we would encourage people to use a auth scheme that is based on broken md5.\n\nI would recommend to drop auth fully or try to achieve a modern form o",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138070978,138070978,
jgarzik,2015-09-06T15:12:19Z,"Here is an analysis of MD5 and Digest auth.  https://en.wikipedia.org/wiki/Digest_access_authentication#Impact_of_MD5_security_on_digest_authentication\n\nThough it's not HMAC, Digest auth includes multiple MD5 rounds and even allows the possibility for some implementations to store the first hash, rather than the cleartext password.  That does appear to be applicable to us -- perhaps a tiny 20-li",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138092148,138092148,
gmaxwell,2015-09-06T21:43:27Z,"@jonasschnelli There is nothing currently known to be broken about MD5 in this application.  For the digest authentication to be broken, assuming strong credentials, it would require an efficient second pre-image attack against MD5 and none is known to exist (nor, AFAIK, theorized to be likely to be found anytime soon).  The existing attacks against MD5 are structured collision attacks.  The only ",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138128047,138128047,
gmaxwell,2015-09-06T21:47:00Z,"Separately, I've analyzed this proposal somewhat and now feel comfortable NAKing this particular construction and implementation:  It's appears trivially vulnerable to replay,  e.g. you send send me 1 BTC and I observe your sendtoaddress RPC call,  then I connect and continually replay it until you are out of coins.\n\n[And I find it a little hard to imagine a practical example where plain auth wi",https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138128692,138128692,
jonasschnelli,2015-09-07T03:54:47Z,Right. I has no replay attack prevention (like a upcounting nonce within the signature). That would be required for production.\n\nFair enough.\nI see the points and they make also sense for me.\nWill see how complicated auth digest would be to implementation.\n,https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138175930,138175930,
