[
  {
    "sha": "4116cb385ebd075fd889980073a75e0026345174",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTE2Y2IzODVlYmQwNzVmZDg4OTk4MDA3M2E3NWUwMDI2MzQ1MTc0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-08-29T19:42:29Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-06T18:08:01Z"
      },
      "message": "RPC: ecdsa pubkey auth",
      "tree": {
        "sha": "fc717cee32f918109c6009cab0150826b36bc44d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc717cee32f918109c6009cab0150826b36bc44d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4116cb385ebd075fd889980073a75e0026345174",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4116cb385ebd075fd889980073a75e0026345174",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4116cb385ebd075fd889980073a75e0026345174",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4116cb385ebd075fd889980073a75e0026345174/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 92,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8f2e751c815c2e1bfdf7be6fefe26701a5307db1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4116cb385ebd075fd889980073a75e0026345174/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4116cb385ebd075fd889980073a75e0026345174/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4116cb385ebd075fd889980073a75e0026345174",
        "patch": "@@ -338,6 +338,8 @@ endif\n \n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n   $(LIBBITCOIN_UNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBSECP256K1)"
      },
      {
        "sha": "4728b30d5d874fb50c79431e9a04ae5adc515251",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 3,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4116cb385ebd075fd889980073a75e0026345174/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4116cb385ebd075fd889980073a75e0026345174/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=4116cb385ebd075fd889980073a75e0026345174",
        "patch": "@@ -3,8 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"base58.h\"\n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n+#include \"compat/sanity.h\"\n+#include \"hash.h\"\n #include \"rpcclient.h\"\n #include \"rpcprotocol.h\"\n #include \"util.h\"\n@@ -100,6 +103,11 @@ static bool AppInitRPC(int argc, char* argv[])\n         fprintf(stderr, \"Error: SSL mode for RPC (-rpcssl) is no longer supported.\\n\");\n         return false;\n     }\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n     return true;\n }\n \n@@ -175,10 +183,40 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     assert(output_headers);\n     evhttp_add_header(output_headers, \"Host\", host.c_str());\n     evhttp_add_header(output_headers, \"Connection\", \"close\");\n-    evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n+    std::string strRequest = JSONRPCRequest(strMethod, params, 1);\n+\n+    // Add optional signature for ec pubkey auth\n+    if (mapArgs[\"-rpcprivkey\"] != \"\")\n+    {\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << strRequest;\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(mapArgs[\"-rpcprivkey\"]);\n+        if (!fGood)\n+            throw runtime_error(\"privatekey not valid\");\n+\n+        // Initialize elliptic curve code\n+        ECC_Start();\n+\n+        // Sanity check\n+        if(!ECC_InitSanityCheck() || !glibc_sanity_test() || !glibcxx_sanity_test()) {\n+            throw runtime_error(\"Initialization sanity check failed. Bitcoin-cli is shutting down.\");\n+        }\n+\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid())\n+            throw runtime_error(\"privatekey not valid\");\n+        std::vector<unsigned char> vchSig;\n+        key.Sign(ss.GetHash(), vchSig);\n \n+        //add http header with signature of uri+body\n+        evhttp_add_header(output_headers, \"x-signature\", HexStr(vchSig).c_str());\n+    }\n+    else\n+    {\n+        evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n+    }\n     // Attach request data\n-    std::string strRequest = JSONRPCRequest(strMethod, params, 1);\n     struct evbuffer * output_buffer = evhttp_request_get_output_buffer(req);\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());\n@@ -197,7 +235,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     if (response.status == 0)\n         throw CConnectionFailed(\"couldn't connect to server\");\n     else if (response.status == HTTP_UNAUTHORIZED)\n-        throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n+        throw runtime_error(\"incorrect rpcuser, rpcpassword or rpcprivatekey (authorization failed)\");\n     else if (response.status >= 400 && response.status != HTTP_BAD_REQUEST && response.status != HTTP_NOT_FOUND && response.status != HTTP_INTERNAL_SERVER_ERROR)\n         throw runtime_error(strprintf(\"server returned HTTP error %d\", response.status));\n     else if (response.body.empty())"
      },
      {
        "sha": "1d58751e53de0640bf4b33ea6eb82b17457e0f9e",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 4,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4116cb385ebd075fd889980073a75e0026345174/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4116cb385ebd075fd889980073a75e0026345174/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=4116cb385ebd075fd889980073a75e0026345174",
        "patch": "@@ -55,6 +55,8 @@ static std::string strRPCUserColonPass;\n /* Stored RPC timer interface (for unregistration) */\n static HTTPRPCTimerInterface* httpRPCTimerInterface = 0;\n \n+static CPubKey pubKeyAuth;\n+\n static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n {\n     // Send error reply from json-rpc error object\n@@ -72,8 +74,18 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     req->WriteReply(nStatus, strReply);\n }\n \n-static bool RPCAuthorized(const std::string& strAuth)\n+static bool RPCAuthorized(const std::string& strAuth, const std::string& uri, const std::string& body, const std::string& signature)\n {\n+    if (pubKeyAuth.IsValid())\n+    {\n+        std::vector<unsigned char> vchSig = ParseHex(signature);\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << (uri+body);\n+\n+        //verify signature of uri+body with possible pubkey\n+        return pubKeyAuth.Verify(ss.GetHash(), vchSig);\n+    }\n+\n     if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n         return false;\n     if (strAuth.substr(0, 6) != \"Basic \")\n@@ -98,7 +110,9 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    if (!RPCAuthorized(authHeader.second)) {\n+    std::string body = req->ReadBody();\n+    std::pair<bool, std::string> sigHeader = req->GetHeader(\"x-signature\");\n+    if (!RPCAuthorized(authHeader.second, req->GetURI(), body, sigHeader.second)) {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", req->GetPeer().ToString());\n \n         /* Deter brute-forcing\n@@ -114,7 +128,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n     try {\n         // Parse request\n         UniValue valRequest;\n-        if (!valRequest.read(req->ReadBody()))\n+        if (!valRequest.read(body))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n         std::string strReply;\n@@ -147,7 +161,30 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n \n static bool InitRPCAuthentication()\n {\n-    if (mapArgs[\"-rpcpassword\"] == \"\")\n+    //only allow pubkey auth if user has set -rpcpubkey\n+    //disable http base auth if user enables rpcpubkey auth\n+    if (mapArgs[\"-rpcpubkey\"] != \"\")\n+    {\n+        std::string pubKeyHex = mapArgs[\"-rpcpubkey\"];\n+        bool invalidPubKey = false;\n+        if (!IsHex(pubKeyHex))\n+            invalidPubKey = true;\n+\n+        std::vector<unsigned char> data(ParseHex(pubKeyHex));\n+        pubKeyAuth = CPubKey(data.begin(), data.end());\n+        if (!pubKeyAuth.IsValid())\n+            invalidPubKey = true;\n+\n+        if (invalidPubKey)\n+        {\n+            LogPrintf(\"-rpcpubkey is invalid or not encoded in hex\");\n+            uiInterface.ThreadSafeMessageBox(\n+                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n+                \"\", CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+    }\n+    else if (mapArgs[\"-rpcpassword\"] == \"\")\n     {\n         LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n@@ -159,6 +196,14 @@ static bool InitRPCAuthentication()\n     } else {\n         strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     }\n+    if (mapArgs[\"-rpcpubkey\"] != \"\")\n+    {\n+        std::string pubKeyHex = mapArgs[\"-rpcpubkey\"];\n+        if (!IsHex(pubKeyHex))\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+        std::vector<unsigned char> data(ParseHex(pubKeyHex));\n+        pubKeyAuth = CPubKey(data.begin(), data.end());\n+    }\n     return true;\n }\n "
      }
    ]
  }
]