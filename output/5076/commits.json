[
  {
    "sha": "0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTA4YWE4ZjJhZTlhY2Q4ZTgzZTA5YmZhZTQxZGUyYzBhMDJlMWQ4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-10T21:59:04Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-11T08:22:26Z"
      },
      "message": "Parameterise command line option defaults, so translations are independent of them",
      "tree": {
        "sha": "9699afee6677955c59dad1b70b7625a42ba6fbdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9699afee6677955c59dad1b70b7625a42ba6fbdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec58922d07241f0b502c96f8e5131abccbd5dc1"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "aa5e285b104d322a65b9a9ab8b32d8b1dd03cdbe",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8",
        "patch": "@@ -25,13 +25,13 @@ std::string HelpMessageCli()\n     string strUsage;\n     strUsage += _(\"Options:\") + \"\\n\";\n     strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\";\n+    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n     strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n     strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n     strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n                                                 \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n-    strUsage += \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + _(\"Connect to JSON-RPC on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n+    strUsage += \"  -rpcconnect=<ip>       \" + strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\") + \"\\n\";\n+    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n     strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";\n     strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n     strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";"
      },
      {
        "sha": "1150bb1f5ee3976e93d2fa39f6853319c48e10d2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 43,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8",
        "patch": "@@ -215,9 +215,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n     strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\") + \"\\n\";\n     strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n-    strUsage += \"  -checkblocks=<n>       \" + _(\"How many blocks to check at startup (default: 288, 0 = all)\") + \"\\n\";\n-    strUsage += \"  -checklevel=<n>        \" + _(\"How thorough the block verification of -checkblocks is (0-4, default: 3)\") + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + _(\"Specify configuration file (default: bitcoin.conf)\") + \"\\n\";\n+    strUsage += \"  -checkblocks=<n>       \" + strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288) + \"\\n\";\n+    strUsage += \"  -checklevel=<n>        \" + strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3) + \"\\n\";\n+    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n     if (mode == HMM_BITCOIND)\n     {\n #if !defined(WIN32)\n@@ -231,41 +231,41 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -maxorphantx=<n>       \" + strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS) + \"\\n\";\n     strUsage += \"  -par=<n>               \" + strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"), -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS) + \"\\n\";\n #ifndef WIN32\n-    strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n+    strUsage += \"  -pid=<file>            \" + strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\") + \"\\n\";\n #endif\n     strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n #if !defined(WIN32)\n     strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n #endif\n-    strUsage += \"  -txindex               \" + _(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: 0)\") + \"\\n\";\n+    strUsage += \"  -txindex               \" + strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"Connection options:\") + \"\\n\";\n     strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n-    strUsage += \"  -banscore=<n>          \" + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\";\n-    strUsage += \"  -bantime=<n>           \" + _(\"Number of seconds to keep misbehaving peers from reconnecting (default: 86400)\") + \"\\n\";\n+    strUsage += \"  -banscore=<n>          \" + strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100) + \"\\n\";\n+    strUsage += \"  -bantime=<n>           \" + strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400) + \"\\n\";\n     strUsage += \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\";\n     strUsage += \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\";\n     strUsage += \"  -discover              \" + _(\"Discover own IP address (default: 1 when listening and no -externalip)\") + \"\\n\";\n     strUsage += \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\") + \"\\n\";\n     strUsage += \"  -dnsseed               \" + _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\") + \"\\n\";\n     strUsage += \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\";\n-    strUsage += \"  -forcednsseed          \" + _(\"Always query for peer addresses via DNS lookup (default: 0)\") + \"\\n\";\n+    strUsage += \"  -forcednsseed          \" + strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\";\n-    strUsage += \"  -maxconnections=<n>    \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\";\n-    strUsage += \"  -maxreceivebuffer=<n>  \" + _(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)\") + \"\\n\";\n-    strUsage += \"  -maxsendbuffer=<n>     \" + _(\"Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)\") + \"\\n\";\n-    strUsage += \"  -onion=<ip:port>       \" + _(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)\") + \"\\n\";\n+    strUsage += \"  -maxconnections=<n>    \" + strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125) + \"\\n\";\n+    strUsage += \"  -maxreceivebuffer=<n>  \" + strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000) + \"\\n\";\n+    strUsage += \"  -maxsendbuffer=<n>     \" + strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000) + \"\\n\";\n+    strUsage += \"  -onion=<ip:port>       \" + strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\") + \"\\n\";\n     strUsage += \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\") + \"\\n\";\n-    strUsage += \"  -permitbaremultisig    \" + _(\"Relay non-P2SH multisig (default: 1)\") + \"\\n\";\n-    strUsage += \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\";\n+    strUsage += \"  -permitbaremultisig    \" + strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1) + \"\\n\";\n+    strUsage += \"  -port=<port>           \" + strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333) + \"\\n\";\n     strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through SOCKS5 proxy\") + \"\\n\";\n     strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n     strUsage += \"  -timeout=<n>           \" + strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT) + \"\\n\";\n #ifdef USE_UPNP\n #if USE_UPNP\n     strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n #else\n-    strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 0)\") + \"\\n\";\n+    strUsage += \"  -upnp                  \" + strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0) + \"\\n\";\n #endif\n #endif\n     strUsage += \"  -whitebind=<addr>      \" + _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\") + \"\\n\";\n@@ -275,60 +275,60 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifdef ENABLE_WALLET\n     strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n     strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n-    strUsage += \"  -keypool=<n>           \" + _(\"Set key pool size to <n> (default: 100)\") + \"\\n\";\n+    strUsage += \"  -keypool=<n>           \" + strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100) + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n         strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -spendzeroconfchange   \" + _(\"Spend unconfirmed change when sending transactions (default: 1)\") + \"\\n\";\n-    strUsage += \"  -txconfirmtarget=<n>   \" + _(\"If paytxfee is not set, include enough fee so transactions are confirmed on average within n blocks (default: 1)\") + \"\\n\";\n+    strUsage += \"  -spendzeroconfchange   \" + strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1) + \"\\n\";\n+    strUsage += \"  -txconfirmtarget=<n>   \" + strprintf(_(\"If paytxfee is not set, include enough fee so transactions are confirmed on average within n blocks (default: %u)\"), 1) + \"\\n\";\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + _(\"(default: wallet.dat)\") + \"\\n\";\n+    strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\") + \"\\n\";\n     strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n     strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"(default: 1, 1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n+    strUsage += \"                         \" + strprintf(_(\"(default: %u, 1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"), 1) + \"\\n\";\n #endif\n \n     strUsage += \"\\n\" + _(\"Debugging/Testing options:\") + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -checkpoints           \" + _(\"Only accept block chain matching built-in checkpoints (default: 1)\") + \"\\n\";\n-        strUsage += \"  -dblogsize=<n>         \" + _(\"Flush database activity from memory pool to disk log every <n> megabytes (default: 100)\") + \"\\n\";\n-        strUsage += \"  -disablesafemode       \" + _(\"Disable safemode, override a real safe mode event (default: 0)\") + \"\\n\";\n-        strUsage += \"  -testsafemode          \" + _(\"Force safe mode (default: 0)\") + \"\\n\";\n+        strUsage += \"  -checkpoints           \" + strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1) + \"\\n\";\n+        strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100) + \"\\n\";\n+        strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n+        strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n         strUsage += \"  -dropmessagestest=<n>  \" + _(\"Randomly drop 1 of every <n> network messages\") + \"\\n\";\n         strUsage += \"  -fuzzmessagestest=<n>  \" + _(\"Randomly fuzz 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -flushwallet           \" + _(\"Run a thread to flush wallet periodically (default: 1)\") + \"\\n\";\n-        strUsage += \"  -stopafterblockimport  \" + _(\"Stop running after importing blocks from disk (default: 0)\") + \"\\n\";\n+        strUsage += \"  -flushwallet           \" + strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1) + \"\\n\";\n+        strUsage += \"  -stopafterblockimport  \" + strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0) + \"\\n\";\n     }\n-    strUsage += \"  -debug=<category>      \" + _(\"Output debugging information (default: 0, supplying <category> is optional)\") + \"\\n\";\n+    strUsage += \"  -debug=<category>      \" + strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \"\\n\";\n     strUsage += \"                         \" + _(\"If <category> is not supplied, output all debugging information.\") + \"\\n\";\n     strUsage += \"                         \" + _(\"<category> can be:\");\n     strUsage +=                                 \" addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         strUsage += \", qt\";\n     strUsage += \".\\n\";\n #ifdef ENABLE_WALLET\n-    strUsage += \"  -gen                   \" + _(\"Generate coins (default: 0)\") + \"\\n\";\n-    strUsage += \"  -genproclimit=<n>      \" + _(\"Set the processor limit for when generation is on (-1 = unlimited, default: -1)\") + \"\\n\";\n+    strUsage += \"  -gen                   \" + strprintf(_(\"Generate coins (default: %u)\"), 0) + \"\\n\";\n+    strUsage += \"  -genproclimit=<n>      \" + strprintf(_(\"Set the processor limit for when generation is on (-1 = unlimited, default: %d)\"), -1) + \"\\n\";\n #endif\n     strUsage += \"  -help-debug            \" + _(\"Show all debugging options (usage: --help -help-debug)\") + \"\\n\";\n-    strUsage += \"  -logips                \" + _(\"Include IP addresses in debug output (default: 0)\") + \"\\n\";\n-    strUsage += \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp (default: 1)\") + \"\\n\";\n+    strUsage += \"  -logips                \" + strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0) + \"\\n\";\n+    strUsage += \"  -logtimestamps         \" + strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1) + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -limitfreerelay=<n>    \" + _(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:15)\") + \"\\n\";\n-        strUsage += \"  -maxsigcachesize=<n>   \" + _(\"Limit size of signature cache to <n> entries (default: 50000)\") + \"\\n\";\n+        strUsage += \"  -limitfreerelay=<n>    \" + strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15) + \"\\n\";\n+        strUsage += \"  -maxsigcachesize=<n>   \" + strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000) + \"\\n\";\n     }\n     strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n         strUsage += \"  -printblock=<hash>     \" + _(\"Print block on startup, if found in block index\") + \"\\n\";\n-        strUsage += \"  -printblocktree        \" + _(\"Print block tree on startup (default: 0)\") + \"\\n\";\n-        strUsage += \"  -printpriority         \" + _(\"Log transaction priority and fee per kB when mining blocks (default: 0)\") + \"\\n\";\n-        strUsage += \"  -privdb                \" + _(\"Sets the DB_PRIVATE flag in the wallet db environment (default: 1)\") + \"\\n\";\n+        strUsage += \"  -printblocktree        \" + strprintf(_(\"Print block tree on startup (default: %u)\"), 0) + \"\\n\";\n+        strUsage += \"  -printpriority         \" + strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0) + \"\\n\";\n+        strUsage += \"  -privdb                \" + strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1) + \"\\n\";\n         strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n         strUsage += \"                         \" + _(\"This is intended for regression testing tools and app development.\") + \"\\n\";\n         strUsage += \"                         \" + _(\"In this mode -genproclimit controls how many blocks are generated immediately.\") + \"\\n\";\n@@ -337,10 +337,10 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"Node relay options:\") + \"\\n\";\n-    strUsage += \"  -datacarrier           \" + _(\"Relay and mine data carrier transactions (default: 1)\") + \"\\n\";\n+    strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n-    strUsage += \"  -blockminsize=<n>      \" + _(\"Set minimum block size in bytes (default: 0)\") + \"\\n\";\n+    strUsage += \"  -blockminsize=<n>      \" + strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0) + \"\\n\";\n     strUsage += \"  -blockmaxsize=<n>      \" + strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE) + \"\\n\";\n     strUsage += \"  -blockprioritysize=<n> \" + strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE) + \"\\n\";\n \n@@ -349,15 +349,15 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -rpcbind=<addr>        \" + _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\") + \"\\n\";\n     strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n     strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\";\n+    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n     strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n-    strUsage += \"  -rpcthreads=<n>        \" + _(\"Set the number of threads to service RPC calls (default: 4)\") + \"\\n\";\n+    strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n     strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + _(\"Server certificate file (default: server.cert)\") + \"\\n\";\n-    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + _(\"Server private key (default: server.pem)\") + \"\\n\";\n-    strUsage += \"  -rpcsslciphers=<ciphers>                 \" + _(\"Acceptable ciphers (default: TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH)\") + \"\\n\";\n+    strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\") + \"\\n\";\n+    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + strprintf(_(\"Server private key (default: %s)\"), \"server.pem\") + \"\\n\";\n+    strUsage += \"  -rpcsslciphers=<ciphers>                 \" + strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\") + \"\\n\";\n \n     return strUsage;\n }"
      }
    ]
  },
  {
    "sha": "c0195b1c31042a7e5d80fa902b149fe2c7f67bb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDE5NWIxYzMxMDQyYTdlNWQ4MGZhOTAyYjE0OWZlMmM3ZjY3YmIw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-14T20:13:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-14T20:13:44Z"
      },
      "message": "Bugfix: Remove default from -zapwallettxes description (inaccurate)",
      "tree": {
        "sha": "b95832faaa0ebe466253a35ae9a9c988ec24677e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b95832faaa0ebe466253a35ae9a9c988ec24677e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0195b1c31042a7e5d80fa902b149fe2c7f67bb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0195b1c31042a7e5d80fa902b149fe2c7f67bb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0195b1c31042a7e5d80fa902b149fe2c7f67bb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0195b1c31042a7e5d80fa902b149fe2c7f67bb0/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a08aa8f2ae9acd8e83e09bfae41de2c0a02e1d8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ce72b415aa299a5a8768d5f1f19d46ea0066e23b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0195b1c31042a7e5d80fa902b149fe2c7f67bb0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0195b1c31042a7e5d80fa902b149fe2c7f67bb0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c0195b1c31042a7e5d80fa902b149fe2c7f67bb0",
        "patch": "@@ -287,7 +287,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\") + \"\\n\";\n     strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n     strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \"\\n\";\n-    strUsage += \"                         \" + strprintf(_(\"(default: %u, 1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"), 1) + \"\\n\";\n+    strUsage += \"                         \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n #endif\n \n     strUsage += \"\\n\" + _(\"Debugging/Testing options:\") + \"\\n\";"
      }
    ]
  }
]