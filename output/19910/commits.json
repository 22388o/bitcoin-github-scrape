[
  {
    "sha": "a529fd3e3f2391e592ac937e291fec51e067ea2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTI5ZmQzZTNmMjM5MWU1OTJhYzkzN2UyOTFmZWM1MWUwNjdlYTJl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-24T16:39:54Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-04T11:37:45Z"
      },
      "message": "[net processing] Move GetNodeStateStats into PeerManager",
      "tree": {
        "sha": "eafa7eadf6bfe611afe40a3bb8d325cbef602c18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eafa7eadf6bfe611afe40a3bb8d325cbef602c18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a529fd3e3f2391e592ac937e291fec51e067ea2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a529fd3e3f2391e592ac937e291fec51e067ea2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a529fd3e3f2391e592ac937e291fec51e067ea2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a529fd3e3f2391e592ac937e291fec51e067ea2e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "257cf05f9b841ba30202f23a94bcdb1743feded2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/257cf05f9b841ba30202f23a94bcdb1743feded2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/257cf05f9b841ba30202f23a94bcdb1743feded2"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 21,
      "deletions": 18
    },
    "files": [
      {
        "sha": "d65b066dbdb243b8bee9792445111547a795a6db",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a529fd3e3f2391e592ac937e291fec51e067ea2e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a529fd3e3f2391e592ac937e291fec51e067ea2e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a529fd3e3f2391e592ac937e291fec51e067ea2e",
        "patch": "@@ -887,7 +887,7 @@ void PeerManager::FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) {\n     LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n }\n \n-bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n+bool PeerManager::GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     {\n         LOCK(cs_main);\n         CNodeState* state = State(nodeid);"
      },
      {
        "sha": "8f4ba4c0bbc32b1636c8955db6ea4c2ee6861c45",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a529fd3e3f2391e592ac937e291fec51e067ea2e/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a529fd3e3f2391e592ac937e291fec51e067ea2e/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=a529fd3e3f2391e592ac937e291fec51e067ea2e",
        "patch": "@@ -32,6 +32,13 @@ static const bool DEFAULT_PEERBLOCKFILTERS = false;\n /** Threshold for marking a node to be discouraged, e.g. disconnected and added to the discouragement filter. */\n static const int DISCOURAGEMENT_THRESHOLD{100};\n \n+struct CNodeStateStats {\n+    int m_misbehavior_score = 0;\n+    int nSyncHeight = -1;\n+    int nCommonHeight = -1;\n+    std::vector<int> vHeightInFlight;\n+};\n+\n class PeerManager final : public CValidationInterface, public NetEventsInterface {\n public:\n     PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n@@ -94,6 +101,9 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n      */\n     void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n \n+    /** Get statistics from node state */\n+    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n+\n private:\n     /**\n      * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n@@ -145,16 +155,6 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n };\n \n-struct CNodeStateStats {\n-    int m_misbehavior_score = 0;\n-    int nSyncHeight = -1;\n-    int nCommonHeight = -1;\n-    std::vector<int> vHeightInFlight;\n-};\n-\n-/** Get statistics from node state */\n-bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n-\n /** Relay transaction to every node */\n void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      },
      {
        "sha": "3c315c0a536d61d621fdb89507dc27110e867517",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a529fd3e3f2391e592ac937e291fec51e067ea2e/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a529fd3e3f2391e592ac937e291fec51e067ea2e/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=a529fd3e3f2391e592ac937e291fec51e067ea2e",
        "patch": "@@ -121,11 +121,13 @@ class NodeImpl : public Node\n             }\n \n             // Try to retrieve the CNodeStateStats for each node.\n-            TRY_LOCK(::cs_main, lockMain);\n-            if (lockMain) {\n-                for (auto& node_stats : stats) {\n-                    std::get<1>(node_stats) =\n-                        GetNodeStateStats(std::get<0>(node_stats).nodeid, std::get<2>(node_stats));\n+            if (m_context->peerman) {\n+                TRY_LOCK(::cs_main, lockMain);\n+                if (lockMain) {\n+                    for (auto& node_stats : stats) {\n+                        std::get<1>(node_stats) =\n+                            m_context->peerman->GetNodeStateStats(std::get<0>(node_stats).nodeid, std::get<2>(node_stats));\n+                    }\n                 }\n             }\n             return true;"
      },
      {
        "sha": "fa71ea1181693c99d840ea326fe91c795870103b",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a529fd3e3f2391e592ac937e291fec51e067ea2e/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a529fd3e3f2391e592ac937e291fec51e067ea2e/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=a529fd3e3f2391e592ac937e291fec51e067ea2e",
        "patch": "@@ -165,8 +165,9 @@ static RPCHelpMan getpeerinfo()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     NodeContext& node = EnsureNodeContext(request.context);\n-    if(!node.connman)\n+    if(!node.connman || !node.peerman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n \n     std::vector<CNodeStats> vstats;\n     node.connman->GetNodeStats(vstats);\n@@ -176,7 +177,7 @@ static RPCHelpMan getpeerinfo()\n     for (const CNodeStats& stats : vstats) {\n         UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n+        bool fStateStats = node.peerman->GetNodeStateStats(stats.nodeid, statestats);\n         obj.pushKV(\"id\", stats.nodeid);\n         obj.pushKV(\"addr\", stats.addrName);\n         if (stats.addrBind.IsValid()) {"
      }
    ]
  },
  {
    "sha": "ed7e469ceec6f7101a3fb7b15c21a6fb69697866",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDdlNDY5Y2VlYzZmNzEwMWEzZmI3YjE1YzIxYTZmYjY5Njk3ODY2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-07T17:12:19Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-07T11:55:28Z"
      },
      "message": "[net_processing] Move peer_map to PeerManager",
      "tree": {
        "sha": "fe29c60491ef45e0a335e6bb52d39430916c709e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe29c60491ef45e0a335e6bb52d39430916c709e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed7e469ceec6f7101a3fb7b15c21a6fb69697866",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed7e469ceec6f7101a3fb7b15c21a6fb69697866",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed7e469ceec6f7101a3fb7b15c21a6fb69697866",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed7e469ceec6f7101a3fb7b15c21a6fb69697866/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a529fd3e3f2391e592ac937e291fec51e067ea2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a529fd3e3f2391e592ac937e291fec51e067ea2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a529fd3e3f2391e592ac937e291fec51e067ea2e"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 59,
      "deletions": 56
    },
    "files": [
      {
        "sha": "ec8d644813dc61eb75d1bf60745d1976eb3f8cc3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 56,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7e469ceec6f7101a3fb7b15c21a6fb69697866/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7e469ceec6f7101a3fb7b15c21a6fb69697866/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ed7e469ceec6f7101a3fb7b15c21a6fb69697866",
        "patch": "@@ -422,58 +422,6 @@ static CNodeState *State(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     return &it->second;\n }\n \n-/**\n- * Data structure for an individual peer. This struct is not protected by\n- * cs_main since it does not contain validation-critical data.\n- *\n- * Memory is owned by shared pointers and this object is destructed when\n- * the refcount drops to zero.\n- *\n- * TODO: move most members from CNodeState to this structure.\n- * TODO: move remaining application-layer data members from CNode to this structure.\n- */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n-\n-using PeerRef = std::shared_ptr<Peer>;\n-\n-/**\n- * Map of all Peer objects, keyed by peer id. This map is protected\n- * by the global g_peer_mutex. Once a shared pointer reference is\n- * taken, the lock may be released. Individual fields are protected by\n- * their own locks.\n- */\n-Mutex g_peer_mutex;\n-static std::map<NodeId, PeerRef> g_peer_map GUARDED_BY(g_peer_mutex);\n-\n-/** Get a shared pointer to the Peer object.\n- *  May return nullptr if the Peer object can't be found. */\n-static PeerRef GetPeerRef(NodeId id)\n-{\n-    LOCK(g_peer_mutex);\n-    auto it = g_peer_map.find(id);\n-    return it != g_peer_map.end() ? it->second : nullptr;\n-}\n-\n static void UpdatePreferredDownload(const CNode& node, CNodeState* state) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     nPreferredDownload -= state->fPreferredDownload;\n@@ -807,8 +755,8 @@ void PeerManager::InitializeNode(CNode *pnode) {\n     }\n     {\n         PeerRef peer = std::make_shared<Peer>(nodeid);\n-        LOCK(g_peer_mutex);\n-        g_peer_map.emplace_hint(g_peer_map.end(), nodeid, std::move(peer));\n+        LOCK(m_peer_mutex);\n+        m_peer_map.emplace_hint(m_peer_map.end(), nodeid, std::move(peer));\n     }\n     if (!pnode->IsInboundConn()) {\n         PushNodeVersion(*pnode, m_connman, GetTime());\n@@ -845,8 +793,8 @@ void PeerManager::FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) {\n         PeerRef peer = GetPeerRef(nodeid);\n         assert(peer != nullptr);\n         misbehavior = WITH_LOCK(peer->m_misbehavior_mutex, return peer->m_misbehavior_score);\n-        LOCK(g_peer_mutex);\n-        g_peer_map.erase(nodeid);\n+        LOCK(m_peer_mutex);\n+        m_peer_map.erase(nodeid);\n     }\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n@@ -887,6 +835,13 @@ void PeerManager::FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) {\n     LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n }\n \n+PeerRef PeerManager::GetPeerRef(NodeId id)\n+{\n+    LOCK(m_peer_mutex);\n+    auto it = m_peer_map.find(id);\n+    return it != m_peer_map.end() ? it->second : nullptr;\n+}\n+\n bool PeerManager::GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "0697cf82c3baa75359e263c76facf0c9c956a24f",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7e469ceec6f7101a3fb7b15c21a6fb69697866/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7e469ceec6f7101a3fb7b15c21a6fb69697866/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=ed7e469ceec6f7101a3fb7b15c21a6fb69697866",
        "patch": "@@ -39,6 +39,40 @@ struct CNodeStateStats {\n     std::vector<int> vHeightInFlight;\n };\n \n+/**\n+ * Data structure for an individual peer. This struct is not protected by\n+ * cs_main since it does not contain validation-critical data.\n+ *\n+ * Memory is owned by shared pointers and this object is destructed when\n+ * the refcount drops to zero.\n+ *\n+ * TODO: move most members from CNodeState to this structure.\n+ * TODO: move remaining application-layer data members from CNode to this structure.\n+ */\n+struct Peer {\n+    /** Same id as the CNode object for this peer */\n+    const NodeId m_id{0};\n+\n+    /** Protects misbehavior data members */\n+    Mutex m_misbehavior_mutex;\n+    /** Accumulated misbehavior score for this peer */\n+    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n+    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n+    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n+\n+    /** Set of txids to reconsider once their parent transactions have been accepted **/\n+    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n+\n+    /** Protects m_getdata_requests **/\n+    Mutex m_getdata_requests_mutex;\n+    /** Work queue of items requested by this peer **/\n+    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n+\n+    explicit Peer(NodeId id) : m_id(id) {}\n+};\n+\n+using PeerRef = std::shared_ptr<Peer>;\n+\n class PeerManager final : public CValidationInterface, public NetEventsInterface {\n public:\n     PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n@@ -105,6 +139,10 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n \n private:\n+    /** Get a shared pointer to the Peer object.\n+     *  May return an empty shared_ptr if the Peer object can't be found. */\n+    PeerRef GetPeerRef(NodeId id);\n+\n     /**\n      * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n      *\n@@ -153,6 +191,16 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n \n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n+\n+    /** Protects m_peer_map */\n+    Mutex m_peer_mutex;\n+    /**\n+     * Map of all Peer objects, keyed by peer id. This map is protected\n+     * by the m_peer_mutex. Once a shared pointer reference is\n+     * taken, the lock may be released. Individual fields are protected by\n+     * their own locks.\n+     */\n+    std::map<NodeId, PeerRef> m_peer_map GUARDED_BY(m_peer_mutex);\n };\n \n /** Relay transaction to every node */"
      }
    ]
  },
  {
    "sha": "a20ab22786466fe5164b53e62de9d23a4062fbca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjBhYjIyNzg2NDY2ZmU1MTY0YjUzZTYyZGU5ZDIzYTQwNjJmYmNh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-08T10:00:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-07T11:57:12Z"
      },
      "message": "[net processing] Make GetPeerRef const",
      "tree": {
        "sha": "6afefffc3b9cd39bd482a2be7dc06de27353b20d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6afefffc3b9cd39bd482a2be7dc06de27353b20d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a20ab22786466fe5164b53e62de9d23a4062fbca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a20ab22786466fe5164b53e62de9d23a4062fbca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a20ab22786466fe5164b53e62de9d23a4062fbca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a20ab22786466fe5164b53e62de9d23a4062fbca/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed7e469ceec6f7101a3fb7b15c21a6fb69697866",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed7e469ceec6f7101a3fb7b15c21a6fb69697866",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed7e469ceec6f7101a3fb7b15c21a6fb69697866"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7001a6f4582ee9bfbf27f5f845329f9e55d22087",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a20ab22786466fe5164b53e62de9d23a4062fbca/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a20ab22786466fe5164b53e62de9d23a4062fbca/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a20ab22786466fe5164b53e62de9d23a4062fbca",
        "patch": "@@ -835,7 +835,7 @@ void PeerManager::FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) {\n     LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n }\n \n-PeerRef PeerManager::GetPeerRef(NodeId id)\n+PeerRef PeerManager::GetPeerRef(NodeId id) const\n {\n     LOCK(m_peer_mutex);\n     auto it = m_peer_map.find(id);"
      },
      {
        "sha": "6076e62732a5bc79135637699bca88b271497b6d",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a20ab22786466fe5164b53e62de9d23a4062fbca/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a20ab22786466fe5164b53e62de9d23a4062fbca/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=a20ab22786466fe5164b53e62de9d23a4062fbca",
        "patch": "@@ -141,7 +141,7 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n private:\n     /** Get a shared pointer to the Peer object.\n      *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef GetPeerRef(NodeId id);\n+    PeerRef GetPeerRef(NodeId id) const;\n \n     /**\n      * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n@@ -193,7 +193,7 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n \n     /** Protects m_peer_map */\n-    Mutex m_peer_mutex;\n+    mutable Mutex m_peer_mutex;\n     /**\n      * Map of all Peer objects, keyed by peer id. This map is protected\n      * by the m_peer_mutex. Once a shared pointer reference is"
      }
    ]
  },
  {
    "sha": "3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDI1Y2E5ZTc3NDNkOWI5NmMyMmU5YzZlZDdlZjA1MWRjZWE3ZTU0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-09-24T09:11:30Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-07T11:59:24Z"
      },
      "message": "[net processing] Add RemovePeer()\n\nThis allows us to avoid repeated locking in FinalizeNode()",
      "tree": {
        "sha": "13d7abac95c5cb177fbcbb888ee2e19ac9781648",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13d7abac95c5cb177fbcbb888ee2e19ac9781648"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a20ab22786466fe5164b53e62de9d23a4062fbca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a20ab22786466fe5164b53e62de9d23a4062fbca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a20ab22786466fe5164b53e62de9d23a4062fbca"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 17,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3dd432fac66f6ad510455da8188766ef539f933e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54",
        "patch": "@@ -790,11 +790,9 @@ void PeerManager::FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) {\n     LOCK(cs_main);\n     int misbehavior{0};\n     {\n-        PeerRef peer = GetPeerRef(nodeid);\n+        PeerRef peer = RemovePeer(nodeid);\n         assert(peer != nullptr);\n         misbehavior = WITH_LOCK(peer->m_misbehavior_mutex, return peer->m_misbehavior_score);\n-        LOCK(m_peer_mutex);\n-        m_peer_map.erase(nodeid);\n     }\n     CNodeState *state = State(nodeid);\n     assert(state != nullptr);\n@@ -842,6 +840,18 @@ PeerRef PeerManager::GetPeerRef(NodeId id) const\n     return it != m_peer_map.end() ? it->second : nullptr;\n }\n \n+PeerRef PeerManager::RemovePeer(NodeId id)\n+{\n+    PeerRef ret;\n+    LOCK(m_peer_mutex);\n+    auto it = m_peer_map.find(id);\n+    if (it != m_peer_map.end()) {\n+        ret = std::move(it->second);\n+        m_peer_map.erase(it);\n+    }\n+    return ret;\n+}\n+\n bool PeerManager::GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "c179b89ebe04a2feca41aae97c6c25ee3e2d60bb",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54",
        "patch": "@@ -143,6 +143,10 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n      *  May return an empty shared_ptr if the Peer object can't be found. */\n     PeerRef GetPeerRef(NodeId id) const;\n \n+    /** Get a shared pointer to the Peer object and remove it from m_peer_map.\n+     *  May return an empty shared_ptr if the Peer object can't be found. */\n+    PeerRef RemovePeer(NodeId id);\n+\n     /**\n      * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n      *"
      }
    ]
  }
]