jnewbery,2020-09-07 17:18:04,Requested by @MarcoFalke @sdaftuar and @theuni . Review very much appreciated :pray: ,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-688444546,688444546,
hebasto,2020-09-07 18:34:00,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-688467825,688467825,
practicalswift,2020-09-07 19:23:42,Concept ACK: decoupling is good!,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-688482583,688482583,
promag,2020-09-09 08:14:08,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-689404986,689404986,
DrahtBot,2020-09-19 13:46:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20295 (rpc: getblockfrompeer by Sjors)\n* #20217 (net: Remove g_relay_txes by jnewbery)\n* #19858 (Periodically make bloc",https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-695215523,695215523,
jnewbery,2020-10-08 10:13:51,Thanks for the review @theuni. I've addressed your comment.,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-705473240,705473240,
jnewbery,2020-10-19 08:10:52,Rebased,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-711808191,711808191,
jnewbery,2020-11-19 11:14:36,Rebased,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-730303039,730303039,
jnewbery,2020-12-01 11:54:30,rebased,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-736503375,736503375,
dongcarl,2020-12-03 16:39:38,"Code Review ACK aedd418\n\n-----\n\nPrivate members >> Anon-namespaced statics/functions\n\nEspecially when the functionality is strongly intertwined with the class of which it's being made a member.",https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-738126619,738126619,
jnewbery,2020-12-04 11:55:01,Rebased and addressed outstanding review comments.,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-738743686,738743686,
jnewbery,2020-12-07 12:12:04,"Thanks for the review @hebasto @promag @theuni and @dongcarl. I've addressed all comments, so this should now be ready for re-review.",https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-739880094,739880094,
theuni,2020-12-08 19:23:55,Re-ACK 3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54.,https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-740894306,740894306,
dongcarl,2020-12-09 13:11:18,"Re-ACK 3025ca9\n\n-----\n\n1. Disambiguated between nullptr and empty shared_ptr\n2. Reverted refactoring in PeerManager::GetPeerRef\n3. Made `Peer` constructor `explicit`",https://github.com/bitcoin/bitcoin/pull/19910#issuecomment-741760526,741760526,
MarcoFalke,2020-09-07 17:25:02,It is currently not possible to not have `node.peerman`. I think an `Ensure..()` like `EnsureMempool` would be good. It doesn't really make sense to call `getpeerinfo` without a peerman anyway?,https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484529215,484529215,src/rpc/net.cpp
MarcoFalke,2020-09-07 17:25:42,"```suggestion\n    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n```\n\nnit for new code",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484529374,484529374,src/net_processing.h
jnewbery,2020-09-07 18:08:44,I've done something slightly different and checked existence at the top of this function. Let me know what you think.,https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484537675,484537675,src/rpc/net.cpp
jnewbery,2020-09-07 18:09:37,fixed. Thanks!,https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484537830,484537830,src/net_processing.h
hebasto,2020-09-08 09:36:28,"322e87b6039877ed3457baea93cc87d78f3f4d96\n```suggestion\n     * by the m_peer_mutex. Once a shared pointer reference is\n```",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484785195,484785195,src/net_processing.h
hebasto,2020-09-08 09:37:33,"322e87b6039877ed3457baea93cc87d78f3f4d96\nnit: This comment duplicates the code :) Consider to drop it.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484785821,484785821,src/net_processing.h
jnewbery,2020-09-08 10:32:10,good catch. Fixed.,https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484816918,484816918,src/net_processing.h
jnewbery,2020-09-08 10:32:57,"Normally I'd agree with removing unnecessary commenting, but I think it's useful for every member variable to have a doxygen comment. Happy to go either way if others think it should be dropped.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484817325,484817325,src/net_processing.h
laanwj,2020-09-08 11:14:10,"I'm for keeping it, it's better for consistency to have a comment for every one.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484838191,484838191,src/net_processing.h
ariard,2020-09-08 14:50:47,Does it change something if  this check is moved above at the `m_context->connman` level ? You may save one more control flow.,https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484981819,484981819,src/interfaces/node.cpp
ariard,2020-09-08 14:52:56,"It's a bit confusing to have `GetNodeStateStats` which is actually a member of `PeerManager`, and still have a `CNodeState`, even if inside this function you effectively fetch it. Maybe rename `GetNodeProcessingStats` ?",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r484983468,484983468,src/net_processing.cpp
hebasto,2020-09-08 16:10:25,"> Does it change something if this check is moved above at the `m_context->connman` level ? You may save one more control flow.\n\nWhy increase code block with locked `::cs_main`?",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r485038136,485038136,src/interfaces/node.cpp
jnewbery,2020-09-08 16:12:40,I think the name right now is fine. It's getting stats related to the node's state.,https://github.com/bitcoin/bitcoin/pull/19910#discussion_r485039519,485039519,src/net_processing.cpp
jnewbery,2020-09-08 16:27:09,"> Does it change something if this check is moved above at the m_context->connman level ? You may save one more control flow.\n\nYes, it's a try lock. It's possible that we're not able to take the lock, and therefore that we're not able to get the node state stats, but we'd still get the node stats. If we move the try above the m_context->connman level, then if we couldn't get the cs_main lock, ",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r485048559,485048559,src/interfaces/node.cpp
theuni,2020-09-22 20:19:54,"Using ```GetPeerRef()``` with an encapsulated lock for ```m_peer_map```, then manually locking the private mutex 3 lines later looks strange. It also requires two locks... all the drawbacks of mutex encapsulation without exploiting the benefits :)\n\nSince misbehavior changes to the peer will go unobserved after this point anyway, why not just take and remove with a single lock?\n\nSomething l",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r493008783,493008783,src/net_processing.cpp
jnewbery,2020-09-24 09:22:04,"Yes, that's much better. Thank you!\n\nI've implemented this within `GetPeerRef()` to avoid the code duplication, and also added another commit that tidies up `FinalizeNode()` a bit more. Let me know what you think.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r494167048,494167048,src/net_processing.cpp
jnewbery,2020-09-24 10:50:37,"EDIT: The comment below is wrong. I introduced a different bug when implementing this as Cory points out below.\n\n~oops. There's a bug in the code above which caused this to fail. You can't move the shared_ptr out of the map and then erase it. More precisely, I think something like the following is happening:~\n\n- ~`ret = std::move(it->second);` means `ret` is reset to be a shared pointer to",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r494218405,494218405,src/net_processing.cpp
theuni,2020-09-24 19:56:15,"This undoes this assumption: https://github.com/bitcoin/bitcoin/pull/19607#discussion_r467079107 , which I'm still not convinced is a good idea.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r494574969,494574969,src/net_processing.cpp
jnewbery,2020-09-25 08:01:09,"ok, removed that commit",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r494816208,494816208,src/net_processing.cpp
theuni,2020-10-05 17:12:29,"This is really uninteresting minutia, but @jnewbery and I happened to get into a discussion/debate about it today so I'm following up with details. Everyone else can safely ignore this as boring.\n\nI don't believe the comment above is correct. If removing the ```std::move``` helps, I'm wondering if there might be another issue causing problems.\n\n> - ret = std::move(it->second); means ret is",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r499749803,499749803,src/net_processing.cpp
theuni,2020-10-05 17:20:28,"Aha, I think I found the problem. From your previous version of this commit:\n```c++\n...\n    if (it != m_peer_map.end()) {\n        ret = std::move(it->second);\n        if (erase) m_peer_map.erase(it);\n    }\n    return ret;\n```\nMoving only makes sense when erasing.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r499754354,499754354,src/net_processing.cpp
theuni,2020-10-05 18:58:20,"This is (mostly) a style preference, but I'm not a fan of adding a boolean option to substantially change the functionality of a function as opposed to just creating two functions. GetPeerRef() is logically a read-only operation.\n\nIt's also easier easy to slip up and make mistakes like this one: https://github.com/bitcoin/bitcoin/pull/19910#discussion_r499754354 ;)",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r499806616,499806616,src/net_processing.cpp
jnewbery,2020-10-08 09:42:05,"Indeed, the failure was caused by that. Sorry for the noise (and for casting aspersions on your code!)",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r501585667,501585667,src/net_processing.cpp
jnewbery,2020-10-08 10:13:28,"You got me. I've made it a separate function.\n\n> GetPeerRef() is logically a read-only operation.\n\nGood point. I've made it `const` (and made the mutex `mutable`)\n",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r501605336,501605336,src/net_processing.cpp
hebasto,2020-12-03 10:35:44,"aedd418fed7abfd00cc731bd57ed5b013259eb5a\n\nTo be precise, it may return an [empty](https://en.cppreference.com/w/cpp/memory/shared_ptr/shared_ptr) shared pointer rather `nullptr`.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r535077391,535077391,src/net_processing.h
hebasto,2020-12-03 10:41:08,"6bfcef3797d4d105180e325033929684f84cfc08\n\nWhy are these changes required? What are benefits to return an empty shared pointer instead `nullptr`-constructed one? Btw, in all caller places the return value is checked for `nullptr`, not being empty.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r535083417,535083417,src/net_processing.cpp
jnewbery,2020-12-04 11:53:32,fixed,https://github.com/bitcoin/bitcoin/pull/19910#discussion_r536045568,536045568,src/net_processing.h
jnewbery,2020-12-04 11:54:11,"This makes is clear that NRVO can be used, since there's only one return statement. I'm not sure if the previous version would have used copy elision.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r536045912,536045912,src/net_processing.cpp
promag,2020-12-04 12:00:18,This also avoids duplicate lookup on m_peer_map :+1:,https://github.com/bitcoin/bitcoin/pull/19910#discussion_r536049347,536049347,src/net_processing.cpp
theuni,2020-12-04 14:31:58,"This is a little awkward because of the comment in RemovePeer:\n```c++\n/** Get a shared pointer to the Peer object and remove it from m_peer_map.\n *  May return an empty shared_ptr if the Peer object can't be found. */\n```\nMight be worth of a comment explaining that _at this point_ the peer is guaranteed to exist, but not afterwards. Then again, that's kinda what the assert means. Shrug.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r536140554,536140554,src/net_processing.cpp
theuni,2020-12-04 14:54:20,"+1 for considering this!\n\nI'd be curious to know if compilers are allowed to rearrange the code before deciding how many return statements there are. I could see this going either way.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r536156231,536156231,src/net_processing.cpp
hebasto,2020-12-05 10:08:10,"Considering the before-change code, to be precise, in C++17 in a return statement, when the operand is a prvalue (the result of the ternary conditional expression), elision of copy/move operations is [mandatory](https://en.cppreference.com/w/cpp/language/copy_elision).\n\nOTOH, NRVO is non-mandatory.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r536646781,536646781,src/net_processing.cpp
jnewbery,2020-12-07 12:02:33,"Thanks @hebasto! Yes, I think you're right. If I'm reading it correctly, the result of the conditional operator is a prvalue (item 5 in https://en.cppreference.com/w/cpp/language/operator_other#Conditional_operator since 4 doesn't apply), and copy elision is mandatory for returning a prvalue.\n\nI've reverted this.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r537453217,537453217,src/net_processing.cpp
hebasto,2020-12-07 12:05:13,"> ... and copy elision is mandatory for returning a prvalue.\n\nGood to have C++17 :)",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r537454856,537454856,src/net_processing.cpp
jnewbery,2020-12-07 12:11:13,"Yeah, I think it's ok for now. Happy to change this if you decide you feel more strongly about it.",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r537458391,537458391,src/net_processing.cpp
hebasto,2020-12-07 12:15:18,"3025ca9e7743d9b96c22e9c6ed7ef051dcea7e54\nI'm curios is it possible to force the mandatory copy/move elision for the return value here as well?",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r537460651,537460651,src/net_processing.cpp
rebroad,2021-09-15 08:00:08,"I'm getting bitcoind crashing due to this assert. It appears that sometimes FinalizeNode gets called twice (from DeleteNode()). Perhaps nRefCount is being increased between the two occurances. This only seems to happen though when there's a delay between them due to UpdateTip(). It's probably a bug I've introduced somewhere, but just leaving this comment as a ""heads up"".",https://github.com/bitcoin/bitcoin/pull/19910#discussion_r708937645,708937645,src/net_processing.cpp
jnewbery,2021-09-15 09:54:54,Thanks. I expect if the bug was present in master we'd have seen it in CI or from a user report.,https://github.com/bitcoin/bitcoin/pull/19910#discussion_r709030496,709030496,src/net_processing.cpp
