DrahtBot,2020-06-14 04:19:45,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19268#issuecomment-643716360,643716360,
naumenkogs,2020-06-14 06:30:12,"Concept ACK.\n\nI don't have a strong opinion on taking either approach (mutex vs documentation-only)",https://github.com/bitcoin/bitcoin/pull/19268#issuecomment-643725331,643725331,
hebasto,2020-07-05 10:57:02,"Updated 877cca538b29bbb7420601e7972fb5635523f507 -> d842e6ac965b528f0d704f54aceb91eae84085fb ([pr19268.01](https://github.com/hebasto/bitcoin/commits/pr19268.01) -> [pr19268.02](https://github.com/hebasto/bitcoin/commits/pr19268.02)):\n\n- rebased\n- implemented @MarcoFalke's [suggestion](https://github.com/bitcoin/bitcoin/pull/19268#discussion_r439748886)",https://github.com/bitcoin/bitcoin/pull/19268#issuecomment-653873471,653873471,
MarcoFalke,2020-07-05 11:30:18,self ACK d842e6ac965b528f0d704f54aceb91eae84085fb,https://github.com/bitcoin/bitcoin/pull/19268#issuecomment-653876941,653876941,
practicalswift,2020-07-10 20:59:16,ACK d842e6ac965b528f0d704f54aceb91eae84085fb: explicit is better than implicit,https://github.com/bitcoin/bitcoin/pull/19268#issuecomment-656887926,656887926,
naumenkogs,2020-07-14 07:24:43,ACK d842e6a,https://github.com/bitcoin/bitcoin/pull/19268#issuecomment-658017314,658017314,
MarcoFalke,2020-06-13 15:53:36,"```suggestion\n    /** Quantize a minimum fee for privacy purpose before broadcast . Not thread-safe due to use of FastRandomContext **/\n```",https://github.com/bitcoin/bitcoin/pull/19268#discussion_r439748886,439748886,src/policy/fees.h
sipa,2020-06-13 15:57:40,"If this is not going to be changed, it's probably better to make it an explicit global.",https://github.com/bitcoin/bitcoin/pull/19268#discussion_r439749183,439749183,src/policy/fees.h
MarcoFalke,2020-06-13 16:05:15,"Oh, I am not suggestion to never change this. This can be changed when net_processing is multi-threaded. Until then documentation and sanitizers are good enough to leave the code as is for now.",https://github.com/bitcoin/bitcoin/pull/19268#discussion_r439749681,439749681,src/policy/fees.h
ajtowns,2020-06-15 04:54:43,"I think it'd make more sense to mark `feeset` as const, than marking the whole object as const, and the parts that change as mutable (given `const X x;`, then `a = x.foo(); b = x.foo(); a == b` ought to be `true` imo). \n\nAdding a `static std::set<double> make_feeset(const CFeeRate&)` member function and using that to initialise feeset via the initializer list looks like it's enough?",https://github.com/bitcoin/bitcoin/pull/19268#discussion_r439929792,439929792,src/policy/fees.h
ajtowns,2020-06-15 05:17:05,"Isn't it as thread safe as a `class A { int a = 0;  public: int increment() { return ++a; } }`, which we'd solve by saying `static A my_a GUARDED_BY(cs_main);` ? And both could be made parallelisable by saying `static thread_local A my_a;` -- it's just that `GUARDED_BY` doesn't work with block-scope statics?\n\nJust adding `// protected by cs_main` at the declaration of filterRounder, or moving ",https://github.com/bitcoin/bitcoin/pull/19268#discussion_r439934536,439934536,src/policy/fees.h
ajtowns,2020-06-15 05:19:53,"Can make `default_feerate` const too -- could make it `constexpr` even, so long as the constructors were also marked constexpr.",https://github.com/bitcoin/bitcoin/pull/19268#discussion_r439935198,439935198,src/net_processing.cpp
hebasto,2020-07-05 11:01:00,[Updated](https://github.com/bitcoin/bitcoin/pull/19268#issuecomment-653873471).,https://github.com/bitcoin/bitcoin/pull/19268#discussion_r449864118,449864118,src/policy/fees.h
