[
  {
    "sha": "b82067bf696c53f22536f9ca2e51949c164f6b06",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODIwNjdiZjY5NmM1M2YyMjUzNmY5Y2EyZTUxOTQ5YzE2NGY2YjA2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-10-26T00:36:56Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-08-06T01:07:00Z"
      },
      "message": "wallet: try -avoidpartialspends mode and use its result if fees are below threshold\n\nThe threshold is defined by a new max avoid partial spends fee flag, which defaults to 0 (i.e. if fees are unchanged, use the grouped option).",
      "tree": {
        "sha": "b97e109eda5ddb15623ea3a1f24332d6328b2507",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b97e109eda5ddb15623ea3a1f24332d6328b2507"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b82067bf696c53f22536f9ca2e51949c164f6b06",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl8rV7QACgkQV692LbM1\nMyKHWxAAln2hgGxVXySNUZuI/yeezsYUm1iKKqYH2ZUw35M4+D5xKJN+wGa6MoAr\n8qVGCSljb2ZJIEQgtxz6T5a/4Vd2+ZS81OyFLnw1roYY3ROn+m6wRCkjn3F9zdTp\nZ8tLeZKnK4SnQOmq3nF9YLRDhUajZXO/U+YuTDqHS+JtSXZcg6lVr4sknW4degU/\nmS41DMSM44QD1ca/NwvU7jVN/c6S6kbGAjUqL1R0wdJnKeBz7B17aHKH0hiXS8B+\n2ucUNUo5IElt9ql98CO8O2EipZOPj79kSREiRaZvXwRjZfwOQmM4T4/mP7HFm8Ed\nAIzwsznXAkOe+LTRFcaknaGZkAbQYdONPJUYs/a3cpzScUnmQwO+EYUUc1+iguM0\njhRFDy0S52vMl9ByZcVBiGkRfz8ndyYgkavwgMfcAzTBnXYm84udGOUC4whNt5et\nV14PXZXJs4KCB5jLWLJq77AIn/sC56uZBA+tEDsPBy5VzyrgeheYIzZ9zOI0PNte\n37KqsRqRhExFOLvzExxuntc3nsWmMmbdX4lC9SfGdND+T0Wn/0loubAgcgEjdos2\ncsWPy1fHBWzVFuYeoru43IuvBETLdHJ3nz0Hc/N5IIktJsOYeyZW3jxamg45WX8v\nvLPviUj0np6YHM0nRVH3HMR4pIRvgnsaZ3eZKqQGI1IT7jaXr94=\n=R/1Y\n-----END PGP SIGNATURE-----",
        "payload": "tree b97e109eda5ddb15623ea3a1f24332d6328b2507\nparent e3272ff2907ca7a769d624698831a8605251b295\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1540514216 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1596676020 +0900\n\nwallet: try -avoidpartialspends mode and use its result if fees are below threshold\n\nThe threshold is defined by a new max avoid partial spends fee flag, which defaults to 0 (i.e. if fees are unchanged, use the grouped option).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b82067bf696c53f22536f9ca2e51949c164f6b06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b82067bf696c53f22536f9ca2e51949c164f6b06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b82067bf696c53f22536f9ca2e51949c164f6b06/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3272ff2907ca7a769d624698831a8605251b295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3272ff2907ca7a769d624698831a8605251b295",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3272ff2907ca7a769d624698831a8605251b295"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 71,
      "deletions": 1
    },
    "files": [
      {
        "sha": "380d4eb8ac64ed36be1a86e5b652a9ef86f52cce",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b82067bf696c53f22536f9ca2e51949c164f6b06/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b82067bf696c53f22536f9ca2e51949c164f6b06/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=b82067bf696c53f22536f9ca2e51949c164f6b06",
        "patch": "@@ -35,6 +35,7 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-discardfee=<amt>\",\n         \"-fallbackfee=<amt>\",\n         \"-keypool=<n>\",\n+        \"-maxapsfee=<n>\",\n         \"-maxtxfee=<amt>\",\n         \"-mintxfee=<amt>\",\n         \"-paytxfee=<amt>\","
      },
      {
        "sha": "4b45de91f3198f8d187f5fbeb70088f2e234372b",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b82067bf696c53f22536f9ca2e51949c164f6b06/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b82067bf696c53f22536f9ca2e51949c164f6b06/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=b82067bf696c53f22536f9ca2e51949c164f6b06",
        "patch": "@@ -48,6 +48,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data. 0 to entirely disable the fallbackfee feature. (default: %s)\",\n                                                                CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u). Warning: Smaller sizes may increase the risk of losing funds when restoring from an old backup, if none of the addresses in the original keypool have been used.\", DEFAULT_KEYPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-maxapsfee=<n>\", strprintf(\"Spend up to this amount in additional (absolute) fees (in %s) if it allows the use of partial spend avoidance (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_MAX_AVOIDPARTIALSPEND_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\","
      },
      {
        "sha": "baf209e16cb2c65052c20ddf0a6dc5de5b9159c8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 1,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b82067bf696c53f22536f9ca2e51949c164f6b06/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b82067bf696c53f22536f9ca2e51949c164f6b06/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b82067bf696c53f22536f9ca2e51949c164f6b06",
        "patch": "@@ -2706,7 +2706,14 @@ OutputType CWallet::TransactionChangeType(const Optional<OutputType>& change_typ\n     return m_default_address_type;\n }\n \n-bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, bool sign)\n+bool CWallet::CreateTransactionInternal(\n+        const std::vector<CRecipient>& vecSend,\n+        CTransactionRef& tx,\n+        CAmount& nFeeRet,\n+        int& nChangePosInOut,\n+        bilingual_str& error,\n+        const CCoinControl& coin_control,\n+        bool sign)\n {\n     CAmount nValue = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n@@ -3061,6 +3068,39 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     return true;\n }\n \n+bool CWallet::CreateTransaction(\n+        const std::vector<CRecipient>& vecSend,\n+        CTransactionRef& tx,\n+        CAmount& nFeeRet,\n+        int& nChangePosInOut,\n+        bilingual_str& error,\n+        const CCoinControl& coin_control,\n+        bool sign)\n+{\n+    int nChangePosIn = nChangePosInOut;\n+    CTransactionRef tx2 = tx;\n+    bool res = CreateTransactionInternal(vecSend, tx, nFeeRet, nChangePosInOut, error, coin_control, sign);\n+    // try with avoidpartialspends unless it's enabled already\n+    if (res && nFeeRet > 0 /* 0 means non-functional fee rate estimation */ && m_max_aps_fee > -1 && !coin_control.m_avoid_partial_spends) {\n+        CCoinControl tmp_cc = coin_control;\n+        tmp_cc.m_avoid_partial_spends = true;\n+        CAmount nFeeRet2;\n+        int nChangePosInOut2 = nChangePosIn;\n+        bilingual_str error2; // fired and forgotten; if an error occurs, we discard the results\n+        if (CreateTransactionInternal(vecSend, tx2, nFeeRet2, nChangePosInOut2, error2, tmp_cc, sign)) {\n+            // if fee of this alternative one is within the range of the max fee, we use this one\n+            const bool use_aps = nFeeRet2 <= nFeeRet + m_max_aps_fee;\n+            WalletLogPrintf(\"Fee non-grouped = %lld, grouped = %lld, using %s\\n\", nFeeRet, nFeeRet2, use_aps ? \"grouped\" : \"non-grouped\");\n+            if (use_aps) {\n+                tx = tx2;\n+                nFeeRet = nFeeRet2;\n+                nChangePosInOut = nChangePosInOut2;\n+            }\n+        }\n+    }\n+    return res;\n+}\n+\n void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm)\n {\n     LOCK(cs_wallet);\n@@ -3878,6 +3918,21 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         walletInstance->m_min_fee = CFeeRate(n);\n     }\n \n+    if (gArgs.IsArgSet(\"-maxapsfee\")) {\n+        CAmount n = 0;\n+        if (gArgs.GetArg(\"-maxapsfee\", \"\") == \"-1\") {\n+            n = -1;\n+        } else if (!ParseMoney(gArgs.GetArg(\"-maxapsfee\", \"\"), n)) {\n+            error = AmountErrMsg(\"maxapsfee\", gArgs.GetArg(\"-maxapsfee\", \"\"));\n+            return nullptr;\n+        }\n+        if (n > HIGH_APS_FEE) {\n+            warnings.push_back(AmountHighWarn(\"-maxapsfee\") + Untranslated(\" \") +\n+                              _(\"This is the maximum transaction fee you pay to prioritize partial spend avoidance over regular coin selection.\"));\n+        }\n+        walletInstance->m_max_aps_fee = n;\n+    }\n+\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {"
      },
      {
        "sha": "6d9512f59a6437cb83207d9fac9cd8f7ce2d8a3e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b82067bf696c53f22536f9ca2e51949c164f6b06/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b82067bf696c53f22536f9ca2e51949c164f6b06/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b82067bf696c53f22536f9ca2e51949c164f6b06",
        "patch": "@@ -72,6 +72,16 @@ static const CAmount DEFAULT_FALLBACK_FEE = 0;\n static const CAmount DEFAULT_DISCARD_FEE = 10000;\n //! -mintxfee default\n static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n+/**\n+ * maximum fee increase allowed to do partial spend avoidance, even for nodes with this feature disabled by default\n+ *\n+ * A value of -1 disables this feature completely.\n+ * A value of 0 (current default) means to attempt to do partial spend avoidance, and use its results if the fees remain *unchanged*\n+ * A value > 0 means to do partial spend avoidance if the fee difference against a regular coin selection instance is in the range [0..value].\n+ */\n+static const CAmount DEFAULT_MAX_AVOIDPARTIALSPEND_FEE = 0;\n+//! discourage APS fee higher than this amount\n+constexpr CAmount HIGH_APS_FEE{COIN / 10000};\n //! minimum recommended increment for BIP 125 replacement txs\n static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n //! Default for -spendzeroconfchange\n@@ -719,6 +729,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     // ScriptPubKeyMan::GetID. In many cases it will be the hash of an internal structure\n     std::map<uint256, std::unique_ptr<ScriptPubKeyMan>> m_spk_managers;\n \n+    bool CreateTransactionInternal(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, bool sign);\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -1008,6 +1020,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     CFeeRate m_fallback_fee{DEFAULT_FALLBACK_FEE};\n     CFeeRate m_discard_rate{DEFAULT_DISCARD_FEE};\n+    CAmount m_max_aps_fee{DEFAULT_MAX_AVOIDPARTIALSPEND_FEE}; //!< note: this is absolute fee, not fee rate\n     OutputType m_default_address_type{DEFAULT_ADDRESS_TYPE};\n     /**\n      * Default output type for change outputs. When unset, automatically choose type"
      }
    ]
  },
  {
    "sha": "7f13dfb587dd6a7a5b7dfbfe689ae0ce818fe5c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjEzZGZiNTg3ZGQ2YTdhNWI3ZGZiZmU2ODlhZTBjZTgxOGZlNWM5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-10-26T06:41:00Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-08-06T01:25:08Z"
      },
      "message": "test: test the implicit avoid partial spends functionality\n\nCo-authored-by: Fabian Jahr <fjahr@protonmail.com>",
      "tree": {
        "sha": "09281720712ff6387352fd0ddbb16ba1fab418c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09281720712ff6387352fd0ddbb16ba1fab418c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f13dfb587dd6a7a5b7dfbfe689ae0ce818fe5c9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl8rW/QACgkQV692LbM1\nMyJosA//VQ4JHONolLPU8aSST1n1pB2B+/1vIns/+WVqoSjaV4B4BfxUcY6xZ/UE\noAqEFlgXd3vNb66aylkdebv2cpK+Ph1vjuseRWVdR5gv73VJa+dhQKRsZbdc9G0o\nzFXgAuR1Lz5opaXQTzSgWRqEhKVCLjQJloPaZE6b7w9efZ6dYP9T7o4v1JrkuPsb\nBaZw7rpYKlG5mF/sAJZdSZL93vHc8FCooZ5I4nli/hsQMUIFjLnBzBq0MUWZJhO7\n5beohJBXfLg1tIh7z+AS5vaeutoa6SJ5xuYZKM+UbnbnxVDxDaSLOtuSrBwuM4f2\n7QzhGHOP/hkNdTqiRSAuEonHmfCPFTjsDqFtbDdnKaroQr8W/UB0RGEPWilkq6EA\n5e7d9wLsbUFtHffYFQzpkrQKCaCBX1i66xqe+lxHkyWfVJ4UhCcrF12YiE/fftEh\n0DEwzY8/mkAedOGUnjS/jgV86hbJ2L1q+mDID8a+/HPlNCabuGAM5Ge1Xohp8Dh0\nxalMyfeLIIfWkujQd/toY+kpkN0A1eTjFJqtlw3rfxYC1kgCICm9kA7dRcPE3DN0\n6v/GSq2LAqJWN7z8HK95SIBAzKKl+rCAw+7Yl7snXK0zJKU2vzNUdDV+lRGLG1SO\n8LJ+r3TCl/VbttDa3Bec6FW1wlbDYRiAx6/SU3dkfF4mph3pn9I=\n=YeiC\n-----END PGP SIGNATURE-----",
        "payload": "tree 09281720712ff6387352fd0ddbb16ba1fab418c6\nparent b82067bf696c53f22536f9ca2e51949c164f6b06\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1540536060 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1596677108 +0900\n\ntest: test the implicit avoid partial spends functionality\n\nCo-authored-by: Fabian Jahr <fjahr@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f13dfb587dd6a7a5b7dfbfe689ae0ce818fe5c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f13dfb587dd6a7a5b7dfbfe689ae0ce818fe5c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f13dfb587dd6a7a5b7dfbfe689ae0ce818fe5c9/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b82067bf696c53f22536f9ca2e51949c164f6b06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b82067bf696c53f22536f9ca2e51949c164f6b06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b82067bf696c53f22536f9ca2e51949c164f6b06"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 48,
      "deletions": 2
    },
    "files": [
      {
        "sha": "27f06f3a0f2c534fa28e648c2b1a9c3ffe99f58e",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 48,
        "deletions": 2,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f13dfb587dd6a7a5b7dfbfe689ae0ce818fe5c9/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f13dfb587dd6a7a5b7dfbfe689ae0ce818fe5c9/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=7f13dfb587dd6a7a5b7dfbfe689ae0ce818fe5c9",
        "patch": "@@ -15,8 +15,8 @@\n class WalletGroupTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-        self.extra_args = [[], [], ['-avoidpartialspends']]\n+        self.num_nodes = 4\n+        self.extra_args = [[], [], ['-avoidpartialspends'], [\"-maxapsfee=0.0001\"]]\n         self.rpc_timeout = 480\n \n     def skip_test_if_missing_module(self):\n@@ -64,6 +64,52 @@ def run_test(self):\n         assert_approx(v[0], 0.2)\n         assert_approx(v[1], 1.3, 0.0001)\n \n+        # Test 'avoid partial if warranted, even if disabled'\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+        # Nodes 1-2 now have confirmed UTXOs (letters denote destinations):\n+        # Node #1:      Node #2:\n+        # - A  1.0      - D0 1.0\n+        # - B0 1.0      - D1 0.5\n+        # - B1 0.5      - E0 1.0\n+        # - C0 1.0      - E1 0.5\n+        # - C1 0.5      - F  ~1.3\n+        # - D ~0.3\n+        assert_approx(self.nodes[1].getbalance(), 4.3, 0.0001)\n+        assert_approx(self.nodes[2].getbalance(), 4.3, 0.0001)\n+        # Sending 1.4 btc should pick one 1.0 + one more. For node #1,\n+        # this could be (A / B0 / C0) + (B1 / C1 / D). We ensure that it is\n+        # B0 + B1 or C0 + C1, because this avoids partial spends while not being\n+        # detrimental to transaction cost\n+        txid3 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1.4)\n+        tx3 = self.nodes[1].getrawtransaction(txid3, True)\n+        # tx3 should have 2 inputs and 2 outputs\n+        assert_equal(2, len(tx3[\"vin\"]))\n+        assert_equal(2, len(tx3[\"vout\"]))\n+        # the accumulated value should be 1.5, so the outputs should be\n+        # ~0.1 and 1.4 and should come from the same destination\n+        values = [vout[\"value\"] for vout in tx3[\"vout\"]]\n+        values.sort()\n+        assert_approx(values[0], 0.1, 0.0001)\n+        assert_approx(values[1], 1.4)\n+\n+        input_txids = [vin[\"txid\"] for vin in tx3[\"vin\"]]\n+        input_addrs = [self.nodes[1].gettransaction(txid)['details'][0]['address'] for txid in input_txids]\n+        assert_equal(input_addrs[0], input_addrs[1])\n+        # Node 2 enforces avoidpartialspends so needs no checking here\n+\n+        # Test wallet option maxapsfee with Node 3\n+        addr_aps = self.nodes[3].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_aps, 1.0)\n+        self.nodes[0].sendtoaddress(addr_aps, 1.0)\n+        self.nodes[0].generate(1)\n+        txid4 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 0.1)\n+        tx4 = self.nodes[3].getrawtransaction(txid4, True)\n+        # tx4 should have 2 inputs and 2 outputs although one output would\n+        # have been enough and the transaction caused higher fees\n+        assert_equal(2, len(tx4[\"vin\"]))\n+        assert_equal(2, len(tx4[\"vout\"]))\n+\n         # Empty out node2's wallet\n         self.nodes[2].sendtoaddress(address=self.nodes[0].getnewaddress(), amount=self.nodes[2].getbalance(), subtractfeefromamount=True)\n         self.sync_all()"
      }
    ]
  }
]