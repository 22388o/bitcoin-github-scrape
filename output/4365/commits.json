[
  {
    "sha": "7f3b4e95695d50a4970e6eb91faa956ab276f161",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjNiNGU5NTY5NWQ1MGE0OTcwZTZlYjkxZmFhOTU2YWIyNzZmMTYx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-06-17T18:18:13Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-06-23T19:09:52Z"
      },
      "message": "Relax IsStandard rules for pay-to-script-hash transactions\n\nRelax the AreInputsStandard() tests for P2SH transactions --\nallow any Script in a P2SH transaction to be relayed/mined,\nas long as it has 15 or fewer signature operations.\n\nRationale: https://gist.github.com/gavinandresen/88be40c141bc67acb247\n\nI don't have an easy way to test this, but the code changes are\nstraightforward and I've updated the AreInputsStandard unit tests.",
      "tree": {
        "sha": "8e48b2c9616d70d7fe09a70f87f746d8b2e5d961",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e48b2c9616d70d7fe09a70f87f746d8b2e5d961"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f3b4e95695d50a4970e6eb91faa956ab276f161",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlOoe4UACgkQdYgkL74406in7gCfdQ4JDV4MqYf9IqO9hbxqagxx\nqhoAnj08cZlKF9tA5UdjDhnTi4ZBHgRf\n=EDew\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e48b2c9616d70d7fe09a70f87f746d8b2e5d961\nparent 36db6633c314b0f41aeee856f74a8d5d59334dbb\nauthor Gavin Andresen <gavinandresen@gmail.com> 1403029093 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1403550592 -0400\n\nRelax IsStandard rules for pay-to-script-hash transactions\n\nRelax the AreInputsStandard() tests for P2SH transactions --\nallow any Script in a P2SH transaction to be relayed/mined,\nas long as it has 15 or fewer signature operations.\n\nRationale: https://gist.github.com/gavinandresen/88be40c141bc67acb247\n\nI don't have an easy way to test this, but the code changes are\nstraightforward and I've updated the AreInputsStandard unit tests.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f3b4e95695d50a4970e6eb91faa956ab276f161",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f3b4e95695d50a4970e6eb91faa956ab276f161",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f3b4e95695d50a4970e6eb91faa956ab276f161/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36db6633c314b0f41aeee856f74a8d5d59334dbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36db6633c314b0f41aeee856f74a8d5d59334dbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36db6633c314b0f41aeee856f74a8d5d59334dbb"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 97,
      "deletions": 66
    },
    "files": [
      {
        "sha": "ecabd9ec2cd52459eee13bd4644d2d7e329179bd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 20,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f3b4e95695d50a4970e6eb91faa956ab276f161/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f3b4e95695d50a4970e6eb91faa956ab276f161/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7f3b4e95695d50a4970e6eb91faa956ab276f161",
        "patch": "@@ -582,15 +582,13 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n }\n \n //\n-// Check transaction inputs, and make sure any\n-// pay-to-script-hash transactions are evaluating IsStandard scripts\n+// Check transaction inputs to mitigate two\n+// potential denial-of-service attacks:\n //\n-// Why bother? To avoid denial-of-service attacks; an attacker\n-// can submit a standard HASH... OP_EQUAL transaction,\n-// which will get accepted into blocks. The redemption\n-// script can be anything; an attacker could use a very\n-// expensive-to-check-upon-redemption script like:\n-//   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+// 1. scriptSigs with extra data stuffed into them,\n+//    not consumed by scriptPubKey (or P2SH script)\n+// 2. P2SH scripts with a crazy number of expensive\n+//    CHECKSIG/CHECKMULTISIG operations\n //\n bool AreInputsStandard(const CTransaction& tx, CCoinsViewCache& mapInputs)\n {\n@@ -614,8 +612,9 @@ bool AreInputsStandard(const CTransaction& tx, CCoinsViewCache& mapInputs)\n         // Transactions with extra stuff in their scriptSigs are\n         // non-standard. Note that this EvalScript() call will\n         // be quick, because if there are any operations\n-        // beside \"push data\" in the scriptSig the\n-        // IsStandard() call returns false\n+        // beside \"push data\" in the scriptSig\n+        // IsStandard() will have already returned false\n+        // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, tx, i, false, 0))\n             return false;\n@@ -627,16 +626,20 @@ bool AreInputsStandard(const CTransaction& tx, CCoinsViewCache& mapInputs)\n             CScript subscript(stack.back().begin(), stack.back().end());\n             vector<vector<unsigned char> > vSolutions2;\n             txnouttype whichType2;\n-            if (!Solver(subscript, whichType2, vSolutions2))\n-                return false;\n-            if (whichType2 == TX_SCRIPTHASH)\n-                return false;\n-\n-            int tmpExpected;\n-            tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n-            if (tmpExpected < 0)\n-                return false;\n-            nArgsExpected += tmpExpected;\n+            if (Solver(subscript, whichType2, vSolutions2))\n+            {\n+                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n+                if (tmpExpected < 0)\n+                    return false;\n+                nArgsExpected += tmpExpected;\n+            }\n+            else\n+            {\n+                // Any other Script with less than 15 sigops OK:\n+                unsigned int sigops = subscript.GetSigOpCount(true);\n+                // ... extra data left on the stack after execution is OK, too:\n+                return (sigops <= MAX_P2SH_SIGOPS);\n+            }\n         }\n \n         if (stack.size() != (unsigned int)nArgsExpected)"
      },
      {
        "sha": "ff1f742d1e421c6db090bc2df155eceb705180b3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f3b4e95695d50a4970e6eb91faa956ab276f161/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f3b4e95695d50a4970e6eb91faa956ab276f161/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7f3b4e95695d50a4970e6eb91faa956ab276f161",
        "patch": "@@ -43,6 +43,8 @@ static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n+/** Maxiumum number of signature check operations in an IsStandard() P2SH script */\n+static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of orphan transactions kept in memory */\n static const unsigned int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE/100;\n /** Default for -maxorphanblocks, maximum number of orphan blocks kept in memory */"
      },
      {
        "sha": "6ae2b9cf64f8eb50643da64f562432cdd3f668bb",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 46,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f3b4e95695d50a4970e6eb91faa956ab276f161/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f3b4e95695d50a4970e6eb91faa956ab276f161/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=7f3b4e95695d50a4970e6eb91faa956ab276f161",
        "patch": "@@ -256,66 +256,86 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(coinsDummy);\n     CBasicKeyStore keystore;\n-    CKey key[3];\n+    CKey key[6];\n     vector<CPubKey> keys;\n-    for (int i = 0; i < 3; i++)\n+    for (int i = 0; i < 6; i++)\n     {\n         key[i].MakeNewKey(true);\n         keystore.AddKey(key[i]);\n-        keys.push_back(key[i].GetPubKey());\n     }\n+    for (int i = 0; i < 3; i++)\n+        keys.push_back(key[i].GetPubKey());\n \n     CMutableTransaction txFrom;\n-    txFrom.vout.resize(6);\n+    txFrom.vout.resize(7);\n \n     // First three are standard:\n     CScript pay1; pay1.SetDestination(key[0].GetPubKey().GetID());\n     keystore.AddCScript(pay1);\n-    CScript payScriptHash1; payScriptHash1.SetDestination(pay1.GetID());\n     CScript pay1of3; pay1of3.SetMultisig(1, keys);\n \n-    txFrom.vout[0].scriptPubKey = payScriptHash1;\n+    txFrom.vout[0].scriptPubKey.SetDestination(pay1.GetID()); // P2SH (OP_CHECKSIG)\n     txFrom.vout[0].nValue = 1000;\n-    txFrom.vout[1].scriptPubKey = pay1;\n+    txFrom.vout[1].scriptPubKey = pay1; // ordinary OP_CHECKSIG\n     txFrom.vout[1].nValue = 2000;\n-    txFrom.vout[2].scriptPubKey = pay1of3;\n+    txFrom.vout[2].scriptPubKey = pay1of3; // ordinary OP_CHECKMULTISIG\n     txFrom.vout[2].nValue = 3000;\n \n-    // Last three non-standard:\n-    CScript empty;\n-    keystore.AddCScript(empty);\n-    txFrom.vout[3].scriptPubKey = empty;\n+    // vout[3] is complicated 1-of-3 AND 2-of-3\n+    // ... that is OK if wrapped in P2SH:\n+    CScript oneAndTwo;\n+    oneAndTwo << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey();\n+    oneAndTwo << OP_3 << OP_CHECKMULTISIGVERIFY;\n+    oneAndTwo << OP_2 << key[3].GetPubKey() << key[4].GetPubKey() << key[5].GetPubKey();\n+    oneAndTwo << OP_3 << OP_CHECKMULTISIG;\n+    keystore.AddCScript(oneAndTwo);\n+    txFrom.vout[3].scriptPubKey.SetDestination(oneAndTwo.GetID());\n     txFrom.vout[3].nValue = 4000;\n-    // Can't use SetPayToScriptHash, it checks for the empty Script. So:\n-    txFrom.vout[4].scriptPubKey << OP_HASH160 << Hash160(empty) << OP_EQUAL;\n+\n+    // vout[4] is max sigops:\n+    CScript fifteenSigops; fifteenSigops << OP_1;\n+    for (int i = 0; i < MAX_P2SH_SIGOPS; i++)\n+        fifteenSigops << key[i%3].GetPubKey();\n+    fifteenSigops << OP_15 << OP_CHECKMULTISIG;\n+    keystore.AddCScript(fifteenSigops);\n+    txFrom.vout[4].scriptPubKey.SetDestination(fifteenSigops.GetID());\n     txFrom.vout[4].nValue = 5000;\n-    CScript oneOfEleven;\n-    oneOfEleven << OP_1;\n-    for (int i = 0; i < 11; i++)\n-        oneOfEleven << key[0].GetPubKey();\n-    oneOfEleven << OP_11 << OP_CHECKMULTISIG;\n-    txFrom.vout[5].scriptPubKey.SetDestination(oneOfEleven.GetID());\n-    txFrom.vout[5].nValue = 6000;\n+\n+    // vout[5/6] are non-standard because they exceed MAX_P2SH_SIGOPS\n+    CScript sixteenSigops; sixteenSigops << OP_16 << OP_CHECKMULTISIG;\n+    keystore.AddCScript(sixteenSigops);\n+    txFrom.vout[5].scriptPubKey.SetDestination(fifteenSigops.GetID());\n+    txFrom.vout[5].nValue = 5000;\n+    CScript twentySigops; twentySigops << OP_CHECKMULTISIG;\n+    keystore.AddCScript(twentySigops);\n+    txFrom.vout[6].scriptPubKey.SetDestination(twentySigops.GetID());\n+    txFrom.vout[6].nValue = 6000;\n+\n \n     coins.SetCoins(txFrom.GetHash(), CCoins(txFrom, 0));\n \n     CMutableTransaction txTo;\n     txTo.vout.resize(1);\n     txTo.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n \n-    txTo.vin.resize(3);\n-    txTo.vin[0].prevout.n = 0;\n-    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin.resize(5);\n+    for (int i = 0; i < 5; i++)\n+    {\n+        txTo.vin[i].prevout.n = i;\n+        txTo.vin[i].prevout.hash = txFrom.GetHash();\n+    }\n     BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 0));\n-    txTo.vin[1].prevout.n = 1;\n-    txTo.vin[1].prevout.hash = txFrom.GetHash();\n     BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 1));\n-    txTo.vin[2].prevout.n = 2;\n-    txTo.vin[2].prevout.hash = txFrom.GetHash();\n     BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 2));\n+    // SignSignature doesn't know how to sign these. We're\n+    // not testing validating signatures, so just create\n+    // dummy signatures that DO include the correct P2SH scripts:\n+    txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n+    txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n \n     BOOST_CHECK(::AreInputsStandard(txTo, coins));\n-    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 1U);\n+    // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n+    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 22U);\n \n     // Make sure adding crap to the scriptSigs makes them non-standard:\n     for (int i = 0; i < 3; i++)\n@@ -326,23 +346,29 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         txTo.vin[i].scriptSig = t;\n     }\n \n-    CMutableTransaction txToNonStd;\n-    txToNonStd.vout.resize(1);\n-    txToNonStd.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n-    txToNonStd.vout[0].nValue = 1000;\n-    txToNonStd.vin.resize(2);\n-    txToNonStd.vin[0].prevout.n = 4;\n-    txToNonStd.vin[0].prevout.hash = txFrom.GetHash();\n-    txToNonStd.vin[0].scriptSig << Serialize(empty);\n-    txToNonStd.vin[1].prevout.n = 5;\n-    txToNonStd.vin[1].prevout.hash = txFrom.GetHash();\n-    txToNonStd.vin[1].scriptSig << OP_0 << Serialize(oneOfEleven);\n-\n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd, coins));\n-    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd, coins), 11U);\n-\n-    txToNonStd.vin[0].scriptSig.clear();\n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd, coins));\n+    CMutableTransaction txToNonStd1;\n+    txToNonStd1.vout.resize(1);\n+    txToNonStd1.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txToNonStd1.vout[0].nValue = 1000;\n+    txToNonStd1.vin.resize(1);\n+    txToNonStd1.vin[0].prevout.n = 5;\n+    txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n+    txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n+\n+    BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n+    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n+\n+    CMutableTransaction txToNonStd2;\n+    txToNonStd2.vout.resize(1);\n+    txToNonStd2.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txToNonStd2.vout[0].nValue = 1000;\n+    txToNonStd2.vin.resize(1);\n+    txToNonStd2.vin[0].prevout.n = 6;\n+    txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n+    txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n+\n+    BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n+    BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd2, coins), 20U);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]