[
  {
    "sha": "6ad74db2d8345dade45bb5a7b56a42687f625358",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWQ3NGRiMmQ4MzQ1ZGFkZTQ1YmI1YTdiNTZhNDI2ODdmNjI1MzU4",
    "commit": {
      "author": {
        "name": "Davide Gessa",
        "email": "gessadavide@gmail.com",
        "date": "2019-05-13T14:19:02Z"
      },
      "committer": {
        "name": "Davide Gessa",
        "email": "gessadavide@gmail.com",
        "date": "2019-05-16T07:12:26Z"
      },
      "message": "banman: migrate banlevel from int to enum",
      "tree": {
        "sha": "3acbbcc39fcc0a6edad34ba2023a95a7f57e66dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3acbbcc39fcc0a6edad34ba2023a95a7f57e66dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ad74db2d8345dade45bb5a7b56a42687f625358",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad74db2d8345dade45bb5a7b56a42687f625358",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad74db2d8345dade45bb5a7b56a42687f625358",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad74db2d8345dade45bb5a7b56a42687f625358/comments",
    "author": {
      "login": "dakk",
      "id": 1060425,
      "node_id": "MDQ6VXNlcjEwNjA0MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1060425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dakk",
      "html_url": "https://github.com/dakk",
      "followers_url": "https://api.github.com/users/dakk/followers",
      "following_url": "https://api.github.com/users/dakk/following{/other_user}",
      "gists_url": "https://api.github.com/users/dakk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dakk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dakk/subscriptions",
      "organizations_url": "https://api.github.com/users/dakk/orgs",
      "repos_url": "https://api.github.com/users/dakk/repos",
      "events_url": "https://api.github.com/users/dakk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dakk/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dakk",
      "id": 1060425,
      "node_id": "MDQ6VXNlcjEwNjA0MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1060425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dakk",
      "html_url": "https://github.com/dakk",
      "followers_url": "https://api.github.com/users/dakk/followers",
      "following_url": "https://api.github.com/users/dakk/following{/other_user}",
      "gists_url": "https://api.github.com/users/dakk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dakk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dakk/subscriptions",
      "organizations_url": "https://api.github.com/users/dakk/orgs",
      "repos_url": "https://api.github.com/users/dakk/repos",
      "events_url": "https://api.github.com/users/dakk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dakk/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d266dbdecb45bbd69a24ddea5f5cc8e8c153687",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d266dbdecb45bbd69a24ddea5f5cc8e8c153687",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d266dbdecb45bbd69a24ddea5f5cc8e8c153687"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 14,
      "deletions": 11
    },
    "files": [
      {
        "sha": "d1944c81738d21d48e3416be7eccbe23028e7550",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad74db2d8345dade45bb5a7b56a42687f625358/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad74db2d8345dade45bb5a7b56a42687f625358/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=6ad74db2d8345dade45bb5a7b56a42687f625358",
        "patch": "@@ -67,22 +67,19 @@ void BanMan::ClearBanned()\n     if (m_client_interface) m_client_interface->BannedListChanged();\n }\n \n-int BanMan::IsBannedLevel(CNetAddr net_addr)\n+BanLevel BanMan::IsBannedLevel(CNetAddr net_addr)\n {\n     // Returns the most severe level of banning that applies to this address.\n-    // 0 - Not banned\n-    // 1 - Automatic misbehavior ban\n-    // 2 - Any other ban\n-    int level = 0;\n+    BanLevel level = BanLevel::NOT_BANNED;\n     auto current_time = GetTime();\n     LOCK(m_cs_banned);\n     for (const auto& it : m_banned) {\n         CSubNet sub_net = it.first;\n         CBanEntry ban_entry = it.second;\n \n         if (current_time < ban_entry.nBanUntil && sub_net.Match(net_addr)) {\n-            if (ban_entry.banReason != BanReasonNodeMisbehaving) return 2;\n-            level = 1;\n+            if (ban_entry.banReason != BanReasonNodeMisbehaving) return BanLevel::ANY_OTHER_BAN;\n+            level = BanLevel::AUTOMATIC_MISBEHAVIOUR_BAN;\n         }\n     }\n     return level;"
      },
      {
        "sha": "2f813c07ca4d923ae6de115d4af211d5067f78fd",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad74db2d8345dade45bb5a7b56a42687f625358/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad74db2d8345dade45bb5a7b56a42687f625358/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=6ad74db2d8345dade45bb5a7b56a42687f625358",
        "patch": "@@ -34,6 +34,12 @@ class CSubNet;\n // between nodes running old code and nodes running\n // new code.\n \n+enum class BanLevel {\n+    NOT_BANNED                  =    0,\n+    AUTOMATIC_MISBEHAVIOUR_BAN  =    1,\n+    ANY_OTHER_BAN               =    2\n+};\n+\n class BanMan\n {\n public:\n@@ -42,7 +48,7 @@ class BanMan\n     void Ban(const CNetAddr& net_addr, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n     void Ban(const CSubNet& sub_net, const BanReason& ban_reason, int64_t ban_time_offset = 0, bool since_unix_epoch = false);\n     void ClearBanned();\n-    int IsBannedLevel(CNetAddr net_addr);\n+    BanLevel IsBannedLevel(CNetAddr net_addr);\n     bool IsBanned(CNetAddr net_addr);\n     bool IsBanned(CSubNet sub_net);\n     bool Unban(const CNetAddr& net_addr);"
      },
      {
        "sha": "80931479efc116884a7dcbaf4400d59a35989400",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad74db2d8345dade45bb5a7b56a42687f625358/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad74db2d8345dade45bb5a7b56a42687f625358/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6ad74db2d8345dade45bb5a7b56a42687f625358",
        "patch": "@@ -933,11 +933,11 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     // on all platforms.  Set it again here just to be sure.\n     SetSocketNoDelay(hSocket);\n \n-    int bannedlevel = m_banman ? m_banman->IsBannedLevel(addr) : 0;\n+    BanLevel bannedlevel = m_banman ? m_banman->IsBannedLevel(addr) : BanLevel::NOT_BANNED;\n \n     // Don't accept connections from banned peers, but if our inbound slots aren't almost full, accept\n     // if the only banning reason was an automatic misbehavior ban.\n-    if (!whitelisted && bannedlevel > ((nInbound + 1 < nMaxInbound) ? 1 : 0))\n+    if (!whitelisted && bannedlevel > ((nInbound + 1 < nMaxInbound) ? BanLevel::AUTOMATIC_MISBEHAVIOUR_BAN : BanLevel::NOT_BANNED))\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n@@ -961,7 +961,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n-    pnode->m_prefer_evict = bannedlevel > 0;\n+    pnode->m_prefer_evict = bannedlevel != BanLevel::NOT_BANNED;\n     m_msgproc->InitializeNode(pnode);\n \n     LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());"
      }
    ]
  }
]