[
  {
    "sha": "e9a0e4d7a25f2a41641ce46011cabe1195a77285",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWEwZTRkN2EyNWYyYTQxNjQxY2U0NjAxMWNhYmUxMTk1YTc3Mjg1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-05-27T04:19:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-05T05:21:34Z"
      },
      "message": "Execute command specified by -coinbaser when creating a new block, which can output data to control where the generation goes",
      "tree": {
        "sha": "56814cac40d75fd0ed50a1d0e1fa55ce83f0f1a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56814cac40d75fd0ed50a1d0e1fa55ce83f0f1a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9a0e4d7a25f2a41641ce46011cabe1195a77285",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a0e4d7a25f2a41641ce46011cabe1195a77285",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a0e4d7a25f2a41641ce46011cabe1195a77285",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a0e4d7a25f2a41641ce46011cabe1195a77285/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce148944c776ae8e91cc058f44ddce356c7cebc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce148944c776ae8e91cc058f44ddce356c7cebc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce148944c776ae8e91cc058f44ddce356c7cebc9"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 67,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a98a5b0d6430b40aa12de8337bb2c0c7bd7699ad",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 1,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a0e4d7a25f2a41641ce46011cabe1195a77285/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a0e4d7a25f2a41641ce46011cabe1195a77285/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e9a0e4d7a25f2a41641ce46011cabe1195a77285",
        "patch": "@@ -3224,6 +3224,66 @@ class COrphan\n };\n \n \n+#ifndef __WXMSW__\n+int DoCoinbaser_I(CBlock* pblock, uint64 nTotal, FILE* file)\n+{\n+    int nCount;\n+    if (fscanf(file, \"%d\\n\", &nCount) != 1)\n+    {\n+        printf(\"DoCoinbaser(): failed to fscanf count\\n\");\n+        return -2;\n+    }\n+    pblock->vtx[0].vout.resize(nCount + 1);\n+    uint64 nDistributed = 0;\n+    for (int i = 1; i <= nCount; ++i)\n+    {\n+        uint64 nValue;\n+        if (fscanf(file, \"%\" PRI64u \"\\n\", &nValue) != 1)\n+        {\n+            printf(\"DoCoinbaser(): failed to fscanf amount for transaction #%d\\n\", i);\n+            return -(0x1000 | i);\n+        }\n+        pblock->vtx[0].vout[i].nValue = nValue;\n+        nDistributed += nValue;\n+        char strAddr[35];\n+        if (fscanf(file, \"%34s\\n\", strAddr) != 1)\n+        {\n+            printf(\"DoCoinbaser(): failed to fscanf address for transaction #%d\\n\", i);\n+            return -(0x2000 | i);\n+        }\n+        if (!pblock->vtx[0].vout[i].scriptPubKey.SetBitcoinAddress(string(strAddr)))\n+        {\n+            printf(\"DoCoinbaser(): invalid bitcoin address for transaction #%d\\n\", i);\n+            return -(0x3000 | i);\n+        }\n+    }\n+    if (nTotal < nDistributed)\n+    {\n+        printf(\"DoCoinbaser(): attempt to distribute %\" PRI64u \"/%\" PRI64u \"\\n\", nDistributed, nTotal);\n+        return -3;\n+    }\n+    uint64 nMine = nTotal - nDistributed;\n+    printf(\"DoCoinbaser(): total distributed: %\" PRI64u \"/%\" PRI64u \" = %\" PRI64u \" for me\\n\", nDistributed, nTotal, nMine);\n+    pblock->vtx[0].vout[0].nValue = nMine;\n+    return 0;\n+}\n+\n+int DoCoinbaser(CBlock* pblock, uint64 nTotal)\n+{\n+    FILE* file = popen(mapArgs[\"-coinbaser\"].c_str(), \"r\");\n+    if (!file)\n+    {\n+        printf(\"DoCoinbaser(): failed to popen: %s\", strerror(errno));\n+        return -1;\n+    }\n+    int rv = DoCoinbaser_I(pblock, nTotal, file);\n+    pclose(file);\n+    if (rv)\n+        pblock->vtx[0].vout.resize(1);\n+    return rv;\n+}\n+#endif\n+\n CBlock* CreateNewBlock(CReserveKey& reservekey)\n {\n     CBlockIndex* pindexPrev = pindexBest;\n@@ -3359,7 +3419,12 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             }\n         }\n     }\n-    pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+    int64 nBlkValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+    pblock->vtx[0].vout[0].nValue = nBlkValue;\n+#ifndef __WXMSW__\n+    if (mapArgs.count(\"-coinbaser\"))\n+        DoCoinbaser(&*pblock, nBlkValue);\n+#endif\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n@@ -3368,6 +3433,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     pblock->nBits          = GetNextWorkRequired(pindexPrev);\n     pblock->nNonce         = 0;\n \n+    pblock->print();\n     return pblock.release();\n }\n "
      }
    ]
  },
  {
    "sha": "b3fb0d04fc17948b513d9f483f98599975b1683c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2ZiMGQwNGZjMTc5NDhiNTEzZDlmNDgzZjk4NTk5OTc1YjE2ODNj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-05-27T04:19:42Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-05T05:21:41Z"
      },
      "message": "coinbaser: replace %d in command line with available funds",
      "tree": {
        "sha": "1236110ac6e344816bdfddbc6a53b0cc73a55f08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1236110ac6e344816bdfddbc6a53b0cc73a55f08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3fb0d04fc17948b513d9f483f98599975b1683c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3fb0d04fc17948b513d9f483f98599975b1683c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3fb0d04fc17948b513d9f483f98599975b1683c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3fb0d04fc17948b513d9f483f98599975b1683c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9a0e4d7a25f2a41641ce46011cabe1195a77285",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a0e4d7a25f2a41641ce46011cabe1195a77285",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a0e4d7a25f2a41641ce46011cabe1195a77285"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 30,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7848c37f3db08e68ca3112f7e398f1fbe14209f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 2,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3fb0d04fc17948b513d9f483f98599975b1683c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3fb0d04fc17948b513d9f483f98599975b1683c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b3fb0d04fc17948b513d9f483f98599975b1683c",
        "patch": "@@ -3270,13 +3270,41 @@ int DoCoinbaser_I(CBlock* pblock, uint64 nTotal, FILE* file)\n \n int DoCoinbaser(CBlock* pblock, uint64 nTotal)\n {\n-    FILE* file = popen(mapArgs[\"-coinbaser\"].c_str(), \"r\");\n+    string strCmd = mapArgs[\"-coinbaser\"];\n+    try\n+    {\n+        char strTotal[11];\n+        int nTotalLen = snprintf(strTotal, 11, \"%\" PRI64u, nTotal);\n+        if (nTotalLen < 1 || nTotalLen > 10)\n+        {\n+            strTotal[0] = '\\0';\n+            nTotalLen = 0;\n+        }\n+        string::size_type nPos;\n+        while ((nPos = strCmd.find(\"%d\")) != string::npos)\n+        {\n+            strCmd.replace(nPos, 2, strTotal, nTotalLen);\n+        }\n+    }\n+    catch (...)\n+    {\n+        return 1;\n+    }\n+    FILE* file = popen(strCmd.c_str(), \"r\");\n     if (!file)\n     {\n         printf(\"DoCoinbaser(): failed to popen: %s\", strerror(errno));\n         return -1;\n     }\n-    int rv = DoCoinbaser_I(pblock, nTotal, file);\n+    int rv;\n+    try\n+    {\n+        rv = DoCoinbaser_I(pblock, nTotal, file);\n+    }\n+    catch (...)\n+    {\n+        rv = 1;\n+    }\n     pclose(file);\n     if (rv)\n         pblock->vtx[0].vout.resize(1);"
      }
    ]
  },
  {
    "sha": "4e6e221902f0fdc3d599391c533779557381d718",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTZlMjIxOTAyZjBmZGMzZDU5OTM5MWM1MzM3Nzk1NTczODFkNzE4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-05T05:17:47Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-05T05:21:55Z"
      },
      "message": "Support for TCP server coinbasers",
      "tree": {
        "sha": "85bcd7f5e7a8e2528d920cb8bebb475d76e4facd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85bcd7f5e7a8e2528d920cb8bebb475d76e4facd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e6e221902f0fdc3d599391c533779557381d718",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e6e221902f0fdc3d599391c533779557381d718",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e6e221902f0fdc3d599391c533779557381d718",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e6e221902f0fdc3d599391c533779557381d718/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3fb0d04fc17948b513d9f483f98599975b1683c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3fb0d04fc17948b513d9f483f98599975b1683c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3fb0d04fc17948b513d9f483f98599975b1683c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "83454629fce236c1de35fec23625358baeeecd0b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6e221902f0fdc3d599391c533779557381d718/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6e221902f0fdc3d599391c533779557381d718/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4e6e221902f0fdc3d599391c533779557381d718",
        "patch": "@@ -3271,6 +3271,23 @@ int DoCoinbaser_I(CBlock* pblock, uint64 nTotal, FILE* file)\n int DoCoinbaser(CBlock* pblock, uint64 nTotal)\n {\n     string strCmd = mapArgs[\"-coinbaser\"];\n+    FILE* file = NULL;\n+    if (!strCmd.compare(0, 4, \"tcp:\"))\n+    {\n+        CAddress addrCoinbaser(strCmd.substr(4), true, 0);\n+        SOCKET hSocket;\n+        if (!ConnectSocket(addrCoinbaser, hSocket))\n+        {\n+            perror(\"DoCoinbaser(): failed to connect\");\n+            return -3;\n+        }\n+        file = fdopen(hSocket, \"r+\");\n+        if (file)\n+            fprintf(file, \"total: %\" PRI64u \"\\n\\n\", nTotal);\n+    }\n+    else\n+    {\n+\n     try\n     {\n         char strTotal[11];\n@@ -3290,12 +3307,16 @@ int DoCoinbaser(CBlock* pblock, uint64 nTotal)\n     {\n         return 1;\n     }\n-    FILE* file = popen(strCmd.c_str(), \"r\");\n+    file = popen(strCmd.c_str(), \"r\");\n+\n+    }\n+\n     if (!file)\n     {\n         printf(\"DoCoinbaser(): failed to popen: %s\", strerror(errno));\n         return -1;\n     }\n+\n     int rv;\n     try\n     {"
      }
    ]
  },
  {
    "sha": "d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmNjNWVmODViZWUzYjhiOWM3OGIxN2NmN2FjYmViNGQwZDM1YjQ5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-25T15:59:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-25T15:59:41Z"
      },
      "message": "Save coinbase, not just extraNonce",
      "tree": {
        "sha": "a5b6ee36bc86d253e42a0560a18846cf612e8725",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5b6ee36bc86d253e42a0560a18846cf612e8725"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e6e221902f0fdc3d599391c533779557381d718",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e6e221902f0fdc3d599391c533779557381d718",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e6e221902f0fdc3d599391c533779557381d718"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0cdd85e5413b84c53842ed0504e9fed2831e5269",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49",
        "patch": "@@ -1318,7 +1318,8 @@ Value getwork(const Array& params, bool fHelp)\n     if (IsInitialBlockDownload())\n         throw JSONRPCError(-10, \"Bitcoin is downloading blocks...\");\n \n-    static map<uint256, pair<CBlock*, unsigned int> > mapNewBlock;\n+    typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n+    static mapNewBlock_t mapNewBlock;\n     static vector<CBlock*> vNewBlock;\n     static CReserveKey reservekey;\n \n@@ -1361,7 +1362,7 @@ Value getwork(const Array& params, bool fHelp)\n         IncrementExtraNonce(pblock, pindexPrev, nExtraNonce, nPrevTime);\n \n         // Save\n-        mapNewBlock[pblock->hashMerkleRoot] = make_pair(pblock, nExtraNonce);\n+        mapNewBlock[pblock->hashMerkleRoot] = make_pair(pblock, pblock->vtx[0].vin[0].scriptSig);\n \n         // Prebuild hash buffers\n         char pmidstate[32];\n@@ -1394,11 +1395,10 @@ Value getwork(const Array& params, bool fHelp)\n         if (!mapNewBlock.count(pdata->hashMerkleRoot))\n             return false;\n         CBlock* pblock = mapNewBlock[pdata->hashMerkleRoot].first;\n-        unsigned int nExtraNonce = mapNewBlock[pdata->hashMerkleRoot].second;\n \n         pblock->nTime = pdata->nTime;\n         pblock->nNonce = pdata->nNonce;\n-        pblock->vtx[0].vin[0].scriptSig = CScript() << pblock->nBits << CBigNum(nExtraNonce);\n+        pblock->vtx[0].vin[0].scriptSig = mapNewBlock[pdata->hashMerkleRoot].second;\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n \n         return CheckWork(pblock, reservekey);"
      }
    ]
  },
  {
    "sha": "29b32459f73ca9378a3a8ba47db8360cf7ba9beb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWIzMjQ1OWY3M2NhOTM3OGEzYThiYTQ3ZGI4MzYwY2Y3YmE5YmVi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-08-03T17:48:16Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-08-03T17:48:16Z"
      },
      "message": "Replace nBits in coinbase scriptSig with arbitrary data set by setworkaux RPC call",
      "tree": {
        "sha": "582824a35f98cd899259fced6b006cf024d4f034",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/582824a35f98cd899259fced6b006cf024d4f034"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29b32459f73ca9378a3a8ba47db8360cf7ba9beb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29b32459f73ca9378a3a8ba47db8360cf7ba9beb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29b32459f73ca9378a3a8ba47db8360cf7ba9beb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29b32459f73ca9378a3a8ba47db8360cf7ba9beb/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6cc5ef85bee3b8b9c78b17cf7acbeb4d0d35b49"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 35,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6614d421ab35d60baed1a4e8eba64cdde18482c6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29b32459f73ca9378a3a8ba47db8360cf7ba9beb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29b32459f73ca9378a3a8ba47db8360cf7ba9beb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=29b32459f73ca9378a3a8ba47db8360cf7ba9beb",
        "patch": "@@ -3487,6 +3487,8 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n }\n \n \n+std::map<std::string, CScript> mapAuxCoinbases;\n+\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce, int64& nPrevTime)\n {\n     // Update nExtraNonce\n@@ -3496,7 +3498,16 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n         nExtraNonce = 1;\n         nPrevTime = nNow;\n     }\n-    pblock->vtx[0].vin[0].scriptSig = CScript() << pblock->nBits << CBigNum(nExtraNonce);\n+\n+    CScript &scriptSig = pblock->vtx[0].vin[0].scriptSig;\n+    scriptSig = CScript();\n+\n+    map<std::string, CScript>::iterator it;\n+    for (it = mapAuxCoinbases.begin() ; it != mapAuxCoinbases.end(); ++it)\n+        scriptSig += (*it).second;\n+\n+    scriptSig << CBigNum(nExtraNonce);\n+\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n "
      },
      {
        "sha": "a0f5b000330646c8560f850ba1654894e5a9cbf3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29b32459f73ca9378a3a8ba47db8360cf7ba9beb/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29b32459f73ca9378a3a8ba47db8360cf7ba9beb/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=29b32459f73ca9378a3a8ba47db8360cf7ba9beb",
        "patch": "@@ -103,6 +103,7 @@ std::string SendMoneyToBitcoinAddress(std::string strAddress, int64 nValue, CWal\n void GenerateBitcoins(bool fGenerate);\n void ThreadBitcoinMiner(void* parg);\n CBlock* CreateNewBlock(CReserveKey& reservekey);\n+extern std::map<std::string, CScript> mapAuxCoinbases;\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce, int64& nPrevTime);\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n bool CheckWork(CBlock* pblock, CReserveKey& reservekey);"
      },
      {
        "sha": "61b870004f1eab939d7463c82bdef13fba51cb68",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29b32459f73ca9378a3a8ba47db8360cf7ba9beb/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29b32459f73ca9378a3a8ba47db8360cf7ba9beb/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=29b32459f73ca9378a3a8ba47db8360cf7ba9beb",
        "patch": "@@ -1300,6 +1300,27 @@ Value validateaddress(const Array& params, bool fHelp)\n }\n \n \n+Value setworkaux(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setworkaux <id> [data]\\n\"\n+            \"If [data] is not specified, deletes aux.\\n\"\n+        );\n+\n+    std::string strId = params[0].get_str();\n+    if (params.size() > 1)\n+    {\n+        std::vector<unsigned char> vchData = ParseHex(params[1].get_str());\n+        mapAuxCoinbases[strId] = CScript(vchData);\n+    }\n+    else\n+        mapAuxCoinbases.erase(strId);\n+\n+    return true;\n+}\n+\n+\n Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -1456,6 +1477,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"sendmany\",              &sendmany),\n     make_pair(\"gettransaction\",        &gettransaction),\n     make_pair(\"listtransactions\",      &listtransactions),\n+    make_pair(\"setworkaux\",            &setworkaux),\n     make_pair(\"getwork\",               &getwork),\n     make_pair(\"listaccounts\",          &listaccounts),\n     make_pair(\"settxfee\",              &settxfee),"
      }
    ]
  },
  {
    "sha": "9c651437cae7822dedc1ff03c67b7537e0450c96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzY1MTQzN2NhZTc4MjJkZWRjMWZmMDNjNjdiNzUzN2UwNDUwYzk2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-08-05T01:58:58Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-08-05T02:17:51Z"
      },
      "message": "Bugfix/safeguard: never create a coinbase scriptSig over 100 bytes long",
      "tree": {
        "sha": "29088fc8b07601c86f38a88f19877e60645b8be0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29088fc8b07601c86f38a88f19877e60645b8be0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c651437cae7822dedc1ff03c67b7537e0450c96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c651437cae7822dedc1ff03c67b7537e0450c96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c651437cae7822dedc1ff03c67b7537e0450c96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c651437cae7822dedc1ff03c67b7537e0450c96/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29b32459f73ca9378a3a8ba47db8360cf7ba9beb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29b32459f73ca9378a3a8ba47db8360cf7ba9beb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29b32459f73ca9378a3a8ba47db8360cf7ba9beb"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "22b7d5ba6671d710ede65a551c746726d95c3db7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c651437cae7822dedc1ff03c67b7537e0450c96/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c651437cae7822dedc1ff03c67b7537e0450c96/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9c651437cae7822dedc1ff03c67b7537e0450c96",
        "patch": "@@ -3500,13 +3500,14 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     }\n \n     CScript &scriptSig = pblock->vtx[0].vin[0].scriptSig;\n-    scriptSig = CScript();\n+    scriptSig = CScript() << CBigNum(nExtraNonce);\n \n     map<std::string, CScript>::iterator it;\n     for (it = mapAuxCoinbases.begin() ; it != mapAuxCoinbases.end(); ++it)\n         scriptSig += (*it).second;\n \n-    scriptSig << CBigNum(nExtraNonce);\n+    if (scriptSig.size() > 100)\n+        scriptSig.resize(100);\n \n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }"
      }
    ]
  },
  {
    "sha": "96f969314d0760b326b7c4c8e1025467032843bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmY5NjkzMTRkMDc2MGIzMjZiN2M0YzhlMTAyNTQ2NzAzMjg0M2Jm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-08-05T02:17:10Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-08-05T02:27:06Z"
      },
      "message": "Check for parse or overflow errors in setworkaux",
      "tree": {
        "sha": "de69fc2cd87c5c8f7bf7714ca95b692efcbb1d6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de69fc2cd87c5c8f7bf7714ca95b692efcbb1d6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96f969314d0760b326b7c4c8e1025467032843bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f969314d0760b326b7c4c8e1025467032843bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96f969314d0760b326b7c4c8e1025467032843bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f969314d0760b326b7c4c8e1025467032843bf/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c651437cae7822dedc1ff03c67b7537e0450c96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c651437cae7822dedc1ff03c67b7537e0450c96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c651437cae7822dedc1ff03c67b7537e0450c96"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 32,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a315030357fd9f3ad0a8613f7f4bd4f0b6ddb0df",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 11,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f969314d0760b326b7c4c8e1025467032843bf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f969314d0760b326b7c4c8e1025467032843bf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=96f969314d0760b326b7c4c8e1025467032843bf",
        "patch": "@@ -3489,26 +3489,37 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n std::map<std::string, CScript> mapAuxCoinbases;\n \n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce, int64& nPrevTime)\n+CScript BuildCoinbaseScriptSig(unsigned int nExtraNonce, bool *pfOverflow)\n {\n-    // Update nExtraNonce\n-    int64 nNow = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n-    if (++nExtraNonce >= 0x7f && nNow > nPrevTime+1)\n-    {\n-        nExtraNonce = 1;\n-        nPrevTime = nNow;\n-    }\n-\n-    CScript &scriptSig = pblock->vtx[0].vin[0].scriptSig;\n-    scriptSig = CScript() << CBigNum(nExtraNonce);\n+    CScript scriptSig = CScript() << CBigNum(nExtraNonce);\n \n     map<std::string, CScript>::iterator it;\n     for (it = mapAuxCoinbases.begin() ; it != mapAuxCoinbases.end(); ++it)\n         scriptSig += (*it).second;\n \n     if (scriptSig.size() > 100)\n+    {\n         scriptSig.resize(100);\n+        if (pfOverflow)\n+            *pfOverflow = true;\n+    }\n+    else\n+        if (pfOverflow)\n+            *pfOverflow = false;\n \n+    return scriptSig;\n+}\n+\n+void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce, int64& nPrevTime)\n+{\n+    // Update nExtraNonce\n+    int64 nNow = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+    if (++nExtraNonce >= 0x7f && nNow > nPrevTime+1)\n+    {\n+        nExtraNonce = 1;\n+        nPrevTime = nNow;\n+    }\n+    pblock->vtx[0].vin[0].scriptSig = BuildCoinbaseScriptSig(nExtraNonce);\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n "
      },
      {
        "sha": "bc3035cea4b9c3145ea4ca07192efabc4161e580",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f969314d0760b326b7c4c8e1025467032843bf/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f969314d0760b326b7c4c8e1025467032843bf/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=96f969314d0760b326b7c4c8e1025467032843bf",
        "patch": "@@ -104,6 +104,7 @@ void GenerateBitcoins(bool fGenerate);\n void ThreadBitcoinMiner(void* parg);\n CBlock* CreateNewBlock(CReserveKey& reservekey);\n extern std::map<std::string, CScript> mapAuxCoinbases;\n+CScript BuildCoinbaseScriptSig(unsigned int nExtraNonce, bool *pfOverflow = NULL);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce, int64& nPrevTime);\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n bool CheckWork(CBlock* pblock, CReserveKey& reservekey);"
      },
      {
        "sha": "30099cd434aa1cd003a311065519b4254bf52c6a",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f969314d0760b326b7c4c8e1025467032843bf/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f969314d0760b326b7c4c8e1025467032843bf/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=96f969314d0760b326b7c4c8e1025467032843bf",
        "patch": "@@ -1311,8 +1311,16 @@ Value setworkaux(const Array& params, bool fHelp)\n     std::string strId = params[0].get_str();\n     if (params.size() > 1)\n     {\n-        std::vector<unsigned char> vchData = ParseHex(params[1].get_str());\n+        std::string strData = params[1].get_str();\n+        std::vector<unsigned char> vchData = ParseHex(strData);\n+        if (vchData.size() * 2 != strData.size())\n+            throw JSONRPCError(-8, \"Failed to parse data as hexadecimal\");\n+        CScript scriptBackup = mapAuxCoinbases[strId];\n         mapAuxCoinbases[strId] = CScript(vchData);\n+        bool fOverflow;\n+        BuildCoinbaseScriptSig(UINT_MAX, &fOverflow);\n+        if (fOverflow)\n+            throw JSONRPCError(-7, \"Change would overflow coinbase script\");\n     }\n     else\n         mapAuxCoinbases.erase(strId);"
      }
    ]
  },
  {
    "sha": "3c54a7b92380a8703ad94a46a756c1993daefe5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzU0YTdiOTIzODBhODcwM2FkOTRhNDZhNzU2YzE5OTNkYWVmZTVk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-03T23:02:27Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-03T23:21:28Z"
      },
      "message": "Merge commit '96f9693' into coinbaser\n\nConflicts:\n\tsrc/main.cpp\n\tsrc/main.h\n\tsrc/rpc.cpp",
      "tree": {
        "sha": "5212df3f0698efb36d234610c59c4d8e7f62c48e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5212df3f0698efb36d234610c59c4d8e7f62c48e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c54a7b92380a8703ad94a46a756c1993daefe5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c54a7b92380a8703ad94a46a756c1993daefe5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c54a7b92380a8703ad94a46a756c1993daefe5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c54a7b92380a8703ad94a46a756c1993daefe5d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7eb151ad0ed441d6fd598551059a9bbfb09e99e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7eb151ad0ed441d6fd598551059a9bbfb09e99e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7eb151ad0ed441d6fd598551059a9bbfb09e99e"
      },
      {
        "sha": "96f969314d0760b326b7c4c8e1025467032843bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f969314d0760b326b7c4c8e1025467032843bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96f969314d0760b326b7c4c8e1025467032843bf"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 194,
      "deletions": 6
    },
    "files": [
      {
        "sha": "bed683df7308df8b74e2aeedb6a68f3ab708d938",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 162,
        "deletions": 6,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c54a7b92380a8703ad94a46a756c1993daefe5d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c54a7b92380a8703ad94a46a756c1993daefe5d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3c54a7b92380a8703ad94a46a756c1993daefe5d",
        "patch": "@@ -7,6 +7,9 @@\n #include \"net.h\"\n #include \"init.h\"\n #include \"cryptopp/sha.h\"\n+\n+#include <limits.h>\n+\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n \n@@ -2652,6 +2655,117 @@ class COrphan\n };\n \n \n+#ifndef __WXMSW__\n+int DoCoinbaser_I(CBlock* pblock, uint64 nTotal, FILE* file)\n+{\n+    int nCount;\n+    if (fscanf(file, \"%d\\n\", &nCount) != 1)\n+    {\n+        printf(\"DoCoinbaser(): failed to fscanf count\\n\");\n+        return -2;\n+    }\n+    pblock->vtx[0].vout.resize(nCount + 1);\n+    uint64 nDistributed = 0;\n+    for (int i = 1; i <= nCount; ++i)\n+    {\n+        uint64 nValue;\n+        if (fscanf(file, \"%\" PRI64u \"\\n\", &nValue) != 1)\n+        {\n+            printf(\"DoCoinbaser(): failed to fscanf amount for transaction #%d\\n\", i);\n+            return -(0x1000 | i);\n+        }\n+        pblock->vtx[0].vout[i].nValue = nValue;\n+        nDistributed += nValue;\n+        char strAddr[35];\n+        if (fscanf(file, \"%34s\\n\", strAddr) != 1)\n+        {\n+            printf(\"DoCoinbaser(): failed to fscanf address for transaction #%d\\n\", i);\n+            return -(0x2000 | i);\n+        }\n+        CBitcoinAddress address;\n+        if (!address.SetString(strAddr))\n+        {\n+            printf(\"DoCoinbaser(): invalid bitcoin address for transaction #%d\\n\", i);\n+            return -(0x3000 | i);\n+        }\n+        pblock->vtx[0].vout[i].scriptPubKey.SetBitcoinAddress(address);\n+    }\n+    if (nTotal < nDistributed)\n+    {\n+        printf(\"DoCoinbaser(): attempt to distribute %\" PRI64u \"/%\" PRI64u \"\\n\", nDistributed, nTotal);\n+        return -3;\n+    }\n+    uint64 nMine = nTotal - nDistributed;\n+    printf(\"DoCoinbaser(): total distributed: %\" PRI64u \"/%\" PRI64u \" = %\" PRI64u \" for me\\n\", nDistributed, nTotal, nMine);\n+    pblock->vtx[0].vout[0].nValue = nMine;\n+    return 0;\n+}\n+\n+int DoCoinbaser(CBlock* pblock, uint64 nTotal)\n+{\n+    string strCmd = mapArgs[\"-coinbaser\"];\n+    FILE* file = NULL;\n+    if (!strCmd.compare(0, 4, \"tcp:\"))\n+    {\n+        CAddress addrCoinbaser(strCmd.substr(4), true, 0);\n+        SOCKET hSocket;\n+        if (!ConnectSocket(addrCoinbaser, hSocket))\n+        {\n+            perror(\"DoCoinbaser(): failed to connect\");\n+            return -3;\n+        }\n+        file = fdopen(hSocket, \"r+\");\n+        if (file)\n+            fprintf(file, \"total: %\" PRI64u \"\\n\\n\", nTotal);\n+    }\n+    else\n+    {\n+\n+    try\n+    {\n+        char strTotal[11];\n+        int nTotalLen = snprintf(strTotal, 11, \"%\" PRI64u, nTotal);\n+        if (nTotalLen < 1 || nTotalLen > 10)\n+        {\n+            strTotal[0] = '\\0';\n+            nTotalLen = 0;\n+        }\n+        string::size_type nPos;\n+        while ((nPos = strCmd.find(\"%d\")) != string::npos)\n+        {\n+            strCmd.replace(nPos, 2, strTotal, nTotalLen);\n+        }\n+    }\n+    catch (...)\n+    {\n+        return 1;\n+    }\n+    file = popen(strCmd.c_str(), \"r\");\n+\n+    }\n+\n+    if (!file)\n+    {\n+        printf(\"DoCoinbaser(): failed to popen: %s\", strerror(errno));\n+        return -1;\n+    }\n+\n+    int rv;\n+    try\n+    {\n+        rv = DoCoinbaser_I(pblock, nTotal, file);\n+    }\n+    catch (...)\n+    {\n+        rv = 1;\n+    }\n+    pclose(file);\n+    if (rv)\n+        pblock->vtx[0].vout.resize(1);\n+    return rv;\n+}\n+#endif\n+\n CBlock* CreateNewBlock(CReserveKey& reservekey)\n {\n     CBlockIndex* pindexPrev = pindexBest;\n@@ -2787,7 +2901,12 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             }\n         }\n     }\n-    pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+    int64 nBlkValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+    pblock->vtx[0].vout[0].nValue = nBlkValue;\n+#ifndef __WXMSW__\n+    if (mapArgs.count(\"-coinbaser\"))\n+        DoCoinbaser(&*pblock, nBlkValue);\n+#endif\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n@@ -2796,21 +2915,58 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     pblock->nBits          = GetNextWorkRequired(pindexPrev);\n     pblock->nNonce         = 0;\n \n+    pblock->print();\n     return pblock.release();\n }\n \n \n+std::map<std::string, CScript> mapAuxCoinbases;\n+\n+CScript BuildCoinbaseScriptSig(uint64 nTime, unsigned int nExtraNonce, bool *pfOverflow)\n+{\n+    CScript scriptSig = CScript() << nTime << CBigNum(nExtraNonce);\n+\n+    map<std::string, CScript>::iterator it;\n+    for (it = mapAuxCoinbases.begin() ; it != mapAuxCoinbases.end(); ++it)\n+        scriptSig += (*it).second;\n+\n+    if (scriptSig.size() > 100)\n+    {\n+        scriptSig.resize(100);\n+        if (pfOverflow)\n+            *pfOverflow = true;\n+    }\n+    else\n+        if (pfOverflow)\n+            *pfOverflow = false;\n+\n+    return scriptSig;\n+}\n+\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n-    static uint256 hashPrevBlock;\n-    if (hashPrevBlock != pblock->hashPrevBlock)\n+    static uint64 nPrevTime = 0;\n+    static bool fBackward = false;\n+    uint64 nNow = GetTime();\n+    if (nNow > nPrevTime + 1)\n     {\n         nExtraNonce = 0;\n-        hashPrevBlock = pblock->hashPrevBlock;\n+        nPrevTime = nNow;\n+        fBackward = false;\n+    }\n+    else\n+    {\n+        if (nNow < nPrevTime && !fBackward)\n+        {\n+            printf(\"IncrementExtraNonce: WARNING: nNow moved backward: %d -> %d\\n\", nPrevTime, nNow);\n+            fBackward = true;\n+        }\n+        if (nExtraNonce == UINT_MAX)\n+            printf(\"IncrementExtraNonce: WARNING: nExtraNonce overflowing!\\n\");\n+        ++nExtraNonce;\n     }\n-    ++nExtraNonce;\n-    pblock->vtx[0].vin[0].scriptSig = CScript() << pblock->nTime << CBigNum(nExtraNonce);\n+    pblock->vtx[0].vin[0].scriptSig = BuildCoinbaseScriptSig(nNow, nExtraNonce);\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n "
      },
      {
        "sha": "791c52ab4360247336b080f4b3100ed3a6e274b1",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c54a7b92380a8703ad94a46a756c1993daefe5d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c54a7b92380a8703ad94a46a756c1993daefe5d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3c54a7b92380a8703ad94a46a756c1993daefe5d",
        "patch": "@@ -94,6 +94,8 @@ bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n CBlock* CreateNewBlock(CReserveKey& reservekey);\n+extern std::map<std::string, CScript> mapAuxCoinbases;\n+CScript BuildCoinbaseScriptSig(uint64 nTime, unsigned int nExtraNonce, bool *pfOverflow = NULL);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);"
      },
      {
        "sha": "2bc63bf806be2eea5fb0a89de11a947c9f6a35db",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c54a7b92380a8703ad94a46a756c1993daefe5d/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c54a7b92380a8703ad94a46a756c1993daefe5d/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=3c54a7b92380a8703ad94a46a756c1993daefe5d",
        "patch": "@@ -1480,6 +1480,35 @@ Value validateaddress(const Array& params, bool fHelp)\n }\n \n \n+Value setworkaux(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setworkaux <id> [data]\\n\"\n+            \"If [data] is not specified, deletes aux.\\n\"\n+        );\n+\n+    std::string strId = params[0].get_str();\n+    if (params.size() > 1)\n+    {\n+        std::string strData = params[1].get_str();\n+        std::vector<unsigned char> vchData = ParseHex(strData);\n+        if (vchData.size() * 2 != strData.size())\n+            throw JSONRPCError(-8, \"Failed to parse data as hexadecimal\");\n+        CScript scriptBackup = mapAuxCoinbases[strId];\n+        mapAuxCoinbases[strId] = CScript(vchData);\n+        bool fOverflow;\n+        BuildCoinbaseScriptSig(0, UINT_MAX, &fOverflow);\n+        if (fOverflow)\n+            throw JSONRPCError(-7, \"Change would overflow coinbase script\");\n+    }\n+    else\n+        mapAuxCoinbases.erase(strId);\n+\n+    return true;\n+}\n+\n+\n Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -1640,6 +1669,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"sendmany\",               &sendmany),\n     make_pair(\"gettransaction\",         &gettransaction),\n     make_pair(\"listtransactions\",       &listtransactions),\n+    make_pair(\"setworkaux\",             &setworkaux),\n     make_pair(\"getwork\",                &getwork),\n     make_pair(\"listaccounts\",           &listaccounts),\n     make_pair(\"settxfee\",               &settxfee),"
      }
    ]
  },
  {
    "sha": "a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWVmYzhjYjEwMTRmYTdkOTczNGQwZjVmNzI0MGRjMGU5ZTIxNmRk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-03T23:21:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-03T23:21:38Z"
      },
      "message": "Document -coinbaser option in --help",
      "tree": {
        "sha": "f21c95349327bfb3547a8c6c39e2b6466d703dc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f21c95349327bfb3547a8c6c39e2b6466d703dc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c54a7b92380a8703ad94a46a756c1993daefe5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c54a7b92380a8703ad94a46a756c1993daefe5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c54a7b92380a8703ad94a46a756c1993daefe5d"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eab901ab48fb4f8bf01dcabe4df6e78ae96de4b0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd",
        "patch": "@@ -199,6 +199,9 @@ bool AppInit2(int argc, char* argv[])\n             \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n             \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n             \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n+#ifndef __WXMSW__\n+            \"  -coinbaser=<cmd> \\t  \"   + _(\"Execute <cmd> to calculate coinbase payees\\n\") +\n+#endif\n             \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\\n\") +\n             \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\\n\");\n "
      }
    ]
  },
  {
    "sha": "59806427d0f10328e0f97c45bd2017eb9dce870e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTgwNjQyN2QwZjEwMzI4ZTBmOTdjNDViZDIwMTdlYjlkY2U4NzBl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-05T22:15:20Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-05T22:15:20Z"
      },
      "message": "Port coinbaser code to Windows",
      "tree": {
        "sha": "1fc05041791762f61a9b2053559728cfa4c37d41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fc05041791762f61a9b2053559728cfa4c37d41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59806427d0f10328e0f97c45bd2017eb9dce870e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59806427d0f10328e0f97c45bd2017eb9dce870e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59806427d0f10328e0f97c45bd2017eb9dce870e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59806427d0f10328e0f97c45bd2017eb9dce870e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1efc8cb1014fa7d9734d0f5f7240dc0e9e216dd"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6bd300447624b2b5e493fde362c99e26ce8edb33",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59806427d0f10328e0f97c45bd2017eb9dce870e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59806427d0f10328e0f97c45bd2017eb9dce870e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=59806427d0f10328e0f97c45bd2017eb9dce870e",
        "patch": "@@ -199,9 +199,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n             \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n             \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n-#ifndef __WXMSW__\n             \"  -coinbaser=<cmd> \\t  \"   + _(\"Execute <cmd> to calculate coinbase payees\\n\") +\n-#endif\n             \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\\n\") +\n             \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\\n\");\n "
      },
      {
        "sha": "126a7d11ab120fa04c9adf8a5a97ad27e7dd8d1b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59806427d0f10328e0f97c45bd2017eb9dce870e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59806427d0f10328e0f97c45bd2017eb9dce870e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=59806427d0f10328e0f97c45bd2017eb9dce870e",
        "patch": "@@ -8,6 +8,9 @@\n #include \"init.h\"\n #include \"cryptopp/sha.h\"\n \n+#ifdef __WXMSW__\n+#include <fcntl.h>\n+#endif\n #include <limits.h>\n \n #include <boost/filesystem.hpp>\n@@ -2655,7 +2658,6 @@ class COrphan\n };\n \n \n-#ifndef __WXMSW__\n int DoCoinbaser_I(CBlock* pblock, uint64 nTotal, FILE* file)\n {\n     int nCount;\n@@ -2714,7 +2716,17 @@ int DoCoinbaser(CBlock* pblock, uint64 nTotal)\n             perror(\"DoCoinbaser(): failed to connect\");\n             return -3;\n         }\n-        file = fdopen(hSocket, \"r+\");\n+#ifdef __WXMSW__\n+        int nSocket = _open_osfhandle((intptr_t)hSocket, _O_RDONLY | _O_TEXT);\n+        if (-1 == nSocket)\n+        {\n+            printf(\"DoCoinbaser(): failed to _open_osfhandle\\n\");\n+            return -4;\n+        }\n+        file = fdopen(nSocket, \"r\");\n+#else\n+        file = fdopen(hSocket, \"r\");\n+#endif\n         if (file)\n             fprintf(file, \"total: %\" PRI64u \"\\n\\n\", nTotal);\n     }\n@@ -2764,7 +2776,6 @@ int DoCoinbaser(CBlock* pblock, uint64 nTotal)\n         pblock->vtx[0].vout.resize(1);\n     return rv;\n }\n-#endif\n \n CBlock* CreateNewBlock(CReserveKey& reservekey)\n {\n@@ -2903,10 +2914,8 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     }\n     int64 nBlkValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n     pblock->vtx[0].vout[0].nValue = nBlkValue;\n-#ifndef __WXMSW__\n     if (mapArgs.count(\"-coinbaser\"))\n         DoCoinbaser(&*pblock, nBlkValue);\n-#endif\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();"
      }
    ]
  },
  {
    "sha": "80828e6da9a38e2a6c74c895331e5461dcd578be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDgyOGU2ZGE5YTM4ZTJhNmM3NGM4OTUzMzFlNTQ2MWRjZDU3OGJl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-08T15:59:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-08T16:01:39Z"
      },
      "message": "Merge branch 'coinbaser'\n\nConflicts:\n\tsrc/bitcoinrpc.cpp\n\tsrc/main.cpp\n\nHand-merging:\n\tsrc/bitcoinrpc.cpp\n\tsrc/main.cpp\n\tsrc/main.h",
      "tree": {
        "sha": "73505ddcf5a49a7a467dedeb1c955982e95e19c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73505ddcf5a49a7a467dedeb1c955982e95e19c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80828e6da9a38e2a6c74c895331e5461dcd578be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80828e6da9a38e2a6c74c895331e5461dcd578be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80828e6da9a38e2a6c74c895331e5461dcd578be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80828e6da9a38e2a6c74c895331e5461dcd578be/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1131a28adf041c62248b4b075a45fd65ee8d132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1131a28adf041c62248b4b075a45fd65ee8d132",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1131a28adf041c62248b4b075a45fd65ee8d132"
      },
      {
        "sha": "59806427d0f10328e0f97c45bd2017eb9dce870e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59806427d0f10328e0f97c45bd2017eb9dce870e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59806427d0f10328e0f97c45bd2017eb9dce870e"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 207,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8d528b18d999b06205771ed482d366f23a100777",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 1,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80828e6da9a38e2a6c74c895331e5461dcd578be/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80828e6da9a38e2a6c74c895331e5461dcd578be/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=80828e6da9a38e2a6c74c895331e5461dcd578be",
        "patch": "@@ -1603,6 +1603,35 @@ Value validateaddress(const Array& params, bool fHelp)\n }\n \n \n+Value setworkaux(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setworkaux <id> [data]\\n\"\n+            \"If [data] is not specified, deletes aux.\\n\"\n+        );\n+\n+    std::string strId = params[0].get_str();\n+    if (params.size() > 1)\n+    {\n+        std::string strData = params[1].get_str();\n+        std::vector<unsigned char> vchData = ParseHex(strData);\n+        if (vchData.size() * 2 != strData.size())\n+            throw JSONRPCError(-8, \"Failed to parse data as hexadecimal\");\n+        CScript scriptBackup = mapAuxCoinbases[strId];\n+        mapAuxCoinbases[strId] = CScript(vchData);\n+        bool fOverflow;\n+        BuildCoinbaseScriptSig(0, UINT_MAX, &fOverflow);\n+        if (fOverflow)\n+            throw JSONRPCError(-7, \"Change would overflow coinbase script\");\n+    }\n+    else\n+        mapAuxCoinbases.erase(strId);\n+\n+    return true;\n+}\n+\n+\n Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -1747,7 +1776,7 @@ Value getmemorypool(const Array& params, bool fHelp)\n             // Create new block\n             if(pblock)\n                 delete pblock;\n-            pblock = CreateNewBlock(reservekey);\n+            pblock = CreateNewBlock(reservekey, false);\n             if (!pblock)\n                 throw JSONRPCError(-7, \"Out of memory\");\n         }\n@@ -1838,6 +1867,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"listtransactions\",       &listtransactions),\n     make_pair(\"signmessage\",           &signmessage),\n     make_pair(\"verifymessage\",         &verifymessage),\n+    make_pair(\"setworkaux\",             &setworkaux),\n     make_pair(\"getwork\",                &getwork),\n     make_pair(\"listaccounts\",           &listaccounts),\n     make_pair(\"settxfee\",               &settxfee),"
      },
      {
        "sha": "59b0ec6d97f351bfd715accb8c8d2d110955d321",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80828e6da9a38e2a6c74c895331e5461dcd578be/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80828e6da9a38e2a6c74c895331e5461dcd578be/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=80828e6da9a38e2a6c74c895331e5461dcd578be",
        "patch": "@@ -201,6 +201,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n             \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n             \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n+            \"  -coinbaser=<cmd> \\t  \"   + _(\"Execute <cmd> to calculate coinbase payees\\n\") +\n             \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\\n\") +\n             \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\\n\");\n "
      },
      {
        "sha": "2ea9289b8e130ff83bee377948e82451d5936f52",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 172,
        "deletions": 7,
        "changes": 179,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80828e6da9a38e2a6c74c895331e5461dcd578be/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80828e6da9a38e2a6c74c895331e5461dcd578be/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=80828e6da9a38e2a6c74c895331e5461dcd578be",
        "patch": "@@ -6,6 +6,12 @@\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n+\n+#ifdef __WXMSW__\n+#include <fcntl.h>\n+#endif\n+#include <limits.h>\n+\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n \n@@ -2690,7 +2696,126 @@ class COrphan\n };\n \n \n-CBlock* CreateNewBlock(CReserveKey& reservekey)\n+int DoCoinbaser_I(CBlock* pblock, uint64 nTotal, FILE* file)\n+{\n+    int nCount;\n+    if (fscanf(file, \"%d\\n\", &nCount) != 1)\n+    {\n+        printf(\"DoCoinbaser(): failed to fscanf count\\n\");\n+        return -2;\n+    }\n+    pblock->vtx[0].vout.resize(nCount + 1);\n+    uint64 nDistributed = 0;\n+    for (int i = 1; i <= nCount; ++i)\n+    {\n+        uint64 nValue;\n+        if (fscanf(file, \"%\" PRI64u \"\\n\", &nValue) != 1)\n+        {\n+            printf(\"DoCoinbaser(): failed to fscanf amount for transaction #%d\\n\", i);\n+            return -(0x1000 | i);\n+        }\n+        pblock->vtx[0].vout[i].nValue = nValue;\n+        nDistributed += nValue;\n+        char strAddr[35];\n+        if (fscanf(file, \"%34s\\n\", strAddr) != 1)\n+        {\n+            printf(\"DoCoinbaser(): failed to fscanf address for transaction #%d\\n\", i);\n+            return -(0x2000 | i);\n+        }\n+        CBitcoinAddress address;\n+        if (!address.SetString(strAddr))\n+        {\n+            printf(\"DoCoinbaser(): invalid bitcoin address for transaction #%d\\n\", i);\n+            return -(0x3000 | i);\n+        }\n+        pblock->vtx[0].vout[i].scriptPubKey.SetBitcoinAddress(address);\n+    }\n+    if (nTotal < nDistributed)\n+    {\n+        printf(\"DoCoinbaser(): attempt to distribute %\" PRI64u \"/%\" PRI64u \"\\n\", nDistributed, nTotal);\n+        return -3;\n+    }\n+    uint64 nMine = nTotal - nDistributed;\n+    printf(\"DoCoinbaser(): total distributed: %\" PRI64u \"/%\" PRI64u \" = %\" PRI64u \" for me\\n\", nDistributed, nTotal, nMine);\n+    pblock->vtx[0].vout[0].nValue = nMine;\n+    return 0;\n+}\n+\n+int DoCoinbaser(CBlock* pblock, uint64 nTotal)\n+{\n+    string strCmd = mapArgs[\"-coinbaser\"];\n+    FILE* file = NULL;\n+    if (!strCmd.compare(0, 4, \"tcp:\"))\n+    {\n+        CAddress addrCoinbaser(strCmd.substr(4), true, 0);\n+        SOCKET hSocket;\n+        if (!ConnectSocket(addrCoinbaser, hSocket))\n+        {\n+            perror(\"DoCoinbaser(): failed to connect\");\n+            return -3;\n+        }\n+#ifdef __WXMSW__\n+        int nSocket = _open_osfhandle((intptr_t)hSocket, _O_RDONLY | _O_TEXT);\n+        if (-1 == nSocket)\n+        {\n+            printf(\"DoCoinbaser(): failed to _open_osfhandle\\n\");\n+            return -4;\n+        }\n+        file = fdopen(nSocket, \"r\");\n+#else\n+        file = fdopen(hSocket, \"r\");\n+#endif\n+        if (file)\n+            fprintf(file, \"total: %\" PRI64u \"\\n\\n\", nTotal);\n+    }\n+    else\n+    {\n+\n+    try\n+    {\n+        char strTotal[11];\n+        int nTotalLen = snprintf(strTotal, 11, \"%\" PRI64u, nTotal);\n+        if (nTotalLen < 1 || nTotalLen > 10)\n+        {\n+            strTotal[0] = '\\0';\n+            nTotalLen = 0;\n+        }\n+        string::size_type nPos;\n+        while ((nPos = strCmd.find(\"%d\")) != string::npos)\n+        {\n+            strCmd.replace(nPos, 2, strTotal, nTotalLen);\n+        }\n+    }\n+    catch (...)\n+    {\n+        return 1;\n+    }\n+    file = popen(strCmd.c_str(), \"r\");\n+\n+    }\n+\n+    if (!file)\n+    {\n+        printf(\"DoCoinbaser(): failed to popen: %s\", strerror(errno));\n+        return -1;\n+    }\n+\n+    int rv;\n+    try\n+    {\n+        rv = DoCoinbaser_I(pblock, nTotal, file);\n+    }\n+    catch (...)\n+    {\n+        rv = 1;\n+    }\n+    pclose(file);\n+    if (rv)\n+        pblock->vtx[0].vout.resize(1);\n+    return rv;\n+}\n+\n+CBlock* CreateNewBlock(CReserveKey& reservekey, bool fUseCoinbaser)\n {\n     CBlockIndex* pindexPrev = pindexBest;\n \n@@ -2825,7 +2950,10 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             }\n         }\n     }\n-    pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+    int64 nBlkValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+    pblock->vtx[0].vout[0].nValue = nBlkValue;\n+    if (fUseCoinbaser && mapArgs.count(\"-coinbaser\"))\n+        DoCoinbaser(&*pblock, nBlkValue);\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n@@ -2834,21 +2962,58 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     pblock->nBits          = GetNextWorkRequired(pindexPrev);\n     pblock->nNonce         = 0;\n \n+    pblock->print();\n     return pblock.release();\n }\n \n \n+std::map<std::string, CScript> mapAuxCoinbases;\n+\n+CScript BuildCoinbaseScriptSig(uint64 nTime, unsigned int nExtraNonce, bool *pfOverflow)\n+{\n+    CScript scriptSig = CScript() << nTime << CBigNum(nExtraNonce);\n+\n+    map<std::string, CScript>::iterator it;\n+    for (it = mapAuxCoinbases.begin() ; it != mapAuxCoinbases.end(); ++it)\n+        scriptSig += (*it).second;\n+\n+    if (scriptSig.size() > 100)\n+    {\n+        scriptSig.resize(100);\n+        if (pfOverflow)\n+            *pfOverflow = true;\n+    }\n+    else\n+        if (pfOverflow)\n+            *pfOverflow = false;\n+\n+    return scriptSig;\n+}\n+\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n-    static uint256 hashPrevBlock;\n-    if (hashPrevBlock != pblock->hashPrevBlock)\n+    static uint64 nPrevTime = 0;\n+    static bool fBackward = false;\n+    uint64 nNow = GetTime();\n+    if (nNow > nPrevTime + 1)\n     {\n         nExtraNonce = 0;\n-        hashPrevBlock = pblock->hashPrevBlock;\n+        nPrevTime = nNow;\n+        fBackward = false;\n+    }\n+    else\n+    {\n+        if (nNow < nPrevTime && !fBackward)\n+        {\n+            printf(\"IncrementExtraNonce: WARNING: nNow moved backward: %d -> %d\\n\", nPrevTime, nNow);\n+            fBackward = true;\n+        }\n+        if (nExtraNonce == UINT_MAX)\n+            printf(\"IncrementExtraNonce: WARNING: nExtraNonce overflowing!\\n\");\n+        ++nExtraNonce;\n     }\n-    ++nExtraNonce;\n-    pblock->vtx[0].vin[0].scriptSig = CScript() << pblock->nTime << CBigNum(nExtraNonce);\n+    pblock->vtx[0].vin[0].scriptSig = BuildCoinbaseScriptSig(nNow, nExtraNonce);\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n "
      },
      {
        "sha": "f62c9afa1d69e75d71dfdaf399eb328a67b42cfa",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80828e6da9a38e2a6c74c895331e5461dcd578be/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80828e6da9a38e2a6c74c895331e5461dcd578be/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=80828e6da9a38e2a6c74c895331e5461dcd578be",
        "patch": "@@ -94,7 +94,9 @@ void PrintBlockTree();\n bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n-CBlock* CreateNewBlock(CReserveKey& reservekey);\n+CBlock* CreateNewBlock(CReserveKey& reservekey, bool fUseCoinbaser=true);\n+extern std::map<std::string, CScript> mapAuxCoinbases;\n+CScript BuildCoinbaseScriptSig(uint64 nTime, unsigned int nExtraNonce, bool *pfOverflow = NULL);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);"
      }
    ]
  },
  {
    "sha": "6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjE4YWI0YTI0OTNiMWYyOTBmMDk2MDZjODFjNWYyZmZjOWQ1YzVk",
    "commit": {
      "author": {
        "name": "sje397",
        "email": "sje397@gmail.com",
        "date": "2011-11-10T14:20:17Z"
      },
      "committer": {
        "name": "sje397",
        "email": "sje397@gmail.com",
        "date": "2011-11-12T15:48:40Z"
      },
      "message": "Added QRCode generation functions via libqrencode",
      "tree": {
        "sha": "4084b06b6256947ac34758e745aae8befa71ddc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4084b06b6256947ac34758e745aae8befa71ddc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/comments",
    "author": {
      "login": "sje397",
      "id": 214252,
      "node_id": "MDQ6VXNlcjIxNDI1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/214252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sje397",
      "html_url": "https://github.com/sje397",
      "followers_url": "https://api.github.com/users/sje397/followers",
      "following_url": "https://api.github.com/users/sje397/following{/other_user}",
      "gists_url": "https://api.github.com/users/sje397/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sje397/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sje397/subscriptions",
      "organizations_url": "https://api.github.com/users/sje397/orgs",
      "repos_url": "https://api.github.com/users/sje397/repos",
      "events_url": "https://api.github.com/users/sje397/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sje397/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sje397",
      "id": 214252,
      "node_id": "MDQ6VXNlcjIxNDI1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/214252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sje397",
      "html_url": "https://github.com/sje397",
      "followers_url": "https://api.github.com/users/sje397/followers",
      "following_url": "https://api.github.com/users/sje397/following{/other_user}",
      "gists_url": "https://api.github.com/users/sje397/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sje397/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sje397/subscriptions",
      "organizations_url": "https://api.github.com/users/sje397/orgs",
      "repos_url": "https://api.github.com/users/sje397/repos",
      "events_url": "https://api.github.com/users/sje397/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sje397/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c0baa68faecbf450a90ddd5fdd333e5e23bc21c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c0baa68faecbf450a90ddd5fdd333e5e23bc21c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c0baa68faecbf450a90ddd5fdd333e5e23bc21c"
      }
    ],
    "stats": {
      "total": 372,
      "additions": 372,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9eacff89e9b46be83505dc899420662ae71fb201",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "patch": "@@ -19,6 +19,14 @@ OBJECTS_DIR = build\n MOC_DIR = build\n UI_DIR = build\n \n+# use: qmake \"USE_QRCODE=1\"\n+# libqrencode (http://fukuchi.org/works/qrencode/index.en.html) must be installed for support\n+contains(USE_QRCODE, 1) {\n+    message(Building with QRCode support)\n+    DEFINES += USE_QRCODE\n+    LIBS += -lqrencode\n+}\n+\n # use: qmake \"RELEASE=1\"\n contains(RELEASE, 1) {\n     # Mac: compile for maximum compatibility (10.5, 32-bit)\n@@ -195,6 +203,12 @@ FORMS += \\\n     src/qt/forms/sendcoinsentry.ui \\\n     src/qt/forms/askpassphrasedialog.ui\n \n+contains(USE_QRCODE, 1) {\n+HEADERS += src/qt/qrcodedialog.h\n+SOURCES += src/qt/qrcodedialog.cpp\n+FORMS += src/qt/forms/qrcodedialog.ui\n+}\n+\n CODECFORTR = UTF-8\n \n # for lrelease/lupdate"
      },
      {
        "sha": "9c151a06f433ea0fde182637707f707d9b39b797",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "patch": "@@ -10,6 +10,10 @@\n #include <QFileDialog>\n #include <QMessageBox>\n \n+#ifdef USE_QRCODE\n+#include \"qrcodedialog.h\"\n+#endif\n+\n AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::AddressBookPage),\n@@ -25,6 +29,10 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     ui->deleteButton->setIcon(QIcon());\n #endif\n \n+#ifndef USE_QRCODE\n+    ui->showQRCode->setVisible(false);\n+#endif\n+\n     switch(mode)\n     {\n     case ForSending:\n@@ -164,10 +172,12 @@ void AddressBookPage::selectionChanged()\n             break;\n         }\n         ui->copyToClipboard->setEnabled(true);\n+        ui->showQRCode->setEnabled(true);\n     }\n     else\n     {\n         ui->deleteButton->setEnabled(false);\n+        ui->showQRCode->setEnabled(false);\n         ui->copyToClipboard->setEnabled(false);\n     }\n }\n@@ -220,3 +230,23 @@ void AddressBookPage::exportClicked()\n                               QMessageBox::Abort, QMessageBox::Abort);\n     }\n }\n+\n+void AddressBookPage::on_showQRCode_clicked()\n+{\n+#ifdef USE_QRCODE\n+    QTableView *table = getCurrentTable();\n+    QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n+\n+\n+    QRCodeDialog *d;\n+    foreach (QModelIndex index, indexes)\n+    {\n+        QString address = index.data().toString(),\n+            label = index.sibling(index.row(), 0).data().toString(),\n+            title = QString(\"%1 << %2 >>\").arg(label).arg(address);\n+\n+        QRCodeDialog *d = new QRCodeDialog(title, address, label, tab == ReceivingTab, this);\n+        d->show();\n+    }\n+#endif\n+}"
      },
      {
        "sha": "07ac07967bcd4e96941e6f6e7f693efeedef4f29",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "patch": "@@ -54,6 +54,7 @@ private slots:\n     void on_newAddressButton_clicked();\n     void on_copyToClipboard_clicked();\n     void selectionChanged();\n+    void on_showQRCode_clicked();\n };\n \n #endif // ADDRESSBOOKDIALOG_H"
      },
      {
        "sha": "faaf18aa69e0eee55bc32cb1c25153a9312cdc42",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "patch": "@@ -41,6 +41,7 @@\n     <qresource prefix=\"/images\">\n         <file alias=\"about\">res/images/about.png</file>\n         <file alias=\"splash\">res/images/splash2.jpg</file>\n+        <file alias=\"qrcode\">res/images/qrcode.png</file>\n     </qresource>\n     <qresource prefix=\"/movies\">\n         <file alias=\"update_spinner\">res/movies/update_spinner.mng</file>"
      },
      {
        "sha": "9b301cbbfa273b29e82f77a7a510824053257475",
        "filename": "src/qt/forms/addressbookpage.ui",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/forms/addressbookpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/forms/addressbookpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/addressbookpage.ui?ref=6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "patch": "@@ -79,6 +79,17 @@\n        </property>\n       </widget>\n      </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"showQRCode\">\n+       <property name=\"text\">\n+        <string>Show &amp;QR Code</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/images/qrcode</normaloff>:/images/qrcode</iconset>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QPushButton\" name=\"deleteButton\">\n        <property name=\"toolTip\">"
      },
      {
        "sha": "2bf1952edc3b90acf874d4deb6dce40841cb5fee",
        "filename": "src/qt/forms/qrcodedialog.ui",
        "status": "added",
        "additions": 172,
        "deletions": 0,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/forms/qrcodedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/forms/qrcodedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/qrcodedialog.ui?ref=6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "patch": "@@ -0,0 +1,172 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>QRCodeDialog</class>\n+ <widget class=\"QDialog\" name=\"QRCodeDialog\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>334</width>\n+    <height>372</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Dialog</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblQRCode\">\n+     <property name=\"sizePolicy\">\n+      <sizepolicy hsizetype=\"Expanding\" vsizetype=\"Expanding\">\n+       <horstretch>0</horstretch>\n+       <verstretch>0</verstretch>\n+      </sizepolicy>\n+     </property>\n+     <property name=\"minimumSize\">\n+      <size>\n+       <width>300</width>\n+       <height>300</height>\n+      </size>\n+     </property>\n+     <property name=\"text\">\n+      <string>QR Code</string>\n+     </property>\n+     <property name=\"alignment\">\n+      <set>Qt::AlignCenter</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QWidget\" name=\"widget\" native=\"true\">\n+     <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+      <item>\n+       <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+        <item>\n+         <widget class=\"QCheckBox\" name=\"chkReq\">\n+          <property name=\"enabled\">\n+           <bool>true</bool>\n+          </property>\n+          <property name=\"text\">\n+           <string>Request Payment</string>\n+          </property>\n+         </widget>\n+        </item>\n+        <item>\n+         <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+          <item>\n+           <widget class=\"QLabel\" name=\"lblAm1\">\n+            <property name=\"sizePolicy\">\n+             <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Maximum\">\n+              <horstretch>0</horstretch>\n+              <verstretch>0</verstretch>\n+             </sizepolicy>\n+            </property>\n+            <property name=\"text\">\n+             <string>Amount:</string>\n+            </property>\n+            <property name=\"alignment\">\n+             <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+            </property>\n+            <property name=\"buddy\">\n+             <cstring>lnReqAmount</cstring>\n+            </property>\n+           </widget>\n+          </item>\n+          <item>\n+           <widget class=\"QLineEdit\" name=\"lnReqAmount\">\n+            <property name=\"enabled\">\n+             <bool>false</bool>\n+            </property>\n+            <property name=\"alignment\">\n+             <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+            </property>\n+           </widget>\n+          </item>\n+          <item>\n+           <widget class=\"QLabel\" name=\"lblAm2\">\n+            <property name=\"sizePolicy\">\n+             <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Maximum\">\n+              <horstretch>0</horstretch>\n+              <verstretch>0</verstretch>\n+             </sizepolicy>\n+            </property>\n+            <property name=\"text\">\n+             <string>BTC</string>\n+            </property>\n+            <property name=\"buddy\">\n+             <cstring>lnReqAmount</cstring>\n+            </property>\n+           </widget>\n+          </item>\n+         </layout>\n+        </item>\n+       </layout>\n+      </item>\n+      <item>\n+       <layout class=\"QGridLayout\" name=\"gridLayout\">\n+        <item row=\"0\" column=\"0\">\n+         <widget class=\"QLabel\" name=\"label_3\">\n+          <property name=\"text\">\n+           <string>Label:</string>\n+          </property>\n+          <property name=\"alignment\">\n+           <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+          </property>\n+          <property name=\"buddy\">\n+           <cstring>lnLabel</cstring>\n+          </property>\n+         </widget>\n+        </item>\n+        <item row=\"0\" column=\"1\">\n+         <widget class=\"QLineEdit\" name=\"lnLabel\"/>\n+        </item>\n+        <item row=\"1\" column=\"0\">\n+         <widget class=\"QLabel\" name=\"label_4\">\n+          <property name=\"text\">\n+           <string>Message:</string>\n+          </property>\n+          <property name=\"alignment\">\n+           <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+          </property>\n+          <property name=\"buddy\">\n+           <cstring>lnMessage</cstring>\n+          </property>\n+         </widget>\n+        </item>\n+        <item row=\"1\" column=\"1\">\n+         <widget class=\"QLineEdit\" name=\"lnMessage\"/>\n+        </item>\n+       </layout>\n+      </item>\n+      <item>\n+       <widget class=\"QPushButton\" name=\"btnSaveAs\">\n+        <property name=\"text\">\n+         <string>&amp;Save As...</string>\n+        </property>\n+       </widget>\n+      </item>\n+     </layout>\n+    </widget>\n+   </item>\n+  </layout>\n+ </widget>\n+ <resources/>\n+ <connections>\n+  <connection>\n+   <sender>chkReq</sender>\n+   <signal>clicked(bool)</signal>\n+   <receiver>lnReqAmount</receiver>\n+   <slot>setEnabled(bool)</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>92</x>\n+     <y>285</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>98</x>\n+     <y>311</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+ </connections>\n+</ui>"
      },
      {
        "sha": "ed4c758e3822b12ceaf1ab9426b0b909a6dfe0f9",
        "filename": "src/qt/qrcodedialog.cpp",
        "status": "added",
        "additions": 106,
        "deletions": 0,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/qrcodedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/qrcodedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qrcodedialog.cpp?ref=6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "patch": "@@ -0,0 +1,106 @@\n+#include \"qrcodedialog.h\"\n+#include \"ui_qrcodedialog.h\"\n+#include <QPixmap>\n+#include <QUrl>\n+#include <QFileDialog>\n+#include <QDesktopServices>\n+#include <QDebug>\n+\n+#include <qrencode.h>\n+\n+#define EXPORT_IMAGE_SIZE   256\n+\n+QRCodeDialog::QRCodeDialog(const QString &title, const QString &addr, const QString &label, bool enableReq, QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::QRCodeDialog),\n+    address(addr)\n+{\n+    ui->setupUi(this);\n+    setWindowTitle(title);\n+    setAttribute(Qt::WA_DeleteOnClose);\n+\n+    ui->chkReq->setVisible(enableReq);\n+    ui->lnReqAmount->setVisible(enableReq);\n+    ui->lblAm1->setVisible(enableReq);\n+    ui->lblAm2->setVisible(enableReq);\n+\n+    ui->lnLabel->setText(label);\n+\n+    genCode();\n+}\n+\n+QRCodeDialog::~QRCodeDialog()\n+{\n+    delete ui;\n+}\n+\n+void QRCodeDialog::genCode() {\n+\n+    QString uri = getURI();\n+    //qDebug() << \"Encoding:\" << uri.toUtf8().constData();\n+    QRcode *code = QRcode_encodeString(uri.toUtf8().constData(), 0, QR_ECLEVEL_L, QR_MODE_8, 1);\n+    myImage = QImage(code->width + 8, code->width + 8, QImage::Format_RGB32);\n+    myImage.fill(0xffffff);\n+    unsigned char *p = code->data;\n+    for(int y = 0; y < code->width; y++) {\n+        for(int x = 0; x < code->width; x++) {\n+            myImage.setPixel(x + 4, y + 4, ((*p & 1) ? 0x0 : 0xffffff));\n+            p++;\n+        }\n+    }\n+    QRcode_free(code);\n+    ui->lblQRCode->setPixmap(QPixmap::fromImage(myImage).scaled(300, 300));\n+}\n+\n+QString QRCodeDialog::getURI() {\n+    QString ret = QString(\"bitcoin:%1\").arg(address);\n+\n+    int paramCount = 0;\n+    if(ui->chkReq->isChecked() && ui->lnReqAmount->text().isEmpty() == false) {\n+        bool ok= false;\n+        double amount = ui->lnReqAmount->text().toDouble(&ok);\n+        if(ok) {\n+            ret += QString(\"?amount=%1X8\").arg(ui->lnReqAmount->text());\n+            paramCount++;\n+        }\n+    }\n+\n+    if(ui->lnLabel->text().isEmpty() == false) {\n+        QString lbl(QUrl::toPercentEncoding(ui->lnLabel->text()));\n+        ret += QString(\"%1label=%2\").arg(paramCount == 0 ? \"?\" : \"&\").arg(lbl);\n+        paramCount++;\n+    }\n+\n+    if(ui->lnMessage->text().isEmpty() == false) {\n+        QString msg(QUrl::toPercentEncoding(ui->lnMessage->text()));\n+        ret += QString(\"%1message=%2\").arg(paramCount == 0 ? \"?\" : \"&\").arg(msg);\n+        paramCount++;\n+    }\n+\n+    return ret;\n+}\n+\n+void QRCodeDialog::on_lnReqAmount_textChanged(const QString &) {\n+    genCode();\n+}\n+\n+void QRCodeDialog::on_lnLabel_textChanged(const QString &) {\n+    genCode();\n+}\n+\n+void QRCodeDialog::on_lnMessage_textChanged(const QString &) {\n+    genCode();\n+}\n+\n+void QRCodeDialog::on_btnSaveAs_clicked()\n+{\n+    QString fn = QFileDialog::getSaveFileName(this, \"Save Image...\", QDesktopServices::storageLocation(QDesktopServices::DocumentsLocation), \"Images (*.png)\");\n+    if(!fn.isEmpty()) {\n+        myImage.scaled(EXPORT_IMAGE_SIZE, EXPORT_IMAGE_SIZE).save(fn);\n+    }\n+}\n+\n+void QRCodeDialog::on_chkReq_toggled(bool)\n+{\n+    genCode();\n+}"
      },
      {
        "sha": "7463a8810ef598e1826f179d4dff730043c77b08",
        "filename": "src/qt/qrcodedialog.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/qrcodedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/qrcodedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qrcodedialog.h?ref=6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "patch": "@@ -0,0 +1,37 @@\n+#ifndef QRCODEDIALOG_H\n+#define QRCODEDIALOG_H\n+\n+#include <QDialog>\n+#include <QImage>\n+\n+namespace Ui {\n+    class QRCodeDialog;\n+}\n+\n+class QRCodeDialog : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit QRCodeDialog(const QString &title, const QString &address, const QString &label, bool allowReq, QWidget *parent = 0);\n+    ~QRCodeDialog();\n+\n+private slots:\n+    void on_lnReqAmount_textChanged(const QString &arg1);\n+    void on_lnLabel_textChanged(const QString &arg1);\n+    void on_lnMessage_textChanged(const QString &arg1);\n+    void on_btnSaveAs_clicked();\n+\n+    void on_chkReq_toggled(bool checked);\n+\n+private:\n+    Ui::QRCodeDialog *ui;\n+    QImage myImage;\n+\n+    QString getURI();\n+    QString address;\n+\n+    void genCode();\n+};\n+\n+#endif // QRCODEDIALOG_H"
      },
      {
        "sha": "c89a49bbceba56e1901487b970645dd9eea95608",
        "filename": "src/qt/res/images/qrcode.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/res/images/qrcode.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d/src/qt/res/images/qrcode.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/images/qrcode.png?ref=6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d"
      }
    ]
  },
  {
    "sha": "5c3b3bd1a0868d549146c7344494a0155fad3777",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzNiM2JkMWEwODY4ZDU0OTE0NmM3MzQ0NDk0YTAxNTVmYWQzNzc3",
    "commit": {
      "author": {
        "name": "sje397",
        "email": "sje397@gmail.com",
        "date": "2011-11-16T13:05:21Z"
      },
      "committer": {
        "name": "sje397",
        "email": "sje397@gmail.com",
        "date": "2011-11-16T13:05:21Z"
      },
      "message": "Merge branch 'master' of https://github.com/bitcoin/bitcoin",
      "tree": {
        "sha": "273fa5c3d5ab870e817191139cb9d2ba336b875f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/273fa5c3d5ab870e817191139cb9d2ba336b875f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c3b3bd1a0868d549146c7344494a0155fad3777",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c3b3bd1a0868d549146c7344494a0155fad3777",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c3b3bd1a0868d549146c7344494a0155fad3777",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c3b3bd1a0868d549146c7344494a0155fad3777/comments",
    "author": {
      "login": "sje397",
      "id": 214252,
      "node_id": "MDQ6VXNlcjIxNDI1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/214252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sje397",
      "html_url": "https://github.com/sje397",
      "followers_url": "https://api.github.com/users/sje397/followers",
      "following_url": "https://api.github.com/users/sje397/following{/other_user}",
      "gists_url": "https://api.github.com/users/sje397/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sje397/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sje397/subscriptions",
      "organizations_url": "https://api.github.com/users/sje397/orgs",
      "repos_url": "https://api.github.com/users/sje397/repos",
      "events_url": "https://api.github.com/users/sje397/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sje397/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sje397",
      "id": 214252,
      "node_id": "MDQ6VXNlcjIxNDI1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/214252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sje397",
      "html_url": "https://github.com/sje397",
      "followers_url": "https://api.github.com/users/sje397/followers",
      "following_url": "https://api.github.com/users/sje397/following{/other_user}",
      "gists_url": "https://api.github.com/users/sje397/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sje397/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sje397/subscriptions",
      "organizations_url": "https://api.github.com/users/sje397/orgs",
      "repos_url": "https://api.github.com/users/sje397/repos",
      "events_url": "https://api.github.com/users/sje397/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sje397/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b18ab4a2493b1f290f09606c81c5f2ffc9d5c5d"
      },
      {
        "sha": "1b93ea0e31c82bd23f2ddc0b5a98707fcbddce27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b93ea0e31c82bd23f2ddc0b5a98707fcbddce27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b93ea0e31c82bd23f2ddc0b5a98707fcbddce27"
      }
    ],
    "stats": {
      "total": 2121,
      "additions": 1946,
      "deletions": 175
    },
    "files": [
      {
        "sha": "c3544a88ba9788c6ee039513e409bbf70056d6e9",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -270,7 +270,7 @@ windows:RC_FILE = src/qt/res/bitcoin-qt.rc\n macx:HEADERS += src/qt/macdockiconhandler.h\n macx:OBJECTIVE_SOURCES += src/qt/macdockiconhandler.mm\n macx:LIBS += -framework Foundation -framework ApplicationServices -framework AppKit\n-macx:DEFINES += MAC_OSX MSG_NOSIGNAL=0 BOOST_FILESYSTEM_VERSION=3\n+macx:DEFINES += MAC_OSX MSG_NOSIGNAL=0\n macx:ICON = src/qt/res/icons/bitcoin.icns\n macx:TARGET = \"Bitcoin-Qt\"\n "
      },
      {
        "sha": "f2eac1b1abb3b0a8be15476970c1b848f08f1eca",
        "filename": "contrib/debian/bin/bitcoin-qt",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bin/bitcoin-qt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bin/bitcoin-qt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bin/bitcoin-qt?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,16 @@\n+#!/bin/sh\n+\n+set -e\n+\n+umask 077\n+\n+basedir=~/.bitcoin\n+dbfile=\"$basedir/DB_CONFIG\"\n+cfgfile=\"$basedir/bitcoin.conf\"\n+\n+[ -e \"$basedir\" ] || mkdir \"$basedir\"\n+\n+# Bitcoin does not clean up DB log files by default\n+[ -e \"$dbfile\" ] || echo 'set_flags DB_LOG_AUTOREMOVE' > \"$dbfile\"\n+\n+exec /usr/lib/bitcoin/bitcoin-qt \"$@\""
      },
      {
        "sha": "0904f76f7be5dc37d0d3ecfeeb9d2db2d77b0dec",
        "filename": "contrib/debian/bin/bitcoind",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bin/bitcoind",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bin/bitcoind",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bin/bitcoind?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,18 @@\n+#!/bin/sh\n+\n+set -e\n+\n+umask 077\n+\n+basedir=~/.bitcoin\n+dbfile=\"$basedir/DB_CONFIG\"\n+cfgfile=\"$basedir/bitcoin.conf\"\n+\n+[ -e \"$basedir\" ] || mkdir \"$basedir\"\n+\n+[ -e \"$cfgfile\" ] || perl -le 'print\"rpcpassword=\",map{(a..z,A..Z,0..9)[rand 62]}0..9' > \"$cfgfile\"\n+\n+# Bitcoin does not clean up DB log files by default\n+[ -e \"$dbfile\" ] || echo 'set_flags DB_LOG_AUTOREMOVE' > \"$dbfile\"\n+\n+exec /usr/lib/bitcoin/bitcoind \"$@\""
      },
      {
        "sha": "d65cc35a3b5baf168f540cd0fade1beb2a533ee7",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,11 @@\n+[Desktop Entry]\n+Encoding=UTF-8\n+Name=Bitcoin\n+Comment=Bitcoin P2P Cryptocurrency\n+Exec=/usr/bin/bitcoin-qt\n+Terminal=false\n+Type=Application\n+Icon=/usr/share/pixmaps/bitcoin80.xpm\n+#For when bitcoin (finally) properly handles bitcoin: URLs\n+#MimeType=x-scheme-handler/bitcoin;\n+Categories=Office;"
      },
      {
        "sha": "7ddc8c1d8ff97d954328debe59524d9c3048564a",
        "filename": "contrib/debian/bitcoin-qt.install",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoin-qt.install",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoin-qt.install",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.install?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,5 @@\n+debian/bin/bitcoin-qt usr/bin\n+bitcoin-qt usr/lib/bitcoin\n+share/pixmaps/bitcoin32.xpm usr/share/pixmaps\n+share/pixmaps/bitcoin80.xpm usr/share/pixmaps\n+debian/bitcoin-qt.desktop usr/share/applications"
      },
      {
        "sha": "7fb230eca8921cf3f2756a2e1fa3ea6ab808dca5",
        "filename": "contrib/debian/bitcoin-qt.lintian-overrides",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoin-qt.lintian-overrides",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoin-qt.lintian-overrides",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.lintian-overrides?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,2 @@\n+# Linked code is Expat - only Debian packaging is GPL-2+\n+bitcoin-qt: possible-gpl-code-linked-with-openssl"
      },
      {
        "sha": "4ded67d98e784e275c76839e7b06b413d774230e",
        "filename": "contrib/debian/bitcoind.examples",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoind.examples",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoind.examples",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.examples?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1 @@\n+debian/examples/bitcoin.conf"
      },
      {
        "sha": "e978c44b3f5a818da28ca6fe870f01a82608fef6",
        "filename": "contrib/debian/bitcoind.install",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoind.install",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoind.install",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.install?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,2 @@\n+debian/bin/bitcoind usr/bin\n+src/bitcoind usr/lib/bitcoin"
      },
      {
        "sha": "3f9f140bd827a1491ba6a0c46c1df16e428548bd",
        "filename": "contrib/debian/bitcoind.lintian-overrides",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoind.lintian-overrides",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoind.lintian-overrides",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.lintian-overrides?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,2 @@\n+# Linked code is Expat - only Debian packaging is GPL-2+\n+bitcoind: possible-gpl-code-linked-with-openssl"
      },
      {
        "sha": "3e4ca63d4ea3fffd28a8c6059fc0ccb821ecb41e",
        "filename": "contrib/debian/bitcoind.manpages",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoind.manpages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/bitcoind.manpages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoind.manpages?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,2 @@\n+debian/manpages/bitcoind.1\n+debian/manpages/bitcoin.conf.5"
      },
      {
        "sha": "ccde9776d89ce9dd8a3de21fc91a3a72c503a9cf",
        "filename": "contrib/debian/changelog",
        "status": "added",
        "additions": 248,
        "deletions": 0,
        "changes": 248,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,248 @@\n+bitcoin (0.5.0~rc3-natty0) natty; urgency=low\n+\n+  * New upstream release candidate.\n+  * Don't set rpcpassword for bitcoin-qt.\n+\n+ -- Matt Corallo <matt@bluematt.me>  Tue, 8 Nov 2011 11:56:00 -0400\n+\n+bitcoin (0.5.0~rc1-natty1) natty; urgency=low\n+\n+  * Add test_bitcoin to build test\n+  * Fix clean\n+  * Remove uneccessary build-dependancies\n+\n+ -- Matt Corallo <matt@bluematt.me>  Wed, 26 Oct 2011 14:37:18 -0400\n+\n+bitcoin (0.5.0~rc1-natty0) natty; urgency=low\n+\n+  * Mark for natty\n+  * Fix broken build\n+  * Fix copyright listing\n+  * Remove bitcoin: URL handler until bitcoin actually has support for it (Oops)\n+\n+ -- Matt Corallo <matt@bluematt.me>  Wed, 26 Oct 2011 14:37:18 -0400\n+\n+bitcoin (0.5.0~rc1-2) experimental; urgency=low\n+\n+  * Add bitcoin-qt\n+\n+ -- Matt Corallo <matt@bluematt.me>  Tue, 25 Oct 2011 15:24:18 -0400\n+\n+bitcoin (0.5.0~rc1-1) experimental; urgency=low\n+\n+  * New upstream prerelease.\n+  * Add Github as alternate upstream source in watch file.\n+  * Stop build-depending on libcrypto++-dev, and drop patch 1000:\n+    Upstream no longer use crypto++.\n+  * Drop patch 1003: Upstream builds dynamic by default now.\n+  * Update copyright file: Drop notes on longer included sources.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Fri, 14 Oct 2011 00:16:18 +0200\n+\n+bitcoin (0.4.0-1) unstable; urgency=low\n+\n+  * New upstream release.\n+  * Stop repackaging source tarballs: No DFSG-violating stripping left.\n+  * Update copyright file:\n+    + Add Github URL to Source.\n+  * Drop dpkg-source local-options hint: Declared options are default\n+    since dpkg-source 1.16.1.\n+    + Add irc URL to Upstream-Contact.\n+    + Add comment on Bitcoin Developers to catch-all Files section.\n+    + Add Files sections for newly readded src/cryptopp/* (new custom\n+      BSD-like license), and newly added doc/build-osx.txt and\n+      src/makefile.osx (Expat).\n+  * Bump debhelper compatibility level to 7.\n+  * Suppress binary icns and gpg files.\n+  * Enable regression tests:\n+    + Build-depend on libboost-test-dev.\n+    + Extend patch 1003 to also dynamically link test binary.\n+    + Build and invoke test binary unless tests are disabled.\n+  * Tighten build-dependency on cdbs: Recent version needed to support\n+    debhelper 7.\n+  * Relax build-depend unversioned on debhelper: needed version\n+    satisfied even in oldstable.\n+  * Stop suppress optional build-dependencies: Satisfied in stable.\n+    Build-depend on devscripts (enabling copyright-check).\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Wed, 05 Oct 2011 01:48:53 +0200\n+\n+bitcoin (0.3.24~dfsg-1) unstable; urgency=low\n+\n+  * New upstream release.\n+\n+  [ Jonas Smedegaard ]\n+  * Improve various usage hints:\n+    + Explicitly mention in long description that bitcoind contains\n+      daemon and command-line interface.\n+    + Extend README.Debian with section on lack of GUI, and add primary\n+      headline.\n+    + Avoid installing upstream README: contains no parts relevant for\n+      Debian usage.\n+    Thanks to richard for suggestions (see bug#629443).\n+  * Favor final releases over prereleases in rules and watch file.\n+    Thanks to Jan Dittberner.\n+  * Track -src (not -linux) tarballs in rules and watch file.\n+    Thanks to Jan Dittberner.\n+  * Drop patches 1004 and 1005 (integrated upstream) and simplify\n+    CXXFLAGS in rules file.\n+  * Stop stripping no longer included source-less binaries from upstream\n+    tarballs.\n+\n+  [ Jan Dittberner ]\n+  * refresh debian/patches/1000_use_system_crypto++.patch\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Tue, 19 Jul 2011 15:08:54 +0200\n+\n+bitcoin (0.3.21~dfsg-2) unstable; urgency=low\n+\n+  * Enable UPNP support:\n+    + Drop patch 1006.\n+    + Build-depend on libminiupnpc-dev.\n+    Thanks to Matt Corallo.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Sat, 28 May 2011 15:52:44 +0200\n+\n+bitcoin (0.3.21~dfsg-1) unstable; urgency=low\n+\n+  * New upstream release.\n+  * Refresh patches.\n+  * Drop patch 1002: no longer needed, as upstream use pkgconfig now.\n+  * Add patch 1006 to really unset USE_UPNP as aparently intended.\n+  * Adjust cleanup rule to preserve .gitignore files.\n+  * Update copyright file:\n+    + Bump format to draft 174 of DEP-5.\n+    + Shorten comments.\n+  * Bump policy compliance to standards-version 3.9.2.\n+  * Shorten Vcs-Browser paragraph in control file.\n+  * Fix mention daemon (not CLI tools) in short description.\n+  * Stop conflicting with or replace bitcoin-cli: Only transitional, no\n+    longer needed.\n+  * Link against unversioned berkeleydb. Update NEWS and README.Debian\n+    accordingly (and improve wording while at it).\n+    Closes: Bug#621425. Thanks to Ond\u0159ej Sur\u00fd.\n+  * This release also implicitly updates linkage against libcrypto++,\n+    which closes: bug#626953, #627024.\n+  * Disable linkage against not yet Debian packaged MiniUPnP.\n+  * Silence seemingly harmless noise about unused variables.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Tue, 17 May 2011 15:31:24 +0200\n+\n+bitcoin (0.3.20.2~dfsg-2) unstable; urgency=medium\n+\n+  * Fix have wrapper script execute real binary (not loop executing\n+    itself).\n+    Closes: bug#617290. Thanks to Philippe Gauthier and Etienne Laurin.\n+  * Set urgency=medium as the only (user-exposed) binary is useless\n+    without this fix and has been for some time.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Wed, 16 Mar 2011 09:11:06 +0100\n+\n+bitcoin (0.3.20.2~dfsg-1) unstable; urgency=low\n+\n+  * New upstream release.\n+  * Fix provide and replace former package name bitcoin-cli.\n+    Closes: bug#618439. Thanks to Shane Wegner.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Tue, 15 Mar 2011 11:41:43 +0100\n+\n+bitcoin (0.3.20.01~dfsg-1) unstable; urgency=low\n+\n+  * New upstream release.\n+\n+  [ Micah Anderson ]\n+  * Add myself as uploader.\n+\n+  [ Jonas Smedegaard ]\n+  * Add wrapper for bitcoind to ease initial startup.\n+  * Update patches:\n+    + Drop patch 2002: Applied upstream.\n+    + Add patch 1005 to add phtread linker option.\n+      Closes: bug#615619. Thanks to Shane Wegner.\n+    + Refresh patches.\n+  * Extend copyright years in rules file header.\n+  * Rewrite copyright file using draft svn166 of DEP5 format.\n+  * Rename binary package to bitcoind (from bincoin-cli).\n+    Closes: bug#614025. Thanks to Luke-Jr.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Tue, 01 Mar 2011 15:55:04 +0100\n+\n+bitcoin (0.3.19~dfsg-6) unstable; urgency=low\n+\n+  * Fix override agressive optimizations.\n+  * Fix tighten build-dependencies to really fit backporting to Lenny:\n+    + Add fallback build-dependency on libdb4.6++-dev.\n+    + Tighten unversioned Boost build-dependencies to recent versions,\n+      To force use of versioned Boost when backporting to Lenny.\n+    ...needs more love, though: actual build fails.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Mon, 17 Jan 2011 19:48:35 +0100\n+\n+bitcoin (0.3.19~dfsg-5) unstable; urgency=low\n+\n+  * Fix lower Boost fallback-build-dependencies to 1.35, really\n+    available in Lenny.\n+  * Correct comment in rules file regarding reason for versioned Boost\n+    fallback-build-dependency.\n+  * Add patch 2002 adding -mt decoration to Boost flags, to ease\n+    backporting to Lenny.\n+  * Respect DEB_BUILD_OPTIONS, and suppress arch-specific optimizations:\n+    + Add patch 1004 to allow overriding optimization flags.\n+    + Set optimization flags conditionally at build time.\n+    + Drop patch 2002 unconditionally suppressing arch-optimizations.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Mon, 17 Jan 2011 16:04:48 +0100\n+\n+bitcoin (0.3.19~dfsg-4) unstable; urgency=low\n+\n+  [ Micah Anderson ]\n+  * Provide example bitcoin.conf.\n+  * Add bitcoind(1) and bitcoin.conf(5) man pages.\n+\n+  [ Jonas Smedegaard ]\n+  * Ease backporting:\n+    + Suppress optional build-dependencies.\n+    + Add fallback build-dependencies on the most recent Boost libs\n+    available in Lenny (where unversioned Boost libs are missing).\n+  * Add Micah as copyright holder for manpages, licensed as GPL-3+.\n+  * Bump copyright format to Subversion candidate draft 162 of DEP5.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Mon, 17 Jan 2011 14:00:48 +0100\n+\n+bitcoin (0.3.19~dfsg-3) unstable; urgency=low\n+\n+  * Document in copyright file files excluded from repackaged source.\n+  * Update copyright file:\n+    + Bump DEP5 format hint to Subversion draft rev. 153.\n+    + Consistently wrap at 72 chars.\n+    + Refer to GPL-2 file (not GPL symlink).\n+  * Link against Berkeley DB 4.8 (not 4.7):\n+    + Build-depend on libdb4.8++-dev (and on on libdb4.7++-dev).\n+    + Suggest libdb4.8-util and db4.7-util.\n+    + Add README.Debian note on (untested) upgrade routine.\n+    + Add NEWS entry on changed db version, referring to README.Debian.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Fri, 07 Jan 2011 22:50:57 +0100\n+\n+bitcoin (0.3.19~dfsg-2) unstable; urgency=low\n+\n+  * Adjust build options to use optimized miner only for amd64. Fixes\n+    FTBFS on i386 (and other archs, if compiling anywhere else at all).\n+  * Avoid static linking.\n+  * Adjust patch 2001 to avoid only arch-specific optimizations (keep\n+    -O3).\n+  * Extend long description to mention disk consumption and initial use\n+    of IRC.\n+  All of above changes thanks to Helmuth Grohne.\n+  * Add lintian override regarding OpenSSL and GPL: Linked code is Expat\n+    - only Debian packaging is GPL-2+.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Wed, 29 Dec 2010 00:27:54 +0100\n+\n+bitcoin (0.3.19~dfsg-1) unstable; urgency=low\n+\n+  [ Jonas Smedegaard ]\n+  * Initial release.\n+    Closes: bug#578157.\n+\n+ -- Jonas Smedegaard <dr@jones.dk>  Tue, 28 Dec 2010 15:49:22 +0100"
      },
      {
        "sha": "7f8f011eb73d6043d2e6db9d2c101195ae2801f2",
        "filename": "contrib/debian/compat",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/compat",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/compat",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/compat?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1 @@\n+7"
      },
      {
        "sha": "13fde5948c231caa4180fd8ace09bb88f1f47ceb",
        "filename": "contrib/debian/control",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,57 @@\n+Source: bitcoin\n+Section: utils\n+Priority: optional\n+Maintainer: Jonas Smedegaard <dr@jones.dk>\n+Uploaders: Micah Anderson <micah@debian.org>\n+Build-Depends: debhelper,\n+ devscripts,\n+ libboost-system-dev (>> 1.35) | libboost-system1.35-dev,\n+ libdb4.8++-dev,\n+ libssl-dev,\n+ pkg-config,\n+ libminiupnpc8-dev,\n+ libboost-filesystem-dev (>> 1.35) | libboost-filesystem1.35-dev,\n+ libboost-program-options-dev (>> 1.35) | libboost-program-options1.35-dev,\n+ libboost-thread-dev (>> 1.35) | libboost-thread1.35-dev,\n+ libboost-test-dev (>> 1.35) | libboost-test1.35-dev,\n+ qt4-qmake,\n+ libqt4-dev\n+Standards-Version: 3.9.2\n+Homepage: http://www.bitcoin.org/\n+Vcs-Git: git://github.com/bitcoin/bitcoin.git\n+Vcs-Browser: http://github.com/bitcoin/bitcoin\n+\n+Package: bitcoind\n+Architecture: any\n+Depends: ${shlibs:Depends}, ${misc:Depends}\n+Description: peer-to-peer network based anonymous digital currency - daemon\n+ Bitcoin is a free open source peer-to-peer electronic cash system that\n+ is completely decentralized, without the need for a central server or\n+ trusted parties.  Users hold the crypto keys to their own money and\n+ transact directly with each other, with the help of a P2P network to\n+ check for double-spending.\n+ .\n+ By default connects to an IRC network to discover other peers.\n+ .\n+ Full transaction history is stored locally at each client.  This\n+ requires 150+ MB of space, slowly growing.\n+ .\n+ This package provides bitcoind, a combined daemon and CLI tool to\n+ interact with the daemon.\n+\n+Package: bitcoin-qt\n+Architecture: any\n+Depends: ${shlibs:Depends}, ${misc:Depends}\n+Description: peer-to-peer network based anonymous digital currency - QT GUI\n+ Bitcoin is a free open source peer-to-peer electronic cash system that\n+ is completely decentralized, without the need for a central server or\n+ trusted parties.  Users hold the crypto keys to their own money and\n+ transact directly with each other, with the help of a P2P network to\n+ check for double-spending.\n+ .\n+ By default connects to an IRC network to discover other peers.\n+ .\n+ Full transaction history is stored locally at each client.  This\n+ requires 150+ MB of space, slowly growing.\n+ .\n+ This package provides bitcoin-qt, a GUI for Bitcoin based on QT."
      },
      {
        "sha": "2da14619849cd0757cdbf4d8d1b431eb3c6fd7f5",
        "filename": "contrib/debian/copyright",
        "status": "added",
        "additions": 174,
        "deletions": 0,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,174 @@\n+Format: http://svn.debian.org/wsvn/dep/web/deps/dep5.mdwn?rev=174\n+Upstream-Name: Bitcoin\n+Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n+ irc://#bitcoin@freenode.net\n+Source: http://sourceforge.net/projects/bitcoin/files/\n+ https://github.com/bitcoin/bitcoin\n+\n+Files: *\n+Copyright: 2009-2011, Bitcoin Developers\n+License: Expat\n+Comment: The Bitcoin Developers encompasses the current developers listed on bitcoin.org,\n+         as well as the numerous contributors to the project.\n+\n+Files: src/json/*\n+Copyright: 2007-2009, John W. Wilkinson\n+License: Expat\n+\n+Files: src/strlcpy.h\n+Copyright: 1998, Todd C. Miller <Todd.Miller@courtesan.com>\n+License: ISC\n+\n+Files: debian/*\n+Copyright: 2010-2011, Jonas Smedegaard <dr@jones.dk>\n+           2011, Matt Corallo <matt@bluematt.me>\n+License: GPL-2+\n+\n+Files: debian/manpages/*\n+Copyright: Micah Anderson <micah@debian.org>\n+License: GPL-3+\n+\n+Files: src/qt/res/icons/clock*.png, src/qt/res/icons/tx*.png,\n+       src/qt/res/src/*.svg\n+Copyright: Wladimir van der Laan\n+License: CC-BY-3\n+\n+Files: src/qt/res/icons/address-book.png, src/qt/res/icons/export.png,\n+       src/qt/res/icons/history.png, src/qt/res/icons/key.png,\n+       src/qt/res/icons/lock_*.png, src/qt/res/icons/overview.png,\n+       src/qt/res/icons/receive.png, src/qt/res/icons/send.png,\n+       src/qt/res/icons/synced.png\n+Copyright: David Vignoni (david@icon-king.com)\n+           ICON KING - www.icon-king.com\n+License: LGPL\n+Comment: NUVOLA ICON THEME for KDE 3.x\n+         Original icons: kaddressbook, klipper_dock, view-list-text,\n+                         key-password, encrypted/decrypted, go-home, go-down,\n+                         go-next, dialog-ok\n+         Site: http://www.icon-king.com/projects/nuvola/\n+\n+Files: src/qt/res/icons/connect*.png\n+Copyright: schollidesign\n+License: GPL-3+\n+Comment: Icon Pack: Human-O2\n+         Site: http://findicons.com/icon/93743/blocks_gnome_netstatus_0\n+\n+Files: src/qt/res/icons/transaction*.png\n+Copyright: md2k7\n+License: You are free to do with these icons as you wish, including selling,\n+ copying, modifying etc.\n+Comment: Site: https://forum.bitcoin.org/index.php?topic=15276.0\n+\n+Files: src/qt/res/icons/configure.png, src/qt/res/icons/quit.png,\n+      src/qt/res/icons/editcopy.png, src/qt/res/icons/editpaste.png,\n+      src/qt/res/icons/add.png, src/qt/res/icons/edit.png,\n+      src/qt/res/icons/remove.png\n+Copyright: http://www.everaldo.com\n+License: LGPL\n+Comment: Icon Pack: Crystal SVG\n+\n+Files: src/qt/res/icons/bitcoin.png, src/qt/res/icons/toolbar.png\n+Copyright: Bitboy (optimized for 16x16 by Wladimir van der Laan)\n+License: PUB-DOM\n+Comment: Site: http://forum.bitcoin.org/?topic=1756.0\n+\n+Files:  scripts/img/reload.xcf, src/qt/res/movies/update_spinner.mng\n+Copyright: Everaldo (Everaldo Coelho)\n+License: GPL-3+\n+Comment: Icon Pack: Kids\n+         Site: http://findicons.com/icon/17102/reload?id=17102\n+\n+Files: src/qt/res/images/splash2.jpg\n+License: PUB-DOM\n+Copyright: Crobbo (forum)\n+Comment: Site: https://bitcointalk.org/index.php?topic=32273.0\n+\n+\n+License: Expat\n+ Permission is hereby granted, free of charge, to any person obtaining a\n+ copy of this software and associated documentation files (the\n+ \"Software\"), to deal in the Software without restriction, including\n+ without limitation the rights to use, copy, modify, merge, publish,\n+ distribute, sublicense, and/or sell copies of the Software, and to\n+ permit persons to whom the Software is furnished to do so, subject to\n+ the following conditions:\n+ .\n+ The above copyright notice and this permission notice shall be included\n+ in all copies or substantial portions of the Software.\n+ .\n+ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n+ OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n+ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n+ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n+ CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n+ TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n+ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+\n+License: ISC\n+ Permission to use, copy, modify, and distribute this software for any\n+ purpose with or without fee is hereby granted, provided that the above\n+ copyright notice and this permission notice appear in all copies.\n+ .\n+ THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\n+ WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\n+ WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR\n+ BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES\n+ OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\n+ WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n+ ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\n+ SOFTWARE.\n+\n+License: GPL-2+\n+ This program is free software; you can redistribute it and/or modify it\n+ under the terms of the GNU General Public License as published by the\n+ Free Software Foundation; either version 2, or (at your option) any\n+ later version.\n+ .\n+ This program is distributed in the hope that it will be useful, but\n+ WITHOUT ANY WARRANTY; without even the implied warranty of\n+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ General Public License for more details.\n+Comment:\n+ On Debian systems the GNU General Public License (GPL) version 2 is\n+ located in '/usr/share/common-licenses/GPL-2'.\n+ .\n+ You should have received a copy of the GNU General Public License along\n+ with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+License: GPL-3+\n+ Permission is granted to copy, distribute and/or modify this document\n+ under the terms of the GNU General Public License, Version 3 or any\n+ later version published by the Free Software Foundation.\n+Comment:\n+ On Debian systems the GNU General Public License (GPL) version 3 is\n+ located in '/usr/share/common-licenses/GPL-3'.\n+ .\n+ You should have received a copy of the GNU General Public License along\n+ with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+License: CC-BY-3\n+ This work is licensed under a Creative Commons Attribution 3.0 Unported\n+ License.\n+Comment:\n+ You can get a full copy of the license at\n+ <http://creativecommons.org/licenses/by/3.0/>.\n+\n+License: LGPL\n+ This program is free software: you can redistribute it and/or modify\n+ it under the terms of the GNU General Public License as published by\n+ the Free Software Foundation, either version 3 of the License, or\n+ (at your option) any later version.\n+ .\n+ This program is distributed in the hope that it will be useful,\n+ but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ GNU General Public License for more details.\n+Comment:\n+ On Debian systems the GNU Lesser General Public License (LGPL) is\n+ located in '/usr/share/common-licenses/LGPL'.\n+ .\n+ You should have received a copy of the GNU General Public License\n+ along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+License: PUB-DOM\n+ This work is in the public domain."
      },
      {
        "sha": "e56c43cb500a5fcdb781a137b97917ebaac44d49",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,88 @@\n+# bitcoin.conf configuration file. Lines beginning with # are comments.\n+\n+\n+# Network-related settings:\n+\n+# Run on the test network instead of the real bitcoin network.\n+#testnet=1\n+\n+# Connect via a socks4 proxy\n+#proxy=127.0.0.1:9050\n+\n+# Use as many addnode= settings as you like to connect to specific peers\n+#addnode=69.164.218.197\n+#addnode=10.0.0.2:8333\n+\n+# ... or use as many connect= settings as you like to connect ONLY\n+# to specific peers:\n+#connect=69.164.218.197\n+#connect=10.0.0.1:8333\n+\n+# Do not use Internet Relay Chat (irc.lfnet.org #bitcoin channel) to\n+# find other peers.\n+#noirc=1\n+\n+# Maximum number of inbound+outbound connections.\n+#maxconnections=\n+\n+\n+# JSON-RPC options (for controlling a running Bitcoin/bitcoind process)\n+\n+# server=1 tells Bitcoin to accept JSON-RPC commands.\n+#server=1\n+\n+# You must set rpcuser and rpcpassword to secure the JSON-RPC api\n+#rpcuser=Ulysseys\n+#rpcpassword=YourSuperGreatPasswordNumber_385593\n+\n+# By default, only RPC connections from localhost are allowed.  Specify\n+# as many rpcallowip= settings as you like to allow connections from\n+# other hosts (and you may use * as a wildcard character):\n+#rpcallowip=10.1.1.34\n+#rpcallowip=192.168.1.*\n+\n+# Listen for RPC connections on this TCP port:\n+rpcport=8332\n+\n+# You can use Bitcoin or bitcoind to send commands to Bitcoin/bitcoind\n+# running on another host using this option:\n+rpcconnect=127.0.0.1\n+\n+# Use Secure Sockets Layer (also known as TLS or HTTPS) to communicate\n+# with Bitcoin -server or bitcoind\n+#rpcssl=1\n+\n+# OpenSSL settings used when rpcssl=1\n+rpcsslciphers=TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH\n+rpcsslcertificatechainfile=server.cert\n+rpcsslprivatekeyfile=server.pem\n+\n+\n+# Miscellaneous options\n+\n+# Set gen=1 to attempt to generate bitcoins\n+gen=0\n+\n+# Use SSE instructions to try to generate bitcoins faster.\n+#4way=1\n+\n+# Pre-generate this many public/private key pairs, so wallet backups will be valid for\n+# both prior transactions and several dozen future transactions.\n+keypool=100\n+\n+# Pay an optional transaction fee every time you send bitcoins.  Transactions with fees\n+# are more likely than free transactions to be included in generated blocks, so may\n+# be validated sooner.\n+paytxfee=0.00\n+\n+# Allow direct connections for the 'pay via IP address' feature.\n+#allowreceivebyip=1\n+\n+\n+# User interface options\n+\n+# Start Bitcoin minimized\n+#min=1\n+\n+# Minimize to the system tray\n+#minimizetotray=1"
      },
      {
        "sha": "a7281f94b2b532a1b8b07631ce0fc5d598e27ecc",
        "filename": "contrib/debian/gbp.conf",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/gbp.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/gbp.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/gbp.conf?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,5 @@\n+# Configuration file for git-buildpackage and friends\n+\n+[DEFAULT]\n+pristine-tar = True\n+sign-tags = True"
      },
      {
        "sha": "1243253413e8da6b632c79ab093ca03c1250e4be",
        "filename": "contrib/debian/manpages/bitcoin.conf.5",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/manpages/bitcoin.conf.5",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/manpages/bitcoin.conf.5",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin.conf.5?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,94 @@\n+.TH BITCOIN.CONF \"5\" \"January 2011\" \"bitcoin.conf 3.19\"\n+.SH NAME\n+bitcoin.conf \\- bitcoin configuration file\n+.SH SYNOPSIS\n+All command-line options (except for '-datadir' and '-conf') may be specified in a configuration file, and all configuration file options may also be specified on the command line. Command-line options override values set in the configuration file.\n+.TP\n+The configuration file is a list of 'setting=value' pairs, one per line, with optional comments starting with the '#' character.\n+.TP\n+The configuration file is not automatically created; you can create it using your favorite plain-text editor. By default, bitcoind(1) will look for a file named bitcoin.conf(5) in the bitcoin data directory, but both the data directory and the configuration file path may be changed using the '-datadir' and '-conf' command-line arguments.\n+.SH LOCATION\n+bitcoin.conf should be located in $HOME/.bitcoin\n+.SH NETWORK-RELATED SETTINGS\n+.TP\n+.TP\n+\\fBtestnet=\\fR[\\fI'1'\\fR|\\fI'0'\\fR]\n+Enable or disable run on the test network instead of the real *bitcoin* network.\n+.TP\n+\\fBproxy=\\fR\\fI'127.0.0.1:9050'\\fR\n+Connect via a socks4 proxy.\n+.TP\n+\\fBaddnode=\\fR\\fI'10.0.0.2:8333'\\fR\n+Use as many *addnode=* settings as you like to connect to specific peers.\n+.TP\n+\\fBconnect=\\fR\\fI'10.0.0.1:8333'\\fR\n+Use as many *connect=* settings as you like to connect ONLY to specific peers.\n+.TP\n+\\fBnoirc=\\fR[\\fI'1'\\fR|\\fI'0'\\fR]\n+Use or Do not use Internet Relay Chat (irc.lfnet.org #bitcoin channel) to find other peers.\n+.TP\n+\\fRmaxconnections=\\fR\\fI'value'\\fR\n+Maximum number of inbound+outbound connections.\n+.SH JSON-RPC OPTIONS\n+.TP\n+\\fBserver=\\fR[\\fI'1'\\fR|\\fI'0'\\fR]\n+Tells *bitcoin* to accept or not accept JSON-RPC commands.\n+.TP\n+\\fBrpcuser=\\fR\\fI'username'\\fR\n+You must set *rpcuser* to secure the JSON-RPC api.\n+.TP\n+\\fBrpcpassword=\\fR\\fI'password'\\fR\n+You must set *rpcpassword* to secure the JSON-RPC api.\n+.TP\n+\\fBrpctimeout=\\fR\\fI'30'\\fR\n+How many seconds *bitcoin* will wait for a complete RPC HTTP request, after the HTTP connection is established.\n+.TP\n+\\fBrpcallowip=\\fR\\fI'192.168.1.*'\\fR\n+By default, only RPC connections from localhost are allowed. Specify as many *rpcallowip=* settings as you like to allow connections from other hosts (and you may use * as a wildcard character).\n+.TP\n+\\fBrpcport=\\fR\\fI'8332'\\fR\n+Listen for RPC connections on this TCP port.\n+.TP\n+\\fBrpcconnect=\\fR\\fI'127.0.0.1'\\fR\n+You can use *bitcoin* or *bitcoind(1)* to send commands to *bitcoin*/*bitcoind(1)* running on another host using this option.\n+.TP\n+\\fBrpcssl=\\fR\\fI'1'\\fR\n+Use Secure Sockets Layer (also known as TLS or HTTPS) to communicate with *bitcoin* '-server' or *bitcoind(1)*. Example of OpenSSL settings used when *rpcssl*='1':\n+.TP\n+\\fBrpcsslciphers=\\fR\\fI'TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH'\\fR\n+.TP\n+\\fBrpcsslcertificatechainfile=\\fR\\fI'server.cert'\\fR\n+.TP\n+\\fBrpcsslprivatekeyfile=\\fR\\fI'server.pem'\\fR\n+.TP\n+.SH MISCELLANEOUS OPTIONS\n+.TP\n+\\fBgen=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n+Enable or disable attempt to generate bitcoins.\n+.TP\n+\\fB4way=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n+Enable or disable use SSE instructions to try to generate bitcoins faster.\n+.TP\n+\\fBkeypool=\\fR\\fI'100'\\fR\n+Pre-generate this many public/private key pairs, so wallet backups will be valid for both prior transactions and several dozen future transactions.\n+.TP\n+\\fBpaytxfee=\\fR\\fI'0.00'\\fR\n+Pay an optional transaction fee every time you send bitcoins. Transactions with fees are more likely than free transactions to be included in generated blocks, so may be validated sooner.\n+.TP\n+\\fBallowreceivebyip=\\fR\\fI'1'\\fR\n+Allow direct connections for the 'pay via IP address' feature.\n+.TP\n+.SH USER INTERFACE OPTIONS\n+.TP\n+\\fBmin=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n+Enable or disable start bitcoind minimized.\n+.TP\n+\\fBminimizetotray=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]\n+Enable or disable minimize to the system tray.\n+.SH \"SEE ALSO\"\n+bitcoind(1)\n+.SH AUTHOR\n+This manual page was written by Micah Anderson <micah@debian.org> for the Debian system (but may be used by others). Permission is granted to copy, distribute and/or modify this document under the terms of the GNU General Public License, Version 3 or any later version published by the Free Software Foundation.\n+\n+On Debian systems, the complete text of the GNU General Public License can be found in /usr/share/common-licenses/GPL.\n+"
      },
      {
        "sha": "0179406a16d2074219269644b38d1d922ceb8e7a",
        "filename": "contrib/debian/manpages/bitcoind.1",
        "status": "added",
        "additions": 209,
        "deletions": 0,
        "changes": 209,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/manpages/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/manpages/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoind.1?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,209 @@\n+.TH BITCOIND \"1\" \"January 2011\" \"bitcoind 3.19\" \n+.SH NAME\n+bitcoind \\- peer-to-peer network based anonymous digital currency\n+.SH SYNOPSIS\n+bitcoin [options] <command> [params]  \n+.TP\n+bitcoin [options] help <command> - Get help for a command\n+.SH DESCRIPTION\n+This  manual page documents the bitcoind program. Bitcoin is a peer-to-peer digital currency. Peer-to-peer (P2P) means that there is no central authority to issue new money or keep track of transactions. Instead, these tasks are managed collectively by the nodes of the network. Advantages:\n+\n+Bitcoins can be sent easily through the Internet, without having to trust middlemen. Transactions are designed to be irreversible. Be safe from instability caused by fractional reserve banking and central banks. The limited inflation of the Bitcoin system\u2019s money supply is distributed evenly (by CPU power) throughout the network, not monopolized by banks.\n+\n+.SH OPTIONS\n+.TP\n+\\fB\\-conf=\\fR<file>\n+Specify configuration file (default: bitcoin.conf)\n+.TP\n+\\fB\\-gen\\fR\n+Generate coins\n+.TP\n+\\fB\\-gen\\fR=\\fI0\\fR\n+Don't generate coins\n+.TP\n+\\fB\\-min\\fR\n+Start minimized\n+.TP\n+\\fB\\-datadir=\\fR<dir>\n+Specify data directory\n+.TP\n+\\fB\\-proxy=\\fR<ip:port>\n+Connect through socks4 proxy\n+.TP\n+\\fB\\-addnode=\\fR<ip>\n+Add a node to connect to\n+.TP\n+\\fB\\-connect=\\fR<ip>\n+Connect only to the specified node\n+.TP\n+\\fB\\-paytxfee=\\fR<amt>\n+Fee per KB to add to transactions you send\n+.TP\n+\\fB\\-server\\fR\n+Accept command line and JSON\\-RPC commands\n+.TP\n+\\fB\\-daemon\\fR\n+Run in the background as a daemon and accept commands\n+.TP\n+\\fB\\-testnet\\fR\n+Use the test network\n+.TP\n+\\fB\\-rpcuser=\\fR<user>\n+Username for JSON\\-RPC connections\n+.TP\n+\\fB\\-rpcpassword=\\fR<pw>\n+Password for JSON\\-RPC connections\n+.TP\n+\\fB\\-rpcport=\\fR<port>\n+Listen for JSON\\-RPC connections on <port>\n+.TP\n+\\fB\\-rpcallowip=\\fR<ip>\n+Allow JSON\\-RPC connections from specified IP address\n+.TP\n+\\fB\\-rpcconnect=\\fR<ip>\n+Send commands to node running on <ip>\n+.PP\n+SSL options: (see the Bitcoin Wiki for SSL setup instructions)\n+.TP\n+\\fB\\-rpcssl\\fR=\\fI1\\fR\n+Use OpenSSL (https) for JSON\\-RPC connections\n+.TP\n+\\fB\\-rpcsslcertificatchainfile=\\fR<file.cert>\n+Server certificate file (default: server.cert)\n+.TP\n+\\fB\\-rpcsslprivatekeyfile=\\fR<file.pem>\n+Server private key (default: server.pem)\n+.TP\n+\\fB\\-rpcsslciphers=\\fR<ciphers>\n+Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\n+.TP\n+\\-?\n+This help message\n+.SH COMMANDS\n+.TP\n+\\fBbackupwallet 'destination'\\fR\n+Safely copies *wallet.dat* to 'destination', which can be a directory or a path with filename.\n+.TP\n+\\fBgetaccount 'bitcoinaddress'\\fR\n+Returns the account associated with the given address.\n+.TP\n+\\fBsetaccount 'bitcoinaddress' ['account']\\fR\n+Sets the ['account'] associated with the given address. ['account'] may be omitted to remove an address from ['account'].\n+.TP\n+\\fBgetaccountaddress 'account'\\fR\n+Returns a new bitcoin address for 'account'.\n+.TP\n+\\fBgetaddressesbyaccount 'account'\\fR\n+Returns the list of addresses associated with the given 'account'.\n+.TP\n+\\fBgetbalance 'account'\\fR\n+Returns the server's available balance, or the balance for 'account'.\n+.TP\n+\\fBgetblockcount\\fR\n+Returns the number of blocks in the longest block chain.\n+.TP\n+\\fBgetblocknumber\\fR\n+Returns the block number of the latest block in the longest block chain.\n+.TP\n+\\fBgetconnectioncount\\fR\n+Returns the number of connections to other nodes.\n+.TP\n+\\fBgetdifficulty\\fR\n+Returns the proof-of-work difficulty as a multiple of the minimum difficulty.\n+.TP\n+\\fBgetgenerate\\fR\n+Returns boolean true if server is trying to generate bitcoins, false otherwise.\n+.TP\n+\\fBsetgenerate 'generate' ['genproclimit']\\fR\n+Generation is limited to ['genproclimit'] processors, -1 is unlimited.\n+.TP\n+\\fBgethashespersec\\fR\n+Returns a recent hashes per second performance measurement while generating.\n+.TP\n+\\fBgetinfo\\fR\n+Returns an object containing server information.\n+.TP\n+\\fBgetnewaddress 'account'\\fR\n+Returns a new bitcoin address for receiving payments. If 'account' is specified (recommended), it is added to the address book so payments received with the address will be credited to 'account'.\n+.TP\n+\\fBgetreceivedbyaccount 'account' ['minconf=1']\\fR\n+Returns the total amount received by addresses associated with 'account' in transactions with at least ['minconf'] confirmations.\n+.TP\n+\\fBgetreceivedbyaddress 'bitcoinaddress' ['minconf=1']\\fR\n+Returns the total amount received by 'bitcoinaddress' in transactions with at least ['minconf'] confirmations.\n+.TP\n+\\fBgettransaction 'txid'\\fR\n+Returns information about a specific transaction, given hexadecimal transaction ID.\n+.TP\n+\\fBgetwork 'data'\\fR\n+If 'data' is specified, tries to solve the block and returns true if it was successful. If 'data' is not specified, returns formatted hash 'data' to work on:\n+\n+    \"midstate\" : precomputed hash state after hashing the first half of the data.\n+    \"data\"     : block data.\n+    \"hash1\"    : formatted hash buffer for second hash.\n+    \"target\"   : little endian hash target.\n+.TP\n+\\fBhelp 'command'\\fR\n+List commands, or get help for a command.\n+.TP\n+\\fBlistaccounts ['minconf=1']\\fR\n+List accounts and their current balances.\n+     *note: requires bitcoin 0.3.20 or later.\n+.TP\n+\\fBlistreceivedbyaccount ['minconf=1'] ['includeempty=false']\\fR\n+['minconf'] is the minimum number of confirmations before payments are included. ['includeempty'] whether to include addresses that haven't received any payments. Returns an array of objects containing:\n+\n+    \"account\"       : the account of the receiving address.\n+    \"amount\"        : total amount received by the address.\n+    \"confirmations\" : number of confirmations of the most recent transaction included.\n+.TP\n+\\fBlistreceivedbyaddress ['minconf=1'] ['includeempty=false']\\fR\n+['minconf'] is the minimum number of confirmations before payments are included. ['includeempty'] whether to include addresses that haven't received any payments. Returns an array of objects containing:\n+\n+    \"address\"       : receiving address.\n+    \"account\"       : the account of the receiving address.\n+    \"amount\"        : total amount received by the address.\n+    \"confirmations\" : number of confirmations of the most recent transaction included.\n+.TP\n+\\fBlisttransactions 'account' ['count=10']\\fR\n+Returns a list of the last ['count'] transactions for 'account' - for all accounts if 'account' is not specified or is \"*\". Each entry in the list may contain:\n+\n+    \"category\"      : will be generate, send, receive, or move.\n+    \"amount\"        : amount of transaction.\n+    \"fee\"           : Fee (if any) paid (only for send transactions).\n+    \"confirmations\" : number of confirmations (only for generate/send/receive).\n+    \"txid\"          : transaction ID (only for generate/send/receive).\n+    \"otheraccount\"  : account funds were moved to or from (only for move).\n+    \"message\"       : message associated with transaction (only for send).\n+    \"to\"            : message-to associated with transaction (only for send).\n+\n+    *note: requires bitcoin 0.3.20 or later.\n+.TP\n+\\fBmove <'fromaccount'> <'toaccount'> <'amount'> ['minconf=1'] ['comment']\\fR\n+Moves funds between accounts.\n+.TP\n+\\fBsendfrom* <'account'> <'bitcoinaddress'> <'amount'> ['minconf=1'] ['comment'] ['comment-to']\\fR\n+Sends amount from account's balance to 'bitcoinaddress'. This method will fail if there is less than amount bitcoins with ['minconf'] confirmations in the account's balance (unless account is the empty-string-named default account; it behaves like the *sendtoaddress* method). Returns transaction ID on success.\n+.TP     \n+\\fBsendtoaddress 'bitcoinaddress' 'amount' ['comment'] ['comment-to']\\fR\n+Sends amount from the server's available balance to 'bitcoinaddress'. amount is a real and is rounded to the nearest 0.01. Returns transaction id on success.\n+.TP    \n+\\fBstop\\fR\n+Stops the bitcoin server.\n+.TP    \n+\\fBvalidateaddress 'bitcoinaddress'\\fR\n+Checks that 'bitcoinaddress' looks like a proper bitcoin address. Returns an object containing:\n+\n+    \"isvalid\" : true or false.\n+    \"ismine\"  : true if the address is in the server's wallet.\n+    \"address\" : bitcoinaddress.\n+\n+    *note: ismine and address are only returned if the address is valid.\n+\n+.SH \"SEE ALSO\"\n+bitcoin.conf(5)\n+.SH AUTHOR\n+This manual page was written by Micah Anderson <micah@debian.org> for the Debian system (but may be used by others). Permission is granted to copy, distribute and/or modify this document under the terms of the GNU General Public License, Version 3 or any later version published by the Free Software Foundation.\n+\n+On Debian systems, the complete text of the GNU General Public License can be found in /usr/share/common-licenses/GPL.\n+"
      },
      {
        "sha": "56a20af38cf0d53a720c233fc3c406ee76bbc637",
        "filename": "contrib/debian/patches/1001_use_system_json-spirit.patch",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/patches/1001_use_system_json-spirit.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/patches/1001_use_system_json-spirit.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/patches/1001_use_system_json-spirit.patch?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,26 @@\n+Description: Use system JSON Spirit library\n+Author: Jonas Smedegaard <dr@jones.dk>\n+Last-Update: 2011-05-17\n+--- a/src/rpc.cpp\n++++ b/src/rpc.cpp\n+@@ -12,9 +12,7 @@\n+ #include <boost/asio/ssl.hpp> \n+ typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n+ #endif\n+-#include \"json/json_spirit_reader_template.h\"\n+-#include \"json/json_spirit_writer_template.h\"\n+-#include \"json/json_spirit_utils.h\"\n++#include <json_spirit.h>\n+ #define printf OutputDebugStringF\n+ // MinGW 3.4.5 gets \"fatal error: had to relocate PCH\" if the json headers are\n+ // precompiled in headers.h.  The problem might be when the pch file goes over\n+--- a/src/makefile.unix\n++++ b/src/makefile.unix\n+@@ -23,6 +23,7 @@\n+    -l boost_thread \\\n+    -l db_cxx \\\n+    -l ssl \\\n++   -l json_spirit \\\n+    -l crypto\n+ \n+ ifdef USE_UPNP"
      },
      {
        "sha": "80c1584376a9798f816d904a07f9288adbde225d",
        "filename": "contrib/debian/patches/README",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/patches/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/patches/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/patches/README?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,3 @@\n+0xxx: Grabbed from upstream development.\n+1xxx: Possibly relevant for upstream adoption.\n+2xxx: Only relevant for official Debian release."
      },
      {
        "sha": "bbe3685ac2abd023cffcdac6cca0cc5017872c4d",
        "filename": "contrib/debian/patches/series",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/patches/series",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/patches/series",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/patches/series?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1 @@\n+#1001_use_system_json-spirit.patch"
      },
      {
        "sha": "a1d65652e39933557a5f01eabe26449e2892698d",
        "filename": "contrib/debian/rules",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/rules",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/rules",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/rules?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,33 @@\n+#!/usr/bin/make -f\n+# -*- mode: makefile; coding: utf-8 -*-\n+\n+#DEB_MAKE_CHECK_TARGET = test_bitcoin\n+#build/bitcoind::\n+#\t$(if $(filter nocheck,$(DEB_BUILD_OPTIONS)),,src/test_bitcoin)\n+\n+DEB_INSTALL_EXAMPLES_bitcoind += debian/examples/*\n+DEB_INSTALL_MANPAGES_bitcoind += debian/manpages/*\n+\n+%:\n+\tdh $@\n+\n+override_dh_auto_build:\n+\tcd src; $(MAKE) -f makefile.unix bitcoind\n+\t$(MAKE)\n+\n+override_dh_auto_clean:\n+\tif [ -f Makefile ]; then $(MAKE) clean; else rm -rf build/; rm -f bitcoin-qt; fi\n+\tcd src; $(MAKE) -f makefile.unix clean\n+\n+override_dh_auto_configure:\n+\tqmake bitcoin-qt.pro\n+\n+override_dh_auto_test:\n+\tcd src; $(MAKE) -f makefile.unix test_bitcoin\n+\tsrc/test_bitcoin\n+\n+# Ensure wrapper is set executable\n+binary-post-install/bitcoind:\n+\tchmod +x $(cdbs_curdestdir)usr/bin/bitcoind\n+binary-post-install/bitcoin-qt:\n+\tchmod +x $(cdbs_curdestdir)usr/bin/bitcoin-qt"
      },
      {
        "sha": "163aaf8d82b6c54f23c45f32895dbdfdcc27b047",
        "filename": "contrib/debian/source/format",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/source/format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/source/format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/source/format?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1 @@\n+3.0 (quilt)"
      },
      {
        "sha": "c96d2f8e75ca493f8ae774adfe7f0449dbd5305a",
        "filename": "contrib/debian/watch",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/watch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/debian/watch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/watch?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,7 @@\n+# Run the \"uscan\" command to check for upstream updates and more.\n+version=3\n+# use qa.debian.org redirector; see man uscan\n+opts=uversionmangle=s/(\\d)(alpha|beta|rc)/$1~$2/;s/\\-src//,dversionmangle=s/~dfsg\\d*// \\\n+ http://sf.net/bitcoin/bitcoin-(\\d.*)-linux\\.tar\\.gz debian\n+opts=uversionmangle=s/(\\d)(alpha|beta|rc)/$1~$2/,dversionmangle=s/~dfsg\\d*// \\\n+ http://githubredir.debian.net/github/bitcoin/bitcoin v(.*).tar.gz"
      },
      {
        "sha": "fd8a8b71298c6b5878c83842cd3f68804560a2e2",
        "filename": "contrib/qt_translations.py",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/qt_translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/contrib/qt_translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qt_translations.py?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,22 @@\n+#!/usr/bin/env python\n+\n+# Helpful little script that spits out a comma-separated list of\n+# language codes for Qt icons that should be included\n+# in binary bitcoin distributions\n+\n+import glob\n+import os\n+import re\n+import sys\n+\n+if len(sys.argv) != 3:\n+  sys.exit(\"Usage: %s $QTDIR/translations $BITCOINDIR/src/qt/locale\"%sys.argv[0])\n+\n+d1 = sys.argv[1]\n+d2 = sys.argv[2]\n+\n+l1 = set([ re.search(r'qt_(.*).qm', f).group(1) for f in glob.glob(os.path.join(d1, 'qt_*.qm')) ])\n+l2 = set([ re.search(r'bitcoin_(.*).qm', f).group(1) for f in glob.glob(os.path.join(d2, 'bitcoin_*.qm')) ])\n+\n+print \",\".join(sorted(l1.intersection(l2)))\n+"
      },
      {
        "sha": "8d23f7e59cdebac4baf8ae2eb8460eab8fac19b0",
        "filename": "doc/assets-attribution.txt",
        "status": "modified",
        "additions": 11,
        "deletions": 32,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/doc/assets-attribution.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/doc/assets-attribution.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.txt?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -3,19 +3,18 @@ Icon: src/qt/res/icons/clock*.png, src/qt/res/icons/tx*.png,\n Designer: Wladimir van der Laan\n License: Creative Commons Attribution\n \n-Icon: src/qt/res/icons/send.png\n-Icon Pack: Vista Style Arrow\n-Designer: Icons Land\n-License: Freeware Non-commercial\n-Site: http://findicons.com/icon/231371/right3green\n-\n-Icon: src/qt/res/icons/address-book.png\n-Icon Pack: Farm-Fresh Web\n-Designer: FatCow Web Hosting\n-License: Creative Commons Attribution (by)\n-Site: http://findicons.com/icon/163938/book_open\n+Icon: src/qt/res/icons/address-book.png, src/qt/res/icons/export.png,\n+      src/qt/res/icons/history.png, src/qt/res/icons/key.png,\n+      src/qt/res/icons/lock_*.png, src/qt/res/icons/overview.png,\n+      src/qt/res/icons/receive.png, src/qt/res/icons/send.png,\n+      src/qt/res/icons/synced.png\n+Icon Pack: NUVOLA ICON THEME for KDE 3.x\n+Designer: David Vignoni (david@icon-king.com)\n+          ICON KING - www.icon-king.com\n+License: LGPL\n+Site: http://www.icon-king.com/projects/nuvola/\n \n-Icon: src/qt/res/icons/connect*.png, src/qt/res/icons/synced.png, src/qt/res/icons/lock_*.png\n+Icon: src/qt/res/icons/connect*.png\n Icon Pack: Human-O2\n Designer: schollidesign\n License: GNU/GPL\n@@ -35,24 +34,11 @@ Designer: http://www.everaldo.com\n Icon Pack: Crystal SVG\n License: LGPL\n \n-Icon: src/qt/res/icons/receive.png, src/qt/res/icons/history.png,\n-      src/qt/res/icons/export.png\n-Designer: Oxygen team\n-Icon Pack: Oxygen\n-License: Creative Common Attribution-ShareAlike 3.0 License or LGPL\n-Site: http://www.oxygen-icons.org/\n-\n Icon: src/qt/res/icons/bitcoin.png, src/qt/res/icons/toolbar.png\n Designer: Bitboy (optimized for 16x16 by Wladimir van der Laan)\n License: Public Domain\n Site: http://forum.bitcoin.org/?topic=1756.0\n \n-Icon: src/qt/res/icons/overview.png\n-Icon Pack: Primo\n-Designer: Jack Cai\n-License: Creative Commons Attribution No Derivatives (by-nd)\n-Site: http://findicons.com/icon/175944/home?id=176221#\n-\n Icon:  scripts/img/reload.xcf (modified),src/qt/res/movies/update_spinner.mng\n Icon Pack: Kids\n Designer: Everaldo (Everaldo Coelho)\n@@ -64,10 +50,3 @@ Designer: Crobbo (forum)\n Site: https://bitcointalk.org/index.php?topic=32273.0\n License: Public domain\n \n-Icon: src/qt/res/icons/key.png\n-Designer: VisualPharm (Ivan Boyko)\n-Icon Pack: Must Have\n-Site: http://findicons.com/icon/51009/key?id=51009\n-License: Creative Commons Attribution (by)\n-\n-"
      },
      {
        "sha": "c62079d541aae708c0f439d615f712c3b73de565",
        "filename": "doc/release-process.txt",
        "status": "modified",
        "additions": 17,
        "deletions": 19,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/doc/release-process.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/doc/release-process.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.txt?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -44,14 +44,16 @@\n   * Build bitcoind and bitcoin-qt on Linux32, Linux64, and Win32:\n    ./bin/gbuild --commit bitcoin=v$VERSION ../bitcoin/contrib/gitian-descriptors/gitian.yml\n    ./bin/gsign --signer $SIGNER --release $VERSION --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian.yml\n-   cd build/out\n-   zip bitcoin-$VERSION-linux-gitian.zip *\n+   pushd build/out\n+   zip -r bitcoin-$VERSION-linux-gitian.zip *\n    mv bitcoin-$VERSION-linux-gitian.zip ../../\n+   popd\n    ./bin/gbuild --commit bitcoin=v$VERSION ../bitcoin/contrib/gitian-descriptors/gitian-win32.yml\n    ./bin/gsign --signer $SIGNER --release $VERSION-win32 --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win32.yml\n-   cd build/out\n-   zip bitcoin-$VERSION-win32-gitian.zip *\n+   pushd build/out\n+   zip -r bitcoin-$VERSION-win32-gitian.zip *\n    mv bitcoin-$VERSION-win32-gitian.zip ../../\n+   popd\n \n   Build output expected:\n   1. linux 32-bit and 64-bit binaries + source (bitcoin-$VERSION-linux-gitian.zip)\n@@ -61,18 +63,15 @@\n * repackage gitian builds for release as stand-alone zip/tar/installer exe\n \n   * Linux .tar.gz:\n-   mkdir bitcoin-$VERSION-linux\n-   cd bitcoin-$VERSION-linux\n-   unzip bitcoin-$VERSION-linux-gitian.zip\n-   cd ..; tar czvf bitcoin-$VERSION-linux.tar.gz bitcoin-$VERSION-linux\n+   unzip bitcoin-$VERSION-linux-gitian.zip -d bitcoin-$VERSION-linux\n+   tar czvf bitcoin-$VERSION-linux.tar.gz bitcoin-$VERSION-linux\n+   rm -rf bitcoin-$VERSION-linux\n \n   * Windows .zip and setup.exe:\n-   mkdir bitcoin-$VERSION-win32\n-   cd bitcoin-$VERSION-win32\n-   unzip bitcoin-$VERSION-win32-gitian.zip\n-   mv bitcoin-$VERSION-win32-setup.exe ..\n-   cd ..; zip bitcoin-$VERSION-win32.zip bitcoin-$VERSION-win32\n-\n+   unzip bitcoin-$VERSION-win32-gitian.zip -d bitcoin-$VERSION-win32\n+   mv bitcoin-$VERSION-win32/bitcoin-*-setup.exe .\n+   zip -r bitcoin-$VERSION-win32.zip bitcoin-$VERSION-win32\n+   rm -rf bitcoin-$VERSION-win32\n \n * perform Mac build\n   See this blog post for how Gavin set up his build environment and\n@@ -81,7 +80,8 @@\n   qmake USE_SSL=1 USE_UPNP=1 bitcoin-qt.pro\n   make\n   export QTDIR=/opt/local/share/qt4  # needed to find translations/qt_*.qm files\n-  contrib/macdeploy/macdeployqtplus Bitcoin-Qt.app -add-qt-tr de,es,ru -dmg -fancy contrib/macdeploy/fancy.plist  \n+  T=$(contrib/qt_translations.py $QTDIR/translations src/qt/locale)\n+  contrib/macdeploy/macdeployqtplus Bitcoin-Qt.app -add-qt-tr $T -dmg -fancy contrib/macdeploy/fancy.plist  \n \n  Build output expected:\n   Bitcoin-Qt.dmg\n@@ -112,7 +112,7 @@\n      cp ../gitian.sigs/$VERSION/$file/bitcoin-build.assert ./gitian/$file-build.assert\n      cp ../gitian.sigs/$VERSION/$file/bitcoin-build.assert.sig ./gitian/$file-build.assert.sig\n    done\n-   zip bitcoin-$VERSION-linux-gitian.zip *\n+   zip -r bitcoin-$VERSION-linux-gitian.zip *\n    cp bitcoin-$VERSION-linux-gitian.zip ../\n    cd ..\n    mkdir bitcoin-$VERSION-linux-gitian; cd bitcoin-$VERSION-linux-gitian\n@@ -123,9 +123,7 @@\n      cp ../gitian.sigs/$VERSION/$file/bitcoin-build.assert ./gitian/$file-build.assert\n      cp ../gitian.sigs/$VERSION/$file/bitcoin-build.assert.sig ./gitian/$file-build.assert.sig\n    done\n-   zip bitcoin-$VERSION-linux-gitian.zip *\n+   zip -r bitcoin-$VERSION-linux-gitian.zip *\n    cp bitcoin-$VERSION-linux-gitian.zip ../\n \n   * Upload gitian zips to SourceForge\n-\n-"
      },
      {
        "sha": "f538a44d2d43e7ca9b80d806e08c296104990323",
        "filename": "share/pixmaps/bitcoin32.xpm",
        "status": "added",
        "additions": 232,
        "deletions": 0,
        "changes": 232,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/share/pixmaps/bitcoin32.xpm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/share/pixmaps/bitcoin32.xpm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/pixmaps/bitcoin32.xpm?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,232 @@\n+/* XPM */\n+static const char * bitcoin32_xpm[] = {\n+/* columns rows colors chars-per-pixel */\n+\"32 32 194 2\",\n+\"   c #745305\",\n+\".  c #785704\",\n+\"X  c #7C5903\",\n+\"o  c #75560B\",\n+\"O  c #77590F\",\n+\"+  c #7C5C0B\",\n+\"@  c #795B12\",\n+\"#  c #7F631D\",\n+\"$  c #825E07\",\n+\"%  c #825F0B\",\n+\"&  c #85610A\",\n+\"*  c #8C660C\",\n+\"=  c #8E680E\",\n+\"-  c #916B0F\",\n+\";  c #856515\",\n+\":  c #8B6714\",\n+\">  c #8F6A16\",\n+\",  c #816218\",\n+\"<  c #88691C\",\n+\"1  c #926D12\",\n+\"2  c #936F1C\",\n+\"3  c #997417\",\n+\"4  c #94721E\",\n+\"5  c #9B761C\",\n+\"6  c #9F781C\",\n+\"7  c #A17B1E\",\n+\"8  c #826622\",\n+\"9  c #916E20\",\n+\"0  c #967425\",\n+\"q  c #9D7420\",\n+\"w  c #9C7923\",\n+\"e  c #997728\",\n+\"r  c #99792C\",\n+\"t  c #A37D23\",\n+\"y  c #A37F2C\",\n+\"u  c #A68125\",\n+\"i  c #AB8225\",\n+\"p  c #A5832B\",\n+\"a  c #AA852C\",\n+\"s  c #B28A2C\",\n+\"d  c #A58233\",\n+\"f  c #AC8734\",\n+\"g  c #AE8C33\",\n+\"h  c #AC8C3C\",\n+\"j  c #B28C33\",\n+\"k  c #B98E34\",\n+\"l  c #B28D3D\",\n+\"z  c #B59136\",\n+\"x  c #BC9335\",\n+\"c  c #B3913E\",\n+\"v  c #BC933A\",\n+\"b  c #BF9A3D\",\n+\"n  c #C19235\",\n+\"m  c #C2953C\",\n+\"M  c #C39B3C\",\n+\"N  c #CA9C3D\",\n+\"B  c #B59343\",\n+\"V  c #BE9642\",\n+\"C  c #B69A44\",\n+\"Z  c #BD9A45\",\n+\"A  c #B49649\",\n+\"S  c #BB9A49\",\n+\"D  c #BB9F52\",\n+\"F  c #BFA256\",\n+\"G  c #C49C43\",\n+\"H  c #CA9D41\",\n+\"J  c #C59D4A\",\n+\"K  c #C99E4D\",\n+\"L  c #C3A144\",\n+\"P  c #CDA244\",\n+\"I  c #CFAA47\",\n+\"U  c #C3A14D\",\n+\"Y  c #CDA24A\",\n+\"T  c #CCAB49\",\n+\"R  c #D2A644\",\n+\"E  c #D2A54B\",\n+\"W  c #D6AA4C\",\n+\"Q  c #DAAE4E\",\n+\"!  c #DAB04F\",\n+\"~  c #C7A656\",\n+\"^  c #CDA452\",\n+\"/  c #CFAC52\",\n+\"(  c #C0A65E\",\n+\")  c #CEA75A\",\n+\"_  c #CCAC59\",\n+\"`  c #D2AB53\",\n+\"'  c #DCAF52\",\n+\"]  c #D6AD5A\",\n+\"[  c #D9AE5B\",\n+\"{  c #DCB556\",\n+\"}  c #DFB855\",\n+\"|  c #D6B25F\",\n+\" . c #DCB35C\",\n+\".. c #DEBE5E\",\n+\"X. c #E2B656\",\n+\"o. c #E1B55A\",\n+\"O. c #E6BC5D\",\n+\"+. c #E9BD5E\",\n+\"@. c #C3AA63\",\n+\"#. c #CCAD62\",\n+\"$. c #D4AF62\",\n+\"%. c #CDB565\",\n+\"&. c #CEB46D\",\n+\"*. c #D7B164\",\n+\"=. c #DBB362\",\n+\"-. c #D6BD64\",\n+\";. c #DDBA64\",\n+\":. c #D3B66C\",\n+\">. c #DFB86B\",\n+\",. c #CEB772\",\n+\"<. c #D0B771\",\n+\"1. c #D4BA73\",\n+\"2. c #D9BE77\",\n+\"3. c #D6BE79\",\n+\"4. c #D8BF7A\",\n+\"5. c #E4BB62\",\n+\"6. c #E9BF64\",\n+\"7. c #E4BC69\",\n+\"8. c #E9BF69\",\n+\"9. c #E0BB71\",\n+\"0. c #E9C05E\",\n+\"q. c #D2C279\",\n+\"w. c #DBC27C\",\n+\"e. c #E2C667\",\n+\"r. c #EDC364\",\n+\"t. c #E3C16E\",\n+\"y. c #ECC46C\",\n+\"u. c #EDCC6C\",\n+\"i. c #F1C764\",\n+\"p. c #F5CA66\",\n+\"a. c #F9CD67\",\n+\"s. c #F5CC6A\",\n+\"d. c #F9CD6B\",\n+\"f. c #FBD36F\",\n+\"g. c #EDC572\",\n+\"h. c #E5CF77\",\n+\"j. c #ECCA74\",\n+\"k. c #E0C67E\",\n+\"l. c #EFCE78\",\n+\"z. c #F6CE72\",\n+\"x. c #FBCF71\",\n+\"c. c #F4CE79\",\n+\"v. c #F4D273\",\n+\"b. c #FCD473\",\n+\"n. c #F4DC75\",\n+\"m. c #FEDA74\",\n+\"M. c #F6D77C\",\n+\"N. c #FBD47A\",\n+\"B. c #F1DA7B\",\n+\"V. c #FDDA7C\",\n+\"C. c #FEE27D\",\n+\"Z. c #DDC683\",\n+\"A. c #DFC884\",\n+\"S. c #E4CA84\",\n+\"D. c #E3CC89\",\n+\"F. c #E7D183\",\n+\"G. c #EFD280\",\n+\"H. c #EFDC82\",\n+\"J. c #ECD48D\",\n+\"K. c #EFDA8C\",\n+\"L. c #F9D783\",\n+\"P. c #F2DF83\",\n+\"I. c #FCDB83\",\n+\"U. c #F5DC8F\",\n+\"Y. c #FADD8B\",\n+\"T. c #EBD593\",\n+\"R. c #EFDA99\",\n+\"E. c #F3DD93\",\n+\"W. c #F3DF9F\",\n+\"Q. c #FFE385\",\n+\"!. c #FEE986\",\n+\"~. c #FDE48C\",\n+\"^. c #FEEC8E\",\n+\"/. c #ECE199\",\n+\"(. c #F6E591\",\n+\"). c #FEE494\",\n+\"_. c #FEEB93\",\n+\"`. c #FEE69A\",\n+\"'. c #FFEB9B\",\n+\"]. c #FFF197\",\n+\"[. c #FFF39B\",\n+\"{. c #FEF99B\",\n+\"}. c #F6E2A2\",\n+\"|. c #F9E5A5\",\n+\" X c #F7E9A5\",\n+\".X c #FEECA4\",\n+\"XX c #FBE7A8\",\n+\"oX c #FDEAAB\",\n+\"OX c #F7F2AA\",\n+\"+X c #FEF2AC\",\n+\"@X c #FDF4B4\",\n+\"#X c #FFFABA\",\n+\"$X c #FFFEC2\",\n+\"%X c None\",\n+/* pixels */\n+\"%X%X%X%X%X%X%X%X%X%X%X%Xp t 6 5 w t w %X%X%X%X%X%X%X%X%X%X%X%X%X\",\n+\"%X%X%X%X%X%X%X%X%Xu u x I X.0.s.u.0.W x 7 4 %X%X%X%X%X%X%X%X%X%X\",\n+\"%X%X%X%X%X%X%Xy i I i.a.f.m.m.b.f.s.a.s.i.W 7 > %X%X%X%X%X%X%X%X\",\n+\"%X%X%X%X%X%Xt M 0.a.m.m.m.m.f.d.p.p.p.f.d.f.i.b 1 < %X%X%X%X%X%X\",\n+\"%X%X%X%X%X7 ! d.f.f.m.f.+.W P R I Q 5.v.V.V.z.f.{ 5 + %X%X%X%X%X\",\n+\"%X%X%X%Xu X.f.m.m.f.' H s ~ V y _ Z J o.g.L.L.Q.!.e.5 X %X%X%X%X\",\n+\"%X%X%Xu X.b.C.m.+.N m n t }.3.> }.w.V 5.y.y.Y.[.^.^.-.1 + %X%X%X\",\n+\"%X%Xt P m.N.m.X.v v v k 6 }.1.: /.4.c 7.N.N.v.!.{.{.^.L & %X%X%X\",\n+\"%X%Xg Y.Y.V.+.m k a t t : }.1.% }.1.r | l.B.M.b.!.{.^.n.7 X %X%X\",\n+\"%Xp -._.'.Y.' Y n D.}.}.|.oXXX|.oX XT.w.F _ j.v.v._.^.C.T & @ %X\",\n+\"%Xa (.'.'.9.[ [ K S.}.oXoXoXoXXXoXoXoXoX XD / s.d.v.!.C.v.3 o %X\",\n+\"%XU '.'.Y.[ [ [ [ J f <.oXoX( 2 f S J.oXoXT.j r.s.i.C.C.C.z X %X\",\n+\"p e.'.'.F. .=.=.=.=.) 1.oXoX@.f  . .F oXoX}.a +.i.i.b.C.m.I X O \",\n+\"u w.'.[.j.5.8.7.7.7.] 2.oXoX@.y W c &.oXoXZ.k r.s.i.s.V.m.} = o \",\n+\"u H.[.{.y.8.y.g.8.g.7.2.oXoXA.@.&.D.oXoXT.e G +.O.O.5.V.m.0.- o \",\n+\"u !.].[.r.8.y.g.g.g.7.4.oXoXoXoXoXoXoXoXoX<.y W X.o.o.m.m.0.- o \",\n+\"u B._._.5.5.8.y.g.c.g.w.oXoX,.h A F <..XoXoX1.k ' ' ' V.N.r.-   \",\n+\"u u.Q.~.r.6.z.N.V.I.v.k.oXoX@.B | _ c 1.oXoX}.a ' ' O.I.b.O.= o \",\n+\"u ..Q.Q.v.i.s.c.N.L.l.Z.oXoX@.B t.=.S &.oXoXXXy Y R +.N.b.Q % o \",\n+\"t T C.I.I.6.u.z.z.5.S 1.oXoX@.e B h D |.oXoXS.f Y Y 6.d.d.n X O \",\n+\"%Xs m.V.Q.r.r.z.5.<.}.oXoXoXXXW.}.oXoXoXoXW.h G H R a.p.s.7   %X\",\n+\"%X7 O.V.V.v.+.r.` 4.oXoXoXoXoXoXoXoXXXR.<.h v N N o.a.p.Q =   %X\",\n+\"%Xw x v.v.v.r.+. .Z l d e }.Z.r }.3.d l V G n n R a.s.a.s X O %X\",\n+\"%X%X6 { v.l.v.+.O.5.=.^ d }.4.9 }.1.f J G m m G d.d.x.Q =   %X%X\",\n+\"%X%X%Xs u.v.v.v.r.6.o. .l }.4.9 W.4.l ^ ^ J ) c.N.N.y.7 X O %X%X\",\n+\"%X%X%X5 z v.v.M.I.g.;. .J 1.#.B 1.#.) 7.$.S..X'.W.Y.j $   %X%X%X\",\n+\"%X%X%X%X5 b N.Y.~.).Y.j.5.$.=.=.$.*.2.J.@X$X#X#XoXC $   %X%X%X%X\",\n+\"%X%X%X%X%X3 z U.@X+X`.`.`.(.E.E.E.|.@X@X#X#X#X/.j %   %X%X%X%X%X\",\n+\"%X%X%X%X%X%Xw a q.OX|.).`._.'.'.XX.X.X+X+X X%.w X o %X%X%X%X%X%X\",\n+\"%X%X%X%X%X%X%X%Xw a _ j.~.~.).).`.`.`.F._ t & . # %X%X%X%X%X%X%X\",\n+\"%X%X%X%X%X%X%X%X%X%X4 3 t z L U Z z t 1 $ . 8 %X%X%X%X%X%X%X%X%X\",\n+\"%X%X%X%X%X%X%X%X%X%X%X%X%X< ; & + + , 8 %X%X%X%X%X%X%X%X%X%X%X%X\"\n+};"
      },
      {
        "sha": "c3c816e92d88b1fa6fc403fa83c2fa57870bb324",
        "filename": "share/pixmaps/bitcoin80.xpm",
        "status": "added",
        "additions": 292,
        "deletions": 0,
        "changes": 292,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/share/pixmaps/bitcoin80.xpm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/share/pixmaps/bitcoin80.xpm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/pixmaps/bitcoin80.xpm?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -0,0 +1,292 @@\n+/* XPM */\n+static const char * bitcoin80_xpm[] = {\n+/* columns rows colors chars-per-pixel */\n+\"80 80 206 2\",\n+\"   c #725203\",\n+\".  c #785706\",\n+\"X  c #7B5907\",\n+\"o  c #7C5A09\",\n+\"O  c #7F5F10\",\n+\"+  c #815E0B\",\n+\"@  c #85620C\",\n+\"#  c #89650F\",\n+\"$  c #856313\",\n+\"%  c #896614\",\n+\"&  c #8D6913\",\n+\"*  c #886718\",\n+\"=  c #8D6B1B\",\n+\"-  c #926D14\",\n+\";  c #926E1B\",\n+\":  c #967116\",\n+\">  c #997317\",\n+\",  c #95711E\",\n+\"<  c #9B7419\",\n+\"1  c #9F781B\",\n+\"2  c #A27B1D\",\n+\"3  c #8F6F22\",\n+\"4  c #926F21\",\n+\"5  c #947323\",\n+\"6  c #9A7623\",\n+\"7  c #9D7925\",\n+\"8  c #957628\",\n+\"9  c #9A7729\",\n+\"0  c #9D7B2B\",\n+\"q  c #9D7F33\",\n+\"w  c #A47D23\",\n+\"e  c #A97F27\",\n+\"r  c #A37E2B\",\n+\"t  c #9F8030\",\n+\"y  c #A78021\",\n+\"u  c #AC8425\",\n+\"i  c #A5802D\",\n+\"p  c #AC842B\",\n+\"a  c #AF8829\",\n+\"s  c #B2872C\",\n+\"d  c #B28B2D\",\n+\"f  c #A68333\",\n+\"g  c #AA8633\",\n+\"h  c #AD8A36\",\n+\"j  c #A4863A\",\n+\"k  c #A88638\",\n+\"l  c #A7893B\",\n+\"z  c #AC8B3B\",\n+\"x  c #B28732\",\n+\"c  c #B48C32\",\n+\"v  c #B98E34\",\n+\"b  c #B28D3B\",\n+\"n  c #B88F3C\",\n+\"m  c #B69033\",\n+\"M  c #BD9235\",\n+\"N  c #B4913D\",\n+\"B  c #BC943A\",\n+\"V  c #BE993C\",\n+\"C  c #C19336\",\n+\"Z  c #C1953B\",\n+\"A  c #C49A3C\",\n+\"S  c #C99C3D\",\n+\"D  c #CDA13F\",\n+\"F  c #D0A33F\",\n+\"G  c #A88B40\",\n+\"H  c #B08F40\",\n+\"J  c #AE9142\",\n+\"K  c #AE944C\",\n+\"L  c #B49443\",\n+\"P  c #BB9542\",\n+\"I  c #B49946\",\n+\"U  c #BD9846\",\n+\"Y  c #B3964C\",\n+\"T  c #BB974A\",\n+\"R  c #B6994A\",\n+\"E  c #BF9C4A\",\n+\"W  c #B69B53\",\n+\"Q  c #B99D53\",\n+\"!  c #BCA055\",\n+\"~  c #BDA25A\",\n+\"^  c #C49742\",\n+\"/  c #C49C43\",\n+\"(  c #CB9E42\",\n+\")  c #C49D4B\",\n+\"_  c #C99E4C\",\n+\"`  c #C29F52\",\n+\"'  c #C5A244\",\n+\"]  c #CDA245\",\n+\"[  c #C5A34C\",\n+\"{  c #CCA34B\",\n+\"}  c #CCA94D\",\n+\"|  c #D2A445\",\n+\" . c #D1A54B\",\n+\".. c #D5AA4E\",\n+\"X. c #DBAF4F\",\n+\"o. c #C6A352\",\n+\"O. c #CBA554\",\n+\"+. c #C5AA57\",\n+\"@. c #CEAC54\",\n+\"#. c #C4A65A\",\n+\"$. c #CDA458\",\n+\"%. c #C2A85F\",\n+\"&. c #CEAA5B\",\n+\"*. c #D0A550\",\n+\"=. c #D4AB53\",\n+\"-. c #DBAE53\",\n+\";. c #D0A75B\",\n+\":. c #D4AC5A\",\n+\">. c #D9AE5C\",\n+\",. c #CEB25E\",\n+\"<. c #D4B156\",\n+\"1. c #DDB156\",\n+\"2. c #D4B25C\",\n+\"3. c #DCB35D\",\n+\"4. c #D7B85C\",\n+\"5. c #DCBA5E\",\n+\"6. c #E2B355\",\n+\"7. c #E2B65B\",\n+\"8. c #E4BA5D\",\n+\"9. c #EABD5E\",\n+\"0. c #C5AA62\",\n+\"q. c #CCAE63\",\n+\"w. c #C6AE69\",\n+\"e. c #D5AF62\",\n+\"r. c #CEB167\",\n+\"t. c #CCB36C\",\n+\"y. c #D5B162\",\n+\"u. c #DCB462\",\n+\"i. c #D7B964\",\n+\"p. c #DCBC64\",\n+\"a. c #D2B66B\",\n+\"s. c #DCB669\",\n+\"d. c #D7BE69\",\n+\"f. c #DFB86A\",\n+\"g. c #D0B771\",\n+\"h. c #D2BA74\",\n+\"j. c #D5BE78\",\n+\"k. c #E1B766\",\n+\"l. c #E4BB63\",\n+\"z. c #E9BE63\",\n+\"x. c #E3BB6A\",\n+\"c. c #E9BF6A\",\n+\"v. c #E1BE72\",\n+\"b. c #DDC16B\",\n+\"n. c #DAC27E\",\n+\"m. c #E4C164\",\n+\"M. c #ECC264\",\n+\"N. c #E4C36B\",\n+\"B. c #EBC36C\",\n+\"V. c #E7C96F\",\n+\"C. c #EECA6E\",\n+\"Z. c #F1C564\",\n+\"A. c #F1C76A\",\n+\"S. c #F5CB6C\",\n+\"D. c #FACE6D\",\n+\"F. c #F4D06F\",\n+\"G. c #FCD06E\",\n+\"H. c #E5C371\",\n+\"J. c #EDC573\",\n+\"K. c #E4CA73\",\n+\"L. c #ECCC74\",\n+\"P. c #E7CF7A\",\n+\"I. c #EBCD7A\",\n+\"U. c #F3CD73\",\n+\"Y. c #F8CE71\",\n+\"T. c #F3CD7A\",\n+\"R. c #EDD076\",\n+\"E. c #EDD17B\",\n+\"W. c #F4D274\",\n+\"Q. c #FBD274\",\n+\"!. c #FED977\",\n+\"~. c #F3D47B\",\n+\"^. c #FDD47A\",\n+\"/. c #F5DA7C\",\n+\"(. c #FDDA7C\",\n+\"). c #FFE07F\",\n+\"_. c #DBC481\",\n+\"`. c #DFC885\",\n+\"'. c #E1CA86\",\n+\"]. c #EACC80\",\n+\"[. c #E4CD8A\",\n+\"{. c #EED383\",\n+\"}. c #E7D18F\",\n+\"|. c #EAD38C\",\n+\" X c #F4D680\",\n+\".X c #FDD780\",\n+\"XX c #F5DA83\",\n+\"oX c #FCDC84\",\n+\"OX c #F5DB8A\",\n+\"+X c #FADE89\",\n+\"@X c #EAD492\",\n+\"#X c #EED896\",\n+\"$X c #EFDA9A\",\n+\"%X c #F1DD9D\",\n+\"&X c #FDE283\",\n+\"*X c #F6E18D\",\n+\"=X c #FEE48D\",\n+\"-X c #FFE692\",\n+\";X c #FFE894\",\n+\":X c #FBE799\",\n+\">X c #FFEA98\",\n+\",X c #F6E2A3\",\n+\"<X c #FAE6A6\",\n+\"1X c #FAE7A8\",\n+\"2X c #FDEAAB\",\n+\"3X c None\",\n+/* pixels */\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u u u u u y y u y 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u u u u u u u a u u u u u u a u u 2 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u u u u u u s m V D ' { ' D M d u u a u u u u 2 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u u u u M } m.~.oX=X=X=X=X=X-X-X=X&X/.m.=.V u u a u u w 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u u u M 4.~.=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X/.5.Z u u u u u 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u u ] V.&X=X=X&X=X=X=X=X=X=X=X=X=X&X=X=X=X=X=X=X=X=X=X=XW.} a u u u 2 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu a u u ' W.=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X+X=X=X=X&X=X=X=X~.} a u u u < 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u M N.=X&X=X=X=X=X=X=X=X-X=X=X=X=X&X=X=X=XoX=X=X=X=X&X+X=X=X=X=X=X=X=XL.M u u u < 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u u } XX=X=X=X&X=X=X=X=X=X=X=X=X=X=X=X=X=X=X=X*X=X=X=X=X=X=X=X=X=X=X=X=X=X=XoX<.a u u 2 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u s m.&X=X=X=X=X=X=X=X=X=X=X=X=X=X/.L.M.m.9.m.9.m.C.~.&X*X=X=X=X=X=X=X=X=X=X=X=X=XV.m u u 2 o 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3Xu u u c R.=X=X=X=X=X=X=X=X=X=X=XoXC.1.| S S A S D D D D ] ] ..<.N./.=X-X=X-X=X=X=X=X=X=X=XXXZ u a 2 o 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3Xu u u m XX=X=X=X=X=X=X=X=X=X=XW.3.| ^ A C M M M C S S A A A / ( { =.<.l.I.=X-X-X=X=X=X=X=X=X=X=XV a u 2 . 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3Xu u m /.=X=X=X-X=X=X=X=X=X~.1.D ] S Z v x p s u s d d v c c v V { =.7.8.7.l.T.=X-X=X-X-X-X-X-X=X=XV u a 1   3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3Xu u d /.=X=X=X=X=X=X=X=X&X8.^ A ( S M v e $.r.e.r.u w i a.a.a.&.b ^ =.l.l.l.c.z.z.XX-X-X-X-X=X-X-X;X&XV u u :   3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3Xu u s R.=X=X=X=X=X=X=X=XU.{ ^ Z C ( A M u w [.2X2X2X0 - 7 2X2X1X@Xi P *.l.x.B.U.C.z.z.W.-X-X-X-X-X-X=X-X*Xd a u # . 3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3Xu u u l.=X=X=X=X-X=X=X=Xm.Z Z Z Z n Z Z v e , '.2X2X2X5 & ; 2X2X2X}.7 b { 3.x.^.^.^.Y.A.z.R.-X;X;X;X;X-X;X-XP.a u y . 3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3Xu u } -X-X=X-X=X=X=X=Xl.M M Z C C C C C x e ; '.2X2X2X, $ = 2X2X2X}.6 h ) >.J..X.X.X.X(.W.Z.C.&X;X;X;X;X-X-X-X<.u u <   3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3Xu u c oX=X=X=X=X=X=X=Xl.Z C M M C C v v v s w = '.2X2X2X5 $ = 2X2X2X}.5 g ) u./.+X+X=X=X=X&XW.Z.F.=X;X;X;X;X-X-X*XV u y @ X 3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3Xu u u N.-X-X-X-X=X=X=XB.Z M C v v s e e e e w > % `.2X2X2X= + % 2X2X2X}.= r L 4.E.OX+X-X=X=X&X).W.M.R.;X;X;X-X-X-X;XR.u u y   3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3Xu u U -X-X-X-X-X-X=XW.^ C C C x e e r 6 5 4 ; = $ `.2X2X2X= O = 2X2X2X}.O = t Q ,.b.P./.*X=X&X&X).F.M.W.;X;X;X;X&X-X&X} u u O   3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3Xu u u R.-X-X-X-X-X-X=X=.{ ^ Z C x n 2X2X<X<X1X2X<X<X2X2X2X2X1X1X<X2X2X2X<X$X[.b.~ J I ~ b.P.&X&X&X).!.F.m.).;X;X;X;X;X&X).u y y   3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3Xu u U -X-X-X-X-X-X-Xc.=.=. ._ ^ x z 2X2X1X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X<Xn.l I ,.K./.).).).F.Z.Z.&X;X;X=X-X-X&X} u u O   3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3Xu u V.-X;X-X-X-X-XOX>.>.>.=.=._ n b 2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X:XI N +.V./.).).F.F.9.W.;X=X;X-X-X-XR.u u >   3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3Xu u d =X;X-X-X-X-X-Xx.>.>.>.>.>...^ P 2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X,Xl N 4.R.!.!.!.G.Z.M.&X;X=X=X-X-X-XB a u     3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3Xu u @.;X;X-X;X;X;XXX>.:.>.>.>.>.>._ P ` Y Y W _.2X2X2X2X2X2X@XW W ~ 0.t.'.<X2X2X2X2X2X2X2X2X'.0 ' m./.!.!.Q.S.9.F.=X;X-X=X-X&X4.u u @   3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3Xu u P.;X;X;X;X-X:XN.>.>.>.>.>.>.>.=._ P z r 4 8 2X2X2X2X2X2X_.. $ , 6 1 3 t ~ 1X2X2X2X2X2X2X2Xt B 5.G.!.!.G.G.M.9.&X;X=X-X-X=X/.u u >   3X3X3X3X3X3X3X\",\n+\"3X3X3X3Xu u d =X;X;X=X;X;X=X3.>.>.>.e.>.3.3.>.:.*._ P r 9 2X2X2X2X2X1Xn.@ , c B N m h 8 ~ 2X2X2X2X2X2X2XI h <.F.!.G.G.F.M.9.W.;X=X-X-X=X=Xm u y   . 3X3X3X3X3X3X\",\n+\"3X3X3X3Xu u ' -X-X>X-X-X-X X>.>.>.>.>.>.>.u.u.u.u.3.$.P f 2X2X2X2X2X2X_.$ i / -.<.8.} h 8 1X2X2X2X2X2X2X! i <.S.G.G.G.G.Z.9.Z.=X-X=X-X&X-X} u u X   3X3X3X3X3X3X\",\n+\"3X3X3X3Xu u 4.-X-X-X-X-X-XJ.3.>.>.k.k.k.k.k.u.k.u.u.:.U k 2X2X2X2X2X1X_.% f } 8.Z.F.8.U 8 ,X2X2X2X2X2X2XI g } Z.D.G.D.G.D.Z.9.&X-X=X=X=X-Xm.u u @   3X3X3X3X3X3X\",\n+\"3X3X3X3Xu u K.;X-X;X-X>X-Xk.3.k.k.k.k.k.k.k.k.k.k.u.e.U k 2X2X2X2X2X2X_.% f [ 8.F.M.<.b i 2X2X2X2X2X2X2Xt a X.Z.D.D.D.G.G.Z.9./.=X-X=X=X=XR.u u &   3X3X3X3X3X3X\",\n+\"3X3X3X3Xu u E.;X-X;X-X-X=Xl.l.x.c.k.x.k.k.x.x.v.x.x.u.) z 2X2X2X2X2X2X_.$ 7 L <.<.} N 6 h.2X2X2X2X2X2X_.: V 1.S.D.D.G.D.S.M.6.W.-X=X-X=X=X&Xu u >   X 3X3X3X3X3X\",\n+\"3X3X3Xu a u =X;X;X;X;X;XoX7.z.c.c.c.c.c.c.c.c.c.x.k.u.) z 2X2X2X2X2X2Xn.o = i N h i l n.2X2X2X2X2X2X<Xt t D 7.M.Z.z.z.9.9.9.6.M.-X=X=X=X;X=Xm u 1     3X3X3X3X3X\",\n+\"3X3X3Xy u a =X;X;X;X;X;XXXl.z.c.c.c.c.T.J.J.T.v.J.J.s.` z 2X2X2X2X2X2X#XW ~ ~ t.n.$X2X2X2X2X2X2X2X,Xt % t V X.8.9.8.9.9.9.6.6.M.-X=X=X=X=X&XM u 2     3X3X3X3X3X\",\n+\"3X3X3Xu u m -X-X-X;X;X;X~.z.z.c.c.c.c..XJ.J.J.J.J.J.x.O.b 2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2Xw.$ * y V X.7.8.8.9.7.8.7.6.8.=X=X-X-X=X-XV a y     3X3X3X3X3X\",\n+\"3X3X3Xu a m -X-X-X;X;X;X~.7.z.c.c.c.c.c.c.J.T.J.T.J.B.O.b 2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X,X~ , c ' X.6.6.7.6.6.6.6.8.=X=X=X-X&X-XV u y     3X3X3X3X3X\",\n+\"3X3X3Xu u m -X-X-X-X-X-X/.8.l.z.c.T.c.J.c.J.T.v.J.J.x.O.G 2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2Xn.r v { 6.6.6.6.6.6.-.7.&X-X=X=X=X-XD u y     3X3X3X3X3X\",\n+\"3X3X3Xu u d =X-X-X-X-X-X~.7.z.z.c.c.c.c.c.J.c.T.T.^.T.y.R 2X2X2X2X2X2X@XK K W W W ~ h.#X1X2X2X2X2X2X2X2X2Xa.i Z ..X.6.6.-.-.6.7.-X-X-X-X-X-XD u 2     3X3X3X3X3X\",\n+\"3X3X3Xw u a =X-X-X-X-X-X~.7.7.8.c.c.c.c.T..X.X+X+X+XXXi.R 2X2X2X2X2X2Xn.. * 5 8 5 3 = * q `.2X2X2X2X2X2X2X<Xk c | X.6.-.-.-.-.z.&X;X=X;X-X;XV u w     3X3X3X3X3X\",\n+\"3X3X3Xu u u =X-X=X-X-X-X/.8.M.B.Y.T.^.^.^..X.XoXoX+XXXi.R 2X2X2X2X2X2X_.$ 0 b U U N l t 5 $ `.2X2X2X2X2X2X2X0.e Z  .....-.-.6.c.;X=X;X=X;X-Xd u 1     3X3X3X3X3X\",\n+\"3X3X3X3Xu a E.-X-X-X-X-X=Xz.S.D.Y.^.Q.^.^.^..XoX+X+XXXi.R 2X2X2X2X2X2X_.= l +.u.i.,.O.E h 5 G 2X2X2X2X2X2X2X_.0 n |  . .*. .*.T.-X;X;X;X-X=Xa u :     3X3X3X3X3X\",\n+\"3X3X3X3Xu u N.-X-X-X=X-X-XA.Z.S.Y.Q.Q.^.^..X.XoXoX&X.Xi.R 2X2X2X2X2X2X_.= N y.H.H.m.i.y.E f 8 2X2X2X2X2X2X2X'.6 n |  . . . . ..X;X;X;X;X-X~.u u &     3X3X3X3X3X\",\n+\"3X3X3X3Xu u <.-X-X=X=X-X-XW.Z.S.Y.Y.Q.^.^.^.(..XoX=XXXi.R 2X2X2X2X2X2X_.= L 4.H.J.H.x.i.o.k j 2X2X2X2X2X2X2X_.6 B  . . . .{ =.-X;X-X;X-X-Xb.a u @     3X3X3X3X3X\",\n+\"3X3X3X3Xy a V =X=X-X-X=X-XXXZ.S.Y.Y.Y.Q.!.^..X.XoXoXE.y.I 2X2X2X2X2X2X_.= J y.b.H.N.p.&.P 0 g.2X2X2X2X2X2X2Xr.r B _ {  .| ] l.-X;X;X-X-X;X..u u .   . 3X3X3X3X3X\",\n+\"3X3X3X3Xy u a =X=X=X=X-X=X-XM.Z.S.Y.Y.Q.Q.^.^.^.U.J.u.E l 2X2X2X2X2X2X_.* k o.e.e.$.` P q W 1X2X2X2X2X2X2X2XG i B ] | ] ] ( ~.=X;X;X;X;X;XM u y     3X3X3X3X3X3X\",\n+\"3X3X3X3X3Xu u V.-X=X-X=X-X-XF.M.A.D.Y.Q.Y.Q.Y.B.2.[ N 0 j 2X2X2X2X2X2X_.O 5 l G z H H Q _.2X2X2X2X2X2X2X2X#X, g ^ ] ] | ] ..-X-X-X-X&X;X).u u :     3X3X3X3X3X3X\",\n+\"3X3X3X3X3Xu u } =X=X=X=X-X=X&XM.Z.S.D.W.Q.Y.B.*.a.#X@X|.,X2X2X2X2X2X2X,X[.[.}.}.%X<X2X2X2X2X2X2X2X2X2X2X<Xj 6 b / ] ] ] ] M.-X-X-X-X-X-X4.u u O     3X3X3X3X3X3X\",\n+\"3X3X3X3X3Xy u d =X=X=X=X=X=X-XS.M.A.S.S.U.A.u.) n.2X2X2X2X2X2X2X2X2X2X2X2X1X2X2X2X2X2X2X2X2X2X2X2X2X2X2XW ; i M ( S S S ] &X-X-X-X-X=X-Xm u y .   X 3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3Xu u p.=X=X=X=X=X-X&X9.Z.C.S.S.M.:.b [.2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X%XG = r x v C D D D m.-X-X-X-X-X-XR.u u :     3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3Xy u B =X=X=X=X=X=X=XF.9.M.A.C.M.=.h %X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X2X1X#X~ 4 ; r p v v M C A | &X-X-X-X-X-X-X] u u X     3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3Xy u u N.=X=X-X=X-X=X=XM.z.M.M.M.1.V #X%X%X%X%X$X%X%X<X2X2X2X%X$X%X2X2X2X<X[.n.t.W q = , r i x v C C C M C W.-X-X-X-X-X-X/.u u 1     X 3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3Xu u V *X=X=X*X=X=X=XoX8.M.M.M.5.{ m r , ; $ $ o o `.2X2X2X3 o $ 2X2X2X[.o $ 4 9 0 r g x v m C M C C C 8.&X-X-X-X-X-X-X[ u u @     3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X2 u u 5.=X=X=X=X=X=X=XI.8.M.M.z.3.O.) P b r 0 4 % `.2X2X2X3 $ * 2X2X2X[.$ 4 r e ^ n n Z Z Z C C C M | =X=X-X-X-X-X-XR.u u <       3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3Xy u d XX=X=X=X=X-X=X=XS.8.8.M.M.z.z.7.{ _ U g 5 `.2X2X2X8 = 3 2X2X2X}.3 0 x ^ _ ^ ^ ^ Z ^ B ^ C  .&X-X-X-X-X-X-X=XB u u o     3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X1 u u ' =X=X*X=X=X*X=X=XW.8.M.M.A.S.l.u.>.o.L r [.2X2X2X9 = 8 2X2X2X}.4 r ^ _ *.*._ ) ) ^ ^ ^ O.oX=X-X-X-X-X-X-X<.u u :     . 3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3Xy u u i.=X=X=X=X=X-X*X=XW.9.M.A.B.3.5.5.;.U f [.2X2X2Xq 4 8 2X2X2X}.r q _ _ ;.;.*._ _ ` _ e.+X-X-X-X-X-X-X-XR.a u 2       3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3Xu u u K.=X=X=X-X=X=X=X=XXXz.M.8.5.8.u.:.) h }.2X2X2Xj r f 2X2X2X@Xq T _ e.e.u.e.;.$.$.b.-X-X-X=X;X=X;X-X&Xa a u +     3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3Xu u d ~.=X=X=X=X=X-X=X-X+XC.3.5.7.7.2.@.) q.r.q.q.H H L g.r.w.q.T ` e.k.v.k.k.s.s.{.-X-X;X-X;X;X;X;X*XV u u &     . 3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X2 u u c XX-X=X=X=X=X-X=X-X-X Xl.7.7.u.2.$.o.[ [ o.O.$.&.&.` ` ` q.s.k.v.k.k.x.{.%X>X>X>X;X>X;X>X>X*XV u u >       3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X2 u u m ~.=X-X-X-X=X-X-X-X-X-X Xc.7.5.u.3.e.y.u.s.f.k.s.e.e.s.s.k.k.k.v. X:X>X>X>X>X>X>X;X>X>X*XV u u <       3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X2 u u d R.-X=X-X=X-X-X-X-X-X-X-X+XI.v.u.s.l.k.k.x.x.x.s.s.s.s.j.].+X>X>X>X>X>X:X>X>X>X>X>XOXV u u 1       3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X2 u u a p.-X-X-X;X;X;X-X-X-X:X-X-X-X-XOX XL.J.J.J.L.I.].OX:X>X-X>X>X-X>X>X>X>X>X>X>X>XK.a a u <       3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X2 u u u @.=X;X;X>X;X-X-X>X-X-X-X-X;X-X-X-X-X-X>X>X-X>X-X>X>X>X>X;X>X>X>X-X>X-X-X:X<.u u u >       3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X1 u u u m n.>X;X>X>X-X-X-X-X>X-X-X-X;X;X;X-X-X-X-X-X>X-X-X>X-X>X>X-X>X>X>X>XK.B u u u &       3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xw u u u / {.>X>X-X-X-X-X-X-X-X-X-X-X;X-X-X;X:X-X-X>X-X:X>X;X;X>X;X;X{.[ u u u w +       3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X2 u u u u ) K.-X-X-X-X:X-X-X-X-X-X-X-X-X-X-X-X-X>X-X-X-X-X-X-XE.[ u u u u -       . 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X1 u u u u m 2.E.-X+X:X-X-X-X-X-X-X-X-X-X:X-X-X-X;X-XOXi.B u u u u 1 o       3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X> u u u u u v [ l.I.OX-X-X-X-X-X-X-X-X+XI.f.@.m u u u u u 1 +       o 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X& 2 u u u u u u u d B V V V V B d u u u u u u u y - .       o 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X+ - 1 u u u u u u u a u u u u u u u u 2 - o         o 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xo . X # - > 1 2 2 2 1 2 > - # o .         o 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3Xo o                     . o 3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\",\n+\"3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X3X\"\n+};"
      },
      {
        "sha": "31ef725d793838aa26d019d6f1906c67d8702d8c",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -160,10 +160,13 @@ Value stop(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"stop\\n\"\n             \"Stop bitcoin server.\");\n-\n+#ifndef QT_GUI\n     // Shutdown will take long enough that the response should get back\n     CreateThread(Shutdown, NULL);\n     return \"bitcoin server stopping\";\n+#else\n+    throw runtime_error(\"NYI: cannot shut down GUI with RPC command\");\n+#endif\n }\n \n \n@@ -1554,6 +1557,11 @@ Value encryptwallet(const Array& params, bool fHelp)\n     if (pwalletMain->IsCrypted())\n         throw JSONRPCError(-15, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n+#ifdef QT_GUI\n+    // shutting down via RPC while the GUI is running does not work (yet):\n+    throw runtime_error(\"Not Yet Implemented: use GUI to encrypt wallet, not RPC command\");\n+#endif\n+\n     string strWalletPass;\n     strWalletPass.reserve(100);\n     mlock(&strWalletPass[0], strWalletPass.capacity());\n@@ -1573,7 +1581,11 @@ Value encryptwallet(const Array& params, bool fHelp)\n     fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n     munlock(&strWalletPass[0], strWalletPass.capacity());\n \n-    return Value::null;\n+    // BDB seems to have a bad habit of writing old data into\n+    // slack space in .dat files; that is bad if the old data is\n+    // unencrypted private keys.  So:\n+    CreateThread(Shutdown, NULL);\n+    return \"wallet encrypted; bitcoin server stopping, restart to run with encrypted wallet\";\n }\n \n \n@@ -2175,11 +2187,13 @@ void ThreadRPCServer2(void* parg)\n         else if (mapArgs.count(\"-daemon\"))\n             strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-daemon\\\"\");\n         PrintConsole(\n-            _(\"Warning: %s, you must set rpcpassword=<password>\\nin the configuration file: %s\\n\"\n+            _(\"Error: %s, you must set rpcpassword=<password>\\nin the configuration file: %s\\n\"\n               \"If the file does not exist, create it with owner-readable-only file permissions.\\n\"),\n                 strWhatAmI.c_str(),\n                 GetConfigFile().c_str());\n+#ifndef QT_GUI\n         CreateThread(Shutdown, NULL);\n+#endif\n         return;\n     }\n "
      },
      {
        "sha": "efd2a375efd92cf0020d5f7fb6f4a4b7491cef3b",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 11,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -28,6 +28,41 @@ DbEnv dbenv(0);\n static map<string, int> mapFileUseCount;\n static map<string, Db*> mapDb;\n \n+static void EnvShutdown(bool fRemoveLogFiles)\n+{\n+    if (!fDbEnvInit)\n+        return;\n+\n+    fDbEnvInit = false;\n+    try\n+    {\n+        dbenv.close(0);\n+    }\n+    catch (const DbException& e)\n+    {\n+        printf(\"EnvShutdown exception: %s (%d)\\n\", e.what(), e.get_errno());\n+    }\n+    DbEnv(0).remove(GetDataDir().c_str(), 0);\n+\n+    if (fRemoveLogFiles)\n+    {\n+        filesystem::path datadir(GetDataDir());\n+        filesystem::directory_iterator it(datadir / \"database\");\n+        while (it != filesystem::directory_iterator())\n+        {\n+            const filesystem::path& p = it->path();\n+#if BOOST_FILESYSTEM_VERSION >= 3\n+            std::string f = p.filename().generic_string();\n+#else\n+            std::string f = p.filename();\n+#endif\n+            if (f.find(\"log.\") == 0)\n+                filesystem::remove(p);\n+            ++it;\n+        }\n+    }\n+}\n+\n class CDBInit\n {\n public:\n@@ -36,11 +71,7 @@ class CDBInit\n     }\n     ~CDBInit()\n     {\n-        if (fDbEnvInit)\n-        {\n-            dbenv.close(0);\n-            fDbEnvInit = false;\n-        }\n+        EnvShutdown(false);\n     }\n }\n instance_of_cdbinit;\n@@ -165,7 +196,100 @@ void static CloseDb(const string& strFile)\n     }\n }\n \n-void DBFlush(bool fShutdown)\n+bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n+{\n+    while (!fShutdown)\n+    {\n+        CRITICAL_BLOCK(cs_db)\n+        {\n+            if (!mapFileUseCount.count(strFile) || mapFileUseCount[strFile] == 0)\n+            {\n+                // Flush log data to the dat file\n+                CloseDb(strFile);\n+                dbenv.txn_checkpoint(0, 0, 0);\n+                dbenv.lsn_reset(strFile.c_str(), 0);\n+                mapFileUseCount.erase(strFile);\n+\n+                bool fSuccess = true;\n+                printf(\"Rewriting %s...\\n\", strFile.c_str());\n+                string strFileRes = strFile + \".rewrite\";\n+                CDB db(strFile.c_str(), \"r\");\n+                Db* pdbCopy = new Db(&dbenv, 0);\n+\n+                int ret = pdbCopy->open(NULL,                 // Txn pointer\n+                                        strFileRes.c_str(),   // Filename\n+                                        \"main\",    // Logical db name\n+                                        DB_BTREE,  // Database type\n+                                        DB_CREATE,    // Flags\n+                                        0);\n+                if (ret > 0)\n+                {\n+                    printf(\"Cannot create database file %s\\n\", strFileRes.c_str());\n+                    fSuccess = false;\n+                }\n+\n+                Dbc* pcursor = db.GetCursor();\n+                if (pcursor)\n+                    while (fSuccess)\n+                    {\n+                        CDataStream ssKey;\n+                        CDataStream ssValue;\n+                        int ret = db.ReadAtCursor(pcursor, ssKey, ssValue, DB_NEXT);\n+                        if (ret == DB_NOTFOUND)\n+                        {\n+                            pcursor->close();\n+                            break;\n+                        }\n+                        else if (ret != 0)\n+                        {\n+                            pcursor->close();\n+                            fSuccess = false;\n+                            break;\n+                        }\n+                        if (pszSkip &&\n+                            strncmp(&ssKey[0], pszSkip, std::min(ssKey.size(), strlen(pszSkip))) == 0)\n+                            continue;\n+                        if (strncmp(&ssKey[0], \"\\x07version\", 8) == 0)\n+                        {\n+                            // Update version:\n+                            ssValue.clear();\n+                            ssValue << VERSION;\n+                        }\n+                        Dbt datKey(&ssKey[0], ssKey.size());\n+                        Dbt datValue(&ssValue[0], ssValue.size());\n+                        int ret2 = pdbCopy->put(NULL, &datKey, &datValue, DB_NOOVERWRITE);\n+                        if (ret2 > 0)\n+                            fSuccess = false;\n+                    }\n+                if (fSuccess)\n+                {\n+                    db.Close();\n+                    CloseDb(strFile);\n+                    if (pdbCopy->close(0))\n+                        fSuccess = false;\n+                    delete pdbCopy;\n+                }\n+                if (fSuccess)\n+                {\n+                    Db dbA(&dbenv, 0);\n+                    if (dbA.remove(strFile.c_str(), NULL, 0))\n+                        fSuccess = false;\n+                    Db dbB(&dbenv, 0);\n+                    if (dbB.rename(strFileRes.c_str(), NULL, strFile.c_str(), 0))\n+                        fSuccess = false;\n+                }\n+                if (!fSuccess)\n+                    printf(\"Rewriting of %s FAILED!\\n\", strFileRes.c_str());\n+                return fSuccess;\n+            }\n+        }\n+        Sleep(100);\n+    }\n+    return false;\n+}\n+\n+\n+void DBFlush(bool fShutdown, bool fRemoveLogFiles)\n {\n     // Flush log data to the actual data file\n     //  on all files that are not in use\n@@ -196,9 +320,10 @@ void DBFlush(bool fShutdown)\n         {\n             char** listp;\n             if (mapFileUseCount.empty())\n+            {\n                 dbenv.log_archive(&listp, DB_ARCH_REMOVE);\n-            dbenv.close(0);\n-            fDbEnvInit = false;\n+                EnvShutdown(fRemoveLogFiles);\n+            }\n         }\n     }\n }\n@@ -656,6 +781,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n     pwallet->vchDefaultKey.clear();\n     int nFileVersion = 0;\n     vector<uint256> vWalletUpgrade;\n+    bool fIsEncrypted = false;\n \n     // Modify defaults\n #ifndef WIN32\n@@ -781,6 +907,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 ssValue >> vchPrivKey;\n                 if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n                     return DB_CORRUPT;\n+                fIsEncrypted = true;\n             }\n             else if (strType == \"defaultkey\")\n             {\n@@ -841,8 +968,11 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n         printf(\"fUseUPnP = %d\\n\", fUseUPnP);\n \n \n-    // Upgrade\n-    if (nFileVersion < VERSION)\n+    // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+    if (fIsEncrypted && (nFileVersion == 40000 || nFileVersion == 50000))\n+        return DB_NEED_REWRITE;\n+\n+    if (nFileVersion < VERSION) // Update\n     {\n         // Get rid of old debug.log file in current directory\n         if (nFileVersion <= 105 && !pszSetDataDir[0])\n@@ -851,7 +981,6 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n         WriteVersion(VERSION);\n     }\n \n-\n     return DB_LOAD_OK;\n }\n "
      },
      {
        "sha": "98af4be9a0e0950c4697c9787e734628155b19b4",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -29,13 +29,12 @@ extern unsigned int nWalletDBUpdated;\n extern DbEnv dbenv;\n \n \n-extern void DBFlush(bool fShutdown);\n+extern void DBFlush(bool fShutdown, bool fRemoveLogFiles);\n void ThreadFlushWalletDB(void* parg);\n bool BackupWallet(const CWallet& wallet, const std::string& strDest);\n \n \n \n-\n class CDB\n {\n protected:\n@@ -257,6 +256,8 @@ class CDB\n     {\n         return Write(std::string(\"version\"), nVersion);\n     }\n+\n+    bool static Rewrite(const std::string& strFile, const char* pszSkip = NULL);\n };\n \n \n@@ -349,6 +350,7 @@ enum DBErrors\n     DB_CORRUPT,\n     DB_TOO_NEW,\n     DB_LOAD_FAIL,\n+    DB_NEED_REWRITE\n };\n \n class CWalletDB : public CDB"
      },
      {
        "sha": "c91c098e03a22413b321ed5d82b915f76688e385",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -44,8 +44,8 @@ void Shutdown(void* parg)\n {\n     static CCriticalSection cs_Shutdown;\n     static bool fTaken;\n-    bool fFirstThread;\n-    CRITICAL_BLOCK(cs_Shutdown)\n+    bool fFirstThread = false;\n+    TRY_CRITICAL_BLOCK(cs_Shutdown)\n     {\n         fFirstThread = !fTaken;\n         fTaken = true;\n@@ -55,9 +55,9 @@ void Shutdown(void* parg)\n     {\n         fShutdown = true;\n         nTransactionsUpdated++;\n-        DBFlush(false);\n+        DBFlush(false, false);\n         StopNode();\n-        DBFlush(true);\n+        DBFlush(true, true);\n         boost::filesystem::remove(GetPidFile());\n         UnregisterWallet(pwalletMain);\n         delete pwalletMain;\n@@ -362,6 +362,12 @@ bool AppInit2(int argc, char* argv[])\n             strErrors += _(\"Error loading wallet.dat: Wallet corrupted      \\n\");\n         else if (nLoadWalletRet == DB_TOO_NEW)\n             strErrors += _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin      \\n\");\n+        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+        {\n+            strErrors += _(\"Wallet needed to be rewritten: restart Bitcoin to complete    \\n\");\n+            wxMessageBox(strErrors, \"Bitcoin\", wxOK | wxICON_ERROR);\n+            return false;\n+        }\n         else\n             strErrors += _(\"Error loading wallet.dat      \\n\");\n     }"
      },
      {
        "sha": "a3aa6de841e8dc09eb276af84eeb5e91ac79eae5",
        "filename": "src/qt/aboutdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/aboutdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/aboutdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/aboutdialog.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -12,7 +12,10 @@ AboutDialog::AboutDialog(QWidget *parent) :\n \n void AboutDialog::setModel(ClientModel *model)\n {\n-    ui->versionLabel->setText(model->formatFullVersion());\n+    if(model)\n+    {\n+        ui->versionLabel->setText(model->formatFullVersion());\n+    }\n }\n \n AboutDialog::~AboutDialog()"
      },
      {
        "sha": "06a926e59a8fbbb23556eeb6e60131083299e009",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -65,6 +65,8 @@ AddressBookPage::~AddressBookPage()\n void AddressBookPage::setModel(AddressTableModel *model)\n {\n     this->model = model;\n+    if(!model)\n+        return;\n     // Refresh list from core\n     model->updateList();\n \n@@ -104,16 +106,13 @@ void AddressBookPage::setModel(AddressTableModel *model)\n     selectionChanged();\n }\n \n-QTableView *AddressBookPage::getCurrentTable()\n-{\n-    return ui->tableView;\n-}\n-\n void AddressBookPage::on_copyToClipboard_clicked()\n {\n     // Copy currently selected address to clipboard\n     //   (or nothing, if nothing selected)\n-    QTableView *table = getCurrentTable();\n+    QTableView *table = ui->tableView;\n+    if(!table->selectionModel())\n+        return;\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n     foreach (QModelIndex index, indexes)\n@@ -125,6 +124,8 @@ void AddressBookPage::on_copyToClipboard_clicked()\n \n void AddressBookPage::on_newAddressButton_clicked()\n {\n+    if(!model)\n+        return;\n     EditAddressDialog dlg(\n             tab == SendingTab ?\n             EditAddressDialog::NewSendingAddress :\n@@ -147,7 +148,9 @@ void AddressBookPage::on_newAddressButton_clicked()\n \n void AddressBookPage::on_deleteButton_clicked()\n {\n-    QTableView *table = getCurrentTable();\n+    QTableView *table = ui->tableView;\n+    if(!table->selectionModel())\n+        return;\n     QModelIndexList indexes = table->selectionModel()->selectedRows();\n     if(!indexes.isEmpty())\n     {\n@@ -158,7 +161,9 @@ void AddressBookPage::on_deleteButton_clicked()\n void AddressBookPage::selectionChanged()\n {\n     // Set button states based on selected tab and selection\n-    QTableView *table = getCurrentTable();\n+    QTableView *table = ui->tableView;\n+    if(!table->selectionModel())\n+        return;\n \n     if(table->selectionModel()->hasSelection())\n     {\n@@ -184,12 +189,14 @@ void AddressBookPage::selectionChanged()\n \n void AddressBookPage::done(int retval)\n {\n+    QTableView *table = ui->tableView;\n+    if(!table->selectionModel() || !table->model())\n+        return;\n     // When this is a tab/widget and not a model dialog, ignore \"done\"\n     if(mode == ForEditing)\n         return;\n \n     // Figure out which address was selected, and return it\n-    QTableView *table = getCurrentTable();\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n     foreach (QModelIndex index, indexes)"
      },
      {
        "sha": "25950939d4da9f70778a34ec066da81797392b08",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -47,8 +47,6 @@ public slots:\n     QString returnValue;\n     QSortFilterProxyModel *proxyModel;\n \n-    QTableView *getCurrentTable();\n-\n private slots:\n     void on_deleteButton_clicked();\n     void on_newAddressButton_clicked();"
      },
      {
        "sha": "a574ef925b07975e30e8855c4035e9e76d5a6207",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -72,6 +72,8 @@ void AskPassphraseDialog::setModel(WalletModel *model)\n void AskPassphraseDialog::accept()\n {\n     std::string oldpass, newpass1, newpass2;\n+    if(!model)\n+        return;\n     // TODO: mlock memory / munlock on return so they will not be swapped out, really need \"mlockedstring\" wrapper class to do this safely\n     oldpass.reserve(MAX_PASSPHRASE_SIZE);\n     newpass1.reserve(MAX_PASSPHRASE_SIZE);\n@@ -99,7 +101,8 @@ void AskPassphraseDialog::accept()\n                 if(model->setWalletEncrypted(true, newpass1))\n                 {\n                     QMessageBox::warning(this, tr(\"Wallet encrypted\"),\n-                                         tr(\"Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.\"));\n+                                         tr(\"Bitcoin will close now to finish the encryption process. Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.\"));\n+                    QApplication::quit();\n                 }\n                 else\n                 {"
      },
      {
        "sha": "8641c723b0ae818470e3e532070daca215dcdd83",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 42,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -267,58 +267,62 @@ void BitcoinGUI::createToolBars()\n void BitcoinGUI::setClientModel(ClientModel *clientModel)\n {\n     this->clientModel = clientModel;\n-\n-    if(clientModel->isTestNet())\n+    if(clientModel)\n     {\n-        QString title_testnet = windowTitle() + QString(\" \") + tr(\"[testnet]\");\n-        setWindowTitle(title_testnet);\n+        if(clientModel->isTestNet())\n+        {\n+            QString title_testnet = windowTitle() + QString(\" \") + tr(\"[testnet]\");\n+            setWindowTitle(title_testnet);\n #ifndef Q_WS_MAC\n-        setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n+            setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n #else\n-        MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin_testnet\"));\n+            MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin_testnet\"));\n #endif\n-        if(trayIcon)\n-        {\n-            trayIcon->setToolTip(title_testnet);\n-            trayIcon->setIcon(QIcon(\":/icons/toolbar_testnet\"));\n+            if(trayIcon)\n+            {\n+                trayIcon->setToolTip(title_testnet);\n+                trayIcon->setIcon(QIcon(\":/icons/toolbar_testnet\"));\n+            }\n         }\n-    }\n \n-    // Keep up to date with client\n-    setNumConnections(clientModel->getNumConnections());\n-    connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n+        // Keep up to date with client\n+        setNumConnections(clientModel->getNumConnections());\n+        connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-    setNumBlocks(clientModel->getNumBlocks());\n-    connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        setNumBlocks(clientModel->getNumBlocks());\n+        connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n \n-    // Report errors from network/worker thread\n-    connect(clientModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n+        // Report errors from network/worker thread\n+        connect(clientModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n+    }\n }\n \n void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n {\n     this->walletModel = walletModel;\n+    if(walletModel)\n+    {\n+        // Report errors from wallet thread\n+        connect(walletModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n \n-    // Report errors from wallet thread\n-    connect(walletModel, SIGNAL(error(QString,QString)), this, SLOT(error(QString,QString)));\n-\n-    // Put transaction list in tabs\n-    transactionView->setModel(walletModel);\n+        // Put transaction list in tabs\n+        transactionView->setModel(walletModel);\n \n-    overviewPage->setModel(walletModel);\n-    addressBookPage->setModel(walletModel->getAddressTableModel());\n-    receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n-    sendCoinsPage->setModel(walletModel);\n+        overviewPage->setModel(walletModel);\n+        addressBookPage->setModel(walletModel->getAddressTableModel());\n+        receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n+        sendCoinsPage->setModel(walletModel);\n \n-    setEncryptionStatus(walletModel->getEncryptionStatus());\n-    connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n+        setEncryptionStatus(walletModel->getEncryptionStatus());\n+        connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n \n-    // Balloon popup for new transaction\n-    connect(walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n-            this, SLOT(incomingTransaction(QModelIndex,int,int)));\n+        // Balloon popup for new transaction\n+        connect(walletModel->getTransactionTableModel(), SIGNAL(rowsInserted(QModelIndex,int,int)),\n+                this, SLOT(incomingTransaction(QModelIndex,int,int)));\n \n-    // Ask for passphrase if needed\n-    connect(walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n+        // Ask for passphrase if needed\n+        connect(walletModel, SIGNAL(requireUnlock()), this, SLOT(unlockWallet()));\n+    }\n }\n \n void BitcoinGUI::createTrayIcon()\n@@ -369,6 +373,8 @@ void BitcoinGUI::trayIconActivated(QSystemTrayIcon::ActivationReason reason)\n \n void BitcoinGUI::optionsClicked()\n {\n+    if(!clientModel || !clientModel->getOptionsModel())\n+        return;\n     OptionsDialog dlg;\n     dlg.setModel(clientModel->getOptionsModel());\n     dlg.exec();\n@@ -398,6 +404,8 @@ void BitcoinGUI::setNumConnections(int count)\n \n void BitcoinGUI::setNumBlocks(int count)\n {\n+    if(!clientModel)\n+        return;\n     int initTotal = clientModel->getNumBlocksAtStartup();\n     int total = clientModel->getNumBlocksOfPeers();\n     QString tooltip;\n@@ -470,11 +478,11 @@ void BitcoinGUI::error(const QString &title, const QString &message)\n void BitcoinGUI::changeEvent(QEvent *e)\n {\n #ifndef Q_WS_MAC // Ignored on Mac\n-    if (e->type() == QEvent::WindowStateChange)\n+    if(e->type() == QEvent::WindowStateChange)\n     {\n-        if (clientModel->getOptionsModel()->getMinimizeToTray())\n+        if(clientModel && clientModel->getOptionsModel()->getMinimizeToTray())\n         {\n-            if (isMinimized())\n+            if(isMinimized())\n             {\n                 hide();\n                 e->ignore();\n@@ -492,13 +500,16 @@ void BitcoinGUI::changeEvent(QEvent *e)\n \n void BitcoinGUI::closeEvent(QCloseEvent *event)\n {\n-#ifndef Q_WS_MAC // Ignored on Mac\n-    if(!clientModel->getOptionsModel()->getMinimizeToTray() &&\n-       !clientModel->getOptionsModel()->getMinimizeOnClose())\n+    if(clientModel)\n     {\n-        qApp->quit();\n-    }\n+#ifndef Q_WS_MAC // Ignored on Mac\n+        if(!clientModel->getOptionsModel()->getMinimizeToTray() &&\n+           !clientModel->getOptionsModel()->getMinimizeOnClose())\n+        {\n+            qApp->quit();\n+        }\n #endif\n+    }\n     QMainWindow::closeEvent(event);\n }\n \n@@ -517,6 +528,8 @@ void BitcoinGUI::askFee(qint64 nFeeRequired, bool *payFee)\n \n void BitcoinGUI::incomingTransaction(const QModelIndex & parent, int start, int end)\n {\n+    if(!walletModel || !clientModel)\n+        return;\n     TransactionTableModel *ttm = walletModel->getTransactionTableModel();\n     qint64 amount = ttm->index(start, TransactionTableModel::Amount, parent)\n                     .data(Qt::EditRole).toULongLong();\n@@ -654,6 +667,8 @@ void BitcoinGUI::setEncryptionStatus(int status)\n \n void BitcoinGUI::encryptWallet(bool status)\n {\n+    if(!walletModel)\n+        return;\n     AskPassphraseDialog dlg(status ? AskPassphraseDialog::Encrypt:\n                                      AskPassphraseDialog::Decrypt, this);\n     dlg.setModel(walletModel);\n@@ -671,6 +686,8 @@ void BitcoinGUI::changePassphrase()\n \n void BitcoinGUI::unlockWallet()\n {\n+    if(!walletModel)\n+        return;\n     // Unlock wallet when requested by wallet model\n     if(walletModel->getEncryptionStatus() == WalletModel::Locked)\n     {"
      },
      {
        "sha": "4b21b8c4bee6447c3d5278d3a046f0777041e877",
        "filename": "src/qt/csvmodelwriter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/csvmodelwriter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/csvmodelwriter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/csvmodelwriter.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -48,7 +48,11 @@ bool CSVModelWriter::write()\n         return false;\n     QTextStream out(&file);\n \n-    int numRows = model->rowCount();\n+    int numRows = 0;\n+    if(model)\n+    {\n+        numRows = model->rowCount();\n+    }\n \n     // Header row\n     for(int i=0; i<columns.size(); ++i)"
      },
      {
        "sha": "8cc3c85d7aeea3a0dabb721f16a72e18c495d7c6",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -56,6 +56,8 @@ void EditAddressDialog::loadRow(int row)\n \n bool EditAddressDialog::saveCurrentRow()\n {\n+    if(!model)\n+        return false;\n     switch(mode)\n     {\n     case NewReceivingAddress:\n@@ -78,6 +80,8 @@ bool EditAddressDialog::saveCurrentRow()\n \n void EditAddressDialog::accept()\n {\n+    if(!model)\n+        return;\n     if(!saveCurrentRow())\n     {\n         switch(model->getEditStatus())"
      },
      {
        "sha": "fe0987178cee1ea635c73a71f072bbcc60f884a0",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -143,30 +143,34 @@ void OverviewPage::setNumTransactions(int count)\n void OverviewPage::setModel(WalletModel *model)\n {\n     this->model = model;\n+    if(model)\n+    {\n+        // Set up transaction list\n+        TransactionFilterProxy *filter = new TransactionFilterProxy();\n+        filter->setSourceModel(model->getTransactionTableModel());\n+        filter->setLimit(NUM_ITEMS);\n+        filter->setDynamicSortFilter(true);\n+        filter->setSortRole(Qt::EditRole);\n+        filter->sort(TransactionTableModel::Status, Qt::DescendingOrder);\n \n-    // Set up transaction list\n-    TransactionFilterProxy *filter = new TransactionFilterProxy();\n-    filter->setSourceModel(model->getTransactionTableModel());\n-    filter->setLimit(NUM_ITEMS);\n-    filter->setDynamicSortFilter(true);\n-    filter->setSortRole(Qt::EditRole);\n-    filter->sort(TransactionTableModel::Status, Qt::DescendingOrder);\n-\n-    ui->listTransactions->setModel(filter);\n-    ui->listTransactions->setModelColumn(TransactionTableModel::ToAddress);\n+        ui->listTransactions->setModel(filter);\n+        ui->listTransactions->setModelColumn(TransactionTableModel::ToAddress);\n \n-    // Keep up to date with wallet\n-    setBalance(model->getBalance(), model->getUnconfirmedBalance());\n-    connect(model, SIGNAL(balanceChanged(qint64, qint64)), this, SLOT(setBalance(qint64, qint64)));\n+        // Keep up to date with wallet\n+        setBalance(model->getBalance(), model->getUnconfirmedBalance());\n+        connect(model, SIGNAL(balanceChanged(qint64, qint64)), this, SLOT(setBalance(qint64, qint64)));\n \n-    setNumTransactions(model->getNumTransactions());\n-    connect(model, SIGNAL(numTransactionsChanged(int)), this, SLOT(setNumTransactions(int)));\n+        setNumTransactions(model->getNumTransactions());\n+        connect(model, SIGNAL(numTransactionsChanged(int)), this, SLOT(setNumTransactions(int)));\n \n-    connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(displayUnitChanged()));\n+        connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(displayUnitChanged()));\n+    }\n }\n \n void OverviewPage::displayUnitChanged()\n {\n+    if(!model || !model->getOptionsModel())\n+        return;\n     if(currentBalance != -1)\n         setBalance(currentBalance, currentUnconfirmedBalance);\n "
      },
      {
        "sha": "dbfc28ab3d8c6d2eb0f93b0e4495eec606dbd1b4",
        "filename": "src/qt/res/icons/address-book.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/address-book.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/address-book.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/address-book.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "1df9c2398d3b579d329792fef85b3cfc5a3b8340",
        "filename": "src/qt/res/icons/export.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/export.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/export.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/export.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "10ac0e159228d08a8b4425dec4559f19583db936",
        "filename": "src/qt/res/icons/history.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/history.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/history.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/history.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "ece0164f7756f00e258b2a485383d6cfe2016909",
        "filename": "src/qt/res/icons/key.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/key.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/key.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/key.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "c566510c408b5ece254fdc528a2326a50f038ba3",
        "filename": "src/qt/res/icons/lock_closed.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/lock_closed.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/lock_closed.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/lock_closed.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "c98ca8663bf94b299530410074a7607c59d9c41c",
        "filename": "src/qt/res/icons/lock_open.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/lock_open.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/lock_open.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/lock_open.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "3b90fe5569b74b2364c44eeff742e802690d18b5",
        "filename": "src/qt/res/icons/overview.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/overview.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/overview.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/overview.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "53ad1d1565e74c0f4895b7fbf525dbd58bb663d2",
        "filename": "src/qt/res/icons/receive.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/receive.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/receive.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/receive.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "ceb91ea66d4f5d2fc4235feff0dfd11c9989bb57",
        "filename": "src/qt/res/icons/send.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/send.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/send.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/send.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "4d7e0e88210c542421e80e98b683826e7e8512c0",
        "filename": "src/qt/res/icons/synced.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/synced.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/res/icons/synced.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/synced.png?ref=5c3b3bd1a0868d549146c7344494a0155fad3777"
      },
      {
        "sha": "762f27dfa66fa1e487269496f8a4f72caabc0b24",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -43,9 +43,11 @@ void SendCoinsDialog::setModel(WalletModel *model)\n             entry->setModel(model);\n         }\n     }\n-\n-    setBalance(model->getBalance(), model->getUnconfirmedBalance());\n-    connect(model, SIGNAL(balanceChanged(qint64, qint64)), this, SLOT(setBalance(qint64, qint64)));\n+    if(model)\n+    {\n+        setBalance(model->getBalance(), model->getUnconfirmedBalance());\n+        connect(model, SIGNAL(balanceChanged(qint64, qint64)), this, SLOT(setBalance(qint64, qint64)));\n+    }\n }\n \n SendCoinsDialog::~SendCoinsDialog()\n@@ -57,6 +59,10 @@ void SendCoinsDialog::on_sendButton_clicked()\n {\n     QList<SendCoinsRecipient> recipients;\n     bool valid = true;\n+\n+    if(!model)\n+        return;\n+\n     for(int i = 0; i < ui->entries->count(); ++i)\n     {\n         SendCoinsEntry *entry = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n@@ -255,6 +261,9 @@ void SendCoinsDialog::handleURL(const QUrl *url)\n void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance)\n {\n     Q_UNUSED(unconfirmedBalance);\n+    if(!model || !model->getOptionsModel())\n+        return;\n+\n     int unit = model->getOptionsModel()->getDisplayUnit();\n     ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balance));\n }"
      },
      {
        "sha": "23b11ccddeb569f37ce4e657b2472a09a74c093c",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -44,6 +44,8 @@ void SendCoinsEntry::on_pasteButton_clicked()\n \n void SendCoinsEntry::on_addressBookButton_clicked()\n {\n+    if(!model)\n+        return;\n     AddressBookPage dlg(AddressBookPage::ForSending, AddressBookPage::SendingTab, this);\n     dlg.setModel(model->getAddressTableModel());\n     if(dlg.exec())\n@@ -55,6 +57,8 @@ void SendCoinsEntry::on_addressBookButton_clicked()\n \n void SendCoinsEntry::on_payTo_textChanged(const QString &address)\n {\n+    if(!model)\n+        return;\n     ui->addAsLabel->setText(model->getAddressTableModel()->labelForAddress(address));\n }\n \n@@ -74,7 +78,7 @@ void SendCoinsEntry::clear()\n     ui->addAsLabel->clear();\n     ui->payAmount->clear();\n     ui->payTo->setFocus();\n-    if(model)\n+    if(model && model->getOptionsModel())\n     {\n         ui->payAmount->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n     }"
      },
      {
        "sha": "2dcbf1ea8ac82e7d258de44f7c41a6a28d2644aa",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 26,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -155,36 +155,39 @@ TransactionView::TransactionView(QWidget *parent) :\n void TransactionView::setModel(WalletModel *model)\n {\n     this->model = model;\n-\n-    transactionProxyModel = new TransactionFilterProxy(this);\n-    transactionProxyModel->setSourceModel(model->getTransactionTableModel());\n-    transactionProxyModel->setDynamicSortFilter(true);\n-\n-    transactionProxyModel->setSortRole(Qt::EditRole);\n-\n-    transactionView->setModel(transactionProxyModel);\n-    transactionView->setAlternatingRowColors(true);\n-    transactionView->setSelectionBehavior(QAbstractItemView::SelectRows);\n-    transactionView->setSelectionMode(QAbstractItemView::ExtendedSelection);\n-    transactionView->setSortingEnabled(true);\n-    transactionView->sortByColumn(TransactionTableModel::Status, Qt::DescendingOrder);\n-    transactionView->verticalHeader()->hide();\n-\n-    transactionView->horizontalHeader()->resizeSection(\n-            TransactionTableModel::Status, 23);\n-    transactionView->horizontalHeader()->resizeSection(\n-            TransactionTableModel::Date, 120);\n-    transactionView->horizontalHeader()->resizeSection(\n-            TransactionTableModel::Type, 120);\n-    transactionView->horizontalHeader()->setResizeMode(\n-            TransactionTableModel::ToAddress, QHeaderView::Stretch);\n-    transactionView->horizontalHeader()->resizeSection(\n-            TransactionTableModel::Amount, 100);\n-\n+    if(model)\n+    {\n+        transactionProxyModel = new TransactionFilterProxy(this);\n+        transactionProxyModel->setSourceModel(model->getTransactionTableModel());\n+        transactionProxyModel->setDynamicSortFilter(true);\n+\n+        transactionProxyModel->setSortRole(Qt::EditRole);\n+\n+        transactionView->setModel(transactionProxyModel);\n+        transactionView->setAlternatingRowColors(true);\n+        transactionView->setSelectionBehavior(QAbstractItemView::SelectRows);\n+        transactionView->setSelectionMode(QAbstractItemView::ExtendedSelection);\n+        transactionView->setSortingEnabled(true);\n+        transactionView->sortByColumn(TransactionTableModel::Status, Qt::DescendingOrder);\n+        transactionView->verticalHeader()->hide();\n+\n+        transactionView->horizontalHeader()->resizeSection(\n+                TransactionTableModel::Status, 23);\n+        transactionView->horizontalHeader()->resizeSection(\n+                TransactionTableModel::Date, 120);\n+        transactionView->horizontalHeader()->resizeSection(\n+                TransactionTableModel::Type, 120);\n+        transactionView->horizontalHeader()->setResizeMode(\n+                TransactionTableModel::ToAddress, QHeaderView::Stretch);\n+        transactionView->horizontalHeader()->resizeSection(\n+                TransactionTableModel::Amount, 100);\n+    }\n }\n \n void TransactionView::chooseDate(int idx)\n {\n+    if(!transactionProxyModel)\n+        return;\n     QDate current = QDate::currentDate();\n     dateRangeWidget->setVisible(false);\n     switch(dateWidget->itemData(idx).toInt())\n@@ -231,17 +234,23 @@ void TransactionView::chooseDate(int idx)\n \n void TransactionView::chooseType(int idx)\n {\n+    if(!transactionProxyModel)\n+        return;\n     transactionProxyModel->setTypeFilter(\n         typeWidget->itemData(idx).toInt());\n }\n \n void TransactionView::changedPrefix(const QString &prefix)\n {\n+    if(!transactionProxyModel)\n+        return;\n     transactionProxyModel->setAddressPrefix(prefix);\n }\n \n void TransactionView::changedAmount(const QString &amount)\n {\n+    if(!transactionProxyModel)\n+        return;\n     qint64 amount_parsed = 0;\n     if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amount, &amount_parsed))\n     {\n@@ -294,6 +303,8 @@ void TransactionView::contextualMenu(const QPoint &point)\n \n void TransactionView::copyAddress()\n {\n+    if(!transactionView->selectionModel())\n+        return;\n     QModelIndexList selection = transactionView->selectionModel()->selectedRows();\n     if(!selection.isEmpty())\n     {\n@@ -303,6 +314,8 @@ void TransactionView::copyAddress()\n \n void TransactionView::copyLabel()\n {\n+    if(!transactionView->selectionModel())\n+        return;\n     QModelIndexList selection = transactionView->selectionModel()->selectedRows();\n     if(!selection.isEmpty())\n     {\n@@ -312,10 +325,14 @@ void TransactionView::copyLabel()\n \n void TransactionView::editLabel()\n {\n+    if(!transactionView->selectionModel() ||!model)\n+        return;\n     QModelIndexList selection = transactionView->selectionModel()->selectedRows();\n     if(!selection.isEmpty())\n     {\n         AddressTableModel *addressBook = model->getAddressTableModel();\n+        if(!addressBook)\n+            return;\n         QString address = selection.at(0).data(TransactionTableModel::AddressRole).toString();\n         if(address.isEmpty())\n         {\n@@ -354,6 +371,8 @@ void TransactionView::editLabel()\n \n void TransactionView::showDetails()\n {\n+    if(!transactionView->selectionModel())\n+        return;\n     QModelIndexList selection = transactionView->selectionModel()->selectedRows();\n     if(!selection.isEmpty())\n     {\n@@ -400,6 +419,8 @@ QWidget *TransactionView::createDateRangeWidget()\n \n void TransactionView::dateRangeChanged()\n {\n+    if(!transactionProxyModel)\n+        return;\n     transactionProxyModel->setDateRange(\n             QDateTime(dateFrom->date()),\n             QDateTime(dateTo->date()).addDays(1));"
      },
      {
        "sha": "53867e939ad768474792798a1ebc6e025b264a3c",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -60,7 +60,7 @@ class CDataStream;\n class CAutoFile;\n static const unsigned int MAX_SIZE = 0x02000000;\n \n-static const int VERSION = 50000;\n+static const int VERSION = 50001;\n static const char* pszSubVer = \"\";\n static const bool VERSION_IS_BETA = true;\n "
      },
      {
        "sha": "e3ca7d297d908c0d37205fcef3fbed0392ab41b5",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c3b3bd1a0868d549146c7344494a0155fad3777/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c3b3bd1a0868d549146c7344494a0155fad3777/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=5c3b3bd1a0868d549146c7344494a0155fad3777",
        "patch": "@@ -187,6 +187,11 @@ bool CWallet::EncryptWallet(const string& strWalletPassphrase)\n         }\n \n         Lock();\n+\n+        // Need to completely rewrite the wallet file; if we don't, bdb might keep\n+        // bits of the unencrypted private key in slack space in the database file.\n+        setKeyPool.clear();\n+        CDB::Rewrite(strWalletFile, \"\\x04pool\");\n     }\n \n     return true;\n@@ -1142,6 +1147,18 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n         return false;\n     fFirstRunRet = false;\n     int nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n+    if (nLoadWalletRet == DB_NEED_REWRITE)\n+    {\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        {\n+            setKeyPool.clear();\n+            // Note: can't top-up keypool here, because wallet is locked.\n+            // User will be prompted to unlock wallet the next operation\n+            // the requires a new key.\n+        }\n+        nLoadWalletRet = DB_NEED_REWRITE;\n+    }\n+\n     if (nLoadWalletRet != DB_LOAD_OK)\n         return nLoadWalletRet;\n     fFirstRunRet = vchDefaultKey.empty();"
      }
    ]
  },
  {
    "sha": "6e15fce386b97d93590673053d5b718729810c19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTE1ZmNlMzg2Yjk3ZDkzNTkwNjczMDUzZDViNzE4NzI5ODEwYzE5",
    "commit": {
      "author": {
        "name": "sje397",
        "email": "sje397@gmail.com",
        "date": "2011-11-16T13:17:08Z"
      },
      "committer": {
        "name": "sje397",
        "email": "sje397@gmail.com",
        "date": "2011-11-16T13:17:08Z"
      },
      "message": "Merge with addressbook changes",
      "tree": {
        "sha": "696311a36a9fe21f0cedb8f5912dde1edec6bb5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/696311a36a9fe21f0cedb8f5912dde1edec6bb5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e15fce386b97d93590673053d5b718729810c19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e15fce386b97d93590673053d5b718729810c19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e15fce386b97d93590673053d5b718729810c19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e15fce386b97d93590673053d5b718729810c19/comments",
    "author": {
      "login": "sje397",
      "id": 214252,
      "node_id": "MDQ6VXNlcjIxNDI1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/214252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sje397",
      "html_url": "https://github.com/sje397",
      "followers_url": "https://api.github.com/users/sje397/followers",
      "following_url": "https://api.github.com/users/sje397/following{/other_user}",
      "gists_url": "https://api.github.com/users/sje397/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sje397/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sje397/subscriptions",
      "organizations_url": "https://api.github.com/users/sje397/orgs",
      "repos_url": "https://api.github.com/users/sje397/repos",
      "events_url": "https://api.github.com/users/sje397/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sje397/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sje397",
      "id": 214252,
      "node_id": "MDQ6VXNlcjIxNDI1Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/214252?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sje397",
      "html_url": "https://github.com/sje397",
      "followers_url": "https://api.github.com/users/sje397/followers",
      "following_url": "https://api.github.com/users/sje397/following{/other_user}",
      "gists_url": "https://api.github.com/users/sje397/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sje397/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sje397/subscriptions",
      "organizations_url": "https://api.github.com/users/sje397/orgs",
      "repos_url": "https://api.github.com/users/sje397/repos",
      "events_url": "https://api.github.com/users/sje397/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sje397/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c3b3bd1a0868d549146c7344494a0155fad3777",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c3b3bd1a0868d549146c7344494a0155fad3777",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c3b3bd1a0868d549146c7344494a0155fad3777"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d207fe30faa34b323b05846199bf9d9f26462533",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e15fce386b97d93590673053d5b718729810c19/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e15fce386b97d93590673053d5b718729810c19/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=6e15fce386b97d93590673053d5b718729810c19",
        "patch": "@@ -241,7 +241,7 @@ void AddressBookPage::exportClicked()\n void AddressBookPage::on_showQRCode_clicked()\n {\n #ifdef USE_QRCODE\n-    QTableView *table = getCurrentTable();\n+    QTableView *table = ui->tableView;\n     QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n \n "
      }
    ]
  },
  {
    "sha": "97641d8f5fce00c392811b08148867f3dd917856",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzY0MWQ4ZjVmY2UwMGMzOTI4MTFiMDgxNDg4NjdmM2RkOTE3ODU2",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-29T13:46:52Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T22:05:04Z"
      },
      "message": "Collapse no-op ExtractAddress/ExtractAddressInner",
      "tree": {
        "sha": "c6f6dc513f76570bab7f01d341b30993c56d4ce7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6f6dc513f76570bab7f01d341b30993c56d4ce7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97641d8f5fce00c392811b08148867f3dd917856",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97641d8f5fce00c392811b08148867f3dd917856",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97641d8f5fce00c392811b08148867f3dd917856",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97641d8f5fce00c392811b08148867f3dd917856/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "173efb1865e271dede53bcdff7ee2e189df07aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/173efb1865e271dede53bcdff7ee2e189df07aa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/173efb1865e271dede53bcdff7ee2e189df07aa4"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 1,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4b2dc9a1a6e3c8f17a2e5e3bb19b74e34291bbf5",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97641d8f5fce00c392811b08148867f3dd917856/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97641d8f5fce00c392811b08148867f3dd917856/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=97641d8f5fce00c392811b08148867f3dd917856",
        "patch": "@@ -1117,7 +1117,7 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     return true;\n }\n \n-bool static ExtractAddressInner(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n+bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n {\n     vector<pair<opcodetype, valtype> > vSolution;\n     if (!Solver(scriptPubKey, vSolution))\n@@ -1137,15 +1137,6 @@ bool static ExtractAddressInner(const CScript& scriptPubKey, const CKeyStore* ke\n }\n \n \n-bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n-{\n-    if (keystore)\n-        return ExtractAddressInner(scriptPubKey, keystore, addressRet);\n-    else\n-        return ExtractAddressInner(scriptPubKey, NULL, addressRet);\n-    return false;\n-}\n-\n \n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {"
      }
    ]
  },
  {
    "sha": "a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2YzOTdhMmE3YjI2NDVkMWFiNzAxZDc5NmY5ZjEyNjhmY2Y4OWFj",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-10-11T23:50:06Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T22:06:00Z"
      },
      "message": "Rework unit tests so test_bitcoin.cpp does not #include them all",
      "tree": {
        "sha": "787a3db3ea571599bcc4aa57e7bd6cab2293bce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/787a3db3ea571599bcc4aa57e7bd6cab2293bce0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97641d8f5fce00c392811b08148867f3dd917856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97641d8f5fce00c392811b08148867f3dd917856",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97641d8f5fce00c392811b08148867f3dd917856"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 34,
      "deletions": 33
    },
    "files": [
      {
        "sha": "2b8c9ab6ddb47036b0a9a325bf33022e968fda1e",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -10,6 +10,7 @@ CXX=llvm-g++\n DEPSDIR=/opt/local\n \n INCLUDEPATHS= \\\n+ -I\"$(CURDIR)\" \\\n  -I\"$(DEPSDIR)/include\" \\\n  -I\"$(DEPSDIR)/include/db48\"\n \n@@ -110,14 +111,16 @@ obj/nogui/%.o: %.cpp\n bitcoind: $(OBJS:obj/%=obj/nogui/%)\n \t$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)\n \n+TESTOBJS := $(patsubst test/%.cpp,obj/test/%.o,$(wildcard test/*.cpp))\n+\n obj/test/%.o: test/%.cpp\n \t$(CXX) -c $(CFLAGS) -MMD -o $@ $<\n \t@cp $(@:%.o=%.d) $(@:%.o=%.P); \\\n \t  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n \t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n \t  rm -f $(@:%.o=%.d)\n \n-test_bitcoin: obj/test/test_bitcoin.o $(filter-out obj/nogui/init.o,$(OBJS:obj/%=obj/nogui/%))\n+test_bitcoin: $(TESTOBJS) $(filter-out obj/nogui/init.o,$(OBJS:obj/%=obj/nogui/%))\n \t$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) $(DEPSDIR)/lib/libboost_unit_test_framework-mt.a\n \n clean:"
      },
      {
        "sha": "42bf3dd554aef0a9877be209f83c12bc148a4e26",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -6,7 +6,7 @@ USE_UPNP:=0\n \n DEFS=-DNOPCH\n \n-DEFS += $(addprefix -I,$(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))\n+DEFS += $(addprefix -I,$(CURDIR) $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))\n LIBS += $(addprefix -l,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))\n \n LMODE = dynamic\n@@ -139,14 +139,16 @@ obj/nogui/%.o: %.cpp\n bitcoind: $(OBJS:obj/%=obj/nogui/%)\n \t$(CXX) $(xCXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)\n \n+TESTOBJS := $(patsubst test/%.cpp,obj/test/%.o,$(wildcard test/*.cpp))\n+\n obj/test/%.o: test/%.cpp\n \t$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<\n \t@cp $(@:%.o=%.d) $(@:%.o=%.P); \\\n \t  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n \t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n \t  rm -f $(@:%.o=%.d)\n \n-test_bitcoin: obj/test/test_bitcoin.o $(filter-out obj/nogui/init.o,$(OBJS:obj/%=obj/nogui/%))\n+test_bitcoin: $(TESTOBJS) $(filter-out obj/nogui/init.o,$(OBJS:obj/%=obj/nogui/%))\n \t$(CXX) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ -Wl,-Bstatic -lboost_unit_test_framework $(LDFLAGS) $(LIBS)\n \n clean:"
      },
      {
        "sha": "e9b7b4517aeeb36e8293516cdcc5187fded01310",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -5,9 +5,10 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n \n-#include \"../main.h\"\n-#include \"../net.h\"\n-#include \"../util.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"net.h\"\n+#include \"util.h\"\n \n using namespace std;\n "
      },
      {
        "sha": "d52ac7498256654306f65e26c271c09acfa555b4",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -1,6 +1,8 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../util.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"util.h\"\n \n BOOST_AUTO_TEST_SUITE(base58_tests)\n "
      },
      {
        "sha": "fff30ef5eb6b05df178e6c15872b0fbff0db60d7",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -1,18 +1,20 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../util.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"util.h\"\n \n BOOST_AUTO_TEST_SUITE(base64_tests)\n \n BOOST_AUTO_TEST_CASE(base64_testvectors)\n {\n-    static const string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n-    static const string vstrOut[] = {\"\",\"Zg==\",\"Zm8=\",\"Zm9v\",\"Zm9vYg==\",\"Zm9vYmE=\",\"Zm9vYmFy\"};\n+    static const std::string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n+    static const std::string vstrOut[] = {\"\",\"Zg==\",\"Zm8=\",\"Zm9v\",\"Zm9vYg==\",\"Zm9vYmE=\",\"Zm9vYmFy\"};\n     for (int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n-        string strEnc = EncodeBase64(vstrIn[i]);\n+        std::string strEnc = EncodeBase64(vstrIn[i]);\n         BOOST_CHECK(strEnc == vstrOut[i]);\n-        string strDec = DecodeBase64(strEnc);\n+        std::string strDec = DecodeBase64(strEnc);\n         BOOST_CHECK(strDec == vstrIn[i]);\n     }\n }"
      },
      {
        "sha": "d4abd6d2a7e90fdae8cc88e7bd721bfcc33b6e91",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -1,6 +1,6 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../uint256.h\"\n+#include \"uint256.h\"\n \n extern void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n "
      },
      {
        "sha": "f3fa5c3a1b2cae8ce179aca02b6646aabbf006e0",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -2,8 +2,8 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n \n-#include \"../main.h\"\n-#include \"../wallet.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n \n using namespace std;\n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);"
      },
      {
        "sha": "c7f45a0877fe9b5c3bfc8bfb3cac3cccd6f863bc",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 13,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -1,19 +1,8 @@\n #define BOOST_TEST_MODULE Bitcoin Test Suite\n #include <boost/test/unit_test.hpp>\n \n-#include \"../main.h\"\n-#include \"../wallet.h\"\n-\n-#include \"uint160_tests.cpp\"\n-#include \"uint256_tests.cpp\"\n-#include \"script_tests.cpp\"\n-#include \"transaction_tests.cpp\"\n-#include \"DoS_tests.cpp\"\n-#include \"base64_tests.cpp\"\n-#include \"util_tests.cpp\"\n-#include \"base58_tests.cpp\"\n-#include \"miner_tests.cpp\"\n-#include \"Checkpoints_tests.cpp\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n \n CWallet* pwalletMain;\n "
      },
      {
        "sha": "3268343bbe12cbbcf34795e46da56392b82cdc62",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -1,7 +1,7 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../main.h\"\n-#include \"../wallet.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n \n using namespace std;\n "
      },
      {
        "sha": "35cb35b25ad07fc34a90692ac971cd2e4ced5a09",
        "filename": "src/test/uint160_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/uint160_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/uint160_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint160_tests.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -1,6 +1,6 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../uint256.h\"\n+#include \"uint256.h\"\n \n BOOST_AUTO_TEST_SUITE(uint160_tests)\n "
      },
      {
        "sha": "efdc8a6aeb77ffff72ca2e2fb312240c5559e27c",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -1,6 +1,6 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../uint256.h\"\n+#include \"uint256.h\"\n \n BOOST_AUTO_TEST_SUITE(uint256_tests)\n "
      },
      {
        "sha": "9571c4738269f9ea86a126ba916dc948a0ab6c70",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "patch": "@@ -2,7 +2,9 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n \n-#include \"../util.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"util.h\"\n \n using namespace std;\n "
      }
    ]
  },
  {
    "sha": "1b714b5a8ef5485c780d55388025137ff6eb2d79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjcxNGI1YThlZjU0ODVjNzgwZDU1Mzg4MDI1MTM3ZmY2ZWIyZDc5",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-09-28T16:30:06Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T22:06:00Z"
      },
      "message": "Support 3 new multisignature IsStandard transactions\n\nInitial support for (a and b), (a or b), and 2-of-3 escrow\ntransactions (where a, b, and c are keys).",
      "tree": {
        "sha": "1fbb9c24acb9f1900023635f8394a74a4e3d8d95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fbb9c24acb9f1900023635f8394a74a4e3d8d95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b714b5a8ef5485c780d55388025137ff6eb2d79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b714b5a8ef5485c780d55388025137ff6eb2d79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b714b5a8ef5485c780d55388025137ff6eb2d79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b714b5a8ef5485c780d55388025137ff6eb2d79/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3f397a2a7b2645d1ab701d796f9f1268fcf89ac"
      }
    ],
    "stats": {
      "total": 664,
      "additions": 575,
      "deletions": 89
    },
    "files": [
      {
        "sha": "842df0169635fb488c954ee35ea7c7de3e343200",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 117,
        "deletions": 2,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1b714b5a8ef5485c780d55388025137ff6eb2d79",
        "patch": "@@ -41,7 +41,6 @@ static std::string strRPCUserColonPass;\n static int64 nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n-\n Object JSONRPCError(int code, const string& message)\n {\n     Object error;\n@@ -931,6 +930,101 @@ Value sendmany(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+Value sendmultisig(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 4 || params.size() > 7)\n+    {\n+        string msg = \"sendmultisig <fromaccount> <type> <[\\\"key\\\",\\\"key\\\"]> <amount> [minconf=1] [comment] [comment-to]\\n\"\n+            \"<type> is one of: \\\"and\\\", \\\"or\\\", \\\"escrow\\\"\\n\"\n+            \"<keys> is an array of strings (in JSON array format); each key is a bitcoin address, hex or base58 public key\\n\"\n+            \"<amount> is a real and is rounded to the nearest 0.00000001\";\n+        if (pwalletMain->IsCrypted())\n+            msg += \"\\nrequires wallet passphrase to be set with walletpassphrase first\";\n+        throw runtime_error(msg);\n+    }\n+\n+    string strAccount = AccountFromValue(params[0]);\n+    string strType = params[1].get_str();\n+    const Array& keys = params[2].get_array();\n+    int64 nAmount = AmountFromValue(params[3]);\n+    int nMinDepth = 1;\n+    if (params.size() > 4)\n+        nMinDepth = params[4].get_int();\n+\n+    CWalletTx wtx;\n+    wtx.strFromAccount = strAccount;\n+    if (params.size() > 5 && params[5].type() != null_type && !params[5].get_str().empty())\n+        wtx.mapValue[\"comment\"] = params[5].get_str();\n+    if (params.size() > 6 && params[6].type() != null_type && !params[6].get_str().empty())\n+        wtx.mapValue[\"to\"]      = params[6].get_str();\n+\n+    if (pwalletMain->IsLocked())\n+        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+\n+    // Check funds\n+    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    if (nAmount > nBalance)\n+        throw JSONRPCError(-6, \"Account has insufficient funds\");\n+\n+    // Gather public keys\n+    int nKeysNeeded = 0;\n+    if (strType == \"and\" || strType == \"or\")\n+        nKeysNeeded = 2;\n+    else if (strType == \"escrow\")\n+        nKeysNeeded = 3;\n+    else\n+        throw runtime_error(\"sendmultisig: <type> must be one of: and or and_or\");\n+    if (keys.size() != nKeysNeeded)\n+        throw runtime_error(\n+            strprintf(\"sendmultisig: wrong number of keys (got %d, need %d)\", keys.size(), nKeysNeeded));\n+    std::vector<CKey> pubkeys;\n+    pubkeys.resize(nKeysNeeded);\n+    for (int i = 0; i < nKeysNeeded; i++)\n+    {\n+        const std::string& ks = keys[i].get_str();\n+        if (ks.size() == 130) // hex public key\n+            pubkeys[i].SetPubKey(ParseHex(ks));\n+        else if (ks.size() > 34) // base58-encoded\n+        {\n+            std::vector<unsigned char> vchPubKey;\n+            if (DecodeBase58(ks, vchPubKey))\n+                pubkeys[i].SetPubKey(vchPubKey);\n+            else\n+                throw runtime_error(\"Error base58 decoding key: \"+ks);\n+        }\n+        else // bitcoin address for key in this wallet\n+        {\n+            CBitcoinAddress address(ks);\n+            if (!pwalletMain->GetKey(address, pubkeys[i]))\n+                throw runtime_error(\n+                    strprintf(\"sendmultisig: unknown address: %s\",ks.c_str()));\n+        }\n+    }\n+\n+    // Send\n+    CScript scriptPubKey;\n+    if (strType == \"and\")\n+        scriptPubKey.SetMultisigAnd(pubkeys);\n+    else if (strType == \"or\")\n+        scriptPubKey.SetMultisigOr(pubkeys);\n+    else\n+        scriptPubKey.SetMultisigEscrow(pubkeys);\n+\n+    CReserveKey keyChange(pwalletMain);\n+    int64 nFeeRequired = 0;\n+    bool fCreated = pwalletMain->CreateTransaction(scriptPubKey, nAmount, wtx, keyChange, nFeeRequired);\n+    if (!fCreated)\n+    {\n+        if (nAmount + nFeeRequired > pwalletMain->GetBalance())\n+            throw JSONRPCError(-6, \"Insufficient funds\");\n+        throw JSONRPCError(-4, \"Transaction creation failed\");\n+    }\n+    if (!pwalletMain->CommitTransaction(wtx, keyChange))\n+        throw JSONRPCError(-4, \"Transaction commit failed\");\n+\n+    return wtx.GetHash().GetHex();\n+}\n+\n \n struct tallyitem\n {\n@@ -1591,7 +1685,17 @@ Value validateaddress(const Array& params, bool fHelp)\n         // version of the address:\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        ret.push_back(Pair(\"ismine\", (pwalletMain->HaveKey(address) > 0)));\n+        if (pwalletMain->HaveKey(address))\n+        {\n+            ret.push_back(Pair(\"ismine\", true));\n+            std::vector<unsigned char> vchPubKey;\n+            pwalletMain->GetPubKey(address, vchPubKey);\n+            ret.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            std::string strPubKey(vchPubKey.begin(), vchPubKey.end());\n+            ret.push_back(Pair(\"pubkey58\", EncodeBase58(vchPubKey)));\n+        }\n+        else\n+            ret.push_back(Pair(\"ismine\", false));\n         if (pwalletMain->mapAddressBook.count(address))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address]));\n     }\n@@ -1837,6 +1941,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"move\",                   &movecmd),\n     make_pair(\"sendfrom\",               &sendfrom),\n     make_pair(\"sendmany\",               &sendmany),\n+    make_pair(\"sendmultisig\",           &sendmultisig),\n     make_pair(\"gettransaction\",         &gettransaction),\n     make_pair(\"listtransactions\",       &listtransactions),\n     make_pair(\"signmessage\",           &signmessage),\n@@ -2478,6 +2583,16 @@ int CommandLineRPC(int argc, char *argv[])\n             params[1] = v.get_obj();\n         }\n         if (strMethod == \"sendmany\"                && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+        if (strMethod == \"sendmultisig\"            && n > 2)\n+        {\n+            string s = params[2].get_str();\n+            Value v;\n+            if (!read_string(s, v) || v.type() != array_type)\n+                throw runtime_error(\"sendmultisig: type mismatch \"+s);\n+            params[2] = v.get_array();\n+        }\n+        if (strMethod == \"sendmultisig\"            && n > 3) ConvertTo<double>(params[3]);\n+        if (strMethod == \"sendmultisig\"            && n > 4) ConvertTo<boost::int64_t>(params[4]);\n \n         // Execute\n         Object reply = CallRPC(strMethod, params);"
      },
      {
        "sha": "6a7913b0d543816d6a41cf7f018c6237d053918a",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 156,
        "deletions": 67,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=1b714b5a8ef5485c780d55388025137ff6eb2d79",
        "patch": "@@ -963,8 +963,11 @@ bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CSc\n \n \n \n-\n-bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSolutionRet)\n+//\n+// Returns lists of public keys (or public key hashes), any one of which can\n+// satisfy scriptPubKey\n+//\n+bool Solver(const CScript& scriptPubKey, vector<vector<pair<opcodetype, valtype> > >& vSolutionsRet)\n {\n     // Templates\n     static vector<CScript> vTemplates;\n@@ -975,13 +978,24 @@ bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSo\n \n         // Bitcoin address tx, sender provides hash of pubkey, receiver provides signature and pubkey\n         vTemplates.push_back(CScript() << OP_DUP << OP_HASH160 << OP_PUBKEYHASH << OP_EQUALVERIFY << OP_CHECKSIG);\n+\n+        // Sender provides two pubkeys, receivers provides two signatures\n+        vTemplates.push_back(CScript() << OP_2 << OP_PUBKEY << OP_PUBKEY << OP_2 << OP_CHECKMULTISIG);\n+\n+        // Sender provides two pubkeys, receivers provides one of two signatures\n+        vTemplates.push_back(CScript() << OP_1 << OP_PUBKEY << OP_PUBKEY << OP_2 << OP_CHECKMULTISIG);\n+\n+        // Sender provides three pubkeys, receiver provides 2 of 3 signatures.\n+        vTemplates.push_back(CScript() << OP_2 << OP_PUBKEY << OP_PUBKEY << OP_PUBKEY << OP_3 << OP_CHECKMULTISIG);\n     }\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n     BOOST_FOREACH(const CScript& script2, vTemplates)\n     {\n-        vSolutionRet.clear();\n+        vSolutionsRet.clear();\n+\n+        vector<pair<opcodetype, valtype> > currentSolution;\n         opcodetype opcode1, opcode2;\n         vector<unsigned char> vch1, vch2;\n \n@@ -992,9 +1006,7 @@ bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSo\n         {\n             if (pc1 == script1.end() && pc2 == script2.end())\n             {\n-                // Found a match\n-                reverse(vSolutionRet.begin(), vSolutionRet.end());\n-                return true;\n+                return !vSolutionsRet.empty();\n             }\n             if (!script1.GetOp(pc1, opcode1, vch1))\n                 break;\n@@ -1004,13 +1016,54 @@ bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSo\n             {\n                 if (vch1.size() < 33 || vch1.size() > 120)\n                     break;\n-                vSolutionRet.push_back(make_pair(opcode2, vch1));\n+                currentSolution.push_back(make_pair(opcode2, vch1));\n             }\n             else if (opcode2 == OP_PUBKEYHASH)\n             {\n                 if (vch1.size() != sizeof(uint160))\n                     break;\n-                vSolutionRet.push_back(make_pair(opcode2, vch1));\n+                currentSolution.push_back(make_pair(opcode2, vch1));\n+            }\n+            else if (opcode2 == OP_CHECKSIG)\n+            {\n+                vSolutionsRet.push_back(currentSolution);\n+                currentSolution.clear();\n+            }\n+            else if (opcode2 == OP_CHECKMULTISIG)\n+            {   // Dig out the \"m\" from before the pubkeys:\n+                CScript::const_iterator it = script2.begin();\n+                opcodetype op_m;\n+                script2.GetOp(it, op_m, vch1);\n+                int m = CScript::DecodeOP_N(op_m);\n+                int n = currentSolution.size();\n+\n+                if (m == 2 && n == 2)\n+                {\n+                    vSolutionsRet.push_back(currentSolution);\n+                    currentSolution.clear();\n+                }\n+                else if (m == 1 && n == 2)\n+                { // 2 solutions: either first key or second\n+                    for (int i = 0; i < 2; i++)\n+                    {\n+                        vector<pair<opcodetype, valtype> > s;\n+                        s.push_back(currentSolution[i]);\n+                        vSolutionsRet.push_back(s);\n+                    }\n+                    currentSolution.clear();\n+                }\n+                else if (m == 2 && n == 3)\n+                { // 3 solutions: any pair\n+                    for (int i = 0; i < 2; i++)\n+                        for (int j = i+1; j < 3; j++)\n+                        {\n+                            vector<pair<opcodetype, valtype> > s;\n+                            s.push_back(currentSolution[i]);\n+                            s.push_back(currentSolution[j]);\n+                            vSolutionsRet.push_back(s);\n+                        }\n+                    currentSolution.clear();\n+                }\n             }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {\n@@ -1019,7 +1072,7 @@ bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSo\n         }\n     }\n \n-    vSolutionRet.clear();\n+    vSolutionsRet.clear();\n     return false;\n }\n \n@@ -1028,111 +1081,128 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n {\n     scriptSigRet.clear();\n \n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n+    vector<vector<pair<opcodetype, valtype> > > vSolutions;\n+    if (!Solver(scriptPubKey, vSolutions))\n         return false;\n \n-    // Compile solution\n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+    // See if we have all the keys for any of the solutions:\n+    int whichSolution = -1;\n+    for (int i = 0; i < vSolutions.size(); i++)\n     {\n-        if (item.first == OP_PUBKEY)\n+        int keysFound = 0;\n+        CScript scriptSig;\n+\n+        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolutions[i])\n         {\n-            // Sign\n-            const valtype& vchPubKey = item.second;\n-            CKey key;\n-            if (!keystore.GetKey(Hash160(vchPubKey), key))\n-                return false;\n-            if (key.GetPubKey() != vchPubKey)\n-                return false;\n-            if (hash != 0)\n+            if (item.first == OP_PUBKEY)\n             {\n+                const valtype& vchPubKey = item.second;\n+                CKey key;\n                 vector<unsigned char> vchSig;\n-                if (!key.Sign(hash, vchSig))\n-                    return false;\n-                vchSig.push_back((unsigned char)nHashType);\n-                scriptSigRet << vchSig;\n+                if (keystore.GetKey(Hash160(vchPubKey), key) && key.GetPubKey() == vchPubKey\n+                    && hash != 0 && key.Sign(hash, vchSig))\n+                {\n+                    vchSig.push_back((unsigned char)nHashType);\n+                    scriptSig << vchSig;\n+                    ++keysFound;\n+                }\n             }\n-        }\n-        else if (item.first == OP_PUBKEYHASH)\n-        {\n-            // Sign and give pubkey\n-            CKey key;\n-            if (!keystore.GetKey(uint160(item.second), key))\n-                return false;\n-            if (hash != 0)\n+            else if (item.first == OP_PUBKEYHASH)\n             {\n+                CKey key;\n                 vector<unsigned char> vchSig;\n-                if (!key.Sign(hash, vchSig))\n-                    return false;\n-                vchSig.push_back((unsigned char)nHashType);\n-                scriptSigRet << vchSig << key.GetPubKey();\n+                if (keystore.GetKey(uint160(item.second), key) \n+                    && hash != 0 && key.Sign(hash, vchSig))\n+                {\n+                    vchSig.push_back((unsigned char)nHashType);\n+                    scriptSig << vchSig << key.GetPubKey();\n+                    ++keysFound;\n+                }\n             }\n         }\n-        else\n+        if (keysFound == vSolutions[i].size())\n         {\n-            return false;\n+            whichSolution = i;\n+            scriptSigRet = scriptSig;\n+            break;\n         }\n     }\n+    if (whichSolution == -1)\n+        return false;\n+\n+    // CHECKMULTISIG bug workaround:\n+    if (vSolutions.size() != 1 ||\n+        vSolutions[0].size() != 1)\n+    {\n+        scriptSigRet.insert(scriptSigRet.begin(), OP_0);\n+    }\n \n     return true;\n }\n \n \n bool IsStandard(const CScript& scriptPubKey)\n {\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    return Solver(scriptPubKey, vSolution);\n+    vector<vector<pair<opcodetype, valtype> > > vSolutions;\n+    return Solver(scriptPubKey, vSolutions);\n }\n \n \n bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n+    vector<vector<pair<opcodetype, valtype> > > vSolutions;\n+    if (!Solver(scriptPubKey, vSolutions))\n         return false;\n \n-    // Compile solution\n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+    int keysFound = 0;\n+    int keysRequired = 0;\n+    for (int i = 0; i < vSolutions.size(); i++)\n     {\n-        if (item.first == OP_PUBKEY)\n-        {\n-            const valtype& vchPubKey = item.second;\n-            vector<unsigned char> vchPubKeyFound;\n-            if (!keystore.GetPubKey(Hash160(vchPubKey), vchPubKeyFound))\n-                return false;\n-            if (vchPubKeyFound != vchPubKey)\n-                return false;\n-        }\n-        else if (item.first == OP_PUBKEYHASH)\n-        {\n-            if (!keystore.HaveKey(uint160(item.second)))\n-                return false;\n-        }\n-        else\n+        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolutions[i])\n         {\n-            return false;\n+            ++keysRequired;\n+            if (item.first == OP_PUBKEY)\n+            {\n+                const valtype& vchPubKey = item.second;\n+                vector<unsigned char> vchPubKeyFound;\n+                if (keystore.GetPubKey(Hash160(vchPubKey), vchPubKeyFound) && vchPubKeyFound == vchPubKey)\n+                    ++keysFound;\n+            }\n+            else if (item.first == OP_PUBKEYHASH)\n+            {\n+                if (keystore.HaveKey(uint160(item.second)))\n+                    ++keysFound;\n+            }\n         }\n     }\n \n-    return true;\n+    // Only consider transactions \"mine\" if we own ALL the\n+    // keys involved. multi-signature transactions that are\n+    // partially owned (somebody else has a key that can spend\n+    // them) enable spend-out-from-under-you attacks, especially\n+    // for shared-wallet situations.\n+    return (keysFound == keysRequired);\n }\n \n bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n {\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n+    vector<vector<pair<opcodetype, valtype> > > vSolutions;\n+    if (!Solver(scriptPubKey, vSolutions))\n         return false;\n \n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+    for (int i = 0; i < vSolutions.size(); i++)\n     {\n+        if (vSolutions[i].size() != 1)\n+            continue; // Can't return more than one address...\n+\n+        PAIRTYPE(opcodetype, valtype)& item = vSolutions[i][0];\n         if (item.first == OP_PUBKEY)\n             addressRet.SetPubKey(item.second);\n         else if (item.first == OP_PUBKEYHASH)\n             addressRet.SetHash160((uint160)item.second);\n         if (keystore == NULL || keystore->HaveKey(addressRet))\n             return true;\n     }\n-\n     return false;\n }\n \n@@ -1192,3 +1262,22 @@ bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsig\n \n     return true;\n }\n+\n+void CScript::SetMultisigAnd(const std::vector<CKey>& keys)\n+{\n+    assert(keys.size() >= 2);\n+    this->clear();\n+    *this << OP_2 << keys[0].GetPubKey() << keys[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+}\n+void CScript::SetMultisigOr(const std::vector<CKey>& keys)\n+{\n+    assert(keys.size() >= 2);\n+    this->clear();\n+    *this << OP_1 << keys[0].GetPubKey() << keys[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+}\n+void CScript::SetMultisigEscrow(const std::vector<CKey>& keys)\n+{\n+    assert(keys.size() >= 3);\n+    this->clear();\n+    *this << OP_2 << keys[0].GetPubKey() << keys[1].GetPubKey() << keys[1].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+}"
      },
      {
        "sha": "a5a1e1868c9cb9097ee8ebda5df1c309ff09eafb",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=1b714b5a8ef5485c780d55388025137ff6eb2d79",
        "patch": "@@ -574,6 +574,13 @@ class CScript : public std::vector<unsigned char>\n         return true;\n     }\n \n+    static int DecodeOP_N(opcodetype opcode)\n+    {\n+        if (opcode == OP_0)\n+            return 0;\n+        assert(opcode >= OP_1 && opcode <= OP_16);\n+        return (int)opcode - (int)(OP_1 - 1);\n+    }\n \n     void FindAndDelete(const CScript& b)\n     {\n@@ -625,21 +632,6 @@ class CScript : public std::vector<unsigned char>\n     }\n \n \n-    CBitcoinAddress GetBitcoinAddress() const\n-    {\n-        opcodetype opcode;\n-        std::vector<unsigned char> vch;\n-        CScript::const_iterator pc = begin();\n-        if (!GetOp(pc, opcode, vch) || opcode != OP_DUP) return 0;\n-        if (!GetOp(pc, opcode, vch) || opcode != OP_HASH160) return 0;\n-        if (!GetOp(pc, opcode, vch) || vch.size() != sizeof(uint160)) return 0;\n-        uint160 hash160 = uint160(vch);\n-        if (!GetOp(pc, opcode, vch) || opcode != OP_EQUALVERIFY) return 0;\n-        if (!GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG) return 0;\n-        if (pc != end()) return 0;\n-        return CBitcoinAddress(hash160);\n-    }\n-\n     void SetBitcoinAddress(const CBitcoinAddress& address)\n     {\n         this->clear();\n@@ -650,6 +642,9 @@ class CScript : public std::vector<unsigned char>\n     {\n         SetBitcoinAddress(CBitcoinAddress(vchPubKey));\n     }\n+    void SetMultisigAnd(const std::vector<CKey>& keys);\n+    void SetMultisigOr(const std::vector<CKey>& keys);\n+    void SetMultisigEscrow(const std::vector<CKey>& keys);\n \n \n     void PrintHex() const"
      },
      {
        "sha": "459d112369489bae4d542e433431679d49133ee4",
        "filename": "src/test/multisig_tests.cpp",
        "status": "added",
        "additions": 288,
        "deletions": 0,
        "changes": 288,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=1b714b5a8ef5485c780d55388025137ff6eb2d79",
        "patch": "@@ -0,0 +1,288 @@\n+#include <boost/assert.hpp>\n+#include <boost/assign/list_of.hpp>\n+#include <boost/assign/list_inserter.hpp>\n+#include <boost/assign/std/vector.hpp>\n+#include <boost/test/unit_test.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/tuple/tuple.hpp>\n+\n+#include <openssl/ec.h>\n+#include <openssl/err.h>\n+\n+#include \"keystore.h\"\n+#include \"main.h\"\n+#include \"script.h\"\n+#include \"wallet.h\"\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+typedef vector<unsigned char> valtype;\n+\n+extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool Solver(const CScript& scriptPubKey, vector<vector<pair<opcodetype, valtype> > >& vSolutionsRet);\n+\n+BOOST_AUTO_TEST_SUITE(multisig_tests)\n+\n+CScript\n+sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n+{\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL);\n+\n+    CScript result;\n+    result << OP_0; // CHECKMULTISIG bug workaround\n+    BOOST_FOREACH(CKey key, keys)\n+    {\n+        vector<unsigned char> vchSig;\n+        BOOST_CHECK(key.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        result << vchSig;\n+    }\n+    return result;\n+}\n+\n+BOOST_AUTO_TEST_CASE(multisig_verify)\n+{\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n+        key[i].MakeNewKey();\n+\n+    CScript a_and_b;\n+    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript a_or_b;\n+    a_or_b << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript escrow;\n+    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+\n+    CTransaction txFrom;  // Funding transaction\n+    txFrom.vout.resize(3);\n+    txFrom.vout[0].scriptPubKey = a_and_b;\n+    txFrom.vout[1].scriptPubKey = a_or_b;\n+    txFrom.vout[2].scriptPubKey = escrow;\n+\n+    CTransaction txTo[3]; // Spending transaction\n+    for (int i = 0; i < 3; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+    }\n+\n+    vector<CKey> keys;\n+    CScript s;\n+\n+    // Test a AND b:\n+    keys.clear();\n+    keys += key[0],key[1]; // magic operator+= from boost.assign\n+    s = sign_multisig(a_and_b, keys, txTo[0], 0);\n+    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, 0));\n+\n+    for (int i = 0; i < 4; i++)\n+    {\n+        keys.clear();\n+        keys += key[i];\n+        s = sign_multisig(a_and_b, keys, txTo[0], 0);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, 0), strprintf(\"a&b 1: %d\", i));\n+\n+        keys.clear();\n+        keys += key[1],key[i];\n+        s = sign_multisig(a_and_b, keys, txTo[0], 0);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, 0), strprintf(\"a&b 2: %d\", i));\n+    }\n+\n+    // Test a OR b:\n+    for (int i = 0; i < 4; i++)\n+    {\n+        keys.clear();\n+        keys += key[i];\n+        s = sign_multisig(a_or_b, keys, txTo[1], 0);\n+        if (i == 0 || i == 1)\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, 0), strprintf(\"a|b: %d\", i));\n+        else\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, 0), strprintf(\"a|b: %d\", i));\n+    }\n+    s.clear();\n+    s << OP_0 << OP_0;\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, 0));\n+    s.clear();\n+    s << OP_0 << OP_1;\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, 0));\n+\n+\n+    for (int i = 0; i < 4; i++)\n+        for (int j = 0; j < 4; j++)\n+        {\n+            keys.clear();\n+            keys += key[i],key[j];\n+            s = sign_multisig(escrow, keys, txTo[2], 0);\n+            if (i < j && i < 3 && j < 3)\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, 0), strprintf(\"escrow 1: %d %d\", i, j));\n+            else\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, 0), strprintf(\"escrow 2: %d %d\", i, j));\n+        }\n+}\n+\n+BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n+{\n+    CKey key[3];\n+    for (int i = 0; i < 3; i++)\n+        key[i].MakeNewKey();\n+\n+    CScript a_and_b;\n+    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(::IsStandard(a_and_b));\n+\n+    CScript a_or_b;\n+    a_or_b  << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(::IsStandard(a_or_b));\n+\n+    CScript escrow;\n+    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(::IsStandard(escrow));\n+}\n+\n+BOOST_AUTO_TEST_CASE(multisig_Solver1)\n+{\n+    // Tests Solver() that returns lists of keys that are\n+    // required to satisfy a ScriptPubKey\n+    //\n+    // Also tests IsMine() and ExtractAddress()\n+    //\n+    // Note: ExtractAddress for the multisignature transactions\n+    // always returns false for this release, even if you have\n+    // one key that would satisfy an (a|b) or 2-of-3 keys needed\n+    // to spend an escrow transaction.\n+    //\n+    CBasicKeyStore keystore, emptykeystore;\n+    CKey key[3];\n+    CBitcoinAddress keyaddr[3];\n+    for (int i = 0; i < 3; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+        keyaddr[i].SetPubKey(key[i].GetPubKey());\n+    }\n+\n+    {\n+        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        CScript s;\n+        s << key[0].GetPubKey() << OP_CHECKSIG;\n+        BOOST_CHECK(Solver(s, solutions));\n+        BOOST_CHECK(solutions.size() == 1);\n+        if (solutions.size() == 1)\n+            BOOST_CHECK(solutions[0].size() == 1);\n+        CBitcoinAddress addr;\n+        BOOST_CHECK(ExtractAddress(s, &keystore, addr));\n+        BOOST_CHECK(addr == keyaddr[0]);\n+        BOOST_CHECK(IsMine(keystore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, s));\n+    }\n+    {\n+        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        CScript s;\n+        s << OP_DUP << OP_HASH160 << Hash160(key[0].GetPubKey()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        BOOST_CHECK(Solver(s, solutions));\n+        BOOST_CHECK(solutions.size() == 1);\n+        if (solutions.size() == 1)\n+            BOOST_CHECK(solutions[0].size() == 1);\n+        CBitcoinAddress addr;\n+        BOOST_CHECK(ExtractAddress(s, &keystore, addr));\n+        BOOST_CHECK(addr == keyaddr[0]);\n+        BOOST_CHECK(IsMine(keystore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, s));\n+    }\n+    {\n+        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        CScript s;\n+        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+        BOOST_CHECK(Solver(s, solutions));\n+        BOOST_CHECK(solutions.size() == 1);\n+        if (solutions.size() == 1)\n+            BOOST_CHECK(solutions[0].size() == 2);\n+        CBitcoinAddress addr;\n+        BOOST_CHECK(!ExtractAddress(s, &keystore, addr));\n+        BOOST_CHECK(IsMine(keystore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, s));\n+    }\n+    {\n+        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        CScript s;\n+        s << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+        BOOST_CHECK(Solver(s, solutions));\n+        BOOST_CHECK(solutions.size() == 2);\n+        if (solutions.size() == 2)\n+        {\n+            BOOST_CHECK(solutions[0].size() == 1);\n+            BOOST_CHECK(solutions[1].size() == 1);\n+        }\n+        CBitcoinAddress addr;\n+        BOOST_CHECK(ExtractAddress(s, &keystore, addr));\n+        BOOST_CHECK(addr == keyaddr[0]);\n+        BOOST_CHECK(IsMine(keystore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, s));\n+    }\n+    {\n+        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        CScript s;\n+        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+        BOOST_CHECK(Solver(s, solutions));\n+        BOOST_CHECK(solutions.size() == 3);\n+        if (solutions.size() == 3)\n+        {\n+            BOOST_CHECK(solutions[0].size() == 2);\n+            BOOST_CHECK(solutions[1].size() == 2);\n+            BOOST_CHECK(solutions[2].size() == 2);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(multisig_Sign)\n+{\n+    // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+    }\n+\n+    CScript a_and_b;\n+    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript a_or_b;\n+    a_or_b  << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript escrow;\n+    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+\n+    CTransaction txFrom;  // Funding transaction\n+    txFrom.vout.resize(3);\n+    txFrom.vout[0].scriptPubKey = a_and_b;\n+    txFrom.vout[1].scriptPubKey = a_or_b;\n+    txFrom.vout[2].scriptPubKey = escrow;\n+\n+    CTransaction txTo[3]; // Spending transaction\n+    for (int i = 0; i < 3; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+    }\n+\n+    for (int i = 0; i < 3; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+    }\n+}\n+\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "46d5b5f18e69315b8451ef52bb6305542e3ce5bc",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b714b5a8ef5485c780d55388025137ff6eb2d79/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1b714b5a8ef5485c780d55388025137ff6eb2d79",
        "patch": "@@ -979,12 +979,11 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                     vector<unsigned char> vchPubKey = reservekey.GetReservedKey();\n                     // assert(mapKeys.count(vchPubKey));\n \n-                    // Fill a vout to ourself, using same address type as the payment\n+                    // Fill a vout to ourself\n+                    // TODO: pass in scriptChange instead of reservekey so\n+                    // change transaction isn't always pay-to-bitcoin-address\n                     CScript scriptChange;\n-                    if (vecSend[0].first.GetBitcoinAddress().IsValid())\n-                        scriptChange.SetBitcoinAddress(vchPubKey);\n-                    else\n-                        scriptChange << vchPubKey << OP_CHECKSIG;\n+                    scriptChange.SetBitcoinAddress(vchPubKey);\n \n                     // Insert change txn at random position:\n                     vector<CTxOut>::iterator position = wtxNew.vout.begin()+GetRandInt(wtxNew.vout.size());"
      }
    ]
  },
  {
    "sha": "c4a533a7b5f9c9c1a62763c35858358c6a44c0af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGE1MzNhN2I1ZjljOWMxYTYyNzYzYzM1ODU4MzU4YzZhNDRjMGFm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-10-03T20:14:13Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T22:06:00Z"
      },
      "message": "Global fixture to send output to console instead of debug.log",
      "tree": {
        "sha": "f8f131d490bf4fa077167315388bae93ae673b7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8f131d490bf4fa077167315388bae93ae673b7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4a533a7b5f9c9c1a62763c35858358c6a44c0af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4a533a7b5f9c9c1a62763c35858358c6a44c0af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4a533a7b5f9c9c1a62763c35858358c6a44c0af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4a533a7b5f9c9c1a62763c35858358c6a44c0af/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b714b5a8ef5485c780d55388025137ff6eb2d79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b714b5a8ef5485c780d55388025137ff6eb2d79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b714b5a8ef5485c780d55388025137ff6eb2d79"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4b52b74cfe6ea94a6bbf2c61c31af810e42a0d95",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4a533a7b5f9c9c1a62763c35858358c6a44c0af/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4a533a7b5f9c9c1a62763c35858358c6a44c0af/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=c4a533a7b5f9c9c1a62763c35858358c6a44c0af",
        "patch": "@@ -4,6 +4,16 @@\n #include \"main.h\"\n #include \"wallet.h\"\n \n+extern bool fPrintToConsole;\n+struct TestingSetup {\n+    TestingSetup() {\n+        fPrintToConsole = true; // don't want to write to debug.log file\n+    }\n+    ~TestingSetup() { }\n+};\n+\n+BOOST_GLOBAL_FIXTURE(TestingSetup);\n+\n CWallet* pwalletMain;\n \n void Shutdown(void* parg)"
      }
    ]
  },
  {
    "sha": "f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGNmYTI3OTMyMWMzYmNmMzVkOWQzMDI5N2JhZTdhNDdkMThhZjZm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-10-03T17:05:43Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T22:06:00Z"
      },
      "message": "OP_EVAL implementation\n\nOP_EVAL is a new opcode that evaluates an item on the stack as a script.\nIt enables a new type of bitcoin address that needs an arbitrarily\ncomplex script to redeem.",
      "tree": {
        "sha": "9b44c7f0b2f71b8b0e58573b89d8c6853d8c3cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b44c7f0b2f71b8b0e58573b89d8c6853d8c3cfa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4a533a7b5f9c9c1a62763c35858358c6a44c0af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4a533a7b5f9c9c1a62763c35858358c6a44c0af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4a533a7b5f9c9c1a62763c35858358c6a44c0af"
      }
    ],
    "stats": {
      "total": 1727,
      "additions": 1155,
      "deletions": 572
    },
    "files": [
      {
        "sha": "0478bfc64625f13254c83767efb39ef57a78fd58",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -268,16 +268,33 @@ class CBitcoinAddress : public CBase58Data\n         return SetHash160(Hash160(vchPubKey));\n     }\n \n+    bool SetScriptHash160(const uint160& hash160)\n+    {\n+        SetData(fTestNet ? 112 : 1, &hash160, 20);\n+        return true;\n+    }\n+\n     bool IsValid() const\n     {\n         int nExpectedSize = 20;\n         bool fExpectTestNet = false;\n         switch(nVersion)\n         {\n             case 0:\n+                nExpectedSize = 20; // Hash of public key\n+                fExpectTestNet = false;\n+                break;\n+            case 1:\n+                nExpectedSize = 20; // OP_EVAL, hash of CScript\n+                fExpectTestNet = false;\n                 break;\n \n             case 111:\n+                nExpectedSize = 20;\n+                fExpectTestNet = true;\n+                break;\n+            case 112:\n+                nExpectedSize = 20;\n                 fExpectTestNet = true;\n                 break;\n \n@@ -286,6 +303,14 @@ class CBitcoinAddress : public CBase58Data\n         }\n         return fExpectTestNet == fTestNet && vchData.size() == nExpectedSize;\n     }\n+    bool IsScript() const\n+    {\n+        if (!IsValid())\n+            return false;\n+        if (fTestNet)\n+            return nVersion == 112;\n+        return nVersion == 1;\n+    }\n \n     CBitcoinAddress()\n     {"
      },
      {
        "sha": "af04c663300024b5e54b45f3cdccf8c6300e8533",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 70,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -661,7 +661,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     if (params.size() > 1)\n         nMinDepth = params[1].get_int();\n \n-    // Get the set of pub keys that have the label\n+    // Get the set of pub keys assigned to account\n     string strAccount = AccountFromValue(params[0]);\n     set<CBitcoinAddress> setAddress;\n     GetAccountAddresses(strAccount, setAddress);\n@@ -930,56 +930,30 @@ Value sendmany(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-Value sendmultisig(const Array& params, bool fHelp)\n+Value addmultisigaddress(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 4 || params.size() > 7)\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n     {\n-        string msg = \"sendmultisig <fromaccount> <type> <[\\\"key\\\",\\\"key\\\"]> <amount> [minconf=1] [comment] [comment-to]\\n\"\n-            \"<type> is one of: \\\"and\\\", \\\"or\\\", \\\"escrow\\\"\\n\"\n-            \"<keys> is an array of strings (in JSON array format); each key is a bitcoin address, hex or base58 public key\\n\"\n-            \"<amount> is a real and is rounded to the nearest 0.00000001\";\n-        if (pwalletMain->IsCrypted())\n-            msg += \"\\nrequires wallet passphrase to be set with walletpassphrase first\";\n+        string msg = \"addmultisigaddress <nrequired> <'[\\\"key\\\",\\\"key\\\"]'> [account]\\n\"\n+            \"Add a nrequired-to-sign multisignature address to the wallet\\\"\\n\"\n+            \"each key is a bitcoin address, hex or base58 public key\\n\"\n+            \"If [account] is specified, assign address to [account].\";\n         throw runtime_error(msg);\n     }\n \n-    string strAccount = AccountFromValue(params[0]);\n-    string strType = params[1].get_str();\n-    const Array& keys = params[2].get_array();\n-    int64 nAmount = AmountFromValue(params[3]);\n-    int nMinDepth = 1;\n-    if (params.size() > 4)\n-        nMinDepth = params[4].get_int();\n-\n-    CWalletTx wtx;\n-    wtx.strFromAccount = strAccount;\n-    if (params.size() > 5 && params[5].type() != null_type && !params[5].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[5].get_str();\n-    if (params.size() > 6 && params[6].type() != null_type && !params[6].get_str().empty())\n-        wtx.mapValue[\"to\"]      = params[6].get_str();\n-\n-    if (pwalletMain->IsLocked())\n-        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n-\n-    // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n-    if (nAmount > nBalance)\n-        throw JSONRPCError(-6, \"Account has insufficient funds\");\n+    int nRequired = params[0].get_int();\n+    const Array& keys = params[1].get_array();\n+    string strAccount;\n+    if (params.size() > 2)\n+        strAccount = AccountFromValue(params[2]);\n \n     // Gather public keys\n-    int nKeysNeeded = 0;\n-    if (strType == \"and\" || strType == \"or\")\n-        nKeysNeeded = 2;\n-    else if (strType == \"escrow\")\n-        nKeysNeeded = 3;\n-    else\n-        throw runtime_error(\"sendmultisig: <type> must be one of: and or and_or\");\n-    if (keys.size() != nKeysNeeded)\n+    if (keys.size() < nRequired)\n         throw runtime_error(\n-            strprintf(\"sendmultisig: wrong number of keys (got %d, need %d)\", keys.size(), nKeysNeeded));\n+            strprintf(\"addmultisigaddress: wrong number of keys (got %d, need at least %d)\", keys.size(), nRequired));\n     std::vector<CKey> pubkeys;\n-    pubkeys.resize(nKeysNeeded);\n-    for (int i = 0; i < nKeysNeeded; i++)\n+    pubkeys.resize(keys.size());\n+    for (int i = 0; i < keys.size(); i++)\n     {\n         const std::string& ks = keys[i].get_str();\n         if (ks.size() == 130) // hex public key\n@@ -997,32 +971,23 @@ Value sendmultisig(const Array& params, bool fHelp)\n             CBitcoinAddress address(ks);\n             if (!pwalletMain->GetKey(address, pubkeys[i]))\n                 throw runtime_error(\n-                    strprintf(\"sendmultisig: unknown address: %s\",ks.c_str()));\n+                    strprintf(\"addmultisigaddress: unknown address: %s\",ks.c_str()));\n         }\n     }\n \n-    // Send\n-    CScript scriptPubKey;\n-    if (strType == \"and\")\n-        scriptPubKey.SetMultisigAnd(pubkeys);\n-    else if (strType == \"or\")\n-        scriptPubKey.SetMultisigOr(pubkeys);\n-    else\n-        scriptPubKey.SetMultisigEscrow(pubkeys);\n+    // Construct using OP_EVAL\n+    CScript inner;\n+    inner.SetMultisig(nRequired, pubkeys);\n \n-    CReserveKey keyChange(pwalletMain);\n-    int64 nFeeRequired = 0;\n-    bool fCreated = pwalletMain->CreateTransaction(scriptPubKey, nAmount, wtx, keyChange, nFeeRequired);\n-    if (!fCreated)\n-    {\n-        if (nAmount + nFeeRequired > pwalletMain->GetBalance())\n-            throw JSONRPCError(-6, \"Insufficient funds\");\n-        throw JSONRPCError(-4, \"Transaction creation failed\");\n-    }\n-    if (!pwalletMain->CommitTransaction(wtx, keyChange))\n-        throw JSONRPCError(-4, \"Transaction commit failed\");\n+    uint160 scriptHash = Hash160(inner);\n+    CScript scriptPubKey;\n+    scriptPubKey.SetEval(inner);\n+    pwalletMain->AddCScript(scriptHash, inner);\n+    CBitcoinAddress address;\n+    address.SetScriptHash160(scriptHash);\n \n-    return wtx.GetHash().GetHex();\n+    pwalletMain->SetAddressBookName(address, strAccount);\n+    return address.ToString();\n }\n \n \n@@ -1694,6 +1659,24 @@ Value validateaddress(const Array& params, bool fHelp)\n             std::string strPubKey(vchPubKey.begin(), vchPubKey.end());\n             ret.push_back(Pair(\"pubkey58\", EncodeBase58(vchPubKey)));\n         }\n+        else if (pwalletMain->HaveCScript(address.GetHash160()))\n+        {\n+            ret.push_back(Pair(\"isscript\", true));\n+            CScript subscript;\n+            pwalletMain->GetCScript(address.GetHash160(), subscript);\n+            ret.push_back(Pair(\"ismine\", ::IsMine(*pwalletMain, subscript)));\n+            std::vector<CBitcoinAddress> addresses;\n+            txntype whichType;\n+            int nRequired;\n+            ExtractAddresses(subscript, pwalletMain, whichType, addresses, nRequired);\n+            ret.push_back(Pair(\"script\", GetTxnTypeName(whichType)));\n+            Array a;\n+            BOOST_FOREACH(const CBitcoinAddress& addr, addresses)\n+                a.push_back(addr.ToString());\n+            ret.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                ret.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n         else\n             ret.push_back(Pair(\"ismine\", false));\n         if (pwalletMain->mapAddressBook.count(address))\n@@ -1941,7 +1924,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"move\",                   &movecmd),\n     make_pair(\"sendfrom\",               &sendfrom),\n     make_pair(\"sendmany\",               &sendmany),\n-    make_pair(\"sendmultisig\",           &sendmultisig),\n+    make_pair(\"addmultisigaddress\",     &addmultisigaddress),\n     make_pair(\"gettransaction\",         &gettransaction),\n     make_pair(\"listtransactions\",       &listtransactions),\n     make_pair(\"signmessage\",           &signmessage),\n@@ -2583,16 +2566,15 @@ int CommandLineRPC(int argc, char *argv[])\n             params[1] = v.get_obj();\n         }\n         if (strMethod == \"sendmany\"                && n > 2) ConvertTo<boost::int64_t>(params[2]);\n-        if (strMethod == \"sendmultisig\"            && n > 2)\n+        if (strMethod == \"addmultisigaddress\"      && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+        if (strMethod == \"addmultisigaddress\"      && n > 1)\n         {\n-            string s = params[2].get_str();\n+            string s = params[1].get_str();\n             Value v;\n             if (!read_string(s, v) || v.type() != array_type)\n-                throw runtime_error(\"sendmultisig: type mismatch \"+s);\n-            params[2] = v.get_array();\n+                throw runtime_error(\"addmultisigaddress: type mismatch \"+s);\n+            params[1] = v.get_array();\n         }\n-        if (strMethod == \"sendmultisig\"            && n > 3) ConvertTo<double>(params[3]);\n-        if (strMethod == \"sendmultisig\"            && n > 4) ConvertTo<boost::int64_t>(params[4]);\n \n         // Execute\n         Object reply = CallRPC(strMethod, params);"
      },
      {
        "sha": "5c68104c5e87dc2a3d4bea83585a61a1f9cfd00b",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -934,6 +934,15 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 if (nMinVersion > VERSION)\n                     return DB_TOO_NEW;\n             }\n+            else if (strType == \"cscript\")\n+            {\n+                uint160 hash;\n+                ssKey >> hash;\n+                std::vector<unsigned char> script;\n+                ssValue >> script;\n+                if (!pwallet->LoadCScript(hash, script))\n+                    return DB_CORRUPT;\n+            }\n         }\n         pcursor->close();\n     }"
      },
      {
        "sha": "99dd88b491a0906cf151aafdb749b71ce1ae8014",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -420,6 +420,18 @@ class CWalletDB : public CDB\n         return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n     }\n \n+    bool ReadCScript(const uint160 &hash, std::vector<unsigned char>& data)\n+    {\n+        data.clear();\n+        return Read(std::make_pair(std::string(\"cscript\"), hash), data);\n+    }\n+\n+    bool WriteCScript(const uint160& hash, const std::vector<unsigned char>& data)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"cscript\"), hash), data, false);\n+    }\n+\n     bool WriteBestBlock(const CBlockLocator& locator)\n     {\n         nWalletDBUpdated++;"
      },
      {
        "sha": "67b118a4316071e335a8823287b63b493a756465",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -33,6 +33,36 @@ bool CBasicKeyStore::AddKey(const CKey& key)\n     return true;\n }\n \n+bool CBasicKeyStore::AddCScript(const uint160 &hash, const std::vector<unsigned char>& data)\n+{\n+    CRITICAL_BLOCK(cs_KeyStore)\n+        mapData[hash] = data;\n+    return true;\n+}\n+\n+bool CBasicKeyStore::HaveCScript(const uint160& hash) const\n+{\n+    bool result;\n+    CRITICAL_BLOCK(cs_KeyStore)\n+        result = (mapData.count(hash) > 0);\n+    return result;\n+}\n+\n+\n+bool CBasicKeyStore::GetCScript(const uint160 &hash, std::vector<unsigned char>& dataOut) const\n+{\n+    CRITICAL_BLOCK(cs_KeyStore)\n+    {\n+        DataMap::const_iterator mi = mapData.find(hash);\n+        if (mi != mapData.end())\n+        {\n+            dataOut = (*mi).second;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n bool CCryptoKeyStore::SetCrypted()\n {\n     CRITICAL_BLOCK(cs_KeyStore)"
      },
      {
        "sha": "9aaa0b932b471be6423c6ab3d5c4c3e289b2d3e2",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -28,17 +28,23 @@ class CKeyStore\n     // This may succeed even if GetKey fails (e.g., encrypted wallets)\n     virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n \n+    virtual bool AddCScript(const uint160 &hash, const std::vector<unsigned char>& data) =0;\n+    virtual bool HaveCScript(const uint160 &hash) const =0;\n+    virtual bool GetCScript(const uint160 &hash, std::vector<unsigned char>& dataOut) const =0;\n+\n     // Generate a new key, and add it to the store\n     virtual std::vector<unsigned char> GenerateNewKey();\n };\n \n typedef std::map<CBitcoinAddress, CSecret> KeyMap;\n+typedef std::map<uint160, std::vector<unsigned char> > DataMap;\n \n // Basic key store, that keeps keys in an address->secret map\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n+    DataMap mapData;\n \n public:\n     bool AddKey(const CKey& key);\n@@ -62,6 +68,9 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return false;\n     }\n+    virtual bool AddCScript(const uint160 &hash, const std::vector<unsigned char>& data);\n+    virtual bool HaveCScript(const uint160 &hash) const;\n+    virtual bool GetCScript(const uint160 &hash, std::vector<unsigned char>& dataOut) const;\n };\n \n typedef std::map<CBitcoinAddress, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;"
      },
      {
        "sha": "a795617b2e3723dda7f5eded82bc36f31879b383",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 171,
        "deletions": 59,
        "changes": 230,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -241,6 +241,65 @@ bool CTransaction::ReadFromDisk(COutPoint prevout)\n     return ReadFromDisk(txdb, prevout, txindex);\n }\n \n+bool CTransaction::IsStandard() const\n+{\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Biggest 'standard' txin is a 2-signature 2-of-3 escrow\n+        // in an OP_EVAL, which is 2 ~80-byte signatures, 3\n+        // ~65-byte public keys, plus a few script ops.\n+        if (txin.scriptSig.size() > 400)\n+            return error(\"nonstandard txin, size %d\\n\", txin.scriptSig.size());\n+        if (!txin.scriptSig.IsPushOnly())\n+            return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());\n+    }\n+    BOOST_FOREACH(const CTxOut& txout, vout)\n+        if (!::IsStandard(txout.scriptPubKey))\n+            return error(\"nonstandard txout: %s\", txout.scriptPubKey.ToString().c_str());\n+    return true;\n+}\n+\n+//\n+// Check transaction inputs, and make sure any\n+// OP_EVAL transactions are evaluating IsStandard scripts\n+//\n+// Why bother? To avoid denial-of-service attacks; an attacker\n+// can submit a standard DUP HASH... OP_EVAL transaction,\n+// which will get accepted into blocks. The script being\n+// EVAL'ed can be anything; an attacker could use a very\n+// expensive-to-check-upon-redemption script like:\n+//   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+//\n+bool CTransaction::IsStandardInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const\n+{\n+    if (fTestNet)\n+        return true; // Allow non-standard on testnet\n+\n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        assert(mapInputs.count(prevout.hash) > 0);\n+        CTransaction& txPrev = mapInputs[prevout.hash].second;\n+\n+        vector<vector<unsigned char> > vSolutions;\n+        txntype whichType;\n+        if (!Solver(txPrev.vout[vin[i].prevout.n].scriptPubKey, whichType, vSolutions))\n+            return false;\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            vector<vector<unsigned char> > stack;\n+            int nUnused;\n+            if (!EvalScript(stack, vin[i].scriptSig, *this, i, 0, nUnused))\n+                return false;\n+            const vector<unsigned char>& subscript = stack.back();\n+            if (!::IsStandard(CScript(subscript.begin(), subscript.end())))\n+                return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n \n \n int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n@@ -364,15 +423,6 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n     if ((int64)nLockTime > INT_MAX)\n         return error(\"AcceptToMemoryPool() : not accepting nLockTime beyond 2038 yet\");\n \n-    // Safety limits\n-    unsigned int nSize = ::GetSerializeSize(*this, SER_NETWORK);\n-    // Checking ECDSA signatures is a CPU bottleneck, so to avoid denial-of-service\n-    // attacks disallow transactions with more than one SigOp per 34 bytes.\n-    // 34 bytes because a TxOut is:\n-    //   20-byte address + 8 byte bitcoin amount + 5 bytes of ops + 1 byte script length\n-    if (GetSigOpCount() > nSize / 34 || nSize < 100)\n-        return error(\"AcceptToMemoryPool() : transaction with out-of-bounds SigOpCount\");\n-\n     // Rather not work on nonstandard transactions (unless -testnet)\n     if (!fTestNet && !IsStandard())\n         return error(\"AcceptToMemoryPool() : nonstandard transaction type\");\n@@ -416,15 +466,34 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n \n     if (fCheckInputs)\n     {\n-        // Check against previous transactions\n+        map<uint256, pair<CTxIndex, CTransaction> > mapInputs;\n         map<uint256, CTxIndex> mapUnused;\n+        if (!FetchInputs(txdb, mapUnused, false, false, mapInputs))\n+        {\n+            if (pfMissingInputs)\n+                *pfMissingInputs = true;\n+            return error(\"AcceptToMemoryPool() : FetchInputs failed %s\", hash.ToString().substr(0,10).c_str());\n+        }\n+\n+        // Check for non-standard OP_EVALs in inputs\n+        if (!IsStandardInputs(mapInputs))\n+            return error(\"AcceptToMemoryPool() : nonstandard transaction input\");\n+\n+        // Check against previous transactions\n         int64 nFees = 0;\n-        if (!ConnectInputs(txdb, mapUnused, CDiskTxPos(1,1,1), pindexBest, nFees, false, false))\n+        int nSigOps = 0;\n+        if (!ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, nFees, false, false, nSigOps))\n         {\n             if (pfMissingInputs)\n                 *pfMissingInputs = true;\n             return error(\"AcceptToMemoryPool() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n         }\n+        // Checking ECDSA signatures is a CPU bottleneck, so to avoid denial-of-service\n+        // attacks disallow transactions with more than one SigOp per 65 bytes.\n+        // 65 bytes because that is the minimum size of an ECDSA signature\n+        unsigned int nSize = ::GetSerializeSize(*this, SER_NETWORK);\n+        if (nSigOps > nSize / 65 || nSize < 100)\n+            return error(\"AcceptToMemoryPool() : transaction with out-of-bounds SigOpCount\");\n \n         // Don't accept it if it can't get into a block\n         if (nFees < GetMinFee(1000, true, true))\n@@ -821,8 +890,61 @@ bool CTransaction::DisconnectInputs(CTxDB& txdb)\n }\n \n \n-bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n-                                 CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int64 nMinFee)\n+bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTestPool,\n+                               bool fBlock, bool fMiner, map<uint256, pair<CTxIndex, CTransaction> >& inputsRet)\n+{\n+    if (IsCoinBase())\n+        return true; // Coinbase transactions have no inputs to fetch.\n+    \n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        if (inputsRet.count(prevout.hash))\n+            continue; // Got it already\n+\n+        // Read txindex\n+        CTxIndex& txindex = inputsRet[prevout.hash].first;\n+        bool fFound = true;\n+        if ((fBlock || fMiner) && mapTestPool.count(prevout.hash))\n+        {\n+            // Get txindex from current proposed changes\n+            txindex = mapTestPool.find(prevout.hash)->second;\n+        }\n+        else\n+        {\n+            // Read txindex from txdb\n+            fFound = txdb.ReadTxIndex(prevout.hash, txindex);\n+        }\n+        if (!fFound && (fBlock || fMiner))\n+            return fMiner ? false : error(\"FetchInputs() : %s prev tx %s index entry not found\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+\n+        // Read txPrev\n+        CTransaction& txPrev = inputsRet[prevout.hash].second;\n+        if (!fFound || txindex.pos == CDiskTxPos(1,1,1))\n+        {\n+            // Get prev tx from single transactions in memory\n+            CRITICAL_BLOCK(cs_mapTransactions)\n+            {\n+                if (!mapTransactions.count(prevout.hash))\n+                    return error(\"FetchInputs() : %s mapTransactions prev not found %s\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                txPrev = mapTransactions[prevout.hash];\n+            }\n+            if (!fFound)\n+                txindex.vSpent.resize(txPrev.vout.size());\n+        }\n+        else\n+        {\n+            // Get prev tx from disk\n+            if (!txPrev.ReadFromDisk(txindex.pos))\n+                return error(\"FetchInputs() : %s ReadFromDisk prev tx %s failed\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+        }\n+    }\n+    return true;\n+}\n+\n+bool CTransaction::ConnectInputs(map<uint256, pair<CTxIndex, CTransaction> > inputs,\n+                                 map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n+                                 CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int& nSigOpsRet, int64 nMinFee)\n {\n     // Take over previous transactions' spent pointers\n     // fBlock is true when this is called from AcceptBlock when a new best-block is added to the blockchain\n@@ -834,43 +956,9 @@ bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoo\n         for (int i = 0; i < vin.size(); i++)\n         {\n             COutPoint prevout = vin[i].prevout;\n-\n-            // Read txindex\n-            CTxIndex txindex;\n-            bool fFound = true;\n-            if ((fBlock || fMiner) && mapTestPool.count(prevout.hash))\n-            {\n-                // Get txindex from current proposed changes\n-                txindex = mapTestPool[prevout.hash];\n-            }\n-            else\n-            {\n-                // Read txindex from txdb\n-                fFound = txdb.ReadTxIndex(prevout.hash, txindex);\n-            }\n-            if (!fFound && (fBlock || fMiner))\n-                return fMiner ? false : error(\"ConnectInputs() : %s prev tx %s index entry not found\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n-\n-            // Read txPrev\n-            CTransaction txPrev;\n-            if (!fFound || txindex.pos == CDiskTxPos(1,1,1))\n-            {\n-                // Get prev tx from single transactions in memory\n-                CRITICAL_BLOCK(cs_mapTransactions)\n-                {\n-                    if (!mapTransactions.count(prevout.hash))\n-                        return error(\"ConnectInputs() : %s mapTransactions prev not found %s\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n-                    txPrev = mapTransactions[prevout.hash];\n-                }\n-                if (!fFound)\n-                    txindex.vSpent.resize(txPrev.vout.size());\n-            }\n-            else\n-            {\n-                // Get prev tx from disk\n-                if (!txPrev.ReadFromDisk(txindex.pos))\n-                    return error(\"ConnectInputs() : %s ReadFromDisk prev tx %s failed\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n-            }\n+            assert(inputs.count(prevout.hash) > 0);\n+            CTxIndex& txindex = inputs[prevout.hash].first;\n+            CTransaction& txPrev = inputs[prevout.hash].second;\n \n             if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())\n                 return DoS(100, error(\"ConnectInputs() : %s prevout.n out of range %d %d %d prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n@@ -886,7 +974,7 @@ bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoo\n             // still computed and checked, and any change will be caught at the next checkpoint.\n             if (!(fBlock && IsInitialBlockDownload()))\n                 // Verify signature\n-                if (!VerifySignature(txPrev, *this, i))\n+                if (!VerifySignature(txPrev, *this, i, nSigOpsRet))\n                     return DoS(100,error(\"ConnectInputs() : %s VerifySignature failed\", GetHash().ToString().substr(0,10).c_str()));\n \n             // Check for conflicts (double-spend)\n@@ -960,7 +1048,8 @@ bool CTransaction::ClientConnectInputs()\n                 return false;\n \n             // Verify signature\n-            if (!VerifySignature(txPrev, *this, i))\n+            int nUnused = 0;\n+            if (!VerifySignature(txPrev, *this, i, nUnused))\n                 return error(\"ConnectInputs() : VerifySignature failed\");\n \n             ///// this is redundant with the mapNextTx stuff, not sure which I want to get rid of\n@@ -1018,14 +1107,21 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n \n     map<uint256, CTxIndex> mapQueuedChanges;\n     int64 nFees = 0;\n+    int nSigOps = 0;\n     BOOST_FOREACH(CTransaction& tx, vtx)\n     {\n         CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n         nTxPos += ::GetSerializeSize(tx, SER_DISK);\n \n-        if (!tx.ConnectInputs(txdb, mapQueuedChanges, posThisTx, pindex, nFees, true, false))\n+        map<uint256, pair<CTxIndex, CTransaction> > mapInputs;\n+        if (!tx.FetchInputs(txdb, mapQueuedChanges, true, false, mapInputs))\n+            return false;\n+        if (!tx.ConnectInputs(mapInputs, mapQueuedChanges, posThisTx, pindex, nFees, true, false, nSigOps))\n             return false;\n+        if (nSigOps > MAX_BLOCK_SIGOPS)\n+            return DoS(100, error(\"ConnectBlock() : too many sigops\"));\n     }\n+\n     // Write queued txindex changes\n     for (map<uint256, CTxIndex>::iterator mi = mapQueuedChanges.begin(); mi != mapQueuedChanges.end(); ++mi)\n     {\n@@ -1286,8 +1382,21 @@ bool CBlock::CheckBlock() const\n         if (!tx.CheckTransaction())\n             return DoS(tx.nDoS, error(\"CheckBlock() : CheckTransaction failed\"));\n \n-    // Check that it's not full of nonstandard transactions\n-    if (GetSigOpCount() > MAX_BLOCK_SIGOPS)\n+    // This code should be removed when a compatibility-breaking block chain split has passed.\n+    // Compatibility check for old clients that counted sigops differently:\n+    int nSigOps = 0;\n+    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    {\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        {\n+            nSigOps += txin.scriptSig.GetSigOpCount();\n+        }\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        {\n+            nSigOps += txout.scriptPubKey.GetSigOpCount();\n+        }\n+    }\n+    if (nSigOps > MAX_BLOCK_SIGOPS)\n         return DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n \n     // Check merkleroot\n@@ -2822,9 +2931,6 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK);\n             if (nBlockSize + nTxSize >= MAX_BLOCK_SIZE_GEN)\n                 continue;\n-            int nTxSigOps = tx.GetSigOpCount();\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n-                continue;\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n@@ -2833,7 +2939,13 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             // Connecting shouldn't fail due to dependency on other memory pool transactions\n             // because we're already processing them in order of dependency\n             map<uint256, CTxIndex> mapTestPoolTmp(mapTestPool);\n-            if (!tx.ConnectInputs(txdb, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, nFees, false, true, nMinFee))\n+            map<uint256, pair<CTxIndex, CTransaction> > mapInputs;\n+            if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs))\n+                continue;\n+            int nTxSigOps = 0;\n+            if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, nFees, false, true, nTxSigOps, nMinFee))\n+                continue;\n+            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n             swap(mapTestPool, mapTestPoolTmp);\n "
      },
      {
        "sha": "ddbcbdbb3609a8915e9bebda81ee84e93c855a17",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 29,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -489,26 +489,8 @@ class CTransaction\n         return (vin.size() == 1 && vin[0].prevout.IsNull());\n     }\n \n-    int GetSigOpCount() const\n-    {\n-        int n = 0;\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-            n += txin.scriptSig.GetSigOpCount();\n-        BOOST_FOREACH(const CTxOut& txout, vout)\n-            n += txout.scriptPubKey.GetSigOpCount();\n-        return n;\n-    }\n-\n-    bool IsStandard() const\n-    {\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-            if (!txin.scriptSig.IsPushOnly())\n-                return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());\n-        BOOST_FOREACH(const CTxOut& txout, vout)\n-            if (!::IsStandard(txout.scriptPubKey))\n-                return error(\"nonstandard txout: %s\", txout.scriptPubKey.ToString().c_str());\n-        return true;\n-    }\n+    bool IsStandard() const;\n+    bool IsStandardInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const;\n \n     int64 GetValueOut() const\n     {\n@@ -636,8 +618,11 @@ class CTransaction\n     bool ReadFromDisk(CTxDB& txdb, COutPoint prevout);\n     bool ReadFromDisk(COutPoint prevout);\n     bool DisconnectInputs(CTxDB& txdb);\n-    bool ConnectInputs(CTxDB& txdb, std::map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n-                       CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int64 nMinFee=0);\n+    bool FetchInputs(CTxDB& txdb, const std::map<uint256, CTxIndex>& mapTestPool,\n+                     bool fBlock, bool fMiner, std::map<uint256, std::pair<CTxIndex, CTransaction> >& inputsRet);\n+    bool ConnectInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > inputs,\n+                       std::map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n+                       CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int& nSigOpsRet, int64 nMinFee=0);\n     bool ClientConnectInputs();\n     bool CheckTransaction() const;\n     bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true, bool* pfMissingInputs=NULL);\n@@ -846,13 +831,6 @@ class CBlock\n         return (int64)nTime;\n     }\n \n-    int GetSigOpCount() const\n-    {\n-        int n = 0;\n-        BOOST_FOREACH(const CTransaction& tx, vtx)\n-            n += tx.GetSigOpCount();\n-        return n;\n-    }\n \n \n     uint256 BuildMerkleTree() const"
      },
      {
        "sha": "c103d57510e279b96851b2af6817ff2f59d6428a",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 488,
        "deletions": 168,
        "changes": 656,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -70,20 +70,186 @@ static inline void popstack(vector<valtype>& stack)\n }\n \n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+const char* GetTxnTypeName(txntype t)\n+{\n+    switch (t)\n+    {\n+    case TX_NONSTANDARD: return \"nonstandard\";\n+    case TX_PUBKEY: return \"pubkey\";\n+    case TX_PUBKEYHASH: return \"pubkeyhash\";\n+    case TX_SCRIPTHASH: return \"scripthash\";\n+    case TX_MULTISIG: return \"multisig\";\n+    }\n+    return NULL;\n+}\n+\n+\n+const char* GetOpName(opcodetype opcode)\n+{\n+    switch (opcode)\n+    {\n+    // push value\n+    case OP_0                      : return \"0\";\n+    case OP_PUSHDATA1              : return \"OP_PUSHDATA1\";\n+    case OP_PUSHDATA2              : return \"OP_PUSHDATA2\";\n+    case OP_PUSHDATA4              : return \"OP_PUSHDATA4\";\n+    case OP_1NEGATE                : return \"-1\";\n+    case OP_RESERVED               : return \"OP_RESERVED\";\n+    case OP_1                      : return \"1\";\n+    case OP_2                      : return \"2\";\n+    case OP_3                      : return \"3\";\n+    case OP_4                      : return \"4\";\n+    case OP_5                      : return \"5\";\n+    case OP_6                      : return \"6\";\n+    case OP_7                      : return \"7\";\n+    case OP_8                      : return \"8\";\n+    case OP_9                      : return \"9\";\n+    case OP_10                     : return \"10\";\n+    case OP_11                     : return \"11\";\n+    case OP_12                     : return \"12\";\n+    case OP_13                     : return \"13\";\n+    case OP_14                     : return \"14\";\n+    case OP_15                     : return \"15\";\n+    case OP_16                     : return \"16\";\n+\n+    // control\n+    case OP_NOP                    : return \"OP_NOP\";\n+    case OP_VER                    : return \"OP_VER\";\n+    case OP_IF                     : return \"OP_IF\";\n+    case OP_NOTIF                  : return \"OP_NOTIF\";\n+    case OP_VERIF                  : return \"OP_VERIF\";\n+    case OP_VERNOTIF               : return \"OP_VERNOTIF\";\n+    case OP_ELSE                   : return \"OP_ELSE\";\n+    case OP_ENDIF                  : return \"OP_ENDIF\";\n+    case OP_VERIFY                 : return \"OP_VERIFY\";\n+    case OP_RETURN                 : return \"OP_RETURN\";\n+\n+    // stack ops\n+    case OP_TOALTSTACK             : return \"OP_TOALTSTACK\";\n+    case OP_FROMALTSTACK           : return \"OP_FROMALTSTACK\";\n+    case OP_2DROP                  : return \"OP_2DROP\";\n+    case OP_2DUP                   : return \"OP_2DUP\";\n+    case OP_3DUP                   : return \"OP_3DUP\";\n+    case OP_2OVER                  : return \"OP_2OVER\";\n+    case OP_2ROT                   : return \"OP_2ROT\";\n+    case OP_2SWAP                  : return \"OP_2SWAP\";\n+    case OP_IFDUP                  : return \"OP_IFDUP\";\n+    case OP_DEPTH                  : return \"OP_DEPTH\";\n+    case OP_DROP                   : return \"OP_DROP\";\n+    case OP_DUP                    : return \"OP_DUP\";\n+    case OP_NIP                    : return \"OP_NIP\";\n+    case OP_OVER                   : return \"OP_OVER\";\n+    case OP_PICK                   : return \"OP_PICK\";\n+    case OP_ROLL                   : return \"OP_ROLL\";\n+    case OP_ROT                    : return \"OP_ROT\";\n+    case OP_SWAP                   : return \"OP_SWAP\";\n+    case OP_TUCK                   : return \"OP_TUCK\";\n+\n+    // splice ops\n+    case OP_CAT                    : return \"OP_CAT\";\n+    case OP_SUBSTR                 : return \"OP_SUBSTR\";\n+    case OP_LEFT                   : return \"OP_LEFT\";\n+    case OP_RIGHT                  : return \"OP_RIGHT\";\n+    case OP_SIZE                   : return \"OP_SIZE\";\n+\n+    // bit logic\n+    case OP_INVERT                 : return \"OP_INVERT\";\n+    case OP_AND                    : return \"OP_AND\";\n+    case OP_OR                     : return \"OP_OR\";\n+    case OP_XOR                    : return \"OP_XOR\";\n+    case OP_EQUAL                  : return \"OP_EQUAL\";\n+    case OP_EQUALVERIFY            : return \"OP_EQUALVERIFY\";\n+    case OP_RESERVED1              : return \"OP_RESERVED1\";\n+    case OP_RESERVED2              : return \"OP_RESERVED2\";\n+\n+    // numeric\n+    case OP_1ADD                   : return \"OP_1ADD\";\n+    case OP_1SUB                   : return \"OP_1SUB\";\n+    case OP_2MUL                   : return \"OP_2MUL\";\n+    case OP_2DIV                   : return \"OP_2DIV\";\n+    case OP_NEGATE                 : return \"OP_NEGATE\";\n+    case OP_ABS                    : return \"OP_ABS\";\n+    case OP_NOT                    : return \"OP_NOT\";\n+    case OP_0NOTEQUAL              : return \"OP_0NOTEQUAL\";\n+    case OP_ADD                    : return \"OP_ADD\";\n+    case OP_SUB                    : return \"OP_SUB\";\n+    case OP_MUL                    : return \"OP_MUL\";\n+    case OP_DIV                    : return \"OP_DIV\";\n+    case OP_MOD                    : return \"OP_MOD\";\n+    case OP_LSHIFT                 : return \"OP_LSHIFT\";\n+    case OP_RSHIFT                 : return \"OP_RSHIFT\";\n+    case OP_BOOLAND                : return \"OP_BOOLAND\";\n+    case OP_BOOLOR                 : return \"OP_BOOLOR\";\n+    case OP_NUMEQUAL               : return \"OP_NUMEQUAL\";\n+    case OP_NUMEQUALVERIFY         : return \"OP_NUMEQUALVERIFY\";\n+    case OP_NUMNOTEQUAL            : return \"OP_NUMNOTEQUAL\";\n+    case OP_LESSTHAN               : return \"OP_LESSTHAN\";\n+    case OP_GREATERTHAN            : return \"OP_GREATERTHAN\";\n+    case OP_LESSTHANOREQUAL        : return \"OP_LESSTHANOREQUAL\";\n+    case OP_GREATERTHANOREQUAL     : return \"OP_GREATERTHANOREQUAL\";\n+    case OP_MIN                    : return \"OP_MIN\";\n+    case OP_MAX                    : return \"OP_MAX\";\n+    case OP_WITHIN                 : return \"OP_WITHIN\";\n+\n+    // crypto\n+    case OP_RIPEMD160              : return \"OP_RIPEMD160\";\n+    case OP_SHA1                   : return \"OP_SHA1\";\n+    case OP_SHA256                 : return \"OP_SHA256\";\n+    case OP_HASH160                : return \"OP_HASH160\";\n+    case OP_HASH256                : return \"OP_HASH256\";\n+    case OP_CODESEPARATOR          : return \"OP_CODESEPARATOR\";\n+    case OP_CHECKSIG               : return \"OP_CHECKSIG\";\n+    case OP_CHECKSIGVERIFY         : return \"OP_CHECKSIGVERIFY\";\n+    case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n+    case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n+\n+    // meta\n+    case OP_EVAL                   : return \"OP_EVAL\";\n+\n+    // expanson\n+    case OP_NOP2                   : return \"OP_NOP2\";\n+    case OP_NOP3                   : return \"OP_NOP3\";\n+    case OP_NOP4                   : return \"OP_NOP4\";\n+    case OP_NOP5                   : return \"OP_NOP5\";\n+    case OP_NOP6                   : return \"OP_NOP6\";\n+    case OP_NOP7                   : return \"OP_NOP7\";\n+    case OP_NOP8                   : return \"OP_NOP8\";\n+    case OP_NOP9                   : return \"OP_NOP9\";\n+    case OP_NOP10                  : return \"OP_NOP10\";\n+\n+\n+\n+    // template matching params\n+    case OP_SCRIPTHASH             : return \"OP_SCRIPTHASH\";\n+    case OP_PUBKEYHASH             : return \"OP_PUBKEYHASH\";\n+    case OP_PUBKEY                 : return \"OP_PUBKEY\";\n+\n+    case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n+    default:\n+        return \"OP_UNKNOWN\";\n+    }\n+}\n+\n+\n+//\n+// Returns true if script is valid.\n+//\n+bool EvalScriptInner(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType,\n+                     CScript::const_iterator pbegincodehash, CScript::const_iterator pendcodehash, int& nOpCount, int& nSigOpCount, int nRecurseDepth)\n {\n     CAutoBN_CTX pctx;\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n-    CScript::const_iterator pbegincodehash = script.begin();\n     opcodetype opcode;\n     valtype vchPushValue;\n     vector<bool> vfExec;\n     vector<valtype> altstack;\n     if (script.size() > 10000)\n         return false;\n-    int nOpCount = 0;\n \n+    // Limit OP_EVAL recursion\n+    if (nRecurseDepth > 2)\n+        return false;\n \n     try\n     {\n@@ -155,7 +321,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 // Control\n                 //\n                 case OP_NOP:\n-                case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 break;\n \n@@ -751,12 +917,13 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     //PrintHex(vchPubKey.begin(), vchPubKey.end(), \"pubkey: %s\\n\");\n \n                     // Subset of script starting at the most recent codeseparator\n-                    CScript scriptCode(pbegincodehash, pend);\n+                    CScript scriptCode(pbegincodehash, pendcodehash);\n \n                     // Drop the signature, since there's no way for a signature to sign itself\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType);\n+                    nSigOpCount++;\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -800,7 +967,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                         return false;\n \n                     // Subset of script starting at the most recent codeseparator\n-                    CScript scriptCode(pbegincodehash, pend);\n+                    CScript scriptCode(pbegincodehash, pendcodehash);\n \n                     // Drop the signatures, since there's no way for a signature to sign itself\n                     for (int k = 0; k < nSigsCount; k++)\n@@ -823,6 +990,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                         }\n                         ikey++;\n                         nKeysCount--;\n+                        nSigOpCount++;\n \n                         // If there are more signatures left than keys left,\n                         // then too many signatures have failed\n@@ -844,6 +1012,26 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 }\n                 break;\n \n+                case OP_EVAL:\n+                {\n+                    // Evaluate the top item on the stack as a Script\n+                    // [serialized script ] -- [result(s) of executing script]\n+                    if (stack.size() < 1)\n+                        return false;\n+                    valtype& vchScript = stacktop(-1);\n+                    CScript subscript(vchScript.begin(), vchScript.end());\n+                    popstack(stack);\n+                    \n+                    // Codeseparators not allowed\n+                    if (subscript.Find(OP_CODESEPARATOR))\n+                        return false;\n+\n+                    if (!EvalScriptInner(stack, subscript, txTo, nIn, nHashType,\n+                                         pbegincodehash, pendcodehash, nOpCount, nSigOpCount, nRecurseDepth++))\n+                        return false;\n+                }\n+                break;\n+\n                 default:\n                     return false;\n             }\n@@ -865,6 +1053,17 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n     return true;\n }\n \n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script,\n+                const CTransaction& txTo, unsigned int nIn, int nHashType, int& nSigOpCountRet)\n+{\n+    CScript::const_iterator pbegincodehash = script.begin();\n+    CScript::const_iterator pendcodehash = script.end();\n+\n+    int nOpCount = 0;\n+    return EvalScriptInner(stack, script, txTo, nIn, nHashType, pbegincodehash, pendcodehash,\n+                           nOpCount, nSigOpCountRet, 0);\n+}\n+\n \n \n \n@@ -964,38 +1163,35 @@ bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CSc\n \n \n //\n-// Returns lists of public keys (or public key hashes), any one of which can\n-// satisfy scriptPubKey\n+// Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n //\n-bool Solver(const CScript& scriptPubKey, vector<vector<pair<opcodetype, valtype> > >& vSolutionsRet)\n+bool Solver(const CScript& scriptPubKey, txntype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)\n {\n     // Templates\n-    static vector<CScript> vTemplates;\n-    if (vTemplates.empty())\n+    static map<txntype, CScript> mTemplates;\n+    if (mTemplates.empty())\n     {\n         // Standard tx, sender provides pubkey, receiver adds signature\n-        vTemplates.push_back(CScript() << OP_PUBKEY << OP_CHECKSIG);\n+        mTemplates.insert(make_pair(TX_PUBKEY, CScript() << OP_PUBKEY << OP_CHECKSIG));\n \n         // Bitcoin address tx, sender provides hash of pubkey, receiver provides signature and pubkey\n-        vTemplates.push_back(CScript() << OP_DUP << OP_HASH160 << OP_PUBKEYHASH << OP_EQUALVERIFY << OP_CHECKSIG);\n-\n-        // Sender provides two pubkeys, receivers provides two signatures\n-        vTemplates.push_back(CScript() << OP_2 << OP_PUBKEY << OP_PUBKEY << OP_2 << OP_CHECKMULTISIG);\n+        mTemplates.insert(make_pair(TX_PUBKEYHASH, CScript() << OP_DUP << OP_HASH160 << OP_PUBKEYHASH << OP_EQUALVERIFY << OP_CHECKSIG));\n \n-        // Sender provides two pubkeys, receivers provides one of two signatures\n-        vTemplates.push_back(CScript() << OP_1 << OP_PUBKEY << OP_PUBKEY << OP_2 << OP_CHECKMULTISIG);\n+        // Sender provides N pubkeys, receivers provides M signatures\n+        mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n \n-        // Sender provides three pubkeys, receiver provides 2 of 3 signatures.\n-        vTemplates.push_back(CScript() << OP_2 << OP_PUBKEY << OP_PUBKEY << OP_PUBKEY << OP_3 << OP_CHECKMULTISIG);\n+        // Sender provides script hash, receiver provides script and\n+        // as many signatures as required to satisfy script\n+        mTemplates.insert(make_pair(TX_SCRIPTHASH, CScript() << OP_DUP << OP_HASH160 << OP_SCRIPTHASH << OP_EQUALVERIFY << OP_EVAL));\n     }\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    BOOST_FOREACH(const CScript& script2, vTemplates)\n+    BOOST_FOREACH(const PAIRTYPE(txntype, CScript)& tplate, mTemplates)\n     {\n+        const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();\n \n-        vector<pair<opcodetype, valtype> > currentSolution;\n         opcodetype opcode1, opcode2;\n         vector<unsigned char> vch1, vch2;\n \n@@ -1006,218 +1202,333 @@ bool Solver(const CScript& scriptPubKey, vector<vector<pair<opcodetype, valtype>\n         {\n             if (pc1 == script1.end() && pc2 == script2.end())\n             {\n-                return !vSolutionsRet.empty();\n+                // Found a match\n+                typeRet = tplate.first;\n+                if (typeRet == TX_MULTISIG)\n+                {\n+                    // Additional checks for TX_MULTISIG:\n+                    unsigned char m = vSolutionsRet.front()[0];\n+                    unsigned char n = vSolutionsRet.back()[0];\n+                    if (m < 1 || n < 1 || m > n || vSolutionsRet.size()-2 != n)\n+                        return false;\n+                }\n+                return true;\n             }\n             if (!script1.GetOp(pc1, opcode1, vch1))\n                 break;\n             if (!script2.GetOp(pc2, opcode2, vch2))\n                 break;\n+\n+            // Template matching opcodes:\n+            if (opcode2 == OP_PUBKEYS)\n+            {\n+                while (vch1.size() >= 33 && vch1.size() <= 120)\n+                {\n+                    vSolutionsRet.push_back(vch1);\n+                    if (!script1.GetOp(pc1, opcode1, vch1))\n+                        break;\n+                }\n+                if (!script2.GetOp(pc2, opcode2, vch2))\n+                    break;\n+                // Normal situation is to fall through\n+                // to other if/else statments\n+            }\n+\n             if (opcode2 == OP_PUBKEY)\n             {\n                 if (vch1.size() < 33 || vch1.size() > 120)\n                     break;\n-                currentSolution.push_back(make_pair(opcode2, vch1));\n+                vSolutionsRet.push_back(vch1);\n             }\n             else if (opcode2 == OP_PUBKEYHASH)\n             {\n                 if (vch1.size() != sizeof(uint160))\n                     break;\n-                currentSolution.push_back(make_pair(opcode2, vch1));\n+                vSolutionsRet.push_back(vch1);\n             }\n-            else if (opcode2 == OP_CHECKSIG)\n+            else if (opcode2 == OP_SCRIPTHASH)\n             {\n-                vSolutionsRet.push_back(currentSolution);\n-                currentSolution.clear();\n+                if (vch1.size() != sizeof(uint160))\n+                    break;\n+                vSolutionsRet.push_back(vch1);\n             }\n-            else if (opcode2 == OP_CHECKMULTISIG)\n-            {   // Dig out the \"m\" from before the pubkeys:\n-                CScript::const_iterator it = script2.begin();\n-                opcodetype op_m;\n-                script2.GetOp(it, op_m, vch1);\n-                int m = CScript::DecodeOP_N(op_m);\n-                int n = currentSolution.size();\n-\n-                if (m == 2 && n == 2)\n+            else if (opcode2 == OP_SMALLINTEGER)\n+            {   // Single-byte small integer pushed onto vSolutions\n+                if (opcode1 == OP_0 ||\n+                    (opcode1 >= OP_1 && opcode1 <= OP_16))\n                 {\n-                    vSolutionsRet.push_back(currentSolution);\n-                    currentSolution.clear();\n-                }\n-                else if (m == 1 && n == 2)\n-                { // 2 solutions: either first key or second\n-                    for (int i = 0; i < 2; i++)\n-                    {\n-                        vector<pair<opcodetype, valtype> > s;\n-                        s.push_back(currentSolution[i]);\n-                        vSolutionsRet.push_back(s);\n-                    }\n-                    currentSolution.clear();\n-                }\n-                else if (m == 2 && n == 3)\n-                { // 3 solutions: any pair\n-                    for (int i = 0; i < 2; i++)\n-                        for (int j = i+1; j < 3; j++)\n-                        {\n-                            vector<pair<opcodetype, valtype> > s;\n-                            s.push_back(currentSolution[i]);\n-                            s.push_back(currentSolution[j]);\n-                            vSolutionsRet.push_back(s);\n-                        }\n-                    currentSolution.clear();\n+                    char n = (char)CScript::DecodeOP_N(opcode1);\n+                    vSolutionsRet.push_back(valtype(1, n));\n                 }\n+                else\n+                    break;\n             }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {\n+                // Others must match exactly\n                 break;\n             }\n         }\n     }\n \n     vSolutionsRet.clear();\n+    typeRet = TX_NONSTANDARD;\n     return false;\n }\n \n \n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType, CScript& scriptSigRet)\n+bool Sign1(const CBitcoinAddress& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n {\n-    scriptSigRet.clear();\n+    CKey key;\n+    if (!keystore.GetKey(address, key))\n+        return false;\n \n-    vector<vector<pair<opcodetype, valtype> > > vSolutions;\n-    if (!Solver(scriptPubKey, vSolutions))\n+    vector<unsigned char> vchSig;\n+    if (!key.Sign(hash, vchSig))\n         return false;\n+    vchSig.push_back((unsigned char)nHashType);\n+    scriptSigRet << vchSig;\n \n-    // See if we have all the keys for any of the solutions:\n-    int whichSolution = -1;\n-    for (int i = 0; i < vSolutions.size(); i++)\n-    {\n-        int keysFound = 0;\n-        CScript scriptSig;\n+    return true;\n+}\n \n-        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolutions[i])\n-        {\n-            if (item.first == OP_PUBKEY)\n-            {\n-                const valtype& vchPubKey = item.second;\n-                CKey key;\n-                vector<unsigned char> vchSig;\n-                if (keystore.GetKey(Hash160(vchPubKey), key) && key.GetPubKey() == vchPubKey\n-                    && hash != 0 && key.Sign(hash, vchSig))\n-                {\n-                    vchSig.push_back((unsigned char)nHashType);\n-                    scriptSig << vchSig;\n-                    ++keysFound;\n-                }\n-            }\n-            else if (item.first == OP_PUBKEYHASH)\n-            {\n-                CKey key;\n-                vector<unsigned char> vchSig;\n-                if (keystore.GetKey(uint160(item.second), key) \n-                    && hash != 0 && key.Sign(hash, vchSig))\n-                {\n-                    vchSig.push_back((unsigned char)nHashType);\n-                    scriptSig << vchSig << key.GetPubKey();\n-                    ++keysFound;\n-                }\n-            }\n-        }\n-        if (keysFound == vSolutions[i].size())\n+bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+{\n+    int nSigned = 0;\n+    int nRequired = multisigdata.front()[0];\n+    for (vector<valtype>::const_iterator it = multisigdata.begin()+1; it != multisigdata.begin()+multisigdata.size()-1; it++)\n+    {\n+        const valtype& pubkey = *it;\n+        CBitcoinAddress address;\n+        address.SetPubKey(pubkey);\n+        if (Sign1(address, keystore, hash, nHashType, scriptSigRet))\n         {\n-            whichSolution = i;\n-            scriptSigRet = scriptSig;\n-            break;\n+            ++nSigned;\n+            if (nSigned == nRequired) break;\n         }\n     }\n-    if (whichSolution == -1)\n+    return nSigned==nRequired;\n+}\n+\n+//\n+// Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n+// Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed).\n+// Returns true if scriptPubKey could be completely satisified.\n+//\n+bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType, CScript& scriptSigRet)\n+{\n+    scriptSigRet.clear();\n+\n+    txntype whichType;\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    // CHECKMULTISIG bug workaround:\n-    if (vSolutions.size() != 1 ||\n-        vSolutions[0].size() != 1)\n+    CBitcoinAddress address;\n+    valtype subscript;\n+    switch (whichType)\n     {\n-        scriptSigRet.insert(scriptSigRet.begin(), OP_0);\n+    case TX_NONSTANDARD:\n+        return false;\n+    case TX_PUBKEY:\n+        address.SetPubKey(vSolutions[0]);\n+        return Sign1(address, keystore, hash, nHashType, scriptSigRet);\n+    case TX_PUBKEYHASH:\n+        address.SetHash160(uint160(vSolutions[0]));\n+        if (!Sign1(address, keystore, hash, nHashType, scriptSigRet))\n+            return false;\n+        else\n+        {\n+            valtype vch;\n+            keystore.GetPubKey(address, vch);\n+            scriptSigRet << vch;\n+        }\n+        break;\n+    case TX_SCRIPTHASH:\n+        if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n+            return false;\n+        if (!Solver(keystore, CScript(subscript.begin(), subscript.end()), hash, nHashType, scriptSigRet))\n+            return false;\n+        if (hash != 0)\n+            scriptSigRet << subscript; // signatures AND serialized script\n+        break;\n+    case TX_MULTISIG:\n+        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n+        return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n     }\n-\n     return true;\n }\n \n \n bool IsStandard(const CScript& scriptPubKey)\n {\n-    vector<vector<pair<opcodetype, valtype> > > vSolutions;\n-    return Solver(scriptPubKey, vSolutions);\n+    vector<valtype> vSolutions;\n+    txntype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n }\n \n \n+int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n+{\n+    int nResult = 0;\n+    BOOST_FOREACH(const valtype& pubkey, pubkeys)\n+    {\n+        CBitcoinAddress address;\n+        address.SetPubKey(pubkey);\n+        if (keystore.HaveKey(address))\n+            ++nResult;\n+    }\n+    return nResult;\n+}\n+\n bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n-    vector<vector<pair<opcodetype, valtype> > > vSolutions;\n-    if (!Solver(scriptPubKey, vSolutions))\n+    vector<valtype> vSolutions;\n+    txntype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    int keysFound = 0;\n-    int keysRequired = 0;\n-    for (int i = 0; i < vSolutions.size(); i++)\n+    CBitcoinAddress address;\n+    switch (whichType)\n     {\n-        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolutions[i])\n-        {\n-            ++keysRequired;\n-            if (item.first == OP_PUBKEY)\n-            {\n-                const valtype& vchPubKey = item.second;\n-                vector<unsigned char> vchPubKeyFound;\n-                if (keystore.GetPubKey(Hash160(vchPubKey), vchPubKeyFound) && vchPubKeyFound == vchPubKey)\n-                    ++keysFound;\n-            }\n-            else if (item.first == OP_PUBKEYHASH)\n-            {\n-                if (keystore.HaveKey(uint160(item.second)))\n-                    ++keysFound;\n-            }\n-        }\n+    case TX_NONSTANDARD:\n+        return false;\n+    case TX_PUBKEY:\n+        address.SetPubKey(vSolutions[0]);\n+        return keystore.HaveKey(address);\n+    case TX_PUBKEYHASH:\n+        address.SetHash160(uint160(vSolutions[0]));\n+        return keystore.HaveKey(address);\n+    case TX_SCRIPTHASH:\n+    {\n+        valtype subscript;\n+        if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n+            return false;\n+        return IsMine(keystore, CScript(subscript.begin(), subscript.end()));\n     }\n-\n-    // Only consider transactions \"mine\" if we own ALL the\n-    // keys involved. multi-signature transactions that are\n-    // partially owned (somebody else has a key that can spend\n-    // them) enable spend-out-from-under-you attacks, especially\n-    // for shared-wallet situations.\n-    return (keysFound == keysRequired);\n+    case TX_MULTISIG:\n+    {\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        return HaveKeys(vSolutions, keystore);\n+    }\n+    }\n+    return false;\n }\n \n bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n {\n-    vector<vector<pair<opcodetype, valtype> > > vSolutions;\n-    if (!Solver(scriptPubKey, vSolutions))\n+    vector<valtype> vSolutions;\n+    txntype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    for (int i = 0; i < vSolutions.size(); i++)\n+    if (whichType == TX_PUBKEY)\n     {\n-        if (vSolutions[i].size() != 1)\n-            continue; // Can't return more than one address...\n-\n-        PAIRTYPE(opcodetype, valtype)& item = vSolutions[i][0];\n-        if (item.first == OP_PUBKEY)\n-            addressRet.SetPubKey(item.second);\n-        else if (item.first == OP_PUBKEYHASH)\n-            addressRet.SetHash160((uint160)item.second);\n-        if (keystore == NULL || keystore->HaveKey(addressRet))\n-            return true;\n+        addressRet.SetPubKey(vSolutions[0]);\n+        return true;\n     }\n+    else if (whichType == TX_PUBKEYHASH)\n+    {\n+        addressRet.SetHash160(uint160(vSolutions[0]));\n+        return true;\n+    }\n+    else if (whichType == TX_SCRIPTHASH)\n+    {\n+        addressRet.SetScriptHash160(uint160(vSolutions[0]));\n+        return true;\n+    }\n+    // Multisig txns have more than one address...\n     return false;\n }\n \n+bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* keystore, txntype& typeRet, vector<CBitcoinAddress>& addressRet, int& nRequiredRet)\n+{\n+    addressRet.clear();\n+    typeRet = TX_NONSTANDARD;\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, typeRet, vSolutions))\n+        return false;\n \n+    if (typeRet == TX_MULTISIG)\n+    {\n+        nRequiredRet = vSolutions.front()[0];\n+        int n = vSolutions.back()[0];\n+        for (vector<valtype>::const_iterator it = vSolutions.begin()+1; it != vSolutions.begin()+vSolutions.size()-1; it++)\n+        {\n+            CBitcoinAddress address;\n+            address.SetPubKey(*it);\n+            addressRet.push_back(address);\n+        }\n+    }\n+    else\n+    {\n+        nRequiredRet = 1;\n+        CBitcoinAddress address;\n+        if (typeRet == TX_PUBKEYHASH)\n+            address.SetHash160(uint160(vSolutions.front()));\n+        else if (typeRet == TX_SCRIPTHASH)\n+            address.SetScriptHash160(uint160(vSolutions.front()));\n+        else if (typeRet == TX_PUBKEY)\n+            address.SetPubKey(vSolutions.front());\n+        addressRet.push_back(address);\n+    }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+    return true;\n+}\n+\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType)\n {\n     vector<vector<unsigned char> > stack;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, nHashType))\n+    if (!EvalScript(stack, scriptSig, txTo, nIn, nHashType, nSigOpCountRet))\n         return false;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, nHashType))\n+    if (!EvalScript(stack, scriptPubKey, txTo, nIn, nHashType, nSigOpCountRet))\n         return false;\n     if (stack.empty())\n         return false;\n-    return CastToBool(stack.back());\n+    bool fResult = CastToBool(stack.back());\n+\n+    // This code should be removed when a compatibility-breaking block chain split has passed.\n+    // Special check for OP_EVAL backwards-compatibility: if scriptPubKey or scriptSig contains\n+    // OP_EVAL, then result must be identical if OP_EVAL is treated as a no-op:\n+    if (scriptSig.Find(OP_EVAL)+scriptPubKey.Find(OP_EVAL) > 0)\n+    {\n+        int nUnused = 0;\n+        stack.clear();\n+        CScript sigCopy = scriptSig;\n+        sigCopy.FindAndDelete(CScript(OP_EVAL));\n+        CScript pubKeyCopy = scriptPubKey;\n+        pubKeyCopy.FindAndDelete(CScript(OP_EVAL));\n+\n+        if (!EvalScript(stack, sigCopy, txTo, nIn, nHashType, nUnused))\n+            return false;\n+        if (!EvalScript(stack, pubKeyCopy, txTo, nIn, nHashType, nUnused))\n+            return false;\n+        if (stack.empty())\n+            return false;\n+        if (fResult != CastToBool(stack.back()))\n+            return false;\n+    }\n+\n+    return fResult;\n }\n \n \n@@ -1238,15 +1549,16 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTrans\n     txin.scriptSig = scriptPrereq + txin.scriptSig;\n \n     // Test solution\n+    int nUnused = 0;\n     if (scriptPrereq.empty())\n-        if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, 0))\n+        if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nUnused, 0))\n             return false;\n \n     return true;\n }\n \n \n-bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n     const CTxIn& txin = txTo.vin[nIn];\n@@ -1257,27 +1569,35 @@ bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsig\n     if (txin.prevout.hash != txFrom.GetHash())\n         return false;\n \n-    if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nHashType))\n+    if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nSigOpCountRet, nHashType))\n         return false;\n \n     return true;\n }\n \n-void CScript::SetMultisigAnd(const std::vector<CKey>& keys)\n+void CScript::SetBitcoinAddress(const CBitcoinAddress& address)\n {\n-    assert(keys.size() >= 2);\n     this->clear();\n-    *this << OP_2 << keys[0].GetPubKey() << keys[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    if (address.IsScript())\n+        *this << OP_DUP << OP_HASH160 << address.GetHash160() << OP_EQUALVERIFY << OP_EVAL;\n+    else\n+        *this << OP_DUP << OP_HASH160 << address.GetHash160() << OP_EQUALVERIFY << OP_CHECKSIG;\n }\n-void CScript::SetMultisigOr(const std::vector<CKey>& keys)\n+\n+void CScript::SetMultisig(int nRequired, const std::vector<CKey>& keys)\n {\n-    assert(keys.size() >= 2);\n     this->clear();\n-    *this << OP_1 << keys[0].GetPubKey() << keys[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+\n+    *this << EncodeOP_N(nRequired);\n+    BOOST_FOREACH(const CKey& key, keys)\n+        *this << key.GetPubKey();\n+    *this << EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n }\n-void CScript::SetMultisigEscrow(const std::vector<CKey>& keys)\n+\n+void CScript::SetEval(const CScript& subscript)\n {\n-    assert(keys.size() >= 3);\n+    assert(!subscript.empty());\n+    uint160 subscriptHash = Hash160(subscript);\n     this->clear();\n-    *this << OP_2 << keys[0].GetPubKey() << keys[1].GetPubKey() << keys[1].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    *this << OP_DUP << OP_HASH160 << subscriptHash << OP_EQUALVERIFY << OP_EVAL;\n }"
      },
      {
        "sha": "ee0be02a82cf58440c3368c939557d3855e6087e",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 52,
        "deletions": 170,
        "changes": 222,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -24,6 +24,17 @@ enum\n };\n \n \n+enum txntype\n+{\n+    TX_NONSTANDARD,\n+    // 'standard' transaction types:\n+    TX_PUBKEY,\n+    TX_PUBKEYHASH,\n+    TX_SCRIPTHASH,\n+    TX_MULTISIG,\n+};\n+\n+const char* GetTxnTypeName(txntype t);\n \n enum opcodetype\n {\n@@ -147,8 +158,10 @@ enum opcodetype\n     OP_CHECKMULTISIG,\n     OP_CHECKMULTISIGVERIFY,\n \n+    // meta\n+    OP_EVAL, // Was OP_NOP1\n+\n     // expansion\n-    OP_NOP1,\n     OP_NOP2,\n     OP_NOP3,\n     OP_NOP4,\n@@ -162,162 +175,16 @@ enum opcodetype\n \n \n     // template matching params\n+    OP_SMALLINTEGER = 0xfa,\n+    OP_PUBKEYS = 0xfb,\n+    OP_SCRIPTHASH = 0xfc,\n     OP_PUBKEYHASH = 0xfd,\n     OP_PUBKEY = 0xfe,\n \n     OP_INVALIDOPCODE = 0xff,\n };\n \n-\n-\n-\n-\n-\n-\n-\n-inline const char* GetOpName(opcodetype opcode)\n-{\n-    switch (opcode)\n-    {\n-    // push value\n-    case OP_0                      : return \"0\";\n-    case OP_PUSHDATA1              : return \"OP_PUSHDATA1\";\n-    case OP_PUSHDATA2              : return \"OP_PUSHDATA2\";\n-    case OP_PUSHDATA4              : return \"OP_PUSHDATA4\";\n-    case OP_1NEGATE                : return \"-1\";\n-    case OP_RESERVED               : return \"OP_RESERVED\";\n-    case OP_1                      : return \"1\";\n-    case OP_2                      : return \"2\";\n-    case OP_3                      : return \"3\";\n-    case OP_4                      : return \"4\";\n-    case OP_5                      : return \"5\";\n-    case OP_6                      : return \"6\";\n-    case OP_7                      : return \"7\";\n-    case OP_8                      : return \"8\";\n-    case OP_9                      : return \"9\";\n-    case OP_10                     : return \"10\";\n-    case OP_11                     : return \"11\";\n-    case OP_12                     : return \"12\";\n-    case OP_13                     : return \"13\";\n-    case OP_14                     : return \"14\";\n-    case OP_15                     : return \"15\";\n-    case OP_16                     : return \"16\";\n-\n-    // control\n-    case OP_NOP                    : return \"OP_NOP\";\n-    case OP_VER                    : return \"OP_VER\";\n-    case OP_IF                     : return \"OP_IF\";\n-    case OP_NOTIF                  : return \"OP_NOTIF\";\n-    case OP_VERIF                  : return \"OP_VERIF\";\n-    case OP_VERNOTIF               : return \"OP_VERNOTIF\";\n-    case OP_ELSE                   : return \"OP_ELSE\";\n-    case OP_ENDIF                  : return \"OP_ENDIF\";\n-    case OP_VERIFY                 : return \"OP_VERIFY\";\n-    case OP_RETURN                 : return \"OP_RETURN\";\n-\n-    // stack ops\n-    case OP_TOALTSTACK             : return \"OP_TOALTSTACK\";\n-    case OP_FROMALTSTACK           : return \"OP_FROMALTSTACK\";\n-    case OP_2DROP                  : return \"OP_2DROP\";\n-    case OP_2DUP                   : return \"OP_2DUP\";\n-    case OP_3DUP                   : return \"OP_3DUP\";\n-    case OP_2OVER                  : return \"OP_2OVER\";\n-    case OP_2ROT                   : return \"OP_2ROT\";\n-    case OP_2SWAP                  : return \"OP_2SWAP\";\n-    case OP_IFDUP                  : return \"OP_IFDUP\";\n-    case OP_DEPTH                  : return \"OP_DEPTH\";\n-    case OP_DROP                   : return \"OP_DROP\";\n-    case OP_DUP                    : return \"OP_DUP\";\n-    case OP_NIP                    : return \"OP_NIP\";\n-    case OP_OVER                   : return \"OP_OVER\";\n-    case OP_PICK                   : return \"OP_PICK\";\n-    case OP_ROLL                   : return \"OP_ROLL\";\n-    case OP_ROT                    : return \"OP_ROT\";\n-    case OP_SWAP                   : return \"OP_SWAP\";\n-    case OP_TUCK                   : return \"OP_TUCK\";\n-\n-    // splice ops\n-    case OP_CAT                    : return \"OP_CAT\";\n-    case OP_SUBSTR                 : return \"OP_SUBSTR\";\n-    case OP_LEFT                   : return \"OP_LEFT\";\n-    case OP_RIGHT                  : return \"OP_RIGHT\";\n-    case OP_SIZE                   : return \"OP_SIZE\";\n-\n-    // bit logic\n-    case OP_INVERT                 : return \"OP_INVERT\";\n-    case OP_AND                    : return \"OP_AND\";\n-    case OP_OR                     : return \"OP_OR\";\n-    case OP_XOR                    : return \"OP_XOR\";\n-    case OP_EQUAL                  : return \"OP_EQUAL\";\n-    case OP_EQUALVERIFY            : return \"OP_EQUALVERIFY\";\n-    case OP_RESERVED1              : return \"OP_RESERVED1\";\n-    case OP_RESERVED2              : return \"OP_RESERVED2\";\n-\n-    // numeric\n-    case OP_1ADD                   : return \"OP_1ADD\";\n-    case OP_1SUB                   : return \"OP_1SUB\";\n-    case OP_2MUL                   : return \"OP_2MUL\";\n-    case OP_2DIV                   : return \"OP_2DIV\";\n-    case OP_NEGATE                 : return \"OP_NEGATE\";\n-    case OP_ABS                    : return \"OP_ABS\";\n-    case OP_NOT                    : return \"OP_NOT\";\n-    case OP_0NOTEQUAL              : return \"OP_0NOTEQUAL\";\n-    case OP_ADD                    : return \"OP_ADD\";\n-    case OP_SUB                    : return \"OP_SUB\";\n-    case OP_MUL                    : return \"OP_MUL\";\n-    case OP_DIV                    : return \"OP_DIV\";\n-    case OP_MOD                    : return \"OP_MOD\";\n-    case OP_LSHIFT                 : return \"OP_LSHIFT\";\n-    case OP_RSHIFT                 : return \"OP_RSHIFT\";\n-    case OP_BOOLAND                : return \"OP_BOOLAND\";\n-    case OP_BOOLOR                 : return \"OP_BOOLOR\";\n-    case OP_NUMEQUAL               : return \"OP_NUMEQUAL\";\n-    case OP_NUMEQUALVERIFY         : return \"OP_NUMEQUALVERIFY\";\n-    case OP_NUMNOTEQUAL            : return \"OP_NUMNOTEQUAL\";\n-    case OP_LESSTHAN               : return \"OP_LESSTHAN\";\n-    case OP_GREATERTHAN            : return \"OP_GREATERTHAN\";\n-    case OP_LESSTHANOREQUAL        : return \"OP_LESSTHANOREQUAL\";\n-    case OP_GREATERTHANOREQUAL     : return \"OP_GREATERTHANOREQUAL\";\n-    case OP_MIN                    : return \"OP_MIN\";\n-    case OP_MAX                    : return \"OP_MAX\";\n-    case OP_WITHIN                 : return \"OP_WITHIN\";\n-\n-    // crypto\n-    case OP_RIPEMD160              : return \"OP_RIPEMD160\";\n-    case OP_SHA1                   : return \"OP_SHA1\";\n-    case OP_SHA256                 : return \"OP_SHA256\";\n-    case OP_HASH160                : return \"OP_HASH160\";\n-    case OP_HASH256                : return \"OP_HASH256\";\n-    case OP_CODESEPARATOR          : return \"OP_CODESEPARATOR\";\n-    case OP_CHECKSIG               : return \"OP_CHECKSIG\";\n-    case OP_CHECKSIGVERIFY         : return \"OP_CHECKSIGVERIFY\";\n-    case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n-    case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n-\n-    // expanson\n-    case OP_NOP1                   : return \"OP_NOP1\";\n-    case OP_NOP2                   : return \"OP_NOP2\";\n-    case OP_NOP3                   : return \"OP_NOP3\";\n-    case OP_NOP4                   : return \"OP_NOP4\";\n-    case OP_NOP5                   : return \"OP_NOP5\";\n-    case OP_NOP6                   : return \"OP_NOP6\";\n-    case OP_NOP7                   : return \"OP_NOP7\";\n-    case OP_NOP8                   : return \"OP_NOP8\";\n-    case OP_NOP9                   : return \"OP_NOP9\";\n-    case OP_NOP10                  : return \"OP_NOP10\";\n-\n-\n-\n-    // template matching params\n-    case OP_PUBKEYHASH             : return \"OP_PUBKEYHASH\";\n-    case OP_PUBKEY                 : return \"OP_PUBKEY\";\n-\n-    case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n-    default:\n-        return \"OP_UNKNOWN\";\n-    }\n-};\n-\n+const char* GetOpName(opcodetype opcode);\n \n \n \n@@ -574,29 +441,52 @@ class CScript : public std::vector<unsigned char>\n         return true;\n     }\n \n+    // Encode/decode small integers:\n     static int DecodeOP_N(opcodetype opcode)\n     {\n         if (opcode == OP_0)\n             return 0;\n         assert(opcode >= OP_1 && opcode <= OP_16);\n         return (int)opcode - (int)(OP_1 - 1);\n     }\n+    static opcodetype EncodeOP_N(int n)\n+    {\n+        assert(n >= 0 && n <= 16);\n+        if (n == 0)\n+            return OP_0;\n+        return (opcodetype)(OP_1+n-1);\n+    }\n \n-    void FindAndDelete(const CScript& b)\n+    int FindAndDelete(const CScript& b)\n     {\n+        int nFound = 0;\n         if (b.empty())\n-            return;\n+            return nFound;\n         iterator pc = begin();\n         opcodetype opcode;\n         do\n         {\n             while (end() - pc >= b.size() && memcmp(&pc[0], &b[0], b.size()) == 0)\n+            {\n                 erase(pc, pc + b.size());\n+                ++nFound;\n+            }\n         }\n         while (GetOp(pc, opcode));\n+        return nFound;\n+    }\n+    int Find(opcodetype op) const\n+    {\n+        int nFound = 0;\n+        opcodetype opcode;\n+        for (const_iterator pc = begin(); pc != end() && GetOp(pc, opcode);)\n+            if (opcode == op)\n+                ++nFound;\n+        return nFound;\n     }\n \n-\n+    // This method should be removed when a compatibility-breaking block chain split has passed.\n+    // Compatibility method for old clients that count sigops differently:\n     int GetSigOpCount() const\n     {\n         int n = 0;\n@@ -614,11 +504,9 @@ class CScript : public std::vector<unsigned char>\n         return n;\n     }\n \n-\n+    // Called by CTransaction::IsStandard\n     bool IsPushOnly() const\n     {\n-        if (size() > 200)\n-            return false;\n         const_iterator pc = begin();\n         while (pc < end())\n         {\n@@ -632,19 +520,13 @@ class CScript : public std::vector<unsigned char>\n     }\n \n \n-    void SetBitcoinAddress(const CBitcoinAddress& address)\n-    {\n-        this->clear();\n-        *this << OP_DUP << OP_HASH160 << address.GetHash160() << OP_EQUALVERIFY << OP_CHECKSIG;\n-    }\n-\n+    void SetBitcoinAddress(const CBitcoinAddress& address);\n     void SetBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n     {\n         SetBitcoinAddress(CBitcoinAddress(vchPubKey));\n     }\n-    void SetMultisigAnd(const std::vector<CKey>& keys);\n-    void SetMultisigOr(const std::vector<CKey>& keys);\n-    void SetMultisigEscrow(const std::vector<CKey>& keys);\n+    void SetMultisig(int nRequired, const std::vector<CKey>& keys);\n+    void SetEval(const CScript& subscript);\n \n \n     void PrintHex() const\n@@ -685,14 +567,14 @@ class CScript : public std::vector<unsigned char>\n \n \n \n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType, int& nSigOpCountRet);\n \n-\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-\n+bool Solver(const CScript& scriptPubKey, txntype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* pkeystore, CBitcoinAddress& addressRet);\n+bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* pkeystore, txntype& typeRet, std::vector<CBitcoinAddress>& addressRet, int& nRequiredRet);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL, CScript scriptPrereq=CScript());\n-bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType=0);\n+bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType=0);\n \n #endif"
      },
      {
        "sha": "75c764dd65238f476bf266eceb35e70919110690",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 47,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -20,9 +20,7 @@ using namespace boost::assign;\n typedef vector<unsigned char> valtype;\n \n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool Solver(const CScript& scriptPubKey, vector<vector<pair<opcodetype, valtype> > >& vSolutionsRet);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOpCount, int nHashType);\n \n BOOST_AUTO_TEST_SUITE(multisig_tests)\n \n@@ -76,24 +74,25 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n \n     vector<CKey> keys;\n     CScript s;\n+    int nUnused = 0;\n \n     // Test a AND b:\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, 0));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, 0), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, 0), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n@@ -103,16 +102,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         keys += key[i];\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0));\n \n \n     for (int i = 0; i < 4; i++)\n@@ -122,16 +121,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys += key[i],key[j];\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, 0), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, nUnused, 0), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, 0), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, nUnused, 0), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n \n BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n {\n-    CKey key[3];\n-    for (int i = 0; i < 3; i++)\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey();\n \n     CScript a_and_b;\n@@ -145,6 +144,21 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     CScript escrow;\n     escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n     BOOST_CHECK(::IsStandard(escrow));\n+\n+    CScript one_of_four;\n+    one_of_four << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << key[3].GetPubKey() << OP_4 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!::IsStandard(one_of_four));\n+\n+    CScript malformed[6];\n+    malformed[0] << OP_3 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    malformed[1] << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    malformed[2] << OP_0 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    malformed[3] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_0 << OP_CHECKMULTISIG;\n+    malformed[4] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_CHECKMULTISIG;\n+    malformed[5] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey();\n+\n+    for (int i = 0; i < 6; i++)\n+        BOOST_CHECK(!::IsStandard(malformed[i]));\n }\n \n BOOST_AUTO_TEST_CASE(multisig_Solver1)\n@@ -170,75 +184,66 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n     }\n \n     {\n-        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        vector<valtype> solutions;\n+        txntype whichType;\n         CScript s;\n         s << key[0].GetPubKey() << OP_CHECKSIG;\n-        BOOST_CHECK(Solver(s, solutions));\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 1);\n-        if (solutions.size() == 1)\n-            BOOST_CHECK(solutions[0].size() == 1);\n         CBitcoinAddress addr;\n         BOOST_CHECK(ExtractAddress(s, &keystore, addr));\n         BOOST_CHECK(addr == keyaddr[0]);\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n     }\n     {\n-        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        vector<valtype> solutions;\n+        txntype whichType;\n         CScript s;\n         s << OP_DUP << OP_HASH160 << Hash160(key[0].GetPubKey()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-        BOOST_CHECK(Solver(s, solutions));\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 1);\n-        if (solutions.size() == 1)\n-            BOOST_CHECK(solutions[0].size() == 1);\n         CBitcoinAddress addr;\n         BOOST_CHECK(ExtractAddress(s, &keystore, addr));\n         BOOST_CHECK(addr == keyaddr[0]);\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n     }\n     {\n-        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        vector<valtype> solutions;\n+        txntype whichType;\n         CScript s;\n         s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, solutions));\n-        BOOST_CHECK(solutions.size() == 1);\n-        if (solutions.size() == 1)\n-            BOOST_CHECK(solutions[0].size() == 2);\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n+        BOOST_CHECK_EQUAL(solutions.size(), 4);\n         CBitcoinAddress addr;\n         BOOST_CHECK(!ExtractAddress(s, &keystore, addr));\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n     }\n     {\n-        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        vector<valtype> solutions;\n+        txntype whichType;\n         CScript s;\n         s << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, solutions));\n-        BOOST_CHECK(solutions.size() == 2);\n-        if (solutions.size() == 2)\n-        {\n-            BOOST_CHECK(solutions[0].size() == 1);\n-            BOOST_CHECK(solutions[1].size() == 1);\n-        }\n-        CBitcoinAddress addr;\n-        BOOST_CHECK(ExtractAddress(s, &keystore, addr));\n-        BOOST_CHECK(addr == keyaddr[0]);\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n+        BOOST_CHECK_EQUAL(solutions.size(), 4);\n+        vector<CBitcoinAddress> addrs;\n+        int nRequired;\n+        BOOST_CHECK(ExtractAddresses(s, &keystore, whichType, addrs, nRequired));\n+        BOOST_CHECK(addrs[0] == keyaddr[0]);\n+        BOOST_CHECK(addrs[1] == keyaddr[1]);\n+        BOOST_CHECK(nRequired = 1);\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n     }\n     {\n-        vector<vector<pair<opcodetype, valtype> > > solutions;\n+        vector<valtype> solutions;\n+        txntype whichType;\n         CScript s;\n         s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, solutions));\n-        BOOST_CHECK(solutions.size() == 3);\n-        if (solutions.size() == 3)\n-        {\n-            BOOST_CHECK(solutions[0].size() == 2);\n-            BOOST_CHECK(solutions[1].size() == 2);\n-            BOOST_CHECK(solutions[2].size() == 2);\n-        }\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n+        BOOST_CHECK(solutions.size() == 5);\n     }\n }\n "
      },
      {
        "sha": "857d04bc6dc6be4fc83d84df5eb2ae3b18e1eb89",
        "filename": "src/test/script_op_eval_tests.cpp",
        "status": "added",
        "additions": 203,
        "deletions": 0,
        "changes": 203,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/test/script_op_eval_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/test/script_op_eval_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_op_eval_tests.cpp?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -0,0 +1,203 @@\n+#include <boost/assert.hpp>\n+#include <boost/assign/list_of.hpp>\n+#include <boost/assign/list_inserter.hpp>\n+#include <boost/assign/std/vector.hpp>\n+#include <boost/test/unit_test.hpp>\n+#include <boost/foreach.hpp>\n+\n+#include \"../main.h\"\n+#include \"../script.h\"\n+#include \"../wallet.h\"\n+\n+using namespace std;\n+\n+// Test routines internal to script.cpp:\n+extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps, int nHashType);\n+\n+BOOST_AUTO_TEST_SUITE(script_op_eval_tests)\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval1)\n+{\n+    // OP_EVAL looks like this:\n+    // scriptSig:    <sig> <sig...> <serialized_script>\n+    // scriptPubKey: DUP HASH160 <hash> EQUALVERIFY EVAL\n+\n+    // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+    }\n+\n+    // 8 Scripts: checking all combinations of\n+    // different keys, straight/EVAL, pubkey/pubkeyhash\n+    CScript standardScripts[4];\n+    standardScripts[0] << key[0].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[1].SetBitcoinAddress(key[1].GetPubKey());\n+    standardScripts[2] << key[1].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[3].SetBitcoinAddress(key[2].GetPubKey());\n+    CScript evalScripts[4];\n+    uint160 sigScriptHashes[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        sigScriptHashes[i] = Hash160(standardScripts[i]);\n+        keystore.AddCScript(sigScriptHashes[i], standardScripts[i]);\n+        evalScripts[i] << OP_DUP << OP_HASH160 << sigScriptHashes[i] << OP_EQUALVERIFY << OP_EVAL;\n+    }\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(8);\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txFrom.vout[i].scriptPubKey = evalScripts[i];\n+        txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n+    }\n+    BOOST_CHECK(txFrom.IsStandard());\n+\n+    CTransaction txTo[8]; // Spending transactions\n+    for (int i = 0; i < 8; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+    }\n+    for (int i = 0; i < 8; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+    }\n+    // All of the above should be OK, and the txTos have valid signatures\n+    // Check to make sure signature verification fails if we use the wrong ScriptSig:\n+    for (int i = 0; i < 8; i++)\n+        for (int j = 0; j < 8; j++)\n+        {\n+            CScript sigSave = txTo[i].vin[0].scriptSig;\n+            txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n+            int nUnused = 0;\n+            bool sigOK = VerifySignature(txFrom, txTo[i], 0, nUnused);\n+            if (i == j)\n+                BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n+            else\n+                BOOST_CHECK_MESSAGE(!sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n+            txTo[i].vin[0].scriptSig = sigSave;\n+        }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval2)\n+{\n+    // Test OP_EVAL edge cases\n+\n+    CScript recurse;\n+    recurse << OP_DUP << OP_EVAL;\n+\n+    uint160 recurseHash = Hash160(recurse);\n+\n+    CScript fund;\n+    fund << OP_DUP << OP_HASH160 << recurseHash << OP_EQUALVERIFY << OP_EVAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    BOOST_CHECK(txFrom.IsStandard()); // Looks like a standard transaction until you try to spend it\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(recurse);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval3)\n+{\n+    // Test the CScript::Set* methods\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    std::vector<CKey> keys;\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+        keys.push_back(key[i]);\n+    }\n+\n+    CScript inner[4];\n+    inner[0].SetBitcoinAddress(key[0].GetPubKey());\n+    inner[1].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+2));\n+    inner[2].SetMultisig(1, std::vector<CKey>(keys.begin(), keys.begin()+2));\n+    inner[3].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+3));\n+\n+    CScript outer[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        outer[i].SetEval(inner[i]);\n+        keystore.AddCScript(Hash160(inner[i]), inner[i]);\n+    }\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(4);\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txFrom.vout[i].scriptPubKey = outer[i];\n+    }\n+    BOOST_CHECK(txFrom.IsStandard());\n+\n+    CTransaction txTo[4]; // Spending transactions\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+        txTo[i].vout[0].scriptPubKey = inner[i];\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+    }\n+    for (int i = 0; i < 4; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(txTo[i].IsStandard(), strprintf(\"txTo[%d].IsStandard\", i));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval_backcompat)\n+{\n+    // Check backwards-incompatibility-testing code\n+    CScript returnsEleven;\n+    returnsEleven << OP_11;\n+\n+    // This will validate on new clients, but will\n+    // be invalid on old clients (that interpret OP_EVAL as a no-op)\n+    CScript fund;\n+    fund << OP_EVAL << OP_11 << OP_EQUAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(returnsEleven);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused));\n+}\n+\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "3d1c218700d9856e29fb6d09bdca559a57d5a222",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -7,7 +7,7 @@\n \n using namespace std;\n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps, int nHashType);\n extern bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n BOOST_AUTO_TEST_SUITE(script_tests)\n@@ -21,19 +21,21 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata2[] = { OP_PUSHDATA2, 1, 0, 0x5a };\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n+    int nUnused = 0;\n+\n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, 0, nUnused));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, 0, nUnused));\n     BOOST_CHECK(pushdata1Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, 0, nUnused));\n     BOOST_CHECK(pushdata2Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, 0, nUnused));\n     BOOST_CHECK(pushdata4Stack == directStack);\n }\n \n@@ -71,6 +73,7 @@ sign_multisig(CScript scriptPubKey, CKey key, CTransaction transaction)\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n {\n+    int nUnused = 0;\n     CKey key1, key2, key3;\n     key1.MakeNewKey();\n     key2.MakeNewKey();\n@@ -91,19 +94,20 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     txTo12.vout[0].nValue = 1;\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, nUnused, 0));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, 0));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, nUnused, 0));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, nUnused, 0));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, nUnused, 0));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n {\n+    int nUnused = 0;\n     CKey key1, key2, key3, key4;\n     key1.MakeNewKey();\n     key2.MakeNewKey();\n@@ -127,46 +131,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, nUnused, 0));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, nUnused, 0));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, nUnused, 0));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, nUnused, 0));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, nUnused, 0));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, nUnused, 0));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, nUnused, 0));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, nUnused, 0));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, nUnused, 0));\n }    \n \n "
      },
      {
        "sha": "bc56b0d0f89e4a8cd288f42342fd04ff08f2a804",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -42,6 +42,15 @@ bool CWallet::AddCryptedKey(const vector<unsigned char> &vchPubKey, const vector\n     return false;\n }\n \n+bool CWallet::AddCScript(const uint160 &hash, const std::vector<unsigned char>& data)\n+{\n+    if (!CCryptoKeyStore::AddCScript(hash, data))\n+        return false;\n+    if (!fFileBacked)\n+        return true;\n+    return CWalletDB(strWalletFile).WriteCScript(hash, data);\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n {\n     if (!IsLocked())\n@@ -365,6 +374,16 @@ int64 CWallet::GetDebit(const CTxIn &txin) const\n     return 0;\n }\n \n+bool CWallet::IsChange(const CTxOut& txout) const\n+{\n+    CBitcoinAddress address;\n+    if (ExtractAddress(txout.scriptPubKey, this, address) && !address.IsScript())\n+        CRITICAL_BLOCK(cs_wallet)\n+            if (!mapAddressBook.count(address))\n+                return true;\n+    return false;\n+}\n+\n int64 CWalletTx::GetTxTime() const\n {\n     return nTimeReceived;\n@@ -434,8 +453,7 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n         nFee = nDebit - nValueOut;\n     }\n \n-    // Sent/received.  Standard client will never generate a send-to-multiple-recipients,\n-    // but non-standard clients might (so return a list of address/amount pairs)\n+    // Sent/received.\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         CBitcoinAddress address;"
      },
      {
        "sha": "2bab419cb7449f97139c9ef6e83a68b28b8edc4e",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4cfa279321c3bcf35d9d30297bae7a47d18af6f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "patch": "@@ -69,6 +69,8 @@ class CWallet : public CCryptoKeyStore\n     bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     // Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }\n+    bool AddCScript(const uint160& hash, const std::vector<unsigned char>& data);\n+    bool LoadCScript(const uint160& hash, const std::vector<unsigned char>& data) { return CCryptoKeyStore::AddCScript(hash, data); }\n \n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n@@ -110,15 +112,7 @@ class CWallet : public CCryptoKeyStore\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n         return (IsMine(txout) ? txout.nValue : 0);\n     }\n-    bool IsChange(const CTxOut& txout) const\n-    {\n-        CBitcoinAddress address;\n-        if (ExtractAddress(txout.scriptPubKey, this, address))\n-            CRITICAL_BLOCK(cs_wallet)\n-                if (!mapAddressBook.count(address))\n-                    return true;\n-        return false;\n-    }\n+    bool IsChange(const CTxOut& txout) const;\n     int64 GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))"
      }
    ]
  },
  {
    "sha": "9db95d35d3c3bf1c41674c7e1e4da8816abb9690",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGI5NWQzNWQzYzNiZjFjNDE2NzRjN2UxZTRkYTg4MTZhYmI5Njkw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-10-13T20:03:58Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T22:06:00Z"
      },
      "message": "Put OP_EVAL string in coinbase of generated blocks",
      "tree": {
        "sha": "b1bdd0a97e04fc2805a48837829b48651d53a9d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1bdd0a97e04fc2805a48837829b48651d53a9d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9db95d35d3c3bf1c41674c7e1e4da8816abb9690",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db95d35d3c3bf1c41674c7e1e4da8816abb9690",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9db95d35d3c3bf1c41674c7e1e4da8816abb9690",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db95d35d3c3bf1c41674c7e1e4da8816abb9690/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4cfa279321c3bcf35d9d30297bae7a47d18af6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4cfa279321c3bcf35d9d30297bae7a47d18af6f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "dc28285686bc91d94b798d0eee98aac28368a8e6",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db95d35d3c3bf1c41674c7e1e4da8816abb9690/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db95d35d3c3bf1c41674c7e1e4da8816abb9690/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=9db95d35d3c3bf1c41674c7e1e4da8816abb9690",
        "patch": "@@ -270,7 +270,7 @@ class CBitcoinAddress : public CBase58Data\n \n     bool SetScriptHash160(const uint160& hash160)\n     {\n-        SetData(fTestNet ? 112 : 1, &hash160, 20);\n+        SetData(fTestNet ? 111^2 : 2, &hash160, 20);\n         return true;\n     }\n \n@@ -284,7 +284,7 @@ class CBitcoinAddress : public CBase58Data\n                 nExpectedSize = 20; // Hash of public key\n                 fExpectTestNet = false;\n                 break;\n-            case 1:\n+            case 2:\n                 nExpectedSize = 20; // OP_EVAL, hash of CScript\n                 fExpectTestNet = false;\n                 break;\n@@ -293,7 +293,7 @@ class CBitcoinAddress : public CBase58Data\n                 nExpectedSize = 20;\n                 fExpectTestNet = true;\n                 break;\n-            case 112:\n+            case 111^2:\n                 nExpectedSize = 20;\n                 fExpectTestNet = true;\n                 break;\n@@ -308,8 +308,8 @@ class CBitcoinAddress : public CBase58Data\n         if (!IsValid())\n             return false;\n         if (fTestNet)\n-            return nVersion == 112;\n-        return nVersion == 1;\n+            return nVersion == 111^2;\n+        return nVersion == 2;\n     }\n \n     CBitcoinAddress()"
      },
      {
        "sha": "130db2408f561c920d37c1745db221e6b3fd39b0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db95d35d3c3bf1c41674c7e1e4da8816abb9690/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db95d35d3c3bf1c41674c7e1e4da8816abb9690/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9db95d35d3c3bf1c41674c7e1e4da8816abb9690",
        "patch": "@@ -2995,6 +2995,12 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     ++nExtraNonce;\n     pblock->vtx[0].vin[0].scriptSig = CScript() << pblock->nTime << CBigNum(nExtraNonce);\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+\n+    // Put \"OP_EVAL\" in the coinbase so everybody can tell when\n+    // a majority of miners support it\n+    const char* pOpEvalName = GetOpName(OP_EVAL);\n+    pblock->vtx[0].vin[0].scriptSig += CScript() << std::vector<unsigned char>(pOpEvalName, pOpEvalName+strlen(pOpEvalName));\n+    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);\n }\n \n "
      }
    ]
  },
  {
    "sha": "dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWQzMTQyOWQ5ZmQ0OWU0ZThlNmU0NzA1ZTVlMThiYmI5ZjJmMThl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-10-19T13:50:15Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T22:06:00Z"
      },
      "message": "Disable addmultisigaddress if not testnet",
      "tree": {
        "sha": "d25715a7b0aebe206f81ff98aec056e3820f8e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d25715a7b0aebe206f81ff98aec056e3820f8e37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9db95d35d3c3bf1c41674c7e1e4da8816abb9690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db95d35d3c3bf1c41674c7e1e4da8816abb9690",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9db95d35d3c3bf1c41674c7e1e4da8816abb9690"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2fdb7c8312fbd1896f2c0aca6fe7561b3dd08653",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e",
        "patch": "@@ -940,6 +940,8 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n             \"If [account] is specified, assign address to [account].\";\n         throw runtime_error(msg);\n     }\n+    if (!fTestNet)\n+        throw runtime_error(\"addmultisigaddress available only when running -testnet\\n\");\n \n     int nRequired = params[0].get_int();\n     const Array& keys = params[1].get_array();"
      }
    ]
  },
  {
    "sha": "309e72221e731878325c9ed32f12d8545e2001be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDllNzIyMjFlNzMxODc4MzI1YzllZDMyZjEyZDg1NDVlMjAwMWJl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-10-21T17:12:05Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T22:06:00Z"
      },
      "message": "Interpret OP_EVAL as OP_NOP until Feb 1, 2012",
      "tree": {
        "sha": "c7d52181ac3a62beca473426e45b372923cc4944",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7d52181ac3a62beca473426e45b372923cc4944"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/309e72221e731878325c9ed32f12d8545e2001be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/309e72221e731878325c9ed32f12d8545e2001be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/309e72221e731878325c9ed32f12d8545e2001be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/309e72221e731878325c9ed32f12d8545e2001be/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dad31429d9fd49e4e8e6e4705e5e18bbb9f2f18e"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 63,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e60399120ff4738c2d6d6b57a3c718851bc2b32c",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/309e72221e731878325c9ed32f12d8545e2001be/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/309e72221e731878325c9ed32f12d8545e2001be/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=309e72221e731878325c9ed32f12d8545e2001be",
        "patch": "@@ -1014,6 +1014,18 @@ bool EvalScriptInner(vector<vector<unsigned char> >& stack, const CScript& scrip\n \n                 case OP_EVAL:\n                 {\n+                    // This code should be removed when OP_EVAL has\n+                    // a majority of hashing power on the network.\n+                    // OP_EVAL behaves just like OP_NOP until\n+                    // opevaltime :\n+                    if (!fTestNet || fDebug)\n+                    {\n+                        // 1328054400 is Feb 1, 2012\n+                        int64 nEvalSwitchTime = GetArg(\"opevaltime\", 1328054400);\n+                        if (GetTime() < nEvalSwitchTime)\n+                            break;\n+                    }\n+\n                     // Evaluate the top item on the stack as a Script\n                     // [serialized script ] -- [result(s) of executing script]\n                     if (stack.size() < 1)"
      },
      {
        "sha": "6c683b57297e12723e54f0d913a5ecb29cca11d5",
        "filename": "src/test/script_op_eval_tests.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 3,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/309e72221e731878325c9ed32f12d8545e2001be/src/test/script_op_eval_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/309e72221e731878325c9ed32f12d8545e2001be/src/test/script_op_eval_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_op_eval_tests.cpp?ref=309e72221e731878325c9ed32f12d8545e2001be",
        "patch": "@@ -15,7 +15,22 @@ using namespace std;\n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps, int nHashType);\n \n-BOOST_AUTO_TEST_SUITE(script_op_eval_tests)\n+static const int64 nEvalSwitchover = 1328054400;\n+\n+struct CEvalFixture {\n+    CEvalFixture()\n+    {\n+        // Set mock time to AFTER OP_EVAL deployed\n+        SetMockTime(nEvalSwitchover+1);\n+    }\n+    ~CEvalFixture()\n+    {\n+        // Reset back to use-real-time\n+        SetMockTime(0);\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(script_op_eval_tests, CEvalFixture)\n \n BOOST_AUTO_TEST_CASE(script_op_eval1)\n {\n@@ -171,14 +186,16 @@ BOOST_AUTO_TEST_CASE(script_op_eval3)\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(script_op_eval_backcompat)\n+BOOST_AUTO_TEST_CASE(script_op_eval_backcompat1)\n {\n     // Check backwards-incompatibility-testing code\n     CScript returnsEleven;\n     returnsEleven << OP_11;\n \n-    // This will validate on new clients, but will\n+    // This should validate on new clients, but will\n     // be invalid on old clients (that interpret OP_EVAL as a no-op)\n+    //  ... except there's a special rule that makes new clients reject\n+    // it.\n     CScript fund;\n     fund << OP_EVAL << OP_11 << OP_EQUAL;\n \n@@ -199,5 +216,36 @@ BOOST_AUTO_TEST_CASE(script_op_eval_backcompat)\n     BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused));\n }\n \n+BOOST_AUTO_TEST_CASE(script_op_eval_switchover)\n+{\n+    // Use SetMockTime to test OP_EVAL switchover code\n+    CScript notValid;\n+    notValid << OP_11 << OP_12 << OP_EQUALVERIFY;\n+\n+    // This will be valid under old rules, invalid under new:\n+    CScript fund;\n+    fund << OP_EVAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(notValid);\n+    txTo.vout[0].nValue = 1;\n+\n+    SetMockTime(nEvalSwitchover-1);\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0));\n+\n+    // After eval switchover time, it should validate:\n+    SetMockTime(nEvalSwitchover);\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0));\n+}\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "186b01d8f07ae7915efb75900f7ff9de5b969c85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODZiMDFkOGYwN2FlNzkxNWVmYjc1OTAwZjdmZjlkZTViOTY5Yzg1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-11-08T18:20:29Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-01T22:06:00Z"
      },
      "message": "Use block times for 'hard' OP_EVAL switchover, and refactored EvalScript\nso it takes a flag for how to interpret OP_EVAL.\nAlso increased IsStandard size of scriptSigs to 500 bytes, so\na 3-of-3 multisig transaction IsStandard.",
      "tree": {
        "sha": "5dccb82b3f68a58942fc6b2db17191d5e370ef84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5dccb82b3f68a58942fc6b2db17191d5e370ef84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/186b01d8f07ae7915efb75900f7ff9de5b969c85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/186b01d8f07ae7915efb75900f7ff9de5b969c85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/186b01d8f07ae7915efb75900f7ff9de5b969c85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/186b01d8f07ae7915efb75900f7ff9de5b969c85/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "309e72221e731878325c9ed32f12d8545e2001be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/309e72221e731878325c9ed32f12d8545e2001be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/309e72221e731878325c9ed32f12d8545e2001be"
      }
    ],
    "stats": {
      "total": 354,
      "additions": 177,
      "deletions": 177
    },
    "files": [
      {
        "sha": "d87af1581f583b0c6f9209bacdd25532f9c82f56",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -1668,10 +1668,10 @@ Value validateaddress(const Array& params, bool fHelp)\n             pwalletMain->GetCScript(address.GetHash160(), subscript);\n             ret.push_back(Pair(\"ismine\", ::IsMine(*pwalletMain, subscript)));\n             std::vector<CBitcoinAddress> addresses;\n-            txntype whichType;\n+            txnouttype whichType;\n             int nRequired;\n             ExtractAddresses(subscript, pwalletMain, whichType, addresses, nRequired);\n-            ret.push_back(Pair(\"script\", GetTxnTypeName(whichType)));\n+            ret.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n             Array a;\n             BOOST_FOREACH(const CBitcoinAddress& addr, addresses)\n                 a.push_back(addr.ToString());"
      },
      {
        "sha": "152586285aed20b62ee8d1cef461d6211a6977a8",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -938,7 +938,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n             {\n                 uint160 hash;\n                 ssKey >> hash;\n-                std::vector<unsigned char> script;\n+                CScript script;\n                 ssValue >> script;\n                 if (!pwallet->LoadCScript(hash, script))\n                     return DB_CORRUPT;"
      },
      {
        "sha": "e593ae28ed172bdd084ba4a72b31d1045f231de6",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -13,17 +13,17 @@\n \n #include <db_cxx.h>\n \n-class CTxIndex;\n+class CAccount;\n+class CAccountingEntry;\n+class CAddress;\n+class CBlockLocator;\n class CDiskBlockIndex;\n class CDiskTxPos;\n+class CMasterKey;\n class COutPoint;\n-class CAddress;\n-class CWalletTx;\n+class CTxIndex;\n class CWallet;\n-class CAccount;\n-class CAccountingEntry;\n-class CBlockLocator;\n-\n+class CWalletTx;\n \n extern unsigned int nWalletDBUpdated;\n extern DbEnv dbenv;\n@@ -420,16 +420,17 @@ class CWalletDB : public CDB\n         return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n     }\n \n-    bool ReadCScript(const uint160 &hash, std::vector<unsigned char>& data)\n+    // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n+    bool ReadCScript(const uint160 &hash, CScript& redeemScript)\n     {\n-        data.clear();\n-        return Read(std::make_pair(std::string(\"cscript\"), hash), data);\n+        redeemScript.clear();\n+        return Read(std::make_pair(std::string(\"cscript\"), hash), redeemScript);\n     }\n \n-    bool WriteCScript(const uint160& hash, const std::vector<unsigned char>& data)\n+    bool WriteCScript(const uint160& hash, const CScript& redeemScript)\n     {\n         nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"cscript\"), hash), data, false);\n+        return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n     }\n \n     bool WriteBestBlock(const CBlockLocator& locator)"
      },
      {
        "sha": "1213ebf07c2a0ebb7027f02655af7779d909dde5",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -4,8 +4,9 @@\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"headers.h\"\n-#include \"db.h\"\n #include \"crypter.h\"\n+#include \"db.h\"\n+#include \"script.h\"\n \n std::vector<unsigned char> CKeyStore::GenerateNewKey()\n {\n@@ -33,30 +34,30 @@ bool CBasicKeyStore::AddKey(const CKey& key)\n     return true;\n }\n \n-bool CBasicKeyStore::AddCScript(const uint160 &hash, const std::vector<unsigned char>& data)\n+bool CBasicKeyStore::AddCScript(const uint160 &hash, const CScript& redeemScript)\n {\n     CRITICAL_BLOCK(cs_KeyStore)\n-        mapData[hash] = data;\n+        mapScripts[hash] = redeemScript;\n     return true;\n }\n \n bool CBasicKeyStore::HaveCScript(const uint160& hash) const\n {\n     bool result;\n     CRITICAL_BLOCK(cs_KeyStore)\n-        result = (mapData.count(hash) > 0);\n+        result = (mapScripts.count(hash) > 0);\n     return result;\n }\n \n \n-bool CBasicKeyStore::GetCScript(const uint160 &hash, std::vector<unsigned char>& dataOut) const\n+bool CBasicKeyStore::GetCScript(const uint160 &hash, CScript& redeemScriptOut) const\n {\n     CRITICAL_BLOCK(cs_KeyStore)\n     {\n-        DataMap::const_iterator mi = mapData.find(hash);\n-        if (mi != mapData.end())\n+        ScriptMap::const_iterator mi = mapScripts.find(hash);\n+        if (mi != mapScripts.end())\n         {\n-            dataOut = (*mi).second;\n+            redeemScriptOut = (*mi).second;\n             return true;\n         }\n     }"
      },
      {
        "sha": "f611c1a7cf815b27c34029bfd7a2af4c352fcb3e",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_KEYSTORE_H\n \n #include \"crypter.h\"\n+#include \"script.h\"\n \n // A virtual base class for key stores\n class CKeyStore\n@@ -28,23 +29,24 @@ class CKeyStore\n     // This may succeed even if GetKey fails (e.g., encrypted wallets)\n     virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n \n-    virtual bool AddCScript(const uint160 &hash, const std::vector<unsigned char>& data) =0;\n+    // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n+    virtual bool AddCScript(const uint160 &hash, const CScript& redeemScript) =0;\n     virtual bool HaveCScript(const uint160 &hash) const =0;\n-    virtual bool GetCScript(const uint160 &hash, std::vector<unsigned char>& dataOut) const =0;\n+    virtual bool GetCScript(const uint160 &hash, CScript& redeemScriptOut) const =0;\n \n     // Generate a new key, and add it to the store\n     virtual std::vector<unsigned char> GenerateNewKey();\n };\n \n typedef std::map<CBitcoinAddress, CSecret> KeyMap;\n-typedef std::map<uint160, std::vector<unsigned char> > DataMap;\n+typedef std::map<uint160, CScript > ScriptMap;\n \n // Basic key store, that keeps keys in an address->secret map\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n-    DataMap mapData;\n+    ScriptMap mapScripts;\n \n public:\n     bool AddKey(const CKey& key);\n@@ -68,9 +70,9 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return false;\n     }\n-    virtual bool AddCScript(const uint160 &hash, const std::vector<unsigned char>& data);\n+    virtual bool AddCScript(const uint160 &hash, const CScript& redeemScript);\n     virtual bool HaveCScript(const uint160 &hash) const;\n-    virtual bool GetCScript(const uint160 &hash, std::vector<unsigned char>& dataOut) const;\n+    virtual bool GetCScript(const uint160 &hash, CScript& redeemScriptOut) const;\n };\n \n typedef std::map<CBitcoinAddress, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;"
      },
      {
        "sha": "d66c069a14bf8f9723d8628fcfa191fa6026c538",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 16,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -245,13 +245,13 @@ bool CTransaction::IsStandard() const\n {\n     BOOST_FOREACH(const CTxIn& txin, vin)\n     {\n-        // Biggest 'standard' txin is a 2-signature 2-of-3 escrow\n-        // in an OP_EVAL, which is 2 ~80-byte signatures, 3\n+        // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n+        // in an OP_EVAL, which is 3 ~80-byte signatures, 3\n         // ~65-byte public keys, plus a few script ops.\n-        if (txin.scriptSig.size() > 400)\n-            return error(\"nonstandard txin, size %d\\n\", txin.scriptSig.size());\n+        if (txin.scriptSig.size() > 500)\n+            return error(\"nonstandard txin, size %d is too large\\n\", txin.scriptSig.size());\n         if (!txin.scriptSig.IsPushOnly())\n-            return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());\n+            return error(\"nonstandard txin (opcodes other than PUSH): %s\", txin.scriptSig.ToString().c_str());\n     }\n     BOOST_FOREACH(const CTxOut& txout, vout)\n         if (!::IsStandard(txout.scriptPubKey))\n@@ -270,7 +270,7 @@ bool CTransaction::IsStandard() const\n // expensive-to-check-upon-redemption script like:\n //   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n //\n-bool CTransaction::IsStandardInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const\n+bool CTransaction::AreInputsStandard(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const\n {\n     if (fTestNet)\n         return true; // Allow non-standard on testnet\n@@ -282,18 +282,20 @@ bool CTransaction::IsStandardInputs(std::map<uint256, std::pair<CTxIndex, CTrans\n         CTransaction& txPrev = mapInputs[prevout.hash].second;\n \n         vector<vector<unsigned char> > vSolutions;\n-        txntype whichType;\n-        if (!Solver(txPrev.vout[vin[i].prevout.n].scriptPubKey, whichType, vSolutions))\n-            return false;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        CScript& prevScript = txPrev.vout[prevout.n].scriptPubKey;\n+        if (!Solver(prevScript, whichType, vSolutions))\n+            return error(\"nonstandard txin (spending nonstandard txout %s)\", prevScript.ToString().c_str());\n         if (whichType == TX_SCRIPTHASH)\n         {\n             vector<vector<unsigned char> > stack;\n             int nUnused;\n-            if (!EvalScript(stack, vin[i].scriptSig, *this, i, 0, nUnused))\n-                return false;\n-            const vector<unsigned char>& subscript = stack.back();\n-            if (!::IsStandard(CScript(subscript.begin(), subscript.end())))\n+            if (!EvalScript(stack, vin[i].scriptSig, *this, i, 0, true, nUnused))\n                 return false;\n+            CScript subscript(stack.back().begin(), stack.back().end());\n+            if (!::IsStandard(subscript))\n+                return error(\"nonstandard txin (nonstandard OP_EVAL subscript %s)\", subscript.ToString().c_str());\n         }\n     }\n \n@@ -476,7 +478,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n         }\n \n         // Check for non-standard OP_EVALs in inputs\n-        if (!IsStandardInputs(mapInputs))\n+        if (!AreInputsStandard(mapInputs))\n             return error(\"AcceptToMemoryPool() : nonstandard transaction input\");\n \n         // Check against previous transactions\n@@ -973,9 +975,27 @@ bool CTransaction::ConnectInputs(map<uint256, pair<CTxIndex, CTransaction> > inp\n             // (before the last blockchain checkpoint). This is safe because block merkle hashes are\n             // still computed and checked, and any change will be caught at the next checkpoint.\n             if (!(fBlock && IsInitialBlockDownload()))\n+            {\n+                bool fStrictOpEval = true;\n+                // This code should be removed when OP_EVAL has\n+                // a majority of hashing power on the network.\n+                if (fBlock)\n+                {\n+                    // To avoid being on the short end of a block-chain split,\n+                    // interpret OP_EVAL as a NO_OP until blocks with timestamps\n+                    // after opevaltime:\n+                    int64 nEvalSwitchTime = GetArg(\"opevaltime\", 1328054400); // Feb 1, 2012\n+                    fStrictOpEval = (pindexBlock->nTime >= nEvalSwitchTime);\n+                }\n+                // if !fBlock, then always be strict-- don't accept\n+                // invalid-under-new-rules OP_EVAL transactions into\n+                // our memory pool (don't relay them, don't include them\n+                // in blocks we mine).\n+\n                 // Verify signature\n-                if (!VerifySignature(txPrev, *this, i, nSigOpsRet))\n+                if (!VerifySignature(txPrev, *this, i, nSigOpsRet, fStrictOpEval))\n                     return DoS(100,error(\"ConnectInputs() : %s VerifySignature failed\", GetHash().ToString().substr(0,10).c_str()));\n+            }\n \n             // Check for conflicts (double-spend)\n             // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n@@ -1049,7 +1069,7 @@ bool CTransaction::ClientConnectInputs()\n \n             // Verify signature\n             int nUnused = 0;\n-            if (!VerifySignature(txPrev, *this, i, nUnused))\n+            if (!VerifySignature(txPrev, *this, i, nUnused, false))\n                 return error(\"ConnectInputs() : VerifySignature failed\");\n \n             ///// this is redundant with the mapNextTx stuff, not sure which I want to get rid of"
      },
      {
        "sha": "6e8c5bd622094f04440acac1827494ad1964c859",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -490,7 +490,7 @@ class CTransaction\n     }\n \n     bool IsStandard() const;\n-    bool IsStandardInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const;\n+    bool AreInputsStandard(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const;\n \n     int64 GetValueOut() const\n     {\n@@ -618,6 +618,8 @@ class CTransaction\n     bool ReadFromDisk(CTxDB& txdb, COutPoint prevout);\n     bool ReadFromDisk(COutPoint prevout);\n     bool DisconnectInputs(CTxDB& txdb);\n+\n+    // Fetch from memory and/or disk. inputsRet keys are transaction hashes.\n     bool FetchInputs(CTxDB& txdb, const std::map<uint256, CTxIndex>& mapTestPool,\n                      bool fBlock, bool fMiner, std::map<uint256, std::pair<CTxIndex, CTransaction> >& inputsRet);\n     bool ConnectInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > inputs,"
      },
      {
        "sha": "5487c01fabc1f5d18c98c25c0a00f85e7472c1df",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 57,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -70,7 +70,7 @@ static inline void popstack(vector<valtype>& stack)\n }\n \n \n-const char* GetTxnTypeName(txntype t)\n+const char* GetTxnOutputType(txnouttype t)\n {\n     switch (t)\n     {\n@@ -230,12 +230,12 @@ const char* GetOpName(opcodetype opcode)\n     }\n }\n \n-\n //\n // Returns true if script is valid.\n //\n bool EvalScriptInner(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType,\n-                     CScript::const_iterator pbegincodehash, CScript::const_iterator pendcodehash, int& nOpCount, int& nSigOpCount, int nRecurseDepth)\n+                     CScript::const_iterator pbegincodehash, CScript::const_iterator pendcodehash, int& nOpCount, int& nSigOpCount,\n+                     bool fStrictOpEval, int nRecurseDepth)\n {\n     CAutoBN_CTX pctx;\n     CScript::const_iterator pc = script.begin();\n@@ -1014,17 +1014,9 @@ bool EvalScriptInner(vector<vector<unsigned char> >& stack, const CScript& scrip\n \n                 case OP_EVAL:\n                 {\n-                    // This code should be removed when OP_EVAL has\n-                    // a majority of hashing power on the network.\n-                    // OP_EVAL behaves just like OP_NOP until\n-                    // opevaltime :\n-                    if (!fTestNet || fDebug)\n-                    {\n-                        // 1328054400 is Feb 1, 2012\n-                        int64 nEvalSwitchTime = GetArg(\"opevaltime\", 1328054400);\n-                        if (GetTime() < nEvalSwitchTime)\n-                            break;\n-                    }\n+                    if (!fStrictOpEval)\n+                        break; // Act as a NO_OP\n+\n \n                     // Evaluate the top item on the stack as a Script\n                     // [serialized script ] -- [result(s) of executing script]\n@@ -1034,12 +1026,14 @@ bool EvalScriptInner(vector<vector<unsigned char> >& stack, const CScript& scrip\n                     CScript subscript(vchScript.begin(), vchScript.end());\n                     popstack(stack);\n                     \n-                    // Codeseparators not allowed\n+                    // Codeseparators not allowed; they don't make sense 'inside' an OP_EVAL, because\n+                    // their purpose is to change which parts of the scriptPubKey script is copied\n+                    // and signed by OP_CHECKSIG, but OP_EVAl'ed code is in the scriptSig, not the scriptPubKey.\n                     if (subscript.Find(OP_CODESEPARATOR))\n                         return false;\n \n                     if (!EvalScriptInner(stack, subscript, txTo, nIn, nHashType,\n-                                         pbegincodehash, pendcodehash, nOpCount, nSigOpCount, nRecurseDepth++))\n+                                         pbegincodehash, pendcodehash, nOpCount, nSigOpCount, fStrictOpEval, nRecurseDepth++))\n                         return false;\n                 }\n                 break;\n@@ -1066,14 +1060,15 @@ bool EvalScriptInner(vector<vector<unsigned char> >& stack, const CScript& scrip\n }\n \n bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script,\n-                const CTransaction& txTo, unsigned int nIn, int nHashType, int& nSigOpCountRet)\n+                const CTransaction& txTo, unsigned int nIn, int nHashType,\n+                bool fStrictOpEval, int& nSigOpCountRet)\n {\n     CScript::const_iterator pbegincodehash = script.begin();\n     CScript::const_iterator pendcodehash = script.end();\n \n     int nOpCount = 0;\n     return EvalScriptInner(stack, script, txTo, nIn, nHashType, pbegincodehash, pendcodehash,\n-                           nOpCount, nSigOpCountRet, 0);\n+                           nOpCount, nSigOpCountRet, fStrictOpEval, 0);\n }\n \n \n@@ -1177,10 +1172,10 @@ bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CSc\n //\n // Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n //\n-bool Solver(const CScript& scriptPubKey, txntype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)\n+bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)\n {\n     // Templates\n-    static map<txntype, CScript> mTemplates;\n+    static map<txnouttype, CScript> mTemplates;\n     if (mTemplates.empty())\n     {\n         // Standard tx, sender provides pubkey, receiver adds signature\n@@ -1199,7 +1194,7 @@ bool Solver(const CScript& scriptPubKey, txntype& typeRet, vector<vector<unsigne\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    BOOST_FOREACH(const PAIRTYPE(txntype, CScript)& tplate, mTemplates)\n+    BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n     {\n         const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();\n@@ -1331,13 +1326,13 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n {\n     scriptSigRet.clear();\n \n-    txntype whichType;\n+    txnouttype whichType;\n     vector<valtype> vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n     CBitcoinAddress address;\n-    valtype subscript;\n+    CScript subscript;\n     switch (whichType)\n     {\n     case TX_NONSTANDARD:\n@@ -1359,10 +1354,11 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n     case TX_SCRIPTHASH:\n         if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n             return false;\n-        if (!Solver(keystore, CScript(subscript.begin(), subscript.end()), hash, nHashType, scriptSigRet))\n+        if (!Solver(keystore, subscript, hash, nHashType, scriptSigRet))\n             return false;\n         if (hash != 0)\n-            scriptSigRet << subscript; // signatures AND serialized script\n+            // static_cast to get vector.operator<< instead of CScript.operator<<\n+            scriptSigRet << static_cast<valtype>(subscript); // signatures AND serialized script\n         break;\n     case TX_MULTISIG:\n         scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n@@ -1375,7 +1371,7 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n bool IsStandard(const CScript& scriptPubKey)\n {\n     vector<valtype> vSolutions;\n-    txntype whichType;\n+    txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n@@ -1410,7 +1406,7 @@ int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n     vector<valtype> vSolutions;\n-    txntype whichType;\n+    txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n@@ -1427,10 +1423,10 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         return keystore.HaveKey(address);\n     case TX_SCRIPTHASH:\n     {\n-        valtype subscript;\n+        CScript subscript;\n         if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n             return false;\n-        return IsMine(keystore, CScript(subscript.begin(), subscript.end()));\n+        return IsMine(keystore, subscript);\n     }\n     case TX_MULTISIG:\n     {\n@@ -1449,7 +1445,7 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n {\n     vector<valtype> vSolutions;\n-    txntype whichType;\n+    txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n@@ -1472,7 +1468,7 @@ bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBit\n     return false;\n }\n \n-bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* keystore, txntype& typeRet, vector<CBitcoinAddress>& addressRet, int& nRequiredRet)\n+bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* keystore, txnouttype& typeRet, vector<CBitcoinAddress>& addressRet, int& nRequiredRet)\n {\n     addressRet.clear();\n     typeRet = TX_NONSTANDARD;\n@@ -1484,10 +1480,10 @@ bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* keystore, tx\n     {\n         nRequiredRet = vSolutions.front()[0];\n         int n = vSolutions.back()[0];\n-        for (vector<valtype>::const_iterator it = vSolutions.begin()+1; it != vSolutions.begin()+vSolutions.size()-1; it++)\n+        for (int i = 1; i < vSolutions.size()-1; i++)\n         {\n             CBitcoinAddress address;\n-            address.SetPubKey(*it);\n+            address.SetPubKey(vSolutions[i]);\n             addressRet.push_back(address);\n         }\n     }\n@@ -1507,12 +1503,13 @@ bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* keystore, tx\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet,\n+                  int nHashType, bool fStrictOpEval)\n {\n     vector<vector<unsigned char> > stack;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, nHashType, nSigOpCountRet))\n+    if (!EvalScript(stack, scriptSig, txTo, nIn, nHashType, fStrictOpEval, nSigOpCountRet))\n         return false;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, nHashType, nSigOpCountRet))\n+    if (!EvalScript(stack, scriptPubKey, txTo, nIn, nHashType, fStrictOpEval, nSigOpCountRet))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1521,24 +1518,8 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n     // This code should be removed when a compatibility-breaking block chain split has passed.\n     // Special check for OP_EVAL backwards-compatibility: if scriptPubKey or scriptSig contains\n     // OP_EVAL, then result must be identical if OP_EVAL is treated as a no-op:\n-    if (scriptSig.Find(OP_EVAL)+scriptPubKey.Find(OP_EVAL) > 0)\n-    {\n-        int nUnused = 0;\n-        stack.clear();\n-        CScript sigCopy = scriptSig;\n-        sigCopy.FindAndDelete(CScript(OP_EVAL));\n-        CScript pubKeyCopy = scriptPubKey;\n-        pubKeyCopy.FindAndDelete(CScript(OP_EVAL));\n-\n-        if (!EvalScript(stack, sigCopy, txTo, nIn, nHashType, nUnused))\n-            return false;\n-        if (!EvalScript(stack, pubKeyCopy, txTo, nIn, nHashType, nUnused))\n-            return false;\n-        if (stack.empty())\n-            return false;\n-        if (fResult != CastToBool(stack.back()))\n-            return false;\n-    }\n+    if (fResult && fStrictOpEval && (scriptPubKey.Find(OP_EVAL) || scriptSig.Find(OP_EVAL)))\n+        return VerifyScript(scriptSig, scriptPubKey, txTo, nIn, nSigOpCountRet, nHashType, false);\n \n     return fResult;\n }\n@@ -1563,14 +1544,14 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTrans\n     // Test solution\n     int nUnused = 0;\n     if (scriptPrereq.empty())\n-        if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nUnused, 0))\n+        if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nUnused, 0, true))\n             return false;\n \n     return true;\n }\n \n \n-bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType)\n+bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType, bool fStrictOpEval)\n {\n     assert(nIn < txTo.vin.size());\n     const CTxIn& txin = txTo.vin[nIn];\n@@ -1581,7 +1562,7 @@ bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsig\n     if (txin.prevout.hash != txFrom.GetHash())\n         return false;\n \n-    if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nSigOpCountRet, nHashType))\n+    if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nSigOpCountRet, nHashType, fStrictOpEval))\n         return false;\n \n     return true;"
      },
      {
        "sha": "b671e159632a8c061a54f26d9a5ed220482edb95",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -6,14 +6,14 @@\n #define H_BITCOIN_SCRIPT\n \n #include \"base58.h\"\n-#include \"keystore.h\"\n \n #include <string>\n #include <vector>\n \n #include <boost/foreach.hpp>\n \n class CTransaction;\n+class CKeyStore;\n \n enum\n {\n@@ -24,7 +24,7 @@ enum\n };\n \n \n-enum txntype\n+enum txnouttype\n {\n     TX_NONSTANDARD,\n     // 'standard' transaction types:\n@@ -34,7 +34,7 @@ enum txntype\n     TX_MULTISIG,\n };\n \n-const char* GetTxnTypeName(txntype t);\n+const char* GetTxnOutputType(txnouttype t);\n \n enum opcodetype\n {\n@@ -567,14 +567,14 @@ class CScript : public std::vector<unsigned char>\n \n \n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType, int& nSigOpCountRet);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType, bool fStrictOpEval, int& nSigOpCountRet);\n \n-bool Solver(const CScript& scriptPubKey, txntype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n+bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* pkeystore, CBitcoinAddress& addressRet);\n-bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* pkeystore, txntype& typeRet, std::vector<CBitcoinAddress>& addressRet, int& nRequiredRet);\n+bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* pkeystore, txnouttype& typeRet, std::vector<CBitcoinAddress>& addressRet, int& nRequiredRet);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL, CScript scriptPrereq=CScript());\n-bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType=0);\n+bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType=0, bool fStrictOpEval=true);\n \n #endif"
      },
      {
        "sha": "58f62b9542ef376a7378323d395b1237c2f4db23",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -20,7 +20,8 @@ using namespace boost::assign;\n typedef vector<unsigned char> valtype;\n \n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOpCount, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOpCount,\n+                         int nHashType, bool fStrictOpEval);\n \n BOOST_AUTO_TEST_SUITE(multisig_tests)\n \n@@ -80,19 +81,19 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0, true));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0, true), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0, true), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n@@ -102,16 +103,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         keys += key[i];\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0, true), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0, true), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0, true));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0, true));\n \n \n     for (int i = 0; i < 4; i++)\n@@ -121,9 +122,9 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys += key[i],key[j];\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, nUnused, 0), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, nUnused, 0, true), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, nUnused, 0), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, nUnused, 0, true), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n \n@@ -185,7 +186,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n \n     {\n         vector<valtype> solutions;\n-        txntype whichType;\n+        txnouttype whichType;\n         CScript s;\n         s << key[0].GetPubKey() << OP_CHECKSIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n@@ -198,7 +199,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n     }\n     {\n         vector<valtype> solutions;\n-        txntype whichType;\n+        txnouttype whichType;\n         CScript s;\n         s << OP_DUP << OP_HASH160 << Hash160(key[0].GetPubKey()) << OP_EQUALVERIFY << OP_CHECKSIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n@@ -211,7 +212,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n     }\n     {\n         vector<valtype> solutions;\n-        txntype whichType;\n+        txnouttype whichType;\n         CScript s;\n         s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n@@ -223,7 +224,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n     }\n     {\n         vector<valtype> solutions;\n-        txntype whichType;\n+        txnouttype whichType;\n         CScript s;\n         s << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n@@ -239,7 +240,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n     }\n     {\n         vector<valtype> solutions;\n-        txntype whichType;\n+        txnouttype whichType;\n         CScript s;\n         s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));"
      },
      {
        "sha": "c44642c6e990f285de066970ccffec91906eee03",
        "filename": "src/test/script_op_eval_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 28,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/test/script_op_eval_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/test/script_op_eval_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_op_eval_tests.cpp?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -13,24 +13,10 @@ using namespace std;\n \n // Test routines internal to script.cpp:\n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps,\n+                         int nHashType, bool fStrictOpEval);\n \n-static const int64 nEvalSwitchover = 1328054400;\n-\n-struct CEvalFixture {\n-    CEvalFixture()\n-    {\n-        // Set mock time to AFTER OP_EVAL deployed\n-        SetMockTime(nEvalSwitchover+1);\n-    }\n-    ~CEvalFixture()\n-    {\n-        // Reset back to use-real-time\n-        SetMockTime(0);\n-    }\n-};\n-\n-BOOST_FIXTURE_TEST_SUITE(script_op_eval_tests, CEvalFixture)\n+BOOST_AUTO_TEST_SUITE(script_op_eval_tests)\n \n BOOST_AUTO_TEST_CASE(script_op_eval1)\n {\n@@ -130,8 +116,8 @@ BOOST_AUTO_TEST_CASE(script_op_eval2)\n     txTo.vout[0].nValue = 1;\n \n     int nUnused = 0;\n-    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0));\n-    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused));\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused, true));\n }\n \n BOOST_AUTO_TEST_CASE(script_op_eval3)\n@@ -212,13 +198,13 @@ BOOST_AUTO_TEST_CASE(script_op_eval_backcompat1)\n     txTo.vout[0].nValue = 1;\n \n     int nUnused = 0;\n-    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0));\n-    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused));\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused, true));\n }\n \n BOOST_AUTO_TEST_CASE(script_op_eval_switchover)\n {\n-    // Use SetMockTime to test OP_EVAL switchover code\n+    // Test OP_EVAL switchover code\n     CScript notValid;\n     notValid << OP_11 << OP_12 << OP_EQUALVERIFY;\n \n@@ -238,14 +224,11 @@ BOOST_AUTO_TEST_CASE(script_op_eval_switchover)\n     txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(notValid);\n     txTo.vout[0].nValue = 1;\n \n-    SetMockTime(nEvalSwitchover-1);\n-\n     int nUnused = 0;\n-    BOOST_CHECK(VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0));\n+    BOOST_CHECK(VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, false));\n \n-    // After eval switchover time, it should validate:\n-    SetMockTime(nEvalSwitchover);\n-    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0));\n+    // Under strict op_eval switchover, it should be considered invalid:\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "22885a64387b5fc8e60f6dabff1de8acadd34709",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -7,8 +7,8 @@\n \n using namespace std;\n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps, int nHashType);\n-extern bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps,\n+                         int nHashType, bool fStrictOpEval);\n \n BOOST_AUTO_TEST_SUITE(script_tests)\n \n@@ -24,18 +24,18 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     int nUnused = 0;\n \n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, 0, nUnused));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, 0, true, nUnused));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, 0, nUnused));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, 0, true, nUnused));\n     BOOST_CHECK(pushdata1Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, 0, nUnused));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, 0, true, nUnused));\n     BOOST_CHECK(pushdata2Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, 0, nUnused));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, 0, true, nUnused));\n     BOOST_CHECK(pushdata4Stack == directStack);\n }\n \n@@ -94,15 +94,15 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     txTo12.vout[0].nValue = 1;\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, nUnused, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, nUnused, 0, true));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, nUnused, 0, true));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, nUnused, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, nUnused, 0, true));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, nUnused, 0, true));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n@@ -131,46 +131,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, nUnused, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, nUnused, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, nUnused, 0));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, nUnused, 0));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n }    \n \n "
      },
      {
        "sha": "7540e9cc5ff65fd4f5a147c9d7e099c00bd1b265",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -42,13 +42,13 @@ bool CWallet::AddCryptedKey(const vector<unsigned char> &vchPubKey, const vector\n     return false;\n }\n \n-bool CWallet::AddCScript(const uint160 &hash, const std::vector<unsigned char>& data)\n+bool CWallet::AddCScript(const uint160 &hash, const CScript& redeemScript)\n {\n-    if (!CCryptoKeyStore::AddCScript(hash, data))\n+    if (!CCryptoKeyStore::AddCScript(hash, redeemScript))\n         return false;\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteCScript(hash, data);\n+    return CWalletDB(strWalletFile).WriteCScript(hash, redeemScript);\n }\n \n bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n@@ -377,6 +377,14 @@ int64 CWallet::GetDebit(const CTxIn &txin) const\n bool CWallet::IsChange(const CTxOut& txout) const\n {\n     CBitcoinAddress address;\n+\n+    // TODO: fix handling of 'change' outputs. The assumption is that any\n+    // payment to a TX_PUBKEYHASH that is mine but isn't in the address book\n+    // is change. That assumption is likely to break when we implement multisignature\n+    // wallets that return change back into a multi-signature-protected address;\n+    // a better way of identifying which outputs are 'the send' and which are\n+    // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n+    // which output, if any, was change).\n     if (ExtractAddress(txout.scriptPubKey, this, address) && !address.IsScript())\n         CRITICAL_BLOCK(cs_wallet)\n             if (!mapAddressBook.count(address))"
      },
      {
        "sha": "23cbf292ea119bcdfcffb964210b225aeab39503",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/186b01d8f07ae7915efb75900f7ff9de5b969c85/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"bignum.h\"\n #include \"key.h\"\n+#include \"keystore.h\"\n #include \"script.h\"\n \n class CWalletTx;\n@@ -69,8 +70,8 @@ class CWallet : public CCryptoKeyStore\n     bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     // Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }\n-    bool AddCScript(const uint160& hash, const std::vector<unsigned char>& data);\n-    bool LoadCScript(const uint160& hash, const std::vector<unsigned char>& data) { return CCryptoKeyStore::AddCScript(hash, data); }\n+    bool AddCScript(const uint160& hash, const CScript& redeemScript);\n+    bool LoadCScript(const uint160& hash, const CScript& redeemScript) { return CCryptoKeyStore::AddCScript(hash, redeemScript); }\n \n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);"
      }
    ]
  },
  {
    "sha": "b6084f158313c50f7bb4e9b90ce2ac20adfce1ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjA4NGYxNTgzMTNjNTBmN2JiNGU5YjkwY2UyYWMyMGFkZmNlMWJh",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-05T15:32:35Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-05T15:32:35Z"
      },
      "message": "Fix logic for IsChange() for send-to-self transactions.",
      "tree": {
        "sha": "19a9f64af357d565889f40042d9b3b4bb23c5040",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19a9f64af357d565889f40042d9b3b4bb23c5040"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6084f158313c50f7bb4e9b90ce2ac20adfce1ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6084f158313c50f7bb4e9b90ce2ac20adfce1ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6084f158313c50f7bb4e9b90ce2ac20adfce1ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6084f158313c50f7bb4e9b90ce2ac20adfce1ba/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/186b01d8f07ae7915efb75900f7ff9de5b969c85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/186b01d8f07ae7915efb75900f7ff9de5b969c85"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c29a312bdc6eae2243ed59eb2501588aff235d4a",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6084f158313c50f7bb4e9b90ce2ac20adfce1ba/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6084f158313c50f7bb4e9b90ce2ac20adfce1ba/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=b6084f158313c50f7bb4e9b90ce2ac20adfce1ba",
        "patch": "@@ -385,7 +385,7 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     // a better way of identifying which outputs are 'the send' and which are\n     // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n     // which output, if any, was change).\n-    if (ExtractAddress(txout.scriptPubKey, this, address) && !address.IsScript())\n+    if (ExtractAddress(txout.scriptPubKey, this, address))\n         CRITICAL_BLOCK(cs_wallet)\n             if (!mapAddressBook.count(address))\n                 return true;"
      }
    ]
  },
  {
    "sha": "a880b29cab0fe95161b54b61159321021d5a3219",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODgwYjI5Y2FiMGZlOTUxNjFiNTRiNjExNTkzMjEwMjFkNWEzMjE5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:03:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:06:21Z"
      },
      "message": "Bugfix: fForRelay should be false when deciding required fee to include in blocks\n\nDuring the rushed transition from 0.01 BTC to 0.0005 BTC fees, we took the\napproach of dropping the relay and block-inclusion fee to 0.0005 BTC\nimmediately, and only delayed adjusting the sending fee for the next release.\nAfterward, the relay fee was lowered to 0.0001 BTC to avoid having the same\nproblem in the future. However, the block inclusion code was left setting\nfForRelay to true! This fixes that, so the lower 0.0001 BTC allowance is (as\nintended) only permitted for real relaying.",
      "tree": {
        "sha": "6373c718e5627140857662490c90e1686015e01a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6373c718e5627140857662490c90e1686015e01a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a880b29cab0fe95161b54b61159321021d5a3219",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a880b29cab0fe95161b54b61159321021d5a3219",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a880b29cab0fe95161b54b61159321021d5a3219",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a880b29cab0fe95161b54b61159321021d5a3219/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7eb151ad0ed441d6fd598551059a9bbfb09e99e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7eb151ad0ed441d6fd598551059a9bbfb09e99e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7eb151ad0ed441d6fd598551059a9bbfb09e99e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "59db0aaf047389eb8d146cfc50b9cbc3ab32532a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a880b29cab0fe95161b54b61159321021d5a3219/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a880b29cab0fe95161b54b61159321021d5a3219/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a880b29cab0fe95161b54b61159321021d5a3219",
        "patch": "@@ -2757,7 +2757,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n-            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, true);\n+            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree);\n \n             // Connecting shouldn't fail due to dependency on other memory pool transactions\n             // because we're already processing them in order of dependency"
      }
    ]
  },
  {
    "sha": "dbbf1d4a48c8761a67a4477bef48f17c0badef7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmJmMWQ0YTQ4Yzg3NjFhNjdhNDQ3N2JlZjQ4ZjE3YzBiYWRlZjdi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-03T16:55:47Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:07:43Z"
      },
      "message": "GetMinFee takes a mode parameter (GMF_{BLOCK,RELAY,SEND}) instead of fForRelay",
      "tree": {
        "sha": "86c34a2d373dd816cd13d48d21a1505d5c227737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86c34a2d373dd816cd13d48d21a1505d5c227737"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbbf1d4a48c8761a67a4477bef48f17c0badef7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbbf1d4a48c8761a67a4477bef48f17c0badef7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbbf1d4a48c8761a67a4477bef48f17c0badef7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbbf1d4a48c8761a67a4477bef48f17c0badef7b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a880b29cab0fe95161b54b61159321021d5a3219",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a880b29cab0fe95161b54b61159321021d5a3219",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a880b29cab0fe95161b54b61159321021d5a3219"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 13,
      "deletions": 5
    },
    "files": [
      {
        "sha": "807279a55366f78dd03dcbeaa45369778d7e6309",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbbf1d4a48c8761a67a4477bef48f17c0badef7b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbbf1d4a48c8761a67a4477bef48f17c0badef7b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dbbf1d4a48c8761a67a4477bef48f17c0badef7b",
        "patch": "@@ -419,7 +419,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n         }\n \n         // Don't accept it if it can't get into a block\n-        if (nFees < GetMinFee(1000, true, true))\n+        if (nFees < GetMinFee(1000, true, GMF_RELAY))\n             return error(\"AcceptToMemoryPool() : not enough fees\");\n \n         // Continuously rate-limit free transactions\n@@ -2757,7 +2757,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n-            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree);\n+            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);\n \n             // Connecting shouldn't fail due to dependency on other memory pool transactions\n             // because we're already processing them in order of dependency"
      },
      {
        "sha": "a699331884daf33563f44a826673364b5610b889",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbbf1d4a48c8761a67a4477bef48f17c0badef7b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbbf1d4a48c8761a67a4477bef48f17c0badef7b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=dbbf1d4a48c8761a67a4477bef48f17c0badef7b",
        "patch": "@@ -387,6 +387,13 @@ class CTxOut\n \n \n \n+enum GetMinFee_mode\n+{\n+    GMF_BLOCK,\n+    GMF_RELAY,\n+    GMF_SEND,\n+};\n+\n //\n // The basic transaction that is broadcasted on the network and contained in\n // blocks.  A transaction can contain multiple inputs and outputs.\n@@ -523,10 +530,10 @@ class CTransaction\n         return dPriority > COIN * 144 / 250;\n     }\n \n-    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, bool fForRelay=false) const\n+    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const\n     {\n         // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n-        int64 nBaseFee = fForRelay ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n+        int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n \n         unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK);\n         unsigned int nNewBlockSize = nBlockSize + nBytes;"
      },
      {
        "sha": "2c5aa03aad0a223824d8a44a8008ef09dd37c640",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbbf1d4a48c8761a67a4477bef48f17c0badef7b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbbf1d4a48c8761a67a4477bef48f17c0badef7b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=dbbf1d4a48c8761a67a4477bef48f17c0badef7b",
        "patch": "@@ -931,6 +931,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 int64 nChange = nValueIn - nValue - nFeeRet;\n                 // if sub-cent change is required, the fee must be raised to at least MIN_TX_FEE\n                 // or until nChange becomes zero\n+                // NOTE: this depends on the exact behaviour of GetMinFee\n                 if (nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n                 {\n                     int64 nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n@@ -984,7 +985,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 // Check that enough fee is included\n                 int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n                 bool fAllowFree = CTransaction::AllowFree(dPriority);\n-                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree);\n+                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);"
      }
    ]
  },
  {
    "sha": "f654eef53fd8aa928b2e08f46e90526a49ba5024",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjU0ZWVmNTNmZDhhYTkyOGIyZTA4ZjQ2ZTkwNTI2YTQ5YmE1MDI0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:09:08Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:09:08Z"
      },
      "message": "Merge branch 'minfee_modes' into next",
      "tree": {
        "sha": "846b61eb0efe3fc527030eaa863ce792f84baf5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/846b61eb0efe3fc527030eaa863ce792f84baf5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f654eef53fd8aa928b2e08f46e90526a49ba5024",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f654eef53fd8aa928b2e08f46e90526a49ba5024",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f654eef53fd8aa928b2e08f46e90526a49ba5024",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f654eef53fd8aa928b2e08f46e90526a49ba5024/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b12fc3e11223557855bb2394e1097afbf0de0b79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b12fc3e11223557855bb2394e1097afbf0de0b79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b12fc3e11223557855bb2394e1097afbf0de0b79"
      },
      {
        "sha": "dbbf1d4a48c8761a67a4477bef48f17c0badef7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbbf1d4a48c8761a67a4477bef48f17c0badef7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbbf1d4a48c8761a67a4477bef48f17c0badef7b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 13,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6005f25408a94462cc5f61c531044d1d00c8bbe7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f654eef53fd8aa928b2e08f46e90526a49ba5024/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f654eef53fd8aa928b2e08f46e90526a49ba5024/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f654eef53fd8aa928b2e08f46e90526a49ba5024",
        "patch": "@@ -427,7 +427,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n         }\n \n         // Don't accept it if it can't get into a block\n-        if (nFees < GetMinFee(1000, true, true))\n+        if (nFees < GetMinFee(1000, true, GMF_RELAY))\n             return error(\"AcceptToMemoryPool() : not enough fees\");\n \n         // Continuously rate-limit free transactions\n@@ -2828,7 +2828,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n-            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, true);\n+            int64 nMinFee = tx.GetMinFee(nBlockSize, fAllowFree, GMF_BLOCK);\n \n             // Connecting shouldn't fail due to dependency on other memory pool transactions\n             // because we're already processing them in order of dependency"
      },
      {
        "sha": "6a5533341e819931c981c86ae71fd8290dc7efe8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f654eef53fd8aa928b2e08f46e90526a49ba5024/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f654eef53fd8aa928b2e08f46e90526a49ba5024/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f654eef53fd8aa928b2e08f46e90526a49ba5024",
        "patch": "@@ -389,6 +389,13 @@ class CTxOut\n \n \n \n+enum GetMinFee_mode\n+{\n+    GMF_BLOCK,\n+    GMF_RELAY,\n+    GMF_SEND,\n+};\n+\n //\n // The basic transaction that is broadcasted on the network and contained in\n // blocks.  A transaction can contain multiple inputs and outputs.\n@@ -529,10 +536,10 @@ class CTransaction\n         return dPriority > COIN * 144 / 250;\n     }\n \n-    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, bool fForRelay=false) const\n+    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const\n     {\n         // Base fee is either MIN_TX_FEE or MIN_RELAY_TX_FEE\n-        int64 nBaseFee = fForRelay ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n+        int64 nBaseFee = (mode == GMF_RELAY) ? MIN_RELAY_TX_FEE : MIN_TX_FEE;\n \n         unsigned int nBytes = ::GetSerializeSize(*this, SER_NETWORK);\n         unsigned int nNewBlockSize = nBlockSize + nBytes;"
      },
      {
        "sha": "28532de1c8f46942fe624f7c715ad43f3f08b90c",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f654eef53fd8aa928b2e08f46e90526a49ba5024/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f654eef53fd8aa928b2e08f46e90526a49ba5024/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=f654eef53fd8aa928b2e08f46e90526a49ba5024",
        "patch": "@@ -959,6 +959,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 int64 nChange = nValueIn - nValue - nFeeRet;\n                 // if sub-cent change is required, the fee must be raised to at least MIN_TX_FEE\n                 // or until nChange becomes zero\n+                // NOTE: this depends on the exact behaviour of GetMinFee\n                 if (nFeeRet < MIN_TX_FEE && nChange > 0 && nChange < CENT)\n                 {\n                     int64 nMoveToFee = min(nChange, MIN_TX_FEE - nFeeRet);\n@@ -1012,7 +1013,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                 // Check that enough fee is included\n                 int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n                 bool fAllowFree = CTransaction::AllowFree(dPriority);\n-                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree);\n+                int64 nMinFee = wtxNew.GetMinFee(1, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);"
      }
    ]
  },
  {
    "sha": "3765dbfb38e23a814c3df1985cf198db27bc5848",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzY1ZGJmYjM4ZTIzYTgxNGMzZGYxOTg1Y2YxOThkYjI3YmM1ODQ4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-10-11T02:56:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:12:03Z"
      },
      "message": "Bitcoin-Qt signmessage GUI",
      "tree": {
        "sha": "ecf19aa8650523b32cb4c7b8201bf67818e771e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecf19aa8650523b32cb4c7b8201bf67818e771e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3765dbfb38e23a814c3df1985cf198db27bc5848",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3765dbfb38e23a814c3df1985cf198db27bc5848",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3765dbfb38e23a814c3df1985cf198db27bc5848",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3765dbfb38e23a814c3df1985cf198db27bc5848/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b12fc3e11223557855bb2394e1097afbf0de0b79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b12fc3e11223557855bb2394e1097afbf0de0b79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b12fc3e11223557855bb2394e1097afbf0de0b79"
      }
    ],
    "stats": {
      "total": 398,
      "additions": 396,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b026574f274b69bc84d4063448b65d7e0e42a4bd",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -83,6 +83,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/optionsdialog.h \\\n     src/qt/sendcoinsdialog.h \\\n     src/qt/addressbookpage.h \\\n+    src/qt/messagepage.h \\\n     src/qt/aboutdialog.h \\\n     src/qt/editaddressdialog.h \\\n     src/qt/bitcoinaddressvalidator.h \\\n@@ -144,6 +145,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/optionsdialog.cpp \\\n     src/qt/sendcoinsdialog.cpp \\\n     src/qt/addressbookpage.cpp \\\n+    src/qt/messagepage.cpp \\\n     src/qt/aboutdialog.cpp \\\n     src/qt/editaddressdialog.cpp \\\n     src/qt/bitcoinaddressvalidator.cpp \\\n@@ -190,6 +192,7 @@ RESOURCES += \\\n FORMS += \\\n     src/qt/forms/sendcoinsdialog.ui \\\n     src/qt/forms/addressbookpage.ui \\\n+    src/qt/forms/messagepage.ui \\\n     src/qt/forms/aboutdialog.ui \\\n     src/qt/forms/editaddressdialog.ui \\\n     src/qt/forms/transactiondescdialog.ui \\"
      },
      {
        "sha": "ed2b1d892ba98bac941384f7fb8c9a1d425d089c",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -532,8 +532,6 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-static const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n-\n Value signmessage(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)"
      },
      {
        "sha": "751aa738faf3fcd933750bc9731db65a13b908f0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -48,6 +48,9 @@ map<uint256, CDataStream*> mapOrphanTransactions;\n multimap<uint256, CDataStream*> mapOrphanTransactionsByPrev;\n \n \n+const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+\n+\n double dHashesPerSec;\n int64 nHPSTimerStart;\n "
      },
      {
        "sha": "c5e683ff6432ba0c69a624667db4d36fe28f873d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -60,6 +60,7 @@ extern CBigNum bnBestInvalidWork;\n extern uint256 hashBestChain;\n extern CBlockIndex* pindexBest;\n extern unsigned int nTransactionsUpdated;\n+extern const std::string strMessageMagic;\n extern double dHashesPerSec;\n extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;"
      },
      {
        "sha": "80e61acce5c0160bdfdea1ed7e4a287f48d798c0",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -2,6 +2,7 @@\n #include \"ui_addressbookpage.h\"\n \n #include \"addresstablemodel.h\"\n+#include \"bitcoingui.h\"\n #include \"editaddressdialog.h\"\n #include \"csvmodelwriter.h\"\n \n@@ -114,6 +115,24 @@ void AddressBookPage::on_copyToClipboard_clicked()\n     }\n }\n \n+void AddressBookPage::on_signMessage_clicked()\n+{\n+    QTableView *table = ui->tableView;\n+    QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n+    QString addr;\n+\n+    foreach (QModelIndex index, indexes)\n+    {\n+        QVariant address = index.data();\n+        addr = address.toString();\n+    }\n+\n+    QObject *qoGUI = parent()->parent();\n+    BitcoinGUI *gui = qobject_cast<BitcoinGUI *>(qoGUI);\n+    if (gui)\n+        gui->gotoMessagePage(addr);\n+}\n+\n void AddressBookPage::on_newAddressButton_clicked()\n {\n     if(!model)\n@@ -163,9 +182,11 @@ void AddressBookPage::selectionChanged()\n         {\n         case SendingTab:\n             ui->deleteButton->setEnabled(true);\n+            ui->signMessage->setEnabled(false);\n             break;\n         case ReceivingTab:\n             ui->deleteButton->setEnabled(false);\n+            ui->signMessage->setEnabled(true);\n             break;\n         }\n         ui->copyToClipboard->setEnabled(true);\n@@ -174,6 +195,7 @@ void AddressBookPage::selectionChanged()\n     {\n         ui->deleteButton->setEnabled(false);\n         ui->copyToClipboard->setEnabled(false);\n+        ui->signMessage->setEnabled(false);\n     }\n }\n "
      },
      {
        "sha": "baed3917b41bf1e0d92c9d227830a20631ae308f",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -53,6 +53,7 @@ private slots:\n     void on_deleteButton_clicked();\n     void on_newAddressButton_clicked();\n     void on_copyToClipboard_clicked();\n+    void on_signMessage_clicked();\n     void selectionChanged();\n };\n "
      },
      {
        "sha": "fdcec77826804ddf115e839d3c9c9f48e7b42639",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -8,6 +8,7 @@\n #include \"transactiontablemodel.h\"\n #include \"addressbookpage.h\"\n #include \"sendcoinsdialog.h\"\n+#include \"messagepage.h\"\n #include \"optionsdialog.h\"\n #include \"aboutdialog.h\"\n #include \"clientmodel.h\"\n@@ -98,12 +99,15 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n \n     sendCoinsPage = new SendCoinsDialog(this);\n \n+    messagePage = new MessagePage(this);\n+\n     centralWidget = new QStackedWidget(this);\n     centralWidget->addWidget(overviewPage);\n     centralWidget->addWidget(transactionsPage);\n     centralWidget->addWidget(addressBookPage);\n     centralWidget->addWidget(receiveCoinsPage);\n     centralWidget->addWidget(sendCoinsPage);\n+    centralWidget->addWidget(messagePage);\n     setCentralWidget(centralWidget);\n \n     // Create status bar\n@@ -192,6 +196,11 @@ void BitcoinGUI::createActions()\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n \n+    messageAction = new QAction(QIcon(\":/icons/edit\"), tr(\"Sign &message\"), this);\n+    messageAction->setToolTip(tr(\"Prove you control an address\"));\n+    messageAction->setCheckable(true);\n+    tabGroup->addAction(messageAction);\n+\n     connect(overviewAction, SIGNAL(triggered()), this, SLOT(show()));\n     connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(show()));\n@@ -202,6 +211,8 @@ void BitcoinGUI::createActions()\n     connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n     connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(show()));\n     connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n+    connect(messageAction, SIGNAL(triggered()), this, SLOT(show()));\n+    connect(messageAction, SIGNAL(triggered()), this, SLOT(gotoMessagePage()));\n \n     quitAction = new QAction(QIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n     quitAction->setToolTip(tr(\"Quit application\"));\n@@ -264,6 +275,9 @@ void BitcoinGUI::createToolBars()\n     toolbar->addAction(receiveCoinsAction);\n     toolbar->addAction(historyAction);\n     toolbar->addAction(addressBookAction);\n+#ifdef FIRST_CLASS_MESSAGING\n+    toolbar->addAction(messageAction);\n+#endif\n \n     QToolBar *toolbar2 = addToolBar(tr(\"Actions toolbar\"));\n     toolbar2->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);\n@@ -318,6 +332,7 @@ void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n         addressBookPage->setModel(walletModel->getAddressTableModel());\n         receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n         sendCoinsPage->setModel(walletModel);\n+        messagePage->setModel(walletModel);\n \n         setEncryptionStatus(walletModel->getEncryptionStatus());\n         connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n@@ -353,6 +368,7 @@ void BitcoinGUI::createTrayIcon()\n     // Configuration of the tray icon (or dock icon) icon menu\n     trayIconMenu->addAction(openBitcoinAction);\n     trayIconMenu->addSeparator();\n+    trayIconMenu->addAction(messageAction);\n     trayIconMenu->addAction(receiveCoinsAction);\n     trayIconMenu->addAction(sendCoinsAction);\n     trayIconMenu->addSeparator();\n@@ -644,6 +660,21 @@ void BitcoinGUI::gotoSendCoinsPage()\n     disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n }\n \n+void BitcoinGUI::gotoMessagePage()\n+{\n+    messageAction->setChecked(true);\n+    centralWidget->setCurrentWidget(messagePage);\n+\n+    exportAction->setEnabled(false);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+}\n+\n+void BitcoinGUI::gotoMessagePage(QString addr)\n+{\n+    gotoMessagePage();\n+    messagePage->setAddress(addr);\n+}\n+\n void BitcoinGUI::dragEnterEvent(QDragEnterEvent *event)\n {\n     // Accept only URLs"
      },
      {
        "sha": "164d2b91ec40cf30f26d93fe724aefa77849ec64",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -11,6 +11,7 @@ class TransactionView;\n class OverviewPage;\n class AddressBookPage;\n class SendCoinsDialog;\n+class MessagePage;\n class Notificator;\n \n QT_BEGIN_NAMESPACE\n@@ -62,6 +63,7 @@ class BitcoinGUI : public QMainWindow\n     AddressBookPage *addressBookPage;\n     AddressBookPage *receiveCoinsPage;\n     SendCoinsDialog *sendCoinsPage;\n+    MessagePage *messagePage;\n \n     QLabel *labelEncryptionIcon;\n     QLabel *labelConnectionsIcon;\n@@ -75,6 +77,7 @@ class BitcoinGUI : public QMainWindow\n     QAction *quitAction;\n     QAction *sendCoinsAction;\n     QAction *addressBookAction;\n+    QAction *messageAction;\n     QAction *aboutAction;\n     QAction *receiveCoinsAction;\n     QAction *optionsAction;\n@@ -123,6 +126,9 @@ public slots:\n     */\n     void askFee(qint64 nFeeRequired, bool *payFee);\n \n+    void gotoMessagePage();\n+    void gotoMessagePage(QString);\n+\n private slots:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();"
      },
      {
        "sha": "f3b5c455b5fb22e45b9e883ebb40c2e49a0a9993",
        "filename": "src/qt/forms/addressbookpage.ui",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/forms/addressbookpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/forms/addressbookpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/addressbookpage.ui?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -79,6 +79,20 @@\n        </property>\n       </widget>\n      </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"signMessage\">\n+       <property name=\"toolTip\">\n+        <string>Sign a message to prove you own this address</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>&amp;Sign Message</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/edit</normaloff>:/icons/edit</iconset>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QPushButton\" name=\"deleteButton\">\n        <property name=\"toolTip\">"
      },
      {
        "sha": "8afa4b59ddf9a4abc5bc203a499c2247f91a2a06",
        "filename": "src/qt/forms/messagepage.ui",
        "status": "added",
        "additions": 170,
        "deletions": 0,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/forms/messagepage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/forms/messagepage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/messagepage.ui?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -0,0 +1,170 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>MessagePage</class>\n+ <widget class=\"QWidget\" name=\"MessagePage\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>627</width>\n+    <height>380</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Message</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"labelExplanation\">\n+     <property name=\"text\">\n+      <string>You can sign messages with your addresses to prove you own them. Be careful to only sign statement you agree to with full details, as phishing attacks may try to trick you into signing access to them.</string>\n+     </property>\n+     <property name=\"textFormat\">\n+      <enum>Qt::AutoText</enum>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3\">\n+     <property name=\"spacing\">\n+      <number>0</number>\n+     </property>\n+     <item>\n+      <widget class=\"QValidatedLineEdit\" name=\"signFrom\">\n+       <property name=\"toolTip\">\n+        <string>The address to send the payment to  (e.g. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)</string>\n+       </property>\n+       <property name=\"maxLength\">\n+        <number>34</number>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"addressBookButton\">\n+       <property name=\"toolTip\">\n+        <string>Choose adress from address book</string>\n+       </property>\n+       <property name=\"text\">\n+        <string/>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/address-book</normaloff>:/icons/address-book</iconset>\n+       </property>\n+       <property name=\"shortcut\">\n+        <string>Alt+A</string>\n+       </property>\n+       <property name=\"autoDefault\">\n+        <bool>false</bool>\n+       </property>\n+       <property name=\"flat\">\n+        <bool>false</bool>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"pasteButton\">\n+       <property name=\"toolTip\">\n+        <string>Paste address from clipboard</string>\n+       </property>\n+       <property name=\"text\">\n+        <string/>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/editpaste</normaloff>:/icons/editpaste</iconset>\n+       </property>\n+       <property name=\"shortcut\">\n+        <string>Alt+P</string>\n+       </property>\n+       <property name=\"autoDefault\">\n+        <bool>false</bool>\n+       </property>\n+      </widget>\n+     </item>\n+    </layout>\n+   </item>\n+   <item>\n+    <widget class=\"QPlainTextEdit\" name=\"message\">\n+     <property name=\"toolTip\">\n+      <string>Enter the message you want to sign here</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLineEdit\" name=\"signature\">\n+     <property name=\"font\">\n+      <font>\n+       <italic>true</italic>\n+      </font>\n+     </property>\n+     <property name=\"text\">\n+      <string>Click &quot;Sign Message&quot; to get signature</string>\n+     </property>\n+     <property name=\"readOnly\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+     <item>\n+      <widget class=\"QPushButton\" name=\"signMessage\">\n+       <property name=\"toolTip\">\n+        <string>Sign a message to prove you own this address</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>&amp;Sign Message</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/edit</normaloff>:/icons/edit</iconset>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"copyToClipboard\">\n+       <property name=\"toolTip\">\n+        <string>Copy the currently selected address to the system clipboard</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>&amp;Copy to Clipboard</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/editcopy</normaloff>:/icons/editcopy</iconset>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <spacer name=\"horizontalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>40</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+    </layout>\n+   </item>\n+  </layout>\n+ </widget>\n+ <customwidgets>\n+  <customwidget>\n+   <class>QValidatedLineEdit</class>\n+   <extends>QLineEdit</extends>\n+   <header>qvalidatedlineedit.h</header>\n+  </customwidget>\n+ </customwidgets>\n+ <resources>\n+  <include location=\"../bitcoin.qrc\"/>\n+ </resources>\n+ <connections/>\n+</ui>"
      },
      {
        "sha": "dee1837ed67483c05d0f9e8aa50caf114bfde25d",
        "filename": "src/qt/messagepage.cpp",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/messagepage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/messagepage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/messagepage.cpp?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -0,0 +1,107 @@\n+#include <string>\n+#include <vector>\n+\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"init.h\"\n+#include \"util.h\"\n+\n+#include \"messagepage.h\"\n+#include \"ui_messagepage.h\"\n+\n+#include \"addressbookpage.h\"\n+#include \"guiutil.h\"\n+#include \"walletmodel.h\"\n+\n+#include <QClipboard>\n+#include <QInputDialog>\n+#include <QList>\n+#include <QListWidgetItem>\n+#include <QMessageBox>\n+\n+MessagePage::MessagePage(QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::MessagePage)\n+{\n+    ui->setupUi(this);\n+\n+    GUIUtil::setupAddressWidget(ui->signFrom, this);\n+}\n+\n+MessagePage::~MessagePage()\n+{\n+    delete ui;\n+}\n+\n+void MessagePage::setModel(WalletModel *model)\n+{\n+    this->model = model;\n+}\n+\n+void MessagePage::setAddress(QString addr)\n+{\n+    ui->signFrom->setText(addr);\n+    ui->message->setFocus();\n+}\n+\n+void MessagePage::on_pasteButton_clicked()\n+{\n+    setAddress(QApplication::clipboard()->text());\n+}\n+\n+void MessagePage::on_addressBookButton_clicked()\n+{\n+    AddressBookPage dlg(AddressBookPage::ForSending, AddressBookPage::ReceivingTab, this);\n+    dlg.setModel(model->getAddressTableModel());\n+    if(dlg.exec())\n+    {\n+        setAddress(dlg.getReturnValue());\n+    }\n+}\n+\n+void MessagePage::on_copyToClipboard_clicked()\n+{\n+    QApplication::clipboard()->setText(ui->signature->text());\n+}\n+\n+void MessagePage::on_signMessage_clicked()\n+{\n+    QString address = ui->signFrom->text();\n+\n+    CBitcoinAddress addr(address.toStdString());\n+    if (!addr.IsValid())\n+    {\n+        QMessageBox::critical(this, tr(\"Error signing\"), tr(\"%1 is not a valid address.\").arg(address),\n+                              QMessageBox::Abort, QMessageBox::Abort);\n+        return;\n+    }\n+\n+    WalletModel::UnlockContext ctx(model->requestUnlock());\n+    if(!ctx.isValid())\n+    {\n+        // Unlock wallet was cancelled\n+        return;\n+    }\n+\n+    CKey key;\n+    if (!pwalletMain->GetKey(addr, key))\n+    {\n+        QMessageBox::critical(this, tr(\"Error signing\"), tr(\"Private key for %1 is not available.\").arg(address),\n+                              QMessageBox::Abort, QMessageBox::Abort);\n+        return;\n+    }\n+\n+    CDataStream ss(SER_GETHASH);\n+    ss << strMessageMagic;\n+    ss << ui->message->document()->toPlainText().toStdString();\n+\n+    std::vector<unsigned char> vchSig;\n+    if (!key.SignCompact(Hash(ss.begin(), ss.end()), vchSig))\n+    {\n+        QMessageBox::critical(this, tr(\"Error signing\"), tr(\"Sign failed\"),\n+                              QMessageBox::Abort, QMessageBox::Abort);\n+    }\n+\n+    ui->signature->setText(QString::fromStdString(EncodeBase64(&vchSig[0], vchSig.size())));\n+    ui->signature->setFont(GUIUtil::bitcoinAddressFont());\n+}"
      },
      {
        "sha": "55e6228124c5219e33c9e3bdfb7d6d8e4750b549",
        "filename": "src/qt/messagepage.h",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/messagepage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3765dbfb38e23a814c3df1985cf198db27bc5848/src/qt/messagepage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/messagepage.h?ref=3765dbfb38e23a814c3df1985cf198db27bc5848",
        "patch": "@@ -0,0 +1,38 @@\n+#ifndef MESSAGEPAGE_H\n+#define MESSAGEPAGE_H\n+\n+#include <QDialog>\n+\n+namespace Ui {\n+    class MessagePage;\n+}\n+class WalletModel;\n+\n+QT_BEGIN_NAMESPACE\n+QT_END_NAMESPACE\n+\n+class MessagePage : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit MessagePage(QWidget *parent = 0);\n+    ~MessagePage();\n+\n+    void setModel(WalletModel *model);\n+\n+    void setAddress(QString);\n+\n+private:\n+    Ui::MessagePage *ui;\n+    WalletModel *model;\n+\n+private slots:\n+    void on_pasteButton_clicked();\n+    void on_addressBookButton_clicked();\n+\n+    void on_signMessage_clicked();\n+    void on_copyToClipboard_clicked();\n+};\n+\n+#endif // MESSAGEPAGE_H"
      }
    ]
  },
  {
    "sha": "791cdec5faac33e2d8b66105d2881c43677fc3fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTFjZGVjNWZhYWMzM2UyZDhiNjYxMDVkMjg4MWM0MzY3N2ZjM2Zj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:20:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:20:00Z"
      },
      "message": "Merge branch 'coinbaser' into next",
      "tree": {
        "sha": "529957de669bfe55260037bdb281a0471e885b6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/529957de669bfe55260037bdb281a0471e885b6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/791cdec5faac33e2d8b66105d2881c43677fc3fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/791cdec5faac33e2d8b66105d2881c43677fc3fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/791cdec5faac33e2d8b66105d2881c43677fc3fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/791cdec5faac33e2d8b66105d2881c43677fc3fc/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f654eef53fd8aa928b2e08f46e90526a49ba5024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f654eef53fd8aa928b2e08f46e90526a49ba5024",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f654eef53fd8aa928b2e08f46e90526a49ba5024"
      },
      {
        "sha": "80828e6da9a38e2a6c74c895331e5461dcd578be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80828e6da9a38e2a6c74c895331e5461dcd578be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80828e6da9a38e2a6c74c895331e5461dcd578be"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 207,
      "deletions": 9
    },
    "files": [
      {
        "sha": "289f2bc7340bb86222052d55ebc4935ae0eda29b",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 1,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791cdec5faac33e2d8b66105d2881c43677fc3fc/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791cdec5faac33e2d8b66105d2881c43677fc3fc/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=791cdec5faac33e2d8b66105d2881c43677fc3fc",
        "patch": "@@ -1599,6 +1599,35 @@ Value validateaddress(const Array& params, bool fHelp)\n }\n \n \n+Value setworkaux(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setworkaux <id> [data]\\n\"\n+            \"If [data] is not specified, deletes aux.\\n\"\n+        );\n+\n+    std::string strId = params[0].get_str();\n+    if (params.size() > 1)\n+    {\n+        std::string strData = params[1].get_str();\n+        std::vector<unsigned char> vchData = ParseHex(strData);\n+        if (vchData.size() * 2 != strData.size())\n+            throw JSONRPCError(-8, \"Failed to parse data as hexadecimal\");\n+        CScript scriptBackup = mapAuxCoinbases[strId];\n+        mapAuxCoinbases[strId] = CScript(vchData);\n+        bool fOverflow;\n+        BuildCoinbaseScriptSig(0, UINT_MAX, &fOverflow);\n+        if (fOverflow)\n+            throw JSONRPCError(-7, \"Change would overflow coinbase script\");\n+    }\n+    else\n+        mapAuxCoinbases.erase(strId);\n+\n+    return true;\n+}\n+\n+\n Value getwork(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n@@ -1743,7 +1772,7 @@ Value getmemorypool(const Array& params, bool fHelp)\n             // Create new block\n             if(pblock)\n                 delete pblock;\n-            pblock = CreateNewBlock(reservekey);\n+            pblock = CreateNewBlock(reservekey, false);\n             if (!pblock)\n                 throw JSONRPCError(-7, \"Out of memory\");\n         }\n@@ -1841,6 +1870,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"listtransactions\",       &listtransactions),\n     make_pair(\"signmessage\",           &signmessage),\n     make_pair(\"verifymessage\",         &verifymessage),\n+    make_pair(\"setworkaux\",             &setworkaux),\n     make_pair(\"getwork\",                &getwork),\n     make_pair(\"listaccounts\",           &listaccounts),\n     make_pair(\"settxfee\",               &settxfee),"
      },
      {
        "sha": "c2df1a360ad0f3c540c8ab4495b7032865834da1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791cdec5faac33e2d8b66105d2881c43677fc3fc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791cdec5faac33e2d8b66105d2881c43677fc3fc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=791cdec5faac33e2d8b66105d2881c43677fc3fc",
        "patch": "@@ -222,6 +222,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n             \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n             \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n+            \"  -coinbaser=<cmd> \\t  \"   + _(\"Execute <cmd> to calculate coinbase payees\\n\") +\n             \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\\n\") +\n             \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\\n\");\n "
      },
      {
        "sha": "3cf6961c51d3218b061faeefe8b0e4bfb270314f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 172,
        "deletions": 7,
        "changes": 179,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791cdec5faac33e2d8b66105d2881c43677fc3fc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791cdec5faac33e2d8b66105d2881c43677fc3fc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=791cdec5faac33e2d8b66105d2881c43677fc3fc",
        "patch": "@@ -7,6 +7,12 @@\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n+\n+#ifdef __WXMSW__\n+#include <fcntl.h>\n+#endif\n+#include <limits.h>\n+\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n \n@@ -2723,7 +2729,126 @@ class COrphan\n };\n \n \n-CBlock* CreateNewBlock(CReserveKey& reservekey)\n+int DoCoinbaser_I(CBlock* pblock, uint64 nTotal, FILE* file)\n+{\n+    int nCount;\n+    if (fscanf(file, \"%d\\n\", &nCount) != 1)\n+    {\n+        printf(\"DoCoinbaser(): failed to fscanf count\\n\");\n+        return -2;\n+    }\n+    pblock->vtx[0].vout.resize(nCount + 1);\n+    uint64 nDistributed = 0;\n+    for (int i = 1; i <= nCount; ++i)\n+    {\n+        uint64 nValue;\n+        if (fscanf(file, \"%\" PRI64u \"\\n\", &nValue) != 1)\n+        {\n+            printf(\"DoCoinbaser(): failed to fscanf amount for transaction #%d\\n\", i);\n+            return -(0x1000 | i);\n+        }\n+        pblock->vtx[0].vout[i].nValue = nValue;\n+        nDistributed += nValue;\n+        char strAddr[35];\n+        if (fscanf(file, \"%34s\\n\", strAddr) != 1)\n+        {\n+            printf(\"DoCoinbaser(): failed to fscanf address for transaction #%d\\n\", i);\n+            return -(0x2000 | i);\n+        }\n+        CBitcoinAddress address;\n+        if (!address.SetString(strAddr))\n+        {\n+            printf(\"DoCoinbaser(): invalid bitcoin address for transaction #%d\\n\", i);\n+            return -(0x3000 | i);\n+        }\n+        pblock->vtx[0].vout[i].scriptPubKey.SetBitcoinAddress(address);\n+    }\n+    if (nTotal < nDistributed)\n+    {\n+        printf(\"DoCoinbaser(): attempt to distribute %\" PRI64u \"/%\" PRI64u \"\\n\", nDistributed, nTotal);\n+        return -3;\n+    }\n+    uint64 nMine = nTotal - nDistributed;\n+    printf(\"DoCoinbaser(): total distributed: %\" PRI64u \"/%\" PRI64u \" = %\" PRI64u \" for me\\n\", nDistributed, nTotal, nMine);\n+    pblock->vtx[0].vout[0].nValue = nMine;\n+    return 0;\n+}\n+\n+int DoCoinbaser(CBlock* pblock, uint64 nTotal)\n+{\n+    string strCmd = mapArgs[\"-coinbaser\"];\n+    FILE* file = NULL;\n+    if (!strCmd.compare(0, 4, \"tcp:\"))\n+    {\n+        CAddress addrCoinbaser(strCmd.substr(4), true, 0);\n+        SOCKET hSocket;\n+        if (!ConnectSocket(addrCoinbaser, hSocket))\n+        {\n+            perror(\"DoCoinbaser(): failed to connect\");\n+            return -3;\n+        }\n+#ifdef __WXMSW__\n+        int nSocket = _open_osfhandle((intptr_t)hSocket, _O_RDONLY | _O_TEXT);\n+        if (-1 == nSocket)\n+        {\n+            printf(\"DoCoinbaser(): failed to _open_osfhandle\\n\");\n+            return -4;\n+        }\n+        file = fdopen(nSocket, \"r\");\n+#else\n+        file = fdopen(hSocket, \"r\");\n+#endif\n+        if (file)\n+            fprintf(file, \"total: %\" PRI64u \"\\n\\n\", nTotal);\n+    }\n+    else\n+    {\n+\n+    try\n+    {\n+        char strTotal[11];\n+        int nTotalLen = snprintf(strTotal, 11, \"%\" PRI64u, nTotal);\n+        if (nTotalLen < 1 || nTotalLen > 10)\n+        {\n+            strTotal[0] = '\\0';\n+            nTotalLen = 0;\n+        }\n+        string::size_type nPos;\n+        while ((nPos = strCmd.find(\"%d\")) != string::npos)\n+        {\n+            strCmd.replace(nPos, 2, strTotal, nTotalLen);\n+        }\n+    }\n+    catch (...)\n+    {\n+        return 1;\n+    }\n+    file = popen(strCmd.c_str(), \"r\");\n+\n+    }\n+\n+    if (!file)\n+    {\n+        printf(\"DoCoinbaser(): failed to popen: %s\", strerror(errno));\n+        return -1;\n+    }\n+\n+    int rv;\n+    try\n+    {\n+        rv = DoCoinbaser_I(pblock, nTotal, file);\n+    }\n+    catch (...)\n+    {\n+        rv = 1;\n+    }\n+    pclose(file);\n+    if (rv)\n+        pblock->vtx[0].vout.resize(1);\n+    return rv;\n+}\n+\n+CBlock* CreateNewBlock(CReserveKey& reservekey, bool fUseCoinbaser)\n {\n     CBlockIndex* pindexPrev = pindexBest;\n \n@@ -2858,7 +2983,10 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             }\n         }\n     }\n-    pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+    int64 nBlkValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+    pblock->vtx[0].vout[0].nValue = nBlkValue;\n+    if (fUseCoinbaser && mapArgs.count(\"-coinbaser\"))\n+        DoCoinbaser(&*pblock, nBlkValue);\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n@@ -2867,21 +2995,58 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     pblock->nBits          = GetNextWorkRequired(pindexPrev);\n     pblock->nNonce         = 0;\n \n+    pblock->print();\n     return pblock.release();\n }\n \n \n+std::map<std::string, CScript> mapAuxCoinbases;\n+\n+CScript BuildCoinbaseScriptSig(uint64 nTime, unsigned int nExtraNonce, bool *pfOverflow)\n+{\n+    CScript scriptSig = CScript() << nTime << CBigNum(nExtraNonce);\n+\n+    map<std::string, CScript>::iterator it;\n+    for (it = mapAuxCoinbases.begin() ; it != mapAuxCoinbases.end(); ++it)\n+        scriptSig += (*it).second;\n+\n+    if (scriptSig.size() > 100)\n+    {\n+        scriptSig.resize(100);\n+        if (pfOverflow)\n+            *pfOverflow = true;\n+    }\n+    else\n+        if (pfOverflow)\n+            *pfOverflow = false;\n+\n+    return scriptSig;\n+}\n+\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n-    static uint256 hashPrevBlock;\n-    if (hashPrevBlock != pblock->hashPrevBlock)\n+    static uint64 nPrevTime = 0;\n+    static bool fBackward = false;\n+    uint64 nNow = GetTime();\n+    if (nNow > nPrevTime + 1)\n     {\n         nExtraNonce = 0;\n-        hashPrevBlock = pblock->hashPrevBlock;\n+        nPrevTime = nNow;\n+        fBackward = false;\n+    }\n+    else\n+    {\n+        if (nNow < nPrevTime && !fBackward)\n+        {\n+            printf(\"IncrementExtraNonce: WARNING: nNow moved backward: %d -> %d\\n\", nPrevTime, nNow);\n+            fBackward = true;\n+        }\n+        if (nExtraNonce == UINT_MAX)\n+            printf(\"IncrementExtraNonce: WARNING: nExtraNonce overflowing!\\n\");\n+        ++nExtraNonce;\n     }\n-    ++nExtraNonce;\n-    pblock->vtx[0].vin[0].scriptSig = CScript() << pblock->nTime << CBigNum(nExtraNonce);\n+    pblock->vtx[0].vin[0].scriptSig = BuildCoinbaseScriptSig(nNow, nExtraNonce);\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n "
      },
      {
        "sha": "87c98e4a059bdcb5c274a2dfbb0919864e8e4835",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791cdec5faac33e2d8b66105d2881c43677fc3fc/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791cdec5faac33e2d8b66105d2881c43677fc3fc/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=791cdec5faac33e2d8b66105d2881c43677fc3fc",
        "patch": "@@ -94,7 +94,9 @@ void PrintBlockTree();\n bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n-CBlock* CreateNewBlock(CReserveKey& reservekey);\n+CBlock* CreateNewBlock(CReserveKey& reservekey, bool fUseCoinbaser=true);\n+extern std::map<std::string, CScript> mapAuxCoinbases;\n+CScript BuildCoinbaseScriptSig(uint64 nTime, unsigned int nExtraNonce, bool *pfOverflow = NULL);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);"
      }
    ]
  },
  {
    "sha": "dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDI0YjI4NWJhMmNhYTc4OWNjODhhOWNjNmYwMzdiMmNlYjFlOGUz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:22:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:23:56Z"
      },
      "message": "Merge remote branch 'gavin/op_eval' into next\n\nConflicts (not autodetected):\n\tsrc/init.cpp\n\tsrc/main.cpp",
      "tree": {
        "sha": "6503b75c2fa302cf64c6be562632104c4065b7a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6503b75c2fa302cf64c6be562632104c4065b7a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "791cdec5faac33e2d8b66105d2881c43677fc3fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/791cdec5faac33e2d8b66105d2881c43677fc3fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/791cdec5faac33e2d8b66105d2881c43677fc3fc"
      },
      {
        "sha": "b6084f158313c50f7bb4e9b90ce2ac20adfce1ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6084f158313c50f7bb4e9b90ce2ac20adfce1ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6084f158313c50f7bb4e9b90ce2ac20adfce1ba"
      }
    ],
    "stats": {
      "total": 2053,
      "additions": 1597,
      "deletions": 456
    },
    "files": [
      {
        "sha": "dc28285686bc91d94b798d0eee98aac28368a8e6",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -268,16 +268,33 @@ class CBitcoinAddress : public CBase58Data\n         return SetHash160(Hash160(vchPubKey));\n     }\n \n+    bool SetScriptHash160(const uint160& hash160)\n+    {\n+        SetData(fTestNet ? 111^2 : 2, &hash160, 20);\n+        return true;\n+    }\n+\n     bool IsValid() const\n     {\n         int nExpectedSize = 20;\n         bool fExpectTestNet = false;\n         switch(nVersion)\n         {\n             case 0:\n+                nExpectedSize = 20; // Hash of public key\n+                fExpectTestNet = false;\n+                break;\n+            case 2:\n+                nExpectedSize = 20; // OP_EVAL, hash of CScript\n+                fExpectTestNet = false;\n                 break;\n \n             case 111:\n+                nExpectedSize = 20;\n+                fExpectTestNet = true;\n+                break;\n+            case 111^2:\n+                nExpectedSize = 20;\n                 fExpectTestNet = true;\n                 break;\n \n@@ -286,6 +303,14 @@ class CBitcoinAddress : public CBase58Data\n         }\n         return fExpectTestNet == fTestNet && vchData.size() == nExpectedSize;\n     }\n+    bool IsScript() const\n+    {\n+        if (!IsValid())\n+            return false;\n+        if (fTestNet)\n+            return nVersion == 111^2;\n+        return nVersion == 2;\n+    }\n \n     CBitcoinAddress()\n     {"
      },
      {
        "sha": "319be76d5d7fb04431f3e67241167c2cebf6397f",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 3,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -41,7 +41,6 @@ static std::string strRPCUserColonPass;\n static int64 nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n-\n Object JSONRPCError(int code, const string& message)\n {\n     Object error;\n@@ -662,7 +661,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     if (params.size() > 1)\n         nMinDepth = params[1].get_int();\n \n-    // Get the set of pub keys that have the label\n+    // Get the set of pub keys assigned to account\n     string strAccount = AccountFromValue(params[0]);\n     set<CBitcoinAddress> setAddress;\n     GetAccountAddresses(strAccount, setAddress);\n@@ -931,6 +930,68 @@ Value sendmany(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+Value addmultisigaddress(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+    {\n+        string msg = \"addmultisigaddress <nrequired> <'[\\\"key\\\",\\\"key\\\"]'> [account]\\n\"\n+            \"Add a nrequired-to-sign multisignature address to the wallet\\\"\\n\"\n+            \"each key is a bitcoin address, hex or base58 public key\\n\"\n+            \"If [account] is specified, assign address to [account].\";\n+        throw runtime_error(msg);\n+    }\n+    if (!fTestNet)\n+        throw runtime_error(\"addmultisigaddress available only when running -testnet\\n\");\n+\n+    int nRequired = params[0].get_int();\n+    const Array& keys = params[1].get_array();\n+    string strAccount;\n+    if (params.size() > 2)\n+        strAccount = AccountFromValue(params[2]);\n+\n+    // Gather public keys\n+    if (keys.size() < nRequired)\n+        throw runtime_error(\n+            strprintf(\"addmultisigaddress: wrong number of keys (got %d, need at least %d)\", keys.size(), nRequired));\n+    std::vector<CKey> pubkeys;\n+    pubkeys.resize(keys.size());\n+    for (int i = 0; i < keys.size(); i++)\n+    {\n+        const std::string& ks = keys[i].get_str();\n+        if (ks.size() == 130) // hex public key\n+            pubkeys[i].SetPubKey(ParseHex(ks));\n+        else if (ks.size() > 34) // base58-encoded\n+        {\n+            std::vector<unsigned char> vchPubKey;\n+            if (DecodeBase58(ks, vchPubKey))\n+                pubkeys[i].SetPubKey(vchPubKey);\n+            else\n+                throw runtime_error(\"Error base58 decoding key: \"+ks);\n+        }\n+        else // bitcoin address for key in this wallet\n+        {\n+            CBitcoinAddress address(ks);\n+            if (!pwalletMain->GetKey(address, pubkeys[i]))\n+                throw runtime_error(\n+                    strprintf(\"addmultisigaddress: unknown address: %s\",ks.c_str()));\n+        }\n+    }\n+\n+    // Construct using OP_EVAL\n+    CScript inner;\n+    inner.SetMultisig(nRequired, pubkeys);\n+\n+    uint160 scriptHash = Hash160(inner);\n+    CScript scriptPubKey;\n+    scriptPubKey.SetEval(inner);\n+    pwalletMain->AddCScript(scriptHash, inner);\n+    CBitcoinAddress address;\n+    address.SetScriptHash160(scriptHash);\n+\n+    pwalletMain->SetAddressBookName(address, strAccount);\n+    return address.ToString();\n+}\n+\n \n struct tallyitem\n {\n@@ -1591,7 +1652,35 @@ Value validateaddress(const Array& params, bool fHelp)\n         // version of the address:\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        ret.push_back(Pair(\"ismine\", (pwalletMain->HaveKey(address) > 0)));\n+        if (pwalletMain->HaveKey(address))\n+        {\n+            ret.push_back(Pair(\"ismine\", true));\n+            std::vector<unsigned char> vchPubKey;\n+            pwalletMain->GetPubKey(address, vchPubKey);\n+            ret.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            std::string strPubKey(vchPubKey.begin(), vchPubKey.end());\n+            ret.push_back(Pair(\"pubkey58\", EncodeBase58(vchPubKey)));\n+        }\n+        else if (pwalletMain->HaveCScript(address.GetHash160()))\n+        {\n+            ret.push_back(Pair(\"isscript\", true));\n+            CScript subscript;\n+            pwalletMain->GetCScript(address.GetHash160(), subscript);\n+            ret.push_back(Pair(\"ismine\", ::IsMine(*pwalletMain, subscript)));\n+            std::vector<CBitcoinAddress> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractAddresses(subscript, pwalletMain, whichType, addresses, nRequired);\n+            ret.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            Array a;\n+            BOOST_FOREACH(const CBitcoinAddress& addr, addresses)\n+                a.push_back(addr.ToString());\n+            ret.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                ret.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n+        else\n+            ret.push_back(Pair(\"ismine\", false));\n         if (pwalletMain->mapAddressBook.count(address))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address]));\n     }\n@@ -1866,6 +1955,7 @@ pair<string, rpcfn_type> pCallTable[] =\n     make_pair(\"move\",                   &movecmd),\n     make_pair(\"sendfrom\",               &sendfrom),\n     make_pair(\"sendmany\",               &sendmany),\n+    make_pair(\"addmultisigaddress\",     &addmultisigaddress),\n     make_pair(\"gettransaction\",         &gettransaction),\n     make_pair(\"listtransactions\",       &listtransactions),\n     make_pair(\"signmessage\",           &signmessage),\n@@ -2508,6 +2598,15 @@ int CommandLineRPC(int argc, char *argv[])\n             params[1] = v.get_obj();\n         }\n         if (strMethod == \"sendmany\"                && n > 2) ConvertTo<boost::int64_t>(params[2]);\n+        if (strMethod == \"addmultisigaddress\"      && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+        if (strMethod == \"addmultisigaddress\"      && n > 1)\n+        {\n+            string s = params[1].get_str();\n+            Value v;\n+            if (!read_string(s, v) || v.type() != array_type)\n+                throw runtime_error(\"addmultisigaddress: type mismatch \"+s);\n+            params[1] = v.get_array();\n+        }\n \n         // Execute\n         Object reply = CallRPC(strMethod, params);"
      },
      {
        "sha": "152586285aed20b62ee8d1cef461d6211a6977a8",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -934,6 +934,15 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 if (nMinVersion > VERSION)\n                     return DB_TOO_NEW;\n             }\n+            else if (strType == \"cscript\")\n+            {\n+                uint160 hash;\n+                ssKey >> hash;\n+                CScript script;\n+                ssValue >> script;\n+                if (!pwallet->LoadCScript(hash, script))\n+                    return DB_CORRUPT;\n+            }\n         }\n         pcursor->close();\n     }"
      },
      {
        "sha": "e593ae28ed172bdd084ba4a72b31d1045f231de6",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -13,17 +13,17 @@\n \n #include <db_cxx.h>\n \n-class CTxIndex;\n+class CAccount;\n+class CAccountingEntry;\n+class CAddress;\n+class CBlockLocator;\n class CDiskBlockIndex;\n class CDiskTxPos;\n+class CMasterKey;\n class COutPoint;\n-class CAddress;\n-class CWalletTx;\n+class CTxIndex;\n class CWallet;\n-class CAccount;\n-class CAccountingEntry;\n-class CBlockLocator;\n-\n+class CWalletTx;\n \n extern unsigned int nWalletDBUpdated;\n extern DbEnv dbenv;\n@@ -420,6 +420,19 @@ class CWalletDB : public CDB\n         return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n     }\n \n+    // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n+    bool ReadCScript(const uint160 &hash, CScript& redeemScript)\n+    {\n+        redeemScript.clear();\n+        return Read(std::make_pair(std::string(\"cscript\"), hash), redeemScript);\n+    }\n+\n+    bool WriteCScript(const uint160& hash, const CScript& redeemScript)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n+    }\n+\n     bool WriteBestBlock(const CBlockLocator& locator)\n     {\n         nWalletDBUpdated++;"
      },
      {
        "sha": "6e05b1634278441d4d8583fea0aece1bbc61c7fd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -518,6 +518,14 @@ bool AppInit2(int argc, char* argv[])\n \n     RandAddSeedPerfmon();\n \n+    {\n+        // Put \"OP_EVAL\" in the coinbase so everybody can tell when\n+        // a majority of miners support it\n+        const char* pOpEvalName = GetOpName(OP_EVAL);\n+        std::vector<unsigned char> vchData(pOpEvalName, pOpEvalName+strlen(pOpEvalName));\n+        mapAuxCoinbases[pOpEvalName] = CScript(vchData);\n+    }\n+\n     if (!CreateThread(StartNode, NULL))\n         wxMessageBox(_(\"Error: CreateThread(StartNode) failed\"), \"Bitcoin\");\n "
      },
      {
        "sha": "1213ebf07c2a0ebb7027f02655af7779d909dde5",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -4,8 +4,9 @@\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"headers.h\"\n-#include \"db.h\"\n #include \"crypter.h\"\n+#include \"db.h\"\n+#include \"script.h\"\n \n std::vector<unsigned char> CKeyStore::GenerateNewKey()\n {\n@@ -33,6 +34,36 @@ bool CBasicKeyStore::AddKey(const CKey& key)\n     return true;\n }\n \n+bool CBasicKeyStore::AddCScript(const uint160 &hash, const CScript& redeemScript)\n+{\n+    CRITICAL_BLOCK(cs_KeyStore)\n+        mapScripts[hash] = redeemScript;\n+    return true;\n+}\n+\n+bool CBasicKeyStore::HaveCScript(const uint160& hash) const\n+{\n+    bool result;\n+    CRITICAL_BLOCK(cs_KeyStore)\n+        result = (mapScripts.count(hash) > 0);\n+    return result;\n+}\n+\n+\n+bool CBasicKeyStore::GetCScript(const uint160 &hash, CScript& redeemScriptOut) const\n+{\n+    CRITICAL_BLOCK(cs_KeyStore)\n+    {\n+        ScriptMap::const_iterator mi = mapScripts.find(hash);\n+        if (mi != mapScripts.end())\n+        {\n+            redeemScriptOut = (*mi).second;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n bool CCryptoKeyStore::SetCrypted()\n {\n     CRITICAL_BLOCK(cs_KeyStore)"
      },
      {
        "sha": "f611c1a7cf815b27c34029bfd7a2af4c352fcb3e",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_KEYSTORE_H\n \n #include \"crypter.h\"\n+#include \"script.h\"\n \n // A virtual base class for key stores\n class CKeyStore\n@@ -28,17 +29,24 @@ class CKeyStore\n     // This may succeed even if GetKey fails (e.g., encrypted wallets)\n     virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n \n+    // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n+    virtual bool AddCScript(const uint160 &hash, const CScript& redeemScript) =0;\n+    virtual bool HaveCScript(const uint160 &hash) const =0;\n+    virtual bool GetCScript(const uint160 &hash, CScript& redeemScriptOut) const =0;\n+\n     // Generate a new key, and add it to the store\n     virtual std::vector<unsigned char> GenerateNewKey();\n };\n \n typedef std::map<CBitcoinAddress, CSecret> KeyMap;\n+typedef std::map<uint160, CScript > ScriptMap;\n \n // Basic key store, that keeps keys in an address->secret map\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n+    ScriptMap mapScripts;\n \n public:\n     bool AddKey(const CKey& key);\n@@ -62,6 +70,9 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return false;\n     }\n+    virtual bool AddCScript(const uint160 &hash, const CScript& redeemScript);\n+    virtual bool HaveCScript(const uint160 &hash) const;\n+    virtual bool GetCScript(const uint160 &hash, CScript& redeemScriptOut) const;\n };\n \n typedef std::map<CBitcoinAddress, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;"
      },
      {
        "sha": "4dd6ea24e494d1339e168753061f299aa481f9cd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 191,
        "deletions": 59,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -247,6 +247,67 @@ bool CTransaction::ReadFromDisk(COutPoint prevout)\n     return ReadFromDisk(txdb, prevout, txindex);\n }\n \n+bool CTransaction::IsStandard() const\n+{\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n+        // in an OP_EVAL, which is 3 ~80-byte signatures, 3\n+        // ~65-byte public keys, plus a few script ops.\n+        if (txin.scriptSig.size() > 500)\n+            return error(\"nonstandard txin, size %d is too large\\n\", txin.scriptSig.size());\n+        if (!txin.scriptSig.IsPushOnly())\n+            return error(\"nonstandard txin (opcodes other than PUSH): %s\", txin.scriptSig.ToString().c_str());\n+    }\n+    BOOST_FOREACH(const CTxOut& txout, vout)\n+        if (!::IsStandard(txout.scriptPubKey))\n+            return error(\"nonstandard txout: %s\", txout.scriptPubKey.ToString().c_str());\n+    return true;\n+}\n+\n+//\n+// Check transaction inputs, and make sure any\n+// OP_EVAL transactions are evaluating IsStandard scripts\n+//\n+// Why bother? To avoid denial-of-service attacks; an attacker\n+// can submit a standard DUP HASH... OP_EVAL transaction,\n+// which will get accepted into blocks. The script being\n+// EVAL'ed can be anything; an attacker could use a very\n+// expensive-to-check-upon-redemption script like:\n+//   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+//\n+bool CTransaction::AreInputsStandard(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const\n+{\n+    if (fTestNet)\n+        return true; // Allow non-standard on testnet\n+\n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        assert(mapInputs.count(prevout.hash) > 0);\n+        CTransaction& txPrev = mapInputs[prevout.hash].second;\n+\n+        vector<vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        CScript& prevScript = txPrev.vout[prevout.n].scriptPubKey;\n+        if (!Solver(prevScript, whichType, vSolutions))\n+            return error(\"nonstandard txin (spending nonstandard txout %s)\", prevScript.ToString().c_str());\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            vector<vector<unsigned char> > stack;\n+            int nUnused;\n+            if (!EvalScript(stack, vin[i].scriptSig, *this, i, 0, true, nUnused))\n+                return false;\n+            CScript subscript(stack.back().begin(), stack.back().end());\n+            if (!::IsStandard(subscript))\n+                return error(\"nonstandard txin (nonstandard OP_EVAL subscript %s)\", subscript.ToString().c_str());\n+        }\n+    }\n+\n+    return true;\n+}\n+\n \n \n int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n@@ -370,15 +431,6 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n     if ((int64)nLockTime > INT_MAX)\n         return error(\"AcceptToMemoryPool() : not accepting nLockTime beyond 2038 yet\");\n \n-    // Safety limits\n-    unsigned int nSize = ::GetSerializeSize(*this, SER_NETWORK);\n-    // Checking ECDSA signatures is a CPU bottleneck, so to avoid denial-of-service\n-    // attacks disallow transactions with more than one SigOp per 34 bytes.\n-    // 34 bytes because a TxOut is:\n-    //   20-byte address + 8 byte bitcoin amount + 5 bytes of ops + 1 byte script length\n-    if (GetSigOpCount() > nSize / 34 || nSize < 100)\n-        return error(\"AcceptToMemoryPool() : transaction with out-of-bounds SigOpCount\");\n-\n     // Rather not work on nonstandard transactions (unless -testnet)\n     if (!fTestNet && !IsStandard())\n         return error(\"AcceptToMemoryPool() : nonstandard transaction type\");\n@@ -422,15 +474,34 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n \n     if (fCheckInputs)\n     {\n-        // Check against previous transactions\n+        map<uint256, pair<CTxIndex, CTransaction> > mapInputs;\n         map<uint256, CTxIndex> mapUnused;\n+        if (!FetchInputs(txdb, mapUnused, false, false, mapInputs))\n+        {\n+            if (pfMissingInputs)\n+                *pfMissingInputs = true;\n+            return error(\"AcceptToMemoryPool() : FetchInputs failed %s\", hash.ToString().substr(0,10).c_str());\n+        }\n+\n+        // Check for non-standard OP_EVALs in inputs\n+        if (!AreInputsStandard(mapInputs))\n+            return error(\"AcceptToMemoryPool() : nonstandard transaction input\");\n+\n+        // Check against previous transactions\n         int64 nFees = 0;\n-        if (!ConnectInputs(txdb, mapUnused, CDiskTxPos(1,1,1), pindexBest, nFees, false, false))\n+        int nSigOps = 0;\n+        if (!ConnectInputs(mapInputs, mapUnused, CDiskTxPos(1,1,1), pindexBest, nFees, false, false, nSigOps))\n         {\n             if (pfMissingInputs)\n                 *pfMissingInputs = true;\n             return error(\"AcceptToMemoryPool() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n         }\n+        // Checking ECDSA signatures is a CPU bottleneck, so to avoid denial-of-service\n+        // attacks disallow transactions with more than one SigOp per 65 bytes.\n+        // 65 bytes because that is the minimum size of an ECDSA signature\n+        unsigned int nSize = ::GetSerializeSize(*this, SER_NETWORK);\n+        if (nSigOps > nSize / 65 || nSize < 100)\n+            return error(\"AcceptToMemoryPool() : transaction with out-of-bounds SigOpCount\");\n \n         // Don't accept it if it can't get into a block\n         if (nFees < GetMinFee(1000, true, GMF_RELAY))\n@@ -827,8 +898,61 @@ bool CTransaction::DisconnectInputs(CTxDB& txdb)\n }\n \n \n-bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n-                                 CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int64 nMinFee)\n+bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTestPool,\n+                               bool fBlock, bool fMiner, map<uint256, pair<CTxIndex, CTransaction> >& inputsRet)\n+{\n+    if (IsCoinBase())\n+        return true; // Coinbase transactions have no inputs to fetch.\n+    \n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        if (inputsRet.count(prevout.hash))\n+            continue; // Got it already\n+\n+        // Read txindex\n+        CTxIndex& txindex = inputsRet[prevout.hash].first;\n+        bool fFound = true;\n+        if ((fBlock || fMiner) && mapTestPool.count(prevout.hash))\n+        {\n+            // Get txindex from current proposed changes\n+            txindex = mapTestPool.find(prevout.hash)->second;\n+        }\n+        else\n+        {\n+            // Read txindex from txdb\n+            fFound = txdb.ReadTxIndex(prevout.hash, txindex);\n+        }\n+        if (!fFound && (fBlock || fMiner))\n+            return fMiner ? false : error(\"FetchInputs() : %s prev tx %s index entry not found\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+\n+        // Read txPrev\n+        CTransaction& txPrev = inputsRet[prevout.hash].second;\n+        if (!fFound || txindex.pos == CDiskTxPos(1,1,1))\n+        {\n+            // Get prev tx from single transactions in memory\n+            CRITICAL_BLOCK(cs_mapTransactions)\n+            {\n+                if (!mapTransactions.count(prevout.hash))\n+                    return error(\"FetchInputs() : %s mapTransactions prev not found %s\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+                txPrev = mapTransactions[prevout.hash];\n+            }\n+            if (!fFound)\n+                txindex.vSpent.resize(txPrev.vout.size());\n+        }\n+        else\n+        {\n+            // Get prev tx from disk\n+            if (!txPrev.ReadFromDisk(txindex.pos))\n+                return error(\"FetchInputs() : %s ReadFromDisk prev tx %s failed\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+        }\n+    }\n+    return true;\n+}\n+\n+bool CTransaction::ConnectInputs(map<uint256, pair<CTxIndex, CTransaction> > inputs,\n+                                 map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n+                                 CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int& nSigOpsRet, int64 nMinFee)\n {\n     // Take over previous transactions' spent pointers\n     // fBlock is true when this is called from AcceptBlock when a new best-block is added to the blockchain\n@@ -840,43 +964,9 @@ bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoo\n         for (int i = 0; i < vin.size(); i++)\n         {\n             COutPoint prevout = vin[i].prevout;\n-\n-            // Read txindex\n-            CTxIndex txindex;\n-            bool fFound = true;\n-            if ((fBlock || fMiner) && mapTestPool.count(prevout.hash))\n-            {\n-                // Get txindex from current proposed changes\n-                txindex = mapTestPool[prevout.hash];\n-            }\n-            else\n-            {\n-                // Read txindex from txdb\n-                fFound = txdb.ReadTxIndex(prevout.hash, txindex);\n-            }\n-            if (!fFound && (fBlock || fMiner))\n-                return fMiner ? false : error(\"ConnectInputs() : %s prev tx %s index entry not found\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n-\n-            // Read txPrev\n-            CTransaction txPrev;\n-            if (!fFound || txindex.pos == CDiskTxPos(1,1,1))\n-            {\n-                // Get prev tx from single transactions in memory\n-                CRITICAL_BLOCK(cs_mapTransactions)\n-                {\n-                    if (!mapTransactions.count(prevout.hash))\n-                        return error(\"ConnectInputs() : %s mapTransactions prev not found %s\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n-                    txPrev = mapTransactions[prevout.hash];\n-                }\n-                if (!fFound)\n-                    txindex.vSpent.resize(txPrev.vout.size());\n-            }\n-            else\n-            {\n-                // Get prev tx from disk\n-                if (!txPrev.ReadFromDisk(txindex.pos))\n-                    return error(\"ConnectInputs() : %s ReadFromDisk prev tx %s failed\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n-            }\n+            assert(inputs.count(prevout.hash) > 0);\n+            CTxIndex& txindex = inputs[prevout.hash].first;\n+            CTransaction& txPrev = inputs[prevout.hash].second;\n \n             if (prevout.n >= txPrev.vout.size() || prevout.n >= txindex.vSpent.size())\n                 return DoS(100, error(\"ConnectInputs() : %s prevout.n out of range %d %d %d prev tx %s\\n%s\", GetHash().ToString().substr(0,10).c_str(), prevout.n, txPrev.vout.size(), txindex.vSpent.size(), prevout.hash.ToString().substr(0,10).c_str(), txPrev.ToString().c_str()));\n@@ -891,9 +981,27 @@ bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoo\n             // (before the last blockchain checkpoint). This is safe because block merkle hashes are\n             // still computed and checked, and any change will be caught at the next checkpoint.\n             if (!(fBlock && IsInitialBlockDownload()))\n+            {\n+                bool fStrictOpEval = true;\n+                // This code should be removed when OP_EVAL has\n+                // a majority of hashing power on the network.\n+                if (fBlock)\n+                {\n+                    // To avoid being on the short end of a block-chain split,\n+                    // interpret OP_EVAL as a NO_OP until blocks with timestamps\n+                    // after opevaltime:\n+                    int64 nEvalSwitchTime = GetArg(\"opevaltime\", 1328054400); // Feb 1, 2012\n+                    fStrictOpEval = (pindexBlock->nTime >= nEvalSwitchTime);\n+                }\n+                // if !fBlock, then always be strict-- don't accept\n+                // invalid-under-new-rules OP_EVAL transactions into\n+                // our memory pool (don't relay them, don't include them\n+                // in blocks we mine).\n+\n                 // Verify signature\n-                if (!VerifySignature(txPrev, *this, i))\n+                if (!VerifySignature(txPrev, *this, i, nSigOpsRet, fStrictOpEval))\n                     return DoS(100,error(\"ConnectInputs() : %s VerifySignature failed\", GetHash().ToString().substr(0,10).c_str()));\n+            }\n \n             // Check for conflicts (double-spend)\n             // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n@@ -966,7 +1074,8 @@ bool CTransaction::ClientConnectInputs()\n                 return false;\n \n             // Verify signature\n-            if (!VerifySignature(txPrev, *this, i))\n+            int nUnused = 0;\n+            if (!VerifySignature(txPrev, *this, i, nUnused, false))\n                 return error(\"ConnectInputs() : VerifySignature failed\");\n \n             ///// this is redundant with the mapNextTx stuff, not sure which I want to get rid of\n@@ -1024,14 +1133,21 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n \n     map<uint256, CTxIndex> mapQueuedChanges;\n     int64 nFees = 0;\n+    int nSigOps = 0;\n     BOOST_FOREACH(CTransaction& tx, vtx)\n     {\n         CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n         nTxPos += ::GetSerializeSize(tx, SER_DISK);\n \n-        if (!tx.ConnectInputs(txdb, mapQueuedChanges, posThisTx, pindex, nFees, true, false))\n+        map<uint256, pair<CTxIndex, CTransaction> > mapInputs;\n+        if (!tx.FetchInputs(txdb, mapQueuedChanges, true, false, mapInputs))\n+            return false;\n+        if (!tx.ConnectInputs(mapInputs, mapQueuedChanges, posThisTx, pindex, nFees, true, false, nSigOps))\n             return false;\n+        if (nSigOps > MAX_BLOCK_SIGOPS)\n+            return DoS(100, error(\"ConnectBlock() : too many sigops\"));\n     }\n+\n     // Write queued txindex changes\n     for (map<uint256, CTxIndex>::iterator mi = mapQueuedChanges.begin(); mi != mapQueuedChanges.end(); ++mi)\n     {\n@@ -1292,8 +1408,21 @@ bool CBlock::CheckBlock() const\n         if (!tx.CheckTransaction())\n             return DoS(tx.nDoS, error(\"CheckBlock() : CheckTransaction failed\"));\n \n-    // Check that it's not full of nonstandard transactions\n-    if (GetSigOpCount() > MAX_BLOCK_SIGOPS)\n+    // This code should be removed when a compatibility-breaking block chain split has passed.\n+    // Compatibility check for old clients that counted sigops differently:\n+    int nSigOps = 0;\n+    BOOST_FOREACH(const CTransaction& tx, vtx)\n+    {\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        {\n+            nSigOps += txin.scriptSig.GetSigOpCount();\n+        }\n+        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n+        {\n+            nSigOps += txout.scriptPubKey.GetSigOpCount();\n+        }\n+    }\n+    if (nSigOps > MAX_BLOCK_SIGOPS)\n         return DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n \n     // Check merkleroot\n@@ -2947,9 +3076,6 @@ CBlock* CreateNewBlock(CReserveKey& reservekey, bool fUseCoinbaser)\n             unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK);\n             if (nBlockSize + nTxSize >= MAX_BLOCK_SIZE_GEN)\n                 continue;\n-            int nTxSigOps = tx.GetSigOpCount();\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n-                continue;\n \n             // Transaction fee required depends on block size\n             bool fAllowFree = (nBlockSize + nTxSize < 4000 || CTransaction::AllowFree(dPriority));\n@@ -2958,7 +3084,13 @@ CBlock* CreateNewBlock(CReserveKey& reservekey, bool fUseCoinbaser)\n             // Connecting shouldn't fail due to dependency on other memory pool transactions\n             // because we're already processing them in order of dependency\n             map<uint256, CTxIndex> mapTestPoolTmp(mapTestPool);\n-            if (!tx.ConnectInputs(txdb, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, nFees, false, true, nMinFee))\n+            map<uint256, pair<CTxIndex, CTransaction> > mapInputs;\n+            if (!tx.FetchInputs(txdb, mapTestPoolTmp, false, true, mapInputs))\n+                continue;\n+            int nTxSigOps = 0;\n+            if (!tx.ConnectInputs(mapInputs, mapTestPoolTmp, CDiskTxPos(1,1,1), pindexPrev, nFees, false, true, nTxSigOps, nMinFee))\n+                continue;\n+            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n             swap(mapTestPool, mapTestPoolTmp);\n "
      },
      {
        "sha": "f263695bc9e9249ee283955a23f0649d2db10c65",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 29,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -498,26 +498,8 @@ class CTransaction\n         return (vin.size() == 1 && vin[0].prevout.IsNull());\n     }\n \n-    int GetSigOpCount() const\n-    {\n-        int n = 0;\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-            n += txin.scriptSig.GetSigOpCount();\n-        BOOST_FOREACH(const CTxOut& txout, vout)\n-            n += txout.scriptPubKey.GetSigOpCount();\n-        return n;\n-    }\n-\n-    bool IsStandard() const\n-    {\n-        BOOST_FOREACH(const CTxIn& txin, vin)\n-            if (!txin.scriptSig.IsPushOnly())\n-                return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());\n-        BOOST_FOREACH(const CTxOut& txout, vout)\n-            if (!::IsStandard(txout.scriptPubKey))\n-                return error(\"nonstandard txout: %s\", txout.scriptPubKey.ToString().c_str());\n-        return true;\n-    }\n+    bool IsStandard() const;\n+    bool AreInputsStandard(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const;\n \n     int64 GetValueOut() const\n     {\n@@ -645,8 +627,13 @@ class CTransaction\n     bool ReadFromDisk(CTxDB& txdb, COutPoint prevout);\n     bool ReadFromDisk(COutPoint prevout);\n     bool DisconnectInputs(CTxDB& txdb);\n-    bool ConnectInputs(CTxDB& txdb, std::map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n-                       CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int64 nMinFee=0);\n+\n+    // Fetch from memory and/or disk. inputsRet keys are transaction hashes.\n+    bool FetchInputs(CTxDB& txdb, const std::map<uint256, CTxIndex>& mapTestPool,\n+                     bool fBlock, bool fMiner, std::map<uint256, std::pair<CTxIndex, CTransaction> >& inputsRet);\n+    bool ConnectInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > inputs,\n+                       std::map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n+                       CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int& nSigOpsRet, int64 nMinFee=0);\n     bool ClientConnectInputs();\n     bool CheckTransaction() const;\n     bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true, bool* pfMissingInputs=NULL);\n@@ -855,13 +842,6 @@ class CBlock\n         return (int64)nTime;\n     }\n \n-    int GetSigOpCount() const\n-    {\n-        int n = 0;\n-        BOOST_FOREACH(const CTransaction& tx, vtx)\n-            n += tx.GetSigOpCount();\n-        return n;\n-    }\n \n \n     uint256 BuildMerkleTree() const"
      },
      {
        "sha": "2b8c9ab6ddb47036b0a9a325bf33022e968fda1e",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -10,6 +10,7 @@ CXX=llvm-g++\n DEPSDIR=/opt/local\n \n INCLUDEPATHS= \\\n+ -I\"$(CURDIR)\" \\\n  -I\"$(DEPSDIR)/include\" \\\n  -I\"$(DEPSDIR)/include/db48\"\n \n@@ -110,14 +111,16 @@ obj/nogui/%.o: %.cpp\n bitcoind: $(OBJS:obj/%=obj/nogui/%)\n \t$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)\n \n+TESTOBJS := $(patsubst test/%.cpp,obj/test/%.o,$(wildcard test/*.cpp))\n+\n obj/test/%.o: test/%.cpp\n \t$(CXX) -c $(CFLAGS) -MMD -o $@ $<\n \t@cp $(@:%.o=%.d) $(@:%.o=%.P); \\\n \t  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n \t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n \t  rm -f $(@:%.o=%.d)\n \n-test_bitcoin: obj/test/test_bitcoin.o $(filter-out obj/nogui/init.o,$(OBJS:obj/%=obj/nogui/%))\n+test_bitcoin: $(TESTOBJS) $(filter-out obj/nogui/init.o,$(OBJS:obj/%=obj/nogui/%))\n \t$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) $(DEPSDIR)/lib/libboost_unit_test_framework-mt.a\n \n clean:"
      },
      {
        "sha": "42bf3dd554aef0a9877be209f83c12bc148a4e26",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -6,7 +6,7 @@ USE_UPNP:=0\n \n DEFS=-DNOPCH\n \n-DEFS += $(addprefix -I,$(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))\n+DEFS += $(addprefix -I,$(CURDIR) $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))\n LIBS += $(addprefix -l,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))\n \n LMODE = dynamic\n@@ -139,14 +139,16 @@ obj/nogui/%.o: %.cpp\n bitcoind: $(OBJS:obj/%=obj/nogui/%)\n \t$(CXX) $(xCXXFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)\n \n+TESTOBJS := $(patsubst test/%.cpp,obj/test/%.o,$(wildcard test/*.cpp))\n+\n obj/test/%.o: test/%.cpp\n \t$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<\n \t@cp $(@:%.o=%.d) $(@:%.o=%.P); \\\n \t  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n \t      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \\\n \t  rm -f $(@:%.o=%.d)\n \n-test_bitcoin: obj/test/test_bitcoin.o $(filter-out obj/nogui/init.o,$(OBJS:obj/%=obj/nogui/%))\n+test_bitcoin: $(TESTOBJS) $(filter-out obj/nogui/init.o,$(OBJS:obj/%=obj/nogui/%))\n \t$(CXX) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ -Wl,-Bstatic -lboost_unit_test_framework $(LDFLAGS) $(LIBS)\n \n clean:"
      },
      {
        "sha": "5487c01fabc1f5d18c98c25c0a00f85e7472c1df",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 500,
        "deletions": 107,
        "changes": 607,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -70,20 +70,186 @@ static inline void popstack(vector<valtype>& stack)\n }\n \n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+const char* GetTxnOutputType(txnouttype t)\n+{\n+    switch (t)\n+    {\n+    case TX_NONSTANDARD: return \"nonstandard\";\n+    case TX_PUBKEY: return \"pubkey\";\n+    case TX_PUBKEYHASH: return \"pubkeyhash\";\n+    case TX_SCRIPTHASH: return \"scripthash\";\n+    case TX_MULTISIG: return \"multisig\";\n+    }\n+    return NULL;\n+}\n+\n+\n+const char* GetOpName(opcodetype opcode)\n+{\n+    switch (opcode)\n+    {\n+    // push value\n+    case OP_0                      : return \"0\";\n+    case OP_PUSHDATA1              : return \"OP_PUSHDATA1\";\n+    case OP_PUSHDATA2              : return \"OP_PUSHDATA2\";\n+    case OP_PUSHDATA4              : return \"OP_PUSHDATA4\";\n+    case OP_1NEGATE                : return \"-1\";\n+    case OP_RESERVED               : return \"OP_RESERVED\";\n+    case OP_1                      : return \"1\";\n+    case OP_2                      : return \"2\";\n+    case OP_3                      : return \"3\";\n+    case OP_4                      : return \"4\";\n+    case OP_5                      : return \"5\";\n+    case OP_6                      : return \"6\";\n+    case OP_7                      : return \"7\";\n+    case OP_8                      : return \"8\";\n+    case OP_9                      : return \"9\";\n+    case OP_10                     : return \"10\";\n+    case OP_11                     : return \"11\";\n+    case OP_12                     : return \"12\";\n+    case OP_13                     : return \"13\";\n+    case OP_14                     : return \"14\";\n+    case OP_15                     : return \"15\";\n+    case OP_16                     : return \"16\";\n+\n+    // control\n+    case OP_NOP                    : return \"OP_NOP\";\n+    case OP_VER                    : return \"OP_VER\";\n+    case OP_IF                     : return \"OP_IF\";\n+    case OP_NOTIF                  : return \"OP_NOTIF\";\n+    case OP_VERIF                  : return \"OP_VERIF\";\n+    case OP_VERNOTIF               : return \"OP_VERNOTIF\";\n+    case OP_ELSE                   : return \"OP_ELSE\";\n+    case OP_ENDIF                  : return \"OP_ENDIF\";\n+    case OP_VERIFY                 : return \"OP_VERIFY\";\n+    case OP_RETURN                 : return \"OP_RETURN\";\n+\n+    // stack ops\n+    case OP_TOALTSTACK             : return \"OP_TOALTSTACK\";\n+    case OP_FROMALTSTACK           : return \"OP_FROMALTSTACK\";\n+    case OP_2DROP                  : return \"OP_2DROP\";\n+    case OP_2DUP                   : return \"OP_2DUP\";\n+    case OP_3DUP                   : return \"OP_3DUP\";\n+    case OP_2OVER                  : return \"OP_2OVER\";\n+    case OP_2ROT                   : return \"OP_2ROT\";\n+    case OP_2SWAP                  : return \"OP_2SWAP\";\n+    case OP_IFDUP                  : return \"OP_IFDUP\";\n+    case OP_DEPTH                  : return \"OP_DEPTH\";\n+    case OP_DROP                   : return \"OP_DROP\";\n+    case OP_DUP                    : return \"OP_DUP\";\n+    case OP_NIP                    : return \"OP_NIP\";\n+    case OP_OVER                   : return \"OP_OVER\";\n+    case OP_PICK                   : return \"OP_PICK\";\n+    case OP_ROLL                   : return \"OP_ROLL\";\n+    case OP_ROT                    : return \"OP_ROT\";\n+    case OP_SWAP                   : return \"OP_SWAP\";\n+    case OP_TUCK                   : return \"OP_TUCK\";\n+\n+    // splice ops\n+    case OP_CAT                    : return \"OP_CAT\";\n+    case OP_SUBSTR                 : return \"OP_SUBSTR\";\n+    case OP_LEFT                   : return \"OP_LEFT\";\n+    case OP_RIGHT                  : return \"OP_RIGHT\";\n+    case OP_SIZE                   : return \"OP_SIZE\";\n+\n+    // bit logic\n+    case OP_INVERT                 : return \"OP_INVERT\";\n+    case OP_AND                    : return \"OP_AND\";\n+    case OP_OR                     : return \"OP_OR\";\n+    case OP_XOR                    : return \"OP_XOR\";\n+    case OP_EQUAL                  : return \"OP_EQUAL\";\n+    case OP_EQUALVERIFY            : return \"OP_EQUALVERIFY\";\n+    case OP_RESERVED1              : return \"OP_RESERVED1\";\n+    case OP_RESERVED2              : return \"OP_RESERVED2\";\n+\n+    // numeric\n+    case OP_1ADD                   : return \"OP_1ADD\";\n+    case OP_1SUB                   : return \"OP_1SUB\";\n+    case OP_2MUL                   : return \"OP_2MUL\";\n+    case OP_2DIV                   : return \"OP_2DIV\";\n+    case OP_NEGATE                 : return \"OP_NEGATE\";\n+    case OP_ABS                    : return \"OP_ABS\";\n+    case OP_NOT                    : return \"OP_NOT\";\n+    case OP_0NOTEQUAL              : return \"OP_0NOTEQUAL\";\n+    case OP_ADD                    : return \"OP_ADD\";\n+    case OP_SUB                    : return \"OP_SUB\";\n+    case OP_MUL                    : return \"OP_MUL\";\n+    case OP_DIV                    : return \"OP_DIV\";\n+    case OP_MOD                    : return \"OP_MOD\";\n+    case OP_LSHIFT                 : return \"OP_LSHIFT\";\n+    case OP_RSHIFT                 : return \"OP_RSHIFT\";\n+    case OP_BOOLAND                : return \"OP_BOOLAND\";\n+    case OP_BOOLOR                 : return \"OP_BOOLOR\";\n+    case OP_NUMEQUAL               : return \"OP_NUMEQUAL\";\n+    case OP_NUMEQUALVERIFY         : return \"OP_NUMEQUALVERIFY\";\n+    case OP_NUMNOTEQUAL            : return \"OP_NUMNOTEQUAL\";\n+    case OP_LESSTHAN               : return \"OP_LESSTHAN\";\n+    case OP_GREATERTHAN            : return \"OP_GREATERTHAN\";\n+    case OP_LESSTHANOREQUAL        : return \"OP_LESSTHANOREQUAL\";\n+    case OP_GREATERTHANOREQUAL     : return \"OP_GREATERTHANOREQUAL\";\n+    case OP_MIN                    : return \"OP_MIN\";\n+    case OP_MAX                    : return \"OP_MAX\";\n+    case OP_WITHIN                 : return \"OP_WITHIN\";\n+\n+    // crypto\n+    case OP_RIPEMD160              : return \"OP_RIPEMD160\";\n+    case OP_SHA1                   : return \"OP_SHA1\";\n+    case OP_SHA256                 : return \"OP_SHA256\";\n+    case OP_HASH160                : return \"OP_HASH160\";\n+    case OP_HASH256                : return \"OP_HASH256\";\n+    case OP_CODESEPARATOR          : return \"OP_CODESEPARATOR\";\n+    case OP_CHECKSIG               : return \"OP_CHECKSIG\";\n+    case OP_CHECKSIGVERIFY         : return \"OP_CHECKSIGVERIFY\";\n+    case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n+    case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n+\n+    // meta\n+    case OP_EVAL                   : return \"OP_EVAL\";\n+\n+    // expanson\n+    case OP_NOP2                   : return \"OP_NOP2\";\n+    case OP_NOP3                   : return \"OP_NOP3\";\n+    case OP_NOP4                   : return \"OP_NOP4\";\n+    case OP_NOP5                   : return \"OP_NOP5\";\n+    case OP_NOP6                   : return \"OP_NOP6\";\n+    case OP_NOP7                   : return \"OP_NOP7\";\n+    case OP_NOP8                   : return \"OP_NOP8\";\n+    case OP_NOP9                   : return \"OP_NOP9\";\n+    case OP_NOP10                  : return \"OP_NOP10\";\n+\n+\n+\n+    // template matching params\n+    case OP_SCRIPTHASH             : return \"OP_SCRIPTHASH\";\n+    case OP_PUBKEYHASH             : return \"OP_PUBKEYHASH\";\n+    case OP_PUBKEY                 : return \"OP_PUBKEY\";\n+\n+    case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n+    default:\n+        return \"OP_UNKNOWN\";\n+    }\n+}\n+\n+//\n+// Returns true if script is valid.\n+//\n+bool EvalScriptInner(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType,\n+                     CScript::const_iterator pbegincodehash, CScript::const_iterator pendcodehash, int& nOpCount, int& nSigOpCount,\n+                     bool fStrictOpEval, int nRecurseDepth)\n {\n     CAutoBN_CTX pctx;\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n-    CScript::const_iterator pbegincodehash = script.begin();\n     opcodetype opcode;\n     valtype vchPushValue;\n     vector<bool> vfExec;\n     vector<valtype> altstack;\n     if (script.size() > 10000)\n         return false;\n-    int nOpCount = 0;\n \n+    // Limit OP_EVAL recursion\n+    if (nRecurseDepth > 2)\n+        return false;\n \n     try\n     {\n@@ -155,7 +321,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 // Control\n                 //\n                 case OP_NOP:\n-                case OP_NOP1: case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_NOP2: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 break;\n \n@@ -751,12 +917,13 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     //PrintHex(vchPubKey.begin(), vchPubKey.end(), \"pubkey: %s\\n\");\n \n                     // Subset of script starting at the most recent codeseparator\n-                    CScript scriptCode(pbegincodehash, pend);\n+                    CScript scriptCode(pbegincodehash, pendcodehash);\n \n                     // Drop the signature, since there's no way for a signature to sign itself\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType);\n+                    nSigOpCount++;\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -800,7 +967,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                         return false;\n \n                     // Subset of script starting at the most recent codeseparator\n-                    CScript scriptCode(pbegincodehash, pend);\n+                    CScript scriptCode(pbegincodehash, pendcodehash);\n \n                     // Drop the signatures, since there's no way for a signature to sign itself\n                     for (int k = 0; k < nSigsCount; k++)\n@@ -823,6 +990,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                         }\n                         ikey++;\n                         nKeysCount--;\n+                        nSigOpCount++;\n \n                         // If there are more signatures left than keys left,\n                         // then too many signatures have failed\n@@ -844,6 +1012,32 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 }\n                 break;\n \n+                case OP_EVAL:\n+                {\n+                    if (!fStrictOpEval)\n+                        break; // Act as a NO_OP\n+\n+\n+                    // Evaluate the top item on the stack as a Script\n+                    // [serialized script ] -- [result(s) of executing script]\n+                    if (stack.size() < 1)\n+                        return false;\n+                    valtype& vchScript = stacktop(-1);\n+                    CScript subscript(vchScript.begin(), vchScript.end());\n+                    popstack(stack);\n+                    \n+                    // Codeseparators not allowed; they don't make sense 'inside' an OP_EVAL, because\n+                    // their purpose is to change which parts of the scriptPubKey script is copied\n+                    // and signed by OP_CHECKSIG, but OP_EVAl'ed code is in the scriptSig, not the scriptPubKey.\n+                    if (subscript.Find(OP_CODESEPARATOR))\n+                        return false;\n+\n+                    if (!EvalScriptInner(stack, subscript, txTo, nIn, nHashType,\n+                                         pbegincodehash, pendcodehash, nOpCount, nSigOpCount, fStrictOpEval, nRecurseDepth++))\n+                        return false;\n+                }\n+                break;\n+\n                 default:\n                     return false;\n             }\n@@ -865,6 +1059,18 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n     return true;\n }\n \n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script,\n+                const CTransaction& txTo, unsigned int nIn, int nHashType,\n+                bool fStrictOpEval, int& nSigOpCountRet)\n+{\n+    CScript::const_iterator pbegincodehash = script.begin();\n+    CScript::const_iterator pendcodehash = script.end();\n+\n+    int nOpCount = 0;\n+    return EvalScriptInner(stack, script, txTo, nIn, nHashType, pbegincodehash, pendcodehash,\n+                           nOpCount, nSigOpCountRet, fStrictOpEval, 0);\n+}\n+\n \n \n \n@@ -963,25 +1169,36 @@ bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CSc\n \n \n \n-\n-bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSolutionRet)\n+//\n+// Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n+//\n+bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)\n {\n     // Templates\n-    static vector<CScript> vTemplates;\n-    if (vTemplates.empty())\n+    static map<txnouttype, CScript> mTemplates;\n+    if (mTemplates.empty())\n     {\n         // Standard tx, sender provides pubkey, receiver adds signature\n-        vTemplates.push_back(CScript() << OP_PUBKEY << OP_CHECKSIG);\n+        mTemplates.insert(make_pair(TX_PUBKEY, CScript() << OP_PUBKEY << OP_CHECKSIG));\n \n         // Bitcoin address tx, sender provides hash of pubkey, receiver provides signature and pubkey\n-        vTemplates.push_back(CScript() << OP_DUP << OP_HASH160 << OP_PUBKEYHASH << OP_EQUALVERIFY << OP_CHECKSIG);\n+        mTemplates.insert(make_pair(TX_PUBKEYHASH, CScript() << OP_DUP << OP_HASH160 << OP_PUBKEYHASH << OP_EQUALVERIFY << OP_CHECKSIG));\n+\n+        // Sender provides N pubkeys, receivers provides M signatures\n+        mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n+\n+        // Sender provides script hash, receiver provides script and\n+        // as many signatures as required to satisfy script\n+        mTemplates.insert(make_pair(TX_SCRIPTHASH, CScript() << OP_DUP << OP_HASH160 << OP_SCRIPTHASH << OP_EQUALVERIFY << OP_EVAL));\n     }\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    BOOST_FOREACH(const CScript& script2, vTemplates)\n+    BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n     {\n-        vSolutionRet.clear();\n+        const CScript& script2 = tplate.second;\n+        vSolutionsRet.clear();\n+\n         opcodetype opcode1, opcode2;\n         vector<unsigned char> vch1, vch2;\n \n@@ -993,170 +1210,318 @@ bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSo\n             if (pc1 == script1.end() && pc2 == script2.end())\n             {\n                 // Found a match\n-                reverse(vSolutionRet.begin(), vSolutionRet.end());\n+                typeRet = tplate.first;\n+                if (typeRet == TX_MULTISIG)\n+                {\n+                    // Additional checks for TX_MULTISIG:\n+                    unsigned char m = vSolutionsRet.front()[0];\n+                    unsigned char n = vSolutionsRet.back()[0];\n+                    if (m < 1 || n < 1 || m > n || vSolutionsRet.size()-2 != n)\n+                        return false;\n+                }\n                 return true;\n             }\n             if (!script1.GetOp(pc1, opcode1, vch1))\n                 break;\n             if (!script2.GetOp(pc2, opcode2, vch2))\n                 break;\n+\n+            // Template matching opcodes:\n+            if (opcode2 == OP_PUBKEYS)\n+            {\n+                while (vch1.size() >= 33 && vch1.size() <= 120)\n+                {\n+                    vSolutionsRet.push_back(vch1);\n+                    if (!script1.GetOp(pc1, opcode1, vch1))\n+                        break;\n+                }\n+                if (!script2.GetOp(pc2, opcode2, vch2))\n+                    break;\n+                // Normal situation is to fall through\n+                // to other if/else statments\n+            }\n+\n             if (opcode2 == OP_PUBKEY)\n             {\n                 if (vch1.size() < 33 || vch1.size() > 120)\n                     break;\n-                vSolutionRet.push_back(make_pair(opcode2, vch1));\n+                vSolutionsRet.push_back(vch1);\n             }\n             else if (opcode2 == OP_PUBKEYHASH)\n             {\n                 if (vch1.size() != sizeof(uint160))\n                     break;\n-                vSolutionRet.push_back(make_pair(opcode2, vch1));\n+                vSolutionsRet.push_back(vch1);\n+            }\n+            else if (opcode2 == OP_SCRIPTHASH)\n+            {\n+                if (vch1.size() != sizeof(uint160))\n+                    break;\n+                vSolutionsRet.push_back(vch1);\n+            }\n+            else if (opcode2 == OP_SMALLINTEGER)\n+            {   // Single-byte small integer pushed onto vSolutions\n+                if (opcode1 == OP_0 ||\n+                    (opcode1 >= OP_1 && opcode1 <= OP_16))\n+                {\n+                    char n = (char)CScript::DecodeOP_N(opcode1);\n+                    vSolutionsRet.push_back(valtype(1, n));\n+                }\n+                else\n+                    break;\n             }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {\n+                // Others must match exactly\n                 break;\n             }\n         }\n     }\n \n-    vSolutionRet.clear();\n+    vSolutionsRet.clear();\n+    typeRet = TX_NONSTANDARD;\n     return false;\n }\n \n \n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType, CScript& scriptSigRet)\n+bool Sign1(const CBitcoinAddress& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n {\n-    scriptSigRet.clear();\n+    CKey key;\n+    if (!keystore.GetKey(address, key))\n+        return false;\n \n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n+    vector<unsigned char> vchSig;\n+    if (!key.Sign(hash, vchSig))\n         return false;\n+    vchSig.push_back((unsigned char)nHashType);\n+    scriptSigRet << vchSig;\n+\n+    return true;\n+}\n \n-    // Compile solution\n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+{\n+    int nSigned = 0;\n+    int nRequired = multisigdata.front()[0];\n+    for (vector<valtype>::const_iterator it = multisigdata.begin()+1; it != multisigdata.begin()+multisigdata.size()-1; it++)\n     {\n-        if (item.first == OP_PUBKEY)\n-        {\n-            // Sign\n-            const valtype& vchPubKey = item.second;\n-            CKey key;\n-            if (!keystore.GetKey(Hash160(vchPubKey), key))\n-                return false;\n-            if (key.GetPubKey() != vchPubKey)\n-                return false;\n-            if (hash != 0)\n-            {\n-                vector<unsigned char> vchSig;\n-                if (!key.Sign(hash, vchSig))\n-                    return false;\n-                vchSig.push_back((unsigned char)nHashType);\n-                scriptSigRet << vchSig;\n-            }\n-        }\n-        else if (item.first == OP_PUBKEYHASH)\n+        const valtype& pubkey = *it;\n+        CBitcoinAddress address;\n+        address.SetPubKey(pubkey);\n+        if (Sign1(address, keystore, hash, nHashType, scriptSigRet))\n         {\n-            // Sign and give pubkey\n-            CKey key;\n-            if (!keystore.GetKey(uint160(item.second), key))\n-                return false;\n-            if (hash != 0)\n-            {\n-                vector<unsigned char> vchSig;\n-                if (!key.Sign(hash, vchSig))\n-                    return false;\n-                vchSig.push_back((unsigned char)nHashType);\n-                scriptSigRet << vchSig << key.GetPubKey();\n-            }\n+            ++nSigned;\n+            if (nSigned == nRequired) break;\n         }\n+    }\n+    return nSigned==nRequired;\n+}\n+\n+//\n+// Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n+// Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed).\n+// Returns true if scriptPubKey could be completely satisified.\n+//\n+bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType, CScript& scriptSigRet)\n+{\n+    scriptSigRet.clear();\n+\n+    txnouttype whichType;\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    CBitcoinAddress address;\n+    CScript subscript;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+        return false;\n+    case TX_PUBKEY:\n+        address.SetPubKey(vSolutions[0]);\n+        return Sign1(address, keystore, hash, nHashType, scriptSigRet);\n+    case TX_PUBKEYHASH:\n+        address.SetHash160(uint160(vSolutions[0]));\n+        if (!Sign1(address, keystore, hash, nHashType, scriptSigRet))\n+            return false;\n         else\n         {\n-            return false;\n+            valtype vch;\n+            keystore.GetPubKey(address, vch);\n+            scriptSigRet << vch;\n         }\n+        break;\n+    case TX_SCRIPTHASH:\n+        if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n+            return false;\n+        if (!Solver(keystore, subscript, hash, nHashType, scriptSigRet))\n+            return false;\n+        if (hash != 0)\n+            // static_cast to get vector.operator<< instead of CScript.operator<<\n+            scriptSigRet << static_cast<valtype>(subscript); // signatures AND serialized script\n+        break;\n+    case TX_MULTISIG:\n+        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n+        return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n     }\n-\n     return true;\n }\n \n \n bool IsStandard(const CScript& scriptPubKey)\n {\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    return Solver(scriptPubKey, vSolution);\n+    vector<valtype> vSolutions;\n+    txnouttype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n }\n \n \n+int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n+{\n+    int nResult = 0;\n+    BOOST_FOREACH(const valtype& pubkey, pubkeys)\n+    {\n+        CBitcoinAddress address;\n+        address.SetPubKey(pubkey);\n+        if (keystore.HaveKey(address))\n+            ++nResult;\n+    }\n+    return nResult;\n+}\n+\n bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n+    vector<valtype> vSolutions;\n+    txnouttype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    // Compile solution\n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+    CBitcoinAddress address;\n+    switch (whichType)\n     {\n-        if (item.first == OP_PUBKEY)\n-        {\n-            const valtype& vchPubKey = item.second;\n-            vector<unsigned char> vchPubKeyFound;\n-            if (!keystore.GetPubKey(Hash160(vchPubKey), vchPubKeyFound))\n-                return false;\n-            if (vchPubKeyFound != vchPubKey)\n-                return false;\n-        }\n-        else if (item.first == OP_PUBKEYHASH)\n-        {\n-            if (!keystore.HaveKey(uint160(item.second)))\n-                return false;\n-        }\n-        else\n-        {\n+    case TX_NONSTANDARD:\n+        return false;\n+    case TX_PUBKEY:\n+        address.SetPubKey(vSolutions[0]);\n+        return keystore.HaveKey(address);\n+    case TX_PUBKEYHASH:\n+        address.SetHash160(uint160(vSolutions[0]));\n+        return keystore.HaveKey(address);\n+    case TX_SCRIPTHASH:\n+    {\n+        CScript subscript;\n+        if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n             return false;\n-        }\n+        return IsMine(keystore, subscript);\n     }\n-\n-    return true;\n+    case TX_MULTISIG:\n+    {\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        return HaveKeys(vSolutions, keystore);\n+    }\n+    }\n+    return false;\n }\n \n-bool static ExtractAddressInner(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n+bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n {\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n+    vector<valtype> vSolutions;\n+    txnouttype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+    if (whichType == TX_PUBKEY)\n     {\n-        if (item.first == OP_PUBKEY)\n-            addressRet.SetPubKey(item.second);\n-        else if (item.first == OP_PUBKEYHASH)\n-            addressRet.SetHash160((uint160)item.second);\n-        if (keystore == NULL || keystore->HaveKey(addressRet))\n-            return true;\n+        addressRet.SetPubKey(vSolutions[0]);\n+        return true;\n     }\n-\n+    else if (whichType == TX_PUBKEYHASH)\n+    {\n+        addressRet.SetHash160(uint160(vSolutions[0]));\n+        return true;\n+    }\n+    else if (whichType == TX_SCRIPTHASH)\n+    {\n+        addressRet.SetScriptHash160(uint160(vSolutions[0]));\n+        return true;\n+    }\n+    // Multisig txns have more than one address...\n     return false;\n }\n \n-\n-bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n+bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* keystore, txnouttype& typeRet, vector<CBitcoinAddress>& addressRet, int& nRequiredRet)\n {\n-    if (keystore)\n-        return ExtractAddressInner(scriptPubKey, keystore, addressRet);\n+    addressRet.clear();\n+    typeRet = TX_NONSTANDARD;\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, typeRet, vSolutions))\n+        return false;\n+\n+    if (typeRet == TX_MULTISIG)\n+    {\n+        nRequiredRet = vSolutions.front()[0];\n+        int n = vSolutions.back()[0];\n+        for (int i = 1; i < vSolutions.size()-1; i++)\n+        {\n+            CBitcoinAddress address;\n+            address.SetPubKey(vSolutions[i]);\n+            addressRet.push_back(address);\n+        }\n+    }\n     else\n-        return ExtractAddressInner(scriptPubKey, NULL, addressRet);\n-    return false;\n-}\n+    {\n+        nRequiredRet = 1;\n+        CBitcoinAddress address;\n+        if (typeRet == TX_PUBKEYHASH)\n+            address.SetHash160(uint160(vSolutions.front()));\n+        else if (typeRet == TX_SCRIPTHASH)\n+            address.SetScriptHash160(uint160(vSolutions.front()));\n+        else if (typeRet == TX_PUBKEY)\n+            address.SetPubKey(vSolutions.front());\n+        addressRet.push_back(address);\n+    }\n \n+    return true;\n+}\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet,\n+                  int nHashType, bool fStrictOpEval)\n {\n     vector<vector<unsigned char> > stack;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, nHashType))\n+    if (!EvalScript(stack, scriptSig, txTo, nIn, nHashType, fStrictOpEval, nSigOpCountRet))\n         return false;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, nHashType))\n+    if (!EvalScript(stack, scriptPubKey, txTo, nIn, nHashType, fStrictOpEval, nSigOpCountRet))\n         return false;\n     if (stack.empty())\n         return false;\n-    return CastToBool(stack.back());\n+    bool fResult = CastToBool(stack.back());\n+\n+    // This code should be removed when a compatibility-breaking block chain split has passed.\n+    // Special check for OP_EVAL backwards-compatibility: if scriptPubKey or scriptSig contains\n+    // OP_EVAL, then result must be identical if OP_EVAL is treated as a no-op:\n+    if (fResult && fStrictOpEval && (scriptPubKey.Find(OP_EVAL) || scriptSig.Find(OP_EVAL)))\n+        return VerifyScript(scriptSig, scriptPubKey, txTo, nIn, nSigOpCountRet, nHashType, false);\n+\n+    return fResult;\n }\n \n \n@@ -1177,15 +1542,16 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTrans\n     txin.scriptSig = scriptPrereq + txin.scriptSig;\n \n     // Test solution\n+    int nUnused = 0;\n     if (scriptPrereq.empty())\n-        if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, 0))\n+        if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nUnused, 0, true))\n             return false;\n \n     return true;\n }\n \n \n-bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType, bool fStrictOpEval)\n {\n     assert(nIn < txTo.vin.size());\n     const CTxIn& txin = txTo.vin[nIn];\n@@ -1196,8 +1562,35 @@ bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsig\n     if (txin.prevout.hash != txFrom.GetHash())\n         return false;\n \n-    if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nHashType))\n+    if (!VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, nSigOpCountRet, nHashType, fStrictOpEval))\n         return false;\n \n     return true;\n }\n+\n+void CScript::SetBitcoinAddress(const CBitcoinAddress& address)\n+{\n+    this->clear();\n+    if (address.IsScript())\n+        *this << OP_DUP << OP_HASH160 << address.GetHash160() << OP_EQUALVERIFY << OP_EVAL;\n+    else\n+        *this << OP_DUP << OP_HASH160 << address.GetHash160() << OP_EQUALVERIFY << OP_CHECKSIG;\n+}\n+\n+void CScript::SetMultisig(int nRequired, const std::vector<CKey>& keys)\n+{\n+    this->clear();\n+\n+    *this << EncodeOP_N(nRequired);\n+    BOOST_FOREACH(const CKey& key, keys)\n+        *this << key.GetPubKey();\n+    *this << EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n+}\n+\n+void CScript::SetEval(const CScript& subscript)\n+{\n+    assert(!subscript.empty());\n+    uint160 subscriptHash = Hash160(subscript);\n+    this->clear();\n+    *this << OP_DUP << OP_HASH160 << subscriptHash << OP_EQUALVERIFY << OP_EVAL;\n+}"
      },
      {
        "sha": "b671e159632a8c061a54f26d9a5ed220482edb95",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 60,
        "deletions": 183,
        "changes": 243,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -6,14 +6,14 @@\n #define H_BITCOIN_SCRIPT\n \n #include \"base58.h\"\n-#include \"keystore.h\"\n \n #include <string>\n #include <vector>\n \n #include <boost/foreach.hpp>\n \n class CTransaction;\n+class CKeyStore;\n \n enum\n {\n@@ -24,6 +24,17 @@ enum\n };\n \n \n+enum txnouttype\n+{\n+    TX_NONSTANDARD,\n+    // 'standard' transaction types:\n+    TX_PUBKEY,\n+    TX_PUBKEYHASH,\n+    TX_SCRIPTHASH,\n+    TX_MULTISIG,\n+};\n+\n+const char* GetTxnOutputType(txnouttype t);\n \n enum opcodetype\n {\n@@ -147,8 +158,10 @@ enum opcodetype\n     OP_CHECKMULTISIG,\n     OP_CHECKMULTISIGVERIFY,\n \n+    // meta\n+    OP_EVAL, // Was OP_NOP1\n+\n     // expansion\n-    OP_NOP1,\n     OP_NOP2,\n     OP_NOP3,\n     OP_NOP4,\n@@ -162,162 +175,16 @@ enum opcodetype\n \n \n     // template matching params\n+    OP_SMALLINTEGER = 0xfa,\n+    OP_PUBKEYS = 0xfb,\n+    OP_SCRIPTHASH = 0xfc,\n     OP_PUBKEYHASH = 0xfd,\n     OP_PUBKEY = 0xfe,\n \n     OP_INVALIDOPCODE = 0xff,\n };\n \n-\n-\n-\n-\n-\n-\n-\n-inline const char* GetOpName(opcodetype opcode)\n-{\n-    switch (opcode)\n-    {\n-    // push value\n-    case OP_0                      : return \"0\";\n-    case OP_PUSHDATA1              : return \"OP_PUSHDATA1\";\n-    case OP_PUSHDATA2              : return \"OP_PUSHDATA2\";\n-    case OP_PUSHDATA4              : return \"OP_PUSHDATA4\";\n-    case OP_1NEGATE                : return \"-1\";\n-    case OP_RESERVED               : return \"OP_RESERVED\";\n-    case OP_1                      : return \"1\";\n-    case OP_2                      : return \"2\";\n-    case OP_3                      : return \"3\";\n-    case OP_4                      : return \"4\";\n-    case OP_5                      : return \"5\";\n-    case OP_6                      : return \"6\";\n-    case OP_7                      : return \"7\";\n-    case OP_8                      : return \"8\";\n-    case OP_9                      : return \"9\";\n-    case OP_10                     : return \"10\";\n-    case OP_11                     : return \"11\";\n-    case OP_12                     : return \"12\";\n-    case OP_13                     : return \"13\";\n-    case OP_14                     : return \"14\";\n-    case OP_15                     : return \"15\";\n-    case OP_16                     : return \"16\";\n-\n-    // control\n-    case OP_NOP                    : return \"OP_NOP\";\n-    case OP_VER                    : return \"OP_VER\";\n-    case OP_IF                     : return \"OP_IF\";\n-    case OP_NOTIF                  : return \"OP_NOTIF\";\n-    case OP_VERIF                  : return \"OP_VERIF\";\n-    case OP_VERNOTIF               : return \"OP_VERNOTIF\";\n-    case OP_ELSE                   : return \"OP_ELSE\";\n-    case OP_ENDIF                  : return \"OP_ENDIF\";\n-    case OP_VERIFY                 : return \"OP_VERIFY\";\n-    case OP_RETURN                 : return \"OP_RETURN\";\n-\n-    // stack ops\n-    case OP_TOALTSTACK             : return \"OP_TOALTSTACK\";\n-    case OP_FROMALTSTACK           : return \"OP_FROMALTSTACK\";\n-    case OP_2DROP                  : return \"OP_2DROP\";\n-    case OP_2DUP                   : return \"OP_2DUP\";\n-    case OP_3DUP                   : return \"OP_3DUP\";\n-    case OP_2OVER                  : return \"OP_2OVER\";\n-    case OP_2ROT                   : return \"OP_2ROT\";\n-    case OP_2SWAP                  : return \"OP_2SWAP\";\n-    case OP_IFDUP                  : return \"OP_IFDUP\";\n-    case OP_DEPTH                  : return \"OP_DEPTH\";\n-    case OP_DROP                   : return \"OP_DROP\";\n-    case OP_DUP                    : return \"OP_DUP\";\n-    case OP_NIP                    : return \"OP_NIP\";\n-    case OP_OVER                   : return \"OP_OVER\";\n-    case OP_PICK                   : return \"OP_PICK\";\n-    case OP_ROLL                   : return \"OP_ROLL\";\n-    case OP_ROT                    : return \"OP_ROT\";\n-    case OP_SWAP                   : return \"OP_SWAP\";\n-    case OP_TUCK                   : return \"OP_TUCK\";\n-\n-    // splice ops\n-    case OP_CAT                    : return \"OP_CAT\";\n-    case OP_SUBSTR                 : return \"OP_SUBSTR\";\n-    case OP_LEFT                   : return \"OP_LEFT\";\n-    case OP_RIGHT                  : return \"OP_RIGHT\";\n-    case OP_SIZE                   : return \"OP_SIZE\";\n-\n-    // bit logic\n-    case OP_INVERT                 : return \"OP_INVERT\";\n-    case OP_AND                    : return \"OP_AND\";\n-    case OP_OR                     : return \"OP_OR\";\n-    case OP_XOR                    : return \"OP_XOR\";\n-    case OP_EQUAL                  : return \"OP_EQUAL\";\n-    case OP_EQUALVERIFY            : return \"OP_EQUALVERIFY\";\n-    case OP_RESERVED1              : return \"OP_RESERVED1\";\n-    case OP_RESERVED2              : return \"OP_RESERVED2\";\n-\n-    // numeric\n-    case OP_1ADD                   : return \"OP_1ADD\";\n-    case OP_1SUB                   : return \"OP_1SUB\";\n-    case OP_2MUL                   : return \"OP_2MUL\";\n-    case OP_2DIV                   : return \"OP_2DIV\";\n-    case OP_NEGATE                 : return \"OP_NEGATE\";\n-    case OP_ABS                    : return \"OP_ABS\";\n-    case OP_NOT                    : return \"OP_NOT\";\n-    case OP_0NOTEQUAL              : return \"OP_0NOTEQUAL\";\n-    case OP_ADD                    : return \"OP_ADD\";\n-    case OP_SUB                    : return \"OP_SUB\";\n-    case OP_MUL                    : return \"OP_MUL\";\n-    case OP_DIV                    : return \"OP_DIV\";\n-    case OP_MOD                    : return \"OP_MOD\";\n-    case OP_LSHIFT                 : return \"OP_LSHIFT\";\n-    case OP_RSHIFT                 : return \"OP_RSHIFT\";\n-    case OP_BOOLAND                : return \"OP_BOOLAND\";\n-    case OP_BOOLOR                 : return \"OP_BOOLOR\";\n-    case OP_NUMEQUAL               : return \"OP_NUMEQUAL\";\n-    case OP_NUMEQUALVERIFY         : return \"OP_NUMEQUALVERIFY\";\n-    case OP_NUMNOTEQUAL            : return \"OP_NUMNOTEQUAL\";\n-    case OP_LESSTHAN               : return \"OP_LESSTHAN\";\n-    case OP_GREATERTHAN            : return \"OP_GREATERTHAN\";\n-    case OP_LESSTHANOREQUAL        : return \"OP_LESSTHANOREQUAL\";\n-    case OP_GREATERTHANOREQUAL     : return \"OP_GREATERTHANOREQUAL\";\n-    case OP_MIN                    : return \"OP_MIN\";\n-    case OP_MAX                    : return \"OP_MAX\";\n-    case OP_WITHIN                 : return \"OP_WITHIN\";\n-\n-    // crypto\n-    case OP_RIPEMD160              : return \"OP_RIPEMD160\";\n-    case OP_SHA1                   : return \"OP_SHA1\";\n-    case OP_SHA256                 : return \"OP_SHA256\";\n-    case OP_HASH160                : return \"OP_HASH160\";\n-    case OP_HASH256                : return \"OP_HASH256\";\n-    case OP_CODESEPARATOR          : return \"OP_CODESEPARATOR\";\n-    case OP_CHECKSIG               : return \"OP_CHECKSIG\";\n-    case OP_CHECKSIGVERIFY         : return \"OP_CHECKSIGVERIFY\";\n-    case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n-    case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n-\n-    // expanson\n-    case OP_NOP1                   : return \"OP_NOP1\";\n-    case OP_NOP2                   : return \"OP_NOP2\";\n-    case OP_NOP3                   : return \"OP_NOP3\";\n-    case OP_NOP4                   : return \"OP_NOP4\";\n-    case OP_NOP5                   : return \"OP_NOP5\";\n-    case OP_NOP6                   : return \"OP_NOP6\";\n-    case OP_NOP7                   : return \"OP_NOP7\";\n-    case OP_NOP8                   : return \"OP_NOP8\";\n-    case OP_NOP9                   : return \"OP_NOP9\";\n-    case OP_NOP10                  : return \"OP_NOP10\";\n-\n-\n-\n-    // template matching params\n-    case OP_PUBKEYHASH             : return \"OP_PUBKEYHASH\";\n-    case OP_PUBKEY                 : return \"OP_PUBKEY\";\n-\n-    case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n-    default:\n-        return \"OP_UNKNOWN\";\n-    }\n-};\n-\n+const char* GetOpName(opcodetype opcode);\n \n \n \n@@ -574,22 +441,52 @@ class CScript : public std::vector<unsigned char>\n         return true;\n     }\n \n+    // Encode/decode small integers:\n+    static int DecodeOP_N(opcodetype opcode)\n+    {\n+        if (opcode == OP_0)\n+            return 0;\n+        assert(opcode >= OP_1 && opcode <= OP_16);\n+        return (int)opcode - (int)(OP_1 - 1);\n+    }\n+    static opcodetype EncodeOP_N(int n)\n+    {\n+        assert(n >= 0 && n <= 16);\n+        if (n == 0)\n+            return OP_0;\n+        return (opcodetype)(OP_1+n-1);\n+    }\n \n-    void FindAndDelete(const CScript& b)\n+    int FindAndDelete(const CScript& b)\n     {\n+        int nFound = 0;\n         if (b.empty())\n-            return;\n+            return nFound;\n         iterator pc = begin();\n         opcodetype opcode;\n         do\n         {\n             while (end() - pc >= b.size() && memcmp(&pc[0], &b[0], b.size()) == 0)\n+            {\n                 erase(pc, pc + b.size());\n+                ++nFound;\n+            }\n         }\n         while (GetOp(pc, opcode));\n+        return nFound;\n+    }\n+    int Find(opcodetype op) const\n+    {\n+        int nFound = 0;\n+        opcodetype opcode;\n+        for (const_iterator pc = begin(); pc != end() && GetOp(pc, opcode);)\n+            if (opcode == op)\n+                ++nFound;\n+        return nFound;\n     }\n \n-\n+    // This method should be removed when a compatibility-breaking block chain split has passed.\n+    // Compatibility method for old clients that count sigops differently:\n     int GetSigOpCount() const\n     {\n         int n = 0;\n@@ -607,11 +504,9 @@ class CScript : public std::vector<unsigned char>\n         return n;\n     }\n \n-\n+    // Called by CTransaction::IsStandard\n     bool IsPushOnly() const\n     {\n-        if (size() > 200)\n-            return false;\n         const_iterator pc = begin();\n         while (pc < end())\n         {\n@@ -625,31 +520,13 @@ class CScript : public std::vector<unsigned char>\n     }\n \n \n-    CBitcoinAddress GetBitcoinAddress() const\n-    {\n-        opcodetype opcode;\n-        std::vector<unsigned char> vch;\n-        CScript::const_iterator pc = begin();\n-        if (!GetOp(pc, opcode, vch) || opcode != OP_DUP) return 0;\n-        if (!GetOp(pc, opcode, vch) || opcode != OP_HASH160) return 0;\n-        if (!GetOp(pc, opcode, vch) || vch.size() != sizeof(uint160)) return 0;\n-        uint160 hash160 = uint160(vch);\n-        if (!GetOp(pc, opcode, vch) || opcode != OP_EQUALVERIFY) return 0;\n-        if (!GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG) return 0;\n-        if (pc != end()) return 0;\n-        return CBitcoinAddress(hash160);\n-    }\n-\n-    void SetBitcoinAddress(const CBitcoinAddress& address)\n-    {\n-        this->clear();\n-        *this << OP_DUP << OP_HASH160 << address.GetHash160() << OP_EQUALVERIFY << OP_CHECKSIG;\n-    }\n-\n+    void SetBitcoinAddress(const CBitcoinAddress& address);\n     void SetBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n     {\n         SetBitcoinAddress(CBitcoinAddress(vchPubKey));\n     }\n+    void SetMultisig(int nRequired, const std::vector<CKey>& keys);\n+    void SetEval(const CScript& subscript);\n \n \n     void PrintHex() const\n@@ -690,14 +567,14 @@ class CScript : public std::vector<unsigned char>\n \n \n \n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType, bool fStrictOpEval, int& nSigOpCountRet);\n \n-\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-\n+bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* pkeystore, CBitcoinAddress& addressRet);\n+bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* pkeystore, txnouttype& typeRet, std::vector<CBitcoinAddress>& addressRet, int& nRequiredRet);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL, CScript scriptPrereq=CScript());\n-bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType=0);\n+bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int& nSigOpCountRet, int nHashType=0, bool fStrictOpEval=true);\n \n #endif"
      },
      {
        "sha": "e9b7b4517aeeb36e8293516cdcc5187fded01310",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -5,9 +5,10 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n \n-#include \"../main.h\"\n-#include \"../net.h\"\n-#include \"../util.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"net.h\"\n+#include \"util.h\"\n \n using namespace std;\n "
      },
      {
        "sha": "d52ac7498256654306f65e26c271c09acfa555b4",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -1,6 +1,8 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../util.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"util.h\"\n \n BOOST_AUTO_TEST_SUITE(base58_tests)\n "
      },
      {
        "sha": "fff30ef5eb6b05df178e6c15872b0fbff0db60d7",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -1,18 +1,20 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../util.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"util.h\"\n \n BOOST_AUTO_TEST_SUITE(base64_tests)\n \n BOOST_AUTO_TEST_CASE(base64_testvectors)\n {\n-    static const string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n-    static const string vstrOut[] = {\"\",\"Zg==\",\"Zm8=\",\"Zm9v\",\"Zm9vYg==\",\"Zm9vYmE=\",\"Zm9vYmFy\"};\n+    static const std::string vstrIn[]  = {\"\",\"f\",\"fo\",\"foo\",\"foob\",\"fooba\",\"foobar\"};\n+    static const std::string vstrOut[] = {\"\",\"Zg==\",\"Zm8=\",\"Zm9v\",\"Zm9vYg==\",\"Zm9vYmE=\",\"Zm9vYmFy\"};\n     for (int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n-        string strEnc = EncodeBase64(vstrIn[i]);\n+        std::string strEnc = EncodeBase64(vstrIn[i]);\n         BOOST_CHECK(strEnc == vstrOut[i]);\n-        string strDec = DecodeBase64(strEnc);\n+        std::string strDec = DecodeBase64(strEnc);\n         BOOST_CHECK(strDec == vstrIn[i]);\n     }\n }"
      },
      {
        "sha": "d4abd6d2a7e90fdae8cc88e7bd721bfcc33b6e91",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -1,6 +1,6 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../uint256.h\"\n+#include \"uint256.h\"\n \n extern void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n "
      },
      {
        "sha": "58f62b9542ef376a7378323d395b1237c2f4db23",
        "filename": "src/test/multisig_tests.cpp",
        "status": "added",
        "additions": 294,
        "deletions": 0,
        "changes": 294,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -0,0 +1,294 @@\n+#include <boost/assert.hpp>\n+#include <boost/assign/list_of.hpp>\n+#include <boost/assign/list_inserter.hpp>\n+#include <boost/assign/std/vector.hpp>\n+#include <boost/test/unit_test.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/tuple/tuple.hpp>\n+\n+#include <openssl/ec.h>\n+#include <openssl/err.h>\n+\n+#include \"keystore.h\"\n+#include \"main.h\"\n+#include \"script.h\"\n+#include \"wallet.h\"\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+typedef vector<unsigned char> valtype;\n+\n+extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOpCount,\n+                         int nHashType, bool fStrictOpEval);\n+\n+BOOST_AUTO_TEST_SUITE(multisig_tests)\n+\n+CScript\n+sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n+{\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL);\n+\n+    CScript result;\n+    result << OP_0; // CHECKMULTISIG bug workaround\n+    BOOST_FOREACH(CKey key, keys)\n+    {\n+        vector<unsigned char> vchSig;\n+        BOOST_CHECK(key.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        result << vchSig;\n+    }\n+    return result;\n+}\n+\n+BOOST_AUTO_TEST_CASE(multisig_verify)\n+{\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n+        key[i].MakeNewKey();\n+\n+    CScript a_and_b;\n+    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript a_or_b;\n+    a_or_b << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript escrow;\n+    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+\n+    CTransaction txFrom;  // Funding transaction\n+    txFrom.vout.resize(3);\n+    txFrom.vout[0].scriptPubKey = a_and_b;\n+    txFrom.vout[1].scriptPubKey = a_or_b;\n+    txFrom.vout[2].scriptPubKey = escrow;\n+\n+    CTransaction txTo[3]; // Spending transaction\n+    for (int i = 0; i < 3; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+    }\n+\n+    vector<CKey> keys;\n+    CScript s;\n+    int nUnused = 0;\n+\n+    // Test a AND b:\n+    keys.clear();\n+    keys += key[0],key[1]; // magic operator+= from boost.assign\n+    s = sign_multisig(a_and_b, keys, txTo[0], 0);\n+    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0, true));\n+\n+    for (int i = 0; i < 4; i++)\n+    {\n+        keys.clear();\n+        keys += key[i];\n+        s = sign_multisig(a_and_b, keys, txTo[0], 0);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0, true), strprintf(\"a&b 1: %d\", i));\n+\n+        keys.clear();\n+        keys += key[1],key[i];\n+        s = sign_multisig(a_and_b, keys, txTo[0], 0);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, nUnused, 0, true), strprintf(\"a&b 2: %d\", i));\n+    }\n+\n+    // Test a OR b:\n+    for (int i = 0; i < 4; i++)\n+    {\n+        keys.clear();\n+        keys += key[i];\n+        s = sign_multisig(a_or_b, keys, txTo[1], 0);\n+        if (i == 0 || i == 1)\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0, true), strprintf(\"a|b: %d\", i));\n+        else\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0, true), strprintf(\"a|b: %d\", i));\n+    }\n+    s.clear();\n+    s << OP_0 << OP_0;\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0, true));\n+    s.clear();\n+    s << OP_0 << OP_1;\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, nUnused, 0, true));\n+\n+\n+    for (int i = 0; i < 4; i++)\n+        for (int j = 0; j < 4; j++)\n+        {\n+            keys.clear();\n+            keys += key[i],key[j];\n+            s = sign_multisig(escrow, keys, txTo[2], 0);\n+            if (i < j && i < 3 && j < 3)\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, nUnused, 0, true), strprintf(\"escrow 1: %d %d\", i, j));\n+            else\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, nUnused, 0, true), strprintf(\"escrow 2: %d %d\", i, j));\n+        }\n+}\n+\n+BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n+{\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n+        key[i].MakeNewKey();\n+\n+    CScript a_and_b;\n+    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(::IsStandard(a_and_b));\n+\n+    CScript a_or_b;\n+    a_or_b  << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(::IsStandard(a_or_b));\n+\n+    CScript escrow;\n+    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(::IsStandard(escrow));\n+\n+    CScript one_of_four;\n+    one_of_four << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << key[3].GetPubKey() << OP_4 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!::IsStandard(one_of_four));\n+\n+    CScript malformed[6];\n+    malformed[0] << OP_3 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    malformed[1] << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    malformed[2] << OP_0 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    malformed[3] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_0 << OP_CHECKMULTISIG;\n+    malformed[4] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_CHECKMULTISIG;\n+    malformed[5] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey();\n+\n+    for (int i = 0; i < 6; i++)\n+        BOOST_CHECK(!::IsStandard(malformed[i]));\n+}\n+\n+BOOST_AUTO_TEST_CASE(multisig_Solver1)\n+{\n+    // Tests Solver() that returns lists of keys that are\n+    // required to satisfy a ScriptPubKey\n+    //\n+    // Also tests IsMine() and ExtractAddress()\n+    //\n+    // Note: ExtractAddress for the multisignature transactions\n+    // always returns false for this release, even if you have\n+    // one key that would satisfy an (a|b) or 2-of-3 keys needed\n+    // to spend an escrow transaction.\n+    //\n+    CBasicKeyStore keystore, emptykeystore;\n+    CKey key[3];\n+    CBitcoinAddress keyaddr[3];\n+    for (int i = 0; i < 3; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+        keyaddr[i].SetPubKey(key[i].GetPubKey());\n+    }\n+\n+    {\n+        vector<valtype> solutions;\n+        txnouttype whichType;\n+        CScript s;\n+        s << key[0].GetPubKey() << OP_CHECKSIG;\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n+        BOOST_CHECK(solutions.size() == 1);\n+        CBitcoinAddress addr;\n+        BOOST_CHECK(ExtractAddress(s, &keystore, addr));\n+        BOOST_CHECK(addr == keyaddr[0]);\n+        BOOST_CHECK(IsMine(keystore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, s));\n+    }\n+    {\n+        vector<valtype> solutions;\n+        txnouttype whichType;\n+        CScript s;\n+        s << OP_DUP << OP_HASH160 << Hash160(key[0].GetPubKey()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n+        BOOST_CHECK(solutions.size() == 1);\n+        CBitcoinAddress addr;\n+        BOOST_CHECK(ExtractAddress(s, &keystore, addr));\n+        BOOST_CHECK(addr == keyaddr[0]);\n+        BOOST_CHECK(IsMine(keystore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, s));\n+    }\n+    {\n+        vector<valtype> solutions;\n+        txnouttype whichType;\n+        CScript s;\n+        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n+        BOOST_CHECK_EQUAL(solutions.size(), 4);\n+        CBitcoinAddress addr;\n+        BOOST_CHECK(!ExtractAddress(s, &keystore, addr));\n+        BOOST_CHECK(IsMine(keystore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, s));\n+    }\n+    {\n+        vector<valtype> solutions;\n+        txnouttype whichType;\n+        CScript s;\n+        s << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n+        BOOST_CHECK_EQUAL(solutions.size(), 4);\n+        vector<CBitcoinAddress> addrs;\n+        int nRequired;\n+        BOOST_CHECK(ExtractAddresses(s, &keystore, whichType, addrs, nRequired));\n+        BOOST_CHECK(addrs[0] == keyaddr[0]);\n+        BOOST_CHECK(addrs[1] == keyaddr[1]);\n+        BOOST_CHECK(nRequired = 1);\n+        BOOST_CHECK(IsMine(keystore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, s));\n+    }\n+    {\n+        vector<valtype> solutions;\n+        txnouttype whichType;\n+        CScript s;\n+        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+        BOOST_CHECK(Solver(s, whichType, solutions));\n+        BOOST_CHECK(solutions.size() == 5);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(multisig_Sign)\n+{\n+    // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+    }\n+\n+    CScript a_and_b;\n+    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript a_or_b;\n+    a_or_b  << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+\n+    CScript escrow;\n+    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+\n+    CTransaction txFrom;  // Funding transaction\n+    txFrom.vout.resize(3);\n+    txFrom.vout[0].scriptPubKey = a_and_b;\n+    txFrom.vout[1].scriptPubKey = a_or_b;\n+    txFrom.vout[2].scriptPubKey = escrow;\n+\n+    CTransaction txTo[3]; // Spending transaction\n+    for (int i = 0; i < 3; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+    }\n+\n+    for (int i = 0; i < 3; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+    }\n+}\n+\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "c44642c6e990f285de066970ccffec91906eee03",
        "filename": "src/test/script_op_eval_tests.cpp",
        "status": "added",
        "additions": 234,
        "deletions": 0,
        "changes": 234,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/script_op_eval_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/script_op_eval_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_op_eval_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -0,0 +1,234 @@\n+#include <boost/assert.hpp>\n+#include <boost/assign/list_of.hpp>\n+#include <boost/assign/list_inserter.hpp>\n+#include <boost/assign/std/vector.hpp>\n+#include <boost/test/unit_test.hpp>\n+#include <boost/foreach.hpp>\n+\n+#include \"../main.h\"\n+#include \"../script.h\"\n+#include \"../wallet.h\"\n+\n+using namespace std;\n+\n+// Test routines internal to script.cpp:\n+extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps,\n+                         int nHashType, bool fStrictOpEval);\n+\n+BOOST_AUTO_TEST_SUITE(script_op_eval_tests)\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval1)\n+{\n+    // OP_EVAL looks like this:\n+    // scriptSig:    <sig> <sig...> <serialized_script>\n+    // scriptPubKey: DUP HASH160 <hash> EQUALVERIFY EVAL\n+\n+    // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+    }\n+\n+    // 8 Scripts: checking all combinations of\n+    // different keys, straight/EVAL, pubkey/pubkeyhash\n+    CScript standardScripts[4];\n+    standardScripts[0] << key[0].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[1].SetBitcoinAddress(key[1].GetPubKey());\n+    standardScripts[2] << key[1].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[3].SetBitcoinAddress(key[2].GetPubKey());\n+    CScript evalScripts[4];\n+    uint160 sigScriptHashes[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        sigScriptHashes[i] = Hash160(standardScripts[i]);\n+        keystore.AddCScript(sigScriptHashes[i], standardScripts[i]);\n+        evalScripts[i] << OP_DUP << OP_HASH160 << sigScriptHashes[i] << OP_EQUALVERIFY << OP_EVAL;\n+    }\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(8);\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txFrom.vout[i].scriptPubKey = evalScripts[i];\n+        txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n+    }\n+    BOOST_CHECK(txFrom.IsStandard());\n+\n+    CTransaction txTo[8]; // Spending transactions\n+    for (int i = 0; i < 8; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+    }\n+    for (int i = 0; i < 8; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+    }\n+    // All of the above should be OK, and the txTos have valid signatures\n+    // Check to make sure signature verification fails if we use the wrong ScriptSig:\n+    for (int i = 0; i < 8; i++)\n+        for (int j = 0; j < 8; j++)\n+        {\n+            CScript sigSave = txTo[i].vin[0].scriptSig;\n+            txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n+            int nUnused = 0;\n+            bool sigOK = VerifySignature(txFrom, txTo[i], 0, nUnused);\n+            if (i == j)\n+                BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n+            else\n+                BOOST_CHECK_MESSAGE(!sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n+            txTo[i].vin[0].scriptSig = sigSave;\n+        }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval2)\n+{\n+    // Test OP_EVAL edge cases\n+\n+    CScript recurse;\n+    recurse << OP_DUP << OP_EVAL;\n+\n+    uint160 recurseHash = Hash160(recurse);\n+\n+    CScript fund;\n+    fund << OP_DUP << OP_HASH160 << recurseHash << OP_EQUALVERIFY << OP_EVAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    BOOST_CHECK(txFrom.IsStandard()); // Looks like a standard transaction until you try to spend it\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(recurse);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused, true));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval3)\n+{\n+    // Test the CScript::Set* methods\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    std::vector<CKey> keys;\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+        keys.push_back(key[i]);\n+    }\n+\n+    CScript inner[4];\n+    inner[0].SetBitcoinAddress(key[0].GetPubKey());\n+    inner[1].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+2));\n+    inner[2].SetMultisig(1, std::vector<CKey>(keys.begin(), keys.begin()+2));\n+    inner[3].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+3));\n+\n+    CScript outer[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        outer[i].SetEval(inner[i]);\n+        keystore.AddCScript(Hash160(inner[i]), inner[i]);\n+    }\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(4);\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txFrom.vout[i].scriptPubKey = outer[i];\n+    }\n+    BOOST_CHECK(txFrom.IsStandard());\n+\n+    CTransaction txTo[4]; // Spending transactions\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+        txTo[i].vout[0].scriptPubKey = inner[i];\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+    }\n+    for (int i = 0; i < 4; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(txTo[i].IsStandard(), strprintf(\"txTo[%d].IsStandard\", i));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval_backcompat1)\n+{\n+    // Check backwards-incompatibility-testing code\n+    CScript returnsEleven;\n+    returnsEleven << OP_11;\n+\n+    // This should validate on new clients, but will\n+    // be invalid on old clients (that interpret OP_EVAL as a no-op)\n+    //  ... except there's a special rule that makes new clients reject\n+    // it.\n+    CScript fund;\n+    fund << OP_EVAL << OP_11 << OP_EQUAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(returnsEleven);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused, true));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval_switchover)\n+{\n+    // Test OP_EVAL switchover code\n+    CScript notValid;\n+    notValid << OP_11 << OP_12 << OP_EQUALVERIFY;\n+\n+    // This will be valid under old rules, invalid under new:\n+    CScript fund;\n+    fund << OP_EVAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(notValid);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, false));\n+\n+    // Under strict op_eval switchover, it should be considered invalid:\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "22885a64387b5fc8e60f6dabff1de8acadd34709",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 21,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -2,13 +2,13 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n \n-#include \"../main.h\"\n-#include \"../wallet.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n \n using namespace std;\n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps,\n+                         int nHashType, bool fStrictOpEval);\n \n BOOST_AUTO_TEST_SUITE(script_tests)\n \n@@ -21,19 +21,21 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata2[] = { OP_PUSHDATA2, 1, 0, 0x5a };\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n+    int nUnused = 0;\n+\n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, 0, true, nUnused));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, 0, true, nUnused));\n     BOOST_CHECK(pushdata1Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, 0, true, nUnused));\n     BOOST_CHECK(pushdata2Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, 0, true, nUnused));\n     BOOST_CHECK(pushdata4Stack == directStack);\n }\n \n@@ -71,6 +73,7 @@ sign_multisig(CScript scriptPubKey, CKey key, CTransaction transaction)\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n {\n+    int nUnused = 0;\n     CKey key1, key2, key3;\n     key1.MakeNewKey();\n     key2.MakeNewKey();\n@@ -91,19 +94,20 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     txTo12.vout[0].nValue = 1;\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, nUnused, 0, true));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, 0));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, nUnused, 0, true));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, nUnused, 0, true));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, nUnused, 0, true));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n {\n+    int nUnused = 0;\n     CKey key1, key2, key3, key4;\n     key1.MakeNewKey();\n     key2.MakeNewKey();\n@@ -127,46 +131,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, 0));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, nUnused, 0, true));\n }    \n \n "
      },
      {
        "sha": "4b52b74cfe6ea94a6bbf2c61c31af810e42a0d95",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -1,19 +1,18 @@\n #define BOOST_TEST_MODULE Bitcoin Test Suite\n #include <boost/test/unit_test.hpp>\n \n-#include \"../main.h\"\n-#include \"../wallet.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n \n-#include \"uint160_tests.cpp\"\n-#include \"uint256_tests.cpp\"\n-#include \"script_tests.cpp\"\n-#include \"transaction_tests.cpp\"\n-#include \"DoS_tests.cpp\"\n-#include \"base64_tests.cpp\"\n-#include \"util_tests.cpp\"\n-#include \"base58_tests.cpp\"\n-#include \"miner_tests.cpp\"\n-#include \"Checkpoints_tests.cpp\"\n+extern bool fPrintToConsole;\n+struct TestingSetup {\n+    TestingSetup() {\n+        fPrintToConsole = true; // don't want to write to debug.log file\n+    }\n+    ~TestingSetup() { }\n+};\n+\n+BOOST_GLOBAL_FIXTURE(TestingSetup);\n \n CWallet* pwalletMain;\n "
      },
      {
        "sha": "3268343bbe12cbbcf34795e46da56392b82cdc62",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -1,7 +1,7 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../main.h\"\n-#include \"../wallet.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n \n using namespace std;\n "
      },
      {
        "sha": "35cb35b25ad07fc34a90692ac971cd2e4ced5a09",
        "filename": "src/test/uint160_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/uint160_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/uint160_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint160_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -1,6 +1,6 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../uint256.h\"\n+#include \"uint256.h\"\n \n BOOST_AUTO_TEST_SUITE(uint160_tests)\n "
      },
      {
        "sha": "efdc8a6aeb77ffff72ca2e2fb312240c5559e27c",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -1,6 +1,6 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"../uint256.h\"\n+#include \"uint256.h\"\n \n BOOST_AUTO_TEST_SUITE(uint256_tests)\n "
      },
      {
        "sha": "9571c4738269f9ea86a126ba916dc948a0ab6c70",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -2,7 +2,9 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n \n-#include \"../util.h\"\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"util.h\"\n \n using namespace std;\n "
      },
      {
        "sha": "37ea1328fa087b22bf433bdc1a42b7eef4becf84",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 7,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -42,6 +42,15 @@ bool CWallet::AddCryptedKey(const vector<unsigned char> &vchPubKey, const vector\n     return false;\n }\n \n+bool CWallet::AddCScript(const uint160 &hash, const CScript& redeemScript)\n+{\n+    if (!CCryptoKeyStore::AddCScript(hash, redeemScript))\n+        return false;\n+    if (!fFileBacked)\n+        return true;\n+    return CWalletDB(strWalletFile).WriteCScript(hash, redeemScript);\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n {\n     if (!IsLocked())\n@@ -365,6 +374,24 @@ int64 CWallet::GetDebit(const CTxIn &txin) const\n     return 0;\n }\n \n+bool CWallet::IsChange(const CTxOut& txout) const\n+{\n+    CBitcoinAddress address;\n+\n+    // TODO: fix handling of 'change' outputs. The assumption is that any\n+    // payment to a TX_PUBKEYHASH that is mine but isn't in the address book\n+    // is change. That assumption is likely to break when we implement multisignature\n+    // wallets that return change back into a multi-signature-protected address;\n+    // a better way of identifying which outputs are 'the send' and which are\n+    // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n+    // which output, if any, was change).\n+    if (ExtractAddress(txout.scriptPubKey, this, address))\n+        CRITICAL_BLOCK(cs_wallet)\n+            if (!mapAddressBook.count(address))\n+                return true;\n+    return false;\n+}\n+\n int64 CWalletTx::GetTxTime() const\n {\n     return nTimeReceived;\n@@ -434,8 +461,7 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n         nFee = nDebit - nValueOut;\n     }\n \n-    // Sent/received.  Standard client will never generate a send-to-multiple-recipients,\n-    // but non-standard clients might (so return a list of address/amount pairs)\n+    // Sent/received.\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         CBitcoinAddress address;\n@@ -980,12 +1006,11 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                     vector<unsigned char> vchPubKey = reservekey.GetReservedKey();\n                     // assert(mapKeys.count(vchPubKey));\n \n-                    // Fill a vout to ourself, using same address type as the payment\n+                    // Fill a vout to ourself\n+                    // TODO: pass in scriptChange instead of reservekey so\n+                    // change transaction isn't always pay-to-bitcoin-address\n                     CScript scriptChange;\n-                    if (vecSend[0].first.GetBitcoinAddress().IsValid())\n-                        scriptChange.SetBitcoinAddress(vchPubKey);\n-                    else\n-                        scriptChange << vchPubKey << OP_CHECKSIG;\n+                    scriptChange.SetBitcoinAddress(vchPubKey);\n \n                     // Insert change txn at random position:\n                     vector<CTxOut>::iterator position = wtxNew.vout.begin()+GetRandInt(wtxNew.vout.size());"
      },
      {
        "sha": "23cbf292ea119bcdfcffb964210b225aeab39503",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"bignum.h\"\n #include \"key.h\"\n+#include \"keystore.h\"\n #include \"script.h\"\n \n class CWalletTx;\n@@ -69,6 +70,8 @@ class CWallet : public CCryptoKeyStore\n     bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     // Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }\n+    bool AddCScript(const uint160& hash, const CScript& redeemScript);\n+    bool LoadCScript(const uint160& hash, const CScript& redeemScript) { return CCryptoKeyStore::AddCScript(hash, redeemScript); }\n \n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n@@ -110,15 +113,7 @@ class CWallet : public CCryptoKeyStore\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n         return (IsMine(txout) ? txout.nValue : 0);\n     }\n-    bool IsChange(const CTxOut& txout) const\n-    {\n-        CBitcoinAddress address;\n-        if (ExtractAddress(txout.scriptPubKey, this, address))\n-            CRITICAL_BLOCK(cs_wallet)\n-                if (!mapAddressBook.count(address))\n-                    return true;\n-        return false;\n-    }\n+    bool IsChange(const CTxOut& txout) const;\n     int64 GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))"
      }
    ]
  },
  {
    "sha": "67466217554043e17b5204ad5f710c6349f00d69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzQ2NjIxNzU1NDA0M2UxN2I1MjA0YWQ1ZjcxMGM2MzQ5ZjAwZDY5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:24:47Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:25:01Z"
      },
      "message": "Merge 'QR Code generation via libqrencode' into next",
      "tree": {
        "sha": "41ed0008c41a921d4e405fbd3649b5f8839fd7b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41ed0008c41a921d4e405fbd3649b5f8839fd7b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67466217554043e17b5204ad5f710c6349f00d69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67466217554043e17b5204ad5f710c6349f00d69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67466217554043e17b5204ad5f710c6349f00d69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67466217554043e17b5204ad5f710c6349f00d69/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd24b285ba2caa789cc88a9cc6f037b2ceb1e8e3"
      },
      {
        "sha": "6e15fce386b97d93590673053d5b718729810c19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e15fce386b97d93590673053d5b718729810c19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e15fce386b97d93590673053d5b718729810c19"
      }
    ],
    "stats": {
      "total": 372,
      "additions": 372,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1cadbe152d642305f80421716fc3954e052f0839",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67466217554043e17b5204ad5f710c6349f00d69/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67466217554043e17b5204ad5f710c6349f00d69/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=67466217554043e17b5204ad5f710c6349f00d69",
        "patch": "@@ -19,6 +19,14 @@ OBJECTS_DIR = build\n MOC_DIR = build\n UI_DIR = build\n \n+# use: qmake \"USE_QRCODE=1\"\n+# libqrencode (http://fukuchi.org/works/qrencode/index.en.html) must be installed for support\n+contains(USE_QRCODE, 1) {\n+    message(Building with QRCode support)\n+    DEFINES += USE_QRCODE\n+    LIBS += -lqrencode\n+}\n+\n # use: qmake \"RELEASE=1\"\n contains(RELEASE, 1) {\n     # Mac: compile for maximum compatibility (10.5, 32-bit)\n@@ -197,6 +205,12 @@ FORMS += \\\n     src/qt/forms/sendcoinsentry.ui \\\n     src/qt/forms/askpassphrasedialog.ui\n \n+contains(USE_QRCODE, 1) {\n+HEADERS += src/qt/qrcodedialog.h\n+SOURCES += src/qt/qrcodedialog.cpp\n+FORMS += src/qt/forms/qrcodedialog.ui\n+}\n+\n CODECFORTR = UTF-8\n \n # for lrelease/lupdate"
      },
      {
        "sha": "d207fe30faa34b323b05846199bf9d9f26462533",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67466217554043e17b5204ad5f710c6349f00d69/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67466217554043e17b5204ad5f710c6349f00d69/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=67466217554043e17b5204ad5f710c6349f00d69",
        "patch": "@@ -10,6 +10,10 @@\n #include <QFileDialog>\n #include <QMessageBox>\n \n+#ifdef USE_QRCODE\n+#include \"qrcodedialog.h\"\n+#endif\n+\n AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::AddressBookPage),\n@@ -25,6 +29,10 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     ui->deleteButton->setIcon(QIcon());\n #endif\n \n+#ifndef USE_QRCODE\n+    ui->showQRCode->setVisible(false);\n+#endif\n+\n     switch(mode)\n     {\n     case ForSending:\n@@ -169,10 +177,12 @@ void AddressBookPage::selectionChanged()\n             break;\n         }\n         ui->copyToClipboard->setEnabled(true);\n+        ui->showQRCode->setEnabled(true);\n     }\n     else\n     {\n         ui->deleteButton->setEnabled(false);\n+        ui->showQRCode->setEnabled(false);\n         ui->copyToClipboard->setEnabled(false);\n     }\n }\n@@ -227,3 +237,23 @@ void AddressBookPage::exportClicked()\n                               QMessageBox::Abort, QMessageBox::Abort);\n     }\n }\n+\n+void AddressBookPage::on_showQRCode_clicked()\n+{\n+#ifdef USE_QRCODE\n+    QTableView *table = ui->tableView;\n+    QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n+\n+\n+    QRCodeDialog *d;\n+    foreach (QModelIndex index, indexes)\n+    {\n+        QString address = index.data().toString(),\n+            label = index.sibling(index.row(), 0).data().toString(),\n+            title = QString(\"%1 << %2 >>\").arg(label).arg(address);\n+\n+        QRCodeDialog *d = new QRCodeDialog(title, address, label, tab == ReceivingTab, this);\n+        d->show();\n+    }\n+#endif\n+}"
      },
      {
        "sha": "2538f319dda3205e2d93570f9085e833bc46e4cf",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67466217554043e17b5204ad5f710c6349f00d69/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67466217554043e17b5204ad5f710c6349f00d69/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=67466217554043e17b5204ad5f710c6349f00d69",
        "patch": "@@ -54,6 +54,7 @@ private slots:\n     void on_newAddressButton_clicked();\n     void on_copyToClipboard_clicked();\n     void selectionChanged();\n+    void on_showQRCode_clicked();\n };\n \n #endif // ADDRESSBOOKDIALOG_H"
      },
      {
        "sha": "5693ae187ea3edb842e581a3216465d9590de54e",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67466217554043e17b5204ad5f710c6349f00d69/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67466217554043e17b5204ad5f710c6349f00d69/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=67466217554043e17b5204ad5f710c6349f00d69",
        "patch": "@@ -41,6 +41,7 @@\n     <qresource prefix=\"/images\">\n         <file alias=\"about\">res/images/about.png</file>\n         <file alias=\"splash\">res/images/splash2.jpg</file>\n+        <file alias=\"qrcode\">res/images/qrcode.png</file>\n     </qresource>\n     <qresource prefix=\"/movies\">\n         <file alias=\"update_spinner\">res/movies/update_spinner.mng</file>"
      },
      {
        "sha": "9b301cbbfa273b29e82f77a7a510824053257475",
        "filename": "src/qt/forms/addressbookpage.ui",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67466217554043e17b5204ad5f710c6349f00d69/src/qt/forms/addressbookpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67466217554043e17b5204ad5f710c6349f00d69/src/qt/forms/addressbookpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/addressbookpage.ui?ref=67466217554043e17b5204ad5f710c6349f00d69",
        "patch": "@@ -79,6 +79,17 @@\n        </property>\n       </widget>\n      </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"showQRCode\">\n+       <property name=\"text\">\n+        <string>Show &amp;QR Code</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/images/qrcode</normaloff>:/images/qrcode</iconset>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QPushButton\" name=\"deleteButton\">\n        <property name=\"toolTip\">"
      },
      {
        "sha": "2bf1952edc3b90acf874d4deb6dce40841cb5fee",
        "filename": "src/qt/forms/qrcodedialog.ui",
        "status": "added",
        "additions": 172,
        "deletions": 0,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67466217554043e17b5204ad5f710c6349f00d69/src/qt/forms/qrcodedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67466217554043e17b5204ad5f710c6349f00d69/src/qt/forms/qrcodedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/qrcodedialog.ui?ref=67466217554043e17b5204ad5f710c6349f00d69",
        "patch": "@@ -0,0 +1,172 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>QRCodeDialog</class>\n+ <widget class=\"QDialog\" name=\"QRCodeDialog\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>334</width>\n+    <height>372</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Dialog</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblQRCode\">\n+     <property name=\"sizePolicy\">\n+      <sizepolicy hsizetype=\"Expanding\" vsizetype=\"Expanding\">\n+       <horstretch>0</horstretch>\n+       <verstretch>0</verstretch>\n+      </sizepolicy>\n+     </property>\n+     <property name=\"minimumSize\">\n+      <size>\n+       <width>300</width>\n+       <height>300</height>\n+      </size>\n+     </property>\n+     <property name=\"text\">\n+      <string>QR Code</string>\n+     </property>\n+     <property name=\"alignment\">\n+      <set>Qt::AlignCenter</set>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QWidget\" name=\"widget\" native=\"true\">\n+     <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+      <item>\n+       <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+        <item>\n+         <widget class=\"QCheckBox\" name=\"chkReq\">\n+          <property name=\"enabled\">\n+           <bool>true</bool>\n+          </property>\n+          <property name=\"text\">\n+           <string>Request Payment</string>\n+          </property>\n+         </widget>\n+        </item>\n+        <item>\n+         <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+          <item>\n+           <widget class=\"QLabel\" name=\"lblAm1\">\n+            <property name=\"sizePolicy\">\n+             <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Maximum\">\n+              <horstretch>0</horstretch>\n+              <verstretch>0</verstretch>\n+             </sizepolicy>\n+            </property>\n+            <property name=\"text\">\n+             <string>Amount:</string>\n+            </property>\n+            <property name=\"alignment\">\n+             <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+            </property>\n+            <property name=\"buddy\">\n+             <cstring>lnReqAmount</cstring>\n+            </property>\n+           </widget>\n+          </item>\n+          <item>\n+           <widget class=\"QLineEdit\" name=\"lnReqAmount\">\n+            <property name=\"enabled\">\n+             <bool>false</bool>\n+            </property>\n+            <property name=\"alignment\">\n+             <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+            </property>\n+           </widget>\n+          </item>\n+          <item>\n+           <widget class=\"QLabel\" name=\"lblAm2\">\n+            <property name=\"sizePolicy\">\n+             <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Maximum\">\n+              <horstretch>0</horstretch>\n+              <verstretch>0</verstretch>\n+             </sizepolicy>\n+            </property>\n+            <property name=\"text\">\n+             <string>BTC</string>\n+            </property>\n+            <property name=\"buddy\">\n+             <cstring>lnReqAmount</cstring>\n+            </property>\n+           </widget>\n+          </item>\n+         </layout>\n+        </item>\n+       </layout>\n+      </item>\n+      <item>\n+       <layout class=\"QGridLayout\" name=\"gridLayout\">\n+        <item row=\"0\" column=\"0\">\n+         <widget class=\"QLabel\" name=\"label_3\">\n+          <property name=\"text\">\n+           <string>Label:</string>\n+          </property>\n+          <property name=\"alignment\">\n+           <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+          </property>\n+          <property name=\"buddy\">\n+           <cstring>lnLabel</cstring>\n+          </property>\n+         </widget>\n+        </item>\n+        <item row=\"0\" column=\"1\">\n+         <widget class=\"QLineEdit\" name=\"lnLabel\"/>\n+        </item>\n+        <item row=\"1\" column=\"0\">\n+         <widget class=\"QLabel\" name=\"label_4\">\n+          <property name=\"text\">\n+           <string>Message:</string>\n+          </property>\n+          <property name=\"alignment\">\n+           <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+          </property>\n+          <property name=\"buddy\">\n+           <cstring>lnMessage</cstring>\n+          </property>\n+         </widget>\n+        </item>\n+        <item row=\"1\" column=\"1\">\n+         <widget class=\"QLineEdit\" name=\"lnMessage\"/>\n+        </item>\n+       </layout>\n+      </item>\n+      <item>\n+       <widget class=\"QPushButton\" name=\"btnSaveAs\">\n+        <property name=\"text\">\n+         <string>&amp;Save As...</string>\n+        </property>\n+       </widget>\n+      </item>\n+     </layout>\n+    </widget>\n+   </item>\n+  </layout>\n+ </widget>\n+ <resources/>\n+ <connections>\n+  <connection>\n+   <sender>chkReq</sender>\n+   <signal>clicked(bool)</signal>\n+   <receiver>lnReqAmount</receiver>\n+   <slot>setEnabled(bool)</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>92</x>\n+     <y>285</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>98</x>\n+     <y>311</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+ </connections>\n+</ui>"
      },
      {
        "sha": "ed4c758e3822b12ceaf1ab9426b0b909a6dfe0f9",
        "filename": "src/qt/qrcodedialog.cpp",
        "status": "added",
        "additions": 106,
        "deletions": 0,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67466217554043e17b5204ad5f710c6349f00d69/src/qt/qrcodedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67466217554043e17b5204ad5f710c6349f00d69/src/qt/qrcodedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qrcodedialog.cpp?ref=67466217554043e17b5204ad5f710c6349f00d69",
        "patch": "@@ -0,0 +1,106 @@\n+#include \"qrcodedialog.h\"\n+#include \"ui_qrcodedialog.h\"\n+#include <QPixmap>\n+#include <QUrl>\n+#include <QFileDialog>\n+#include <QDesktopServices>\n+#include <QDebug>\n+\n+#include <qrencode.h>\n+\n+#define EXPORT_IMAGE_SIZE   256\n+\n+QRCodeDialog::QRCodeDialog(const QString &title, const QString &addr, const QString &label, bool enableReq, QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::QRCodeDialog),\n+    address(addr)\n+{\n+    ui->setupUi(this);\n+    setWindowTitle(title);\n+    setAttribute(Qt::WA_DeleteOnClose);\n+\n+    ui->chkReq->setVisible(enableReq);\n+    ui->lnReqAmount->setVisible(enableReq);\n+    ui->lblAm1->setVisible(enableReq);\n+    ui->lblAm2->setVisible(enableReq);\n+\n+    ui->lnLabel->setText(label);\n+\n+    genCode();\n+}\n+\n+QRCodeDialog::~QRCodeDialog()\n+{\n+    delete ui;\n+}\n+\n+void QRCodeDialog::genCode() {\n+\n+    QString uri = getURI();\n+    //qDebug() << \"Encoding:\" << uri.toUtf8().constData();\n+    QRcode *code = QRcode_encodeString(uri.toUtf8().constData(), 0, QR_ECLEVEL_L, QR_MODE_8, 1);\n+    myImage = QImage(code->width + 8, code->width + 8, QImage::Format_RGB32);\n+    myImage.fill(0xffffff);\n+    unsigned char *p = code->data;\n+    for(int y = 0; y < code->width; y++) {\n+        for(int x = 0; x < code->width; x++) {\n+            myImage.setPixel(x + 4, y + 4, ((*p & 1) ? 0x0 : 0xffffff));\n+            p++;\n+        }\n+    }\n+    QRcode_free(code);\n+    ui->lblQRCode->setPixmap(QPixmap::fromImage(myImage).scaled(300, 300));\n+}\n+\n+QString QRCodeDialog::getURI() {\n+    QString ret = QString(\"bitcoin:%1\").arg(address);\n+\n+    int paramCount = 0;\n+    if(ui->chkReq->isChecked() && ui->lnReqAmount->text().isEmpty() == false) {\n+        bool ok= false;\n+        double amount = ui->lnReqAmount->text().toDouble(&ok);\n+        if(ok) {\n+            ret += QString(\"?amount=%1X8\").arg(ui->lnReqAmount->text());\n+            paramCount++;\n+        }\n+    }\n+\n+    if(ui->lnLabel->text().isEmpty() == false) {\n+        QString lbl(QUrl::toPercentEncoding(ui->lnLabel->text()));\n+        ret += QString(\"%1label=%2\").arg(paramCount == 0 ? \"?\" : \"&\").arg(lbl);\n+        paramCount++;\n+    }\n+\n+    if(ui->lnMessage->text().isEmpty() == false) {\n+        QString msg(QUrl::toPercentEncoding(ui->lnMessage->text()));\n+        ret += QString(\"%1message=%2\").arg(paramCount == 0 ? \"?\" : \"&\").arg(msg);\n+        paramCount++;\n+    }\n+\n+    return ret;\n+}\n+\n+void QRCodeDialog::on_lnReqAmount_textChanged(const QString &) {\n+    genCode();\n+}\n+\n+void QRCodeDialog::on_lnLabel_textChanged(const QString &) {\n+    genCode();\n+}\n+\n+void QRCodeDialog::on_lnMessage_textChanged(const QString &) {\n+    genCode();\n+}\n+\n+void QRCodeDialog::on_btnSaveAs_clicked()\n+{\n+    QString fn = QFileDialog::getSaveFileName(this, \"Save Image...\", QDesktopServices::storageLocation(QDesktopServices::DocumentsLocation), \"Images (*.png)\");\n+    if(!fn.isEmpty()) {\n+        myImage.scaled(EXPORT_IMAGE_SIZE, EXPORT_IMAGE_SIZE).save(fn);\n+    }\n+}\n+\n+void QRCodeDialog::on_chkReq_toggled(bool)\n+{\n+    genCode();\n+}"
      },
      {
        "sha": "7463a8810ef598e1826f179d4dff730043c77b08",
        "filename": "src/qt/qrcodedialog.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67466217554043e17b5204ad5f710c6349f00d69/src/qt/qrcodedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67466217554043e17b5204ad5f710c6349f00d69/src/qt/qrcodedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qrcodedialog.h?ref=67466217554043e17b5204ad5f710c6349f00d69",
        "patch": "@@ -0,0 +1,37 @@\n+#ifndef QRCODEDIALOG_H\n+#define QRCODEDIALOG_H\n+\n+#include <QDialog>\n+#include <QImage>\n+\n+namespace Ui {\n+    class QRCodeDialog;\n+}\n+\n+class QRCodeDialog : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit QRCodeDialog(const QString &title, const QString &address, const QString &label, bool allowReq, QWidget *parent = 0);\n+    ~QRCodeDialog();\n+\n+private slots:\n+    void on_lnReqAmount_textChanged(const QString &arg1);\n+    void on_lnLabel_textChanged(const QString &arg1);\n+    void on_lnMessage_textChanged(const QString &arg1);\n+    void on_btnSaveAs_clicked();\n+\n+    void on_chkReq_toggled(bool checked);\n+\n+private:\n+    Ui::QRCodeDialog *ui;\n+    QImage myImage;\n+\n+    QString getURI();\n+    QString address;\n+\n+    void genCode();\n+};\n+\n+#endif // QRCODEDIALOG_H"
      },
      {
        "sha": "c89a49bbceba56e1901487b970645dd9eea95608",
        "filename": "src/qt/res/images/qrcode.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67466217554043e17b5204ad5f710c6349f00d69/src/qt/res/images/qrcode.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67466217554043e17b5204ad5f710c6349f00d69/src/qt/res/images/qrcode.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/images/qrcode.png?ref=67466217554043e17b5204ad5f710c6349f00d69"
      }
    ]
  },
  {
    "sha": "84417ec3a0cf53250f478704d4d632d7d44b5265",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDQxN2VjM2EwY2Y1MzI1MGY0Nzg3MDRkNGQ2MzJkN2Q0NGI1MjY1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:27:50Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-12-14T06:27:50Z"
      },
      "message": "Merge branch 'signmessage_gui' into next\n\nConflicts:\n\tsrc/qt/forms/addressbookpage.ui",
      "tree": {
        "sha": "5b85074122925d33a46e15c8913e938e3069f40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b85074122925d33a46e15c8913e938e3069f40c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84417ec3a0cf53250f478704d4d632d7d44b5265",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84417ec3a0cf53250f478704d4d632d7d44b5265",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84417ec3a0cf53250f478704d4d632d7d44b5265",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84417ec3a0cf53250f478704d4d632d7d44b5265/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67466217554043e17b5204ad5f710c6349f00d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67466217554043e17b5204ad5f710c6349f00d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67466217554043e17b5204ad5f710c6349f00d69"
      },
      {
        "sha": "3765dbfb38e23a814c3df1985cf198db27bc5848",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3765dbfb38e23a814c3df1985cf198db27bc5848",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3765dbfb38e23a814c3df1985cf198db27bc5848"
      }
    ],
    "stats": {
      "total": 398,
      "additions": 396,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b510ac164d8182c431d11dccd9c5df1ba768cb1e",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -91,6 +91,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/qt/optionsdialog.h \\\n     src/qt/sendcoinsdialog.h \\\n     src/qt/addressbookpage.h \\\n+    src/qt/messagepage.h \\\n     src/qt/aboutdialog.h \\\n     src/qt/editaddressdialog.h \\\n     src/qt/bitcoinaddressvalidator.h \\\n@@ -152,6 +153,7 @@ SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \\\n     src/qt/optionsdialog.cpp \\\n     src/qt/sendcoinsdialog.cpp \\\n     src/qt/addressbookpage.cpp \\\n+    src/qt/messagepage.cpp \\\n     src/qt/aboutdialog.cpp \\\n     src/qt/editaddressdialog.cpp \\\n     src/qt/bitcoinaddressvalidator.cpp \\\n@@ -198,6 +200,7 @@ RESOURCES += \\\n FORMS += \\\n     src/qt/forms/sendcoinsdialog.ui \\\n     src/qt/forms/addressbookpage.ui \\\n+    src/qt/forms/messagepage.ui \\\n     src/qt/forms/aboutdialog.ui \\\n     src/qt/forms/editaddressdialog.ui \\\n     src/qt/forms/transactiondescdialog.ui \\"
      },
      {
        "sha": "3484ae44064c8c72c9ac4a4415b28e11ea2cdd63",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -531,8 +531,6 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-static const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n-\n Value signmessage(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)"
      },
      {
        "sha": "e3b04838a60d3d505bc66fadae05da0c4c433471",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -54,6 +54,9 @@ map<uint256, CDataStream*> mapOrphanTransactions;\n multimap<uint256, CDataStream*> mapOrphanTransactionsByPrev;\n \n \n+const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+\n+\n double dHashesPerSec;\n int64 nHPSTimerStart;\n "
      },
      {
        "sha": "06c3eeede318ca45180aad5bcde843bbe0894885",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -60,6 +60,7 @@ extern CBigNum bnBestInvalidWork;\n extern uint256 hashBestChain;\n extern CBlockIndex* pindexBest;\n extern unsigned int nTransactionsUpdated;\n+extern const std::string strMessageMagic;\n extern double dHashesPerSec;\n extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;"
      },
      {
        "sha": "4014170cfca6d695b5d40a533f27a506ab85fe0f",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -2,6 +2,7 @@\n #include \"ui_addressbookpage.h\"\n \n #include \"addresstablemodel.h\"\n+#include \"bitcoingui.h\"\n #include \"editaddressdialog.h\"\n #include \"csvmodelwriter.h\"\n \n@@ -122,6 +123,24 @@ void AddressBookPage::on_copyToClipboard_clicked()\n     }\n }\n \n+void AddressBookPage::on_signMessage_clicked()\n+{\n+    QTableView *table = ui->tableView;\n+    QModelIndexList indexes = table->selectionModel()->selectedRows(AddressTableModel::Address);\n+    QString addr;\n+\n+    foreach (QModelIndex index, indexes)\n+    {\n+        QVariant address = index.data();\n+        addr = address.toString();\n+    }\n+\n+    QObject *qoGUI = parent()->parent();\n+    BitcoinGUI *gui = qobject_cast<BitcoinGUI *>(qoGUI);\n+    if (gui)\n+        gui->gotoMessagePage(addr);\n+}\n+\n void AddressBookPage::on_newAddressButton_clicked()\n {\n     if(!model)\n@@ -171,9 +190,11 @@ void AddressBookPage::selectionChanged()\n         {\n         case SendingTab:\n             ui->deleteButton->setEnabled(true);\n+            ui->signMessage->setEnabled(false);\n             break;\n         case ReceivingTab:\n             ui->deleteButton->setEnabled(false);\n+            ui->signMessage->setEnabled(true);\n             break;\n         }\n         ui->copyToClipboard->setEnabled(true);\n@@ -184,6 +205,7 @@ void AddressBookPage::selectionChanged()\n         ui->deleteButton->setEnabled(false);\n         ui->showQRCode->setEnabled(false);\n         ui->copyToClipboard->setEnabled(false);\n+        ui->signMessage->setEnabled(false);\n     }\n }\n "
      },
      {
        "sha": "0166ebcf5b42c78dc9b09f3cc8e556501ba33520",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -53,6 +53,7 @@ private slots:\n     void on_deleteButton_clicked();\n     void on_newAddressButton_clicked();\n     void on_copyToClipboard_clicked();\n+    void on_signMessage_clicked();\n     void selectionChanged();\n     void on_showQRCode_clicked();\n };"
      },
      {
        "sha": "fdcec77826804ddf115e839d3c9c9f48e7b42639",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -8,6 +8,7 @@\n #include \"transactiontablemodel.h\"\n #include \"addressbookpage.h\"\n #include \"sendcoinsdialog.h\"\n+#include \"messagepage.h\"\n #include \"optionsdialog.h\"\n #include \"aboutdialog.h\"\n #include \"clientmodel.h\"\n@@ -98,12 +99,15 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n \n     sendCoinsPage = new SendCoinsDialog(this);\n \n+    messagePage = new MessagePage(this);\n+\n     centralWidget = new QStackedWidget(this);\n     centralWidget->addWidget(overviewPage);\n     centralWidget->addWidget(transactionsPage);\n     centralWidget->addWidget(addressBookPage);\n     centralWidget->addWidget(receiveCoinsPage);\n     centralWidget->addWidget(sendCoinsPage);\n+    centralWidget->addWidget(messagePage);\n     setCentralWidget(centralWidget);\n \n     // Create status bar\n@@ -192,6 +196,11 @@ void BitcoinGUI::createActions()\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n \n+    messageAction = new QAction(QIcon(\":/icons/edit\"), tr(\"Sign &message\"), this);\n+    messageAction->setToolTip(tr(\"Prove you control an address\"));\n+    messageAction->setCheckable(true);\n+    tabGroup->addAction(messageAction);\n+\n     connect(overviewAction, SIGNAL(triggered()), this, SLOT(show()));\n     connect(overviewAction, SIGNAL(triggered()), this, SLOT(gotoOverviewPage()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(show()));\n@@ -202,6 +211,8 @@ void BitcoinGUI::createActions()\n     connect(receiveCoinsAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n     connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(show()));\n     connect(sendCoinsAction, SIGNAL(triggered()), this, SLOT(gotoSendCoinsPage()));\n+    connect(messageAction, SIGNAL(triggered()), this, SLOT(show()));\n+    connect(messageAction, SIGNAL(triggered()), this, SLOT(gotoMessagePage()));\n \n     quitAction = new QAction(QIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n     quitAction->setToolTip(tr(\"Quit application\"));\n@@ -264,6 +275,9 @@ void BitcoinGUI::createToolBars()\n     toolbar->addAction(receiveCoinsAction);\n     toolbar->addAction(historyAction);\n     toolbar->addAction(addressBookAction);\n+#ifdef FIRST_CLASS_MESSAGING\n+    toolbar->addAction(messageAction);\n+#endif\n \n     QToolBar *toolbar2 = addToolBar(tr(\"Actions toolbar\"));\n     toolbar2->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);\n@@ -318,6 +332,7 @@ void BitcoinGUI::setWalletModel(WalletModel *walletModel)\n         addressBookPage->setModel(walletModel->getAddressTableModel());\n         receiveCoinsPage->setModel(walletModel->getAddressTableModel());\n         sendCoinsPage->setModel(walletModel);\n+        messagePage->setModel(walletModel);\n \n         setEncryptionStatus(walletModel->getEncryptionStatus());\n         connect(walletModel, SIGNAL(encryptionStatusChanged(int)), this, SLOT(setEncryptionStatus(int)));\n@@ -353,6 +368,7 @@ void BitcoinGUI::createTrayIcon()\n     // Configuration of the tray icon (or dock icon) icon menu\n     trayIconMenu->addAction(openBitcoinAction);\n     trayIconMenu->addSeparator();\n+    trayIconMenu->addAction(messageAction);\n     trayIconMenu->addAction(receiveCoinsAction);\n     trayIconMenu->addAction(sendCoinsAction);\n     trayIconMenu->addSeparator();\n@@ -644,6 +660,21 @@ void BitcoinGUI::gotoSendCoinsPage()\n     disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n }\n \n+void BitcoinGUI::gotoMessagePage()\n+{\n+    messageAction->setChecked(true);\n+    centralWidget->setCurrentWidget(messagePage);\n+\n+    exportAction->setEnabled(false);\n+    disconnect(exportAction, SIGNAL(triggered()), 0, 0);\n+}\n+\n+void BitcoinGUI::gotoMessagePage(QString addr)\n+{\n+    gotoMessagePage();\n+    messagePage->setAddress(addr);\n+}\n+\n void BitcoinGUI::dragEnterEvent(QDragEnterEvent *event)\n {\n     // Accept only URLs"
      },
      {
        "sha": "164d2b91ec40cf30f26d93fe724aefa77849ec64",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -11,6 +11,7 @@ class TransactionView;\n class OverviewPage;\n class AddressBookPage;\n class SendCoinsDialog;\n+class MessagePage;\n class Notificator;\n \n QT_BEGIN_NAMESPACE\n@@ -62,6 +63,7 @@ class BitcoinGUI : public QMainWindow\n     AddressBookPage *addressBookPage;\n     AddressBookPage *receiveCoinsPage;\n     SendCoinsDialog *sendCoinsPage;\n+    MessagePage *messagePage;\n \n     QLabel *labelEncryptionIcon;\n     QLabel *labelConnectionsIcon;\n@@ -75,6 +77,7 @@ class BitcoinGUI : public QMainWindow\n     QAction *quitAction;\n     QAction *sendCoinsAction;\n     QAction *addressBookAction;\n+    QAction *messageAction;\n     QAction *aboutAction;\n     QAction *receiveCoinsAction;\n     QAction *optionsAction;\n@@ -123,6 +126,9 @@ public slots:\n     */\n     void askFee(qint64 nFeeRequired, bool *payFee);\n \n+    void gotoMessagePage();\n+    void gotoMessagePage(QString);\n+\n private slots:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();"
      },
      {
        "sha": "b31a9ce997fb9c3f3aa04bef61308234a4396cda",
        "filename": "src/qt/forms/addressbookpage.ui",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/forms/addressbookpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/forms/addressbookpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/addressbookpage.ui?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -90,6 +90,20 @@\n        </property>\n       </widget>\n      </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"signMessage\">\n+       <property name=\"toolTip\">\n+        <string>Sign a message to prove you own this address</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>&amp;Sign Message</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/edit</normaloff>:/icons/edit</iconset>\n+       </property>\n+      </widget>\n+     </item>\n      <item>\n       <widget class=\"QPushButton\" name=\"deleteButton\">\n        <property name=\"toolTip\">"
      },
      {
        "sha": "8afa4b59ddf9a4abc5bc203a499c2247f91a2a06",
        "filename": "src/qt/forms/messagepage.ui",
        "status": "added",
        "additions": 170,
        "deletions": 0,
        "changes": 170,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/forms/messagepage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/forms/messagepage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/messagepage.ui?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -0,0 +1,170 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>MessagePage</class>\n+ <widget class=\"QWidget\" name=\"MessagePage\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>627</width>\n+    <height>380</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Message</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"labelExplanation\">\n+     <property name=\"text\">\n+      <string>You can sign messages with your addresses to prove you own them. Be careful to only sign statement you agree to with full details, as phishing attacks may try to trick you into signing access to them.</string>\n+     </property>\n+     <property name=\"textFormat\">\n+      <enum>Qt::AutoText</enum>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3\">\n+     <property name=\"spacing\">\n+      <number>0</number>\n+     </property>\n+     <item>\n+      <widget class=\"QValidatedLineEdit\" name=\"signFrom\">\n+       <property name=\"toolTip\">\n+        <string>The address to send the payment to  (e.g. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)</string>\n+       </property>\n+       <property name=\"maxLength\">\n+        <number>34</number>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"addressBookButton\">\n+       <property name=\"toolTip\">\n+        <string>Choose adress from address book</string>\n+       </property>\n+       <property name=\"text\">\n+        <string/>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/address-book</normaloff>:/icons/address-book</iconset>\n+       </property>\n+       <property name=\"shortcut\">\n+        <string>Alt+A</string>\n+       </property>\n+       <property name=\"autoDefault\">\n+        <bool>false</bool>\n+       </property>\n+       <property name=\"flat\">\n+        <bool>false</bool>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"pasteButton\">\n+       <property name=\"toolTip\">\n+        <string>Paste address from clipboard</string>\n+       </property>\n+       <property name=\"text\">\n+        <string/>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/editpaste</normaloff>:/icons/editpaste</iconset>\n+       </property>\n+       <property name=\"shortcut\">\n+        <string>Alt+P</string>\n+       </property>\n+       <property name=\"autoDefault\">\n+        <bool>false</bool>\n+       </property>\n+      </widget>\n+     </item>\n+    </layout>\n+   </item>\n+   <item>\n+    <widget class=\"QPlainTextEdit\" name=\"message\">\n+     <property name=\"toolTip\">\n+      <string>Enter the message you want to sign here</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLineEdit\" name=\"signature\">\n+     <property name=\"font\">\n+      <font>\n+       <italic>true</italic>\n+      </font>\n+     </property>\n+     <property name=\"text\">\n+      <string>Click &quot;Sign Message&quot; to get signature</string>\n+     </property>\n+     <property name=\"readOnly\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+     <item>\n+      <widget class=\"QPushButton\" name=\"signMessage\">\n+       <property name=\"toolTip\">\n+        <string>Sign a message to prove you own this address</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>&amp;Sign Message</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/edit</normaloff>:/icons/edit</iconset>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <widget class=\"QPushButton\" name=\"copyToClipboard\">\n+       <property name=\"toolTip\">\n+        <string>Copy the currently selected address to the system clipboard</string>\n+       </property>\n+       <property name=\"text\">\n+        <string>&amp;Copy to Clipboard</string>\n+       </property>\n+       <property name=\"icon\">\n+        <iconset resource=\"../bitcoin.qrc\">\n+         <normaloff>:/icons/editcopy</normaloff>:/icons/editcopy</iconset>\n+       </property>\n+      </widget>\n+     </item>\n+     <item>\n+      <spacer name=\"horizontalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>40</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+    </layout>\n+   </item>\n+  </layout>\n+ </widget>\n+ <customwidgets>\n+  <customwidget>\n+   <class>QValidatedLineEdit</class>\n+   <extends>QLineEdit</extends>\n+   <header>qvalidatedlineedit.h</header>\n+  </customwidget>\n+ </customwidgets>\n+ <resources>\n+  <include location=\"../bitcoin.qrc\"/>\n+ </resources>\n+ <connections/>\n+</ui>"
      },
      {
        "sha": "dee1837ed67483c05d0f9e8aa50caf114bfde25d",
        "filename": "src/qt/messagepage.cpp",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/messagepage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/messagepage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/messagepage.cpp?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -0,0 +1,107 @@\n+#include <string>\n+#include <vector>\n+\n+#include \"main.h\"\n+#include \"wallet.h\"\n+#include \"init.h\"\n+#include \"util.h\"\n+\n+#include \"messagepage.h\"\n+#include \"ui_messagepage.h\"\n+\n+#include \"addressbookpage.h\"\n+#include \"guiutil.h\"\n+#include \"walletmodel.h\"\n+\n+#include <QClipboard>\n+#include <QInputDialog>\n+#include <QList>\n+#include <QListWidgetItem>\n+#include <QMessageBox>\n+\n+MessagePage::MessagePage(QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::MessagePage)\n+{\n+    ui->setupUi(this);\n+\n+    GUIUtil::setupAddressWidget(ui->signFrom, this);\n+}\n+\n+MessagePage::~MessagePage()\n+{\n+    delete ui;\n+}\n+\n+void MessagePage::setModel(WalletModel *model)\n+{\n+    this->model = model;\n+}\n+\n+void MessagePage::setAddress(QString addr)\n+{\n+    ui->signFrom->setText(addr);\n+    ui->message->setFocus();\n+}\n+\n+void MessagePage::on_pasteButton_clicked()\n+{\n+    setAddress(QApplication::clipboard()->text());\n+}\n+\n+void MessagePage::on_addressBookButton_clicked()\n+{\n+    AddressBookPage dlg(AddressBookPage::ForSending, AddressBookPage::ReceivingTab, this);\n+    dlg.setModel(model->getAddressTableModel());\n+    if(dlg.exec())\n+    {\n+        setAddress(dlg.getReturnValue());\n+    }\n+}\n+\n+void MessagePage::on_copyToClipboard_clicked()\n+{\n+    QApplication::clipboard()->setText(ui->signature->text());\n+}\n+\n+void MessagePage::on_signMessage_clicked()\n+{\n+    QString address = ui->signFrom->text();\n+\n+    CBitcoinAddress addr(address.toStdString());\n+    if (!addr.IsValid())\n+    {\n+        QMessageBox::critical(this, tr(\"Error signing\"), tr(\"%1 is not a valid address.\").arg(address),\n+                              QMessageBox::Abort, QMessageBox::Abort);\n+        return;\n+    }\n+\n+    WalletModel::UnlockContext ctx(model->requestUnlock());\n+    if(!ctx.isValid())\n+    {\n+        // Unlock wallet was cancelled\n+        return;\n+    }\n+\n+    CKey key;\n+    if (!pwalletMain->GetKey(addr, key))\n+    {\n+        QMessageBox::critical(this, tr(\"Error signing\"), tr(\"Private key for %1 is not available.\").arg(address),\n+                              QMessageBox::Abort, QMessageBox::Abort);\n+        return;\n+    }\n+\n+    CDataStream ss(SER_GETHASH);\n+    ss << strMessageMagic;\n+    ss << ui->message->document()->toPlainText().toStdString();\n+\n+    std::vector<unsigned char> vchSig;\n+    if (!key.SignCompact(Hash(ss.begin(), ss.end()), vchSig))\n+    {\n+        QMessageBox::critical(this, tr(\"Error signing\"), tr(\"Sign failed\"),\n+                              QMessageBox::Abort, QMessageBox::Abort);\n+    }\n+\n+    ui->signature->setText(QString::fromStdString(EncodeBase64(&vchSig[0], vchSig.size())));\n+    ui->signature->setFont(GUIUtil::bitcoinAddressFont());\n+}"
      },
      {
        "sha": "55e6228124c5219e33c9e3bdfb7d6d8e4750b549",
        "filename": "src/qt/messagepage.h",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/messagepage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84417ec3a0cf53250f478704d4d632d7d44b5265/src/qt/messagepage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/messagepage.h?ref=84417ec3a0cf53250f478704d4d632d7d44b5265",
        "patch": "@@ -0,0 +1,38 @@\n+#ifndef MESSAGEPAGE_H\n+#define MESSAGEPAGE_H\n+\n+#include <QDialog>\n+\n+namespace Ui {\n+    class MessagePage;\n+}\n+class WalletModel;\n+\n+QT_BEGIN_NAMESPACE\n+QT_END_NAMESPACE\n+\n+class MessagePage : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit MessagePage(QWidget *parent = 0);\n+    ~MessagePage();\n+\n+    void setModel(WalletModel *model);\n+\n+    void setAddress(QString);\n+\n+private:\n+    Ui::MessagePage *ui;\n+    WalletModel *model;\n+\n+private slots:\n+    void on_pasteButton_clicked();\n+    void on_addressBookButton_clicked();\n+\n+    void on_signMessage_clicked();\n+    void on_copyToClipboard_clicked();\n+};\n+\n+#endif // MESSAGEPAGE_H"
      }
    ]
  }
]