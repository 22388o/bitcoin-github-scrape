[
  {
    "sha": "cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzZkZmQxZjRiNzcwOTQ0N2M2ZTJiNzNlYmY0NDk0NmQwYjkyNmM1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-08-20T20:18:17Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-08-20T21:19:13Z"
      },
      "message": "Allow signrawtransaction '...' null null 'hashtype'\n\nAllows the user to pass null as the second or third parameter\nto signrawtransaction, in case you need to (for example) fetch\nprivate keys from the wallet but want to specify the hash type.",
      "tree": {
        "sha": "1191830d95c49464b3992964528ddbd3b67f97f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1191830d95c49464b3992964528ddbd3b67f97f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b86da2abe8695640698d45b1288a2951b7b3dfcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b86da2abe8695640698d45b1288a2951b7b3dfcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b86da2abe8695640698d45b1288a2951b7b3dfcb"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 28,
      "deletions": 22
    },
    "files": [
      {
        "sha": "ef0c4a1be164fb375c750ddab07849cede5653cc",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5",
        "patch": "@@ -66,16 +66,17 @@ Object JSONRPCError(int code, const string& message)\n }\n \n void RPCTypeCheck(const Array& params,\n-                  const list<Value_type>& typesExpected)\n+                  const list<Value_type>& typesExpected,\n+                  bool fAllowNull)\n {\n     unsigned int i = 0;\n     BOOST_FOREACH(Value_type t, typesExpected)\n     {\n         if (params.size() <= i)\n             break;\n \n-       const Value& v = params[i];\n-        if (v.type() != t)\n+        const Value& v = params[i];\n+        if (!((v.type() == t) || (fAllowNull && (v.type() == null_type))))\n         {\n             string err = strprintf(\"Expected type %s, got %s\",\n                                    Value_type_name[t], Value_type_name[v.type()]);\n@@ -86,14 +87,16 @@ void RPCTypeCheck(const Array& params,\n }\n \n void RPCTypeCheck(const Object& o,\n-                  const map<string, Value_type>& typesExpected)\n+                  const map<string, Value_type>& typesExpected,\n+                  bool fAllowNull)\n {\n     BOOST_FOREACH(const PAIRTYPE(string, Value_type)& t, typesExpected)\n     {\n         const Value& v = find_value(o, t.first);\n-        if (v.type() == null_type)\n+        if (!fAllowNull && v.type() == null_type)\n             throw JSONRPCError(-3, strprintf(\"Missing %s\", t.first.c_str()));\n-        if (v.type() != t.second)\n+\n+        if (!((v.type() == t.second) || (fAllowNull && (v.type() == null_type))))\n         {\n             string err = strprintf(\"Expected type %s for %s, got %s\",\n                                    Value_type_name[t.second], t.first.c_str(), Value_type_name[v.type()]);\n@@ -3040,16 +3043,19 @@ Object CallRPC(const string& strMethod, const Array& params)\n \n \n template<typename T>\n-void ConvertTo(Value& value)\n+void ConvertTo(Value& value, bool fAllowNull=false)\n {\n+    if (fAllowNull && value.type() == null_type)\n+        return;\n     if (value.type() == str_type)\n     {\n         // reinterpret string as unquoted json value\n         Value value2;\n         string strJSON = value.get_str();\n         if (!read_string(strJSON, value2))\n             throw runtime_error(string(\"Error parsing JSON:\")+strJSON);\n-        value = value2.get_value<T>();\n+        ConvertTo<T>(value2, fAllowNull);\n+        value = value2;\n     }\n     else\n     {\n@@ -3100,8 +3106,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n     if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);\n-    if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1]);\n-    if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2]);\n+    if (strMethod == \"signrawtransaction\"     && n > 1) ConvertTo<Array>(params[1], true);\n+    if (strMethod == \"signrawtransaction\"     && n > 2) ConvertTo<Array>(params[2], true);\n \n     return params;\n }"
      },
      {
        "sha": "40e7d7e11cedcf16ac063ae7094a7005792ef477",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5",
        "patch": "@@ -28,13 +28,13 @@ json_spirit::Array RPCConvertValues(const std::string &strMethod, const std::vec\n   Use like:  RPCTypeCheck(params, boost::assign::list_of(str_type)(int_type)(obj_type));\n */\n void RPCTypeCheck(const json_spirit::Array& params,\n-                  const std::list<json_spirit::Value_type>& typesExpected);\n+                  const std::list<json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n /*\n   Check for expected keys/value types in an Object.\n   Use like: RPCTypeCheck(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n */\n void RPCTypeCheck(const json_spirit::Object& o,\n-                  const std::map<std::string, json_spirit::Value_type>& typesExpected);\n+                  const std::map<std::string, json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n \n typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "b03745714033e98dd6399dcff30e56631c9903b4",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=cc6dfd1f4b7709447c6e2b73ebf44946d0b926c5",
        "patch": "@@ -280,21 +280,18 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         throw runtime_error(\n             \"signrawtransaction <hex string> [{\\\"txid\\\":txid,\\\"vout\\\":n,\\\"scriptPubKey\\\":hex},...] [<privatekey1>,...] [sighashtype=\\\"ALL\\\"]\\n\"\n             \"Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"Second optional argument is an array of previous transaction outputs that\\n\"\n+            \"Second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n             \"this transaction depends on but may not yet be in the blockchain.\\n\"\n-            \"Third optional argument is an array of base58-encoded private\\n\"\n+            \"Third optional argument (may be null) is an array of base58-encoded private\\n\"\n             \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-            \"Fourth option is a string that is one of six values; ALL, NONE, SINGLE or\\n\"\n+            \"Fourth optional argument is a string that is one of six values; ALL, NONE, SINGLE or\\n\"\n             \"ALL|ANYONECANPAY, NONE|ANYONECANPAY, SINGLE|ANYONECANPAY.\\n\"\n             \"Returns json object with keys:\\n\"\n             \"  hex : raw transaction with signature(s) (hex-encoded string)\\n\"\n             \"  complete : 1 if transaction has a complete set of signature (0 if not)\"\n             + HelpRequiringPassphrase());\n \n-    if (params.size() < 3)\n-        EnsureWalletIsUnlocked();\n-\n-    RPCTypeCheck(params, list_of(str_type)(array_type)(array_type));\n+    RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n \n     vector<unsigned char> txData(ParseHex(params[0].get_str()));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n@@ -343,7 +340,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     }\n \n     // Add previous txouts given in the RPC call:\n-    if (params.size() > 1)\n+    if (params.size() > 1 && params[1].type() != null_type)\n     {\n         Array prevTxs = params[1].get_array();\n         BOOST_FOREACH(Value& p, prevTxs)\n@@ -390,7 +387,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     bool fGivenKeys = false;\n     CBasicKeyStore tempKeystore;\n-    if (params.size() > 2)\n+    if (params.size() > 2 && params[2].type() != null_type)\n     {\n         fGivenKeys = true;\n         Array keys = params[2].get_array();\n@@ -407,10 +404,13 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             tempKeystore.AddKey(key);\n         }\n     }\n+    else\n+        EnsureWalletIsUnlocked();\n+\n     const CKeyStore& keystore = (fGivenKeys ? tempKeystore : *pwalletMain);\n \n     int nHashType = SIGHASH_ALL;\n-    if (params.size() > 3)\n+    if (params.size() > 3 && params[3].type() != null_type)\n     {\n         static map<string, int> mapSigHashValues =\n             boost::assign::map_list_of"
      }
    ]
  }
]