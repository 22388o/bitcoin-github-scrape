[
  {
    "sha": "21b58f430fa05fdb7c5db79b545302417a5dbceb",
    "node_id": "C_kwDOABII59oAKDIxYjU4ZjQzMGZhMDVmZGI3YzVkYjc5YjU0NTMwMjQxN2E1ZGJjZWI",
    "commit": {
      "author": {
        "name": "Douglas Chimento",
        "email": "dchimento@gmail.com",
        "date": "2021-11-17T10:47:30Z"
      },
      "committer": {
        "name": "Douglas Chimento",
        "email": "dchimento@gmail.com",
        "date": "2021-11-17T10:47:30Z"
      },
      "message": "util: ParseByteUnits - Parse a string with suffix unit [k|K|m|M|g|G|t|T]\n\nA convenience utility for human readable arguments/config e.g. -maxuploadtarget=500g",
      "tree": {
        "sha": "7998abbdb8b958e8b3c35812a12e1333a98c8270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7998abbdb8b958e8b3c35812a12e1333a98c8270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21b58f430fa05fdb7c5db79b545302417a5dbceb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQHIBAABCAAyFiEEFt7wA8cqIHRePmNa0a1maOubxakFAmGU3fEUHGRjaGltZW50\nb0BnbWFpbC5jb20ACgkQ0a1maOubxamZtgv+JJwAmmaNx+CnfazKu3QcTrXndkP0\nM10koWI/n9B4rAHvEq0EiT+uOFRmeonUdT2QGhdlu+anMJCNXdtocYNs1o7vNPsF\n4x5fmSKseYD7gbvpC8CT4mTf/FF4hlQ/D9hswUCVI7ASxrC9XTJ9eRGMPtmfDxoR\n7mO1EETtGvGNCwlxHnE39HsYV8EeFOC0GfZiwMn/ocuWb+Rj4Z1q1MQzCGZcwsPQ\nYzpQ9gbWbYNOXeXE88p4Z7xsJ6MVUUX3qpKjiX9KWvHvxM91HP2naX/BnMIU4b/2\nOeykuYWeXdyr3FHTVoHG7NxKijx1zyi5srOSsADWySoIcG8yH0a7vM49KP91UckK\nRy3mQIA+Ms2QkkSVvw5NyJBtjTnrfyL3Q0WjAtUYIM6m5OIpsG0XejpprKU/j0T2\nSN0X/hC54p87a60EqRlrBjYQfAEUNC1LnDtEMpA2OfaWFAiGxam1ASnWHdef6fLj\nlI7MGYS0IKIwHnCec8MZ4VzH8jIWDkAOaU13\n=jVZ/\n-----END PGP SIGNATURE-----",
        "payload": "tree 7998abbdb8b958e8b3c35812a12e1333a98c8270\nparent 94db963de501e4aba6e5d8150a01ceb85753dee1\nauthor Douglas Chimento <dchimento@gmail.com> 1637146050 +0200\ncommitter Douglas Chimento <dchimento@gmail.com> 1637146050 +0200\n\nutil: ParseByteUnits - Parse a string with suffix unit [k|K|m|M|g|G|t|T]\n\nA convenience utility for human readable arguments/config e.g. -maxuploadtarget=500g\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21b58f430fa05fdb7c5db79b545302417a5dbceb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21b58f430fa05fdb7c5db79b545302417a5dbceb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21b58f430fa05fdb7c5db79b545302417a5dbceb/comments",
    "author": {
      "login": "dougEfresh",
      "id": 976425,
      "node_id": "MDQ6VXNlcjk3NjQyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/976425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougEfresh",
      "html_url": "https://github.com/dougEfresh",
      "followers_url": "https://api.github.com/users/dougEfresh/followers",
      "following_url": "https://api.github.com/users/dougEfresh/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougEfresh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougEfresh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougEfresh/subscriptions",
      "organizations_url": "https://api.github.com/users/dougEfresh/orgs",
      "repos_url": "https://api.github.com/users/dougEfresh/repos",
      "events_url": "https://api.github.com/users/dougEfresh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougEfresh/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dougEfresh",
      "id": 976425,
      "node_id": "MDQ6VXNlcjk3NjQyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/976425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougEfresh",
      "html_url": "https://github.com/dougEfresh",
      "followers_url": "https://api.github.com/users/dougEfresh/followers",
      "following_url": "https://api.github.com/users/dougEfresh/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougEfresh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougEfresh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougEfresh/subscriptions",
      "organizations_url": "https://api.github.com/users/dougEfresh/orgs",
      "repos_url": "https://api.github.com/users/dougEfresh/repos",
      "events_url": "https://api.github.com/users/dougEfresh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougEfresh/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94db963de501e4aba6e5d8150a01ceb85753dee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94db963de501e4aba6e5d8150a01ceb85753dee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94db963de501e4aba6e5d8150a01ceb85753dee1"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 138,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4483dee1dd6c09458d540f74d253cdc447431b0e",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21b58f430fa05fdb7c5db79b545302417a5dbceb/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21b58f430fa05fdb7c5db79b545302417a5dbceb/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=21b58f430fa05fdb7c5db79b545302417a5dbceb",
        "patch": "@@ -127,6 +127,10 @@ Updated settings\n   mean `-persistmempool=1`. Passing `-persistmempool=0`, `-persistmempool=1`\n   and `-nopersistmempool` is unaffected. (#23061)\n \n+- `-maxuploadtarget` now allows human readable byte units [k|K|m|M|g|G|t|T].\n+  E.g. `-maxuploadtarget=500g`. No whitespace, +- or fractions allowed.\n+  Default is `M` if no suffix provided. (#23249)\n+\n Tools and Utilities\n -------------------\n "
      },
      {
        "sha": "b0dbfda10970ce5920caed35423107b3f18fe7da",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=21b58f430fa05fdb7c5db79b545302417a5dbceb",
        "patch": "@@ -59,6 +59,7 @@\n #include <util/asmap.h>\n #include <util/check.h>\n #include <util/moneystr.h>\n+#include <util/strencodings.h>\n #include <util/string.h>\n #include <util/syscall_sandbox.h>\n #include <util/system.h>\n@@ -436,7 +437,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target per 24h. Limit does not apply to peers with 'download' permission or blocks created within past week. 0 = no limit (default: %s). Optional suffix units [k|K|m|M|g|G|t|T] (default: M). Lowercase is 1000 base while uppercase is 1024 base\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -1114,6 +1115,12 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n {\n     const ArgsManager& args = *Assert(node.args);\n     const CChainParams& chainparams = Params();\n+\n+    auto opt_max_upload = ParseByteUnits(args.GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET), ByteUnit::M);\n+    if (!opt_max_upload) {\n+        return InitError(strprintf(_(\"Unable to parse -maxuploadtarget: '%s' (possible integer overflow?)\"), args.GetArg(\"-maxuploadtarget\", \"\")));\n+    }\n+\n     // ********************************************************* Step 4a: application initialization\n     if (!CreatePidFile(args)) {\n         // Detailed error printed inside CreatePidFile().\n@@ -1758,8 +1765,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     connOptions.nSendBufferMaxSize = 1000 * args.GetIntArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000 * args.GetIntArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = args.GetArgs(\"-addnode\");\n-\n-    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetIntArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n+    connOptions.nMaxOutboundLimit = *opt_max_upload;\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n     for (const std::string& bind_arg : args.GetArgs(\"-bind\")) {"
      },
      {
        "sha": "182847067a703db3f6f0ccdd52a4f4142bd37f2b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=21b58f430fa05fdb7c5db79b545302417a5dbceb",
        "patch": "@@ -70,7 +70,7 @@ static const bool DEFAULT_LISTEN = true;\n /** The maximum number of peer connections to maintain. */\n static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n /** The default for -maxuploadtarget. 0 = Unlimited */\n-static constexpr uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n+static const std::string DEFAULT_MAX_UPLOAD_TARGET{\"0M\"};\n /** Default for blocks only*/\n static const bool DEFAULT_BLOCKSONLY = false;\n /** -peertimeout default */"
      },
      {
        "sha": "4f00a4d69e1caa4cc6c58be2c3e28f875c3f88b3",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=21b58f430fa05fdb7c5db79b545302417a5dbceb",
        "patch": "@@ -2456,4 +2456,52 @@ BOOST_AUTO_TEST_CASE(remove_prefix)\n     BOOST_CHECK_EQUAL(RemovePrefix(\"\", \"\"), \"\");\n }\n \n+BOOST_AUTO_TEST_CASE(util_ParseByteUnits)\n+{\n+    auto noop = ByteUnit::NOOP;\n+\n+    // no multiplier\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"1\", noop).value(), 1);\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"0\", noop).value(), 0);\n+\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"1k\", noop).value(), 1000ULL);\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"1K\", noop).value(), 1ULL << 10);\n+\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"2m\", noop).value(), 2'000'000ULL);\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"2M\", noop).value(), 2ULL << 20);\n+\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"3g\", noop).value(), 3'000'000'000ULL);\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"3G\", noop).value(), 3ULL << 30);\n+\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"4t\", noop).value(), 4'000'000'000'000ULL);\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"4T\", noop).value(), 4ULL << 40);\n+\n+    // check default multiplier\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"5\", ByteUnit::K).value(), 5ULL << 10);\n+\n+    // NaN\n+    BOOST_CHECK(!ParseByteUnits(\"\", noop));\n+    BOOST_CHECK(!ParseByteUnits(\"foo\", noop));\n+\n+    // whitespace\n+    BOOST_CHECK(!ParseByteUnits(\"123m \", noop));\n+    BOOST_CHECK(!ParseByteUnits(\" 123m\", noop));\n+\n+    // no +-\n+    BOOST_CHECK(!ParseByteUnits(\"-123m\", noop));\n+    BOOST_CHECK(!ParseByteUnits(\"+123m\", noop));\n+\n+    // zero padding\n+    BOOST_CHECK_EQUAL(ParseByteUnits(\"020M\", noop).value(), 20ULL << 20);\n+\n+    // fractions not allowed\n+    BOOST_CHECK(!ParseByteUnits(\"0.5T\", noop));\n+\n+    // overflow\n+    BOOST_CHECK(!ParseByteUnits(\"18446744073709551615g\", noop));\n+\n+    // invalid unit\n+    BOOST_CHECK(!ParseByteUnits(\"1x\", noop));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "5e7c99f140956f0d3707199e04cf1e4fecb87a4b",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=21b58f430fa05fdb7c5db79b545302417a5dbceb",
        "patch": "@@ -11,6 +11,7 @@\n #include <algorithm>\n #include <cstdlib>\n #include <cstring>\n+#include <limits>\n #include <optional>\n \n static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n@@ -526,3 +527,48 @@ std::string HexStr(const Span<const uint8_t> s)\n     assert(it == rv.end());\n     return rv;\n }\n+\n+std::optional<uint64_t> ParseByteUnits(const std::string& str, ByteUnit default_multiplier)\n+{\n+    if (str.empty()) {\n+        return std::nullopt;\n+    }\n+    auto multiplier = default_multiplier;\n+    char unit = str.back();\n+    switch (unit) {\n+    case 'k':\n+        multiplier = ByteUnit::k;\n+        break;\n+    case 'K':\n+        multiplier = ByteUnit::K;\n+        break;\n+    case 'm':\n+        multiplier = ByteUnit::m;\n+        break;\n+    case 'M':\n+        multiplier = ByteUnit::M;\n+        break;\n+    case 'g':\n+        multiplier = ByteUnit::g;\n+        break;\n+    case 'G':\n+        multiplier = ByteUnit::G;\n+        break;\n+    case 't':\n+        multiplier = ByteUnit::t;\n+        break;\n+    case 'T':\n+        multiplier = ByteUnit::T;\n+        break;\n+    default:\n+        unit = 0;\n+        break;\n+    }\n+\n+    uint64_t unit_amount = static_cast<uint64_t>(multiplier);\n+    auto parsed_num = ToIntegral<uint64_t>(unit ? str.substr(0, str.size() - 1) : str);\n+    if (!parsed_num || parsed_num > std::numeric_limits<uint64_t>::max() / unit_amount) { // check overflow\n+        return std::nullopt;\n+    }\n+    return *parsed_num * unit_amount;\n+}"
      },
      {
        "sha": "bc0a6233ab562a0c11f32c9f094fe90367877041",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21b58f430fa05fdb7c5db79b545302417a5dbceb/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=21b58f430fa05fdb7c5db79b545302417a5dbceb",
        "patch": "@@ -29,6 +29,23 @@ enum SafeChars\n     SAFE_CHARS_URI, //!< Chars allowed in URIs (RFC 3986)\n };\n \n+/**\n+ * Used by ParseByteUnits()\n+ * Lowercase base 1000\n+ * Uppercase base 1024\n+*/\n+enum class ByteUnit : uint64_t {\n+    NOOP = 1ULL,\n+    k = 1000ULL,\n+    K = 1024ULL,\n+    m = 1'000'000ULL,\n+    M = 1ULL << 20,\n+    g = 1'000'000'000ULL,\n+    G = 1ULL << 30,\n+    t = 1'000'000'000'000ULL,\n+    T = 1ULL << 40,\n+};\n+\n /**\n * Remove unsafe chars. Safe chars chosen to allow simple messages/URLs/email\n * addresses, but avoid anything even possibly remotely dangerous like & or >\n@@ -305,4 +322,17 @@ std::string ToUpper(const std::string& str);\n  */\n std::string Capitalize(std::string str);\n \n+/**\n+ * Parse a string with suffix unit [k|K|m|M|g|G|t|T].\n+ * Must be a whole integer, fractions not allowed (0.5t), no whitespace or +-\n+ * Lowercase units are 1000 base. Uppercase units are 1024 base.\n+ * Examples: 2m,27M,19g,41T\n+ *\n+ * @param[in] str                  the string to convert into bytes\n+ * @param[in] default_multiplier   if no unit is found in str use this unit\n+ * @returns                        optional uint64_t bytes from str or nullopt\n+ *                                 if ToIntegral is false, str is empty, trailing whitespace or overflow\n+ */\n+std::optional<uint64_t> ParseByteUnits(const std::string& str, ByteUnit default_multiplier);\n+\n #endif // BITCOIN_UTIL_STRENCODINGS_H"
      }
    ]
  }
]