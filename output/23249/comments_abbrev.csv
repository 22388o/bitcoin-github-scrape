dougEfresh,2021-10-13 14:58:42,"Updated with \n* Replacing `size_t` in favor of `uint64_t` (windows/mac didn't play nice with size_t)\n* Adding `InitError` on parsing failure\n* Simplified case statement in ParseByteUnit \n* 1000 for lowercase 1024 base for UPPERCASE\n\nWhat I need help with is overflows. I use `__builtin_mul_overflow` but there must be a better/easier solution. \n",https://github.com/bitcoin/bitcoin/pull/23249#issuecomment-942392397,942392397,
DrahtBot,2021-10-14 20:37:18,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22834](https://github.com/bitcoin/bitcoin/pull/22834) (net: respect -onlynet= when making outbound connections by vasild",https://github.com/bitcoin/bitcoin/pull/23249#issuecomment-943711933,943711933,
dougEfresh,2021-11-02 22:15:57,"> It might be good to add a release note in the `doc/` directory mentioning the new argument verification, since in theory it could make a configuration that used to work previously now cause an error on startup.\n\nAdded to release docs\n\n> It would also be good to mention new behavior in the PR description, since current description is a little ambiguous about whether this is only adding a ",https://github.com/bitcoin/bitcoin/pull/23249#issuecomment-958259727,958259727,
dougEfresh,2021-11-09 16:49:48,@MarcoFalke  would you mind reviewing? Thanks,https://github.com/bitcoin/bitcoin/pull/23249#issuecomment-964337580,964337580,
dougEfresh,2021-11-17 10:53:10,"@MarcoFalke \nhopefully, last review [21b58f43](https://github.com/bitcoin/bitcoin/commit/21b58f430fa05fdb7c5db79b545302417a5dbceb)\nMain changes since last review are removing assigning a default multiplier, adding enum for ByteUnit(s)\n\n",https://github.com/bitcoin/bitcoin/pull/23249#issuecomment-971460174,971460174,
laanwj,2021-10-11 14:10:38,"When we change this, it would be nice to do actual error handling instead of silently using the default if the value is unparseable.",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r726154590,726154590,src/init.cpp
laanwj,2021-10-11 14:11:32,"Could factor out the `ParseUInt64(v, &nBytes)` part here, it's the same for all cases.",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r726155294,726155294,src/util/strencodings.cpp
laanwj,2021-10-11 14:12:51,Please document under which conditions it returns a value or `nullopt` (e.g. parse errors).,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r726156417,726156417,src/util/strencodings.h
laanwj,2021-10-11 16:06:54,Are people going to fight over factor 1000 versus 1024 or has this been settled?,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r726267773,726267773,src/util/strencodings.cpp
sipa,2021-10-11 16:14:01,"I'd support both, lowercase for 1000-based, uppercase for 1024-based? That hopefully avoids most controversy.\n\nAlso, this looks like it could easily overflow.",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r726276583,726276583,src/util/strencodings.cpp
dougEfresh,2021-10-11 16:26:33,"The current/master branch implementation is silent,\nI agree we should do some type of error  handling, should we:\n\n1. Return `InitError()`\n2. Log a warning\n\nIf we throw an InitError, some people won't notice it, as this part of the code comes after level DB initialize. The error is shown like ~45-60 seconds after start up. (I know I didn't notice it myself) \n\nryanofsky has other  P",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r726300839,726300839,src/init.cpp
ryanofsky,2021-10-11 23:46:02,"> ryanofsky has other PR(s) that seems to address this by refactoring ArgsManager #22766 / #16545 . Perhaps wait for that.\n\nI'd definitely suggest fatal, explicit InitError for any bad or ambiguous values provided. ArgsManager class and PRs are a mess, I'd stay far away and keep this separate!\n\nEDIT: More concretely, I'd suggest changing DEFAULT_MAX_UPLOAD_TARGET to a string and writing so",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r726653001,726653001,src/init.cpp
practicalswift,2021-10-15 08:13:53,Could use `MultiplicationOverflow` instead if it is moved out from `src/test/fuzz/util.h` and proper unit tests are added fot it?,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r729614853,729614853,src/util/strencodings.cpp
dougEfresh,2021-10-15 16:32:13,"Since I'm checking an unsigned int, I  used\n\n```\nnBytes > std::numeric_limits<uint64_t>::max() / multiplier\n```\nIf there is interest, I can create another PR with `MultiplicationOverflow` out of `src/test/fuzz/util.h`\n",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r729967218,729967218,src/util/strencodings.cpp
promag,2021-10-15 21:00:16,I think parsing fails for number > 9 without unit?,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r730114025,730114025,src/util/strencodings.cpp
promag,2021-10-15 21:00:59,Should be digit?,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r730114369,730114369,src/util/strencodings.cpp
dougEfresh,2021-10-16 11:04:28,"Added this test case: \n```\nBOOST_CHECK_EQUAL(ParseByteUnits(""10"").value_or(0), 10ULL << 20UL);\n```",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r730248086,730248086,src/util/strencodings.cpp
dougEfresh,2021-10-16 11:04:31,Updated to parse the original str in the `default` case,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r730248090,730248090,src/util/strencodings.cpp
dougEfresh,2021-11-01 08:13:28,"I want to point out to reviewers that this changes start up behavior. Previously,  `-maxuploadtarget`  would silently fail and use DEFAULT_MAX_UPLOAD_TARGET. \nThis change will throw an error upon parse failure, but only  after 30-50 seconds after start-up",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r740025579,740025579,src/init.cpp
ryanofsky,2021-11-02 16:12:04,"re: https://github.com/bitcoin/bitcoin/pull/23249#discussion_r740025579\n\n>This change will throw an error upon parse failure, but only after 30-50 seconds after start-up\n\nI'm not seeing this take 30-50 seconds, just a second or two. Still it would be a good to provide faster checking, and just moving the parsing call up a little higher in the `AppInitMain` function seems to give good resul",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r741252331,741252331,src/init.cpp
ryanofsky,2021-11-02 18:19:19,"In commit ""util: ParseByteUnits - Parse a string with suffix unit [k|K] [m|M] [g|G] [t|T]"" (c5d4a59cf91f54a2027851b32cf83cfcb04cd210)\n\nThere's repetition and unneeded variables in this function. Also `nBytes` holds the number before multiplication instead of the actual number of bytes, and the name doesn't follow current coding convention. Would suggest an overall cleanup here like:\n\n```di",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r741356193,741356193,src/util/strencodings.cpp
ryanofsky,2021-11-02 18:27:19,"In commit ""util: ParseByteUnits - Parse a string with suffix unit [k|K] [m|M] [g|G] [t|T]"" (c5d4a59cf91f54a2027851b32cf83cfcb04cd210)\n\nWould be good to check behavior with 0 multiplier to make sure it doesn't accidentally change in the future.",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r741361711,741361711,src/test/util_tests.cpp
ryanofsky,2021-11-02 18:31:02,"In commit ""util: ParseByteUnits - Parse a string with suffix unit [k|K] [m|M] [g|G] [t|T]"" (c5d4a59cf91f54a2027851b32cf83cfcb04cd210)\n\nMinor inconsistency here where this case is using `.value_or(1)` and cases above are using `.value_or(0)`. I think it would best if all of these cases were consistent and better if they were using `.value()` instead of `.value_or()`",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r741364354,741364354,src/test/util_tests.cpp
dougEfresh,2021-11-02 22:13:16,Moved,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r741498394,741498394,src/init.cpp
dougEfresh,2021-11-02 22:13:46,"Great suggestion, code now looks cleaner. ",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r741498659,741498659,src/util/strencodings.cpp
dougEfresh,2021-11-02 22:14:05,Added `0` multiplier test,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r741498805,741498805,src/test/util_tests.cpp
dougEfresh,2021-11-02 22:14:20,Agreed,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r741498927,741498927,src/test/util_tests.cpp
vasild,2021-11-09 09:05:42,nit: double `;;` at the end,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745413873,745413873,src/init.cpp
vasild,2021-11-09 09:17:15,"Maybe add a test for unknown suffix, e.g. `123X`.",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745423040,745423040,src/test/util_tests.cpp
vasild,2021-11-09 09:19:16,nit: missing spaces around `-`.,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745424641,745424641,src/util/strencodings.cpp
vasild,2021-11-09 09:38:58,"I find this text confusing:\n\n> Optional suffix units [m|M] MiB, [g|G] GiB, [t|T] TiB. Lowercase is 1000 base while uppercase is 1024 base\n\nMaybe:\n\n> Optional suffix units [m|M|g|G|t|T]. Lowercase is 1000 base while uppercase is 1024 base",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745441313,745441313,src/init.cpp
dougEfresh,2021-11-09 12:17:29,Added invalid unit test,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745561529,745561529,src/test/util_tests.cpp
dougEfresh,2021-11-09 12:18:56,"@vasild  Good suggestion, I've changed the doc to: \n```\nTries to keep outbound traffic under the given target per 24h. Limit does not apply to peers with 'download' permission or blocks created within past week. 0 = no limit (default: %s). Optional suffix units [k|K|m|M|g|G|t|T] (default: M). Lowercase is 1000 base while uppercase is 1024 base\n```",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745562530,745562530,src/init.cpp
dougEfresh,2021-11-09 12:19:09,removed,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745562708,745562708,src/init.cpp
dougEfresh,2021-11-09 12:20:27,"When I added the space, it didn't look aesthetically pleasing to me, normally I do add a space, but this if statement looks better without \nI don't mind adding a space if you like or if someone else asks. ",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745563603,745563603,src/util/strencodings.cpp
vasild,2021-11-09 13:37:52,"nit: drop unnecessary `const` from the integer argument\nstyle: missing spaces around `*`:\n\n```suggestion\nstd::optional<uint64_t> ParseByteUnits(const std::string& str, uint64_t default_multiplier = 1024UL * 1024UL);\n```",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745622825,745622825,src/util/strencodings.h
vasild,2021-11-09 13:41:49,"style: this has 5 spaces for indentation, should be 4.",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745626133,745626133,src/util/strencodings.cpp
vasild,2021-11-09 13:42:53,"style: `case` should be aligned below `switch`:\n\n```cpp\n    switch (unit) {\n    case 'k':\n        multiplier = 1000;\n```",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745627064,745627064,src/util/strencodings.cpp
vasild,2021-11-09 13:44:00,"style: missing space\n\n```suggestion\n        return InitError(strprintf(_(""Unable to parse -maxuploadtarget: '%s' (possible integer overflow?)""), args.GetArg(""-maxuploadtarget"", """")));\n```",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745627956,745627956,src/init.cpp
vasild,2021-11-09 13:51:33,"The thing is that lots of people have lots of different preferences. ""Aesthetically pleasant"" for somebody may not be for another. The project uses `clang-format` to avoid endless low-value discussions about styling.",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745634280,745634280,src/util/strencodings.cpp
dougEfresh,2021-11-09 14:34:01,I ran `clang-format-diff.py` ,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745674435,745674435,src/util/strencodings.h
vasild,2021-11-09 14:48:16,"The `const` is still there. I think there was discussion somewhere about it, but I can't find it now...",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745688439,745688439,src/util/strencodings.h
dougEfresh,2021-11-09 16:48:20,@vasild I changed `const uint64_t`  to `uint64_t`,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r745813114,745813114,src/util/strencodings.cpp
promag,2021-11-10 09:15:29,"nit, why not `assert(default_multiplier > 0)`?",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746388684,746388684,src/util/strencodings.cpp
promag,2021-11-10 09:15:36,"nit,\n```cpp\nif (str.empty()) return std::nullopt;\nchar unit = str.back();\n```",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746388852,746388852,src/util/strencodings.cpp
MarcoFalke,2021-11-10 09:24:33,"With this breaking change (no longer ignoring whitespace), which I think is fine, it might be best to also reject sign characters (+-) and use `ToIntegral<uint64_t>`.",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746399786,746399786,src/util/strencodings.cpp
MarcoFalke,2021-11-10 09:26:51,Should the default multiplier have a default? It seems like the default is something that is per-arg and not project-wide.,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746401892,746401892,src/util/strencodings.h
dougEfresh,2021-11-10 11:21:16,Agreed.  I will remove the default.,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746493517,746493517,src/util/strencodings.h
dougEfresh,2021-11-10 11:38:00,"Depends on how strict or how we want to use this function.\nFor me, a `0` default_multiplier means  ""don not apply a multiplier""  if no unit found, parse  `str` as is. This may not be intuitive. \nI'm fine with restricting multiplier > 0.  \n@MarcoFalke what's your opinion ? \neither way, I'll update the docs in strencoding.h to explaining what a default_multiplier of zero means. \n",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746504952,746504952,src/util/strencodings.cpp
MarcoFalke,2021-11-10 11:50:07,"Wouldn't ""don not apply a multiplier"" mean `1`?",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746513188,746513188,src/util/strencodings.cpp
dougEfresh,2021-11-10 11:57:35,"ok, i will add an assert",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746518218,746518218,src/util/strencodings.cpp
dougEfresh,2021-11-10 15:01:32,How about `1` as a default multiplier ?,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746673661,746673661,src/util/strencodings.h
promag,2021-11-10 15:19:14,How about removing the argument? It's not needed. Either way please update doc comment above.,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746691516,746691516,src/util/strencodings.h
dougEfresh,2021-11-10 16:13:31,"I have tests for +-, whitespace, invalid unit...etc\nI'm now using ToIntegral. \nI've added an `assert(default_multiplier > 0)` but I don't know how to test this. Any ideas examples?",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746748501,746748501,src/util/strencodings.cpp
dougEfresh,2021-11-10 16:14:13,"default of `1` seems natural, so my latest change defaults to `1`",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746749167,746749167,src/util/strencodings.h
MarcoFalke,2021-11-10 16:20:05,"```suggestion\n        multiplier = 1000'000'000ULL;\n```\n\nHaven't tried this, but can the compiler parse this?",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746754941,746754941,src/util/strencodings.cpp
MarcoFalke,2021-11-10 16:22:05,"```suggestion\n    if( !parsed_num || parsed_num > std::numeric_limits<uint64_t>::max() / multiplier){\n    return std::nullopt;\n    }\n    return *parsed_num * multiplier;\n```\n\nMaybe split up into two lines to avoid the `std::optional{}` constructor for the value?",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r746756799,746756799,src/util/strencodings.cpp
vasild,2021-11-11 11:26:18,"> How about removing the argument? It's not needed.\n\nIndeed! I would remove that unused code. No parameter, no problem :) (what should be its default value? should it have default value? how to test `0` if we have assert()?)",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r747419527,747419527,src/util/strencodings.h
vasild,2021-11-11 11:31:32,"You cannot have the test trigger an `assert()` and continue successfully. Instead, you can `throw std::out_of_range` from the function and `try/catch` it from the test (`BOOST_CHECK_THROW()`). But in this case maybe it is best/simpler to just remove the parameter. Then there is no need to test edge cases for it :)",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r747422839,747422839,src/util/strencodings.cpp
dougEfresh,2021-11-11 14:45:48,"i do need this multiplier argument. the intent of this function is to be used with maxupload, dbcache...etc. they inheritly have a default multiplier (mostly MiB).  the main purpose is maintain backwards capability, e. g. `maxupload=300`  becomes `300m`.\nAs I write this, i think I will change the argument to a an enum with the valid units [k|K|m|M...]\nwith no default value. This makes it clear",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r747560226,747560226,src/util/strencodings.h
dougEfresh,2021-11-12 08:06:21,"I use the ""technical"" terms but I don't think they are intuitive, open to suggestions.  ",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r748048958,748048958,src/util/strencodings.h
dougEfresh,2021-11-12 08:07:39,"I agree, it looks better split",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r748049593,748049593,src/util/strencodings.cpp
dougEfresh,2021-11-12 08:07:53,it does!,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r748049690,748049690,src/util/strencodings.cpp
dougEfresh,2021-11-12 08:12:32,"@vasild @MarcoFalke @promag \nI added an enum `ByteUnitMultiplier` to [src/util/strencodings.src/util/strencodings.h](https://github.com/bitcoin/bitcoin/pull/23249/files#r748048958) \nLet me know what you think. ",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r748052207,748052207,src/util/strencodings.h
promag,2021-11-12 10:07:46,"Use enum class, which can be used like `ByteUnit::g` or `ByteUnit::K`.",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r748126534,748126534,src/util/strencodings.h
dougEfresh,2021-11-12 17:27:20,"changed. more intuitive, clear. ",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r748463408,748463408,src/util/strencodings.h
vasild,2021-11-17 10:02:48,"nit: remove `.has_value()` for consistency with other tests:\n\n```suggestion\n    BOOST_CHECK(!ParseByteUnits(""18446744073709551615g"", noop));\n```",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r751082657,751082657,src/test/util_tests.cpp
vasild,2021-11-17 10:20:12,"nit: extra white space\n\n```suggestion\n * Parse a string with suffix unit [k|K|m|M|g|G|t|T].\n```",https://github.com/bitcoin/bitcoin/pull/23249#discussion_r751097273,751097273,src/util/strencodings.h
dougEfresh,2021-11-17 10:49:13,fixed in 21b58f430fa05fdb7c5db79b545302417a5dbceb,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r751121225,751121225,src/test/util_tests.cpp
dougEfresh,2021-11-17 10:49:31,fixed,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r751121459,751121459,src/util/strencodings.h
MarcoFalke,2021-11-24 09:47:53,nit: Could also add a test that default_multiplier is ignored completely if passed in via the string? Maybe also add a fuzz test?,https://github.com/bitcoin/bitcoin/pull/23249#discussion_r755866680,755866680,src/test/util_tests.cpp
