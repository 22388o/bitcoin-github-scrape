[
  {
    "sha": "5f9537b2d9d1af80431870d77814d93f621e83cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Zjk1MzdiMmQ5ZDFhZjgwNDMxODcwZDc3ODE0ZDkzZjYyMWU4M2Ni",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-05T20:55:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-18T21:02:48Z"
      },
      "message": "Implement Bech32m encoding/decoding\n\nGithub-Pull: #20861\nRebased-From: da2bb6976dadeec682d163c258c9afecc87d6428",
      "tree": {
        "sha": "9de941d9432765f0c957049c39873f8dc5c44eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9de941d9432765f0c957049c39873f8dc5c44eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f9537b2d9d1af80431870d77814d93f621e83cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9537b2d9d1af80431870d77814d93f621e83cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f9537b2d9d1af80431870d77814d93f621e83cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9537b2d9d1af80431870d77814d93f621e83cb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1c3c53e5f94965c3a2c1376cb375257ece53989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1c3c53e5f94965c3a2c1376cb375257ece53989",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1c3c53e5f94965c3a2c1376cb375257ece53989"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 80,
      "deletions": 54
    },
    "files": [
      {
        "sha": "289e0213e8317b9ce137517328c28a6b3367458d",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 18,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9537b2d9d1af80431870d77814d93f621e83cb/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9537b2d9d1af80431870d77814d93f621e83cb/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=5f9537b2d9d1af80431870d77814d93f621e83cb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017 Pieter Wuille\n+// Copyright (c) 2017, 2021 Pieter Wuille\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -7,6 +7,9 @@\n \n #include <assert.h>\n \n+namespace bech32\n+{\n+\n namespace\n {\n \n@@ -27,6 +30,12 @@ const int8_t CHARSET_REV[128] = {\n      1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n };\n \n+/* Determine the final constant to use for the specified encoding. */\n+uint32_t EncodingConstant(Encoding encoding) {\n+    assert(encoding == Encoding::BECH32 || encoding == Encoding::BECH32M);\n+    return encoding == Encoding::BECH32 ? 1 : 0x2bc830a3;\n+}\n+\n /** This function will compute what 6 5-bit values to XOR into the last 6 input values, in order to\n  *  make the checksum 0. These 6 values are packed together in a single 30-bit integer. The higher\n  *  bits correspond to earlier values. */\n@@ -111,21 +120,24 @@ data ExpandHRP(const std::string& hrp)\n }\n \n /** Verify a checksum. */\n-bool VerifyChecksum(const std::string& hrp, const data& values)\n+Encoding VerifyChecksum(const std::string& hrp, const data& values)\n {\n     // PolyMod computes what value to xor into the final values to make the checksum 0. However,\n     // if we required that the checksum was 0, it would be the case that appending a 0 to a valid\n     // list of values would result in a new valid list. For that reason, Bech32 requires the\n-    // resulting checksum to be 1 instead.\n-    return PolyMod(Cat(ExpandHRP(hrp), values)) == 1;\n+    // resulting checksum to be 1 instead. In Bech32m, this constant was amended.\n+    const uint32_t check = PolyMod(Cat(ExpandHRP(hrp), values));\n+    if (check == EncodingConstant(Encoding::BECH32)) return Encoding::BECH32;\n+    if (check == EncodingConstant(Encoding::BECH32M)) return Encoding::BECH32M;\n+    return Encoding::INVALID;\n }\n \n /** Create a checksum. */\n-data CreateChecksum(const std::string& hrp, const data& values)\n+data CreateChecksum(Encoding encoding, const std::string& hrp, const data& values)\n {\n     data enc = Cat(ExpandHRP(hrp), values);\n     enc.resize(enc.size() + 6); // Append 6 zeroes\n-    uint32_t mod = PolyMod(enc) ^ 1; // Determine what to XOR into those 6 zeroes.\n+    uint32_t mod = PolyMod(enc) ^ EncodingConstant(encoding); // Determine what to XOR into those 6 zeroes.\n     data ret(6);\n     for (size_t i = 0; i < 6; ++i) {\n         // Convert the 5-bit groups in mod to checksum values.\n@@ -136,16 +148,13 @@ data CreateChecksum(const std::string& hrp, const data& values)\n \n } // namespace\n \n-namespace bech32\n-{\n-\n-/** Encode a Bech32 string. */\n-std::string Encode(const std::string& hrp, const data& values) {\n+/** Encode a Bech32 or Bech32m string. */\n+std::string Encode(Encoding encoding, const std::string& hrp, const data& values) {\n     // First ensure that the HRP is all lowercase. BIP-173 requires an encoder\n     // to return a lowercase Bech32 string, but if given an uppercase HRP, the\n     // result will always be invalid.\n     for (const char& c : hrp) assert(c < 'A' || c > 'Z');\n-    data checksum = CreateChecksum(hrp, values);\n+    data checksum = CreateChecksum(encoding, hrp, values);\n     data combined = Cat(values, checksum);\n     std::string ret = hrp + '1';\n     ret.reserve(ret.size() + combined.size());\n@@ -155,8 +164,8 @@ std::string Encode(const std::string& hrp, const data& values) {\n     return ret;\n }\n \n-/** Decode a Bech32 string. */\n-std::pair<std::string, data> Decode(const std::string& str) {\n+/** Decode a Bech32 or Bech32m string. */\n+DecodeResult Decode(const std::string& str) {\n     bool lower = false, upper = false;\n     for (size_t i = 0; i < str.size(); ++i) {\n         unsigned char c = str[i];\n@@ -183,10 +192,9 @@ std::pair<std::string, data> Decode(const std::string& str) {\n     for (size_t i = 0; i < pos; ++i) {\n         hrp += LowerCase(str[i]);\n     }\n-    if (!VerifyChecksum(hrp, values)) {\n-        return {};\n-    }\n-    return {hrp, data(values.begin(), values.end() - 6)};\n+    Encoding result = VerifyChecksum(hrp, values);\n+    if (result == Encoding::INVALID) return {};\n+    return {result, std::move(hrp), data(values.begin(), values.end() - 6)};\n }\n \n } // namespace bech32"
      },
      {
        "sha": "3679ea8ccbb113e5d18beaec3b5ecfc204356ba9",
        "filename": "src/bech32.h",
        "status": "modified",
        "additions": 24,
        "deletions": 6,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9537b2d9d1af80431870d77814d93f621e83cb/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9537b2d9d1af80431870d77814d93f621e83cb/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=5f9537b2d9d1af80431870d77814d93f621e83cb",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017 Pieter Wuille\n+// Copyright (c) 2017, 2021 Pieter Wuille\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -7,7 +7,7 @@\n // separator character (1), and a base32 data section, the last\n // 6 characters of which are a checksum.\n //\n-// For more information, see BIP 173.\n+// For more information, see BIP 173 and BIP 350.\n \n #ifndef BITCOIN_BECH32_H\n #define BITCOIN_BECH32_H\n@@ -19,11 +19,29 @@\n namespace bech32\n {\n \n-/** Encode a Bech32 string. If hrp contains uppercase characters, this will cause an assertion error. */\n-std::string Encode(const std::string& hrp, const std::vector<uint8_t>& values);\n+enum class Encoding {\n+    INVALID, //!< Failed decoding\n \n-/** Decode a Bech32 string. Returns (hrp, data). Empty hrp means failure. */\n-std::pair<std::string, std::vector<uint8_t>> Decode(const std::string& str);\n+    BECH32,  //!< Bech32 encoding as defined in BIP173\n+    BECH32M, //!< Bech32m encoding as defined in BIP350\n+};\n+\n+/** Encode a Bech32 or Bech32m string. If hrp contains uppercase characters, this will cause an\n+ *  assertion error. Encoding must be one of BECH32 or BECH32M. */\n+std::string Encode(Encoding encoding, const std::string& hrp, const std::vector<uint8_t>& values);\n+\n+struct DecodeResult\n+{\n+    Encoding encoding;         //!< What encoding was detected in the result; Encoding::INVALID if failed.\n+    std::string hrp;           //!< The human readable part\n+    std::vector<uint8_t> data; //!< The payload (excluding checksum)\n+\n+    DecodeResult() : encoding(Encoding::INVALID) {}\n+    DecodeResult(Encoding enc, std::string&& h, std::vector<uint8_t>&& d) : encoding(enc), hrp(std::move(h)), data(std::move(d)) {}\n+};\n+\n+/** Decode a Bech32 string. */\n+DecodeResult Decode(const std::string& str);\n \n } // namespace bech32\n "
      },
      {
        "sha": "88a5fd90550bd16d1586b665048e73be379675b4",
        "filename": "src/bench/bech32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9537b2d9d1af80431870d77814d93f621e83cb/src/bench/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9537b2d9d1af80431870d77814d93f621e83cb/src/bench/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bech32.cpp?ref=5f9537b2d9d1af80431870d77814d93f621e83cb",
        "patch": "@@ -18,7 +18,7 @@ static void Bech32Encode(benchmark::State& state)\n     tmp.reserve(1 + 32 * 8 / 5);\n     ConvertBits<8, 5, true>([&](unsigned char c) { tmp.push_back(c); }, v.begin(), v.end());\n     while (state.KeepRunning()) {\n-        bech32::Encode(\"bc\", tmp);\n+        bech32::Encode(bech32::Encoding::BECH32, \"bc\", tmp);\n     }\n }\n "
      },
      {
        "sha": "f927ebbb421d3ff836bd8618ca1b0e9218d69299",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9537b2d9d1af80431870d77814d93f621e83cb/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9537b2d9d1af80431870d77814d93f621e83cb/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=5f9537b2d9d1af80431870d77814d93f621e83cb",
        "patch": "@@ -44,15 +44,15 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         std::vector<unsigned char> data = {0};\n         data.reserve(33);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n+        return bech32::Encode(bech32::Encoding::BECH32, m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const WitnessV0ScriptHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n         data.reserve(53);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n+        return bech32::Encode(bech32::Encoding::BECH32, m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const WitnessUnknown& id) const\n@@ -63,7 +63,7 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         std::vector<unsigned char> data = {(unsigned char)id.version};\n         data.reserve(1 + (id.length * 8 + 4) / 5);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.program, id.program + id.length);\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n+        return bech32::Encode(bech32::Encoding::BECH32, m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const CNoDestination& no) const { return {}; }\n@@ -91,13 +91,13 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         }\n     }\n     data.clear();\n-    auto bech = bech32::Decode(str);\n-    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+    const auto dec = bech32::Decode(str);\n+    if (dec.encoding == bech32::Encoding::BECH32 && dec.data.size() > 0 && dec.hrp == params.Bech32HRP()) {\n         // Bech32 decoding\n-        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        int version = dec.data[0]; // The first 5 bit symbol is the witness version (0-16)\n         // The rest of the symbols are converted witness program bytes.\n-        data.reserve(((bech.second.size() - 1) * 5) / 8);\n-        if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, bech.second.begin() + 1, bech.second.end())) {\n+        data.reserve(((dec.data.size() - 1) * 5) / 8);\n+        if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, dec.data.begin() + 1, dec.data.end())) {\n             if (version == 0) {\n                 {\n                     WitnessV0KeyHash keyid;"
      },
      {
        "sha": "2ddc284761c74c507a21ce4a374d678f236d1fcd",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9537b2d9d1af80431870d77814d93f621e83cb/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9537b2d9d1af80431870d77814d93f621e83cb/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=5f9537b2d9d1af80431870d77814d93f621e83cb",
        "patch": "@@ -22,9 +22,9 @@ BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)\n         \"?1ezyfcl\",\n     };\n     for (const std::string& str : CASES) {\n-        auto ret = bech32::Decode(str);\n-        BOOST_CHECK(!ret.first.empty());\n-        std::string recode = bech32::Encode(ret.first, ret.second);\n+        const auto dec = bech32::Decode(str);\n+        BOOST_CHECK(dec.encoding == bech32::Encoding::BECH32);\n+        std::string recode = bech32::Encode(bech32::Encoding::BECH32, dec.hrp, dec.data);\n         BOOST_CHECK(!recode.empty());\n         BOOST_CHECK(CaseInsensitiveEqual(str, recode));\n     }\n@@ -49,8 +49,8 @@ BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)\n         \"A12uEL5L\",\n     };\n     for (const std::string& str : CASES) {\n-        auto ret = bech32::Decode(str);\n-        BOOST_CHECK(ret.first.empty());\n+        const auto dec = bech32::Decode(str);\n+        BOOST_CHECK(dec.encoding != bech32::Encoding::BECH32);\n     }\n }\n "
      },
      {
        "sha": "0ac1f022635c3cb2c68391427e897a10206b40c4",
        "filename": "src/test/fuzz/bech32.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9537b2d9d1af80431870d77814d93f621e83cb/src/test/fuzz/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9537b2d9d1af80431870d77814d93f621e83cb/src/test/fuzz/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/bech32.cpp?ref=5f9537b2d9d1af80431870d77814d93f621e83cb",
        "patch": "@@ -16,28 +16,28 @@\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     const std::string random_string(buffer.begin(), buffer.end());\n-    const std::pair<std::string, std::vector<uint8_t>> r1 = bech32::Decode(random_string);\n-    if (r1.first.empty()) {\n-        assert(r1.second.empty());\n+    const auto r1 = bech32::Decode(random_string);\n+    if (r1.hrp.empty()) {\n+        assert(r1.encoding == bech32::Encoding::INVALID);\n+        assert(r1.data.empty());\n     } else {\n-        const std::string& hrp = r1.first;\n-        const std::vector<uint8_t>& data = r1.second;\n-        const std::string reencoded = bech32::Encode(hrp, data);\n+        assert(r1.encoding != bech32::Encoding::INVALID);\n+        const std::string reencoded = bech32::Encode(r1.encoding, r1.hrp, r1.data);\n         assert(CaseInsensitiveEqual(random_string, reencoded));\n     }\n \n     std::vector<unsigned char> input;\n     ConvertBits<8, 5, true>([&](unsigned char c) { input.push_back(c); }, buffer.begin(), buffer.end());\n-    const std::string encoded = bech32::Encode(\"bc\", input);\n-    assert(!encoded.empty());\n \n-    const std::pair<std::string, std::vector<uint8_t>> r2 = bech32::Decode(encoded);\n-    if (r2.first.empty()) {\n-        assert(r2.second.empty());\n-    } else {\n-        const std::string& hrp = r2.first;\n-        const std::vector<uint8_t>& data = r2.second;\n-        assert(hrp == \"bc\");\n-        assert(data == input);\n+    if (input.size() + 3 + 6 <= 90) {\n+        // If it's possible to encode input in Bech32(m) without exceeding the 90-character limit:\n+        for (auto encoding : {bech32::Encoding::BECH32, bech32::Encoding::BECH32M}) {\n+            const std::string encoded = bech32::Encode(encoding, \"bc\", input);\n+            assert(!encoded.empty());\n+            const auto r2 = bech32::Decode(encoded);\n+            assert(r2.encoding == encoding);\n+            assert(r2.hrp == \"bc\");\n+            assert(r2.data == input);\n+        }\n     }\n }"
      }
    ]
  },
  {
    "sha": "cf18ac9665a13ea701f4410287e6ad10ae1f1c30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjE4YWM5NjY1YTEzZWE3MDFmNDQxMDI4N2U2YWQxMGFlMWYxYzMw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-05T21:12:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-18T21:07:29Z"
      },
      "message": "Add Bech32m test vectors\n\nGithub-Pull: #20861\nRebased-From: 25b1c6e13ddf1626210d5e3d37298d1f3a78a94f",
      "tree": {
        "sha": "1ab8bba54f6bb9ff4e0276756b04b7766fcf9a7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ab8bba54f6bb9ff4e0276756b04b7766fcf9a7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf18ac9665a13ea701f4410287e6ad10ae1f1c30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf18ac9665a13ea701f4410287e6ad10ae1f1c30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf18ac9665a13ea701f4410287e6ad10ae1f1c30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf18ac9665a13ea701f4410287e6ad10ae1f1c30/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f9537b2d9d1af80431870d77814d93f621e83cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9537b2d9d1af80431870d77814d93f621e83cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f9537b2d9d1af80431870d77814d93f621e83cb"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 47,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2651e464308619858696ac81f46cfcdaaaf9178b",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 3,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf18ac9665a13ea701f4410287e6ad10ae1f1c30/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf18ac9665a13ea701f4410287e6ad10ae1f1c30/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=cf18ac9665a13ea701f4410287e6ad10ae1f1c30",
        "patch": "@@ -10,7 +10,7 @@\n \n BOOST_FIXTURE_TEST_SUITE(bech32_tests, BasicTestingSetup)\n \n-BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)\n+BOOST_AUTO_TEST_CASE(bech32_testvectors_valid)\n {\n     static const std::string CASES[] = {\n         \"A12UEL5L\",\n@@ -30,7 +30,27 @@ BOOST_AUTO_TEST_CASE(bip173_testvectors_valid)\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)\n+BOOST_AUTO_TEST_CASE(bech32m_testvectors_valid)\n+{\n+    static const std::string CASES[] = {\n+        \"A1LQFN3A\",\n+        \"a1lqfn3a\",\n+        \"an83characterlonghumanreadablepartthatcontainsthetheexcludedcharactersbioandnumber11sg7hg6\",\n+        \"abcdef1l7aum6echk45nj3s0wdvt2fg8x9yrzpqzd3ryx\",\n+        \"11llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllludsr8\",\n+        \"split1checkupstagehandshakeupstreamerranterredcaperredlc445v\",\n+        \"?1v759aa\"\n+    };\n+    for (const std::string& str : CASES) {\n+        const auto dec = bech32::Decode(str);\n+        BOOST_CHECK(dec.encoding == bech32::Encoding::BECH32M);\n+        std::string recode = bech32::Encode(bech32::Encoding::BECH32M, dec.hrp, dec.data);\n+        BOOST_CHECK(!recode.empty());\n+        BOOST_CHECK(CaseInsensitiveEqual(str, recode));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(bech32_testvectors_invalid)\n {\n     static const std::string CASES[] = {\n         \" 1nwldj5\",\n@@ -50,7 +70,31 @@ BOOST_AUTO_TEST_CASE(bip173_testvectors_invalid)\n     };\n     for (const std::string& str : CASES) {\n         const auto dec = bech32::Decode(str);\n-        BOOST_CHECK(dec.encoding != bech32::Encoding::BECH32);\n+        BOOST_CHECK(dec.encoding == bech32::Encoding::INVALID);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(bech32m_testvectors_invalid)\n+{\n+    static const std::string CASES[] = {\n+        \" 1xj0phk\",\n+        \"\\x7f\"\"1g6xzxy\",\n+        \"\\x80\"\"1vctc34\",\n+        \"an84characterslonghumanreadablepartthatcontainsthetheexcludedcharactersbioandnumber11d6pts4\",\n+        \"qyrz8wqd2c9m\",\n+        \"1qyrz8wqd2c9m\",\n+        \"y1b0jsk6g\",\n+        \"lt1igcx5c0\",\n+        \"in1muywd\",\n+        \"mm1crxm3i\",\n+        \"au1s5cgom\",\n+        \"M1VUXWEZ\",\n+        \"16plkw9\",\n+        \"1p2gdwpf\"\n+    };\n+    for (const std::string& str : CASES) {\n+        const auto dec = bech32::Decode(str);\n+        BOOST_CHECK(dec.encoding == bech32::Encoding::INVALID);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTRlODhlMGU4ODVjZmNiOTExOTY4NDBhOTU4ZTdjOWZhMDljM2I1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-05T21:36:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-27T19:08:28Z"
      },
      "message": "Use Bech32m encoding for v1+ segwit addresses\n\nThis also includes updates to the Python test framework implementation,\ntest vectors, and release notes.\n\nGithub-Pull: #20861\nRebased-From: fe5e495c31de47b0ec732b943db11fe345d874af",
      "tree": {
        "sha": "2321404c68c1943a7f2a3a2806beec760fcad483",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2321404c68c1943a7f2a3a2806beec760fcad483"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf18ac9665a13ea701f4410287e6ad10ae1f1c30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf18ac9665a13ea701f4410287e6ad10ae1f1c30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf18ac9665a13ea701f4410287e6ad10ae1f1c30"
      }
    ],
    "stats": {
      "total": 770,
      "additions": 348,
      "deletions": 422
    },
    "files": [
      {
        "sha": "c9a12c923744a89e89485f4d0ebb4230e5d83156",
        "filename": "contrib/testgen/gen_key_io_test_vectors.py",
        "status": "modified",
        "additions": 42,
        "deletions": 28,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/contrib/testgen/gen_key_io_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/contrib/testgen/gen_key_io_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_key_io_test_vectors.py?ref=1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "patch": "@@ -16,7 +16,7 @@\n from base58 import b58encode_chk, b58decode_chk, b58chars\n import random\n from binascii import b2a_hex\n-from segwit_addr import bech32_encode, decode, convertbits, CHARSET\n+from segwit_addr import bech32_encode, decode, convertbits, CHARSET, Encoding\n \n # key types\n PUBKEY_ADDRESS = 0\n@@ -33,6 +33,7 @@\n OP_0 = 0x00\n OP_1 = 0x51\n OP_2 = 0x52\n+OP_3 = 0x53\n OP_16 = 0x60\n OP_DUP = 0x76\n OP_EQUAL = 0x87\n@@ -45,6 +46,7 @@\n script_suffix = (OP_EQUAL,)\n p2wpkh_prefix = (OP_0, 20)\n p2wsh_prefix = (OP_0, 32)\n+p2tr_prefix = (OP_1, 32)\n \n metadata_keys = ['isPrivkey', 'chain', 'isCompressed', 'tryCaseFlip']\n # templates for valid sequences\n@@ -66,29 +68,39 @@\n ]\n # templates for valid bech32 sequences\n bech32_templates = [\n-  # hrp, version, witprog_size, metadata, output_prefix\n-  ('bc',    0, 20, (False, 'main',    None, True), p2wpkh_prefix),\n-  ('bc',    0, 32, (False, 'main',    None, True), p2wsh_prefix),\n-  ('bc',    1,  2, (False, 'main',    None, True), (OP_1, 2)),\n-  ('tb',    0, 20, (False, 'test',    None, True), p2wpkh_prefix),\n-  ('tb',    0, 32, (False, 'test',    None, True), p2wsh_prefix),\n-  ('tb',    2, 16, (False, 'test',    None, True), (OP_2, 16)),\n-  ('bcrt',  0, 20, (False, 'regtest', None, True), p2wpkh_prefix),\n-  ('bcrt',  0, 32, (False, 'regtest', None, True), p2wsh_prefix),\n-  ('bcrt', 16, 40, (False, 'regtest', None, True), (OP_16, 40))\n+  # hrp, version, witprog_size, metadata, encoding, output_prefix\n+  ('bc',    0, 20, (False, 'main',    None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('bc',    0, 32, (False, 'main',    None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('bc',    1, 32, (False, 'main',    None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('bc',    2,  2, (False, 'main',    None, True), Encoding.BECH32M, (OP_2, 2)),\n+  ('tb',    0, 20, (False, 'test',    None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('tb',    0, 32, (False, 'test',    None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('tb',    1, 32, (False, 'test',    None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('tb',    3, 16, (False, 'test',    None, True), Encoding.BECH32M, (OP_3, 16)),\n+  ('bcrt',  0, 20, (False, 'regtest', None, True), Encoding.BECH32,  p2wpkh_prefix),\n+  ('bcrt',  0, 32, (False, 'regtest', None, True), Encoding.BECH32,  p2wsh_prefix),\n+  ('bcrt',  1, 32, (False, 'regtest', None, True), Encoding.BECH32M, p2tr_prefix),\n+  ('bcrt', 16, 40, (False, 'regtest', None, True), Encoding.BECH32M, (OP_16, 40))\n ]\n # templates for invalid bech32 sequences\n bech32_ng_templates = [\n-  # hrp, version, witprog_size, invalid_bech32, invalid_checksum, invalid_char\n-  ('tc',    0, 20, False, False, False),\n-  ('tb',   17, 32, False, False, False),\n-  ('bcrt',  3,  1, False, False, False),\n-  ('bc',   15, 41, False, False, False),\n-  ('tb',    0, 16, False, False, False),\n-  ('bcrt',  0, 32, True,  False, False),\n-  ('bc',    0, 16, True,  False, False),\n-  ('tb',    0, 32, False, True,  False),\n-  ('bcrt',  0, 20, False, False, True)\n+  # hrp, version, witprog_size, encoding, invalid_bech32, invalid_checksum, invalid_char\n+  ('tc',    0, 20, Encoding.BECH32,  False, False, False),\n+  ('bt',    1, 32, Encoding.BECH32M, False, False, False),\n+  ('tb',   17, 32, Encoding.BECH32M, False, False, False),\n+  ('bcrt',  3,  1, Encoding.BECH32M, False, False, False),\n+  ('bc',   15, 41, Encoding.BECH32M, False, False, False),\n+  ('tb',    0, 16, Encoding.BECH32,  False, False, False),\n+  ('bcrt',  0, 32, Encoding.BECH32,  True,  False, False),\n+  ('bc',    0, 16, Encoding.BECH32,  True,  False, False),\n+  ('tb',    0, 32, Encoding.BECH32,  False, True,  False),\n+  ('bcrt',  0, 20, Encoding.BECH32,  False, False, True),\n+  ('bc',    0, 20, Encoding.BECH32M, False, False, False),\n+  ('tb',    0, 32, Encoding.BECH32M, False, False, False),\n+  ('bcrt',  0, 20, Encoding.BECH32M, False, False, False),\n+  ('bc',    1, 32, Encoding.BECH32,  False, False, False),\n+  ('tb',    2, 16, Encoding.BECH32,  False, False, False),\n+  ('bcrt', 16, 20, Encoding.BECH32,  False, False, False),\n ]\n \n def is_valid(v):\n@@ -128,8 +140,9 @@ def gen_valid_bech32_vector(template):\n     hrp = template[0]\n     witver = template[1]\n     witprog = bytearray(os.urandom(template[2]))\n-    dst_prefix = bytearray(template[4])\n-    rv = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n+    encoding = template[4]\n+    dst_prefix = bytearray(template[5])\n+    rv = bech32_encode(encoding, hrp, [witver] + convertbits(witprog, 8, 5))\n     return rv, dst_prefix + witprog\n \n def gen_valid_vectors():\n@@ -189,22 +202,23 @@ def gen_invalid_bech32_vector(template):\n     hrp = template[0]\n     witver = template[1]\n     witprog = bytearray(os.urandom(template[2]))\n+    encoding = template[3]\n \n     if no_data:\n-        rv = bech32_encode(hrp, [])\n+        rv = bech32_encode(encoding, hrp, [])\n     else:\n         data = [witver] + convertbits(witprog, 8, 5)\n-        if template[3] and not no_data:\n+        if template[4] and not no_data:\n             if template[2] % 5 in {2, 4}:\n                 data[-1] |= 1\n             else:\n                 data.append(0)\n-        rv = bech32_encode(hrp, data)\n+        rv = bech32_encode(encoding, hrp, data)\n \n-    if template[4]:\n+    if template[5]:\n         i = len(rv) - random.randrange(1, 7)\n         rv = rv[:i] + random.choice(CHARSET.replace(rv[i], '')) + rv[i + 1:]\n-    if template[5]:\n+    if template[6]:\n         i = len(hrp) + 1 + random.randrange(0, len(rv) - len(hrp) - 4)\n         rv = rv[:i] + rv[i:i + 4].upper() + rv[i + 4:]\n "
      },
      {
        "sha": "793ff29a2635d2f692f534de443686ce3323c8ce",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "patch": "@@ -1,4 +1,4 @@\n-BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.19.0**):\n+BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.20.2**):\n \n * [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n@@ -42,3 +42,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.19.0**):\n * [`BIP 173`](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki): Bech32 addresses for native Segregated Witness outputs are supported as of **v0.16.0** ([PR 11167](https://github.com/bitcoin/bitcoin/pull/11167)). Bech32 addresses are generated by default as of **v0.20.0** ([PR 16884](https://github.com/bitcoin/bitcoin/pull/16884)).\n * [`BIP 174`](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki): RPCs to operate on Partially Signed Bitcoin Transactions (PSBT) are present as of **v0.17.0** ([PR 13557](https://github.com/bitcoin/bitcoin/pull/13557)).\n * [`BIP 176`](https://github.com/bitcoin/bips/blob/master/bip-0176.mediawiki): Bits Denomination [QT only] is supported as of **v0.16.0** ([PR 12035](https://github.com/bitcoin/bitcoin/pull/12035)).\n+* [`BIP 350`](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki): Addresses for native v1+ segregated Witness outputs use Bech32m instead of Bech32 as of **v0.20.2** ([PR 20861](https://github.com/bitcoin/bitcoin/pull/20861))."
      },
      {
        "sha": "66c92699c3d2874a26d6181b727234e6a7cd7a17",
        "filename": "doc/release-notes-20861.md",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/doc/release-notes-20861.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/doc/release-notes-20861.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-20861.md?ref=1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "patch": "@@ -0,0 +1,12 @@\n+Updated RPCs\n+------------\n+\n+- Due to [BIP 350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki)\n+  being implemented, behavior for all RPCs that accept addresses is changed when\n+  a native witness version 1 (or higher) is passed. These now require a Bech32m\n+  encoding instead of a Bech32 one, and Bech32m encoding will be used for such\n+  addresses in RPC output as well. No version 1 addresses should be created\n+  for mainnet until consensus rules are adopted that give them meaning\n+  (e.g. through [BIP 341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki)).\n+  Once that happens, Bech32m is expected to be used for them, so this shouldn't\n+  affect any production systems, but may be observed on other networks."
      },
      {
        "sha": "0cb4d0bf7cb3ae6a2fff0247037f0865df5904ae",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "patch": "@@ -63,7 +63,7 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n         std::vector<unsigned char> data = {(unsigned char)id.version};\n         data.reserve(1 + (id.length * 8 + 4) / 5);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.program, id.program + id.length);\n-        return bech32::Encode(bech32::Encoding::BECH32, m_params.Bech32HRP(), data);\n+        return bech32::Encode(bech32::Encoding::BECH32M, m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const CNoDestination& no) const { return {}; }\n@@ -92,9 +92,15 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n     }\n     data.clear();\n     const auto dec = bech32::Decode(str);\n-    if (dec.encoding == bech32::Encoding::BECH32 && dec.data.size() > 0 && dec.hrp == params.Bech32HRP()) {\n+    if ((dec.encoding == bech32::Encoding::BECH32 || dec.encoding == bech32::Encoding::BECH32M) && dec.data.size() > 0 && dec.hrp == params.Bech32HRP()) {\n         // Bech32 decoding\n         int version = dec.data[0]; // The first 5 bit symbol is the witness version (0-16)\n+        if (version == 0 && dec.encoding != bech32::Encoding::BECH32) {\n+            return CNoDestination();\n+        }\n+        if (version != 0 && dec.encoding != bech32::Encoding::BECH32M) {\n+            return CNoDestination();\n+        }\n         // The rest of the symbols are converted witness program bytes.\n         data.reserve(((dec.data.size() - 1) * 5) / 8);\n         if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, dec.data.begin() + 1, dec.data.end())) {"
      },
      {
        "sha": "376fa1ccdcefe6e93e7e2381e23b33505cf54a05",
        "filename": "src/test/data/key_io_invalid.json",
        "status": "modified",
        "additions": 48,
        "deletions": 78,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/src/test/data/key_io_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/src/test/data/key_io_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_invalid.json?ref=1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "patch": "@@ -6,177 +6,147 @@\n         \"x\"\n     ],\n     [\n-        \"37qgekLpCCHrQuSjvX3fs496FWTGsHFHizjJAs6NPcR47aefnnCWECAhHV6E3g4YN7u7Yuwod5Y\"\n+        \"1KyjgD9vFKmFSysJPUqQdXT8Yy5r82D6y74dfsg1ANTteuHJuP2q1aP1WgGX3oetFRtatKVXxPU\"\n     ],\n     [\n-        \"dzb7VV1Ui55BARxv7ATxAtCUeJsANKovDGWFVgpTbhq9gvPqP3yv\"\n+        \"2CwgfUPJ6BCa16PuFjKeMzLJJUpqnXm9mCtoXVGiGN7s9dNCKfCN5SdT7cu4nMY5omWHPrQLAqYL\"\n     ],\n     [\n-        \"MuNu7ZAEDFiHthiunm7dPjwKqrVNCM3mAz6rP9zFveQu14YA8CxExSJTHcVP9DErn6u84E6Ej7S\"\n+        \"grEx1jdq4kpgsvorxP5PRyjgbXpvAVpaL5HEcqpDmF6ZpwuqRbzHX64GZ9eUwoSTvmbQb9fnqnh\"\n     ],\n     [\n-        \"rPpQpYknyNQ5AEHuY6H8ijJJrYc2nDKKk9jjmKEXsWzyAQcFGpDLU2Zvsmoi8JLR7hAwoy3RQWf\"\n+        \"7RSWWNt7pyiZkNnLTuocsLMM6e3c7Mvvq8phtaBVyhuceG37y9r\"\n     ],\n     [\n-        \"4Uc3FmN6NQ6zLBK5QQBXRBUREaaHwCZYsGCueHauuDmJpZKn6jkEskMB2Zi2CNgtb5r6epWEFfUJq\"\n+        \"7VXvPTB9ZdTRUS2W1KpcykSA1XHaVrfUGhKvWQXQLMVUNefmaLkF9DFC4fZJ5aMCxmj4HRQcLFGix\"\n     ],\n     [\n-        \"7aQgR5DFQ25vyXmqZAWmnVCjL3PkBcdVkBUpjrjMTcghHx3E8wb\"\n+        \"91bBALqY4D1Mmz4vqnCwdGSB4U1sqnZPrKZ8aHENoT5irq6bB9Nc\"\n     ],\n     [\n-        \"17QpPprjeg69fW1DV8DcYYCKvWjYhXvWkov6MJ1iTTvMFj6weAqW7wybZeH57WTNxXVCRH4veVs\"\n+        \"tc19jm4rn\"\n     ],\n     [\n-        \"KxuACDviz8Xvpn1xAh9MfopySZNuyajYMZWz16Dv2mHHryznWUp3\"\n+        \"bt1py306q853jeddsuaasstjxjz6l9uehmx8kgpe94lvvwj85rah56asxg35e3\"\n     ],\n     [\n-        \"7nK3GSmqdXJQtdohvGfJ7KsSmn3TmGqExug49583bDAL91pVSGq5xS9SHoAYL3Wv3ijKTit65th\"\n+        \"tb13u87aul665v37upwmu9a4nh82rj9cv94x5tps52e39e6k56t2ryzqv9mkxa\"\n     ],\n     [\n-        \"cTivdBmq7bay3RFGEBBuNfMh2P1pDCgRYN2Wbxmgwr4ki3jNUL2va\"\n+        \"bcrt1rkqk977nr\"\n     ],\n     [\n-        \"gjMV4vjNjyMrna4fsAr8bWxAbwtmMUBXJS3zL4NJt5qjozpbQLmAfK1uA3CquSqsZQMpoD1g2nk\"\n+        \"bc10v6wh2rtujsn9hnsyfzzsd9y3rx9n8xhue0agk7c8q9tv3lga7css5jku9rstle93e5fhc8dl\"\n     ],\n     [\n-        \"emXm1naBMoVzPjbk7xpeTVMFy4oDEe25UmoyGgKEB1gGWsK8kRGs\"\n+        \"tb1q9quwy0k48ne8ppmr7p0jhj6hks7smd7l\"\n     ],\n     [\n-        \"7VThQnNRj1o3Zyvc7XHPRrjDf8j2oivPTeDXnRPYWeYGE4pXeRJDZgf28ppti5hsHWXS2GSobdqyo\"\n+        \"bcrt1q5l6rmlw2et02krnfgl9uuxp8q30dktcjvuzsw7gyk2ykkkm2td0prkw9de\"\n     ],\n     [\n-        \"1G9u6oCVCPh2o8m3t55ACiYvG1y5BHewUkDSdiQarDcYXXhFHYdzMdYfUAhfxn5vNZBwpgUNpso\"\n+        \"bc1q5ezcdrt4qqmkcqz8n50hgww88gqzfx4m6\"\n     ],\n     [\n-        \"31QQ7ZMLkScDiB4VyZjuptr7AEc9j1SjstF7pRoLhHTGkW4Q2y9XELobQmhhWxeRvqcukGd1XCq\"\n+        \"tb1q5gcna4un84qevljj3wk6rvm97f8f00gwtcu7v258cvn880wkf7gqesasqn\"\n     ],\n     [\n-        \"DHqKSnpxa8ZdQyH8keAhvLTrfkyBMQxqngcQA5N8LQ9KVt25kmGN\"\n+        \"bcrt1qtevjqsc85md7pa0CQEnpvdx977juj30usufphy\"\n     ],\n     [\n-        \"2LUHcJPbwLCy9GLH1qXmfmAwvadWw4bp4PCpDfduLqV17s6iDcy1imUwhQJhAoNoN1XNmweiJP4i\"\n+        \"bc1qret0yy8cmhsh6vw87lxtzt7w0sk4026l5qrvy7\"\n     ],\n     [\n-        \"7USRzBXAnmck8fX9HmW7RAb4qt92VFX6soCnts9s74wxm4gguVhtG5of8fZGbNPJA83irHVY6bCos\"\n+        \"tb1qnw0xfgkucr4ysapsj8gd0u40fpj05n8cn24unkql8mc4ckkcp0mqc7acjd\"\n     ],\n     [\n-        \"1DGezo7BfVebZxAbNT3XGujdeHyNNBF3vnficYoTSp4PfK2QaML9bHzAMxke3wdKdHYWmsMTJVu\"\n+        \"bcrt1qu26l525vmxfv59gxm2r0c8alnkpzmat2mga2qw\"\n     ],\n     [\n-        \"2D12DqDZKwCxxkzs1ZATJWvgJGhQ4cFi3WrizQ5zLAyhN5HxuAJ1yMYaJp8GuYsTLLxTAz6otCfb\"\n+        \"bc1prjkeqgknynar5tj6v76yn3u27rep8jf366kmhglq898yn3aczk9ss73nrl\"\n     ],\n     [\n-        \"8AFJzuTujXjw1Z6M3fWhQ1ujDW7zsV4ePeVjVo7D1egERqSW9nZ\"\n+        \"tb1zq0vsl9pta9uwh2txtrmxyedjtqcfkqt5\"\n     ],\n     [\n-        \"163Q17qLbTCue8YY3AvjpUhotuaodLm2uqMhpYirsKjVqnxJRWTEoywMVY3NbBAHuhAJ2cF9GAZ\"\n+        \"bcrt1suvw5wa9elxy3a43ctljjn8avcmqpzwz5m4tycs\"\n     ],\n     [\n-        \"2MnmgiRH4eGLyLc9eAqStzk7dFgBjFtUCtu\"\n+        \"gf7t7z22jkuKcEjc8gELEYau3NzgGFLtLNEdMpJKcVt6z7mmvEJHH37y36MNGSmriFaPAbGghdh\"\n     ],\n     [\n-        \"461QQ2sYWxU7H2PV4oBwJGNch8XVTYYbZxU\"\n+        \"mn9CPaeodb6L1CtJu1KaLtJhDbYL55Hxwe\"\n     ],\n     [\n-        \"2UCtv53VttmQYkVU4VMtXB31REvQg4ABzs41AEKZ8UcB7DAfVzdkV9JDErwGwyj5AUHLkmgZeobs\"\n+        \"cTSecEa3nqxF4mgYkGrxRKeWLpXWng6nUgL4sVeAhrNbtdf1z8hz1VFesD492QWZ4JprpRW1Drr\"\n     ],\n     [\n-        \"cSNjAsnhgtiFMi6MtfvgscMB2Cbhn2v1FUYfviJ1CdjfidvmeW6mn\"\n+        \"4UjQEEvAT4Y9a3mtLFjzhcVBBKz8NiqAMfGhMwaSKgMqatpGT3qWzKY2f9HedshfSaAa439Vn3yNc\"\n     ],\n     [\n-        \"gmsow2Y6EWAFDFE1CE4Hd3Tpu2BvfmBfG1SXsuRARbnt1WjkZnFh1qGTiptWWbjsq2Q6qvpgJVj\"\n+        \"5ip19k2UhwhpHMK8ym6ZGnLA8J9JvHzv418AwohCMf3WrCfwLhG\"\n     ],\n     [\n-        \"nksUKSkzS76v8EsSgozXGMoQFiCoCHzCVajFKAXqzK5on9ZJYVHMD5CKwgmX3S3c7M1U3xabUny\"\n+        \"tc1qe7avhvpmn9le76kxlcvwl69ldm0n66gefjetyn\"\n     ],\n     [\n-        \"L3favK1UzFGgdzYBF2oBT5tbayCo4vtVBLJhg2iYuMeePxWG8SQc\"\n+        \"bt1pz4l3ja200jyyhtaxvz4ffm3t33ares72745gwjspttzdllvmte5qs0kd5q\"\n     ],\n     [\n-        \"7VxLxGGtYT6N99GdEfi6xz56xdQ8nP2dG1CavuXx7Rf2PrvNMTBNevjkfgs9JmkcGm6EXpj8ipyPZ\"\n+        \"tb13wthrv4wkvpxl57d0plyfqjxvzu9qmdzg7eldaeut2hmcpp02mw2q3ep6tw\"\n     ],\n     [\n-        \"2mbZwFXF6cxShaCo2czTRB62WTx9LxhTtpP\"\n+        \"bcrt1rqg9chz23\"\n     ],\n     [\n-        \"dB7cwYdcPSgiyAwKWL3JwCVwSk6epU2txw\"\n+        \"BC102A2J0QF2MX8926EQ3WZGDC45PXL4QN267673J7P7JMJ6VD0RDTAWVQ2ZFNP4JJAW85JXP080\"\n     ],\n     [\n-        \"HPhFUhUAh8ZQQisH8QQWafAxtQYju3SFTX\"\n+        \"tb1qx0shsrwmrl57djkm0yyqdyp02cmpjmlw\"\n     ],\n     [\n-        \"4ctAH6AkHzq5ioiM1m9T3E2hiYEev5mTsB\"\n+        \"bcrt17capp7\"\n     ],\n     [\n-        \"Hn1uFi4dNexWrqARpjMqgT6cX1UsNPuV3cHdGg9ExyXw8HTKadbktRDtdeVmY3M1BxJStiL4vjJ\"\n+        \"bc1qvgrlqspye3z2ufaekn7qygm7guqjx982l\"\n     ],\n     [\n-        \"Sq3fDbvutABmnAHHExJDgPLQn44KnNC7UsXuT7KZecpaYDMU9Txs\"\n+        \"tb1qk8lfs3l8df9gkw69240g0ckg4ywmw9qvmcm0pltxt8udk9szrhxqkhd5n2\"\n     ],\n     [\n-        \"6TqWyrqdgUEYDQU1aChMuFMMEimHX44qHFzCUgGfqxGgZNMUVWJ\"\n+        \"bcrt1qKW6Cxkky8a7gyvmkw9p3v5l2gx8zgyjtjv7dl7\"\n     ],\n     [\n-        \"giqJo7oWqFxNKWyrgcBxAVHXnjJ1t6cGoEffce5Y1y7u649Noj5wJ4mmiUAKEVVrYAGg2KPB3Y4\"\n+        \"bc1a8xfp7\"\n     ],\n     [\n-        \"cNzHY5e8vcmM3QVJUcjCyiKMYfeYvyueq5qCMV3kqcySoLyGLYUK\"\n+        \"tb1dclvmr\"\n     ],\n     [\n-        \"37uTe568EYc9WLoHEd9jXEvUiWbq5LFLscNyqvAzLU5vBArUJA6eydkLmnMwJDjkL5kXc2VK7ig\"\n+        \"bcrt1q26vevm7x046n9h3jg6zsgyd3228ra25ck7jah2\"\n     ],\n     [\n-        \"EsYbG4tWWWY45G31nox838qNdzksbPySWc\"\n+        \"BC1PCCNQDKKS5ZQ0AC69MQYQXU8ADGSGE53UY3AXXHJYFDG77Y0WX9AQHEHRL7\"\n     ],\n     [\n-        \"nbuzhfwMoNzA3PaFnyLcRxE9bTJPDkjZ6Rf6Y6o2ckXZfzZzXBT\"\n+        \"tb1zys2pfhe9fslxat85y7uc5e78uq7449ct\"\n     ],\n     [\n-        \"cQN9PoxZeCWK1x56xnz6QYAsvR11XAce3Ehp3gMUdfSQ53Y2mPzx\"\n+        \"bcrt1slnwcpwf88ffa708xpfkm6a5wsaq9me7y0fmvg3\"\n     ],\n     [\n-        \"1Gm3N3rkef6iMbx4voBzaxtXcmmiMTqZPhcuAepRzYUJQW4qRpEnHvMojzof42hjFRf8PE2jPde\"\n+        \"dhBi3wYUjrVsW1pA4XhLjdavSQYSnsECskAoZ1dqLnV8hCSxuo9EZ9tf4cCoxn7fnKgCoJK3mcE\"\n     ],\n     [\n-        \"2TAq2tuN6x6m233bpT7yqdYQPELdTDJn1eU\"\n+        \"2UFHPygbpDdbzmQx688QnMqSunZi97Yn5T7DVBdKyTD7sCfGi5fi8r2ct92FNUZPMm1xswo8Ve8c\"\n     ],\n     [\n-        \"ntEtnnGhqPii4joABvBtSEJG6BxjT2tUZqE8PcVYgk3RHpgxgHDCQxNbLJf7ardf1dDk2oCQ7Cf\"\n+        \"2yAaXFzjninFv5dn3JnWQ5y9nYkK5ZCMAkDWr4Y9WUiCGa3UiYfs\"\n     ],\n     [\n-        \"Ky1YjoZNgQ196HJV3HpdkecfhRBmRZdMJk89Hi5KGfpfPwS2bUbfd\"\n+        \"tc1qmfcz6l7gfwwt0tucqgtmhwlkgtd47a3urnjpt4\"\n     ],\n     [\n-        \"2A1q1YsMZowabbvta7kTy2Fd6qN4r5ZCeG3qLpvZBMzCixMUdkN2Y4dHB1wPsZAeVXUGD83MfRED\"\n-    ],\n-    [\n-        \"tc1qw508d6qejxtdg4y5r3zarvary0c5xw7kg3g4ty\"\n-    ],\n-    [\n-        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t5\"\n-    ],\n-    [\n-        \"BC13W508D6QEJXTDG4Y5R3ZARVARY0C5XW7KN40WF2\"\n-    ],\n-    [\n-        \"bc1rw5uspcuh\"\n-    ],\n-    [\n-        \"bc10w508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7kw5rljs90\"\n-    ],\n-    [\n-        \"BC1QR508D6QEJXTDG4Y5R3ZARVARYV98GJ9P\"\n-    ],\n-    [\n-        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sL5k7\"\n-    ],\n-    [\n-        \"bc1zw508d6qejxtdg4y5r3zarvaryvqyzf3du\"\n-    ],\n-    [\n-        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3pjxtptv\"\n-    ],\n-    [\n-        \"bc1gmk9yu\"\n+        \"bt1flep4g\"\n     ]\n ]"
      },
      {
        "sha": "eea78aab20ec77221ce38d8a5e91b5ba7c8f3416",
        "filename": "src/test/data/key_io_valid.json",
        "status": "modified",
        "additions": 200,
        "deletions": 295,
        "changes": 495,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/src/test/data/key_io_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/src/test/data/key_io_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_valid.json?ref=1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "patch": "@@ -1,533 +1,438 @@\n [\n     [\n-        \"1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i\",\n-        \"76a91465a16059864a2fdbc7c99a4723a8395bc6f188eb88ac\",\n+        \"1LsN3xZdsNiSMiVc45AGBdhtkQZG53tKpx\",\n+        \"76a914d9f0c2ae3652e96389b4481a510f0b2b96da1d0888ac\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n-        }\n-    ],\n-    [\n-        \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\",\n-        \"a91474f209f6ea907e2ea48f74fae05782ae8a66525787\",\n-        {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n-        }\n-    ],\n-    [\n-        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n-        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n-        {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\",\n-        \"76a91453c0307d6851aa0ce7825ba883c6bd9ad242b48688ac\",\n+        \"3MJLKTjYK8U2LSE5G8qH66P6cTkd2fbYKo\",\n+        \"a914d7184dd5b2ac5ffa6b808271b51d39610ca2952187\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"regtest\"\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\",\n-        \"a9146349a418fc4578d10a372b54b45c280cc8c4382f87\",\n+        \"mvAUuoN11iBG6xx7AiX3ifUV9WpDfmPa8u\",\n+        \"76a914a0aab571f298b042bc9bce37d8a45f9d37e9c5ef88ac\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr\",\n-        \"eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19\",\n+        \"2MsFPtk8t5LQw7nBpFmsCjf8r9e5vfMMdPX\",\n+        \"a914000844921919a97eca8adb5b63c02ecf7dc212eb87\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD\",\n-        \"55c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c4\",\n+        \"mjC3aAxQcm6QeeJJ81pnpX61xMMgUXuJUG\",\n+        \"76a914284d017134105d53e712d7801def91cfe6b3b26088ac\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n-        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n+        \"2N7sKNwAst83ARAqh1z5Ahrt1UieLQZARvc\",\n+        \"a914a0653c424a38b1c7d43ccafb83c90e96da58149c87\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\",\n-        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\",\n+        \"5J8KazNMuftbk6azCPQb5YhuiQJddSUmJcyYMbSwo8wiUFNcNQJ\",\n+        \"28f3200da1464c7a9d7456f03980471142a63bcf2bd65f87096694a10c20c6ee\",\n         {\n+            \"chain\": \"main\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"regtest\"\n-        }\n-    ],\n-    [\n-        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n-        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n-        {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\",\n-        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\",\n+        \"L44JDntsb8mGGLLJXwoEtbYbH1Sf5PZTigvVcA18184sexkwG65w\",\n+        \"cc04f03e141b18f3debe86edf6daaa2f1b84169515774c5489db97b5a2d09153\",\n         {\n+            \"chain\": \"main\",\n             \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"regtest\"\n-        }\n-    ],\n-    [\n-        \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\",\n-        \"76a9146d23156cbbdcc82a5a47eee4c2c7c583c18b6bf488ac\",\n-        {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n-        }\n-    ],\n-    [\n-        \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\",\n-        \"a914fcc5460dd6e2487c7d75b1963625da0e8f4c597587\",\n-        {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n-        }\n-    ],\n-    [\n-        \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\",\n-        \"76a914f1d470f9b02370fdec2e6b708b08ac431bf7a5f788ac\",\n-        {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\",\n-        \"a914c579342c2c4c9220205e2cdc285617040c924a0a87\",\n-        {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n-        }\n-    ],\n-    [\n-        \"5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc\",\n-        \"a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e\",\n+        \"93A1NRTKmTeKHinsqaPDLqMnsrhZtdgNJJ4SxEB6n7mGtfxk4Bo\",\n+        \"ced49a2c0d95a062b2da31cc3e04dbad74cf4f93a928c77fd32e8fcca0552926\",\n         {\n+            \"chain\": \"test\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi\",\n-        \"7d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb4\",\n+        \"cQmrxBnJjdhJFJo98LnNysqDaxUKWBQANYsArzrxsRZhKtaCAqkr\",\n+        \"5f40e71ffb52d0c31786fb6018db39e964c7d5a6b946590461fd7b28e1c4571e\",\n         {\n+            \"chain\": \"test\",\n             \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj\",\n-        \"d6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203\",\n+        \"92kU7nc1yidzKyJdJGDNhNHvjD26KGB2JtTdKK7XyEvm7hWnb1m\",\n+        \"9961f71b7f22fe502330464805548ac3f5391ff013b91d56608ca0d18e5d9e75\",\n         {\n+            \"chain\": \"regtest\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN\",\n-        \"a81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d9\",\n+        \"cSdQEjZBzGGsZT5td11rRJqcbQ3fvz8pVrM6rkKUuJLSUFwPEWTe\",\n+        \"96936c11e60fc08e0fb288776368ad7d754eee11753c39bad4211a5b671c875d\",\n         {\n+            \"chain\": \"regtest\",\n             \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\",\n-        \"76a9147987ccaa53d02c8873487ef919677cd3db7a691288ac\",\n+        \"bc1qqsjhe0x35lnvcxhf0de0djyqj8gfxwc90g7w8u\",\n+        \"001404257cbcd1a7e6cc1ae97b72f6c88091d0933b05\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\",\n-        \"a91463bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb87\",\n+        \"bc1qxdyx9mr8hp39mnjdamv5f4m9908nm98zv0tt34pzd0xhrkgnelcqjh32xa\",\n+        \"0020334862ec67b8625dce4deed944d7652bcf3d94e263d6b8d4226bcd71d913cff0\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\",\n-        \"76a914ef66444b5b17f14e8fae6e7e19b045a78c54fd7988ac\",\n+        \"bc1p2g8z7e58vl5epg9x7en4m5e9x67ekastycnlucc2z2n3ucvmppxqnjtw5m\",\n+        \"5120520e2f668767e990a0a6f6675dd32536bd9b760b2627fe630a12a71e619b084c\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\",\n-        \"a914c3e55fceceaa4391ed2a9677f4a4d34eacd021a087\",\n+        \"bc1zyczqag2mv2\",\n+        \"52022604\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n-        }\n-    ],\n-    [\n-        \"5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9\",\n-        \"e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252\",\n-        {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT\",\n-        \"8248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c\",\n+        \"tb1qx3wv854zd2emkzfc83j2t2adzftkdq4kc0t05d\",\n+        \"0014345cc3d2a26ab3bb09383c64a5abad12576682b6\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo\",\n-        \"44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52\",\n+        \"tb1qgjr9pkgglh8sw4ksg406xfyl7n2rz5awa5uddeqgn4y96w9khf9s2awvsc\",\n+        \"0020448650d908fdcf0756d0455fa3249ff4d43153aeed38d6e4089d485d38b6ba4b\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7\",\n-        \"d1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c69\",\n+        \"tb1pqhdwj0m7xg6c95vn07qwce4hy5nmhmqvhayx5w8zvf2hye27vruswrc2t7\",\n+        \"512005dae93f7e323582d1937f80ec66b72527bbec0cbf486a38e2625572655e60f9\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\",\n-        \"76a914adc1cc2081a27206fae25792f28bbc55b831549d88ac\",\n+        \"tb1rjfpgh7cnpkqfrq76ekkgucwdqgklltya\",\n+        \"531092428bfb130d809183dacdac8e61cd02\",\n         {\n+            \"chain\": \"test\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\",\n-        \"a914188f91a931947eddd7432d6e614387e32b24470987\",\n+        \"bcrt1qq6dlzfmth08txpj06gm0jj5qaw7j8jj8qlkwdu\",\n+        \"0014069bf1276bbbceb3064fd236f94a80ebbd23ca47\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\",\n-        \"76a9141694f5bc1a7295b600f40018a618a6ea48eeb49888ac\",\n+        \"bcrt1q3708vp22qn6ezk47lx2g0ck3tvrm7s0dj7naajlxwegm4289gjlqcwwf29\",\n+        \"00208f9e76054a04f5915abef99487e2d15b07bf41ed97a7decbe67651baa8e544be\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\",\n-        \"a9143b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f387\",\n+        \"bcrt1pdt8nx0wk2xmv0fv0tg9l4ps87nes44dwz8s7yd0xppnxv22k2lcsssg874\",\n+        \"51206acf333dd651b6c7a58f5a0bfa8607f4f30ad5ae11e1e235e6086666295657f1\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR\",\n-        \"091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0\",\n+        \"bcrt1sxs49j3ctsrqpvju8wtszynehlcmgx82hmhs6kckvkyzw24d3r6j29kf3gjmmpmxwx00n7m\",\n+        \"6028342a59470b80c0164b8772e0224f37fe36831d57dde1ab62ccb104e555b11ea4a2d93144b7b0ecce\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false,\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8\",\n-        \"ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af\",\n+        \"1HYHMSsBJnA3tkACp8Yet1DEfbc63u4ku4\",\n+        \"76a914b56c8ec8a6297b2804113ddabd34fb95c574fca788ac\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n-        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n+        \"3BiJtoZKF93YdYARkHxDdCYbRzwWuN9Dwa\",\n+        \"a9146defd6f293368f683654fefac42f0fe20add132f87\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\",\n-        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\",\n+        \"n2FK7HfSTMg8M5A4haEhSr92xUmRFsi5PS\",\n+        \"76a914e3655c6d2ae661c1a2e3a84a8ebb3663d2a5478d88ac\",\n         {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"regtest\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA\",\n-        \"e7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef\",\n+        \"2NFiGy8rTrrNKtb7NHoWDpuPtJitNAg2KYr\",\n+        \"a914f6707c684df7be7e37402fb86578b7d31bcff88387\",\n         {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"chain\": \"test\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\",\n-        \"76a914c4c1b72491ede1eedaca00618407ee0b772cad0d88ac\",\n+        \"mqvNPprrNJxRnN7aopLgcgzfuZFa9pZRNw\",\n+        \"76a914721ef1357a0e3a55920e1cbbafabaa1f675befda88ac\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\",\n-        \"a914f6fe69bcb548a829cce4c57bf6fff8af3a5981f987\",\n+        \"2N1hdjsHKpLrbXFh1uFLoP8LF9ykukL8mfz\",\n+        \"a9145cbfa5e24b2a9c85202c1a49d949cd202c9d24b087\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"chain\": \"regtest\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\",\n-        \"76a914261f83568a098a8638844bd7aeca039d5f2352c088ac\",\n+        \"5JEgGYoTJ9dwkvhM1RBtTYHFCLKHYSsetvuusjT8jBRgxkLHbVw\",\n+        \"376213ede0cff4e5a9a99dc62621849edd12e84e32e50b4c2fd872b2a90a539b\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"main\",\n+            \"isCompressed\": false,\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\",\n-        \"a914e930e1834a4d234702773951d627cce82fbb5d2e87\",\n+        \"L4eTMSFgakGfGEv88oZfZTHPicfSpSRLmqkd5xUwM5mRvGdUNWcG\",\n+        \"dd97572e04e485cb3459c25bd5673159e37a5dfce8f6683c03886cf52c766df0\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"chain\": \"main\",\n+            \"isCompressed\": true,\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg\",\n-        \"d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0\",\n+        \"92Vw1zxCpQeadmn9oo3DcaAzYYATC8E4dxYWcLEpJvmLDGCTpV6\",\n+        \"78605efe8bc054d0ee79eed107446856c3c359add661a5f450e9a34dcfd9c7a0\",\n         {\n+            \"chain\": \"test\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi\",\n-        \"b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b3\",\n+        \"cNUakHTv7yJopxUZQ3cM5RC4VfMFkUdCAyQ9jtefhomhpyqpjKiL\",\n+        \"1ab086b845c8776e6f86468b2d7cf782a5b81096274a10b5a21dbf2fbbb20cc6\",\n         {\n+            \"chain\": \"test\",\n             \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys\",\n-        \"037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb\",\n+        \"92KS5stuYsoRe4PsxD6DTQsL3HL8oicdVwgwKvJTBeLe9JbFsAV\",\n+        \"60899bbfa276d9263c47b92d0f3508acb42810ce00f44de1e8cb0abd628aae13\",\n         {\n+            \"chain\": \"regtest\",\n             \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw\",\n-        \"6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de\",\n+        \"cTz7XPo8zzoemHZVoATACAE9L9jzrdJ8Fkkg7a2ZQ52p9gqAASCL\",\n+        \"bf11771d24fd18daa0a4d9b379cecb9cc7c82177e66f233515351cc05b207007\",\n         {\n+            \"chain\": \"regtest\",\n             \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"isPrivkey\": true\n         }\n     ],\n     [\n-        \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\",\n-        \"76a9145eadaf9bb7121f0f192561a5a62f5e5f5421029288ac\",\n+        \"bc1q6xw4mq83zgpzyedqtpgh65u7psaarrz768pwsc\",\n+        \"0014d19d5d80f112022265a058517d539e0c3bd18c5e\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\",\n-        \"a9143f210e7277c899c3a155cc1c90f4106cbddeec6e87\",\n+        \"bc1quncjnjmmk4tyxdypl80wqv90lc7qfksp3mcv8lr5zyg9e9y7pv8s09h58f\",\n+        \"0020e4f129cb7bb556433481f9dee030affe3c04da018ef0c3fc7411105c949e0b0f\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\",\n-        \"76a914c8a3c2a09a298592c3e180f02487cd91ba3400b588ac\",\n+        \"bc1prf34k6kzuf7vugngsz36guj5ykknjt3l36ch5ykdgemuaflfzvhs45h9c3\",\n+        \"51201a635b6ac2e27cce226880a3a4725425ad392e3f8eb17a12cd4677cea7e9132f\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\",\n-        \"a91499b31df7c9068d1481b596578ddbb4d3bd90baeb87\",\n+        \"bc1zaxgqtcvx3y\",\n+        \"5202e990\",\n         {\n+            \"chain\": \"main\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\"\n-        }\n-    ],\n-    [\n-        \"5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4\",\n-        \"c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae\",\n-        {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n-        }\n-    ],\n-    [\n-        \"KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2\",\n-        \"07f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd\",\n-        {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"main\"\n-        }\n-    ],\n-    [\n-        \"93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV\",\n-        \"ea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801\",\n-        {\n-            \"isCompressed\": false,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n-        }\n-    ],\n-    [\n-        \"cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h\",\n-        \"0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c\",\n-        {\n-            \"isCompressed\": true,\n-            \"isPrivkey\": true,\n-            \"chain\": \"test\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\",\n-        \"76a9141ed467017f043e91ed4c44b4e8dd674db211c4e688ac\",\n+        \"tb1q0xeygzklzdcke5fpae8dj4gp7favyg285gy3ez\",\n+        \"001479b2440adf13716cd121ee4ed95501f27ac22147\",\n         {\n+            \"chain\": \"test\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\",\n-        \"a9145ece0cadddc415b1980f001785947120acdb36fc87\",\n+        \"tb1qmrryvv8jl4cdkce3s856whutzrkfcd2lytv3rqwxkj23ktf9fzzqcylgum\",\n+        \"0020d8c64630f2fd70db633181e9a75f8b10ec9c355f22d91181c6b4951b2d254884\",\n         {\n+            \"chain\": \"test\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\"\n+            \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n-        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        \"tb1pv5235wgguf7fu8ajjs0vfpzhgwvwdvxsu88mjrr82cp9esy6467sgt7uws\",\n+        \"512065151a3908e27c9e1fb2941ec484574398e6b0d0e1cfb90c6756025cc09aaebd\",\n         {\n+            \"chain\": \"test\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7kygt080\",\n-        \"0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        \"tb1rzhkfz2she865pjqz2dqa3kv0lvfftkeu\",\n+        \"531015ec912a17c9f540c8025341d8d98ffb\",\n         {\n+            \"chain\": \"test\",\n             \"isPrivkey\": false,\n-            \"chain\": \"regtest\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\",\n-        \"00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+        \"bcrt1qp09acyw3823sggs8uyq6yv2vpxe4lq8scuxmef\",\n+        \"00140bcbdc11d13aa3042207e101a2314c09b35f80f0\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"test\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx\",\n-        \"5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6\",\n+        \"bcrt1qlnpqh99rp80qn6jkgc0zs7acyc50erwp8eefr3zzkrj7ps739fzqzla273\",\n+        \"0020fcc20b94a309de09ea56461e287bb82628fc8dc13e7291c442b0e5e0c3d12a44\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bc1sw50qa3jx3s\",\n-        \"6002751e\",\n+        \"bcrt1p3zd30ugrjyl587qqyu48vqclt3yawauzw6pwt3cpkskvczrytywsjpyxnq\",\n+        \"5120889b17f103913f43f800272a76031f5c49d777827682e5c701b42ccc0864591d\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"bc1zw508d6qejxtdg4y5r3zarvaryvg6kdaj\",\n-        \"5210751e76e8199196d454941c45d1b3a323\",\n+        \"bcrt1stgtmagdaa9dqf0rtsxszgcd232g62t43dvkqmmmpf7deqllv576373vc5k9fps08hq3hek\",\n+        \"60285a17bea1bde95a04bc6b81a02461aa8a91a52eb16b2c0def614f9b907feca7b51f4598a58a90c1e7\",\n         {\n+            \"chain\": \"regtest\",\n             \"isPrivkey\": false,\n-            \"chain\": \"main\",\n             \"tryCaseFlip\": true\n         }\n     ],\n     [\n-        \"tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy\",\n-        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        \"1Au8D5w97THBxXDyjCn5o8UcUWHFgZeoWv\",\n+        \"76a9146c94c780911ea77c43eee9dc7ce4cd5eeab1e2fa88ac\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"test\",\n-            \"tryCaseFlip\": true\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ],\n     [\n-        \"bcrt1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvseswlauz7\",\n-        \"0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433\",\n+        \"3R2FhhgAE4fM6npLMavoBeedrnDJCN4Ho6\",\n+        \"a914ffee4c4faa197a760f901d25880c56f9d635fc8987\",\n         {\n-            \"isPrivkey\": false,\n-            \"chain\": \"regtest\",\n-            \"tryCaseFlip\": true\n+            \"chain\": \"main\",\n+            \"isPrivkey\": false\n         }\n     ]\n ]"
      },
      {
        "sha": "817534a77a8ab5add2c7cfb6d4b2021749988f6f",
        "filename": "test/functional/test_framework/segwit_addr.py",
        "status": "modified",
        "additions": 35,
        "deletions": 18,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/test/functional/test_framework/segwit_addr.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/test/functional/test_framework/segwit_addr.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/segwit_addr.py?ref=1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "patch": "@@ -2,10 +2,17 @@\n # Copyright (c) 2017 Pieter Wuille\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Reference implementation for Bech32 and segwit addresses.\"\"\"\n-\n+\"\"\"Reference implementation for Bech32/Bech32m and segwit addresses.\"\"\"\n+from enum import Enum\n \n CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n+BECH32_CONST = 1\n+BECH32M_CONST = 0x2bc830a3\n+\n+class Encoding(Enum):\n+    \"\"\"Enumeration type to list the various supported encodings.\"\"\"\n+    BECH32 = 1\n+    BECH32M = 2\n \n \n def bech32_polymod(values):\n@@ -27,38 +34,45 @@ def bech32_hrp_expand(hrp):\n \n def bech32_verify_checksum(hrp, data):\n     \"\"\"Verify a checksum given HRP and converted data characters.\"\"\"\n-    return bech32_polymod(bech32_hrp_expand(hrp) + data) == 1\n-\n+    check = bech32_polymod(bech32_hrp_expand(hrp) + data)\n+    if check == BECH32_CONST:\n+        return Encoding.BECH32\n+    elif check == BECH32M_CONST:\n+        return Encoding.BECH32M\n+    else:\n+        return None\n \n-def bech32_create_checksum(hrp, data):\n+def bech32_create_checksum(encoding, hrp, data):\n     \"\"\"Compute the checksum values given HRP and data.\"\"\"\n     values = bech32_hrp_expand(hrp) + data\n-    polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n+    const = BECH32M_CONST if encoding == Encoding.BECH32M else BECH32_CONST\n+    polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ const\n     return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n \n \n-def bech32_encode(hrp, data):\n-    \"\"\"Compute a Bech32 string given HRP and data values.\"\"\"\n-    combined = data + bech32_create_checksum(hrp, data)\n+def bech32_encode(encoding, hrp, data):\n+    \"\"\"Compute a Bech32 or Bech32m string given HRP and data values.\"\"\"\n+    combined = data + bech32_create_checksum(encoding, hrp, data)\n     return hrp + '1' + ''.join([CHARSET[d] for d in combined])\n \n \n def bech32_decode(bech):\n-    \"\"\"Validate a Bech32 string, and determine HRP and data.\"\"\"\n+    \"\"\"Validate a Bech32/Bech32m string, and determine HRP and data.\"\"\"\n     if ((any(ord(x) < 33 or ord(x) > 126 for x in bech)) or\n             (bech.lower() != bech and bech.upper() != bech)):\n-        return (None, None)\n+        return (None, None, None)\n     bech = bech.lower()\n     pos = bech.rfind('1')\n     if pos < 1 or pos + 7 > len(bech) or len(bech) > 90:\n-        return (None, None)\n+        return (None, None, None)\n     if not all(x in CHARSET for x in bech[pos+1:]):\n-        return (None, None)\n+        return (None, None, None)\n     hrp = bech[:pos]\n     data = [CHARSET.find(x) for x in bech[pos+1:]]\n-    if not bech32_verify_checksum(hrp, data):\n-        return (None, None)\n-    return (hrp, data[:-6])\n+    encoding = bech32_verify_checksum(hrp, data)\n+    if encoding is None:\n+        return (None, None, None)\n+    return (encoding, hrp, data[:-6])\n \n \n def convertbits(data, frombits, tobits, pad=True):\n@@ -86,7 +100,7 @@ def convertbits(data, frombits, tobits, pad=True):\n \n def decode(hrp, addr):\n     \"\"\"Decode a segwit address.\"\"\"\n-    hrpgot, data = bech32_decode(addr)\n+    encoding, hrpgot, data = bech32_decode(addr)\n     if hrpgot != hrp:\n         return (None, None)\n     decoded = convertbits(data[1:], 5, 8, False)\n@@ -96,12 +110,15 @@ def decode(hrp, addr):\n         return (None, None)\n     if data[0] == 0 and len(decoded) != 20 and len(decoded) != 32:\n         return (None, None)\n+    if (data[0] == 0 and encoding != Encoding.BECH32) or (data[0] != 0 and encoding != Encoding.BECH32M):\n+        return (None, None)\n     return (data[0], decoded)\n \n \n def encode(hrp, witver, witprog):\n     \"\"\"Encode a segwit address.\"\"\"\n-    ret = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n+    encoding = Encoding.BECH32 if witver == 0 else Encoding.BECH32M\n+    ret = bech32_encode(encoding, hrp, [witver] + convertbits(witprog, 8, 5))\n     if decode(hrp, ret) == (None, None):\n         return None\n     return ret"
      },
      {
        "sha": "05ec754bccfbbdf6b4f7c9ffbce0d61c9ef1fe6a",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "patch": "@@ -133,6 +133,7 @@ def run_test(self):\n         # in the label. This is a no-op.\n         change_label(node, labels[2].addresses[0], labels[2], labels[2])\n \n+\n class Label:\n     def __init__(self, name):\n         # Label name"
      }
    ]
  },
  {
    "sha": "c6709867d3614809c17d38bab5ac6772460c0599",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjcwOTg2N2QzNjE0ODA5YzE3ZDM4YmFiNWFjNjc3MjQ2MGMwNTk5",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-03-17T23:43:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-27T19:08:33Z"
      },
      "message": "naming nits\n\nGithub-Pull: #20861\nRebased-From: 03346022d611871f2cc185440b19d928b9264d9d",
      "tree": {
        "sha": "93fe58939088d02cfe6182a57da4a49e7bec6bc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93fe58939088d02cfe6182a57da4a49e7bec6bc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6709867d3614809c17d38bab5ac6772460c0599",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6709867d3614809c17d38bab5ac6772460c0599",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6709867d3614809c17d38bab5ac6772460c0599",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6709867d3614809c17d38bab5ac6772460c0599/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a4e88e0e885cfcb91196840a958e7c9fa09c3b5"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "288b14e02389d870cd9c34544dca45750a83561b",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6709867d3614809c17d38bab5ac6772460c0599/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6709867d3614809c17d38bab5ac6772460c0599/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=c6709867d3614809c17d38bab5ac6772460c0599",
        "patch": "@@ -15,10 +15,10 @@ namespace\n \n typedef std::vector<uint8_t> data;\n \n-/** The Bech32 character set for encoding. */\n+/** The Bech32 and Bech32m character set for encoding. */\n const char* CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n \n-/** The Bech32 character set for decoding. */\n+/** The Bech32 and Bech32m character set for decoding. */\n const int8_t CHARSET_REV[128] = {\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n@@ -150,8 +150,8 @@ data CreateChecksum(Encoding encoding, const std::string& hrp, const data& value\n \n /** Encode a Bech32 or Bech32m string. */\n std::string Encode(Encoding encoding, const std::string& hrp, const data& values) {\n-    // First ensure that the HRP is all lowercase. BIP-173 requires an encoder\n-    // to return a lowercase Bech32 string, but if given an uppercase HRP, the\n+    // First ensure that the HRP is all lowercase. BIP-173 and BIP350 require an encoder\n+    // to return a lowercase Bech32/Bech32m string, but if given an uppercase HRP, the\n     // result will always be invalid.\n     for (const char& c : hrp) assert(c < 'A' || c > 'Z');\n     data checksum = CreateChecksum(encoding, hrp, values);"
      },
      {
        "sha": "e9450ccc2b35dc3650905a50418756a3a08af58e",
        "filename": "src/bech32.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6709867d3614809c17d38bab5ac6772460c0599/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6709867d3614809c17d38bab5ac6772460c0599/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=c6709867d3614809c17d38bab5ac6772460c0599",
        "patch": "@@ -2,10 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-// Bech32 is a string encoding format used in newer address types.\n-// The output consists of a human-readable part (alphanumeric), a\n-// separator character (1), and a base32 data section, the last\n-// 6 characters of which are a checksum.\n+// Bech32 and Bech32m are string encoding formats used in newer\n+// address types. The outputs consist of a human-readable part\n+// (alphanumeric), a separator character (1), and a base32 data\n+// section, the last 6 characters of which are a checksum. The\n+// module is namespaced under bech32 for historical reasons.\n //\n // For more information, see BIP 173 and BIP 350.\n \n@@ -40,7 +41,7 @@ struct DecodeResult\n     DecodeResult(Encoding enc, std::string&& h, std::vector<uint8_t>&& d) : encoding(enc), hrp(std::move(h)), data(std::move(d)) {}\n };\n \n-/** Decode a Bech32 string. */\n+/** Decode a Bech32 or Bech32m string. */\n DecodeResult Decode(const std::string& str);\n \n } // namespace bech32"
      }
    ]
  },
  {
    "sha": "c0f85fd8503a6e6f66cb8659bd88deec92b96eec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGY4NWZkODUwM2E2ZTZmNjZjYjg2NTliZDg4ZGVlYzkyYjk2ZWVj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-24T08:41:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-03-27T19:08:33Z"
      },
      "message": "Backport invalid address tests\n\nReduced version of the test from master/#20861 by John Newbery.\n\nGithub-Pull: #20861\nRebased-From: fe5e495c31de47b0ec732b943db11fe345d874af",
      "tree": {
        "sha": "b12df9758b716ba173951463684475ca27b87f04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b12df9758b716ba173951463684475ca27b87f04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0f85fd8503a6e6f66cb8659bd88deec92b96eec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f85fd8503a6e6f66cb8659bd88deec92b96eec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f85fd8503a6e6f66cb8659bd88deec92b96eec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f85fd8503a6e6f66cb8659bd88deec92b96eec/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6709867d3614809c17d38bab5ac6772460c0599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6709867d3614809c17d38bab5ac6772460c0599",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6709867d3614809c17d38bab5ac6772460c0599"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 85,
      "deletions": 0
    },
    "files": [
      {
        "sha": "814f50c9e60724708715457d76f64967ede1f2b1",
        "filename": "test/functional/rpc_invalid_address_message.py",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f85fd8503a6e6f66cb8659bd88deec92b96eec/test/functional/rpc_invalid_address_message.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f85fd8503a6e6f66cb8659bd88deec92b96eec/test/functional/rpc_invalid_address_message.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalid_address_message.py?ref=c0f85fd8503a6e6f66cb8659bd88deec92b96eec",
        "patch": "@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test error messages for 'getaddressinfo' and 'validateaddress' RPC commands.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from test_framework.util import assert_raises_rpc_error\n+\n+BECH32_VALID = 'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv'\n+BECH32_INVALID_BECH32 = 'bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqdmchcc'\n+BECH32_INVALID_BECH32M = 'bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7k35mrzd'\n+BECH32_INVALID_VERSION = 'bcrt130xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqynjegk'\n+BECH32_INVALID_SIZE = 'bcrt1s0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7v8n0nx0muaewav25430mtr'\n+BECH32_INVALID_V0_SIZE = 'bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7kqqq5k3my'\n+BECH32_INVALID_PREFIX = 'bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx'\n+\n+BASE58_VALID = 'mipcBbFg9gMiCh81Kj8tqqdgoZub1ZJRfn'\n+BASE58_INVALID_PREFIX = '17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem'\n+\n+INVALID_ADDRESS = 'asfah14i8fajz0123f'\n+\n+class InvalidAddressErrorMessageTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_validateaddress(self):\n+        node = self.nodes[0]\n+\n+        # Bech32\n+        info = node.validateaddress(BECH32_INVALID_SIZE)\n+        assert not info['isvalid']\n+\n+        info = node.validateaddress(BECH32_INVALID_PREFIX)\n+        assert not info['isvalid']\n+\n+        info = node.validateaddress(BECH32_INVALID_BECH32)\n+        assert not info['isvalid']\n+\n+        info = node.validateaddress(BECH32_INVALID_BECH32M)\n+        assert not info['isvalid']\n+\n+        info = node.validateaddress(BECH32_INVALID_V0_SIZE)\n+        assert not info['isvalid']\n+\n+        info = node.validateaddress(BECH32_VALID)\n+        assert info['isvalid']\n+        assert 'error' not in info\n+\n+        # Base58\n+        info = node.validateaddress(BASE58_INVALID_PREFIX)\n+        assert not info['isvalid']\n+\n+        info = node.validateaddress(BASE58_VALID)\n+        assert info['isvalid']\n+        assert 'error' not in info\n+\n+        # Invalid address format\n+        info = node.validateaddress(INVALID_ADDRESS)\n+        assert not info['isvalid']\n+\n+    def test_getaddressinfo(self):\n+        node = self.nodes[0]\n+\n+        assert_raises_rpc_error(-5, \"Invalid address\", node.getaddressinfo, BECH32_INVALID_SIZE)\n+\n+        assert_raises_rpc_error(-5, \"Invalid address\", node.getaddressinfo, BECH32_INVALID_PREFIX)\n+\n+        assert_raises_rpc_error(-5, \"Invalid address\", node.getaddressinfo, BASE58_INVALID_PREFIX)\n+\n+        assert_raises_rpc_error(-5, \"Invalid address\", node.getaddressinfo, INVALID_ADDRESS)\n+\n+    def run_test(self):\n+        self.test_validateaddress()\n+        self.test_getaddressinfo()\n+\n+\n+if __name__ == '__main__':\n+    InvalidAddressErrorMessageTest().main()"
      },
      {
        "sha": "17395c83574ed9a2e74c5f742f2d265579d450b1",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f85fd8503a6e6f66cb8659bd88deec92b96eec/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f85fd8503a6e6f66cb8659bd88deec92b96eec/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=c0f85fd8503a6e6f66cb8659bd88deec92b96eec",
        "patch": "@@ -221,6 +221,7 @@\n     'rpc_getaddressinfo_label_deprecation.py',\n     'rpc_getdescriptorinfo.py',\n     'rpc_help.py',\n+    'rpc_invalid_address_message.py',\n     'feature_help.py',\n     'feature_shutdown.py',\n     'framework_test_script.py',"
      }
    ]
  }
]