jnewbery,2018-12-20T16:21:21Z,"#14602 has required rebase for a few weeks and has several review comments unanswered.\n\nThis PR extracts the non-contentious bugfix from that PR and adds testing and commenting.",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-449053479,449053479,
DrahtBot,2018-12-20T18:30:18Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15596](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15596.html) (rpc: Ignore sendmany::minconf as dummy valu",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-449092861,449092861,
Empact,2018-12-20T22:17:52Z,"I may be off base here, but looking at `CWallet::AvailableCoins` makes me think that some other argument is needed, to separately address:\n* coins which have received at least N confirmations, relative to the current moment\n* coins which were spendable M blocks ago\n\nTo me, the `getbalance` docs do not seem to indicate that coins spent in the past N blocks will be included in the balance. I",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-449153367,449153367,
laanwj,2019-01-02T13:03:32Z,Can you have a look here @MeshCollider? If this is a non-contentious bugfix we should probably try to get this in.,https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-450858236,450858236,
meshcollider,2019-01-03T11:20:39Z,"This change looks sensible to me, but luke's comment above hasn't been addressed yet",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-451116394,451116394,
ryanofsky,2019-01-03T13:24:46Z,"Catching up on this, but IIRC, the last time this issue was discussed, http://www.erisian.com.au/bitcoin-core-dev/log-2018-11-29.html#l-479, the main problem was considered to be:\n\n> your balance suddenly showing zero when you make a small payment.. because now your change is unconfirmed\n\nwhich would be fixed by implementing:\n\n> desired behavior is that balances shows confirmed + trust",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-451141785,451141785,
jnewbery,2019-01-05T12:32:15Z,"This is the fix from https://github.com/bitcoin/bitcoin/pull/14602/commits/1ac717f8d836b16d5cb808c07f0578a309f4e9d0 , but with test cases and commenting added. From that PR:\n\n> Furthermore, CWallet::GetBalance (the trusted-only implementation) did not support setting a min_conf parameter. This was added in #13566, but only checked min_conf for UTXO creation, not UTXO spending.\n\nI don't und",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-451651856,451651856,
luke-jr,2019-01-05T13:22:10Z,"It's not supposed to give the balance at (TIP - minconf) height, though. As someone pointed out at the meeting weeks ago, my fix didn't fix it correctly.\n\nIf you receive 50 BTC (unconfirmed), then spend the 50 BTC, this should show `-50` because the receive has not confirmed, yet you still sent 50 BTC.",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-451654903,451654903,
jnewbery,2019-01-07T14:52:52Z,"> If you receive 50 BTC (unconfirmed), then spend the 50 BTC, this should show -50\n\nThis really doesn't make sense to me. How can one have a negative bitcoin balance? What happens if the unconfirmed spend is bumped? Should the balance then be -100, or should it be -50?\n\nTo me, the only logically consistent and intuitive behaviour is to show the balance at (TIP - minconf), but this is reall",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-451959800,451959800,
promag,2019-01-07T14:59:01Z,"> If you receive 50 BTC (unconfirmed), then spend the 50 BTC, this should show -50\n\nIf unconfirmed credit does't add up, then unconfirmed debit shouldn't count as well?\n",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-451961908,451961908,
sipa,2019-01-07T15:14:20Z,"Traditionally I think we've always counted balance as the sum of incoming UTXOs with sufficient confirmations, but which haven't been spent afterwards (even with lower confirmations). That means it's bounded by the balance you had minconf blocks ago, but can be less.\n\n",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-451966842,451966842,
luke-jr,2019-01-07T15:57:43Z,"From what I can tell, spends have always been counted, even when their inputs aren't.",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-451982276,451982276,
ryanofsky,2019-01-15T17:27:00Z,"It might help if the PR description gave a specific example to think about. E.g. if I received 5 BTC at depth 3 and spent 4 BTC at depth 2, would getbalance(minconf=3) would show a balance of 1 before this PR and 5 after?\n\nIf so, this would be changing the interpretation of `minconf` from ""If I only trust blocks with depth >= `minconf`, how much money can I be sure I have?"" to ""In a hypothetic",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-454478112,454478112,
jnewbery,2019-03-26T21:21:55Z,"@ryanofsky \n\n> It might help if the PR description gave a specific example to think about. E.g. if I received 5 BTC at depth 3 and spent 4 BTC at depth 2, would getbalance(minconf=3) would show a balance of 1 before this PR and 5 after?\n\nYou need to consider the UTXO model here, rather than just balances. Here's your scenario:\n\ndepth 3: receive a 5 BTC UTXO (a)\ndepth 2: spend the 5 B",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-476857724,476857724,
ryanofsky,2019-03-26T23:21:42Z,"Thanks for the explanation.\n\n> To me, a balance in Bitcoin can only make sense at a given block (ie given the UTXO set associated with this block, what is the total amount of UTXOs that I can sign for?)\n\nThis definition of a balance does make sense, but it seems not very useful, and even dangerous in the example above, where somebody might think they have 5 BTC to spend instead of 1.\n\n",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-476892387,476892387,
jnewbery,2019-03-28T19:53:59Z,"> ""If I only trust blocks with depth >= minconf, how much money can I be sure I have?""\n\nThe answer is always 0, since there may be unconfirmed spends that the wallet is not aware of. Perhaps that's a bit of a legalistic answer, but the only thing that brings us sureness in Bitcoin is confirmations. Talking about a balance outside of confirmed transactions is dangerous in my opinion.\n\n> May",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-477747159,477747159,
ryanofsky,2019-03-28T21:36:33Z,"> The answer is always 0, since there may be unconfirmed spends that the wallet is not aware of. Perhaps that's a bit of a legalistic answer, but the only thing that brings us sureness in Bitcoin is confirmations. Talking about a balance outside of confirmed transactions is dangerous in my opinion.\n\nThat's fair. I didn't specify the assumptions I was making with my suggested implementation. It",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-477780426,477780426,
luke-jr,2019-03-29T00:56:12Z,"Perhaps we should just disable minconf entirely if we're not going to support the current definition... Changing the meaning of stuff is pretty bad. If a new definition is desired, it can be introduced as a new RPC or something that old software won't accidentally hit.",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-477824480,477824480,
jnewbery,2019-03-29T21:43:05Z,"ok, I'm going to close this for now. I don't think the existing behaviour is correct, consistent, or easily understandable by users. This offers an improvement because at the very least it can be documented and easily explained: https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-451651856. I've offered to change this PR if we can agree on a clear and full description of what the replacemen",https://github.com/bitcoin/bitcoin/pull/15010#issuecomment-478158934,478158934,
luke-jr,2018-12-28T03:00:28Z,"This is still the incorrect behaviour, I think. The correct values that should be returned here (at least with `dummy=""*""`) are 9.99 and -10.01, respectively. This is because sent transactions are always excluded from the balance, but incoming transactions are only included once they have sufficiently confirmed.",https://github.com/bitcoin/bitcoin/pull/15010#discussion_r244255054,244255054,test/functional/wallet_balance.py
