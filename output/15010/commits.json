[
  {
    "sha": "14130114d589845cf0395bf9b7ca20f0c7aa32d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDEzMDExNGQ1ODk4NDVjZjAzOTViZjliN2NhMjBmMGM3YWEzMmQ3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-10-29T15:55:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-12-20T16:18:58Z"
      },
      "message": "[wallet] Fix getbalance with minconf\n\nWhen getting balance w/ min_conf, include UTXOs that were spent more\nrecently.",
      "tree": {
        "sha": "c16218b18c535931582ad7b53f3c571a63f1b90e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c16218b18c535931582ad7b53f3c571a63f1b90e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14130114d589845cf0395bf9b7ca20f0c7aa32d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14130114d589845cf0395bf9b7ca20f0c7aa32d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14130114d589845cf0395bf9b7ca20f0c7aa32d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14130114d589845cf0395bf9b7ca20f0c7aa32d7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb52cee29d0d8be062c22e59299b8e332da340c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb52cee29d0d8be062c22e59299b8e332da340c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb52cee29d0d8be062c22e59299b8e332da340c5"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 22,
      "deletions": 19
    },
    "files": [
      {
        "sha": "3306dc52a33af1854dc09a74394098c10f27bef5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14130114d589845cf0395bf9b7ca20f0c7aa32d7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14130114d589845cf0395bf9b7ca20f0c7aa32d7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=14130114d589845cf0395bf9b7ca20f0c7aa32d7",
        "patch": "@@ -545,7 +545,7 @@ void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> ran\n  * Outpoint is spent if any non-conflicted transaction\n  * spends it:\n  */\n-bool CWallet::IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n) const\n+bool CWallet::IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n, const int min_depth) const\n {\n     const COutPoint outpoint(hash, n);\n     std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;\n@@ -557,6 +557,7 @@ bool CWallet::IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash\n         std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);\n         if (mit != mapWallet.end()) {\n             int depth = mit->second.GetDepthInMainChain(locked_chain);\n+            if (depth < min_depth) continue;\n             if (depth > 0  || (depth == 0 && !mit->second.isAbandoned()))\n                 return true; // Spent\n         }\n@@ -1822,7 +1823,7 @@ CAmount CWalletTx::GetImmatureCredit(interfaces::Chain::Lock& locked_chain, bool\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache, const isminefilter& filter) const\n+CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache, const isminefilter& filter, const int min_depth) const\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -1834,12 +1835,16 @@ CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, boo\n     CAmount* cache = nullptr;\n     bool* cache_used = nullptr;\n \n-    if (filter == ISMINE_SPENDABLE) {\n-        cache = &nAvailableCreditCached;\n-        cache_used = &fAvailableCreditCached;\n-    } else if (filter == ISMINE_WATCH_ONLY) {\n-        cache = &nAvailableWatchCreditCached;\n-        cache_used = &fAvailableWatchCreditCached;\n+    // The CWalletTx caches are for the tx's credit/debit at the current tip.\n+    // if a min_depth is specified, do not use or update the caches.\n+    if (min_depth == 0) {\n+        if (filter == ISMINE_SPENDABLE) {\n+            cache = &nAvailableCreditCached;\n+            cache_used = &fAvailableCreditCached;\n+        } else if (filter == ISMINE_WATCH_ONLY) {\n+            cache = &nAvailableWatchCreditCached;\n+            cache_used = &fAvailableWatchCreditCached;\n+        }\n     }\n \n     if (fUseCache && cache_used && *cache_used) {\n@@ -1850,7 +1855,7 @@ CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, boo\n     uint256 hashTx = GetHash();\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n-        if (!pwallet->IsSpent(locked_chain, hashTx, i))\n+        if (!pwallet->IsSpent(locked_chain, hashTx, i, min_depth))\n         {\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, filter);\n@@ -2006,7 +2011,7 @@ CAmount CWallet::GetBalance(const isminefilter& filter, const int min_depth) con\n         {\n             const CWalletTx* pcoin = &entry.second;\n             if (pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) >= min_depth) {\n-                nTotal += pcoin->GetAvailableCredit(*locked_chain, true, filter);\n+                nTotal += pcoin->GetAvailableCredit(*locked_chain, true, filter, min_depth);\n             }\n         }\n     }"
      },
      {
        "sha": "9ef0a047b819072bee366651f60cf02122322190",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14130114d589845cf0395bf9b7ca20f0c7aa32d7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14130114d589845cf0395bf9b7ca20f0c7aa32d7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=14130114d589845cf0395bf9b7ca20f0c7aa32d7",
        "patch": "@@ -488,7 +488,7 @@ class CWalletTx : public CMerkleTx\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(cs_main, pwallet->cs_wallet)\". The\n     // annotation \"NO_THREAD_SAFETY_ANALYSIS\" was temporarily added to avoid\n     // having to resolve the issue of member access into incomplete type CWallet.\n-    CAmount GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const NO_THREAD_SAFETY_ANALYSIS;\n+    CAmount GetAvailableCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE, int min_depth = 0) const NO_THREAD_SAFETY_ANALYSIS;\n     CAmount GetImmatureWatchOnlyCredit(interfaces::Chain::Lock& locked_chain, const bool fUseCache=true) const;\n     CAmount GetChange() const;\n \n@@ -818,7 +818,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<OutputGroup> groups,\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n-    bool IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool IsSpent(interfaces::Chain::Lock& locked_chain, const uint256& hash, unsigned int n, int min_depth = 0) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      },
      {
        "sha": "bd6d913bfb942ba79c67a76bc3e2009c4defc384",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14130114d589845cf0395bf9b7ca20f0c7aa32d7/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14130114d589845cf0395bf9b7ca20f0c7aa32d7/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=14130114d589845cf0395bf9b7ca20f0c7aa32d7",
        "patch": "@@ -89,10 +89,9 @@ def run_test(self):\n         # Same with minconf=0\n         assert_equal(self.nodes[0].getbalance(minconf=0), Decimal('9.99'))\n         assert_equal(self.nodes[1].getbalance(minconf=0), Decimal('29.99'))\n-        # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n-        # TODO: fix getbalance tracking of coin spentness depth\n-        assert_equal(self.nodes[0].getbalance(minconf=1), Decimal('0'))\n-        assert_equal(self.nodes[1].getbalance(minconf=1), Decimal('0'))\n+        # getbalance with a minconf includes coins that have been spent more recently than the minconf blocks ago\n+        assert_equal(self.nodes[0].getbalance(minconf=1), Decimal('50'))\n+        assert_equal(self.nodes[1].getbalance(minconf=1), Decimal('50'))\n         # getunconfirmedbalance\n         assert_equal(self.nodes[0].getunconfirmedbalance(), Decimal('60'))  # output of node 1's spend\n         assert_equal(self.nodes[1].getunconfirmedbalance(), Decimal('0'))  # Doesn't include output of node 0's send since it was spent\n@@ -121,10 +120,9 @@ def run_test(self):\n         self.nodes[1].generatetoaddress(2, RANDOM_COINBASE_ADDRESS)\n         self.sync_all()\n \n-        # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n-        # TODO: fix getbalance tracking of coin spentness depth\n+        # getbalance with a minconf includes coins that have been spent more recently than the minconf blocks ago\n         # getbalance with minconf=3 should still show the old balance\n-        assert_equal(self.nodes[1].getbalance(minconf=3), Decimal('0'))\n+        assert_equal(self.nodes[1].getbalance(minconf=3), Decimal('29.98'))\n \n         # getbalance with minconf=2 will show the new balance.\n         assert_equal(self.nodes[1].getbalance(minconf=2), Decimal('0'))"
      }
    ]
  }
]