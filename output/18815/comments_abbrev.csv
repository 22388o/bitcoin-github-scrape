DrahtBot,2020-04-29 16:24:30,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19460 (multiprocess: Add bitcoin-wallet -ipcconnect option by ryanofsky)\n* #19377 (bench: Add OrphanTxPool benchmark by ",https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-621319436,621319436,
practicalswift,2020-04-29 18:23:56,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-621382696,621382696,
practicalswift,2020-04-29 19:05:57,"Would it make sense to also benchmark the logging setup we use in the fuzz tests to avoid logging to disk?\n\n```c++\n    static TestingSetup setup{\n        CBaseChainParams::REGTEST,\n        {\n            ""-nodebuglogfile"",\n        },\n    };\n```",https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-621404493,621404493,
laanwj,2020-04-30 08:11:17,"To be honest, I think the idea of logging being performance critical is a bit scary. It was never meant like this. We shouldn't log in inner loops and such. Sure, debug flags are enabled it's different but one can expect a performance hit in that case. It's not really something to optimize for IMO.\n\n(not opposed to adding a benchmark, but I just think it's not a very high priority thing to opt",https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-621684008,621684008,
MarcoFalke,2020-04-30 12:09:04,"Jup, this is not primarily to encourage people to optimize this function, but rather to make finding performance bottlenecks (https://github.com/bitcoin/bitcoin/issues/18538#issuecomment-614898713) or regressions (#17218) easier.",https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-621792550,621792550,
jb55,2020-05-02 10:07:05,"I think a big issue with the logging is that it does a bunch of string concatenation and allocation for formatting, instead of format strings+printf. When you do this in a tight loop/IBD, I'm not surprised that you would see performance issues.\n\nMy guess for the thread_local issue is just the fact that it has to allocate and concatenate even more when it formats threads names into the log.",https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-622929713,622929713,
MarcoFalke,2020-05-02 11:57:55,"The strings are written to disk unbuffered:\n\nhttps://github.com/bitcoin/bitcoin/blob/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e/src/logging.cpp#L56\n\nIf I had to guess, even with SSD this might be the dominant factor, and not memory allocation for strings.",https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-622942431,622942431,
elichai,2020-05-18 14:58:10,"> Worth noting that some effort was made previously to move logging to a separate\n> thread (#13200), though I think that implementation did do string interpolation\n> inline (synchronously). I had tried to move interpolation to the logging\n> thread, but the difficulty of __VA_ARGS__ and getting the right function\n> signatures deterred me; may be doable though.\n\nIs it? because `LogPrintf",https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-630239550,630239550,
MarcoFalke,2020-06-02 13:33:52,Rebased,https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-637545737,637545737,
DrahtBot,2020-07-30 14:29:39,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-666400560,666400560,
