[
  {
    "sha": "6aa33feadbe11bfa505a80a691d84db966aca134",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWEzM2ZlYWRiZTExYmZhNTA1YTgwYTY5MWQ4NGRiOTY2YWNhMTM0",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-18T00:54:18Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-18T18:08:13Z"
      },
      "message": "Drop UpdateTransaction in favor of UpdateInput\n\nUpdating the input explicitly requires the caller to present a mutable\ninput, which more clearly communicates the effects and intent of the method.\n\nIn most cases, this input is already immediately available and need not be\nlooked up.",
      "tree": {
        "sha": "0281e621d6958cbb645b5bfa498092687e2492c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0281e621d6958cbb645b5bfa498092687e2492c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6aa33feadbe11bfa505a80a691d84db966aca134",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlr/FpMACgkQTYykuhgE\nCQY3Dw/9FdAgvyL1rwQaWVFd02L4iZjtsVyouM6PAgjrLdRTxzTUDj1P7gNShoVj\nVxuEygFZk8kG0GrJQi28Ew0ey1ln+BOEkRtrctEI3kLPzlGgLnKdyj8eouufNLGH\n+bAEflScY+iiCAtAOeexRlf1XKwBhwLijxJRsCoYUnecSlil55GwTD2YKA67NUKR\nWtqDTwmbLTTBnNjcmHHJvDSo/Y0VzhBljKJeaxwCRjaQChcwm49yRbSkJvRNIplW\nrQn8uFdecA/nSdgyvuemjhOjWUx5BDJLwHRWawwG+glsUBkT6NN8pTayVzJuFVQx\nG2a8NCkwgu/LLCpeP7YNpSY/wipo0ogqfJRcSEPTAOTHlYhgAlNi53smTy/X+D/l\nVjMPudXk+bksidTysggLC3yaZe2VTVbpW8gWdyR2uCK251bgbbCTl3U9ktWXHHEF\nTB00oWeSV/tDHeCVwsZ1G013XPOWvL5zPyt0Po0AT7tIiqUosaBePVHBvnFFz9fA\nbOPkMCW/OsXbQaXZH7d+FR5WfUhea75NbvT2QSPKFkl6h1qLsJxIrNazF7LOQo3O\nu4Lr1uMkWQrnKlktoy7uEityCthktI0dnU8V3UQ8MTnym828AMGcRO+uudzMbCD0\n6cClDJ1b1NEllLy5tgH2WVdg+0F6j0xO994G92Oc5AmlelaoYXc=\n=6mHX\n-----END PGP SIGNATURE-----",
        "payload": "tree 0281e621d6958cbb645b5bfa498092687e2492c6\nparent 1b53e4f67c6dbefadbfda7e40948840fe2b9da48\nauthor Ben Woosley <ben.woosley@gmail.com> 1526604858 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1526666893 -0700\n\nDrop UpdateTransaction in favor of UpdateInput\n\nUpdating the input explicitly requires the caller to present a mutable\ninput, which more clearly communicates the effects and intent of the method.\n\nIn most cases, this input is already immediately available and need not be\nlooked up.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aa33feadbe11bfa505a80a691d84db966aca134",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6aa33feadbe11bfa505a80a691d84db966aca134",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aa33feadbe11bfa505a80a691d84db966aca134/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b53e4f67c6dbefadbfda7e40948840fe2b9da48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b53e4f67c6dbefadbfda7e40948840fe2b9da48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b53e4f67c6dbefadbfda7e40948840fe2b9da48"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 14,
      "deletions": 21
    },
    "files": [
      {
        "sha": "0814c750dac36b5c35d811c4970bbb4c949a6732",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa33feadbe11bfa505a80a691d84db966aca134/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa33feadbe11bfa505a80a691d84db966aca134/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=6aa33feadbe11bfa505a80a691d84db966aca134",
        "patch": "@@ -629,7 +629,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n \n     // Sign what we can:\n     for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n-        const CTxIn& txin = mergedTx.vin[i];\n+        CTxIn& txin = mergedTx.vin[i];\n         const Coin& coin = view.AccessCoin(txin.prevout);\n         if (coin.IsSpent()) {\n             continue;\n@@ -644,7 +644,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n \n         // ... and merge in other signatures:\n         sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n-        UpdateTransaction(mergedTx, i, sigdata);\n+        UpdateInput(txin, sigdata);\n     }\n \n     tx = mergedTx;"
      },
      {
        "sha": "7d8c8793a0642451372a958aa6acd27afa114acf",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa33feadbe11bfa505a80a691d84db966aca134/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa33feadbe11bfa505a80a691d84db966aca134/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6aa33feadbe11bfa505a80a691d84db966aca134",
        "patch": "@@ -748,7 +748,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n             }\n         }\n \n-        UpdateTransaction(mergedTx, i, sigdata);\n+        UpdateInput(txin, sigdata);\n     }\n \n     return EncodeHexTx(mergedTx);\n@@ -882,7 +882,7 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n         }\n         sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));\n \n-        UpdateTransaction(mtx, i, sigdata);\n+        UpdateInput(txin, sigdata);\n \n         ScriptError serror = SCRIPT_ERR_OK;\n         if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {"
      },
      {
        "sha": "35cb80aead29250c3c0bf430d02944cf73dd93d5",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa33feadbe11bfa505a80a691d84db966aca134/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa33feadbe11bfa505a80a691d84db966aca134/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=6aa33feadbe11bfa505a80a691d84db966aca134",
        "patch": "@@ -199,12 +199,6 @@ void UpdateInput(CTxIn& input, const SignatureData& data)\n     input.scriptWitness = data.scriptWitness;\n }\n \n-void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data)\n-{\n-    assert(tx.vin.size() > nIn);\n-    UpdateInput(tx.vin[nIn], data);\n-}\n-\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n@@ -214,7 +208,7 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n \n     SignatureData sigdata;\n     bool ret = ProduceSignature(provider, creator, fromPubKey, sigdata);\n-    UpdateTransaction(txTo, nIn, sigdata);\n+    UpdateInput(txTo.vin.at(nIn), sigdata);\n     return ret;\n }\n "
      },
      {
        "sha": "553db073490de7350e3d0d083149119d1c985fcc",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa33feadbe11bfa505a80a691d84db966aca134/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa33feadbe11bfa505a80a691d84db966aca134/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=6aa33feadbe11bfa505a80a691d84db966aca134",
        "patch": "@@ -80,7 +80,6 @@ SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n \n /** Extract signature data from a transaction, and insert it. */\n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn);\n-void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data);\n void UpdateInput(CTxIn& input, const SignatureData& data);\n \n /* Check whether we know how to sign for an output like this, assuming we"
      },
      {
        "sha": "65c5b8ea1d7ea4ad5a2eaf05f567a01155703520",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa33feadbe11bfa505a80a691d84db966aca134/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa33feadbe11bfa505a80a691d84db966aca134/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=6aa33feadbe11bfa505a80a691d84db966aca134",
        "patch": "@@ -629,7 +629,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CreateCreditAndSpend(keystore2, scriptMulti, output2, input2, false);\n     CheckWithFlag(output2, input2, 0, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH 2-of-2 multisig\n@@ -640,7 +640,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -652,7 +652,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -664,7 +664,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n }"
      },
      {
        "sha": "2cd00e212cba8b18a05bdc58d3d9280f777cb764",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa33feadbe11bfa505a80a691d84db966aca134/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa33feadbe11bfa505a80a691d84db966aca134/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=6aa33feadbe11bfa505a80a691d84db966aca134",
        "patch": "@@ -315,7 +315,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // Sign\n         SignatureData sigdata;\n         ProduceSignature(keystore, MutableTransactionSignatureCreator(&valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata);\n-        UpdateTransaction(valid_with_witness_tx, 0, sigdata);\n+        UpdateInput(valid_with_witness_tx.vin[0], sigdata);\n \n         // This should be valid under all script flags.\n         ValidateCheckInputsForAllFlags(valid_with_witness_tx, 0, true);\n@@ -343,7 +343,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         for (int i=0; i<2; ++i) {\n             SignatureData sigdata;\n             ProduceSignature(keystore, MutableTransactionSignatureCreator(&tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata);\n-            UpdateTransaction(tx, i, sigdata);\n+            UpdateInput(tx.vin[i], sigdata);\n         }\n \n         // This should be valid under all script flags"
      },
      {
        "sha": "21f13d21c6966d02e5c72ab51e3f5a946293626f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa33feadbe11bfa505a80a691d84db966aca134/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa33feadbe11bfa505a80a691d84db966aca134/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6aa33feadbe11bfa505a80a691d84db966aca134",
        "patch": "@@ -2608,7 +2608,7 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     // sign the new tx\n     CTransaction txNewConst(tx);\n     int nIn = 0;\n-    for (const auto& input : tx.vin) {\n+    for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n@@ -2619,7 +2619,7 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n         if (!ProduceSignature(*this, TransactionSignatureCreator(&txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n             return false;\n         }\n-        UpdateTransaction(tx, nIn, sigdata);\n+        UpdateInput(input, sigdata);\n         nIn++;\n     }\n     return true;\n@@ -3050,7 +3050,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                     strFailReason = _(\"Signing transaction failed\");\n                     return false;\n                 } else {\n-                    UpdateTransaction(txNew, nIn, sigdata);\n+                    UpdateInput(txNew.vin.at(nIn), sigdata);\n                 }\n \n                 nIn++;"
      }
    ]
  }
]