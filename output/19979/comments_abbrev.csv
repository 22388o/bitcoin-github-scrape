hebasto,2020-09-19 10:05:06,cc @ajtowns @MarcoFalke @ryanofsky @vasild ,https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-695193929,695193929,
MarcoFalke,2020-09-19 12:35:27,"As mentioned in previous prs, clang may have accidental bugs or intentional limitations when checking for locks held at compile time. So removing the run-time checks seems dangerous, see also https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687585243 .\n\nFor example, the following diff compiles, but is obviously wrong:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_proce",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-695207906,695207906,
ryanofsky,2020-09-19 12:59:35,"> So removing the run-time checks seems dangerous\n\nThis moves the run time checks outside of the lambdas. I don't think it's fair to say it removes them. PR could be tweaked to move the checks inside the lambdas instead of outside if you prefer that.\n\nIt is true in general that the approach of annotating a lambda and calling it through a std::function so the annotation will not be enforced",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-695210287,695210287,
DrahtBot,2020-09-19 13:22:42,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19970 (sync.h: fix LockAssertion error reporting by ajtowns)\n* #19918 (sync: Replace LockAssertion with AssertLockHeldUn",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-695212894,695212894,
hebasto,2020-09-19 15:11:52,"Updated 774face46174120ea7f548911895416bc4794eaa -> 0bd1184adf6610c0bd14f4e9a25c0a200e65ae25 ([pr19979.01](https://github.com/hebasto/bitcoin/commits/pr19979.01) -> [pr19979.02](https://github.com/hebasto/bitcoin/commits/pr19979.02), [diff](https://github.com/hebasto/bitcoin/compare/pr19979.01..pr19979.02)):\n\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/19979#iss",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-695243985,695243985,
aaronpuchert,2020-09-19 17:36:59,"> * May be less efficient because invoking a callback through a std::function can require a heap allocation and indirect call through a function pointer instead of an inlined call or call to a fixed address.\n\nIf that's a concern, use something like [LLVM's `function_ref`](https://github.com/llvm-mirror/llvm/blob/master/include/llvm/ADT/STLExtras.h#L98-L134). Still an indirect call, but without",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-695336133,695336133,
hebasto,2020-09-19 21:30:50,"FWIW, the same approach has already been used in the project code base in 6a72f26968cf931c985d8d4797b6264274cabd06 from #16426 by @ariard.",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-695358016,695358016,
MarcoFalke,2020-09-20 06:40:38,"ACK 0bd1184adf6610c0bd14f4e9a25c0a200e65ae25\n\n",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-695752111,695752111,
ajtowns,2020-09-23 11:16:21,"> Since the annotations live on declarations and not on types, we can't warn about these casts because there is no way to fix that warning. You can't annotate the function pointer type.\n\nThis may provide some justification for the ""always do an AssertLockHeld(cs) in the functions with EXCLUSIVE_LOCKS_REQUIRED(cs)"" rule -- any function that gets called via a std::function cast or a function poi",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-697298054,697298054,
MarcoFalke,2020-09-23 13:57:35,"> I don't think the description (""eliminates from the code base all cases when Clang Thread Safety Analysis cannot determine if a lock is held"") is quite accurate though -- clang still isn't able to determine the lock is held in these lambdas.\n\nWhat about ""Replace LockAssertion with AssertLockHeld, remove LockAssertion"" as OP?\n\nOther than that, I think this can go in.",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-697396590,697396590,
hebasto,2020-09-23 14:01:13,"@MarcoFalke \n> > I don't think the description (""eliminates from the code base all cases when Clang Thread Safety Analysis cannot determine if a lock is held"") is quite accurate though -- clang still isn't able to determine the lock is held in these lambdas.\n> \n> What about ""Replace LockAssertion with AssertLockHeld, remove LockAssertion"" as OP?\n\nDone.\n",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-697402631,697402631,
aaronpuchert,2020-09-24 00:00:40,"> > Since the annotations live on declarations and not on types, we can't warn about these casts because there is no way to fix that warning. You can't annotate the function pointer type.\n> \n> This may provide some justification for the ""always do an AssertLockHeld(cs) in the functions with EXCLUSIVE_LOCKS_REQUIRED(cs)"" rule -- any function that gets called via a std::function cast or a functi",https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-698033450,698033450,
MarcoFalke,2020-09-19 12:37:47,"As the func is not consumed, shouldn't this keep the uref `&&`? ",https://github.com/bitcoin/bitcoin/pull/19979#discussion_r491417794,491417794,src/net.h
ryanofsky,2020-09-19 13:05:54,"This has to take a std::function argument so the lambda object is converted to a std::function and the EXCLUSIVE_LOCKS_REQUIRED requirement can by bypassed, otherwise static analysis will not accept this",https://github.com/bitcoin/bitcoin/pull/19979#discussion_r491428017,491428017,src/net.h
MarcoFalke,2020-09-19 13:17:17,"```suggestion\n    void ForEachNode(const NodeFn& func) const\n```\n\nshould work and be preferable? Obviously a style nit, as it doesn't make a difference with the current code.",https://github.com/bitcoin/bitcoin/pull/19979#discussion_r491432206,491432206,src/net.h
hebasto,2020-09-19 15:12:19,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19979#issuecomment-695243985).,https://github.com/bitcoin/bitcoin/pull/19979#discussion_r491464063,491464063,src/net.h
ryanofsky,2020-09-24 15:49:23,"In commit ""Remove unused LockAssertion struct"" (0bd1184adf6610c0bd14f4e9a25c0a200e65ae25)\n\nInstead of removing this section, maybe it would have been better to update. The example could be updated with EXCLUSIVE_LOCKS_REQUIRED to be consistent with the code. And the text could be something like ""When Clang Thread Safety Analysis is unable to determine if a mutex is locked, it is recommended to",https://github.com/bitcoin/bitcoin/pull/19979#discussion_r494426834,494426834,doc/developer-notes.md
MarcoFalke,2020-09-24 15:55:49,"Imo using `NO_THREAD_SAFETY_ANALYSIS` (or `thread_safety_cast` above) or `EXCLUSIVE_LOCKS_REQUIRED` on the lambda is equivalent, as the resulting binary, as well as any compile time errors/warnings should be the same.\n\nAs there is no observable difference (except in the written code itself), is there a reason to mention it in the dev notes?",https://github.com/bitcoin/bitcoin/pull/19979#discussion_r494431446,494431446,doc/developer-notes.md
ryanofsky,2020-09-24 16:17:05,"Imo, they're both not ideal. EXCLUSIVE_LOCKS_REQUIRED is preferable to NO_THREAD_SAFETY_ANALYSIS because it makes which mutex is assumed to be held explicit, and it doesn't disable checking for other mutexes. You might need to assume cs_main is held somewhere, and still want errors if you forget LOCK(cs_wallet) in the same function.\n\nIf it was useful before to have a section in developer notes",https://github.com/bitcoin/bitcoin/pull/19979#discussion_r494445679,494445679,doc/developer-notes.md
MarcoFalke,2020-09-24 16:34:34,"> You might need to assume cs_main is held somewhere, and still want errors if you forget LOCK(cs_wallet) in the same function.\n\nGood point. Yeah, I agree the new ""style"" could be mentioned in the docs.",https://github.com/bitcoin/bitcoin/pull/19979#discussion_r494457095,494457095,doc/developer-notes.md
