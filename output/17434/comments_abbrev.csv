DrahtBot,2019-11-11 19:40:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18571 (fuzz: Disable debug log file by MarcoFalke)\n\nIf you consider this pull request important, please also help to re",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552585162,552585162,
jnewbery,2019-11-11 19:43:22,"@MarcoFalke \n> I'd still argue that this should be parsed at the time of construction...\n\n@ryanofsky \n> It's not obvious that it's better to parse config values when they are first used instead of in AppInitParameterInteraction...\n\nI think that `AppInitParameterInteraction()` should be used for checking for parameter interactions. In cases where a parameter is just being read and store",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552586058,552586058,
MarcoFalke,2019-11-11 19:53:56,"> This seems reasonable, although note g_chainstate has't yet been initialized at the point that we call AppInitParameterInteraction.\n\nI think we agree that `AppInitParameterInteraction` is the wrong place for this, so obviously this code would need to be called when the chainstate is initialized.",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552589646,552589646,
ryanofsky,2019-11-11 19:59:00,"Ok, would be good to look at specific cases, but the general tradeoff with this PR seems to be better error feedback for users and potentially simpler error handling in code vs ""polluting the global namespace"" and ""code churn hotspots"", and ""merge conflicts and rebases"".\n\n> This seems reasonable, although note `g_chainstate` has't yet been initialized at the point that we call `AppInitParamete",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552591363,552591363,
MarcoFalke,2019-11-11 20:21:52,"> If there are a lot of related options, it might make sense to introduce a struct similar to the coin control struct which could hold parsed options and be passed around where needed.\n\nWe already do that for connman: https://dev.visucore.com/bitcoin/doxygen/struct_c_connman_1_1_options.html",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552599352,552599352,
ryanofsky,2019-11-11 20:51:15,"> I think we agree that `AppInitParameterInteraction` is the wrong place for this\n\nI don't agree `AppInitParameterInteraction` is the wrong place to parse and validate options. Or, I don't think it's the wrong time to validate and parse options. If relevant parsing were moved into a `ValidationParameterInteraction` function to be more modular, that would seem good too.",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552610101,552610101,
jnewbery,2019-11-11 20:57:24,"> If relevant parsing were moved into a ValidationParameterInteraction function to be more modular, that would seem good too.\n\nI agree this would be good. We do something similar for wallet: https://github.com/bitcoin/bitcoin/blob/a6f6333ba253cda83221ee529810cacf930e413f/src/init.cpp#L1116",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552612442,552612442,
Xekyo,2019-11-11 22:46:26,Alright. I've moved the `fCheckBlockIndex` value to the members of `Validation.cpp` and added a function `ValidationParameterInteraction(const CChainParams& chainparams)` function to `validation.h` and `validation.cpp` which I'm calling from `init.cpp::AppInitParameterInteraction`.,https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552651592,552651592,
Xekyo,2019-11-12 02:44:21,"> Code review ACK [eec8608](https://github.com/bitcoin/bitcoin/commit/eec8608577323536b55e75268a66b8c5657529d0). Seems good. Param checking is now split between:\n> \n>     * InitParameterInteraction\n> \n>     * AppInitParameterInteraction\n>       \n>       * WalletInit::ParameterInteraction\n>       * ValidationParameterInteraction\n\nGreat, thanks. I'm thinking that I'll add another c",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552709104,552709104,
MarcoFalke,2019-11-12 03:09:42,"Could you add a motivation to the OP explaining the change, please. This is still a global (while hidden from other compilation untis) and it seems that the only way for tests to set this is to force set the argument and then call `ValidationParameterInteraction`.\n\nIt doesn't look like the tests are currently calling `ValidationParameterInteraction`. That looks like a regression and raises the",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552714406,552714406,
ryanofsky,2019-11-12 04:02:17,"> Could you add a motivation to the OP explaining the change, please. This is still a global (while hidden from other compilation untis) and it seems that the only way for tests to set this is to force set the argument and then call `ValidationParameterInteraction`.\n\nI assume that is actually the goal of the PR: to limit access to the global so it's internal to validation.cpp and outside code ",https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-552724418,552724418,
DrahtBot,2020-04-15 23:47:12,<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-614334593,614334593,
MarcoFalke,2020-04-25 14:03:26,@Xekyo Are you still working on this? Otherwise I suggest to close,https://github.com/bitcoin/bitcoin/pull/17434#issuecomment-619384557,619384557,
emilengler,2019-11-11 08:55:35,"```\nvalidation.cpp:4731:73: error: use of undeclared identifier 'chainparams'\n\n    static bool fCheckBlockIndex = gArgs.GetBoolArg(""-checkblockindex"", chainparams.DefaultConsistencyChecks());\n```\n`chainparams` is not available in the scope, you should give a `CChainParams` argument in the function (like in the other functions) or use a global variable",https://github.com/bitcoin/bitcoin/pull/17434#discussion_r344609632,344609632,src/validation.cpp
Xekyo,2019-11-11 18:26:28,Thank you for your review @emilengler. I've updated the CheckBlockIndex function header to take all of `chainparams` instead of only the `consensusParams` subset.,https://github.com/bitcoin/bitcoin/pull/17434#discussion_r344846493,344846493,src/validation.cpp
MarcoFalke,2019-11-11 18:29:15,"Instead of parsing command line arguments every time this function is called, what about adding this as a member variable that is only parsed once (e.g. at the time of construction).",https://github.com/bitcoin/bitcoin/pull/17434#discussion_r344847650,344847650,src/validation.cpp
ryanofsky,2019-11-11 18:54:19,"In commit ""Move CheckBlockIndex to validation.cpp"" (340acd0692de198dbcc8a8ecdc48744d4f741c11)\n\nUsing a static local variable here isn't great because it makes makes the method harder to test and reuse. For example, it would be impossible to write a unit test that invokes this fucntion with different `fCheckBlockIndex` values. I haven't looked at all the other variables you want to extend this ",https://github.com/bitcoin/bitcoin/pull/17434#discussion_r344857779,344857779,src/validation.cpp
MarcoFalke,2019-11-11 19:06:13,"Sorry, I was wrong this was parsed on every call (missed the `static`), however I'd still argue that this should be parsed at the time of construction (during initialization), so that parse errors can be returned to the caller.",https://github.com/bitcoin/bitcoin/pull/17434#discussion_r344862590,344862590,src/validation.cpp
MarcoFalke,2019-11-11 19:07:23,(See also the reply by @ryanofsky which says exactly the same),https://github.com/bitcoin/bitcoin/pull/17434#discussion_r344863005,344863005,src/validation.cpp
