[
  {
    "sha": "ecc3c4a019e6db30e208b8554b1a3658dcb9a80a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2MzYzRhMDE5ZTZkYjMwZTIwOGI4NTU0YjFhMzY1OGRjYjlhODBh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-09T15:19:10Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-05-12T16:44:32Z"
      },
      "message": "Do not unlock cs_main in ABC unless we've actually made progress.\n\nTechnically, some internal datastructures may be in an inconsistent\nstate if we do this, though there are no known bugs there. Still,\nfor future safety, its much better to only unlock cs_main if we've\nmade progress (not just tried a reorg which may make progress).",
      "tree": {
        "sha": "f9af673005ded7d0566d285b4617c6909f3dabbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9af673005ded7d0566d285b4617c6909f3dabbf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b262eb2d80bfa27ae8501078ce47bc1407e9c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b262eb2d80bfa27ae8501078ce47bc1407e9c55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b262eb2d80bfa27ae8501078ce47bc1407e9c55"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 42,
      "deletions": 29
    },
    "files": [
      {
        "sha": "477b3e1550cd38dc9542cbb1c0fa873fdc27d3ba",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 28,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ecc3c4a019e6db30e208b8554b1a3658dcb9a80a",
        "patch": "@@ -2666,45 +2666,53 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             SyncWithValidationInterfaceQueue();\n         }\n \n-        const CBlockIndex *pindexFork;\n-        bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n+            CBlockIndex* starting_tip = chainActive.Tip();\n+            bool blocks_connected = false;\n+            do {\n+                // We absolutely may not unlock cs_main until we've made forward progress\n+                // (with the exception of shutdown due to hardware issues, low disk space, etc).\n+                ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n+\n+                if (pindexMostWork == nullptr) {\n+                    pindexMostWork = FindMostWorkChain();\n+                }\n \n-            CBlockIndex *pindexOldTip = chainActive.Tip();\n-            if (pindexMostWork == nullptr) {\n-                pindexMostWork = FindMostWorkChain();\n-            }\n+                // Whether we have anything to do at all.\n+                if (pindexMostWork == nullptr || pindexMostWork == chainActive.Tip()) {\n+                    break;\n+                }\n \n-            // Whether we have anything to do at all.\n-            if (pindexMostWork == nullptr || pindexMostWork == chainActive.Tip())\n-                return true;\n+                bool fInvalidFound = false;\n+                std::shared_ptr<const CBlock> nullBlockPtr;\n+                if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace))\n+                    return false;\n+                blocks_connected = true;\n \n-            bool fInvalidFound = false;\n-            std::shared_ptr<const CBlock> nullBlockPtr;\n-            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace))\n-                return false;\n+                if (fInvalidFound) {\n+                    // Wipe cache, we may need another branch now.\n+                    pindexMostWork = nullptr;\n+                }\n+                pindexNewTip = chainActive.Tip();\n \n-            if (fInvalidFound) {\n-                // Wipe cache, we may need another branch now.\n-                pindexMostWork = nullptr;\n-            }\n-            pindexNewTip = chainActive.Tip();\n-            pindexFork = chainActive.FindFork(pindexOldTip);\n-            fInitialDownload = IsInitialBlockDownload();\n+                for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n+                    assert(trace.pblock && trace.pindex);\n+                    GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n+                }\n+            } while (!chainActive.Tip() || (starting_tip && CBlockIndexWorkComparator()(chainActive.Tip(), starting_tip)));\n+            if (!blocks_connected) return true;\n \n-            for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n-                assert(trace.pblock && trace.pindex);\n-                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n-            }\n+            const CBlockIndex* pindexFork = chainActive.FindFork(starting_tip);\n+            bool fInitialDownload = IsInitialBlockDownload();\n \n             // Notify external listeners about the new tip.\n             // Enqueue while holding cs_main to ensure that UpdatedBlockTip is called in the order in which blocks are connected\n-            GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n-\n-            // Always notify the UI if a new block tip was connected\n             if (pindexFork != pindexNewTip) {\n+                // Notify ValidationInterface subscribers\n+                GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n+\n+                // Always notify the UI if a new block tip was connected\n                 uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n             }\n         }\n@@ -2728,6 +2736,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n     return true;\n }\n+\n bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n     return g_chainstate.ActivateBestChain(state, chainparams, std::move(pblock));\n }"
      },
      {
        "sha": "6bf0f9c39ff2fd1c601eab1a3a4addfd4c17ed6e",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=ecc3c4a019e6db30e208b8554b1a3658dcb9a80a",
        "patch": "@@ -61,7 +61,11 @@ class CValidationInterface {\n      */\n     ~CValidationInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners when the block chain tip advances.\n+     *\n+     * When multiple blocks are connected at once, UpdatedBlockTip will be called on the final tip\n+     * but may not be called on every intermediate tip. If the latter behavior is desired,\n+     * subscribe to BlockConnected() instead.\n      *\n      * Called on a background thread.\n      */"
      }
    ]
  },
  {
    "sha": "a3ae8e68739023e5dba9e5cb190e707ed4603316",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2FlOGU2ODczOTAyM2U1ZGJhOWU1Y2IxOTBlNzA3ZWQ0NjAzMzE2",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-05-10T19:57:16Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-05-12T16:44:32Z"
      },
      "message": "Fix concurrency-related bugs in ActivateBestChain\n\nIf multiple threads are invoking ActivateBestChain, it was possible to have\nthem working towards different tips, and we could arrive at a less work tip\nthan we should.  Fix this by introducing a ChainState lock which must\nbe held for the entire duration of ActivateBestChain to enforce\nexclusion in ABC.",
      "tree": {
        "sha": "6995c621267b759e46cbda4b9141583a606dd765",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6995c621267b759e46cbda4b9141583a606dd765"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3ae8e68739023e5dba9e5cb190e707ed4603316",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3ae8e68739023e5dba9e5cb190e707ed4603316",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3ae8e68739023e5dba9e5cb190e707ed4603316",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3ae8e68739023e5dba9e5cb190e707ed4603316/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecc3c4a019e6db30e208b8554b1a3658dcb9a80a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc3c4a019e6db30e208b8554b1a3658dcb9a80a"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "405f21baa3146fc0cb02b37c15823d1f6c05b933",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3ae8e68739023e5dba9e5cb190e707ed4603316/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3ae8e68739023e5dba9e5cb190e707ed4603316/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a3ae8e68739023e5dba9e5cb190e707ed4603316",
        "patch": "@@ -144,6 +144,12 @@ class CChainState {\n       */\n     std::set<CBlockIndex*> g_failed_blocks;\n \n+    /**\n+     * the ChainState CriticalSection\n+     * A lock that must be held when modifying this ChainState - held in ActivateBestChain()\n+     */\n+    CCriticalSection m_cs_chainstate;\n+\n public:\n     CChain chainActive;\n     BlockMap mapBlockIndex;\n@@ -2542,6 +2548,7 @@ void CChainState::PruneBlockIndexCandidates() {\n bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n {\n     AssertLockHeld(cs_main);\n+\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n     const CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n@@ -2653,6 +2660,12 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     // sanely for performance or correctness!\n     AssertLockNotHeld(cs_main);\n \n+    // ABC maintains a fair degree of expensive-to-calculate internal state\n+    // because this function periodically releases cs_main so that it does not lock up other threads for too long\n+    // during large connects - and to allow for e.g. the callback queue to drain\n+    // we use m_cs_chainstate to enforce mutual exclusion so that only one caller may execute this function at a time\n+    LOCK(m_cs_chainstate);\n+\n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);"
      }
    ]
  },
  {
    "sha": "dd435ad40267f5c50ff17533c696f9302829a6a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDQzNWFkNDAyNjdmNWM1MGZmMTc1MzNjNjk2ZjkzMDI4MjlhNmE2",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-18T12:01:48Z"
      },
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-05-16T12:28:15Z"
      },
      "message": "Add unit tests for signals generated by ProcessNewBlock()\n\nAfter a recent bug discovered in callback ordering in MainSignals,\nthis test checks invariants in ordering of\nBlockConnected / BlockDisconnected / UpdatedChainTip signals",
      "tree": {
        "sha": "771a3f789f30646df1d0a067b71db619296af144",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/771a3f789f30646df1d0a067b71db619296af144"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd435ad40267f5c50ff17533c696f9302829a6a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd435ad40267f5c50ff17533c696f9302829a6a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd435ad40267f5c50ff17533c696f9302829a6a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd435ad40267f5c50ff17533c696f9302829a6a6/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3ae8e68739023e5dba9e5cb190e707ed4603316",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3ae8e68739023e5dba9e5cb190e707ed4603316",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3ae8e68739023e5dba9e5cb190e707ed4603316"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 196,
      "deletions": 2
    },
    "files": [
      {
        "sha": "efdb39b6484fba31499aac837de2ad06497b35b1",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd435ad40267f5c50ff17533c696f9302829a6a6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd435ad40267f5c50ff17533c696f9302829a6a6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=dd435ad40267f5c50ff17533c696f9302829a6a6",
        "patch": "@@ -85,9 +85,10 @@ BITCOIN_TESTS =\\\n   test/transaction_tests.cpp \\\n   test/txvalidation_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\\n-  test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\\n-  test/util_tests.cpp\n+  test/util_tests.cpp \\\n+  test/validation_block_tests.cpp \\\n+  test/versionbits_tests.cpp\n \n if ENABLE_WALLET\n BITCOIN_TESTS += \\"
      },
      {
        "sha": "77d43890e4378a58bf891af8e4bfe0e58b12e801",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd435ad40267f5c50ff17533c696f9302829a6a6/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd435ad40267f5c50ff17533c696f9302829a6a6/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=dd435ad40267f5c50ff17533c696f9302829a6a6",
        "patch": "@@ -38,6 +38,12 @@ FastRandomContext insecure_rand_ctx(insecure_rand_seed);\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n+std::ostream& operator<<(std::ostream& os, const uint256& num)\n+{\n+    os << num.ToString();\n+    return os;\n+}\n+\n BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n {\n         SHA256AutoDetect();"
      },
      {
        "sha": "d013613de28332f5180988ae505f4ae1671167a8",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd435ad40267f5c50ff17533c696f9302829a6a6/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd435ad40267f5c50ff17533c696f9302829a6a6/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=dd435ad40267f5c50ff17533c696f9302829a6a6",
        "patch": "@@ -120,4 +120,7 @@ struct TestMemPoolEntryHelper\n \n CBlock getBlock13b8a();\n \n+// define an implicit conversion here so that uint256 may be used directly in BOOST_CHECK_*\n+std::ostream& operator<<(std::ostream& os, const uint256& num);\n+\n #endif"
      },
      {
        "sha": "f83557016821df383782a777e236b211d63681c5",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "added",
        "additions": 184,
        "deletions": 0,
        "changes": 184,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd435ad40267f5c50ff17533c696f9302829a6a6/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd435ad40267f5c50ff17533c696f9302829a6a6/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=dd435ad40267f5c50ff17533c696f9302829a6a6",
        "patch": "@@ -0,0 +1,184 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <pow.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    auto pblock = std::make_shared<CBlock>(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+\n+    CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+    txCoinbase.vout.resize(1);\n+    txCoinbase.vin[0].scriptWitness.SetNull();\n+    pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+\n+    return pblock;\n+}\n+\n+std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n+{\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+        ++(pblock->nNonce);\n+    }\n+\n+    return pblock;\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return FinalizeBlock(Block(prev_hash));\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+\n+    CMutableTransaction coinbase_spend;\n+    coinbase_spend.vin.push_back(CTxIn(COutPoint(pblock->vtx[0]->GetHash(), 0), CScript(), 0));\n+    coinbase_spend.vout.push_back(pblock->vtx[0]->vout[0]);\n+\n+    CTransactionRef tx = MakeTransactionRef(coinbase_spend);\n+    pblock->vtx.push_back(tx);\n+\n+    auto ret = FinalizeBlock(pblock);\n+    return ret;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid) {\n+        BuildChain(pblock->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+    }\n+\n+    if (gen_fork) {\n+        blocks.push_back(GoodBlock(root));\n+        BuildChain(blocks.back()->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n+{\n+    // build a large-ish chain that's likely to have some forks\n+    std::vector<std::shared_ptr<const CBlock>> blocks;\n+    while (blocks.size() < 50) {\n+        blocks.clear();\n+        BuildChain(Params().GenesisBlock().GetHash(), 100, 15, 10, 500, blocks);\n+    }\n+\n+    bool ignored;\n+    CValidationState state;\n+    std::vector<CBlockHeader> headers;\n+    std::transform(blocks.begin(), blocks.end(), std::back_inserter(headers), [](std::shared_ptr<const CBlock> b) { return b->GetBlockHeader(); });\n+\n+    // Process all the headers so we understand the toplogy of the chain\n+    BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n+\n+    // Connect the genesis block and drain any outstanding events\n+    ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored);\n+    SyncWithValidationInterfaceQueue();\n+\n+    // subscribe to events (this subscriber will validate event ordering)\n+    const CBlockIndex* initial_tip = nullptr;\n+    {\n+        LOCK(cs_main);\n+        initial_tip = chainActive.Tip();\n+    }\n+    TestSubscriber sub(initial_tip->GetBlockHash());\n+    RegisterValidationInterface(&sub);\n+\n+    // create a bunch of threads that repeatedly process a block generated above at random\n+    // this will create parallelism and randomness inside validation - the ValidationInterface\n+    // will subscribe to events generated during block validation and assert on ordering invariance\n+    boost::thread_group threads;\n+    for (int i = 0; i < 10; i++) {\n+        threads.create_thread([&blocks]() {\n+            bool ignored;\n+            for (int i = 0; i < 1000; i++) {\n+                auto block = blocks[GetRand(blocks.size() - 1)];\n+                ProcessNewBlock(Params(), block, true, &ignored);\n+            }\n+\n+            // to make sure that eventually we process the full chain - do it here\n+            for (auto block : blocks) {\n+                if (block->vtx.size() == 1) {\n+                    bool processed = ProcessNewBlock(Params(), block, true, &ignored);\n+                    assert(processed);\n+                }\n+            }\n+        });\n+    }\n+\n+    threads.join_all();\n+    while (GetMainSignals().CallbacksPending() > 0) {\n+        MilliSleep(100);\n+    }\n+\n+    UnregisterValidationInterface(&sub);\n+\n+    BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]