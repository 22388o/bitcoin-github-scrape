[
  {
    "sha": "94064710b9123dfb3df8cfd6c32efae349aec281",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDA2NDcxMGI5MTIzZGZiM2RmOGNmZDZjMzJlZmFlMzQ5YWVjMjgx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T12:08:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T12:20:18Z"
      },
      "message": "Write fee estimate and peers files only when initialized\n\nFixes #4669.\n\nMove the loading of addresses to StartNode() to make it more\nself-contained.",
      "tree": {
        "sha": "84b6105c502fe6edd6115bab292c29b2aaa70f62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84b6105c502fe6edd6115bab292c29b2aaa70f62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94064710b9123dfb3df8cfd6c32efae349aec281",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94064710b9123dfb3df8cfd6c32efae349aec281",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94064710b9123dfb3df8cfd6c32efae349aec281",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94064710b9123dfb3df8cfd6c32efae349aec281/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fd881367544fcc9e70130bf448a181794da26ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd881367544fcc9e70130bf448a181794da26ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd881367544fcc9e70130bf448a181794da26ab"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 29,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0a6b5abac592b30efc97c63a5a91ad04e61753b8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94064710b9123dfb3df8cfd6c32efae349aec281/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94064710b9123dfb3df8cfd6c32efae349aec281/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=94064710b9123dfb3df8cfd6c32efae349aec281",
        "patch": "@@ -47,6 +47,7 @@ using namespace std;\n #ifdef ENABLE_WALLET\n CWallet* pwalletMain;\n #endif\n+bool fFeeEstimatesInitialized = false;\n \n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n@@ -119,6 +120,10 @@ void Shutdown()\n     if (!lockShutdown)\n         return;\n \n+    /// Note: Shutdown() must be able to handle cases in which AppInit2() failed part of the way,\n+    /// for example if the data directory was found to be locked.\n+    /// Be sure that anything that writes files or flushes caches only does this if the respective\n+    /// module was initialized.\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n     StopRPCThreads();\n@@ -130,13 +135,15 @@ void Shutdown()\n     StopNode();\n     UnregisterNodeSignals(GetNodeSignals());\n \n+    if (fFeeEstimatesInitialized)\n     {\n         boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (est_fileout)\n             mempool.WriteFeeEstimates(est_fileout);\n         else\n             LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n+        fFeeEstimatesInitialized = false;\n     }\n \n     {\n@@ -1056,6 +1063,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // Allowed to fail as this file IS missing on first startup.\n     if (est_filein)\n         mempool.ReadFeeEstimates(est_filein);\n+    fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n@@ -1212,22 +1220,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n \n-    // ********************************************************* Step 10: load peers\n-\n-    uiInterface.InitMessage(_(\"Loading addresses...\"));\n-\n-    nStart = GetTimeMillis();\n-\n-    {\n-        CAddrDB adb;\n-        if (!adb.Read(addrman))\n-            LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n-    }\n-\n-    LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n-           addrman.size(), GetTimeMillis() - nStart);\n-\n-    // ********************************************************* Step 11: start node\n+    // ********************************************************* Step 10: start node\n \n     if (!CheckDiskSpace())\n         return false;\n@@ -1256,7 +1249,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", -1));\n #endif\n \n-    // ********************************************************* Step 12: finished\n+    // ********************************************************* Step 11: finished\n \n     uiInterface.InitMessage(_(\"Done loading\"));\n "
      },
      {
        "sha": "ebb103b6362d8f07bb064274f0b83edecd90b7d7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94064710b9123dfb3df8cfd6c32efae349aec281/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94064710b9123dfb3df8cfd6c32efae349aec281/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=94064710b9123dfb3df8cfd6c32efae349aec281",
        "patch": "@@ -78,6 +78,7 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n+bool fAddressesInitialized = false;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n@@ -1739,6 +1740,18 @@ void static Discover(boost::thread_group& threadGroup)\n \n void StartNode(boost::thread_group& threadGroup)\n {\n+    uiInterface.InitMessage(_(\"Loading addresses...\"));\n+    // Load addresses for peers.dat\n+    int64_t nStart = GetTimeMillis();\n+    {\n+        CAddrDB adb;\n+        if (!adb.Read(addrman))\n+            LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n+    }\n+    LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n+           addrman.size(), GetTimeMillis() - nStart);\n+    fAddressesInitialized = true;\n+\n     if (semOutbound == NULL) {\n         // initialize semaphore\n         int nMaxOutbound = min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n@@ -1785,7 +1798,12 @@ bool StopNode()\n     if (semOutbound)\n         for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n             semOutbound->post();\n-    DumpAddresses();\n+\n+    if (fAddressesInitialized)\n+    {\n+        DumpAddresses();\n+        fAddressesInitialized = false;\n+    }\n \n     return true;\n }"
      }
    ]
  }
]