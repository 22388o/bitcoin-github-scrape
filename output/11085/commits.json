[
  {
    "sha": "4a565cb8f851eec6166f5ea7546e6e40f4b032e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTU2NWNiOGY4NTFlZWM2MTY2ZjVlYTc1NDZlNmU0MGY0YjAzMmUx",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2017-09-12T21:01:12Z"
      },
      "committer": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2017-09-12T21:01:12Z"
      },
      "message": "Add 'sethdseed' RPC to initialize or replace HD seed",
      "tree": {
        "sha": "8687dbce2e2e000054231da2492131401228508d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8687dbce2e2e000054231da2492131401228508d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a565cb8f851eec6166f5ea7546e6e40f4b032e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a565cb8f851eec6166f5ea7546e6e40f4b032e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a565cb8f851eec6166f5ea7546e6e40f4b032e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9bceaf1c081a84d9fcc680372614e797b168a9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9bceaf1c081a84d9fcc680372614e797b168a9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9bceaf1c081a84d9fcc680372614e797b168a9e"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 71,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0b6cf13ac9964fa7ad54b032a9b16b7d27b61058",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=4a565cb8f851eec6166f5ea7546e6e40f4b032e1",
        "patch": "@@ -69,6 +69,7 @@ namespace {\n const QStringList historyFilter = QStringList()\n     << \"importprivkey\"\n     << \"importmulti\"\n+    << \"sethdseed\"\n     << \"signmessagewithprivkey\"\n     << \"signrawtransaction\"\n     << \"walletpassphrase\""
      },
      {
        "sha": "2c452f5997584c53f2d3972c6b72d6ae6d66ae25",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=4a565cb8f851eec6166f5ea7546e6e40f4b032e1",
        "patch": "@@ -40,6 +40,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendtoaddress\", 5 , \"replaceable\" },\n     { \"sendtoaddress\", 6 , \"conf_target\" },\n     { \"settxfee\", 0, \"amount\" },\n+    { \"sethdseed\", 0, \"flushkeypool\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n     { \"getreceivedbyaccount\", 1, \"minconf\" },\n     { \"listreceivedbyaddress\", 0, \"minconf\" },"
      },
      {
        "sha": "3a8dffe8901b8cd69f38182a35960abec15cd146",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4a565cb8f851eec6166f5ea7546e6e40f4b032e1",
        "patch": "@@ -3180,6 +3180,67 @@ UniValue generate(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, num_generate, max_tries, true);\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"flushkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or reset the HD wallet seed.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"flushkeypool\\\"       (boolean, optional, default=true) Whether to flush old unused addresses from the keypool.\\n\"\n+            \"                             If true, the next address from getnewaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses from the existing keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed;\\n\"\n+            \"                             if not provided a random seed will be used.\\n\"\n+            \"\\nResult:\\n\"\n+            \"true|false              (boolean) Returns true if successful\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"c35c625bd2b3b20e1c98ed73d4dd2acf3c43a805d3fa303a6856ef1dd2a1e360\\\"\")\n+            );\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) flush_key_pool = request.params[0].get_bool();\n+\n+    CPubKey master_pub_key;\n+    if (!request.params[1].isNull()) {\n+        CBitcoinSecret secret;\n+        if (!secret.SetString(request.params[1].get_str())) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+\n+        CKey key = secret.GetKey(), key2;\n+        if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+\n+        // check that we don't already have this key, compressed or otherwise\n+        key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+        if (pwallet->HaveKey(key.GetPubKey().GetID()) || pwallet->HaveKey(key2.GetPubKey().GetID())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    } else {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    }\n+\n+    if (!pwallet->SetHDMasterKey(master_pub_key)) throw JSONRPCError(RPC_WALLET_ERROR, \"Storing master key failed\");\n+    if (flush_key_pool) pwallet->NewKeyPool();\n+\n+    return true;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -3244,6 +3305,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   {\"oldpassphrase\",\"newpassphrase\"} },\n     { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        {\"txid\"} },\n+    { \"wallet\",             \"sethdseed\",                &sethdseed,                {\"flushkeypool\",\"seed\"} },\n \n     { \"generating\",         \"generate\",                 &generate,                 {\"nblocks\",\"maxtries\"} },\n };"
      },
      {
        "sha": "80c77e7cc239e2bfb627317c1dc48a28d4a49838",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4a565cb8f851eec6166f5ea7546e6e40f4b032e1",
        "patch": "@@ -1363,7 +1363,11 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n {\n     CKey key;\n     key.MakeNewKey(true);\n+    return DeriveNewMasterHDKey(key);\n+}\n \n+CPubKey CWallet::DeriveNewMasterHDKey(const CKey& key)\n+{\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n "
      },
      {
        "sha": "abc71048e18d6636d7a80e570ee69308d597e40e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a565cb8f851eec6166f5ea7546e6e40f4b032e1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4a565cb8f851eec6166f5ea7546e6e40f4b032e1",
        "patch": "@@ -1102,6 +1102,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /* Generates a new HD master key (will not be activated) */\n     CPubKey GenerateNewHDMasterKey();\n+\n+    /* Derives a new HD master key (will not be activated) */\n+    CPubKey DeriveNewMasterHDKey(const CKey& key);\n     \n     /* Set the current HD master key (will reset the chain child index counters)\n        Sets the master key's version based on the current wallet version (so the"
      }
    ]
  }
]