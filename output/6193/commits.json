[
  {
    "sha": "64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGI4MDI3YzVjOGFkMjYzYzBmNGNmMjk0NGZkM2M1OWIwOGMzY2Q2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-27T07:41:14Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-27T07:41:14Z"
      },
      "message": "rest.cpp: strip whitespace",
      "tree": {
        "sha": "24b9a92d3edd91e61df50772dfeca6e75992e9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24b9a92d3edd91e61df50772dfeca6e75992e9be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "182686cdbd81c737922a296f582bfd8909dcdffc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/182686cdbd81c737922a296f582bfd8909dcdffc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/182686cdbd81c737922a296f582bfd8909dcdffc"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1426f21135033c4929b1c4e77286b4accbf96f54",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6",
        "patch": "@@ -262,12 +262,12 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n {\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n-    \n+\n     switch (rf) {\n     case RF_JSON: {\n         Array rpcParams;\n         Value chainInfoObject = getblockchaininfo(rpcParams, false);\n-        \n+\n         string strJSON = write_string(chainInfoObject, false) + \"\\n\";\n         conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n         return true;\n@@ -276,7 +276,7 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n         throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n     }\n     }\n-    \n+\n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n@@ -351,9 +351,9 @@ static bool rest_getutxos(AcceptedConnection* conn,\n \n     // parse/deserialize input\n     // input-format = output-format, rest/getutxos/bin requires binary input, gives binary output, ...\n-    \n+\n     string strRequestMutable = strRequest; //convert const string to string for allowing hex to bin converting\n-    \n+\n     switch (rf) {\n     case RF_HEX: {\n         // convert hex to bin, continue then with bin part"
      }
    ]
  },
  {
    "sha": "6e71efa9f020ee0a2b8050e8643deb03022b0b38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTcxZWZhOWYwMjBlZTBhMmI4MDUwZTg2NDNkZWIwMzAyMmIwYjM4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-27T13:56:16Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-27T18:10:02Z"
      },
      "message": "[REST] remove json input for getutxos, limit to query max. 15 outpoints\n\nRemove possibility to send json encoded parameters to `/rest/getutxos/` to avoid possible DoS scenarios.\n\nThe JSON output option is untouched.",
      "tree": {
        "sha": "3b2bbb7a999e600501575eac14e2ecc316a83cc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b2bbb7a999e600501575eac14e2ecc316a83cc6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e71efa9f020ee0a2b8050e8643deb03022b0b38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e71efa9f020ee0a2b8050e8643deb03022b0b38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e71efa9f020ee0a2b8050e8643deb03022b0b38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e71efa9f020ee0a2b8050e8643deb03022b0b38/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64b8027c5c8ad263c0f4cf2944fd3c59b08c3cd6"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 108,
      "deletions": 92
    },
    "files": [
      {
        "sha": "2219ceb65f52454ebf4696b0921f0c2aeb1a067c",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e71efa9f020ee0a2b8050e8643deb03022b0b38/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e71efa9f020ee0a2b8050e8643deb03022b0b38/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=6e71efa9f020ee0a2b8050e8643deb03022b0b38",
        "patch": "@@ -47,15 +47,15 @@ Only supports JSON as output format.\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n \n ####Query UTXO set\n-`GET /rest/getutxos.<bin|hex|json>`\n+`GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n \n The getutxo command allows querying of the UTXO set given a set of outpoints.\n See BIP64 for input and output serialisation:\n https://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki\n \n Example:\n ```\n-$ curl --data '{\"checkmempool\":true,\"outpoints\":[{\"txid\":\"b2cdfd7b89def827ff8af7cd9bff7627ff72e5e8b0f71210f92ea7a4000c5d75\",\"n\":0}]}' localhost:18332/rest/getutxos.json 2>/dev/null | json_pp\n+$ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff7627ff72e5e8b0f71210f92ea7a4000c5d75-0.json 2>/dev/null | json_pp\n {\n    \"chaintipHash\" : \"00000000fb01a7f3745a717f8caebee056c484e6e0bfe4a9591c235bb70506fb\",\n    \"chainHeight\" : 325347,"
      },
      {
        "sha": "a6a671ec88cd67cdaa6fad3e08c85d04313eb520",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 56,
        "deletions": 56,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e71efa9f020ee0a2b8050e8643deb03022b0b38/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e71efa9f020ee0a2b8050e8643deb03022b0b38/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=6e71efa9f020ee0a2b8050e8643deb03022b0b38",
        "patch": "@@ -54,78 +54,78 @@ def setup_network(self, split=False):\n         connect_nodes_bi(self.nodes,0,2)\n         self.is_network_split=False\n         self.sync_all()\n-        \n+\n     def run_test(self):\n         url = urlparse.urlparse(self.nodes[0].url)\n         print \"Mining blocks...\"\n-        \n+\n         self.nodes[0].generate(1)\n         self.sync_all()\n         self.nodes[2].generate(100)\n         self.sync_all()\n-        \n+\n         assert_equal(self.nodes[0].getbalance(), 50)\n-        \n+\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n         self.nodes[2].generate(1)\n         self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n-        \n+\n         assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\")) #balance now should be 0.1 on node 1\n-        \n+\n         # load the latest 0.1 tx over the REST API\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n         json_obj = json.loads(json_string)\n         vintx = json_obj['vin'][0]['txid'] # get the vin to later check for utxo (should be spent by then)\n-        # get n of 0.1 outpoint \n+        # get n of 0.1 outpoint\n         n = 0\n         for vout in json_obj['vout']:\n             if vout['value'] == 0.1:\n                 n = vout['n']\n-        \n-        \n+\n+\n         ######################################\n         # GETUTXOS: query a unspent outpoint #\n         ######################################\n-        json_request = '{\"checkmempool\":true,\"outpoints\":[{\"txid\":\"'+txid+'\",\"n\":'+str(n)+'}]}'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request)\n+        json_request = '/checkmempool/'+txid+'-'+str(n)\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        \n+\n         #check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n-        \n+\n         #make sure there is one utxo\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['utxos'][0]['value'], 0.1)\n-        \n-        \n+\n+\n         ################################################\n         # GETUTXOS: now query a already spent outpoint #\n         ################################################\n-        json_request = '{\"checkmempool\":true,\"outpoints\":[{\"txid\":\"'+vintx+'\",\"n\":0}]}'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request)\n+        json_request = '/checkmempool/'+vintx+'-0'\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        \n+\n         #check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n         #make sure there is no utox in the response because this oupoint has been spent\n         assert_equal(len(json_obj['utxos']), 0)\n-        \n+\n         #check bitmap\n         assert_equal(json_obj['bitmap'], \"0\")\n-        \n-        \n+\n+\n         ##################################################\n         # GETUTXOS: now check both with the same request #\n         ##################################################\n-        json_request = '{\"checkmempool\":true,\"outpoints\":[{\"txid\":\"'+txid+'\",\"n\":'+str(n)+'},{\"txid\":\"'+vintx+'\",\"n\":0}]}'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request)\n+        json_request = '/checkmempool/'+txid+'-'+str(n)+'/'+vintx+'-0'\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n-        \n+\n         #test binary response\n         bb_hash = self.nodes[0].getbestblockhash()\n \n@@ -134,19 +134,18 @@ def run_test(self):\n         binaryRequest += pack(\"i\", n);\n         binaryRequest += binascii.unhexlify(vintx);\n         binaryRequest += pack(\"i\", 0);\n-        \n+\n         bin_response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n-        \n         output = StringIO.StringIO()\n         output.write(bin_response)\n         output.seek(0)\n         chainHeight = unpack(\"i\", output.read(4))[0]\n         hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(65).rstrip(\"L\")\n-        \n+\n         assert_equal(bb_hash, hashFromBinResponse) #check if getutxo's chaintip during calculation was fine\n         assert_equal(chainHeight, 102) #chain height must be 102\n-        \n-        \n+\n+\n         ############################\n         # GETUTXOS: mempool checks #\n         ############################\n@@ -156,55 +155,56 @@ def run_test(self):\n         json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n         json_obj = json.loads(json_string)\n         vintx = json_obj['vin'][0]['txid'] # get the vin to later check for utxo (should be spent by then)\n-        # get n of 0.1 outpoint \n+        # get n of 0.1 outpoint\n         n = 0\n         for vout in json_obj['vout']:\n             if vout['value'] == 0.1:\n                 n = vout['n']\n-        \n-        json_request = '{\"checkmempool\":false,\"outpoints\":[{\"txid\":\"'+txid+'\",\"n\":'+str(n)+'}]}'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request)\n+\n+        json_request = '/'+txid+'-'+str(n)\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 0) #there should be a outpoint because it has just added to the mempool\n-        \n-        json_request = '{\"checkmempool\":true,\"outpoints\":[{\"txid\":\"'+txid+'\",\"n\":'+str(n)+'}]}'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request)\n+\n+        json_request = '/checkmempool/'+txid+'-'+str(n)\n+        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1) #there should be a outpoint because it has just added to the mempool\n-        \n+\n         #do some invalid requests\n         json_request = '{\"checkmempool'\n         response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n         assert_equal(response.status, 500) #must be a 500 because we send a invalid json request\n-        \n+\n         json_request = '{\"checkmempool'\n         response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n         assert_equal(response.status, 500) #must be a 500 because we send a invalid bin request\n-        \n+\n+        response = http_get_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n+        assert_equal(response.status, 500) #must be a 500 because we send a invalid bin request\n+\n         #test limits\n-        json_request = '{\"checkmempool\":true,\"outpoints\":['\n-        for x in range(0, 200):\n-            json_request += '{\"txid\":\"'+txid+'\",\"n\":'+str(n)+'},'\n-        json_request = json_request.rstrip(\",\")\n-        json_request+=\"]}\";\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n+        json_request = '/checkmempool/'\n+        for x in range(0, 20):\n+            json_request += txid+'-'+str(n)+'/'\n+        json_request = json_request.rstrip(\"/\")\n+        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 500) #must be a 500 because we exceeding the limits\n-        \n-        json_request = '{\"checkmempool\":true,\"outpoints\":['\n-        for x in range(0, 90):\n-            json_request += '{\"txid\":\"'+txid+'\",\"n\":'+str(n)+'},'\n-        json_request = json_request.rstrip(\",\")\n-        json_request+=\"]}\";\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n+\n+        json_request = '/checkmempool/'\n+        for x in range(0, 15):\n+            json_request += txid+'-'+str(n)+'/'\n+        json_request = json_request.rstrip(\"/\");\n+        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 200) #must be a 500 because we exceeding the limits\n \n         self.nodes[0].generate(1) #generate block to not affect upcomming tests\n         self.sync_all()\n-        \n+\n         ################\n         # /rest/block/ #\n         ################\n-        \n+\n         # check binary format\n         response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", \"\", True)\n         assert_equal(response.status, 200)\n@@ -248,7 +248,7 @@ def run_test(self):\n         hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", \"\", True)\n         assert_equal(hex_string.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 10)\n-        \n+\n \n \n         # check block tx details\n@@ -278,7 +278,7 @@ def run_test(self):\n \n         #test rest bestblock\n         bb_hash = self.nodes[0].getbestblockhash()\n-        \n+\n         json_string = http_get_call(url.hostname, url.port, '/rest/chaininfo.json')\n         json_obj = json.loads(json_string)\n         assert_equal(json_obj['bestblockhash'], bb_hash)"
      },
      {
        "sha": "7c238d506d93867e570c39d3d9bbb1c1351bf657",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 34,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e71efa9f020ee0a2b8050e8643deb03022b0b38/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e71efa9f020ee0a2b8050e8643deb03022b0b38/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6e71efa9f020ee0a2b8050e8643deb03022b0b38",
        "patch": "@@ -19,7 +19,7 @@\n using namespace std;\n using namespace json_spirit;\n \n-static const int MAX_GETUTXOS_OUTPOINTS = 100; //allow a max of 100 outpoints to be queried at once\n+static const int MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n \n enum RetFormat {\n     RF_UNDEF,\n@@ -342,16 +342,51 @@ static bool rest_getutxos(AcceptedConnection* conn,\n     vector<string> params;\n     enum RetFormat rf = ParseDataFormat(params, strURIPart);\n \n+    vector<string> uriParts;\n+    if (params.size() > 0 && params[0].length() > 1)\n+    {\n+        std::string strUriParams = params[0].substr(1);\n+        boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n+    }\n+\n     // throw exception in case of a empty request\n-    if (strRequest.length() == 0)\n+    if (strRequest.length() == 0 && uriParts.size() == 0)\n         throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n \n+    bool fInputParsed = false;\n     bool fCheckMemPool = false;\n     vector<COutPoint> vOutPoints;\n \n     // parse/deserialize input\n     // input-format = output-format, rest/getutxos/bin requires binary input, gives binary output, ...\n \n+    if (uriParts.size() > 0)\n+    {\n+\n+        //inputs is sent over URI scheme (/rest/getutxos/checkmempool/txid1-n/txid2-n/...)\n+        if (uriParts.size() > 0 && uriParts[0] == \"checkmempool\")\n+            fCheckMemPool = true;\n+\n+        for (size_t i = (fCheckMemPool) ? 1 : 0; i < uriParts.size(); i++)\n+        {\n+            uint256 txid;\n+            int32_t nOutput;\n+            std::string strTxid = uriParts[i].substr(0, uriParts[i].find(\"-\"));\n+            std::string strOutput = uriParts[i].substr(uriParts[i].find(\"-\")+1);\n+\n+            if (!ParseInt32(strOutput, &nOutput) || !IsHex(strTxid))\n+                throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n+\n+            txid.SetHex(strTxid);\n+            vOutPoints.push_back(COutPoint(txid, (uint32_t)nOutput));\n+        }\n+\n+        if (vOutPoints.size() > 0)\n+            fInputParsed = true;\n+        else\n+            throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+    }\n+\n     string strRequestMutable = strRequest; //convert const string to string for allowing hex to bin converting\n \n     switch (rf) {\n@@ -363,11 +398,17 @@ static bool rest_getutxos(AcceptedConnection* conn,\n \n     case RF_BINARY: {\n         try {\n-            //deserialize\n-            CDataStream oss(SER_NETWORK, PROTOCOL_VERSION);\n-            oss << strRequestMutable;\n-            oss >> fCheckMemPool;\n-            oss >> vOutPoints;\n+            //deserialize only if user sent a request\n+            if (strRequestMutable.size() > 0)\n+            {\n+                if (fInputParsed) //don't allow sending input over URI and HTTP RAW DATA\n+                    throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Combination of URI scheme inputs and raw post data is not allowed\");\n+\n+                CDataStream oss(SER_NETWORK, PROTOCOL_VERSION);\n+                oss << strRequestMutable;\n+                oss >> fCheckMemPool;\n+                oss >> vOutPoints;\n+            }\n         } catch (const std::ios_base::failure& e) {\n             // abort in case of unreadable binary data\n             throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n@@ -376,33 +417,8 @@ static bool rest_getutxos(AcceptedConnection* conn,\n     }\n \n     case RF_JSON: {\n-        try {\n-            // parse json request\n-            Value valRequest;\n-            if (!read_string(strRequest, valRequest))\n-                throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n-\n-            Object jsonObject = valRequest.get_obj();\n-            const Value& checkMempoolValue = find_value(jsonObject, \"checkmempool\");\n-\n-            if (!checkMempoolValue.is_null()) {\n-                fCheckMemPool = checkMempoolValue.get_bool();\n-            }\n-            const Value& outpointsValue = find_value(jsonObject, \"outpoints\");\n-            if (!outpointsValue.is_null()) {\n-                Array outPoints = outpointsValue.get_array();\n-                BOOST_FOREACH (const Value& outPoint, outPoints) {\n-                    Object outpointObject = outPoint.get_obj();\n-                    uint256 txid = ParseHashO(outpointObject, \"txid\");\n-                    Value nValue = find_value(outpointObject, \"n\");\n-                    int nOutput = nValue.get_int();\n-                    vOutPoints.push_back(COutPoint(txid, nOutput));\n-                }\n-            }\n-        } catch (...) {\n-            // return HTTP 500 if there was a json parsing error\n-            throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n-        }\n+        if (!fInputParsed)\n+            throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n         break;\n     }\n     default: {"
      }
    ]
  }
]