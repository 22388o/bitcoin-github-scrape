[
  {
    "sha": "f87f3626e35e7edae37e14f5156809325ad18cb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODdmMzYyNmUzNWU3ZWRhZTM3ZTE0ZjUxNTY4MDkzMjVhZDE4Y2Iy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-22T01:50:01Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-03T16:15:47Z"
      },
      "message": "Chainparams: Use a regular factory for creating chainparams",
      "tree": {
        "sha": "218b637261c6b1a2293539685ca6df1c5e99e933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/218b637261c6b1a2293539685ca6df1c5e99e933"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f87f3626e35e7edae37e14f5156809325ad18cb2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZCgI4AAoJEIhmwY6hyUSikGsP+wac6mJTq7n2OMxMrVXXr1KP\ns3tjW9TCb6F30/k/M9mRQpz+ShtV1Ic1uQLY7+oZftl07SRkOCKBBOVx8VIuplLp\nlJxTkkmgvjBH9JZ3JXItRXk5tL6ZraCDyQRa+vxzoiiB1Lgxjb75XlruPi8LOgly\nemByPLeQ4xb7kL5ivED30VvcnenqOvyPNLeY9pCkR4OD0uP4837s+L1F1rTxcMD7\nZMfHUCwvO4xYVKodpJNQ0g5E4A1xV5LaFA8awx3ZUvCsOv4iE+M27VvolHXoOCvu\nsyhVkME0AP/kwoD//ix2cSsElFd98IwBZcmkweoSaNv0ZswXtf3M1J5te6UsnB9a\nI3QaUN2zaB7E6e2gvc0V8F5ta2PjQ6lCULigPGnYAm0gAeE0MEYzHh9OECUkMqfj\n6d5h+3Dui3Q1BRSFJEZGAsbO9YCVaJ9fdjAVky9HbUKxJPrZyS6ZKsxKjcrXOx33\nRqTG81N1JamLvF1vIEeE9PrRnB3PnI7Exv2n03RUyY9XOjfSSXQZcANem8cEmie5\nXVpzPokXix/cldif+KIyasZ1GOfaOKj9hJtZUTQbNJ3sNEEAEObvnsHa2ACUeAad\nbfkxLIUg74AHPxVfK4JHX4Kt0pWQyPFyAwre5b/9hIHb5XKnr2XgrZTFLhwh7CIC\n7RfA+VjKZnIeKytxroBW\n=D8HT\n-----END PGP SIGNATURE-----",
        "payload": "tree 218b637261c6b1a2293539685ca6df1c5e99e933\nparent 35da2aeed7d4000dde93957c3b6e048ab83c4f2b\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1432259401 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1493828147 +0200\n\nChainparams: Use a regular factory for creating chainparams\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87f3626e35e7edae37e14f5156809325ad18cb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f87f3626e35e7edae37e14f5156809325ad18cb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87f3626e35e7edae37e14f5156809325ad18cb2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35da2aeed7d4000dde93957c3b6e048ab83c4f2b"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 58,
      "deletions": 39
    },
    "files": [
      {
        "sha": "885b787b4da09815fd6ba79038608f0b9e8c0281",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87f3626e35e7edae37e14f5156809325ad18cb2/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87f3626e35e7edae37e14f5156809325ad18cb2/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=f87f3626e35e7edae37e14f5156809325ad18cb2",
        "patch": "@@ -30,6 +30,8 @@ static const int CONTINUE_EXECUTION=-1;\n \n std::string HelpMessageCli()\n {\n+    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n+    const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     std::string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n@@ -38,7 +40,7 @@ std::string HelpMessageCli()\n     AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-named\", strprintf(_(\"Pass named instead of positional arguments (default: %s)\"), DEFAULT_NAMED));\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));"
      },
      {
        "sha": "2d54dfa543f03a44c8297fb65e42700cce4cfeb7",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 21,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87f3626e35e7edae37e14f5156809325ad18cb2/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87f3626e35e7edae37e14f5156809325ad18cb2/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f87f3626e35e7edae37e14f5156809325ad18cb2",
        "patch": "@@ -55,6 +55,12 @@ static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n \n+void CChainParams::UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+{\n+    consensus.vDeployments[d].nStartTime = nStartTime;\n+    consensus.vDeployments[d].nTimeout = nTimeout;\n+}\n+\n /**\n  * Main network\n  */\n@@ -165,7 +171,6 @@ class CMainParams : public CChainParams {\n         };\n     }\n };\n-static CMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -253,7 +258,6 @@ class CTestNetParams : public CChainParams {\n \n     }\n };\n-static CTestNetParams testNetParams;\n \n /**\n  * Regression test\n@@ -326,42 +330,41 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n-\n-    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n-    {\n-        consensus.vDeployments[d].nStartTime = nStartTime;\n-        consensus.vDeployments[d].nTimeout = nTimeout;\n-    }\n };\n-static CRegTestParams regTestParams;\n \n-static CChainParams *pCurrentParams = 0;\n+static std::unique_ptr<CChainParams> globalChainParams;\n+static std::unique_ptr<CChainParams> globalSwitchingChainParams;\n \n const CChainParams &Params() {\n-    assert(pCurrentParams);\n-    return *pCurrentParams;\n+    assert(globalChainParams);\n+    return *globalChainParams;\n }\n \n-CChainParams& Params(const std::string& chain)\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-            return mainParams;\n+        return std::unique_ptr<CChainParams>(new CMainParams());\n     else if (chain == CBaseChainParams::TESTNET)\n-            return testNetParams;\n+        return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n-            return regTestParams;\n-    else\n-        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+        return std::unique_ptr<CChainParams>(new CRegTestParams());\n+    throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n+}\n+\n+const CChainParams& Params(const std::string& chain)\n+{\n+    globalSwitchingChainParams = CreateChainParams(chain);\n+    return *globalSwitchingChainParams;\n }\n \n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n-    pCurrentParams = &Params(network);\n+    globalChainParams = CreateChainParams(network);\n }\n \n-void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n {\n-    regTestParams.UpdateBIP9Parameters(d, nStartTime, nTimeout);\n+    globalChainParams->UpdateBIP9Parameters(d, nStartTime, nTimeout);\n }\n  "
      },
      {
        "sha": "a91570c22d960eb225073011088895754d6d2aac",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87f3626e35e7edae37e14f5156809325ad18cb2/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87f3626e35e7edae37e14f5156809325ad18cb2/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=f87f3626e35e7edae37e14f5156809325ad18cb2",
        "patch": "@@ -11,6 +11,7 @@\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n \n+#include <memory>\n #include <vector>\n \n struct CDNSSeedData {\n@@ -75,6 +76,7 @@ class CChainParams\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n+    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n protected:\n     CChainParams() {}\n \n@@ -94,6 +96,13 @@ class CChainParams\n     ChainTxData chainTxData;\n };\n \n+/**\n+ * Creates and returns a std::unique_ptr<CChainParams> of the chosen chain.\n+ * @returns a CChainParams* of the chosen chain.\n+ * @throws a std::runtime_error if the chain is not supported.\n+ */\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain);\n+\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests.\n@@ -103,7 +112,7 @@ const CChainParams &Params();\n /**\n  * @returns CChainParams for the given BIP70 chain name.\n  */\n-CChainParams& Params(const std::string& chain);\n+const CChainParams& Params(const std::string& chain);\n \n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name.\n@@ -114,6 +123,6 @@ void SelectParams(const std::string& chain);\n /**\n  * Allows modifying the BIP9 regtest parameters.\n  */\n-void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n+void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n \n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "43c9a13c5468b8e01e1f25f5d9b91d6aa8d8a392",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87f3626e35e7edae37e14f5156809325ad18cb2/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87f3626e35e7edae37e14f5156809325ad18cb2/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=f87f3626e35e7edae37e14f5156809325ad18cb2",
        "patch": "@@ -35,7 +35,6 @@ class CBaseMainParams : public CBaseChainParams\n         nRPCPort = 8332;\n     }\n };\n-static CBaseMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -49,7 +48,6 @@ class CBaseTestNetParams : public CBaseChainParams\n         strDataDir = \"testnet3\";\n     }\n };\n-static CBaseTestNetParams testNetParams;\n \n /*\n  * Regression test\n@@ -63,31 +61,30 @@ class CBaseRegTestParams : public CBaseChainParams\n         strDataDir = \"regtest\";\n     }\n };\n-static CBaseRegTestParams regTestParams;\n \n-static CBaseChainParams* pCurrentBaseParams = 0;\n+static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n {\n-    assert(pCurrentBaseParams);\n-    return *pCurrentBaseParams;\n+    assert(globalChainBaseParams);\n+    return *globalChainBaseParams;\n }\n \n-CBaseChainParams& BaseParams(const std::string& chain)\n+std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return mainParams;\n+        return std::unique_ptr<CBaseChainParams>(new CBaseMainParams());\n     else if (chain == CBaseChainParams::TESTNET)\n-        return testNetParams;\n+        return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n-        return regTestParams;\n+        return std::unique_ptr<CBaseChainParams>(new CBaseRegTestParams());\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n void SelectBaseParams(const std::string& chain)\n {\n-    pCurrentBaseParams = &BaseParams(chain);\n+    globalChainBaseParams = CreateBaseChainParams(chain);\n }\n \n std::string ChainNameFromCommandLine()"
      },
      {
        "sha": "fc101f5b774c23a483c26dab115ac2675514ec11",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87f3626e35e7edae37e14f5156809325ad18cb2/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87f3626e35e7edae37e14f5156809325ad18cb2/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=f87f3626e35e7edae37e14f5156809325ad18cb2",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_CHAINPARAMSBASE_H\n #define BITCOIN_CHAINPARAMSBASE_H\n \n+#include <memory>\n #include <string>\n #include <vector>\n \n@@ -30,6 +31,13 @@ class CBaseChainParams\n     std::string strDataDir;\n };\n \n+/**\n+ * Creates and returns a std::unique_ptr<CBaseChainParams> of the chosen chain.\n+ * @returns a CBaseChainParams* of the chosen chain.\n+ * @throws a std::runtime_error if the chain is not supported.\n+ */\n+std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain);\n+\n /**\n  * Append the help messages for the chainparams options to the\n  * parameter string.\n@@ -42,8 +50,6 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n  */\n const CBaseChainParams& BaseParams();\n \n-CBaseChainParams& BaseParams(const std::string& chain);\n-\n /** Sets the params returned by Params() to those for the given network. */\n void SelectBaseParams(const std::string& chain);\n "
      },
      {
        "sha": "804c5941bf16cd4e505ba2c34aaf879b4b873933",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87f3626e35e7edae37e14f5156809325ad18cb2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87f3626e35e7edae37e14f5156809325ad18cb2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f87f3626e35e7edae37e14f5156809325ad18cb2",
        "patch": "@@ -328,6 +328,8 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n \n std::string HelpMessage(HelpMessageMode mode)\n {\n+    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n+    const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const bool showDebug = GetBoolArg(\"-help-debug\", false);\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -500,7 +502,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n@@ -1123,7 +1125,7 @@ bool AppInitParameterInteraction()\n             for (int j=0; j<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j)\n             {\n                 if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[j].name) == 0) {\n-                    UpdateRegtestBIP9Parameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                    UpdateBIP9Parameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n                     found = true;\n                     LogPrintf(\"Setting BIP9 activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n                     break;"
      }
    ]
  },
  {
    "sha": "2351a064a604f5aa961a38a3920289546dada16f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzUxYTA2NGE2MDRmNWFhOTYxYTM4YTM5MjAyODk1NDZkYWRhMTZm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-28T14:04:35Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-03T16:15:54Z"
      },
      "message": "Chainparams: Get rid of CChainParams& Params(std::string)",
      "tree": {
        "sha": "6878027b39f34a4de14fa14b89304e11be322357",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6878027b39f34a4de14fa14b89304e11be322357"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2351a064a604f5aa961a38a3920289546dada16f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZCgI6AAoJEIhmwY6hyUSijtEP/jfjmvKTy8PAvfvPcjEcovcS\njzN9mMMceZexJ4MCGpEunU7HSYW0SmrwyovTfO1GylP9ZSGLgxWuLGNhcKrsH9Ta\nGFmzXWJ9VQ/OnyzbIZ7o7um/7Li/8ISy8OpcYnmkot49LapWCluYEeUjsWPlTDWZ\nJ7XSFt5W5OlSxzEGzkZ7tc74m70lMakVW0g3a1mQxL2/lgypDAB77+RLuY29e9T1\nugcrDhixU9Aw0sAKcq/TDhmdfhTpuHbFB3ga0ssW3sjp/C+m68qRkl64OZTBblCK\n1FhkUXpeFTaBvCrn8dcJlccZz7kKiMruO470GZe4b9bSeJPb7BfsbymbXSM+s6Gv\nnCIgfulElt5pHNJgNkVJEmel2VUytmrkJ4Gd4pyui1XCRiGAuMCYSBRI9M1zemWk\nFMRkkhSodNTl7qU5RoDLQ0A4KucxR4CCewYUVJRmNH99jTdXxWYgz/J3wnn3mXOn\n0bje45etc6LSlLqz55eHUW7/QG3kf9GoxDoS6c1IdHYNBO7n37OZhTOmhGJ542sY\nUhyXVfpynntWdOSnA1CYD32CL4Hz+C2/yTsK2+2qUaTZKYKhryJaJ5Eow7RTADoQ\nY6NJmBPrdYjzL/qXkrjdShrWo6em5gxakrV9f8Eem6sYdThsDh9IrUl3c7oFrGs5\nafNTUJj8Wu7gF6XE+ZD+\n=Zy1t\n-----END PGP SIGNATURE-----",
        "payload": "tree 6878027b39f34a4de14fa14b89304e11be322357\nparent f87f3626e35e7edae37e14f5156809325ad18cb2\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1448719475 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1493828154 +0200\n\nChainparams: Get rid of CChainParams& Params(std::string)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2351a064a604f5aa961a38a3920289546dada16f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2351a064a604f5aa961a38a3920289546dada16f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2351a064a604f5aa961a38a3920289546dada16f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f87f3626e35e7edae37e14f5156809325ad18cb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87f3626e35e7edae37e14f5156809325ad18cb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f87f3626e35e7edae37e14f5156809325ad18cb2"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 25,
      "deletions": 29
    },
    "files": [
      {
        "sha": "195388839eaacb5dc1bf91b77eebb0e6d9f19e33",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2351a064a604f5aa961a38a3920289546dada16f/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2351a064a604f5aa961a38a3920289546dada16f/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=2351a064a604f5aa961a38a3920289546dada16f",
        "patch": "@@ -40,15 +40,15 @@ static void DeserializeAndCheckBlockTest(benchmark::State& state)\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction\n \n-    Consensus::Params params = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n \n     while (state.KeepRunning()) {\n         CBlock block; // Note that CBlock caches its checked state, so we need to recreate it here\n         stream >> block;\n         assert(stream.Rewind(sizeof(block_bench::block413567)));\n \n         CValidationState validationState;\n-        assert(CheckBlock(block, validationState, params));\n+        assert(CheckBlock(block, validationState, chainParams->GetConsensus()));\n     }\n }\n "
      },
      {
        "sha": "5055fb3e0a33aabac38d7e48111202cac40b97f2",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2351a064a604f5aa961a38a3920289546dada16f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2351a064a604f5aa961a38a3920289546dada16f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=2351a064a604f5aa961a38a3920289546dada16f",
        "patch": "@@ -333,7 +333,6 @@ class CRegTestParams : public CChainParams {\n };\n \n static std::unique_ptr<CChainParams> globalChainParams;\n-static std::unique_ptr<CChainParams> globalSwitchingChainParams;\n \n const CChainParams &Params() {\n     assert(globalChainParams);\n@@ -351,12 +350,6 @@ std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-const CChainParams& Params(const std::string& chain)\n-{\n-    globalSwitchingChainParams = CreateChainParams(chain);\n-    return *globalSwitchingChainParams;\n-}\n-\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);"
      },
      {
        "sha": "e5312d1080b3ce183a7ad2799a39e206ec5abf72",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2351a064a604f5aa961a38a3920289546dada16f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2351a064a604f5aa961a38a3920289546dada16f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=2351a064a604f5aa961a38a3920289546dada16f",
        "patch": "@@ -109,11 +109,6 @@ std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain);\n  */\n const CChainParams &Params();\n \n-/**\n- * @returns CChainParams for the given BIP70 chain name.\n- */\n-const CChainParams& Params(const std::string& chain);\n-\n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name.\n  * @throws std::runtime_error when the chain is not supported."
      },
      {
        "sha": "7f798f0c8a8f55c208b1be379d54c241884942fb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2351a064a604f5aa961a38a3920289546dada16f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2351a064a604f5aa961a38a3920289546dada16f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2351a064a604f5aa961a38a3920289546dada16f",
        "patch": "@@ -330,6 +330,8 @@ std::string HelpMessage(HelpMessageMode mode)\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n+    const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n     const bool showDebug = GetBoolArg(\"-help-debug\", false);\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -341,7 +343,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), Params(CBaseChainParams::MAIN).GetConsensus().defaultAssumeValid.GetHex(), Params(CBaseChainParams::TESTNET).GetConsensus().defaultAssumeValid.GetHex()));\n+    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n@@ -395,7 +397,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n     strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), Params(CBaseChainParams::MAIN).GetDefaultPort(), Params(CBaseChainParams::TESTNET).GetDefaultPort()));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n     strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n@@ -432,8 +434,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n         strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n+        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n+        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", DEFAULT_DISABLE_SAFEMODE));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", DEFAULT_TESTSAFEMODE));\n@@ -474,7 +476,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n+        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", defaultChainParams->RequireStandard()));\n         strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n         strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost about 1/3 of its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n     }"
      },
      {
        "sha": "fdecb5cb1cfd932b856c1713f50c7d2ddb0e2f72",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2351a064a604f5aa961a38a3920289546dada16f/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2351a064a604f5aa961a38a3920289546dada16f/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=2351a064a604f5aa961a38a3920289546dada16f",
        "patch": "@@ -219,14 +219,16 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             if (GUIUtil::parseBitcoinURI(arg, &r) && !r.address.isEmpty())\n             {\n                 CBitcoinAddress address(r.address.toStdString());\n+                auto tempChainParams = CreateChainParams(CBaseChainParams::MAIN);\n \n-                if (address.IsValid(Params(CBaseChainParams::MAIN)))\n+                if (address.IsValid(*tempChainParams))\n                 {\n                     SelectParams(CBaseChainParams::MAIN);\n                 }\n-                else if (address.IsValid(Params(CBaseChainParams::TESTNET)))\n-                {\n-                    SelectParams(CBaseChainParams::TESTNET);\n+                else {\n+                    tempChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n+                    if (address.IsValid(*tempChainParams))\n+                        SelectParams(CBaseChainParams::TESTNET);\n                 }\n             }\n         }"
      },
      {
        "sha": "656aec606b6c2cc30a9211418960a3d1f186da85",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2351a064a604f5aa961a38a3920289546dada16f/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2351a064a604f5aa961a38a3920289546dada16f/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=2351a064a604f5aa961a38a3920289546dada16f",
        "patch": "@@ -39,17 +39,18 @@ static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)\n \n BOOST_AUTO_TEST_CASE(block_subsidy_test)\n {\n-    TestBlockSubsidyHalvings(Params(CBaseChainParams::MAIN).GetConsensus()); // As in main\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    TestBlockSubsidyHalvings(chainParams->GetConsensus()); // As in main\n     TestBlockSubsidyHalvings(150); // As in regtest\n     TestBlockSubsidyHalvings(1000); // Just another interval\n }\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        CAmount nSubsidy = GetBlockSubsidy(nHeight, consensusParams);\n+        CAmount nSubsidy = GetBlockSubsidy(nHeight, chainParams->GetConsensus());\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));"
      },
      {
        "sha": "fadff612d4d88da302e85992e23dd41bf5c15d7d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2351a064a604f5aa961a38a3920289546dada16f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2351a064a604f5aa961a38a3920289546dada16f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=2351a064a604f5aa961a38a3920289546dada16f",
        "patch": "@@ -194,7 +194,8 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     // Note that by default, these tests run with size accounting enabled.\n-    const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const CChainParams& chainparams = *chainParams;\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     std::unique_ptr<CBlockTemplate> pblocktemplate;\n     CMutableTransaction tx,tx2;"
      },
      {
        "sha": "79405ec4d1ed3297cb6266b62a354d83b1f4c92d",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2351a064a604f5aa961a38a3920289546dada16f/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2351a064a604f5aa961a38a3920289546dada16f/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=2351a064a604f5aa961a38a3920289546dada16f",
        "patch": "@@ -209,7 +209,8 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     }\n \n     // Sanity checks of version bit deployments\n-    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n         uint32_t bitmask = VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)i);\n         // Make sure that no deployment tries to set an invalid bit.\n@@ -235,7 +236,8 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // Check that ComputeBlockVersion will set the appropriate bit correctly\n     // on mainnet.\n-    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n \n     // Use the TESTDUMMY deployment for testing purposes.\n     int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;"
      }
    ]
  },
  {
    "sha": "c1082a7d359ad984e84195175a01f2f30671b172",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTA4MmE3ZDM1OWFkOTg0ZTg0MTk1MTc1YTAxZjJmMzA2NzFiMTcy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-20T23:33:08Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-03T16:18:09Z"
      },
      "message": "Chainparams: Use the factory for pow tests",
      "tree": {
        "sha": "c8195bee0e484cae16ff904b5d482129c7964240",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8195bee0e484cae16ff904b5d482129c7964240"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1082a7d359ad984e84195175a01f2f30671b172",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZCgLBAAoJEIhmwY6hyUSiMnAP/jdV5XIxLKd2ov1CDVw+cN9N\nTdBwI+mUR9ChAyRBGiE/PVe9IcJFvkAi8HWJsZKTG+dnAgw6cVXoePclz5WFirCv\nbFVVftDfrjdl+3tbEvt07/y+6pRuceWu/w3SfTurGsSO5zJMlyIzOT/2ztupv7mt\nRYSvtc9gSx74L291mFx1EUAAD5MsGIjZd2k2PvkEbBJvmaKdxyHCvNlfE1WE3zuY\nMu4Us8TQ9/hACb8+krRJmA6+yketTTZkP4k1c9GkpkaHQJeRKSNu8WKUWTDNAFlf\niimWDZ9CGAI7Gl7fa/xiId4W6MXWhLHgzExbdF2/PKXmYoaijpJgvdYdzTMbebva\nVK/DHXcNjnbqB4fUwL0OiikjDyvsauA+Ixrs1jFNQJOOi6B9AGJeIC0vXsUypJ5b\n5mnzqNQCyxac29Llvbk4UrRPdSSNKX0cMLhEujH2ltu/AslQqlshszTrTXTn9x7q\nhyu3IfshlXZL11zW21BjFX18fDUYyhPdWWXBk6uQCRo11YIYGQtOPYmhkGueXaAl\nGqq43BHff+JuER70t8vOMGiU8YsYTCnHn0Qqa9eAey0+royOAhv2J2V0Ivv9dUIP\nn8y4pmOnyYdVMvLm3jllaNeugXPJ1qO4FEZnJinasqrSXtutU9uMbXyP/k2mJcYf\nAtYItA0g38QXHgXiQwZS\n=vFhJ\n-----END PGP SIGNATURE-----",
        "payload": "tree c8195bee0e484cae16ff904b5d482129c7964240\nparent 2351a064a604f5aa961a38a3920289546dada16f\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1477006388 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1493828289 +0200\n\nChainparams: Use the factory for pow tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1082a7d359ad984e84195175a01f2f30671b172",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1082a7d359ad984e84195175a01f2f30671b172",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1082a7d359ad984e84195175a01f2f30671b172/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2351a064a604f5aa961a38a3920289546dada16f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2351a064a604f5aa961a38a3920289546dada16f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2351a064a604f5aa961a38a3920289546dada16f"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 11,
      "deletions": 21
    },
    "files": [
      {
        "sha": "3b79f8000d3419c41a6736d6c1cf6b1f5086b37e",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 21,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1082a7d359ad984e84195175a01f2f30671b172/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1082a7d359ad984e84195175a01f2f30671b172/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=c1082a7d359ad984e84195175a01f2f30671b172",
        "patch": "@@ -16,69 +16,59 @@ BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00d86a);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00d86a);\n }\n \n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00ffff);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00ffff);\n }\n \n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1c0168fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1c0168fd);\n }\n \n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, params), 0x1d00e1fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00e1fd);\n }\n \n BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n {\n-    SelectParams(CBaseChainParams::MAIN);\n-    const Consensus::Params& params = Params().GetConsensus();\n-\n+    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n     std::vector<CBlockIndex> blocks(10000);\n     for (int i = 0; i < 10000; i++) {\n         blocks[i].pprev = i ? &blocks[i - 1] : NULL;\n         blocks[i].nHeight = i;\n-        blocks[i].nTime = 1269211443 + i * params.nPowTargetSpacing;\n+        blocks[i].nTime = 1269211443 + i * chainParams->GetConsensus().nPowTargetSpacing;\n         blocks[i].nBits = 0x207fffff; /* target 0x7fffff000... */\n         blocks[i].nChainWork = i ? blocks[i - 1].nChainWork + GetBlockProof(blocks[i - 1]) : arith_uint256(0);\n     }\n@@ -88,7 +78,7 @@ BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n         CBlockIndex *p2 = &blocks[GetRand(10000)];\n         CBlockIndex *p3 = &blocks[GetRand(10000)];\n \n-        int64_t tdiff = GetBlockProofEquivalentTime(*p1, *p2, *p3, params);\n+        int64_t tdiff = GetBlockProofEquivalentTime(*p1, *p2, *p3, chainParams->GetConsensus());\n         BOOST_CHECK_EQUAL(tdiff, p1->GetBlockTime() - p2->GetBlockTime());\n     }\n }"
      }
    ]
  }
]