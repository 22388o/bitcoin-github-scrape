[
  {
    "sha": "99464bc38e9575ff47f8e33223b252dcea2055e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTQ2NGJjMzhlOTU3NWZmNDdmOGUzMzIyM2IyNTJkY2VhMjA1NWUz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-01-19T18:01:18Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-01-25T14:48:14Z"
      },
      "message": "net: Consistently use GetTimeMicros() for inactivity checks\n\nThe use of mocktime in test logic means that comparisons between\nGetTime() and GetTimeMicros()/1000000 are unreliable since the former\ncan use mocktime values while the latter always gets the system clock;\nthis changes the networking code's inactivity checks to consistently\nuse the system clock for inactivity comparisons.\n\nAlso remove some hacks from setmocktime() that are no longer needed,\nnow that we're using the system clock for nLastSend and nLastRecv.",
      "tree": {
        "sha": "8b01122ab862afac1470e86d0a780780329250d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b01122ab862afac1470e86d0a780780329250d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99464bc38e9575ff47f8e33223b252dcea2055e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99464bc38e9575ff47f8e33223b252dcea2055e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99464bc38e9575ff47f8e33223b252dcea2055e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99464bc38e9575ff47f8e33223b252dcea2055e3/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/054d664215ca8d5f17d8aadbfc5b78a8dcd5115c"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 28,
      "deletions": 18
    },
    "files": [
      {
        "sha": "97480df13145ff118575618edd9b4353482e6f67",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -391,7 +391,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n-        pnode->nTimeConnected = GetTime();\n+        pnode->nTimeConnected = GetSystemTimeInSeconds();\n         pnode->AddRef();\n         GetNodeSignals().InitializeNode(pnode, *this);\n         {\n@@ -771,7 +771,7 @@ size_t CConnman::SocketSendData(CNode *pnode)\n         assert(data.size() > pnode->nSendOffset);\n         int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         if (nBytes > 0) {\n-            pnode->nLastSend = GetTime();\n+            pnode->nLastSend = GetSystemTimeInSeconds();\n             pnode->nSendBytes += nBytes;\n             pnode->nSendOffset += nBytes;\n             nSentSize += nBytes;\n@@ -1284,7 +1284,7 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Inactivity checking\n             //\n-            int64_t nTime = GetTime();\n+            int64_t nTime = GetSystemTimeInSeconds();\n             if (nTime - pnode->nTimeConnected > 60)\n             {\n                 if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n@@ -2570,7 +2570,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nLastRecv = 0;\n     nSendBytes = 0;\n     nRecvBytes = 0;\n-    nTimeConnected = GetTime();\n+    nTimeConnected = GetSystemTimeInSeconds();\n     nTimeOffset = 0;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;"
      },
      {
        "sha": "60406c20597772b6b4de88c893a3a6fd7ef05fbd",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -1023,11 +1023,11 @@ void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n         peerAddrDetails += \"<br />\" + tr(\"via %1\").arg(QString::fromStdString(stats->nodeStats.addrLocal));\n     ui->peerHeading->setText(peerAddrDetails);\n     ui->peerServices->setText(GUIUtil::formatServicesStr(stats->nodeStats.nServices));\n-    ui->peerLastSend->setText(stats->nodeStats.nLastSend ? GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nLastSend) : tr(\"never\"));\n-    ui->peerLastRecv->setText(stats->nodeStats.nLastRecv ? GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nLastRecv) : tr(\"never\"));\n+    ui->peerLastSend->setText(stats->nodeStats.nLastSend ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastSend) : tr(\"never\"));\n+    ui->peerLastRecv->setText(stats->nodeStats.nLastRecv ? GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nLastRecv) : tr(\"never\"));\n     ui->peerBytesSent->setText(FormatBytes(stats->nodeStats.nSendBytes));\n     ui->peerBytesRecv->setText(FormatBytes(stats->nodeStats.nRecvBytes));\n-    ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nTimeConnected));\n+    ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nTimeConnected));\n     ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingTime));\n     ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingWait));\n     ui->peerMinPing->setText(GUIUtil::formatPingTime(stats->nodeStats.dMinPing));"
      },
      {
        "sha": "480c45516c55e1424f67d9a05a66e50a37c6ad4e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -431,22 +431,16 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     if (!Params().MineBlocksOnDemand())\n         throw runtime_error(\"setmocktime for regression testing (-regtest mode) only\");\n \n-    // cs_vNodes is locked and node send/receive times are updated\n-    // atomically with the time change to prevent peers from being\n-    // disconnected because we think we haven't communicated with them\n-    // in a long time.\n+    // For now, don't change mocktime if we're in the middle of validation, as\n+    // this could have an effect on mempool time-based eviction, as well as\n+    // IsCurrentForFeeEstimation() and IsInitialBlockDownload().\n+    // TODO: figure out the right way to synchronize around mocktime, and\n+    // ensure all callsites of GetTime() are accessing this safely.\n     LOCK(cs_main);\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n     SetMockTime(request.params[0].get_int64());\n \n-    uint64_t t = GetTime();\n-    if(g_connman) {\n-        g_connman->ForEachNode([t](CNode* pnode) {\n-            pnode->nLastSend = pnode->nLastRecv = t;\n-        });\n-    }\n-\n     return NullUniValue;\n }\n "
      },
      {
        "sha": "87a25866e9a5d32bf0b60006cd7dacfb54adbb6e",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -46,6 +46,11 @@ int64_t GetTimeMicros()\n     return now;\n }\n \n+int64_t GetSystemTimeInSeconds()\n+{\n+    return GetTimeMicros()/1000000;\n+}\n+\n /** Return a time useful for the debug log */\n int64_t GetLogTimeMicros()\n {"
      },
      {
        "sha": "05c6790495098dcdaaaf5b2440dbc750def49876",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99464bc38e9575ff47f8e33223b252dcea2055e3/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99464bc38e9575ff47f8e33223b252dcea2055e3/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=99464bc38e9575ff47f8e33223b252dcea2055e3",
        "patch": "@@ -9,9 +9,20 @@\n #include <stdint.h>\n #include <string>\n \n+/**\n+ * GetTimeMicros() and GetTimeMillis() both return the system time, but in\n+ * different units. GetTime() returns the sytem time in seconds, but also\n+ * supports mocktime, where the time can be specified by the user, eg for\n+ * testing (eg with the setmocktime rpc, or -mocktime argument).\n+ *\n+ * TODO: Rework these functions to be type-safe (so that we don't inadvertently\n+ * compare numbers with different units, or compare a mocktime to system time).\n+ */\n+\n int64_t GetTime();\n int64_t GetTimeMillis();\n int64_t GetTimeMicros();\n+int64_t GetSystemTimeInSeconds(); // Like GetTime(), but not mockable\n int64_t GetLogTimeMicros();\n void SetMockTime(int64_t nMockTimeIn);\n void MilliSleep(int64_t n);"
      }
    ]
  }
]