[
  {
    "sha": "cc337026841812efbc5a11e0ecf042862d531549",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzMzNzAyNjg0MTgxMmVmYmM1YTExZTBlY2YwNDI4NjJkNTMxNTQ5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-22T20:02:44Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-02-25T23:38:47Z"
      },
      "message": "allocators: split allocators and pagelocker\n\nPagelocker is only needed for secure (usually wallet) operations, so don't make\nthe zero-after-free allocator depend on it.",
      "tree": {
        "sha": "cb74a0d601e90b22b994bbd0b1a84bfce63f15d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb74a0d601e90b22b994bbd0b1a84bfce63f15d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc337026841812efbc5a11e0ecf042862d531549",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc337026841812efbc5a11e0ecf042862d531549",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc337026841812efbc5a11e0ecf042862d531549",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc337026841812efbc5a11e0ecf042862d531549/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aaba10f275059cd762c1f07597aa5efb24176cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaba10f275059cd762c1f07597aa5efb24176cdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aaba10f275059cd762c1f07597aa5efb24176cdd"
      }
    ],
    "stats": {
      "total": 231,
      "additions": 129,
      "deletions": 102
    },
    "files": [
      {
        "sha": "df90821778b40b053db3b2529344bb58fb442782",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -72,7 +72,6 @@ endif\n BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n-  allocators.h \\\n   amount.h \\\n   arith_uint256.h \\\n   base58.h \\\n@@ -123,7 +122,10 @@ BITCOIN_CORE_H = \\\n   script/standard.h \\\n   serialize.h \\\n   streams.h \\\n+  support/allocators/secure.h \\\n+  support/allocators/zeroafterfree.h \\\n   support/cleanse.h \\\n+  support/pagelocker.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -231,7 +233,6 @@ univalue_libbitcoin_univalue_a_SOURCES = \\\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n-  allocators.cpp \\\n   arith_uint256.cpp \\\n   amount.cpp \\\n   base58.cpp \\\n@@ -262,6 +263,7 @@ libbitcoin_common_a_SOURCES = \\\n # backward-compatibility objects and their sanity checks are linked.\n libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_util_a_SOURCES = \\\n+  support/pagelocker.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n   compat/glibc_sanity.cpp \\"
      },
      {
        "sha": "8de90046a9512007528243d897ab0bbf5c95dfe3",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -19,6 +19,7 @@\n #include \"pubkey.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"support/allocators/zeroafterfree.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "32746b00dfb0a2fd22f2e38f4bb0ba19ed608174",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -5,9 +5,9 @@\n #ifndef BITCOIN_CRYPTER_H\n #define BITCOIN_CRYPTER_H\n \n-#include \"allocators.h\"\n #include \"keystore.h\"\n #include \"serialize.h\"\n+#include \"support/allocators/secure.h\"\n \n class uint256;\n "
      },
      {
        "sha": "1f1d14288741b77a21d503fdc0f2ae2617c65f11",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -6,8 +6,8 @@\n #ifndef BITCOIN_KEY_H\n #define BITCOIN_KEY_H\n \n-#include \"allocators.h\"\n #include \"serialize.h\"\n+#include \"support/allocators/secure.h\"\n #include \"uint256.h\"\n \n #include <stdexcept>"
      },
      {
        "sha": "229139e65cc46ebc954f5108824009eb44b3f334",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -8,7 +8,7 @@\n #include \"guiconstants.h\"\n #include \"walletmodel.h\"\n \n-#include \"allocators.h\"\n+#include \"support/allocators/secure.h\"\n \n #include <QKeyEvent>\n #include <QMessageBox>"
      },
      {
        "sha": "e91bafe041cd16d8f081ca536f64ff2be94ed584",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -8,7 +8,7 @@\n #include \"paymentrequestplus.h\"\n #include \"walletmodeltransaction.h\"\n \n-#include \"allocators.h\" /* for SecureString */\n+#include \"support/allocators/secure.h\"\n \n #include <map>\n #include <vector>"
      },
      {
        "sha": "fa1e18defe2daea1896d96b0cbcf31e6430325ec",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_STREAMS_H\n #define BITCOIN_STREAMS_H\n \n-#include \"allocators.h\"\n+#include \"support/allocators/zeroafterfree.h\"\n #include \"serialize.h\"\n \n #include <algorithm>"
      },
      {
        "sha": "7a74d87bb494af5687942b3c33ef6213c38fb143",
        "filename": "src/support/allocators/secure.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/support/allocators/secure.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/support/allocators/secure.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/secure.h?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ALLOCATORS_SECURE_H\n+#define BITCOIN_ALLOCATORS_SECURE_H\n+\n+#include \"support/pagelocker.h\"\n+\n+#include <string>\n+\n+//\n+// Allocator that locks its contents from being paged\n+// out of memory and clears its contents before deletion.\n+//\n+template <typename T>\n+struct secure_allocator : public std::allocator<T> {\n+    // MSVC8 default copy constructor is broken\n+    typedef std::allocator<T> base;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::difference_type difference_type;\n+    typedef typename base::pointer pointer;\n+    typedef typename base::const_pointer const_pointer;\n+    typedef typename base::reference reference;\n+    typedef typename base::const_reference const_reference;\n+    typedef typename base::value_type value_type;\n+    secure_allocator() throw() {}\n+    secure_allocator(const secure_allocator& a) throw() : base(a) {}\n+    template <typename U>\n+    secure_allocator(const secure_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n+    ~secure_allocator() throw() {}\n+    template <typename _Other>\n+    struct rebind {\n+        typedef secure_allocator<_Other> other;\n+    };\n+\n+    T* allocate(std::size_t n, const void* hint = 0)\n+    {\n+        T* p;\n+        p = std::allocator<T>::allocate(n, hint);\n+        if (p != NULL)\n+            LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n+        return p;\n+    }\n+\n+    void deallocate(T* p, std::size_t n)\n+    {\n+        if (p != NULL) {\n+            memory_cleanse(p, sizeof(T) * n);\n+            LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n+        }\n+        std::allocator<T>::deallocate(p, n);\n+    }\n+};\n+\n+// This is exactly like std::string, but with a custom allocator.\n+typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n+\n+#endif // BITCOIN_ALLOCATORS_SECURE_H"
      },
      {
        "sha": "b01fcd088bc30837828bec2c76bc92aa9209824f",
        "filename": "src/support/allocators/zeroafterfree.h",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/support/allocators/zeroafterfree.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/support/allocators/zeroafterfree.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/zeroafterfree.h?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ALLOCATORS_ZEROAFTERFREE_H\n+#define BITCOIN_ALLOCATORS_ZEROAFTERFREE_H\n+\n+#include \"support/cleanse.h\"\n+\n+#include <memory>\n+#include <vector>\n+\n+template <typename T>\n+struct zero_after_free_allocator : public std::allocator<T> {\n+    // MSVC8 default copy constructor is broken\n+    typedef std::allocator<T> base;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::difference_type difference_type;\n+    typedef typename base::pointer pointer;\n+    typedef typename base::const_pointer const_pointer;\n+    typedef typename base::reference reference;\n+    typedef typename base::const_reference const_reference;\n+    typedef typename base::value_type value_type;\n+    zero_after_free_allocator() throw() {}\n+    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n+    template <typename U>\n+    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n+    ~zero_after_free_allocator() throw() {}\n+    template <typename _Other>\n+    struct rebind {\n+        typedef zero_after_free_allocator<_Other> other;\n+    };\n+\n+    void deallocate(T* p, std::size_t n)\n+    {\n+        if (p != NULL)\n+            memory_cleanse(p, sizeof(T) * n);\n+        std::allocator<T>::deallocate(p, n);\n+    }\n+};\n+\n+// Byte-vector that clears its contents before deletion.\n+typedef std::vector<char, zero_after_free_allocator<char> > CSerializeData;\n+\n+#endif // BITCOIN_ALLOCATORS_ZEROAFTERFREE_H"
      },
      {
        "sha": "440e0a5193a8cccb245efd3ea0dd3f6338de78d1",
        "filename": "src/support/pagelocker.cpp",
        "status": "renamed",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/support/pagelocker.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/support/pagelocker.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.cpp?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -2,7 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"allocators.h\"\n+#include \"support/pagelocker.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n \n #ifdef WIN32\n #ifdef _WIN32_WINNT",
        "previous_filename": "src/allocators.cpp"
      },
      {
        "sha": "964be1aec41b4fa4a70fae1985939f03091920e1",
        "filename": "src/support/pagelocker.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 93,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/support/pagelocker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/support/pagelocker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.h?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -3,15 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_ALLOCATORS_H\n-#define BITCOIN_ALLOCATORS_H\n+#ifndef BITCOIN_ALLOCATORS_PAGELOCKER_H\n+#define BITCOIN_ALLOCATORS_PAGELOCKER_H\n \n #include \"support/cleanse.h\"\n \n #include <map>\n-#include <string>\n-#include <string.h>\n-#include <vector>\n \n #include <boost/thread/mutex.hpp>\n #include <boost/thread/once.hpp>\n@@ -178,91 +175,4 @@ void UnlockObject(const T& t)\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n \n-//\n-// Allocator that locks its contents from being paged\n-// out of memory and clears its contents before deletion.\n-//\n-template <typename T>\n-struct secure_allocator : public std::allocator<T> {\n-    // MSVC8 default copy constructor is broken\n-    typedef std::allocator<T> base;\n-    typedef typename base::size_type size_type;\n-    typedef typename base::difference_type difference_type;\n-    typedef typename base::pointer pointer;\n-    typedef typename base::const_pointer const_pointer;\n-    typedef typename base::reference reference;\n-    typedef typename base::const_reference const_reference;\n-    typedef typename base::value_type value_type;\n-    secure_allocator() throw() {}\n-    secure_allocator(const secure_allocator& a) throw() : base(a) {}\n-    template <typename U>\n-    secure_allocator(const secure_allocator<U>& a) throw() : base(a)\n-    {\n-    }\n-    ~secure_allocator() throw() {}\n-    template <typename _Other>\n-    struct rebind {\n-        typedef secure_allocator<_Other> other;\n-    };\n-\n-    T* allocate(std::size_t n, const void* hint = 0)\n-    {\n-        T* p;\n-        p = std::allocator<T>::allocate(n, hint);\n-        if (p != NULL)\n-            LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n-        return p;\n-    }\n-\n-    void deallocate(T* p, std::size_t n)\n-    {\n-        if (p != NULL) {\n-            memory_cleanse(p, sizeof(T) * n);\n-            LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n-        }\n-        std::allocator<T>::deallocate(p, n);\n-    }\n-};\n-\n-\n-//\n-// Allocator that clears its contents before deletion.\n-//\n-template <typename T>\n-struct zero_after_free_allocator : public std::allocator<T> {\n-    // MSVC8 default copy constructor is broken\n-    typedef std::allocator<T> base;\n-    typedef typename base::size_type size_type;\n-    typedef typename base::difference_type difference_type;\n-    typedef typename base::pointer pointer;\n-    typedef typename base::const_pointer const_pointer;\n-    typedef typename base::reference reference;\n-    typedef typename base::const_reference const_reference;\n-    typedef typename base::value_type value_type;\n-    zero_after_free_allocator() throw() {}\n-    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n-    template <typename U>\n-    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)\n-    {\n-    }\n-    ~zero_after_free_allocator() throw() {}\n-    template <typename _Other>\n-    struct rebind {\n-        typedef zero_after_free_allocator<_Other> other;\n-    };\n-\n-    void deallocate(T* p, std::size_t n)\n-    {\n-        if (p != NULL)\n-            memory_cleanse(p, sizeof(T) * n);\n-        std::allocator<T>::deallocate(p, n);\n-    }\n-};\n-\n-// This is exactly like std::string, but with a custom allocator.\n-typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n-\n-// Byte-vector that clears its contents before deletion.\n-typedef std::vector<char, zero_after_free_allocator<char> > CSerializeData;\n-\n-#endif // BITCOIN_ALLOCATORS_H\n+#endif // BITCOIN_ALLOCATORS_PAGELOCKER_H",
        "previous_filename": "src/allocators.h"
      },
      {
        "sha": "d1d5a05c89a729fa8d2b2af605db938f7f6fc717",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc337026841812efbc5a11e0ecf042862d531549/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc337026841812efbc5a11e0ecf042862d531549/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=cc337026841812efbc5a11e0ecf042862d531549",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"util.h\"\n \n-#include \"allocators.h\"\n+#include \"support/allocators/secure.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      }
    ]
  }
]