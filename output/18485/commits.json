[
  {
    "sha": "8098dea06944f9de8b285f44958eb98761f133ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDk4ZGVhMDY5NDRmOWRlOGIyODVmNDQ5NThlYjk4NzYxZjEzM2Vl",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-03-31T09:54:49Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-04-24T15:18:34Z"
      },
      "message": "test: Add mempool_updatefromblock.py",
      "tree": {
        "sha": "9eb391b1486513b9b512a719be9974ee2ce008aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9eb391b1486513b9b512a719be9974ee2ce008aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8098dea06944f9de8b285f44958eb98761f133ee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl6jA00ACgkQQQEIES5+\nqB/4yQ//bnciwp5I3iV20JaaHoBFlUFY8/dQIl7G9RDnBN03czKrt/830xAD9mkB\nRFoAqK5TghkDQZHX/uQYlFrRfeFTRu8k9Vnlm30W7DC7b5bUB8CnO2T3xrEedHrf\n7gVfFZyi5zVdYMOK8sAdoh4fJCNgxZnHpgvWRx3319V9zPF1shetii2q5U2lrbRK\nXwr6DMDMzpSw4q9wBqpMP+SH4Q9Cx+PabxmqDotsrzXlZ9QuKO34IfyDuqs8nGcp\nzpmZAVvEJpBAwQwz6ZpLZ7uKdN2uYvK33pOaP72qTPx1L6xKxe8Uftv73sc7g30G\nazmDsh7z1E63xxUI3GC0mXJJNdhmEQbbXyU0dzYnkBoWt443EBdjB2oiyd+ZCFi9\ngkUzXUzrz20+VpxuUw6pCXOBPnknWLfeKjwQkFwFcAEVS/w68BrXX2JOJnz5ZA8m\n4YKNZEbjvE4m6W/2dnaNkYnuIiiCPNxPwHqbbIhrbceoqrGSPYtkoHjgIPkg3Yfh\nJqhZJSt1C9GczXcay27BUFw/EIGWjKbOf9pzmVXc+XDHIRWmPsL8N6CuApxp3aKO\ndy2BtMJGCp4uFCOmnpe+jeAgsPGqViAyXr8OYZLhgs7eAAZUhysJiFcy9V+wv8bN\n/XE+JziGmu4bXtc9PZr6CRjBZDqRHPiCmIQkc2yYcYfRyJNjko8=\n=0eh5\n-----END PGP SIGNATURE-----",
        "payload": "tree 9eb391b1486513b9b512a719be9974ee2ce008aa\nparent 965c0c37d54c727bee50920fdfa62f8174a94280\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1585648489 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1587741514 +0300\n\ntest: Add mempool_updatefromblock.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8098dea06944f9de8b285f44958eb98761f133ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8098dea06944f9de8b285f44958eb98761f133ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8098dea06944f9de8b285f44958eb98761f133ee/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "965c0c37d54c727bee50920fdfa62f8174a94280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965c0c37d54c727bee50920fdfa62f8174a94280",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/965c0c37d54c727bee50920fdfa62f8174a94280"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 124,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8a703ef0095e0b9dcd58f1c9b158861b9535ac55",
        "filename": "test/functional/mempool_updatefromblock.py",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8098dea06944f9de8b285f44958eb98761f133ee/test/functional/mempool_updatefromblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8098dea06944f9de8b285f44958eb98761f133ee/test/functional/mempool_updatefromblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_updatefromblock.py?ref=8098dea06944f9de8b285f44958eb98761f133ee",
        "patch": "@@ -0,0 +1,123 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool descendants/ancestors information update.\n+\n+Test mempool update of transaction descendants/ancestors information (count, size)\n+when transactions have been re-added from a disconnected block to the mempool.\n+\"\"\"\n+import time\n+\n+from decimal import Decimal\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+class MempoolUpdateFromBlockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-limitdescendantsize=1000', '-limitancestorsize=1000']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', end_address='', fee=Decimal(0.00100000)):\n+        \"\"\"Create an acyclic tournament (a type of directed graph) of transactions and use it for testing.\n+\n+        Keyword arguments:\n+        size -- the order N of the tournament which is equal to the number of the created transactions\n+        n_tx_to_mine -- the number of transaction that should be mined into a block\n+\n+        If all of the N created transactions tx[0]..tx[N-1] reside in the mempool,\n+        the following holds:\n+            the tx[K] transaction:\n+            - has N-K descendants (including this one), and\n+            - has K+1 ancestors (including this one)\n+\n+        More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n+        \"\"\"\n+\n+        if not start_input_txid:\n+            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n+\n+        if not end_address:\n+            end_address = self.nodes[0].getnewaddress()\n+\n+        first_block_hash = ''\n+        tx_id = []\n+        tx_size = []\n+        self.log.info('Creating {} transactions...'.format(size))\n+        for i in range(0, size):\n+            self.log.debug('Preparing transaction #{}...'.format(i))\n+            # Prepare inputs.\n+            if i == 0:\n+                inputs = [{'txid': start_input_txid, 'vout': 0}]\n+                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+            else:\n+                inputs = []\n+                inputs_value = 0\n+                for j, tx in enumerate(tx_id[0:i]):\n+                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n+                    vout = i - j - 1\n+                    inputs.append({'txid': tx_id[j], 'vout': vout})\n+                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n+\n+            self.log.debug('inputs={}'.format(inputs))\n+            self.log.debug('inputs_value={}'.format(inputs_value))\n+\n+            # Prepare outputs.\n+            tx_count = i + 1\n+            if tx_count < size:\n+                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n+                n_outputs = size - tx_count\n+                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n+                outputs = {}\n+                for n in range(0, n_outputs):\n+                    outputs[self.nodes[0].getnewaddress()] = output_value\n+            else:\n+                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n+                outputs = {end_address: output_value}\n+\n+            self.log.debug('output_value={}'.format(output_value))\n+            self.log.debug('outputs={}'.format(outputs))\n+\n+            # Create a new transaction.\n+            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n+            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n+            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n+\n+            if tx_count in n_tx_to_mine:\n+                # The created transactions are mined into blocks by batches.\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n+                block_hash = self.nodes[0].generate(1)[0]\n+                if not first_block_hash:\n+                    first_block_hash = block_hash\n+                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+                self.log.info('All of the transactions from the current batch have been mined into a block.')\n+            elif tx_count == size:\n+                # At the end all of the mined blocks are invalidated, and all of the created\n+                # transactions should be re-added from disconnected blocks to the mempool.\n+                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n+                start = time.time()\n+                self.nodes[0].invalidateblock(first_block_hash)\n+                end = time.time()\n+                assert_equal(len(self.nodes[0].getrawmempool()), size)\n+                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+\n+        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(tx_id):\n+            self.log.debug('Check transaction #{}.'.format(k))\n+            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n+            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n+            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n+            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+\n+    def run_test(self):\n+        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n+        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+\n+\n+if __name__ == '__main__':\n+    MempoolUpdateFromBlockTest().main()"
      },
      {
        "sha": "ee07476b836f193b39b8aa921155dba39959678c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8098dea06944f9de8b285f44958eb98761f133ee/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8098dea06944f9de8b285f44958eb98761f133ee/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=8098dea06944f9de8b285f44958eb98761f133ee",
        "patch": "@@ -90,6 +90,7 @@\n     'p2p_segwit.py',\n     'p2p_timeouts.py',\n     'p2p_tx_download.py',\n+    'mempool_updatefromblock.py',\n     'wallet_dump.py',\n     'wallet_listtransactions.py',\n     # vv Tests less than 60s vv"
      }
    ]
  }
]