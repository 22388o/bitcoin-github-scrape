[
  {
    "sha": "2eb3e797aaeac83a4edf727087a77422a2d18b68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWIzZTc5N2FhZWFjODNhNGVkZjcyNzA4N2E3NzQyMmEyZDE4YjY4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-08T21:23:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-08T21:24:03Z"
      },
      "message": "Avoid unnecessary copying of non-cheaply-copied types. Use pass by reference to const consistently.",
      "tree": {
        "sha": "ad19d6bfd7d7fb8558cfcfd087aadd747547cd61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad19d6bfd7d7fb8558cfcfd087aadd747547cd61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2eb3e797aaeac83a4edf727087a77422a2d18b68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eb3e797aaeac83a4edf727087a77422a2d18b68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2eb3e797aaeac83a4edf727087a77422a2d18b68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eb3e797aaeac83a4edf727087a77422a2d18b68/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4805ce04645f3203b0cfd3d66ea710e7433eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4805ce04645f3203b0cfd3d66ea710e7433eb4"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "a666ed6eead756577be950ba3cab75ad8dab1c56",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -242,7 +242,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n {\n     uint64_t nPotentialBlockSize = nBlockSize; // only used with fNeedSizeAccounting\n-    for (const CTxMemPool::txiter it : package) {\n+    for (const CTxMemPool::txiter& it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n         if (!fIncludeWitness && it->GetTx().HasWitness())\n@@ -284,7 +284,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n         indexed_modified_transaction_set &mapModifiedTx)\n {\n     int nDescendantsUpdated = 0;\n-    for (const CTxMemPool::txiter it : alreadyAdded) {\n+    for (const CTxMemPool::txiter& it : alreadyAdded) {\n         CTxMemPool::setEntries descendants;\n         mempool.CalculateDescendants(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set"
      },
      {
        "sha": "91a6e7f62ddaf82bbee327cbbf86f5139fc4c7b4",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -48,7 +48,7 @@ void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)\n {\n     QIcon new_ico;\n-    for (const QSize sz : ico.availableSizes())\n+    for (const QSize& sz : ico.availableSizes())\n     {\n         QImage img(ico.pixmap(sz).toImage());\n         MakeSingleColorImage(img, colorbase);"
      },
      {
        "sha": "ec2956a2e543b6402cdebb726f512f727b42fba0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -44,7 +44,7 @@ static std::mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock;\n \n-extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n+extern void TxToJSON(const CTransaction& tx, const uint256& hashBlock, UniValue& entry);\n \n double GetDifficulty(const CBlockIndex* blockindex)\n {\n@@ -796,7 +796,7 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n     ss << hash;\n     ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase);\n     stats.nTransactions++;\n-    for (const auto output : outputs) {\n+    for (const auto& output : outputs) {\n         ss << VARINT(output.first + 1);\n         ss << *(const CScriptBase*)(&output.second.out.scriptPubKey);\n         ss << VARINT(output.second.out.nValue);"
      },
      {
        "sha": "b3ce4d685a8a3b6e8ce7e61147911c84cb574be9",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -34,7 +34,7 @@\n #include <univalue.h>\n \n \n-void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+void TxToJSON(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex.\n     //"
      },
      {
        "sha": "bb64028d93262b334aaf9ed8e3e864047060e3c1",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -74,12 +74,12 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n         setAllDescendants.insert(cit);\n         stageEntries.erase(cit);\n         const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (const txiter childEntry : setChildren) {\n+        for (const txiter& childEntry : setChildren) {\n             cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n             if (cacheIt != cachedDescendants.end()) {\n                 // We've already calculated this one, just add the entries for this set\n                 // but don't traverse again.\n-                for (const txiter cacheEntry : cacheIt->second) {\n+                for (const txiter& cacheEntry : cacheIt->second) {\n                     setAllDescendants.insert(cacheEntry);\n                 }\n             } else if (!setAllDescendants.count(childEntry)) {\n@@ -865,7 +865,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n     LogPrintf(\"PrioritiseTransaction: %s feerate += %s\\n\", hash.ToString(), FormatMoney(nFeeDelta));\n }\n \n-void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n+void CTxMemPool::ApplyDelta(const uint256& hash, CAmount &nFeeDelta) const\n {\n     LOCK(cs);\n     std::map<uint256, CAmount>::const_iterator pos = mapDeltas.find(hash);\n@@ -875,7 +875,7 @@ void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n     nFeeDelta += delta;\n }\n \n-void CTxMemPool::ClearPrioritisation(const uint256 hash)\n+void CTxMemPool::ClearPrioritisation(const uint256& hash)\n {\n     LOCK(cs);\n     mapDeltas.erase(hash);"
      },
      {
        "sha": "ab07b60e90635e9d5ce971b2b095f371c917b1b9",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -539,8 +539,8 @@ class CTxMemPool\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta);\n-    void ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const;\n-    void ClearPrioritisation(const uint256 hash);\n+    void ApplyDelta(const uint256& hash, CAmount &nFeeDelta) const;\n+    void ClearPrioritisation(const uint256& hash);\n \n public:\n     /** Remove a set of transactions from the mempool."
      },
      {
        "sha": "a3b52906ab53badf24ca39bef8ced1102764ed2f",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -66,7 +66,7 @@ bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable)\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256& txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable)\n     :\n     txid(std::move(txidIn)),\n     nOldFee(0),"
      },
      {
        "sha": "9daa24f9f5903cfc17db8dbb4c4f177e73d1accb",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -24,7 +24,7 @@ enum class BumpFeeResult\n class CFeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable);\n+    CFeeBumper(const CWallet *pWalletIn, const uint256& txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable);\n     BumpFeeResult getResult() const { return currentResult; }\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }"
      },
      {
        "sha": "1591a0273ae50971e6095b9ef989758c4a578dd4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -3768,7 +3768,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     return strUsage;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n+CWallet* CWallet::CreateWalletFromFile(const std::string& walletFile)\n {\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;"
      },
      {
        "sha": "567b84691a43cb8f5821efc8df9107bcb5f85768",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb3e797aaeac83a4edf727087a77422a2d18b68/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "patch": "@@ -1096,7 +1096,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     static std::string GetWalletHelpString(bool showDebug);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* CreateWalletFromFile(const std::string walletFile);\n+    static CWallet* CreateWalletFromFile(const std::string& walletFile);\n     static bool InitLoadWallet();\n \n     /**"
      }
    ]
  },
  {
    "sha": "2b7df00a5c6217e08e77a6b2421f22f297100abd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjdkZjAwYTVjNjIxN2UwOGU3N2E2YjI0MjFmMjJmMjk3MTAwYWJk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-08T21:30:05Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-08T21:30:05Z"
      },
      "message": "Don't use pass by reference to const for cheaply-copied fundamental types (bool, char, etc.).",
      "tree": {
        "sha": "d5cc2776f7158f3a8405bcaafe93642961112e47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5cc2776f7158f3a8405bcaafe93642961112e47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b7df00a5c6217e08e77a6b2421f22f297100abd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b7df00a5c6217e08e77a6b2421f22f297100abd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b7df00a5c6217e08e77a6b2421f22f297100abd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b7df00a5c6217e08e77a6b2421f22f297100abd/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eb3e797aaeac83a4edf727087a77422a2d18b68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2eb3e797aaeac83a4edf727087a77422a2d18b68"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "63ec08502fb379a470daedfb7335a2e15708c8b1",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b7df00a5c6217e08e77a6b2421f22f297100abd/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b7df00a5c6217e08e77a6b2421f22f297100abd/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=2b7df00a5c6217e08e77a6b2421f22f297100abd",
        "patch": "@@ -241,8 +241,8 @@ class CDataStream\n     const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }\n     reference operator[](size_type pos)              { return vch[pos + nReadPos]; }\n     void clear()                                     { vch.clear(); nReadPos = 0; }\n-    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }\n-    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }\n+    iterator insert(iterator it, const char x=char()) { return vch.insert(it, x); }\n+    void insert(iterator it, size_type n, const char x) { vch.insert(it, n, x); }\n     value_type* data()                               { return vch.data() + nReadPos; }\n     const value_type* data() const                   { return vch.data() + nReadPos; }\n "
      },
      {
        "sha": "3d19282f44e2514c66262e3b90686e639327e13d",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b7df00a5c6217e08e77a6b2421f22f297100abd/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b7df00a5c6217e08e77a6b2421f22f297100abd/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=2b7df00a5c6217e08e77a6b2421f22f297100abd",
        "patch": "@@ -704,8 +704,8 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n         const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n         const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n         const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n-        const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n-        const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const std::string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n \n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;"
      },
      {
        "sha": "db257077a435c0d8df65bff020e52afa713e6402",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b7df00a5c6217e08e77a6b2421f22f297100abd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b7df00a5c6217e08e77a6b2421f22f297100abd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2b7df00a5c6217e08e77a6b2421f22f297100abd",
        "patch": "@@ -1683,7 +1683,7 @@ CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n     return credit;\n }\n \n-CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n+CAmount CWalletTx::GetImmatureCredit(const bool fUseCache) const\n {\n     if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n     {\n@@ -1697,7 +1697,7 @@ CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n+CAmount CWalletTx::GetAvailableCredit(const bool fUseCache) const\n {\n     if (pwallet == 0)\n         return 0;\n@@ -1727,7 +1727,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n     return nCredit;\n }\n \n-CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool fUseCache) const\n {\n     if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n     {\n@@ -1741,7 +1741,7 @@ CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool fUseCache) const\n {\n     if (pwallet == 0)\n         return 0;"
      },
      {
        "sha": "eff8eb0ea3cd62482966e62ee06fff31cf52a389",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b7df00a5c6217e08e77a6b2421f22f297100abd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b7df00a5c6217e08e77a6b2421f22f297100abd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2b7df00a5c6217e08e77a6b2421f22f297100abd",
        "patch": "@@ -444,10 +444,10 @@ class CWalletTx : public CMerkleTx\n     //! filter decides which addresses will count towards the debit\n     CAmount GetDebit(const isminefilter& filter) const;\n     CAmount GetCredit(const isminefilter& filter) const;\n-    CAmount GetImmatureCredit(bool fUseCache=true) const;\n-    CAmount GetAvailableCredit(bool fUseCache=true) const;\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetImmatureCredit(const bool fUseCache=true) const;\n+    CAmount GetAvailableCredit(const bool fUseCache=true) const;\n+    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n+    CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetChange() const;\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,"
      }
    ]
  }
]