[
  {
    "sha": "9b63c436a699a7c9dea0999db7053d554b87958a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjYzYzQzNmE2OTlhN2M5ZGVhMDk5OWRiNzA1M2Q1NTRiODc5NThh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T21:39:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T21:39:18Z"
      },
      "message": "Merge #15203: Fix issue #9683 \"gui, wallet: random abort (segmentation fault)\n\n364cff1cab Fix issue #9683 \"gui, wallet: random abort (segmentation fault) running master/HEAD\". (Chris Moore)\n\nPull request description:\n\n  Patch taken from @ryanofsky's comment https://github.com/bitcoin/bitcoin/issues/9683#issuecomment-448035913.\n\n  [MarcoFalke wrote](https://github.com/bitcoin/bitcoin/issues/9683#issuecomment-454066004):\n  > Mind to submit this patch as a pull request?\n\n  So that's what I'm doing.\n\n  I was regularly seeing crashes on startup before applying this patch and haven't seen a single crash on startup since applying it almost a month ago.\n\nTree-SHA512: 3bbb2291cdf03ab7e7b5b796df68d76272491e35d473a89f4550065554c092f867659a7b8d7a1a91461ae4dc9a3b13b72541eafdbd732536463e9f3cf82300c8",
      "tree": {
        "sha": "bce14d8f714afee826e1f86642a49c6a4a643203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bce14d8f714afee826e1f86642a49c6a4a643203"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b63c436a699a7c9dea0999db7053d554b87958a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcWgKGAAoJENLqSFDnUoslU0QP/j17u1HALMPh64LI7+wrKGs0\nGCgRTmXILei2+rAwR2F+4MwP7WACpuoXdYNNIFMQCU2BgzU212dcDQ9mmARpXSs8\nTz8hpMPkU1XX/0h7wBSRHu/UOVm3vYeAXs1b/Uwanw8S3dxsH7+JAyrUzIXIerjc\n69PuEhtGXvW4ujL1ItoxYmPaZMokKWKYrOJiULey4Tc5GRMll5cgbQnvYuHDFgDX\nd+922GZiqomsGJqyTzzLrKhVIK83wbTrTuCnDn/6rbcTQ3V8xaC0GWoAjw9lb7PH\nztsOGRh7x6PSiTC4D1GmHH5zeS9lV6FFZHl2O/D+IjIu0HTM75YLhfI/y90BWUNm\nQU7Eg/Xl5Ug+9d0Cw/wF4bVZhZpbPoPMTZd1r7Xbese1/yb97ujfPTdaRPhGs/5p\nsMQt1z1271spi9IesnaEbyFJULfItyog1U5IxMhgrFDKwof+BJHny4y3/nIaTxXi\ndqnIKTtDUghdONruUuYy4juJbs/bK3NQj5I30wS9EefGwxRaDsim18kavJoothNp\ncOYn3xeSW1D9FRFJsYfGtU3S5LZyRhq1S5Ls8PwO1YWqQ0aXSxwFpT5qKeAzm1XT\nx5uzEzR0nAI3ZCadx8Kn4QGrOOdgFQZJRqEVYnErCzzjVyzBe54xdWY98922xHY/\nlf2K+O/lO3EAkA2gdxO7\n=8htB\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGufV0jna5YgOit4eeslDbXUOxiMfQYSMZwwEYc3vug4CP/wEERnShpycvm+\nbZhWWWRfFd0I8BDtZ7XB5Vf511WKJ1rH6d6uCPEEXFoCifAItS7d48zq7NgAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BBUZYJgcNvQeRbVJlHyXkowCPEEXFoCiPAIrSlsKMUwZF4Ag9/jDS75DI4jImh0\ndHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23/8BBlPN0HS2Wwe/uJdY/+\ngpJyCPEEXFoCiPAIlVaOttuahuMAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5j\nYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEOrsqGoc/bOCwnGXc+abWSAI8QRc\nWgKI8AgFjmsE9hXSWwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree bce14d8f714afee826e1f86642a49c6a4a643203\nparent 30e799a5f7053d4050280aced2c9d8c5f0fea20e\nparent 364cff1cab443379bf777eeffe70a7b7b3150e50\nauthor MarcoFalke <falke.marco@gmail.com> 1549402756 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549402758 -0500\n\nMerge #15203: Fix issue #9683 \"gui, wallet: random abort (segmentation fault)\n\n364cff1cab Fix issue #9683 \"gui, wallet: random abort (segmentation fault) running master/HEAD\". (Chris Moore)\n\nPull request description:\n\n  Patch taken from @ryanofsky's comment https://github.com/bitcoin/bitcoin/issues/9683#issuecomment-448035913.\n\n  [MarcoFalke wrote](https://github.com/bitcoin/bitcoin/issues/9683#issuecomment-454066004):\n  > Mind to submit this patch as a pull request?\n\n  So that's what I'm doing.\n\n  I was regularly seeing crashes on startup before applying this patch and haven't seen a single crash on startup since applying it almost a month ago.\n\nTree-SHA512: 3bbb2291cdf03ab7e7b5b796df68d76272491e35d473a89f4550065554c092f867659a7b8d7a1a91461ae4dc9a3b13b72541eafdbd732536463e9f3cf82300c8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b63c436a699a7c9dea0999db7053d554b87958a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b63c436a699a7c9dea0999db7053d554b87958a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b63c436a699a7c9dea0999db7053d554b87958a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30e799a5f7053d4050280aced2c9d8c5f0fea20e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30e799a5f7053d4050280aced2c9d8c5f0fea20e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30e799a5f7053d4050280aced2c9d8c5f0fea20e"
      },
      {
        "sha": "364cff1cab443379bf777eeffe70a7b7b3150e50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/364cff1cab443379bf777eeffe70a7b7b3150e50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/364cff1cab443379bf777eeffe70a7b7b3150e50"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "762ec434a1d6b4ce648e0a4e376dc6424fc9fe76",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b63c436a699a7c9dea0999db7053d554b87958a/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b63c436a699a7c9dea0999db7053d554b87958a/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=9b63c436a699a7c9dea0999db7053d554b87958a",
        "patch": "@@ -229,8 +229,8 @@ void TransactionView::setModel(WalletModel *_model)\n         transactionView->setAlternatingRowColors(true);\n         transactionView->setSelectionBehavior(QAbstractItemView::SelectRows);\n         transactionView->setSelectionMode(QAbstractItemView::ExtendedSelection);\n+        transactionView->horizontalHeader()->setSortIndicator(TransactionTableModel::Date, Qt::DescendingOrder);\n         transactionView->setSortingEnabled(true);\n-        transactionView->sortByColumn(TransactionTableModel::Date, Qt::DescendingOrder);\n         transactionView->verticalHeader()->hide();\n \n         transactionView->setColumnWidth(TransactionTableModel::Status, STATUS_COLUMN_WIDTH);"
      }
    ]
  },
  {
    "sha": "9e7f8f6c827114141c038a1e6dee42c8c43ed522",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTdmOGY2YzgyNzExNDE0MWMwMzhhMWU2ZGVlNDJjOGM0M2VkNTIy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T22:14:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T22:14:30Z"
      },
      "message": "Merge #15327: tests: Make test updatecoins_simulation_test deterministic\n\nef0b01217a tests: Make updatecoins_simulation_test deterministic (practicalswift)\n\nPull request description:\n\n  Make test `updatecoins_simulation_test` deterministic.\n\n  Can be verified using `contrib/test_deterministic_coverage.sh` introduced in #15296.\n\n  Related:\n  * #15296: \"tests: Add script checking for deterministic line coverage in unit tests\"\n  * #15324: \"test: Make bloom tests deterministic\"\n  * #14343: \"coverage reports non-deterministic\"\n\nTree-SHA512: 3466e28a42dd3735effb8542044d88e8350a470729d4a4f02abce9d6367de6568d698131469ba154d3dc76d448bacb360b7aefd066bb5b91408c0be375dd3ecb",
      "tree": {
        "sha": "fc57c0e87604a80439e1c039bca657054b64461c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc57c0e87604a80439e1c039bca657054b64461c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e7f8f6c827114141c038a1e6dee42c8c43ed522",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcWgrHAAoJENLqSFDnUoslWPYP/1yIgfNgkkmyAZv/irktjjDu\njD2efOo2t2hR/wkLaApZde4HczS4v+F/XSeRaYWTjKN44kF3Qjbra5gqLHLNuZ8x\nfGRpN44fXkGXRV+HV6nzrgyznROOXTcWxpbBsv+/Hzp/EivgY9V5sW8V5L6cl3cr\nbEA3lPn8EjkQq8UPk+/uYrFjLrwZPGDZP1KOoG8OUxRBnTmQTKLOW+9xNa/HMrDX\n9DDvR2MeRD5vIp0JmcSYBFmZid6xrwz9cgp2/01pJcAe7BPBOkATZA+azvM6MHxu\n9BiWvDbVsRTDe6wAf5uAB18d3qcQeNINY7l77nE/C9woWW1QfQsVpg+KzvtFFKJN\nW7qa+QHjbIZpZahckwAC96J9UKtONG5uer6AV5kM4/0/2Q5kcvlhkSRv3xUqBmF3\nAki1o1Atwu4horBFR4iyvlJ3JGXl7ZR4W+aZjZPdrZGb9qvLO2V/nRXG9fD6mZLi\nsLs+bBmR5QXgTJvd0RAovGLtP3Xv+2bxElE3bFBs/E1rfGd3IVphMBURZ0SNc/iW\nM28g300IKK33ppi/UnjGgiBQcrw8qb6VUz/nbxz5LaXzutNphTjYD/LTZVxvlvkk\nUhkTipW0AIYN6pL7kmxUdGmvuFfcCZDn6ADWkEfTEhCBbjPYqEhsScxXA75rfFIC\nBZU0e9j5ab6y9bUT/oKh\n=/2t0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILqz9aRmQ5e747zyzVKT1vh0T7KTqP7zS5UchjWx8K4vCP/wEA3TvBJpnvxC\n7przAQnfdTsI8QRcWgrJ8AhmEysgbWLHCQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEH9O1EMBPxaewXOhjRjh\nyGII8QRcWgrJ8AhxIKpQzMcDwQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQ0+zwV+H7bwdITWX9F2VJPwjw\nEP04H4cByLzfMKpjVXp+PlcI8QRcWgrJ8Age4Kr/fB0VYQCD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQ2ntLZPTnVD6T\nE6THhqyJ4QjxBFxaCsnwCKgf+sIYOV1yAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree fc57c0e87604a80439e1c039bca657054b64461c\nparent 9b63c436a699a7c9dea0999db7053d554b87958a\nparent ef0b01217a556150e98a029adbc8b8062ca204fe\nauthor MarcoFalke <falke.marco@gmail.com> 1549404869 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549404870 -0500\n\nMerge #15327: tests: Make test updatecoins_simulation_test deterministic\n\nef0b01217a tests: Make updatecoins_simulation_test deterministic (practicalswift)\n\nPull request description:\n\n  Make test `updatecoins_simulation_test` deterministic.\n\n  Can be verified using `contrib/test_deterministic_coverage.sh` introduced in #15296.\n\n  Related:\n  * #15296: \"tests: Add script checking for deterministic line coverage in unit tests\"\n  * #15324: \"test: Make bloom tests deterministic\"\n  * #14343: \"coverage reports non-deterministic\"\n\nTree-SHA512: 3466e28a42dd3735effb8542044d88e8350a470729d4a4f02abce9d6367de6568d698131469ba154d3dc76d448bacb360b7aefd066bb5b91408c0be375dd3ecb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e7f8f6c827114141c038a1e6dee42c8c43ed522",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e7f8f6c827114141c038a1e6dee42c8c43ed522",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e7f8f6c827114141c038a1e6dee42c8c43ed522/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b63c436a699a7c9dea0999db7053d554b87958a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b63c436a699a7c9dea0999db7053d554b87958a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b63c436a699a7c9dea0999db7053d554b87958a"
      },
      {
        "sha": "ef0b01217a556150e98a029adbc8b8062ca204fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0b01217a556150e98a029adbc8b8062ca204fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0b01217a556150e98a029adbc8b8062ca204fe"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f6b97a686882c121c95b2d000cb568d46f0806c5",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e7f8f6c827114141c038a1e6dee42c8c43ed522/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e7f8f6c827114141c038a1e6dee42c8c43ed522/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=9e7f8f6c827114141c038a1e6dee42c8c43ed522",
        "patch": "@@ -279,6 +279,8 @@ UtxoData::iterator FindRandomFrom(const std::set<COutPoint> &utxoSet) {\n // has the expected effect (the other duplicate is overwritten at all cache levels)\n BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n {\n+    SeedInsecureRand(/* deterministic */ true);\n+\n     bool spent_a_duplicate_coinbase = false;\n     // A simple map to track what we expect the cache stack to represent.\n     std::map<COutPoint, Coin> result;"
      }
    ]
  },
  {
    "sha": "baf125b31d0b4d37fc54123bc2563dac9ffde024",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWYxMjViMzFkMGI0ZDM3ZmM1NDEyM2JjMjU2M2RhYzlmZmRlMDI0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T22:18:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T22:18:40Z"
      },
      "message": "Merge #15332: [Docs] Small updates to getrawtransaction description\n\n47012391ec [Docs] Small updates to getrawtransaction description (Amiti Uttarwar)\n\nPull request description:\n\n  As per review comments on https://github.com/bitcoin/bitcoin/pull/15159\n\nTree-SHA512: 0bbbe956b47d177f7e67c5ab2048287783327d9e07a679d64d79aee3ea8633e769f75b59d3dbce517924ba5d64d6c44f26bf49e16d40612463e460ad1a238129",
      "tree": {
        "sha": "9c9b4f333ecdb5bd3bc274464a32691b93ed09d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c9b4f333ecdb5bd3bc274464a32691b93ed09d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/baf125b31d0b4d37fc54123bc2563dac9ffde024",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcWgvAAAoJENLqSFDnUoslSJQQAIMuOoQS9QvYdFNe5GrtqBxH\nZZ6NJ/k6T6dTwB0pl0+A2SgPNRfOFjnOqHtkVyDULG0yZ24AHIKnqkYb2ya/lTQs\nBHJ8P/munvNgj53vdp6Gz+5mg7NFkhRb7KoCnS5Ycr5ahN9rRkud58hzZJhjVSIv\nG11aodOvSxVlCPQYiuiKK35m/CNyQcDaKW9u3MnugmxrSpEMQ6mTkodX17T4E23R\n+VzTSo0bkr9ogAiYdVKnqnLb6b74lzLJLLNjHFk+szhBTe2L35L7tOHalcmf/bTj\njfMjg3dVTmmUSOzxZM1kxZcbAY9RFelyiKT6pVDOCH9rMKSTee79KFZ5tnQgD9T+\nuuwbCyeCl+L5nh8Z47sqXOf80rhtNoMwDADE5zWoJKjvjJSIzTEmHCNUXDdbS7eh\nKlAtLvFuC1/XIbStN6XSkOzzWyZ5NprQTqox8u8GvPwg3OWzYhTrj3G/IDXDXrLi\nECV1Tl8fNldWALdW9rxxFZsl4JuAKDyF8nDInAgv5pfKEFzqdOu5vRRgrobTEG4d\ng0vx5HW0DPeDxPZ9lnMrD6gcoZgAwca1pusQdHPiEa6YhSoCqNHWQH2cEqZueOmt\nKDYx+MMzwyU67uKufrjBVle9wrwXFPFWiQBLBCHHzejMAlRjyO4PxoMIL268uKYd\nd7HbndU0rErz3qF7k94q\n=JUMp\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICiEiR/Uo2WbJZIqR52Jvypge7YKPdm73WCnouqtTsoBCP/wEFUDkGBSfGuD\ne1IzdUdbz3YI8CDezegdh/4ECXZtxvEuNzcmHXorFRrxHWruIBwFBkUmIwjxBFxa\nC8LwCIfCGfTXXQHEAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQcb9LBlWjN4JwsIt3V7utGAjwIEMtv7V4Un0i\nxZgKn/X6Xq6g5mGCYgq9Wgk6BQlgxqXbCPEEXFoLwvAI42xN104rhooAg9/jDS75\nDI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9y\nZ//wEJG/NCUyVLz53atZFWsMkPgI8QRcWgvC8AhnmlThiXCfdACD3+MNLvkMjiMi\naHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbfAQoyMo6go/w0fJ+tJP\nYAt3mAjwEG+MgqPxnQngAKyifiPiHCgI8CCSeuMOov82NEu8ds31tlcUrrquXuiB\nxRLcEGX84Nf2yQjxBFxaC8PwCKeUZwTASojXAIPf4w0u+QyOKShodHRwczovL2Zp\nbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 9c9b4f333ecdb5bd3bc274464a32691b93ed09d4\nparent 9e7f8f6c827114141c038a1e6dee42c8c43ed522\nparent 47012391ec25eb76669c7ba2aa458c3ac611289c\nauthor MarcoFalke <falke.marco@gmail.com> 1549405098 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549405120 -0500\n\nMerge #15332: [Docs] Small updates to getrawtransaction description\n\n47012391ec [Docs] Small updates to getrawtransaction description (Amiti Uttarwar)\n\nPull request description:\n\n  As per review comments on https://github.com/bitcoin/bitcoin/pull/15159\n\nTree-SHA512: 0bbbe956b47d177f7e67c5ab2048287783327d9e07a679d64d79aee3ea8633e769f75b59d3dbce517924ba5d64d6c44f26bf49e16d40612463e460ad1a238129\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baf125b31d0b4d37fc54123bc2563dac9ffde024",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/baf125b31d0b4d37fc54123bc2563dac9ffde024",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baf125b31d0b4d37fc54123bc2563dac9ffde024/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e7f8f6c827114141c038a1e6dee42c8c43ed522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e7f8f6c827114141c038a1e6dee42c8c43ed522",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e7f8f6c827114141c038a1e6dee42c8c43ed522"
      },
      {
        "sha": "47012391ec25eb76669c7ba2aa458c3ac611289c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47012391ec25eb76669c7ba2aa458c3ac611289c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47012391ec25eb76669c7ba2aa458c3ac611289c"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c23a7f6e0a2af8799a2b544867e013f4ec8dbbfc",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baf125b31d0b4d37fc54123bc2563dac9ffde024/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baf125b31d0b4d37fc54123bc2563dac9ffde024/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=baf125b31d0b4d37fc54123bc2563dac9ffde024",
        "patch": "@@ -254,11 +254,11 @@ in the Low-level Changes section below.\n \n - See the [Mining](#mining) section for changes to `getblocktemplate`.\n \n-- The `getrawtransaction` RPC no longer checks the unspent UTXO set for\n-  a transaction. The remaining behaviors are as follows: 1. If a\n-  blockhash is provided, check the corresponding block. 2. If no\n-  blockhash is provided, check the mempool. 3. If no blockhash is\n-  provided but txindex is enabled, also check txindex.\n+- The `getrawtransaction` RPC & REST endpoints no longer check the\n+  unspent UTXO set for a transaction. The remaining behaviors are as\n+  follows: 1. If a blockhash is provided, check the corresponding block.\n+  2. If no blockhash is provided, check the mempool. 3. If no blockhash\n+  is provided but txindex is enabled, also check txindex.\n \n Graphical User Interface (GUI)\n ------------------------------"
      },
      {
        "sha": "b3b9d8af099b9184d2b4cedd3ef9b38cfe926375",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baf125b31d0b4d37fc54123bc2563dac9ffde024/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baf125b31d0b4d37fc54123bc2563dac9ffde024/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=baf125b31d0b4d37fc54123bc2563dac9ffde024",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -66,17 +66,21 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            RPCHelpMan{\"getrawtransaction\",\n+            RPCHelpMan{\n+                \"getrawtransaction\",\n+                \"\\nReturn the raw transaction data.\\n\"\n+\n                 \"\\nBy default this function only works for mempool transactions. When called with a blockhash\\n\"\n                 \"argument, getrawtransaction will return the transaction if the specified block is available and\\n\"\n                 \"the transaction is found in that block. When called without a blockhash argument, getrawtransaction\\n\"\n                 \"will return the transaction if it is in the mempool, or if -txindex is enabled and the transaction\\n\"\n                 \"is in a block in the blockchain.\\n\"\n \n-            \"\\nReturn the raw transaction data.\\n\"\n-            \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n-            \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\"\n-                ,\n+                \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\"\n+                \"Or use gettransaction for wallet transactions.\\n\"\n+\n+                \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n+                \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n                     {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If false, return a string, otherwise return a json object\"},"
      }
    ]
  },
  {
    "sha": "5029e94f855c73bad2e0ea6dc0378f33787ae131",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDI5ZTk0Zjg1NWM3M2JhZDJlMGVhNmRjMDM3OGYzMzc4N2FlMTMx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T22:40:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T22:40:16Z"
      },
      "message": "Merge #14519: tests: add utility to easily profile node performance with perf\n\n13782b8ba8 docs: add perf section to developer docs (James O'Beirne)\n58180b5fd4 tests: add utility to easily profile node performance with perf (James O'Beirne)\n\nPull request description:\n\n  Adds a context manager to easily (and selectively) profile node performance during functional test execution using `perf`.\n\n  While writing some tests, I encountered some odd bitcoind slowness. I wrote up a utility (`TestNode.profile_with_perf`) that generates performance diagnostics for a node by running `perf` during the execution of a particular region of test code.\n\n  `perf` usage is detailed in the excellent (and sadly unmerged) https://github.com/bitcoin/bitcoin/pull/12649; all due props to @eklitzke.\n\n  ### Example\n\n  ```python\n  with node.profile_with_perf(\"large-msgs\"):\n      for i in range(200):\n          node.p2p.send_message(some_large_msg)\n      node.p2p.sync_with_ping()\n  ```\n\n  This generates a perf data file in the test node's datadir (`/tmp/testtxmpod0y/node0/node-0-TestName-large-msgs.perf.data`).\n\n  Running `perf report` generates nice output about where the node spent most of its time while running that part of the test:\n\n  ```bash\n  $ perf report -i /tmp/testtxmpod0y/node0/node-0-TestName-large-msgs.perf.data --stdio \\\n    | c++filt \\\n    | less\n\n  # To display the perf.data header info, please use --header/--header-only options.\n  #\n  #\n  # Total Lost Samples: 0\n  #\n  # Samples: 135  of event 'cycles:pp'\n  # Event count (approx.): 1458205679493582\n  #\n  # Children      Self  Command          Shared Object        Symbol\n  # ........  ........  ...............  ...................  ........................................................................................................................................................................................................................................................................\n  #\n      70.14%     0.00%  bitcoin-net      bitcoind             [.] CNode::ReceiveMsgBytes(char const*, unsigned int, bool&)\n                  |\n                  ---CNode::ReceiveMsgBytes(char const*, unsigned int, bool&)\n\n      70.14%     0.00%  bitcoin-net      bitcoind             [.] CNetMessage::readData(char const*, unsigned int)\n                  |\n                  ---CNetMessage::readData(char const*, unsigned int)\n                     CNode::ReceiveMsgBytes(char const*, unsigned int, bool&)\n\n      35.52%     0.00%  bitcoin-net      bitcoind             [.] std::vector<char, zero_after_free_allocator<char> >::_M_fill_insert(__gnu_cxx::__normal_iterator<char*, std::vector<char, zero_after_free_allocator<char> > >, unsigned long, char const&)\n                  |\n                  ---std::vector<char, zero_after_free_allocator<char> >::_M_fill_insert(__gnu_cxx::__normal_iterator<char*, std::vector<char, zero_after_free_allocator<char> > >, unsigned long, char const&)\n                     CNetMessage::readData(char const*, unsigned int)\n                     CNode::ReceiveMsgBytes(char const*, unsigned int, bool&)\n\n  ...\n  ```\n\nTree-SHA512: 9ac4ceaa88818d5eca00994e8e3c8ad42ae019550d6583972a0a4f7b0c4f61032e3d0c476b4ae58756bc5eb8f8015a19a7fc26c095bd588f31d49a37ed0c6b3e",
      "tree": {
        "sha": "99544c3e6d4b5bb037fdc1e41cc79d75e81482e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99544c3e6d4b5bb037fdc1e41cc79d75e81482e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5029e94f855c73bad2e0ea6dc0378f33787ae131",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcWhDQAAoJENLqSFDnUoslfsoP/A2KCsImD1/VnyBqBXc8CpP/\nFb8VgXui7lzf5g6DnD7s6BC69FM//Za7t9Uo0OkfAvt56sl6DjixxT0otYAGFG9E\nM3RDjxdooE2CSv54JpzXPUV5k+e28cPL3HQhC3lEXi0nDLLMN75N8c8xl2rTO3Ju\nTN7FlfxS1qJojUe+j/DgSpXhvnm0t5+WH26M8J3G6Wg4yvQI7R3nJ9El1KOJo15Z\nLLaeygvDIiss63mPKG2eU4pue5Zc1GjU9ap9qjlO/4vc5I2PAOsXlLyZFt+dps9/\nnt/rtNlsoh12JDLce5ipPIIdn0F9Gw+hVqww6aYXoBectXvZ1dhDiKVrwSNWgbHS\nFPewk/hk/SA9IhWwHhfb7WAzIIOQ5ljJ3/bW69RPQuOtSeza0NIuIP5+r4+2/bX6\n3VArlQ4gH/P44TbiC9M4X1pFHYcmZFNhychU5I4Lk1BBVFrMdJMLH9B/ACKFRuCD\nBUxTBd811/jNq/nqYYEQsuOjgvyk0wPYutyER622/dJTOFRvcDnRzW1vTBhjCSpr\nsaUKC1Zd8z0Qgzr7Fqn/j7ybOGW8QYVlcHDOmXtaVSuHND2U5KDsXDXXWy2VMxB2\nuIB4byaQVD0Ic3/YqCKS0pa1f72Qep8grkAM4Gk6lBdRmjOebLZIUKD4Jm5l6FcQ\njHr+ReQjl9lKUodIWxB0\n=lDXk\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGXqgWe0oer6fr4jJOfL+ZG+qnyf84xFSVizhpZlNf60CP/wEAh1T2eOBVqR\nnQmB6fT195oI8QRcWhDS8AiIhBWYQ/v80ACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEGBJXlDMr/woWsXbBKP8\n3cwI8QRcWhDS8AhJXd3iUIJ50ACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEGjKUlXR3Hqi+VbZMm63INYI8QRcWhDS8Ag/hulp\n3rFvgwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDsyOf/XH6r6L0b1DSsBfbdCPAQWASnH/loUDFJ9srXY78/\nAQjxBFxaENLwCG/0KxCPdwUSAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 99544c3e6d4b5bb037fdc1e41cc79d75e81482e9\nparent baf125b31d0b4d37fc54123bc2563dac9ffde024\nparent 13782b8ba84c5033a59a5234410a763393eafb8d\nauthor MarcoFalke <falke.marco@gmail.com> 1549406411 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549406416 -0500\n\nMerge #14519: tests: add utility to easily profile node performance with perf\n\n13782b8ba8 docs: add perf section to developer docs (James O'Beirne)\n58180b5fd4 tests: add utility to easily profile node performance with perf (James O'Beirne)\n\nPull request description:\n\n  Adds a context manager to easily (and selectively) profile node performance during functional test execution using `perf`.\n\n  While writing some tests, I encountered some odd bitcoind slowness. I wrote up a utility (`TestNode.profile_with_perf`) that generates performance diagnostics for a node by running `perf` during the execution of a particular region of test code.\n\n  `perf` usage is detailed in the excellent (and sadly unmerged) https://github.com/bitcoin/bitcoin/pull/12649; all due props to @eklitzke.\n\n  ### Example\n\n  ```python\n  with node.profile_with_perf(\"large-msgs\"):\n      for i in range(200):\n          node.p2p.send_message(some_large_msg)\n      node.p2p.sync_with_ping()\n  ```\n\n  This generates a perf data file in the test node's datadir (`/tmp/testtxmpod0y/node0/node-0-TestName-large-msgs.perf.data`).\n\n  Running `perf report` generates nice output about where the node spent most of its time while running that part of the test:\n\n  ```bash\n  $ perf report -i /tmp/testtxmpod0y/node0/node-0-TestName-large-msgs.perf.data --stdio \\\n    | c++filt \\\n    | less\n\n  # To display the perf.data header info, please use --header/--header-only options.\n  #\n  #\n  # Total Lost Samples: 0\n  #\n  # Samples: 135  of event 'cycles:pp'\n  # Event count (approx.): 1458205679493582\n  #\n  # Children      Self  Command          Shared Object        Symbol\n  # ........  ........  ...............  ...................  ........................................................................................................................................................................................................................................................................\n  #\n      70.14%     0.00%  bitcoin-net      bitcoind             [.] CNode::ReceiveMsgBytes(char const*, unsigned int, bool&)\n                  |\n                  ---CNode::ReceiveMsgBytes(char const*, unsigned int, bool&)\n\n      70.14%     0.00%  bitcoin-net      bitcoind             [.] CNetMessage::readData(char const*, unsigned int)\n                  |\n                  ---CNetMessage::readData(char const*, unsigned int)\n                     CNode::ReceiveMsgBytes(char const*, unsigned int, bool&)\n\n      35.52%     0.00%  bitcoin-net      bitcoind             [.] std::vector<char, zero_after_free_allocator<char> >::_M_fill_insert(__gnu_cxx::__normal_iterator<char*, std::vector<char, zero_after_free_allocator<char> > >, unsigned long, char const&)\n                  |\n                  ---std::vector<char, zero_after_free_allocator<char> >::_M_fill_insert(__gnu_cxx::__normal_iterator<char*, std::vector<char, zero_after_free_allocator<char> > >, unsigned long, char const&)\n                     CNetMessage::readData(char const*, unsigned int)\n                     CNode::ReceiveMsgBytes(char const*, unsigned int, bool&)\n\n  ...\n  ```\n\nTree-SHA512: 9ac4ceaa88818d5eca00994e8e3c8ad42ae019550d6583972a0a4f7b0c4f61032e3d0c476b4ae58756bc5eb8f8015a19a7fc26c095bd588f31d49a37ed0c6b3e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029e94f855c73bad2e0ea6dc0378f33787ae131",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5029e94f855c73bad2e0ea6dc0378f33787ae131",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029e94f855c73bad2e0ea6dc0378f33787ae131/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "baf125b31d0b4d37fc54123bc2563dac9ffde024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baf125b31d0b4d37fc54123bc2563dac9ffde024",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/baf125b31d0b4d37fc54123bc2563dac9ffde024"
      },
      {
        "sha": "13782b8ba84c5033a59a5234410a763393eafb8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13782b8ba84c5033a59a5234410a763393eafb8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13782b8ba84c5033a59a5234410a763393eafb8d"
      }
    ],
    "stats": {
      "total": 215,
      "additions": 211,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1deb5d791a70fed825cb3aaadfe306a9ad910a2b",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5029e94f855c73bad2e0ea6dc0378f33787ae131/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5029e94f855c73bad2e0ea6dc0378f33787ae131/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "patch": "@@ -17,6 +17,7 @@ Developer Notes\n         - [DEBUG_LOCKORDER](#debug_lockorder)\n         - [Valgrind suppressions file](#valgrind-suppressions-file)\n         - [Compiling for test coverage](#compiling-for-test-coverage)\n+        - [Performance profiling with perf](#performance-profiling-with-perf)\n     - [Locking/mutex usage notes](#lockingmutex-usage-notes)\n     - [Threads](#threads)\n     - [Ignoring IDE/editor files](#ignoring-ideeditor-files)\n@@ -265,6 +266,51 @@ make cov\n # A coverage report will now be accessible at `./test_bitcoin.coverage/index.html`.\n ```\n \n+### Performance profiling with perf\n+\n+Profiling is a good way to get a precise idea of where time is being spent in\n+code. One tool for doing profiling on Linux platforms is called\n+[`perf`](http://www.brendangregg.com/perf.html), and has been integrated into\n+the functional test framework. Perf can observe a running process and sample\n+(at some frequency) where its execution is.\n+\n+Perf installation is contingent on which kernel version you're running; see\n+[this StackExchange\n+thread](https://askubuntu.com/questions/50145/how-to-install-perf-monitoring-tool)\n+for specific instructions.\n+\n+Certain kernel parameters may need to be set for perf to be able to inspect the\n+running process' stack.\n+\n+```sh\n+$ sudo sysctl -w kernel.perf_event_paranoid=-1\n+$ sudo sysctl -w kernel.kptr_restrict=0\n+```\n+\n+Make sure you [understand the security\n+trade-offs](https://lwn.net/Articles/420403/) of setting these kernel\n+parameters.\n+\n+To profile a running bitcoind process for 60 seconds, you could use an\n+invocation of `perf record` like this:\n+\n+```sh\n+$ perf record \\\n+    -g --call-graph dwarf --per-thread -F 140 \\\n+    -p `pgrep bitcoind` -- sleep 60\n+```\n+\n+You could then analyze the results by running\n+\n+```sh\n+perf report --stdio | c++filt | less\n+```\n+\n+or using a graphical tool like [Hotspot](https://github.com/KDAB/hotspot).\n+\n+See the functional test documentation for how to invoke perf within tests.\n+\n+\n **Sanitizers**\n \n Bitcoin Core can be compiled with various \"sanitizers\" enabled, which add"
      },
      {
        "sha": "9d4351b1def3bae330d6dec2b453750252f72c00",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "patch": "@@ -178,6 +178,26 @@ gdb /home/example/bitcoind <pid>\n Note: gdb attach step may require ptrace_scope to be modified, or `sudo` preceding the `gdb`.\n See this link for considerations: https://www.kernel.org/doc/Documentation/security/Yama.txt\n \n+##### Profiling\n+\n+An easy way to profile node performance during functional tests is provided\n+for Linux platforms using `perf`.\n+\n+Perf will sample the running node and will generate profile data in the node's\n+datadir. The profile data can then be presented using `perf report` or a graphical\n+tool like [hotspot](https://github.com/KDAB/hotspot).\n+\n+To generate a profile during test suite runs, use the `--perf` flag.\n+\n+To see render the output to text, run\n+\n+```sh\n+perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt | less\n+```\n+\n+For ways to generate more granular profiles, see the README in\n+[test/functional](/test/functional).\n+\n ### Util tests\n \n Util tests can be run locally by running `test/util/bitcoin-util-test.py`."
      },
      {
        "sha": "74f454b86c9b952d7ae519e5d0746454f24f1141",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "patch": "@@ -122,3 +122,36 @@ Helpers for script.py\n \n #### [test_framework/blocktools.py](test_framework/blocktools.py)\n Helper functions for creating blocks and transactions.\n+\n+### Benchmarking with perf\n+\n+An easy way to profile node performance during functional tests is provided\n+for Linux platforms using `perf`.\n+\n+Perf will sample the running node and will generate profile data in the node's\n+datadir. The profile data can then be presented using `perf report` or a graphical\n+tool like [hotspot](https://github.com/KDAB/hotspot).\n+\n+There are two ways of invoking perf: one is to use the `--perf` flag when\n+running tests, which will profile each node during the entire test run: perf\n+begins to profile when the node starts and ends when it shuts down. The other\n+way is the use the `profile_with_perf` context manager, e.g.\n+\n+```python\n+with node.profile_with_perf(\"send-big-msgs\"):\n+    # Perform activity on the node you're interested in profiling, e.g.:\n+    for _ in range(10000):\n+        node.p2p.send_message(some_large_message)\n+```\n+\n+To see useful textual output, run\n+\n+```sh\n+perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt | less\n+```\n+\n+#### See also:\n+\n+- [Installing perf](https://askubuntu.com/q/50145)\n+- [Perf examples](http://www.brendangregg.com/perf.html)\n+- [Hotspot](https://github.com/KDAB/hotspot): a GUI for perf output analysis"
      },
      {
        "sha": "8c4c0d72266dddd9be3cb958104dae5e7a721d82",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "patch": "@@ -128,6 +128,8 @@ def main(self):\n                             help=\"Attach a python debugger if test fails\")\n         parser.add_argument(\"--usecli\", dest=\"usecli\", default=False, action=\"store_true\",\n                             help=\"use bitcoin-cli instead of RPC for all commands\")\n+        parser.add_argument(\"--perf\", dest=\"perf\", default=False, action=\"store_true\",\n+                            help=\"profile running nodes with perf for the duration of the test\")\n         self.add_options(parser)\n         self.options = parser.parse_args()\n \n@@ -202,11 +204,20 @@ def main(self):\n                 node.cleanup_on_exit = False\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n-        if not self.options.nocleanup and not self.options.noshutdown and success != TestStatus.FAILED:\n+        should_clean_up = (\n+            not self.options.nocleanup and\n+            not self.options.noshutdown and\n+            success != TestStatus.FAILED and\n+            not self.options.perf\n+        )\n+        if should_clean_up:\n             self.log.info(\"Cleaning up {} on exit\".format(self.options.tmpdir))\n             cleanup_tree_on_exit = True\n+        elif self.options.perf:\n+            self.log.warning(\"Not cleaning up dir {} due to perf data\".format(self.options.tmpdir))\n+            cleanup_tree_on_exit = False\n         else:\n-            self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n+            self.log.warning(\"Not cleaning up dir {}\".format(self.options.tmpdir))\n             cleanup_tree_on_exit = False\n \n         if success == TestStatus.PASSED:\n@@ -310,6 +321,7 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n                 extra_conf=extra_confs[i],\n                 extra_args=extra_args[i],\n                 use_cli=self.options.usecli,\n+                start_perf=self.options.perf,\n             ))\n \n     def start_node(self, i, *args, **kwargs):"
      },
      {
        "sha": "d6e31457d1b6687c4953b9ee6ac87a7125460288",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 97,
        "deletions": 1,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "patch": "@@ -18,6 +18,8 @@\n import time\n import urllib.parse\n import collections\n+import shlex\n+import sys\n \n from .authproxy import JSONRPCException\n from .util import (\n@@ -59,7 +61,13 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n+    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+        \"\"\"\n+        Kwargs:\n+            start_perf (bool): If True, begin profiling the node with `perf` as soon as\n+                the node starts.\n+        \"\"\"\n+\n         self.index = i\n         self.datadir = datadir\n         self.stdout_dir = os.path.join(self.datadir, \"stdout\")\n@@ -87,6 +95,7 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n         self.cli = TestNodeCLI(bitcoin_cli, self.datadir)\n         self.use_cli = use_cli\n+        self.start_perf = start_perf\n \n         self.running = False\n         self.process = None\n@@ -95,6 +104,8 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n         self.url = None\n         self.log = logging.getLogger('TestFramework.node%d' % i)\n         self.cleanup_on_exit = True # Whether to kill the node when this object goes away\n+        # Cache perf subprocesses here by their data output filename.\n+        self.perf_subprocesses = {}\n \n         self.p2ps = []\n \n@@ -186,6 +197,9 @@ def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n \n+        if self.start_perf:\n+            self._start_perf()\n+\n     def wait_for_rpc_connection(self):\n         \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n         # Poll at a rate of four times per second\n@@ -238,6 +252,10 @@ def stop_node(self, expected_stderr='', wait=0):\n         except http.client.CannotSendRequest:\n             self.log.exception(\"Unable to stop node.\")\n \n+        # If there are any running perf processes, stop them.\n+        for profile_name in tuple(self.perf_subprocesses.keys()):\n+            self._stop_perf(profile_name)\n+\n         # Check that stderr is as expected\n         self.stderr.seek(0)\n         stderr = self.stderr.read().decode('utf-8').strip()\n@@ -317,6 +335,84 @@ def assert_memory_usage_stable(self, *, increase_allowed=0.03):\n                     increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        See `test/functional/README.md` for details on perf usage.\n+\n+        Args:\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name=None):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not sys.platform.startswith('linux'):\n+            self.log.warning(\"Can't profile with perf; only availabe on Linux platforms\")\n+            return None\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+            return None\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        output_path = tempfile.NamedTemporaryFile(\n+            dir=self.datadir,\n+            prefix=\"{}.perf.data.\".format(profile_name or 'test'),\n+            delete=False,\n+        ).name\n+\n+        cmd = [\n+            'perf', 'record',\n+            '-g',                     # Record the callgraph.\n+            '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+            '-F', '101',              # Sampling frequency in Hz.\n+            '-p', str(self.process.pid),\n+            '-o', output_path,\n+        ]\n+        subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+        self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        output_path = subp.args[subp.args.index('-o') + 1]\n+\n+        subp.terminate()\n+        subp.wait(timeout=10)\n+\n+        stderr = subp.stderr.read().decode()\n+        if 'Consider tweaking /proc/sys/kernel/perf_event_paranoid' in stderr:\n+            self.log.warning(\n+                \"perf couldn't collect data! Try \"\n+                \"'sudo sysctl -w kernel.perf_event_paranoid=-1'\")\n+        else:\n+            report_cmd = \"perf report -i {}\".format(output_path)\n+            self.log.info(\"See perf output by running '{}'\".format(report_cmd))\n+\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n "
      },
      {
        "sha": "863caa9d5c48f20177d962c58e08877256a46c17",
        "filename": "test/lint/lint-python-dead-code.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/lint/lint-python-dead-code.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5029e94f855c73bad2e0ea6dc0378f33787ae131/test/lint/lint-python-dead-code.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code.sh?ref=5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "patch": "@@ -15,5 +15,5 @@ fi\n \n vulture \\\n     --min-confidence 60 \\\n-    --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey\" \\\n+    --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey,profile_with_perf\" \\\n     $(git ls-files -- \"*.py\" \":(exclude)contrib/\" \":(exclude)test/functional/data/invalid_txs.py\")"
      }
    ]
  },
  {
    "sha": "fa1db331dea5af916d54e679a69013065a8cbc91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFkYjMzMWRlYTVhZjkxNmQ1NGU2NzlhNjkwMTMwNjVhOGNiYzkx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T23:24:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-05T23:23:30Z"
      },
      "message": "travis: Only exit early if compilation took longer than 30 min",
      "tree": {
        "sha": "13debb378e4917b836387982cec7f56508f2f7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13debb378e4917b836387982cec7f56508f2f7c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1db331dea5af916d54e679a69013065a8cbc91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcWhryAAoJEM4rdWl+aaVIaGAL+gOkXPyxUPjGiGSG86PsbMPQ\nF8nDyNZVzpE1d9ByAUEe28mWq80kj3BpQZHJTB0SsHwGTMbZtVrkrVtOXKzs7pEd\n8kmGpjdePg1BLDdYGqx8fLAP7Y7LYutlN1MtMhsex+MosYImQLVKec5Wi/43+6gW\n/4Vzs4thSTDNgIJIKtKmdrINvDP6++ekI1RwXdLKdm4b3wspJ3Qct9qVkn7+oaGC\nh1ObbvVCq8xlyBQ19GDp87Yk9NH/pAF6eem9cxnvTn3Ib2LXCi6D9az7XNgjKX2e\nw9ePSl2bRiLEH94evUM1z4d/urSguRmsHAUUzK6FVTbmfW6NhrRWTiu9jBq2VlOU\nNG2mdBxdtlis/phzt40UNOYHHAdWkuJur4mD7Br+o2RnPVQiE0TVSEGq1DUh5C/a\nbVAimud0EpkkH0c9AESd7SUgfK7xak0kYq0lNHC3gezdmJmFvu0j+sMXhL45RQWK\nZeSFIMnP781IZiZnxQw29yufhQFQtBAQRVAZUd3w6w==\n=KJJd\n-----END PGP SIGNATURE-----",
        "payload": "tree 13debb378e4917b836387982cec7f56508f2f7c5\nparent 5029e94f855c73bad2e0ea6dc0378f33787ae131\nauthor MarcoFalke <falke.marco@gmail.com> 1549409042 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549409010 -0500\n\ntravis: Only exit early if compilation took longer than 30 min\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1db331dea5af916d54e679a69013065a8cbc91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1db331dea5af916d54e679a69013065a8cbc91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1db331dea5af916d54e679a69013065a8cbc91/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5029e94f855c73bad2e0ea6dc0378f33787ae131"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "873b33b05b0d7a5653cc1ad7967489a7094d8698",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1db331dea5af916d54e679a69013065a8cbc91/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1db331dea5af916d54e679a69013065a8cbc91/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=fa1db331dea5af916d54e679a69013065a8cbc91",
        "patch": "@@ -33,7 +33,7 @@ before_script:\n   - set -o errexit; source .travis/test_05_before_script.sh\n script:\n   - if [ $SECONDS -gt 1200 ]; then set +o errexit; echo \"Travis early exit to cache current state\"; false; else set -o errexit; source .travis/test_06_script_a.sh; fi\n-  - if [ $SECONDS -gt 1500 ]; then set +o errexit; echo \"Travis early exit to cache current state\"; false; else set -o errexit; source .travis/test_06_script_b.sh; fi\n+  - if [ $SECONDS -gt 1800 ]; then set +o errexit; echo \"Travis early exit to cache current state\"; false; else set -o errexit; source .travis/test_06_script_b.sh; fi\n after_script:\n   - echo $TRAVIS_COMMIT_RANGE\n   - echo $TRAVIS_COMMIT_LOG"
      }
    ]
  },
  {
    "sha": "6440e6137553a51480aad68f6048be4ffce7bfff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDQwZTYxMzc1NTNhNTE0ODBhYWQ2OGY2MDQ4YmU0ZmZjZTdiZmZm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-06T00:03:09Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-06T00:04:28Z"
      },
      "message": "qa: Drop RPC connection if --usecli",
      "tree": {
        "sha": "d6690533364273508a10cba5860c484d3b6cbb90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6690533364273508a10cba5860c484d3b6cbb90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6440e6137553a51480aad68f6048be4ffce7bfff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6440e6137553a51480aad68f6048be4ffce7bfff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6440e6137553a51480aad68f6048be4ffce7bfff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6440e6137553a51480aad68f6048be4ffce7bfff/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5029e94f855c73bad2e0ea6dc0378f33787ae131"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "999ea68254bae7a061ba5d531602efdadcb1b7b3",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6440e6137553a51480aad68f6048be4ffce7bfff/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6440e6137553a51480aad68f6048be4ffce7bfff/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=6440e6137553a51480aad68f6048be4ffce7bfff",
        "patch": "@@ -209,12 +209,15 @@ def wait_for_rpc_connection(self):\n                 raise FailedToStartError(self._node_msg(\n                     'bitcoind exited with status {} during initialization'.format(self.process.returncode)))\n             try:\n-                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n-                self.rpc.getblockcount()\n+                rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n+                rpc.getblockcount()\n                 # If the call to getblockcount() succeeds then the RPC connection is up\n+                self.log.debug(\"RPC successfully started\")\n+                if self.use_cli:\n+                    return\n+                self.rpc = rpc\n                 self.rpc_connected = True\n                 self.url = self.rpc.url\n-                self.log.debug(\"RPC successfully started\")\n                 return\n             except IOError as e:\n                 if e.errno != errno.ECONNREFUSED:  # Port not yet open?"
      }
    ]
  },
  {
    "sha": "7fdb92e53be633a972f198db2439565cc43e7033",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmRiOTJlNTNiZTYzM2E5NzJmMTk4ZGIyNDM5NTY1Y2M0M2U3MDMz",
    "commit": {
      "author": {
        "name": "OverlordQ",
        "email": "overlordq@gmail.com",
        "date": "2019-02-06T00:54:44Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2019-02-06T00:54:44Z"
      },
      "message": "Update linearize-hashes.py\n\nFix class case issue.",
      "tree": {
        "sha": "71ca6ba7cb3b3b58ca26d184eea6ab4db0a68ad6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71ca6ba7cb3b3b58ca26d184eea6ab4db0a68ad6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fdb92e53be633a972f198db2439565cc43e7033",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcWjBUCRBK7hj4Ov3rIwAAdHIIAKOJZMBN47Z87pqDWnIZXTIA\nX5yz+GMed8owr4eRIQq8BkhtEON1pNsewS+/7VzeFlzLu2pvGakFyKba7p7acS36\n33MHeEK8zYUzE10To3QSx9nV0qSQ2Op+F/6aCJsFw+hs8OxRjLUEB9gq5Ezlcan7\nrErYxN83Sc6gQnXmZaexOK3M+et1NV6btdVnTxAzayqWWhInU1it8fwzIaO0Al3V\nBTRjkzwtroYZYzcQKsUTSviFHJ25VduVYIk3ed6VW6ZSIAuf9ruKDFtnl2trM36J\nMx7lzdTy8sI4Kes2i8OTizzfumK9d9Wxhx/v099o17bwYNyu+514CDAdzTtSMYs=\n=rEKD\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 71ca6ba7cb3b3b58ca26d184eea6ab4db0a68ad6\nparent 5029e94f855c73bad2e0ea6dc0378f33787ae131\nauthor OverlordQ <overlordq@gmail.com> 1549414484 -0500\ncommitter GitHub <noreply@github.com> 1549414484 -0500\n\nUpdate linearize-hashes.py\n\nFix class case issue."
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdb92e53be633a972f198db2439565cc43e7033",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fdb92e53be633a972f198db2439565cc43e7033",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdb92e53be633a972f198db2439565cc43e7033/comments",
    "author": {
      "login": "OverlordQ",
      "id": 44329,
      "node_id": "MDQ6VXNlcjQ0MzI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44329?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OverlordQ",
      "html_url": "https://github.com/OverlordQ",
      "followers_url": "https://api.github.com/users/OverlordQ/followers",
      "following_url": "https://api.github.com/users/OverlordQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/OverlordQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OverlordQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OverlordQ/subscriptions",
      "organizations_url": "https://api.github.com/users/OverlordQ/orgs",
      "repos_url": "https://api.github.com/users/OverlordQ/repos",
      "events_url": "https://api.github.com/users/OverlordQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OverlordQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5029e94f855c73bad2e0ea6dc0378f33787ae131"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8529470e09b8a7afa6d3a24c404e1509896e9947",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fdb92e53be633a972f198db2439565cc43e7033/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fdb92e53be633a972f198db2439565cc43e7033/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=7fdb92e53be633a972f198db2439565cc43e7033",
        "patch": "@@ -7,7 +7,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from http.client import HttpConnection\n+from http.client import HTTPConnection\n import json\n import re\n import base64\n@@ -27,7 +27,7 @@ def __init__(self, host, port, username, password):\n         authpair = \"%s:%s\" % (username, password)\n         authpair = authpair.encode('utf-8')\n         self.authhdr = b\"Basic \" + base64.b64encode(authpair)\n-        self.conn = HttpConnection(host, port=port, timeout=30)\n+        self.conn = HTTPConnection(host, port=port, timeout=30)\n \n     def execute(self, obj):\n         try:"
      }
    ]
  },
  {
    "sha": "fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBmZTNiOGE0NDI1ZWI1ZjM4ZTI2Y2NiZTQyNDg5YTZkNTkxZTQz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T15:04:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T15:03:12Z"
      },
      "message": "contrib: Add missing wallet tool to gen-manpages.sh",
      "tree": {
        "sha": "5918436775c8c7edb25b0d52645bc30568fb4ba1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5918436775c8c7edb25b0d52645bc30568fb4ba1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcWvcwAAoJEM4rdWl+aaVIlUEMALRHYfIpoGeLWeB4I+0HHVle\nkLX2FGZDVnI+fo2FiTR67m03y9sDvKU1/bAYmYtuzNMl/J84+MzIXRTEbQADZXeS\nT/5xpALp6lH++G6bLV32YEOBrVYBorK+IPG6b8CXv0mcK7FZyVK5N0DJDZHDmy5k\nxHE7FNqsAq09esTawBpdy4D92XL4LX08xdRKKHcw+ibREcTG/UrQd2xD8/O2dg6S\nxt8Tv4Fap1ACSg6kJsGW8n+2dPsY+BDG5BEDMZl6DMFO6YBba+/8pGZfVkqZXk+r\njMW7BTdWflcAGi/CicNa3sUlUCwA9cVRWSXc4dwC1ACvhtVtKmhvcApTdqahZvgB\nnzR9a0sgIOFM/KTXyaFxQ2s1KMS1cyfUmIRJZ7FO8tsNKVuf6MFLRJE0EQkin4ZQ\naMogp9AFAR+sNgJpyzn0drcAncP34fq8MidTo4MOkCcaw1Lv/BwMySTXezg9zWC5\nyVfFNcATtqeZcA2gejhAien8AAbqou0+DuDUmm317Q==\n=r7b+\n-----END PGP SIGNATURE-----",
        "payload": "tree 5918436775c8c7edb25b0d52645bc30568fb4ba1\nparent 9e7f8f6c827114141c038a1e6dee42c8c43ed522\nauthor MarcoFalke <falke.marco@gmail.com> 1549465485 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549465392 -0500\n\ncontrib: Add missing wallet tool to gen-manpages.sh\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e7f8f6c827114141c038a1e6dee42c8c43ed522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e7f8f6c827114141c038a1e6dee42c8c43ed522",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e7f8f6c827114141c038a1e6dee42c8c43ed522"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "63b9847100a09ff0f6f8600a96b46a87219de505",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43",
        "patch": "@@ -10,6 +10,7 @@ MANDIR=${MANDIR:-$TOPDIR/doc/man}\n BITCOIND=${BITCOIND:-$BINDIR/bitcoind}\n BITCOINCLI=${BITCOINCLI:-$BINDIR/bitcoin-cli}\n BITCOINTX=${BITCOINTX:-$BINDIR/bitcoin-tx}\n+WALLET_TOOL=${WALLET_TOOL:-$BINDIR/bitcoin-wallet}\n BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n \n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n@@ -23,7 +24,7 @@ BTCVER=($($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }'))\n echo \"[COPYRIGHT]\" > footer.h2m\n $BITCOIND --version | sed -n '1!p' >> footer.h2m\n \n-for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $BITCOINQT; do\n+for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINQT; do\n   cmdname=\"${cmd##*/}\"\n   help2man -N --version-string=${BTCVER[0]} --include=footer.h2m -o ${MANDIR}/${cmdname}.1 ${cmd}\n   sed -i \"s/\\\\\\-${BTCVER[1]}//g\" ${MANDIR}/${cmdname}.1"
      }
    ]
  },
  {
    "sha": "fa1e2815476409400e9d4c6b8c11e8c628be1027",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFlMjgxNTQ3NjQwOTQwMGU5ZDRjNmI4YzExZThjNjI4YmUxMDI3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T15:20:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T15:19:48Z"
      },
      "message": "doc: Add missing wallet-tool manpages",
      "tree": {
        "sha": "16feda88234e93c24adff61c74478b3226dbd563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16feda88234e93c24adff61c74478b3226dbd563"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1e2815476409400e9d4c6b8c11e8c628be1027",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcWvsUAAoJEM4rdWl+aaVIbpIMAKjYxg/ZbKsQJo5aDCwLA0Pl\nafeYyNaqFs9GVCcIDNvH+A58K1PnnkATYMm7dDTBJuyAVaXju/QQMUdRVxOIGpID\nit6rVJQb1IBOcyh6JuPJOasCc5zXXq/OlTZlyOsTFoK2mGrIc+qgRfRY+OsG796q\nGT7rHyrOdfYtcgNvhUy62i/MsaFvQsBbRvRReSbKU1KGBNwWo3TvLcvNhr6kjOkZ\nIf229Dr8fvfPsz3I6XE5TsR70Oa+NeyjEoRVr17b3pHzDwK0EHj3YPWTpSMVq8wm\nil8J2+p3//zD4ywUdKZ4Xyc51UeFi3P8CWGGGCx10boHVGdV/WIUO4PAUywJgV+Y\nluX2GVpiiF+9C8X85PhOUj5WJJcv1OiSciIDgHN7lZqriCFbuzNAsodUeQT/Zwwf\ntbTsRgd+UBl0QX5Uf3FX4MKJKV0PKsKGGv7i0p7ihdqGwfbmE78eJbG8bP9bb9YJ\niSZHz1vsI9fgwNGeudpHSLTix0HSRM3aSJAhlaLCOw==\n=G7xt\n-----END PGP SIGNATURE-----",
        "payload": "tree 16feda88234e93c24adff61c74478b3226dbd563\nparent fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43\nauthor MarcoFalke <falke.marco@gmail.com> 1549466428 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549466388 -0500\n\ndoc: Add missing wallet-tool manpages\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1e2815476409400e9d4c6b8c11e8c628be1027",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1e2815476409400e9d4c6b8c11e8c628be1027",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1e2815476409400e9d4c6b8c11e8c628be1027/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0fe3b8a4425eb5f38e26ccbe42489a6d591e43"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 80,
      "deletions": 13
    },
    "files": [
      {
        "sha": "355b4d3cc2b7167d3fdca393ea63f6ea23429341",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=fa1e2815476409400e9d4c6b8c11e8c628be1027",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"December 2018\" \"bitcoin-cli v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"February 2019\" \"bitcoin-cli v0.17.99.0\" \"User Commands\"\n .SH NAME\n bitcoin-cli \\- manual page for bitcoin-cli v0.17.99.0\n .SH SYNOPSIS\n@@ -104,7 +104,7 @@ Chain selection options:\n .IP\n Use the test chain\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "052d420608338dbd2f0db17c5fb5331bba1912ce",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=fa1e2815476409400e9d4c6b8c11e8c628be1027",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"December 2018\" \"bitcoin-qt v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"February 2019\" \"bitcoin-qt v0.17.99.0\" \"User Commands\"\n .SH NAME\n bitcoin-qt \\- manual page for bitcoin-qt v0.17.99.0\n .SH SYNOPSIS\n@@ -56,7 +56,7 @@ Specify data directory\n .HP\n \\fB\\-dbcache=\\fR<n>\n .IP\n-Set database cache size in megabytes (4 to 16384, default: 450)\n+Set database cache size in MiB (4 to 16384, default: 450)\n .HP\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n@@ -500,7 +500,7 @@ mining and transaction creation (default: 0.00001)\n \\fB\\-whitelistforcerelay\\fR\n .IP\n Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 1)\n+local relay policy (default: 0)\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -606,7 +606,7 @@ Set SSL root certificates for payment request (default: \\fB\\-system\\-\\fR)\n .IP\n Show splash screen on startup (default: 1)\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "c5d398576379abb37c1ae5ad05c9787897da907e",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=fa1e2815476409400e9d4c6b8c11e8c628be1027",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"December 2018\" \"bitcoin-tx v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"February 2019\" \"bitcoin-tx v0.17.99.0\" \"User Commands\"\n .SH NAME\n bitcoin-tx \\- manual page for bitcoin-tx v0.17.99.0\n .SH SYNOPSIS\n@@ -92,7 +92,7 @@ sign=SIGHASH\\-FLAGS\n .IP\n Add zero or more signatures to transaction. This command requires JSON\n registers:prevtxs=JSON object, privatekeys=JSON object. See\n-signrawtransaction docs for format of sighash flags, JSON\n+signrawtransactionwithkey docs for format of sighash flags, JSON\n objects.\n .PP\n Register Commands:\n@@ -105,7 +105,7 @@ set=NAME:JSON\\-STRING\n .IP\n Set register NAME to given JSON\\-STRING\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "3c4849cca75d97c6a3817a532f1db0f2fed02053",
        "filename": "doc/man/bitcoin-wallet.1",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoin-wallet.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoin-wallet.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-wallet.1?ref=fa1e2815476409400e9d4c6b8c11e8c628be1027",
        "patch": "@@ -0,0 +1,67 @@\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n+.TH BITCOIN-WALLET \"1\" \"February 2019\" \"bitcoin-wallet v0.17.99.0\" \"User Commands\"\n+.SH NAME\n+bitcoin-wallet \\- manual page for bitcoin-wallet v0.17.99.0\n+.SH DESCRIPTION\n+Bitcoin Core bitcoin\\-wallet version v0.17.99.0\n+.PP\n+wallet\\-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\n+By default wallet\\-tool will act on wallets in the default mainnet wallet directory in the datadir.\n+To change the target wallet, use the \\fB\\-datadir\\fR, \\fB\\-wallet\\fR and \\fB\\-testnet\\fR/\\-regtest arguments.\n+.SS \"Usage:\"\n+.IP\n+bitcoin\\-wallet [options] <command>\n+.SH OPTIONS\n+.HP\n+\\-?\n+.IP\n+This help message\n+.HP\n+\\fB\\-datadir=\\fR<dir>\n+.IP\n+Specify data directory\n+.HP\n+\\fB\\-wallet=\\fR<wallet\\-name>\n+.IP\n+Specify wallet name\n+.PP\n+Debugging/Testing options:\n+.HP\n+\\fB\\-debug=\\fR<category>\n+.IP\n+Output debugging information (default: 0).\n+.HP\n+\\fB\\-printtoconsole\\fR\n+.IP\n+Send trace/debug info to console (default: 1 when no \\fB\\-debug\\fR is true, 0\n+otherwise.\n+.PP\n+Chain selection options:\n+.HP\n+\\fB\\-testnet\\fR\n+.IP\n+Use the test chain\n+.PP\n+Commands:\n+.IP\n+create\n+.IP\n+Create new wallet file\n+.IP\n+info\n+.IP\n+Get wallet info\n+.SH COPYRIGHT\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n+\n+Please contribute if you find Bitcoin Core useful. Visit\n+<https://bitcoincore.org> for further information about the software.\n+The source code is available from <https://github.com/bitcoin/bitcoin>.\n+\n+This is experimental software.\n+Distributed under the MIT software license, see the accompanying file COPYING\n+or <https://opensource.org/licenses/MIT>\n+\n+This product includes software developed by the OpenSSL Project for use in the\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "5e057d923f25e557ad60ddef314259d7c60b39b4",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1e2815476409400e9d4c6b8c11e8c628be1027/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=fa1e2815476409400e9d4c6b8c11e8c628be1027",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"December 2018\" \"bitcoind v0.17.99.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"February 2019\" \"bitcoind v0.17.99.0\" \"User Commands\"\n .SH NAME\n bitcoind \\- manual page for bitcoind v0.17.99.0\n .SH SYNOPSIS\n@@ -56,7 +56,7 @@ Specify data directory\n .HP\n \\fB\\-dbcache=\\fR<n>\n .IP\n-Set database cache size in megabytes (4 to 16384, default: 450)\n+Set database cache size in MiB (4 to 16384, default: 450)\n .HP\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n@@ -500,7 +500,7 @@ mining and transaction creation (default: 0.00001)\n \\fB\\-whitelistforcerelay\\fR\n .IP\n Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 1)\n+local relay policy (default: 0)\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -580,7 +580,7 @@ Username for JSON\\-RPC connections\n .IP\n Accept command line and JSON\\-RPC commands\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      }
    ]
  },
  {
    "sha": "645a1264f3363627f8f9a9fa5c44b6d293d5fa07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDVhMTI2NGYzMzYzNjI3ZjhmOWE5ZmE1YzQ0YjZkMjkzZDVmYTA3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T15:29:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T15:29:50Z"
      },
      "message": "Merge #15351: Update linearize-hashes.py\n\n7fdb92e53b Update linearize-hashes.py (OverlordQ)\n\nPull request description:\n\n  Fix class case issue.\n\nTree-SHA512: 42d26e38b75b6b419ae4a9ca5c110d4ced0f7c5db997a64c8ab5dfc25dc228008349b6423c20ef4e396a773ff31f1f3f0092331c5e89748216e253e4d8337e9a",
      "tree": {
        "sha": "71ca6ba7cb3b3b58ca26d184eea6ab4db0a68ad6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71ca6ba7cb3b3b58ca26d184eea6ab4db0a68ad6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/645a1264f3363627f8f9a9fa5c44b6d293d5fa07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcWv1uAAoJENLqSFDnUosly18QALdYrq4wLmQ5PPyx3c7jepw/\nG5S5SDtvfGbG7PdKZYWHF3QPdvV19/eQtjXEO0y/PHH47Xh/P+bun6aPIo4o0xTT\nXGzOLu9M1D1G55tBVFAzevIgHVMtUqJdJF/SmaaH5Ko3n7jduf5OIYL3ERunDl0A\nK5LikXAgz80Kn9pBr9RflSJU7gs1iYpfufD4PYFpAaV5p/+NZCVPXo4vNKA3ASpG\nBPs2ERNmVRlRDlNqNjcDA0wbyGBD7lkzw2MBY43ButkrjCOoKhwskY5hw/v3YJ3+\nRhzxFQwqnS1lcq6Odhmamw5jm/XnDovcViMoE47+kvX3WPv59B6rNDMHDSl10yZG\nhTJ9zbpe12qdjti/FIIwZZie/uqGkS9MdwuIxyc/2+ekJqhtHH1Lxj7jOXhAtT/c\nAN8s7Z87cgZHYLnADWX9SsXpVd2j+gps37cSU7QnRpFNlbWOlSK3jcOBO0hj431U\ntEZ3uFmeoGPO4EdxHk/WEAV+pkVJJfZ2FYfpZcNYLQR3Ugl6/Tp7Threisgpnpbo\nfSAY/MVwafsGjJEM3EtsaluXwwoMT8sGIecCR4/kk2dozyTIfysDRPKh+aZVU9cr\nkfwwB8UbkCYVgE/I99ilH8p4v0RqxGYn/27YIfQp1f2+0xSjsG+gRWr7cMjXwxdQ\nNK4P9Fbj6ju3YPZ0TUn7\n=eYps\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINmV0F6+DXKIdcbv4QKZEoGaRyTUSlvDEfEhnCGHq9h1CP/wEA2aPgNpMfMF\nx+YXf+siWp0I8QRcWv1w8AhQFZkGHf5UeACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEMY5g4mijzREzVhQo8hVVlQI8QRcWv1w\n8Agvs3AWXCA09QCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDSK6EhAkdk/yCtDreh2bdUCPEEXFr9cPAIEjmb\n3zFJICsAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 71ca6ba7cb3b3b58ca26d184eea6ab4db0a68ad6\nparent 5029e94f855c73bad2e0ea6dc0378f33787ae131\nparent 7fdb92e53be633a972f198db2439565cc43e7033\nauthor MarcoFalke <falke.marco@gmail.com> 1549466986 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549466990 -0500\n\nMerge #15351: Update linearize-hashes.py\n\n7fdb92e53b Update linearize-hashes.py (OverlordQ)\n\nPull request description:\n\n  Fix class case issue.\n\nTree-SHA512: 42d26e38b75b6b419ae4a9ca5c110d4ced0f7c5db997a64c8ab5dfc25dc228008349b6423c20ef4e396a773ff31f1f3f0092331c5e89748216e253e4d8337e9a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/645a1264f3363627f8f9a9fa5c44b6d293d5fa07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/645a1264f3363627f8f9a9fa5c44b6d293d5fa07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/645a1264f3363627f8f9a9fa5c44b6d293d5fa07/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5029e94f855c73bad2e0ea6dc0378f33787ae131"
      },
      {
        "sha": "7fdb92e53be633a972f198db2439565cc43e7033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fdb92e53be633a972f198db2439565cc43e7033",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fdb92e53be633a972f198db2439565cc43e7033"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8529470e09b8a7afa6d3a24c404e1509896e9947",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/645a1264f3363627f8f9a9fa5c44b6d293d5fa07/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/645a1264f3363627f8f9a9fa5c44b6d293d5fa07/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=645a1264f3363627f8f9a9fa5c44b6d293d5fa07",
        "patch": "@@ -7,7 +7,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from http.client import HttpConnection\n+from http.client import HTTPConnection\n import json\n import re\n import base64\n@@ -27,7 +27,7 @@ def __init__(self, host, port, username, password):\n         authpair = \"%s:%s\" % (username, password)\n         authpair = authpair.encode('utf-8')\n         self.authhdr = b\"Basic \" + base64.b64encode(authpair)\n-        self.conn = HttpConnection(host, port=port, timeout=30)\n+        self.conn = HTTPConnection(host, port=port, timeout=30)\n \n     def execute(self, obj):\n         try:"
      }
    ]
  },
  {
    "sha": "ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGFlNzgxYTBjYzFjODAwZmY0MWEzNTM0ZThlM2IyMmUzYmRmNTBk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T15:34:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T15:34:38Z"
      },
      "message": "Merge #15349: travis: Only exit early if compilation took longer than 30 min\n\nfa1db331de travis: Only exit early if compilation took longer than 30 min (MarcoFalke)\n\nPull request description:\n\n  As opposed to 25 minutes, which hits quite often when a header changes or the pull request cache is outdated.\n\nTree-SHA512: 3d585e6441a4e5620eb30cf31dc7219fabe3fe2adb53c485339ed9d627a40307af1b0aa2bf73353322932952d92444e29cdef21914da166f20eab7a288a75df5",
      "tree": {
        "sha": "d0f1f41c5973a0965f0e594e1bc30f85cddd7fa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0f1f41c5973a0965f0e594e1bc30f85cddd7fa5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcWv6OAAoJENLqSFDnUosln6AP/i1bRQYGFCHXiWVH3KbgPmgx\nHtfukZyQzTo+m7uNWl2jLH1GKUua3X51P2hDgtzoXrESA5aEeYTWPkSUBHkx6/6p\nPXyxhFcnQCgOHe0EAskWYFfcEowTfdHnfCzgjperEcxU+QDIQ0wYKpka6lVry4Wo\n9PJhq/HJnLUe3v3+uSQYD8hqmYu7E4W8C3mjN4cJObxmJ11jZuV5Y9N5Odndu4Q3\nh6rqJRQJwi1CbjKY/NWnMJC88J6buJO95VbtIHpwh5Wc/6etkHts7vhkbhsc5zmV\nt9D9C6FX48vfBGoDME09CWZ+dybfTKoflgCt7RP45k9JBy5EHJdixerXYJpssQEW\naNDPmGbbj6kRt5GtC8AsYEXLtBO9dSifT+HvL10uQaAIqzpLQ6MXiP0xBLvSn0KT\npCCP89FHbngfJTqMHyMYBanhkEvfc8vSGtyiEpnHfUzcUW/9aOdXyKG95UI6TL+5\nobELFYmqCcXyfYlrqtUVyGs/OvkqBhmCOOeK8VveZXHIJRT/6V/9FxhiFRt4w2aU\nMFXaHUjjiBuhtcO0Ipb4NKUb4nj25Cb8ADyXYz/U3+LNV0DPITOfp3eRz3LgHV1g\neOULjQ6c2vCGzw9+VDvxTNcntFlVXF9dOpPStsIELc0mgRmo4nvhzy5cpO84nhEE\nPKrNqw69ORTpdR0fOXCE\n=xDSB\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBXek5f7CJQ3+kyA6slQ2parYMQoCb2Sj7Jg6q3U0bX4CP/wEGlLv6HuPdBI\nMMN7mxUiDtEI8QRcWv6P8Ai533mwK3lMEgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQhu+HJatDOhyowfKo\n+DlWFgjwEA7j7O5sIregmQ1YhWLNZPwI8QRcWv6Q8Aj+OIXSSxMXFQCD3+MNLvkM\njikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEJL/\nYyak8CAgwv3V4DlOJT0I8QRcWv6Q8AiJofO7RfZuRgCD3+MNLvkMjiwraHR0cHM6\nLy9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ8snvkPN85mxA\nqtclc2eTtAjxBFxa/pDwCLgafUO/gGYVAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree d0f1f41c5973a0965f0e594e1bc30f85cddd7fa5\nparent 645a1264f3363627f8f9a9fa5c44b6d293d5fa07\nparent fa1db331dea5af916d54e679a69013065a8cbc91\nauthor MarcoFalke <falke.marco@gmail.com> 1549467276 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549467278 -0500\n\nMerge #15349: travis: Only exit early if compilation took longer than 30 min\n\nfa1db331de travis: Only exit early if compilation took longer than 30 min (MarcoFalke)\n\nPull request description:\n\n  As opposed to 25 minutes, which hits quite often when a header changes or the pull request cache is outdated.\n\nTree-SHA512: 3d585e6441a4e5620eb30cf31dc7219fabe3fe2adb53c485339ed9d627a40307af1b0aa2bf73353322932952d92444e29cdef21914da166f20eab7a288a75df5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "645a1264f3363627f8f9a9fa5c44b6d293d5fa07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/645a1264f3363627f8f9a9fa5c44b6d293d5fa07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/645a1264f3363627f8f9a9fa5c44b6d293d5fa07"
      },
      {
        "sha": "fa1db331dea5af916d54e679a69013065a8cbc91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1db331dea5af916d54e679a69013065a8cbc91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1db331dea5af916d54e679a69013065a8cbc91"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "873b33b05b0d7a5653cc1ad7967489a7094d8698",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d",
        "patch": "@@ -33,7 +33,7 @@ before_script:\n   - set -o errexit; source .travis/test_05_before_script.sh\n script:\n   - if [ $SECONDS -gt 1200 ]; then set +o errexit; echo \"Travis early exit to cache current state\"; false; else set -o errexit; source .travis/test_06_script_a.sh; fi\n-  - if [ $SECONDS -gt 1500 ]; then set +o errexit; echo \"Travis early exit to cache current state\"; false; else set -o errexit; source .travis/test_06_script_b.sh; fi\n+  - if [ $SECONDS -gt 1800 ]; then set +o errexit; echo \"Travis early exit to cache current state\"; false; else set -o errexit; source .travis/test_06_script_b.sh; fi\n after_script:\n   - echo $TRAVIS_COMMIT_RANGE\n   - echo $TRAVIS_COMMIT_LOG"
      }
    ]
  },
  {
    "sha": "12a910c9435c1e5437984061e11c7d00523e37c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmE5MTBjOTQzNWMxZTU0Mzc5ODQwNjFlMTFjN2QwMDUyM2UzN2M1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-06T15:59:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-06T16:00:30Z"
      },
      "message": "Merge #15091: GUI: fix model overlay header sync\n\ne8db6b8044424a6fbb4b0a80acffc8c7fbf6be8b Qt: Fix update headers-count (Jonas Schnelli)\n7bb45e4b7a71e0ff0e2bbeba5367022758efa5d4 Qt: update header count regardless of update delay (Jonas Schnelli)\n\nPull request description:\n\n  Update the block and header tip is constraint to have a minimal distance of 250ms between updates... which can lead to miss the last header update.\n\n  The modal overlay then assumes we are still in header sync and the view get stuck in \"syncing headers,...\" (while it's actually syncing blocks).\n\n  This removes the 250ms minimal delta for header updates as well as it fixes the correct display of how header updates should update the labels.\n\nTree-SHA512: 57608dac822b135cd604fc6ba1c80f25c0202a6e20bb140362026615d4bf243ef4fcc254a11bad36419c554a222a2f4947438d4ce44aa14041d1874751643d68",
      "tree": {
        "sha": "e91fba2ae9991ed91d8072a013546bb3c57d9eb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e91fba2ae9991ed91d8072a013546bb3c57d9eb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12a910c9435c1e5437984061e11c7d00523e37c5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxbBJ4ACgkQHkrtYphs\n0l0ToQf/Yi35q8RM4Vei+Z1Vj37s4uoYTWDexedW0WdRphr/2EvIX6mUA66RIf8S\nko+ipNOXSP9ziCl8jS+VgU0Te26lpbbL8pae6uzI0NFC8NL1YOa7CfEv3r6JqGl8\ndfL8J5qyqVy/PGmOtav9mkO+KaagRbFDz2SxTMBmV33mo1qL1b6YyP+MPZyDB1/8\n8vZOM882oALCIvZOn7TiZpaj/ycruuHLAECB7Xcrc79knHpX03My0cewV3gJjQ+i\ncy0JUh4uzHnIfWBgSiGc9IRM+Hwt9wwJtStNNcIicZl99IuRzax789QLREbeDP3w\npb2ObN+geXjqKgOQ2lXIma6wQbJxqQ==\n=CCWT\n-----END PGP SIGNATURE-----",
        "payload": "tree e91fba2ae9991ed91d8072a013546bb3c57d9eb2\nparent ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d\nparent e8db6b8044424a6fbb4b0a80acffc8c7fbf6be8b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1549468790 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1549468830 +0100\n\nMerge #15091: GUI: fix model overlay header sync\n\ne8db6b8044424a6fbb4b0a80acffc8c7fbf6be8b Qt: Fix update headers-count (Jonas Schnelli)\n7bb45e4b7a71e0ff0e2bbeba5367022758efa5d4 Qt: update header count regardless of update delay (Jonas Schnelli)\n\nPull request description:\n\n  Update the block and header tip is constraint to have a minimal distance of 250ms between updates... which can lead to miss the last header update.\n\n  The modal overlay then assumes we are still in header sync and the view get stuck in \"syncing headers,...\" (while it's actually syncing blocks).\n\n  This removes the 250ms minimal delta for header updates as well as it fixes the correct display of how header updates should update the labels.\n\nTree-SHA512: 57608dac822b135cd604fc6ba1c80f25c0202a6e20bb140362026615d4bf243ef4fcc254a11bad36419c554a222a2f4947438d4ce44aa14041d1874751643d68\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a910c9435c1e5437984061e11c7d00523e37c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12a910c9435c1e5437984061e11c7d00523e37c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a910c9435c1e5437984061e11c7d00523e37c5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddae781a0cc1c800ff41a3534e8e3b22e3bdf50d"
      },
      {
        "sha": "e8db6b8044424a6fbb4b0a80acffc8c7fbf6be8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8db6b8044424a6fbb4b0a80acffc8c7fbf6be8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8db6b8044424a6fbb4b0a80acffc8c7fbf6be8b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "27b4c182f9e50e1a81c5f6eb06b9ad8baea01c6a",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12a910c9435c1e5437984061e11c7d00523e37c5/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12a910c9435c1e5437984061e11c7d00523e37c5/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=12a910c9435c1e5437984061e11c7d00523e37c5",
        "patch": "@@ -237,8 +237,8 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, int heig\n         clientmodel->cachedBestHeaderHeight = height;\n         clientmodel->cachedBestHeaderTime = blockTime;\n     }\n-    // if we are in-sync, update the UI regardless of last update time\n-    if (!initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n+    // if we are in-sync or if we notify a header update, update the UI regardless of last update time\n+    if (fHeader || !initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass an async signal to the UI thread\n         QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n                                   Q_ARG(int, height),"
      },
      {
        "sha": "8ecc33da849cd24d9d5e05bd28e44ab9feecfb6f",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12a910c9435c1e5437984061e11c7d00523e37c5/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12a910c9435c1e5437984061e11c7d00523e37c5/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=12a910c9435c1e5437984061e11c7d00523e37c5",
        "patch": "@@ -71,6 +71,7 @@ void ModalOverlay::setKnownBestHeight(int count, const QDateTime& blockDate)\n     if (count > bestHeaderHeight) {\n         bestHeaderHeight = count;\n         bestHeaderDate = blockDate;\n+        UpdateHeaderSyncLabel();\n     }\n }\n \n@@ -136,11 +137,16 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n     if (estimateNumHeadersLeft < HEADER_HEIGHT_DELTA_SYNC && hasBestHeader) {\n         ui->numberOfBlocksLeft->setText(QString::number(bestHeaderHeight - count));\n     } else {\n-        ui->numberOfBlocksLeft->setText(tr(\"Unknown. Syncing Headers (%1)...\").arg(bestHeaderHeight));\n+        UpdateHeaderSyncLabel();\n         ui->expectedTimeLeft->setText(tr(\"Unknown...\"));\n     }\n }\n \n+void ModalOverlay::UpdateHeaderSyncLabel() {\n+    int est_headers_left = bestHeaderDate.secsTo(QDateTime::currentDateTime()) / Params().GetConsensus().nPowTargetSpacing;\n+    ui->numberOfBlocksLeft->setText(tr(\"Unknown. Syncing Headers (%1, %2%)...\").arg(bestHeaderHeight).arg(QString::number(100.0 / (bestHeaderHeight + est_headers_left) * bestHeaderHeight, 'f', 1)));\n+}\n+\n void ModalOverlay::toggleVisibility()\n {\n     showHide(layerIsVisible, true);"
      },
      {
        "sha": "cf8b53f2b35fb0ffe9b6bee29b09b756839bc652",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12a910c9435c1e5437984061e11c7d00523e37c5/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12a910c9435c1e5437984061e11c7d00523e37c5/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=12a910c9435c1e5437984061e11c7d00523e37c5",
        "patch": "@@ -45,6 +45,7 @@ public Q_SLOTS:\n     QVector<QPair<qint64, double> > blockProcessTime;\n     bool layerIsVisible;\n     bool userClosed;\n+    void UpdateHeaderSyncLabel();\n };\n \n #endif // BITCOIN_QT_MODALOVERLAY_H"
      }
    ]
  },
  {
    "sha": "1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTYwMzY5NzhlOWQ3ZmFiYWZjZDdhMTEzYTIyMWQ2OGJjMWJkOGRi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T16:18:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T16:18:27Z"
      },
      "message": "Merge #15354: doc: Add missing bitcoin-wallet tool manpages\n\nfa1e281547 doc: Add missing wallet-tool manpages (MarcoFalke)\nfa0fe3b8a4 contrib: Add missing wallet tool to gen-manpages.sh (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 8c5c7e98f634cb1c8b43ecc9a15f22df2f572f5d752fb20f09910fb0d31e74df8144c1833f54bb44ad53cb5ca166f7e896317951899d4b0aa05bd3262f66835c",
      "tree": {
        "sha": "00235a2345820b520e1325bba820c0ae706062b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00235a2345820b520e1325bba820c0ae706062b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcWwjUAAoJENLqSFDnUoslf8EP/2FAsKl3WuJcICfiEswn+oWp\nv36YbnlT1U4aLg+fzMObrbWuN7vCiLvvcASTnHNU03Kpm9Bn6AgPb407LahtoXZz\nro3iAs8Y4hwx5wh+qD7suWC9ZylOTPeOHtwnzmwsTnsVlatNNXgYRzPsE9CC+L78\nzlvBoc8w3yN29OgPPgIkRqbaJA+UVqTy9UzQJ/GEAOTcHFZcdLcbd5i6bFqvL+a0\n/vHgIdpwPVUbdhi6SmvGxTdA88XQ0I+QKJHYYlFOJqlVmp5Qr8sw8rXYhw5fFclB\n4eUbQupPnz/+exbAePUg8tv/B1YQIi4yizDp5WDjetv816DUe2S+GGUqBMDCdA2I\njG3ljQIr241cbu/GOfC3vwQFgRwEtYVhQ2lxjJv/tISP2hR3HwQK/AKYhl8RqxdJ\nwrzUVFk3bKR6qyIhbBC85NTI1P43kaW8wKLEE5VNAHpZbEkii4vpdy72fxsClMTd\ntiHPDj6HIRINWDV/ktJHrYXIM+5iMvDEFsABrOvJZUL34Dced3m5WbCNMEJT+cx5\nnzS8NCLA+LxUzBIqbNB3q3kKFGDhKbZATU8hWTpA8NZ7C3P3eiyvVumhxm18PhMR\nYZ6eABfay4+a5LoIpdoX6qpJRraWST8d4ms+s9TFlFuZFOZTTLbPtOYB2bSkkfuy\nqsDRbOlaD0U3yf7A2l7t\n=PgWT\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEb2QVZTqtRnrZ2we+WnG7LILwk56egu4AjpC0D/RRBsCP/wEId8cH0zW9kg\n/MuehQukuFsI8BBT+6jALwygSZwrbueG70MECPEEXFsI1vAI1R5dUYnFBfMAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BDjdiJdtY04B+023VLqwPR/CPEEXFsI1vAI9ES3l7Ajd0UAg9/jDS75DI4sK2h0\ndHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEPbJ3yRW\n1ZcZyoifXejL7HgI8QRcWwjW8AjQdgoI7kfH0ACD3+MNLvkMjiMiaHR0cHM6Ly9i\ndGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 00235a2345820b520e1325bba820c0ae706062b4\nparent 12a910c9435c1e5437984061e11c7d00523e37c5\nparent fa1e2815476409400e9d4c6b8c11e8c628be1027\nauthor MarcoFalke <falke.marco@gmail.com> 1549469903 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549469907 -0500\n\nMerge #15354: doc: Add missing bitcoin-wallet tool manpages\n\nfa1e281547 doc: Add missing wallet-tool manpages (MarcoFalke)\nfa0fe3b8a4 contrib: Add missing wallet tool to gen-manpages.sh (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 8c5c7e98f634cb1c8b43ecc9a15f22df2f572f5d752fb20f09910fb0d31e74df8144c1833f54bb44ad53cb5ca166f7e896317951899d4b0aa05bd3262f66835c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12a910c9435c1e5437984061e11c7d00523e37c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a910c9435c1e5437984061e11c7d00523e37c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12a910c9435c1e5437984061e11c7d00523e37c5"
      },
      {
        "sha": "fa1e2815476409400e9d4c6b8c11e8c628be1027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1e2815476409400e9d4c6b8c11e8c628be1027",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1e2815476409400e9d4c6b8c11e8c628be1027"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 82,
      "deletions": 14
    },
    "files": [
      {
        "sha": "63b9847100a09ff0f6f8600a96b46a87219de505",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "patch": "@@ -10,6 +10,7 @@ MANDIR=${MANDIR:-$TOPDIR/doc/man}\n BITCOIND=${BITCOIND:-$BINDIR/bitcoind}\n BITCOINCLI=${BITCOINCLI:-$BINDIR/bitcoin-cli}\n BITCOINTX=${BITCOINTX:-$BINDIR/bitcoin-tx}\n+WALLET_TOOL=${WALLET_TOOL:-$BINDIR/bitcoin-wallet}\n BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n \n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n@@ -23,7 +24,7 @@ BTCVER=($($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }'))\n echo \"[COPYRIGHT]\" > footer.h2m\n $BITCOIND --version | sed -n '1!p' >> footer.h2m\n \n-for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $BITCOINQT; do\n+for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINQT; do\n   cmdname=\"${cmd##*/}\"\n   help2man -N --version-string=${BTCVER[0]} --include=footer.h2m -o ${MANDIR}/${cmdname}.1 ${cmd}\n   sed -i \"s/\\\\\\-${BTCVER[1]}//g\" ${MANDIR}/${cmdname}.1"
      },
      {
        "sha": "355b4d3cc2b7167d3fdca393ea63f6ea23429341",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"December 2018\" \"bitcoin-cli v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"February 2019\" \"bitcoin-cli v0.17.99.0\" \"User Commands\"\n .SH NAME\n bitcoin-cli \\- manual page for bitcoin-cli v0.17.99.0\n .SH SYNOPSIS\n@@ -104,7 +104,7 @@ Chain selection options:\n .IP\n Use the test chain\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "052d420608338dbd2f0db17c5fb5331bba1912ce",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"December 2018\" \"bitcoin-qt v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"February 2019\" \"bitcoin-qt v0.17.99.0\" \"User Commands\"\n .SH NAME\n bitcoin-qt \\- manual page for bitcoin-qt v0.17.99.0\n .SH SYNOPSIS\n@@ -56,7 +56,7 @@ Specify data directory\n .HP\n \\fB\\-dbcache=\\fR<n>\n .IP\n-Set database cache size in megabytes (4 to 16384, default: 450)\n+Set database cache size in MiB (4 to 16384, default: 450)\n .HP\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n@@ -500,7 +500,7 @@ mining and transaction creation (default: 0.00001)\n \\fB\\-whitelistforcerelay\\fR\n .IP\n Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 1)\n+local relay policy (default: 0)\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -606,7 +606,7 @@ Set SSL root certificates for payment request (default: \\fB\\-system\\-\\fR)\n .IP\n Show splash screen on startup (default: 1)\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "c5d398576379abb37c1ae5ad05c9787897da907e",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"December 2018\" \"bitcoin-tx v0.17.99.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"February 2019\" \"bitcoin-tx v0.17.99.0\" \"User Commands\"\n .SH NAME\n bitcoin-tx \\- manual page for bitcoin-tx v0.17.99.0\n .SH SYNOPSIS\n@@ -92,7 +92,7 @@ sign=SIGHASH\\-FLAGS\n .IP\n Add zero or more signatures to transaction. This command requires JSON\n registers:prevtxs=JSON object, privatekeys=JSON object. See\n-signrawtransaction docs for format of sighash flags, JSON\n+signrawtransactionwithkey docs for format of sighash flags, JSON\n objects.\n .PP\n Register Commands:\n@@ -105,7 +105,7 @@ set=NAME:JSON\\-STRING\n .IP\n Set register NAME to given JSON\\-STRING\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      },
      {
        "sha": "3c4849cca75d97c6a3817a532f1db0f2fed02053",
        "filename": "doc/man/bitcoin-wallet.1",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoin-wallet.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoin-wallet.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-wallet.1?ref=1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "patch": "@@ -0,0 +1,67 @@\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n+.TH BITCOIN-WALLET \"1\" \"February 2019\" \"bitcoin-wallet v0.17.99.0\" \"User Commands\"\n+.SH NAME\n+bitcoin-wallet \\- manual page for bitcoin-wallet v0.17.99.0\n+.SH DESCRIPTION\n+Bitcoin Core bitcoin\\-wallet version v0.17.99.0\n+.PP\n+wallet\\-tool is an offline tool for creating and interacting with Bitcoin Core wallet files.\n+By default wallet\\-tool will act on wallets in the default mainnet wallet directory in the datadir.\n+To change the target wallet, use the \\fB\\-datadir\\fR, \\fB\\-wallet\\fR and \\fB\\-testnet\\fR/\\-regtest arguments.\n+.SS \"Usage:\"\n+.IP\n+bitcoin\\-wallet [options] <command>\n+.SH OPTIONS\n+.HP\n+\\-?\n+.IP\n+This help message\n+.HP\n+\\fB\\-datadir=\\fR<dir>\n+.IP\n+Specify data directory\n+.HP\n+\\fB\\-wallet=\\fR<wallet\\-name>\n+.IP\n+Specify wallet name\n+.PP\n+Debugging/Testing options:\n+.HP\n+\\fB\\-debug=\\fR<category>\n+.IP\n+Output debugging information (default: 0).\n+.HP\n+\\fB\\-printtoconsole\\fR\n+.IP\n+Send trace/debug info to console (default: 1 when no \\fB\\-debug\\fR is true, 0\n+otherwise.\n+.PP\n+Chain selection options:\n+.HP\n+\\fB\\-testnet\\fR\n+.IP\n+Use the test chain\n+.PP\n+Commands:\n+.IP\n+create\n+.IP\n+Create new wallet file\n+.IP\n+info\n+.IP\n+Get wallet info\n+.SH COPYRIGHT\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n+\n+Please contribute if you find Bitcoin Core useful. Visit\n+<https://bitcoincore.org> for further information about the software.\n+The source code is available from <https://github.com/bitcoin/bitcoin>.\n+\n+This is experimental software.\n+Distributed under the MIT software license, see the accompanying file COPYING\n+or <https://opensource.org/licenses/MIT>\n+\n+This product includes software developed by the OpenSSL Project for use in the\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "5e057d923f25e557ad60ddef314259d7c60b39b4",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a6036978e9d7fabafcd7a113a221d68bc1bd8db/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"December 2018\" \"bitcoind v0.17.99.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"February 2019\" \"bitcoind v0.17.99.0\" \"User Commands\"\n .SH NAME\n bitcoind \\- manual page for bitcoind v0.17.99.0\n .SH SYNOPSIS\n@@ -56,7 +56,7 @@ Specify data directory\n .HP\n \\fB\\-dbcache=\\fR<n>\n .IP\n-Set database cache size in megabytes (4 to 16384, default: 450)\n+Set database cache size in MiB (4 to 16384, default: 450)\n .HP\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n@@ -500,7 +500,7 @@ mining and transaction creation (default: 0.00001)\n \\fB\\-whitelistforcerelay\\fR\n .IP\n Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 1)\n+local relay policy (default: 0)\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -580,7 +580,7 @@ Username for JSON\\-RPC connections\n .IP\n Accept command line and JSON\\-RPC commands\n .SH COPYRIGHT\n-Copyright (C) 2009-2018 The Bitcoin Core developers\n+Copyright (C) 2009-2019 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software."
      }
    ]
  },
  {
    "sha": "5cdb82111cc128d68ba5268eb94787110ce1fe6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2RiODIxMTFjYzEyOGQ2OGJhNTI2OGViOTQ3ODcxMTBjZTFmZTZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T18:26:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T18:26:52Z"
      },
      "message": "Merge #15321: doc: Add cs_main lock annotations for mapBlockIndex\n\nfa2a69fcb9 doc: Add cs_main lock annotations for mapBlockIndex (practicalswift)\n\nPull request description:\n\n  Marked as \"doc\" because it didn't change the bitcoind on my system with default configure settings for both gcc and clang.\n\nTree-SHA512: ba203f16c1cdc834a61c65bb5fb20bbaf7d8bff0c3a1b8ef46bc1d3669092191221e26abd7e580efab2f9bd5a992dc363251f1b68c6cd68f8204d62675868cf1",
      "tree": {
        "sha": "78d1233db1adc8e2ae8e61d0f42974d91345951e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78d1233db1adc8e2ae8e61d0f42974d91345951e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cdb82111cc128d68ba5268eb94787110ce1fe6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcWybsAAoJENLqSFDnUosliSQP/1Xw71G+J3liqXaovAsswUHG\n+wdnnJOIAN3hwRlmCVxfStTq6V3CoVh4RivZ9BwYRv3azuOGVGMgGIts3fYYcaEa\nxD3uEakXCulyle4/zz101QAUIMRxAQ5/nPlLvSioGiOqVSHsXBlXDDlQ/g141rqH\nLUNky57HtdVqd37JtX0OonUsWwKR4RPypcbgm1gZ8bXcTP5xAo84oC0DVQZYbyG8\n1hssRO1NJeSi7GmZ/ulifLAtKruQ1l51qrl3+3fTNMyvaKYptIxKf5IudVnApBW4\neaCj+2t+q3G+w9r5IqHlAhbaiuaAUdLj+bvnFDyYcNLrwlltNif4azW16FG+c1M5\n+9X6gXr1J4/lUZtAjhJrKT5wF85STpyie652Q/f3J+SLVRkUH9ICx0jBu9VoqQOb\n6WmMfSve8LBLiD7+BOJqlh+zp6hUSMN5VRvVjyRqdp53RwoW0uLVSxRNAQtKhOxU\nRIVN8pq99PJOKcmdNY5bAvOEt9ypWY9rRHs97mZ4QdK0an8HdsdWAOJ3MluGj0or\nWAXrja0w018QlIxWIzHsCw7FvKi1xmJ7vvq1KC9W3KQo2HNv0G0CTjms/CFdhs3O\nBls+Ng+fd7+Nb3l6eTxZ/7vHsx53fs7HgNGUZvSqqXmOAOPCSiUDYX3i1ome6L62\nYdaP4W+Yu2qQdxwat8wr\n=cC4I\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFYnnCkRo3L3QsluW0HqPly/Whg+PtdVUILeb4dr31+wCP/wEEvvgmHrIqVH\nKrW9kkcVulwI8QRcWybu8Ah4tuxEHjqtGACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEEzqpT36muaXULi4+HXW\n1uMI8QRcWybv8AjvtD50itAKTgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEHbLPBx82h5R+dx0kAKJe6kI8CDzQOHKHPmu9sgR\netpzJqElp5K3BsxxTmnFmZN2pX1xrAjxBFxbJu/wCOf10OuQn+giAIPf4w0u+QyO\nLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfw\nEMeo4rBW2flwRkW/xFUh53AI8BCV4UJf3KrofmdCKFYBCZ3HCPEEXFsm7/AIWMk+\n7oH6yKkAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5\nd2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 78d1233db1adc8e2ae8e61d0f42974d91345951e\nparent 1a6036978e9d7fabafcd7a113a221d68bc1bd8db\nparent fa2a69fcb92c7f13c07f982c46df8a64e577dab9\nauthor MarcoFalke <falke.marco@gmail.com> 1549477609 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549477612 -0500\n\nMerge #15321: doc: Add cs_main lock annotations for mapBlockIndex\n\nfa2a69fcb9 doc: Add cs_main lock annotations for mapBlockIndex (practicalswift)\n\nPull request description:\n\n  Marked as \"doc\" because it didn't change the bitcoind on my system with default configure settings for both gcc and clang.\n\nTree-SHA512: ba203f16c1cdc834a61c65bb5fb20bbaf7d8bff0c3a1b8ef46bc1d3669092191221e26abd7e580efab2f9bd5a992dc363251f1b68c6cd68f8204d62675868cf1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cdb82111cc128d68ba5268eb94787110ce1fe6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cdb82111cc128d68ba5268eb94787110ce1fe6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cdb82111cc128d68ba5268eb94787110ce1fe6e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a6036978e9d7fabafcd7a113a221d68bc1bd8db"
      },
      {
        "sha": "fa2a69fcb92c7f13c07f982c46df8a64e577dab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2a69fcb92c7f13c07f982c46df8a64e577dab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2a69fcb92c7f13c07f982c46df8a64e577dab9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dbdc1afb359caa8955f24b1f66b7b6617ed229c2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdb82111cc128d68ba5268eb94787110ce1fe6e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdb82111cc128d68ba5268eb94787110ce1fe6e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5cdb82111cc128d68ba5268eb94787110ce1fe6e",
        "patch": "@@ -152,7 +152,7 @@ class CChainState {\n \n public:\n     CChain chainActive;\n-    BlockMap mapBlockIndex;\n+    BlockMap mapBlockIndex GUARDED_BY(cs_main);\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n     CBlockIndex *pindexBestInvalid = nullptr;\n "
      },
      {
        "sha": "49f73e4c9b664de97b47ce60341bc0dd3fb6feb1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdb82111cc128d68ba5268eb94787110ce1fe6e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdb82111cc128d68ba5268eb94787110ce1fe6e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=5cdb82111cc128d68ba5268eb94787110ce1fe6e",
        "patch": "@@ -151,7 +151,7 @@ extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n extern std::atomic_bool g_is_mempool_loaded;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap& mapBlockIndex;\n+extern BlockMap& mapBlockIndex GUARDED_BY(cs_main);\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n@@ -288,7 +288,7 @@ uint64_t CalculateCurrentUsage();\n /**\n  *  Mark one block file as pruned.\n  */\n-void PruneOneBlockFile(const int fileNumber);\n+void PruneOneBlockFile(const int fileNumber) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  *  Actually unlink the specified files"
      },
      {
        "sha": "c5efd32d7780e1c0d96bafe701c16fbc99fd7cfe",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cdb82111cc128d68ba5268eb94787110ce1fe6e/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cdb82111cc128d68ba5268eb94787110ce1fe6e/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=5cdb82111cc128d68ba5268eb94787110ce1fe6e",
        "patch": "@@ -44,6 +44,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = chainActive.Tip();\n \n+    LockAnnotation lock(::cs_main);\n     auto locked_chain = chain->lock();\n \n     // Verify ScanForWalletTransactions accommodates a null start block.\n@@ -123,6 +124,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = chainActive.Tip();\n \n+    LockAnnotation lock(::cs_main);\n     auto locked_chain = chain->lock();\n \n     // Prune the older block file.\n@@ -268,6 +270,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     SetMockTime(mockTime);\n     CBlockIndex* block = nullptr;\n     if (blockTime > 0) {\n+        LockAnnotation lock(::cs_main);\n         auto locked_chain = wallet.chain().lock();\n         auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);"
      }
    ]
  },
  {
    "sha": "a99999cc04c2e7d79bb841fd954c84e985ed3b88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTk5OTljYzA0YzJlN2Q3OWJiODQxZmQ5NTRjODRlOTg1ZWQzYjg4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T18:57:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-06T19:16:43Z"
      },
      "message": "util: Add SetupHelpOptions()",
      "tree": {
        "sha": "4e32156106ce44a6e47805a9b7c6d8ebc7514460",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e32156106ce44a6e47805a9b7c6d8ebc7514460"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a99999cc04c2e7d79bb841fd954c84e985ed3b88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcWzKbAAoJEM4rdWl+aaVITHgL/3IFV/yvx3cS+is3u7/RPVCP\nZXhQZKNmL5k2z3ZoCDEatrQszTyDTeqlEDgoi9i5O2kdq2gbzBoCklN238sVYITV\nOMnUgql82DUngEDNotu0m227pu5yO6SZ/1AtBZvm/i2nGKM7ePNAV17kQlcQ5hMZ\nx3FZeR6HLNLZWQywVofBWiG8R3IBUthVdUWotIvCIJjmSFoStOdjgIg1+tDSwkGv\nC6FPpnW6OaZP2ZEuEG6piRJLFOpeMzJoG5UTt+CUi4sKkCo6PzFSp4r64QaBDMXt\n0p6oB+6ODhH9e6VjflqKvLke6PECg4mIK5Aio6jGly0aVAmNDkhHEt0A9D+qE9V0\npyTShVXnqSu6UrvJqin0h3VifQnC5ZDwLVRYKGlFhQ7KU2kD77t8PLj3LEIRX2tq\nErW2cSIMVVwUr7Uz12+B7azf5OVS50FdY0XE699lrh98isd/BczwRUixewLaBs05\n2Wo7kfy56Cv9YSug6BGGmJ9Hy0hod9AOs5u+G15T/g==\n=I1tV\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e32156106ce44a6e47805a9b7c6d8ebc7514460\nparent 1a6036978e9d7fabafcd7a113a221d68bc1bd8db\nauthor MarcoFalke <falke.marco@gmail.com> 1549479472 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549480603 -0500\n\nutil: Add SetupHelpOptions()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99999cc04c2e7d79bb841fd954c84e985ed3b88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a99999cc04c2e7d79bb841fd954c84e985ed3b88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99999cc04c2e7d79bb841fd954c84e985ed3b88/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a6036978e9d7fabafcd7a113a221d68bc1bd8db"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 23,
      "deletions": 28
    },
    "files": [
      {
        "sha": "95c1d24dff0cc13d6b46728008564080ffe5674c",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -20,7 +20,7 @@ Bitcoin Core RPC client version v0.17.99.0\n .HP\n \\-?\n .IP\n-This help message\n+Print this help message and exit\n .HP\n \\fB\\-conf=\\fR<file>\n .IP"
      },
      {
        "sha": "6b6071d9b744c6c21923086773b5563585d6824e",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -14,7 +14,7 @@ Bitcoin Core bitcoin\\-tx utility version v0.17.99.0\n .HP\n \\-?\n .IP\n-This help message\n+Print this help message and exit\n .HP\n \\fB\\-create\\fR\n .IP"
      },
      {
        "sha": "1cb8cdebcd3e533936120218d5d0243ef132b842",
        "filename": "doc/man/bitcoin-wallet.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/doc/man/bitcoin-wallet.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/doc/man/bitcoin-wallet.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-wallet.1?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -15,7 +15,7 @@ bitcoin\\-wallet [options] <command>\n .HP\n \\-?\n .IP\n-This help message\n+Print this help message and exit\n .HP\n \\fB\\-datadir=\\fR<dir>\n .IP"
      },
      {
        "sha": "d67b2c5bc7896fa68370dfe6aa4967520b14d3b8",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -24,7 +24,8 @@ static const int64_t DEFAULT_PLOT_HEIGHT = 768;\n \n static void SetupBenchArgs()\n {\n-    gArgs.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n+    SetupHelpOptions(gArgs);\n+\n     gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), false, OptionsCategory::OPTIONS);\n@@ -33,10 +34,6 @@ static void SetupBenchArgs()\n     gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), false, OptionsCategory::OPTIONS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n static fs::path SetDataDir()"
      },
      {
        "sha": "b0e1f67d93981f32fceab04f91d0153a75e2c6ea",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -34,11 +34,12 @@ static const int CONTINUE_EXECUTION=-1;\n \n static void SetupCliArgs()\n {\n+    SetupHelpOptions(gArgs);\n+\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n-    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n@@ -55,10 +56,6 @@ static void SetupCliArgs()\n     gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n /** libevent event log callback */"
      },
      {
        "sha": "4be89aab6cfe1986c1e5b8f9ddced62716baf8e9",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -35,7 +35,8 @@ const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n static void SetupBitcoinTxArgs()\n {\n-    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n+    SetupHelpOptions(gArgs);\n+\n     gArgs.AddArg(\"-create\", \"Create new, empty TX.\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-json\", \"Select JSON output\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", false, OptionsCategory::OPTIONS);\n@@ -66,10 +67,6 @@ static void SetupBitcoinTxArgs()\n \n     gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", false, OptionsCategory::REGISTER_COMMANDS);\n     gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", false, OptionsCategory::REGISTER_COMMANDS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n //"
      },
      {
        "sha": "32a539aac66d914f4254012315ec3a7d7acb4383",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -20,20 +20,16 @@ const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n static void SetupWalletToolArgs()\n {\n+    SetupHelpOptions(gArgs);\n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", false, OptionsCategory::DEBUG_TEST);\n \n     gArgs.AddArg(\"info\", \"Get wallet info\", false, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"create\", \"Create new wallet file\", false, OptionsCategory::COMMANDS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "09e28f4006d29477690fa98274658824260220ed",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -326,6 +326,9 @@ static void OnRPCStopped()\n \n void SetupServerArgs()\n {\n+    SetupHelpOptions(gArgs);\n+    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", false, OptionsCategory::DEBUG_TEST); // server-only for now\n+\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n@@ -334,14 +337,11 @@ void SetupServerArgs()\n     const auto regtestChainParams = CreateChainParams(CBaseChainParams::REGTEST);\n \n     // Hidden Options\n-    std::vector<std::string> hidden_args = {\"-h\", \"-help\",\n+    std::vector<std::string> hidden_args = {\n         \"-dbcrashratio\", \"-forcecompactdb\",\n         // GUI args. These will be overwritten by SetupUIArgs for the GUI\n         \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n \n-    // Set all of the args and their help\n-    // When adding new options to the categories, please keep and ensure alphabetical ordering.\n-    gArgs.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n@@ -470,7 +470,6 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "27ed24d01223e8c1269f34d035506f2a03982fe7",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -635,6 +635,12 @@ bool HelpRequested(const ArgsManager& args)\n     return args.IsArgSet(\"-?\") || args.IsArgSet(\"-h\") || args.IsArgSet(\"-help\") || args.IsArgSet(\"-help-debug\");\n }\n \n+void SetupHelpOptions(ArgsManager& args)\n+{\n+    args.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n+    args.AddHiddenArgs({\"-h\", \"-help\"});\n+}\n+\n static const int screenWidth = 79;\n static const int optIndent = 2;\n static const int msgIndent = 7;"
      },
      {
        "sha": "54d4cf2e58b738ded4e4cc528a9c006b54ba5083",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99999cc04c2e7d79bb841fd954c84e985ed3b88/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "patch": "@@ -295,6 +295,9 @@ extern ArgsManager gArgs;\n  */\n bool HelpRequested(const ArgsManager& args);\n \n+/** Add help options to the args manager */\n+void SetupHelpOptions(ArgsManager& args);\n+\n /**\n  * Format a string to be used as group of options in help messages\n  *"
      }
    ]
  },
  {
    "sha": "72d34c0edc5ad9e69e0d054459ec15d2278f206b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmQzNGMwZWRjNWFkOWU2OWUwZDA1NDQ1OWVjMTVkMjI3OGYyMDZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-06T21:42:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-06T21:47:32Z"
      },
      "message": "Merge #15343: [doc] netaddress: Make IPv4 loopback comment more descriptive\n\n87aa0b48afe5a070e6e11e502a1803da6add5197 netaddress: Make IPv4 loopback comment more descriptive (Carl Dong)\n6180b5f32bbcd7ef18db772290954161806e609e netaddress: Fix indentation in IsLocal (Carl Dong)\n\nPull request description:\n\n  This also makes the comment match the IPv6 comment just below this hunk.\n\nTree-SHA512: 9b91195e71e18156c9e013f63a6d430c67951aabb4a0c2f48f3bf852570c13887572b9e2fa52f4e1beba8685a9cae8949d4d03cd618a78f88566cf9e85dc64a8",
      "tree": {
        "sha": "eefb140b8e3b800bfaec48f9e12513cb17d306a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eefb140b8e3b800bfaec48f9e12513cb17d306a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72d34c0edc5ad9e69e0d054459ec15d2278f206b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxbVfQACgkQHkrtYphs\n0l0BiggAowxYbJXoA2XPC140zdc3Q5baIW130tlzgmpJKTDazuKFIN6IMQ+ulsgU\niEahssF+/Fx9PTZL2z0lI5RzjFvm/6C/RryYEJ4JBxxfZci66VVO724gn9rCOzxH\nFKbNJnXDZlWEgCy4lhz58Kf6yL3+x+HeFryTYreSiPt+9oFGw3Iu6C7Tq85ys2J2\np+d6xRe4DX6GXE/ZuvvCYI/mAyfHB6SiR1LgGh0e4p4+HFEJLuqgYZWq4KdgKCp9\nwm8Gb15r+FAE2kVEZ2OM5MCWoihgSCo5MEnDZeGnMSlKC1Uq1c6qcIqD3/5gPSBO\nWj++DOLK2j8h3hlMTp6cRxlZOpZkdA==\n=j5AE\n-----END PGP SIGNATURE-----",
        "payload": "tree eefb140b8e3b800bfaec48f9e12513cb17d306a9\nparent 5cdb82111cc128d68ba5268eb94787110ce1fe6e\nparent 87aa0b48afe5a070e6e11e502a1803da6add5197\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1549489346 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1549489652 +0100\n\nMerge #15343: [doc] netaddress: Make IPv4 loopback comment more descriptive\n\n87aa0b48afe5a070e6e11e502a1803da6add5197 netaddress: Make IPv4 loopback comment more descriptive (Carl Dong)\n6180b5f32bbcd7ef18db772290954161806e609e netaddress: Fix indentation in IsLocal (Carl Dong)\n\nPull request description:\n\n  This also makes the comment match the IPv6 comment just below this hunk.\n\nTree-SHA512: 9b91195e71e18156c9e013f63a6d430c67951aabb4a0c2f48f3bf852570c13887572b9e2fa52f4e1beba8685a9cae8949d4d03cd618a78f88566cf9e85dc64a8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72d34c0edc5ad9e69e0d054459ec15d2278f206b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72d34c0edc5ad9e69e0d054459ec15d2278f206b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72d34c0edc5ad9e69e0d054459ec15d2278f206b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cdb82111cc128d68ba5268eb94787110ce1fe6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cdb82111cc128d68ba5268eb94787110ce1fe6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cdb82111cc128d68ba5268eb94787110ce1fe6e"
      },
      {
        "sha": "87aa0b48afe5a070e6e11e502a1803da6add5197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87aa0b48afe5a070e6e11e502a1803da6add5197",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87aa0b48afe5a070e6e11e502a1803da6add5197"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "58e45c2c022b7e2b288ba5ba0b5d5d70c9cd2e95",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72d34c0edc5ad9e69e0d054459ec15d2278f206b/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72d34c0edc5ad9e69e0d054459ec15d2278f206b/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=72d34c0edc5ad9e69e0d054459ec15d2278f206b",
        "patch": "@@ -182,16 +182,16 @@ bool CNetAddr::IsTor() const\n \n bool CNetAddr::IsLocal() const\n {\n-    // IPv4 loopback\n-   if (IsIPv4() && (GetByte(3) == 127 || GetByte(3) == 0))\n-       return true;\n+    // IPv4 loopback (127.0.0.0/8 or 0.0.0.0/8)\n+    if (IsIPv4() && (GetByte(3) == 127 || GetByte(3) == 0))\n+        return true;\n \n-   // IPv6 loopback (::1/128)\n-   static const unsigned char pchLocal[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};\n-   if (memcmp(ip, pchLocal, 16) == 0)\n-       return true;\n+    // IPv6 loopback (::1/128)\n+    static const unsigned char pchLocal[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};\n+    if (memcmp(ip, pchLocal, 16) == 0)\n+        return true;\n \n-   return false;\n+    return false;\n }\n \n bool CNetAddr::IsValid() const"
      }
    ]
  },
  {
    "sha": "1cff3d6cb017aea87d16cbda0768bbab256d16da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2ZmM2Q2Y2IwMTdhZWE4N2QxNmNiZGEwNzY4YmJhYjI1NmQxNmRh",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2019-02-07T04:25:27Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2019-02-07T04:25:27Z"
      },
      "message": "Change in transaction pull scheduling to prevent InvBlock-related attacks\n\nCo-authored-by: Suhas Daftuar <sdaftuar@gmail.com>",
      "tree": {
        "sha": "8655b5b333b8050199464f4ad8034b46fe37c800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8655b5b333b8050199464f4ad8034b46fe37c800"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cff3d6cb017aea87d16cbda0768bbab256d16da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cff3d6cb017aea87d16cbda0768bbab256d16da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cff3d6cb017aea87d16cbda0768bbab256d16da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cff3d6cb017aea87d16cbda0768bbab256d16da/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5029e94f855c73bad2e0ea6dc0378f33787ae131"
      }
    ],
    "stats": {
      "total": 249,
      "additions": 168,
      "deletions": 81
    },
    "files": [
      {
        "sha": "87f1ef05775bf341b1f2082b854152fd6b5fe917",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1cff3d6cb017aea87d16cbda0768bbab256d16da",
        "patch": "@@ -85,8 +85,6 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n-\n void CConnman::AddOneShot(const std::string& strDest)\n {\n     LOCK(cs_vOneShots);\n@@ -2644,40 +2642,6 @@ CNode::~CNode()\n     CloseSocket(hSocket);\n }\n \n-void CNode::AskFor(const CInv& inv)\n-{\n-    if (mapAskFor.size() > MAPASKFOR_MAX_SZ || setAskFor.size() > SETASKFOR_MAX_SZ)\n-        return;\n-    // a peer may not have multiple non-responded queue positions for a single inv item\n-    if (!setAskFor.insert(inv.hash).second)\n-        return;\n-\n-    // We're using mapAskFor as a priority queue,\n-    // the key is the earliest time the request can be sent\n-    int64_t nRequestTime;\n-    limitedmap<uint256, int64_t>::const_iterator it = mapAlreadyAskedFor.find(inv.hash);\n-    if (it != mapAlreadyAskedFor.end())\n-        nRequestTime = it->second;\n-    else\n-        nRequestTime = 0;\n-    LogPrint(BCLog::NET, \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, FormatISO8601Time(nRequestTime/1000000), id);\n-\n-    // Make sure not to reuse time indexes to keep things in the same order\n-    int64_t nNow = GetTimeMicros() - 1000000;\n-    static int64_t nLastTime;\n-    ++nLastTime;\n-    nNow = std::max(nNow, nLastTime);\n-    nLastTime = nNow;\n-\n-    // Each retry is 2 minutes after the last\n-    nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n-    if (it != mapAlreadyAskedFor.end())\n-        mapAlreadyAskedFor.update(it, nRequestTime);\n-    else\n-        mapAlreadyAskedFor.insert(std::make_pair(inv.hash, nRequestTime));\n-    mapAskFor.insert(std::make_pair(nRequestTime, inv));\n-}\n-\n bool CConnman::NodeFullyConnected(const CNode* pnode)\n {\n     return pnode && pnode->fSuccessfullyConnected && !pnode->fDisconnect;"
      },
      {
        "sha": "869c8079ca3fb2f19dfced208b3340777328b316",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1cff3d6cb017aea87d16cbda0768bbab256d16da",
        "patch": "@@ -67,10 +67,6 @@ static const bool DEFAULT_UPNP = USE_UPNP;\n #else\n static const bool DEFAULT_UPNP = false;\n #endif\n-/** The maximum number of entries in mapAskFor */\n-static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n-/** The maximum number of entries in setAskFor (larger due to getdata latency)*/\n-static const size_t SETASKFOR_MAX_SZ = 2 * MAX_INV_SZ;\n /** The maximum number of peer connections to maintain. */\n static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n /** The default for -maxuploadtarget. 0 = Unlimited */\n@@ -514,8 +510,6 @@ extern bool fDiscover;\n extern bool fListen;\n extern bool fRelayTxes;\n \n-extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n-\n /** Subversion as sent to the P2P network in `version` messages */\n extern std::string strSubVersion;\n \n@@ -704,8 +698,6 @@ class CNode\n     // and in the order requested.\n     std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\n     CCriticalSection cs_inventory;\n-    std::set<uint256> setAskFor;\n-    std::multimap<int64_t, CInv> mapAskFor;\n     int64_t nNextInvSend{0};\n     // Used for headers announcements - unfiltered blocks to relay\n     std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(cs_inventory);\n@@ -852,8 +844,6 @@ class CNode\n         vBlockHashesToAnnounce.push_back(hash);\n     }\n \n-    void AskFor(const CInv& inv);\n-\n     void CloseSocketDisconnect();\n \n     void copyStats(CNodeStats &stats);"
      },
      {
        "sha": "5927a14a6ec5b4abce62dbffe83ee9d8699241c5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 168,
        "deletions": 18,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1cff3d6cb017aea87d16cbda0768bbab256d16da",
        "patch": "@@ -64,6 +64,21 @@ static constexpr int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n /// Age after which a block is considered historical for purposes of rate\n /// limiting block relay. Set to one week, denominated in seconds.\n static constexpr int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n+/** Maximum number of in-flight transactions from a peer */\n+static constexpr int32_t MAX_PEER_TX_IN_FLIGHT = 100;\n+/** Maximum number of announced transactions from a peer */\n+static constexpr int32_t MAX_PEER_TX_ANNOUNCEMENTS = 2 * MAX_INV_SZ;\n+/** How many microseconds to delay requesting transactions from inbound peers */\n+static constexpr int64_t INBOUND_PEER_TX_DELAY = 2 * 1000000;\n+/** How long to wait (in microseconds) before downloading a transaction from an additional peer */\n+static constexpr int64_t GETDATA_TX_INTERVAL = 60 * 1000000;\n+/** Maximum delay (in microseconds) for transaction requests to avoid biasing some peers over others. */\n+static constexpr int64_t MAX_GETDATA_RANDOM_DELAY = 2 * 1000000;\n+static_assert(INBOUND_PEER_TX_DELAY >= MAX_GETDATA_RANDOM_DELAY,\n+\"To preserve security, MAX_GETDATA_RANDOM_DELAY should not exceed INBOUND_PEER_DELAY\");\n+/** Limit to avoid sending big packets. Not used in processing incoming GETDATA for compatibility */\n+static const unsigned int MAX_GETDATA_SZ = 1000;\n+\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -274,6 +289,66 @@ struct CNodeState {\n     //! Time of last new block announcement\n     int64_t m_last_block_announcement;\n \n+    /*\n+     * State associated with transaction download.\n+     *\n+     * Tx download algorithm:\n+     *\n+     *   When inv comes in, queue up (process_time, txid) inside the peer's\n+     *   CNodeState (m_tx_process_time) as long as m_tx_announced for the peer\n+     *   isn't too big (MAX_PEER_TX_ANNOUNCEMENTS).\n+     *\n+     *   The process_time for a transaction is set to nNow for outbound peers,\n+     *   nNow + 2 seconds for inbound peers. This is the time at which we'll\n+     *   consider trying to request the transaction from the peer in\n+     *   SendMessages(). The delay for inbound peers is to allow outbound peers\n+     *   a chance to announce before we request from inbound peers, to prevent\n+     *   an adversary from using inbound connections to blind us to a\n+     *   transaction (InvBlock).\n+     *\n+     *   When we call SendMessages() for a given peer,\n+     *   we will loop over the transactions in m_tx_process_time, looking\n+     *   at the transactions whose process_time <= nNow. We'll request each\n+     *   such transaction that we don't have already and that hasn't been\n+     *   requested from another peer recently, up until we hit the\n+     *   MAX_PEER_TX_IN_FLIGHT limit for the peer. Then we'll update\n+     *   g_already_asked_for for each requested txid, storing the time of the\n+     *   GETDATA request. We use g_already_asked_for to coordinate transaction\n+     *   requests amongst our peers.\n+     *\n+     *   For transactions that we still need but we have already recently\n+     *   requested from some other peer, we'll reinsert (process_time, txid)\n+     *   back into the peer's m_tx_process_time at the point in the future at\n+     *   which the most recent GETDATA request would time out (ie\n+     *   GETDATA_TX_INTERVAL + the request time stored in g_already_asked_for).\n+     *   We add an additional delay for inbound peers, again to prefer\n+     *   attempting download from outbound peers first.\n+     *   We also add an extra small random delay up to 2 seconds\n+     *   to avoid biasing some peers over others. (e.g., due to fixed ordering\n+     *   of peer processing in ThreadMessageHandler).\n+     *\n+     *   When we receive a transaction from a peer, we remove the txid from the\n+     *   peer's m_tx_in_flight set and from their recently announced set\n+     *   (m_tx_announced).  We also clear g_already_asked_for for that entry, so\n+     *   that if somehow the transaction is not accepted but also not added to\n+     *   the reject filter, then we will eventually redownload from other\n+     *   peers.\n+     */\n+    struct TxDownloadState {\n+        /* Track when to attempt download of announced transactions (process\n+         * time in micros -> txid)\n+         */\n+        std::multimap<int64_t, uint256> m_tx_process_time;\n+\n+        //! Store all the transactions a peer has recently announced\n+        std::set<uint256> m_tx_announced;\n+\n+        //! Store transactions which were requested by us\n+        std::set<uint256> m_tx_in_flight;\n+    };\n+\n+    TxDownloadState m_tx_download;\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -301,6 +376,9 @@ struct CNodeState {\n     }\n };\n \n+// Keeps track of the time (in microseconds) when transactions were requested last time\n+limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n+\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n@@ -591,6 +669,58 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n     }\n }\n \n+void EraseTxRequest(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    g_already_asked_for.erase(txid);\n+}\n+\n+int64_t GetTxRequestTime(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    auto it = g_already_asked_for.find(txid);\n+    if (it != g_already_asked_for.end()) {\n+        return it->second;\n+    }\n+    return 0;\n+}\n+\n+void UpdateTxRequestTime(const uint256& txid, int64_t request_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    auto it = g_already_asked_for.find(txid);\n+    if (it == g_already_asked_for.end()) {\n+        g_already_asked_for.insert(std::make_pair(txid, request_time));\n+    } else {\n+        g_already_asked_for.update(it, request_time);\n+    }\n+}\n+\n+\n+void RequestTx(CNodeState* state, const uint256& txid, int64_t nNow) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    CNodeState::TxDownloadState& peer_download_state = state->m_tx_download;\n+    if (peer_download_state.m_tx_announced.size() >= MAX_PEER_TX_ANNOUNCEMENTS || peer_download_state.m_tx_announced.count(txid)) {\n+        // Too many queued announcements from this peer, or we already have\n+        // this announcement\n+        return;\n+    }\n+    peer_download_state.m_tx_announced.insert(txid);\n+\n+    int64_t process_time;\n+    int64_t last_request_time = GetTxRequestTime(txid);\n+    // First time requesting this tx\n+    if (last_request_time == 0) {\n+        process_time = nNow;\n+    } else {\n+        // Randomize the delay to avoid biasing some peers over others (such as due to\n+        // fixed ordering of peer processing in ThreadMessageHandler)\n+        process_time = last_request_time + GETDATA_TX_INTERVAL + GetRand(MAX_GETDATA_RANDOM_DELAY);\n+    }\n+\n+    // We delay processing announcements from non-preferred (eg inbound) peers\n+    if (!state->fPreferredDownload) process_time += INBOUND_PEER_TX_DELAY;\n+\n+    peer_download_state.m_tx_process_time.emplace(process_time, txid);\n+}\n+\n } // namespace\n \n // This function is used for testing the stale tip eviction logic, see\n@@ -1945,6 +2075,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         LOCK(cs_main);\n \n         uint32_t nFetchFlags = GetFetchFlags(pfrom);\n+        int64_t nNow = GetTimeMicros();\n \n         for (CInv &inv : vInv)\n         {\n@@ -1976,7 +2107,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n                 } else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload()) {\n-                    pfrom->AskFor(inv);\n+                    RequestTx(State(pfrom->GetId()), inv.hash, nNow);\n                 }\n             }\n         }\n@@ -2211,8 +2342,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         bool fMissingInputs = false;\n         CValidationState state;\n \n-        pfrom->setAskFor.erase(inv.hash);\n-        mapAlreadyAskedFor.erase(inv.hash);\n+        CNodeState* nodestate = State(pfrom->GetId());\n+        nodestate->m_tx_download.m_tx_announced.erase(inv.hash);\n+        nodestate->m_tx_download.m_tx_in_flight.erase(inv.hash);\n+        EraseTxRequest(inv.hash);\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n@@ -2303,10 +2436,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n             if (!fRejectedParents) {\n                 uint32_t nFetchFlags = GetFetchFlags(pfrom);\n+                int64_t nNow = GetTimeMicros();\n+\n                 for (const CTxIn& txin : tx.vin) {\n                     CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n                     pfrom->AddInventoryKnown(_inv);\n-                    if (!AlreadyHave(_inv)) pfrom->AskFor(_inv);\n+                    if (!AlreadyHave(_inv)) RequestTx(State(pfrom->GetId()), _inv.hash, nNow);\n                 }\n                 AddOrphanTx(ptx, pfrom->GetId());\n \n@@ -3731,24 +3866,39 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         //\n         // Message: getdata (non-blocks)\n         //\n-        while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n-        {\n-            const CInv& inv = (*pto->mapAskFor.begin()).second;\n-            if (!AlreadyHave(inv))\n-            {\n-                LogPrint(BCLog::NET, \"Requesting %s peer=%d\\n\", inv.ToString(), pto->GetId());\n-                vGetData.push_back(inv);\n-                if (vGetData.size() >= 1000)\n-                {\n-                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n-                    vGetData.clear();\n+        auto& tx_process_time = state.m_tx_download.m_tx_process_time;\n+        while (!tx_process_time.empty() && tx_process_time.begin()->first <= nNow && state.m_tx_download.m_tx_in_flight.size() < MAX_PEER_TX_IN_FLIGHT) {\n+            const uint256& txid = tx_process_time.begin()->second;\n+            CInv inv(MSG_TX | GetFetchFlags(pto), txid);\n+            if (!AlreadyHave(inv)) {\n+                // If this transaction was last requested more than 1 minute ago,\n+                // then request.\n+                int64_t last_request_time = GetTxRequestTime(inv.hash);\n+                if (last_request_time <= nNow - GETDATA_TX_INTERVAL) {\n+                    LogPrint(BCLog::NET, \"Requesting %s peer=%d\\n\", inv.ToString(), pto->GetId());\n+                    vGetData.push_back(inv);\n+                    if (vGetData.size() >= MAX_GETDATA_SZ) {\n+                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                        vGetData.clear();\n+                    }\n+                    UpdateTxRequestTime(inv.hash, nNow);\n+                    state.m_tx_download.m_tx_in_flight.insert(inv.hash);\n+                } else {\n+                    // This transaction is in flight from someone else; queue\n+                    // up processing to happen after the download times out\n+                    // (with a slight delay for inbound peers, to prefer\n+                    // requests to outbound peers).\n+                    RequestTx(&state, txid, nNow);\n                 }\n             } else {\n-                //If we're not going to ask, don't expect a response.\n-                pto->setAskFor.erase(inv.hash);\n+                // We have already seen this transaction, no need to download.\n+                state.m_tx_download.m_tx_announced.erase(inv.hash);\n+                state.m_tx_download.m_tx_in_flight.erase(inv.hash);\n             }\n-            pto->mapAskFor.erase(pto->mapAskFor.begin());\n+            tx_process_time.erase(tx_process_time.begin());\n         }\n+\n+\n         if (!vGetData.empty())\n             connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n "
      },
      {
        "sha": "860f64bb1141790aa2627c4e46acf081bfedb901",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1cff3d6cb017aea87d16cbda0768bbab256d16da",
        "patch": "@@ -169,11 +169,6 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n     BOOST_CHECK_EQUAL(FormatISO8601Date(1317425777), \"2011-09-30\");\n }\n \n-BOOST_AUTO_TEST_CASE(util_FormatISO8601Time)\n-{\n-    BOOST_CHECK_EQUAL(FormatISO8601Time(1317425777), \"23:36:17Z\");\n-}\n-\n struct TestArgsManager : public ArgsManager\n {\n     TestArgsManager() { m_network_only_args.clear(); }"
      },
      {
        "sha": "c0ede98701a250b241ef83a65069f8b1146a05b6",
        "filename": "src/util/time.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/util/time.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/util/time.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.cpp?ref=1cff3d6cb017aea87d16cbda0768bbab256d16da",
        "patch": "@@ -97,14 +97,3 @@ std::string FormatISO8601Date(int64_t nTime) {\n #endif\n     return strprintf(\"%04i-%02i-%02i\", ts.tm_year + 1900, ts.tm_mon + 1, ts.tm_mday);\n }\n-\n-std::string FormatISO8601Time(int64_t nTime) {\n-    struct tm ts;\n-    time_t time_val = nTime;\n-#ifdef _MSC_VER\n-    gmtime_s(&ts, &time_val);\n-#else\n-    gmtime_r(&time_val, &ts);\n-#endif\n-    return strprintf(\"%02i:%02i:%02iZ\", ts.tm_hour, ts.tm_min, ts.tm_sec);\n-}"
      },
      {
        "sha": "68de1c156eda7de10707649377f3176f3a7f28a5",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cff3d6cb017aea87d16cbda0768bbab256d16da/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=1cff3d6cb017aea87d16cbda0768bbab256d16da",
        "patch": "@@ -33,6 +33,5 @@ void MilliSleep(int64_t n);\n  */\n std::string FormatISO8601DateTime(int64_t nTime);\n std::string FormatISO8601Date(int64_t nTime);\n-std::string FormatISO8601Time(int64_t nTime);\n \n #endif // BITCOIN_UTIL_TIME_H"
      }
    ]
  },
  {
    "sha": "d83d6079432cf592ff6c740d1d3fbdb5e596facb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODNkNjA3OTQzMmNmNTkyZmY2Yzc0MGQxZDNmYmRiNWU1OTZmYWNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-07T15:15:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-07T15:15:41Z"
      },
      "message": "Merge #15350: qa: Drop RPC connection if --usecli\n\n6440e61375 qa: Drop RPC connection if --usecli (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Drop the RPC connection used in `TestNode.wait_for_rpc_connection` if `--usecli` is set. If the connection is kept and not used the `Connection: close` header is never sent and so the connection only closes due to timeout (30 sec).\n\n  It might be sensible to revert e98a9eede2fb48ff33a020acc888cbcd83e24bbf in a follow up, however it changes the shutdown behavior.\n\nTree-SHA512: 2a8ee68b82ab612a556390aae521379e592c39ea0a7855a119282e6fe4cbf02ecafe7a5e2ee37d480f2c0600fa64791117a80fecc7bbe6bbb354107972b3b320",
      "tree": {
        "sha": "06dbe8f05c8fca652ee8b25bb33a77232fea19aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06dbe8f05c8fca652ee8b25bb33a77232fea19aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d83d6079432cf592ff6c740d1d3fbdb5e596facb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcXEudAAoJENLqSFDnUoslqqAP/0zFOnNkGA5jXIcaU2Zb5g1d\n2Fu52GBueMOOo0nZ6yaaVZhgsZ647NSKeh6y6eySN7ewNLT2DxJeRl59Ca16t2dv\n50w7AAh+rDw9mGTNt6nKx/Mn/6Dxu6ObNPuLgDxmc0qNIzEJfp8XcLtuOp+30Tdz\nZampILDUM46Culmoch+OoqxKPrK8dyZNjDjOFrG0PpGqxB8avkqOiAyx8U0jBDNq\nfNS/JRp1V+DflsYziqETUMbxHaNz1KDUcurgPf6TV2+UMrTLTr0dnaekAfqxCg4M\nQJPSw2fF3PMICsVWo9UvwiGxvTQbQIvSf+HtAfegexrtyLJzOujgZoIYw/KhIigm\n2Ntme+U5R56umvAX5FEQjso0ax/ckkB6YqC13tBZw0WGhzpXZeG76ctb06JtZloi\nK7PbunEuqF5x1f3bceTZ2dsIrycKQu1q/gRbZWQHK8G4GY7KNOONAsCZHVQbpe8y\n5ahHu7E4VzlX23yVscyQLcVZ9YreCDgmH9avb0J11jf72zpRjt8XP6yaplRnitf6\nNiYCDwEL+t7yRotiA6BL2z3nRMsGmKnmhDz6J3T/P9Uyhp1UJLkoStoBHFo4WiW6\nuduaDlxCK05j6WCRHRCgOj2wJBPSbbMN2qQ+s7FeFV2SkUZywMbPM/N45AfVTkX5\nSdN6+xVm3Wzlh/cfE8DJ\n=oBua\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICFRBq+haaXS6TYCUC3OBCjQ0Tu672oP7/BiqlU0VM8ICP/wEAgmOpX9mH9P\nHDXFis3pGp8I8BAQa36WRp5UeQcG1seDpgcRCPEEXFxLoPAI9QybiXJnYyEAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BBUNbpI5j8ygr9ejjqNxFpBCPEEXFxLn/AICRK4n/NGQtcAg9/jDS75DI4sK2h0\ndHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmf/8BBlaNVS\nSWylqBgBHp0UFMabCPEEXFxLn/AIYqO2ipBqVeYAg9/jDS75DI4jImh0dHBzOi8v\nYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wEIvV3lLW2XwQcXs4F3TdgEMI8QRc\nXEuf8AgBixNPxmpaYgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 06dbe8f05c8fca652ee8b25bb33a77232fea19aa\nparent 72d34c0edc5ad9e69e0d054459ec15d2278f206b\nparent 6440e6137553a51480aad68f6048be4ffce7bfff\nauthor MarcoFalke <falke.marco@gmail.com> 1549552525 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549552541 -0500\n\nMerge #15350: qa: Drop RPC connection if --usecli\n\n6440e61375 qa: Drop RPC connection if --usecli (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Drop the RPC connection used in `TestNode.wait_for_rpc_connection` if `--usecli` is set. If the connection is kept and not used the `Connection: close` header is never sent and so the connection only closes due to timeout (30 sec).\n\n  It might be sensible to revert e98a9eede2fb48ff33a020acc888cbcd83e24bbf in a follow up, however it changes the shutdown behavior.\n\nTree-SHA512: 2a8ee68b82ab612a556390aae521379e592c39ea0a7855a119282e6fe4cbf02ecafe7a5e2ee37d480f2c0600fa64791117a80fecc7bbe6bbb354107972b3b320\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d83d6079432cf592ff6c740d1d3fbdb5e596facb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d83d6079432cf592ff6c740d1d3fbdb5e596facb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d83d6079432cf592ff6c740d1d3fbdb5e596facb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72d34c0edc5ad9e69e0d054459ec15d2278f206b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72d34c0edc5ad9e69e0d054459ec15d2278f206b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72d34c0edc5ad9e69e0d054459ec15d2278f206b"
      },
      {
        "sha": "6440e6137553a51480aad68f6048be4ffce7bfff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6440e6137553a51480aad68f6048be4ffce7bfff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6440e6137553a51480aad68f6048be4ffce7bfff"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "999ea68254bae7a061ba5d531602efdadcb1b7b3",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d83d6079432cf592ff6c740d1d3fbdb5e596facb/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d83d6079432cf592ff6c740d1d3fbdb5e596facb/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=d83d6079432cf592ff6c740d1d3fbdb5e596facb",
        "patch": "@@ -209,12 +209,15 @@ def wait_for_rpc_connection(self):\n                 raise FailedToStartError(self._node_msg(\n                     'bitcoind exited with status {} during initialization'.format(self.process.returncode)))\n             try:\n-                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n-                self.rpc.getblockcount()\n+                rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n+                rpc.getblockcount()\n                 # If the call to getblockcount() succeeds then the RPC connection is up\n+                self.log.debug(\"RPC successfully started\")\n+                if self.use_cli:\n+                    return\n+                self.rpc = rpc\n                 self.rpc_connected = True\n                 self.url = self.rpc.url\n-                self.log.debug(\"RPC successfully started\")\n                 return\n             except IOError as e:\n                 if e.errno != errno.ECONNREFUSED:  # Port not yet open?"
      }
    ]
  },
  {
    "sha": "1933e38c1a08d479130d11d9fc08bc7c73a82575",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTMzZTM4YzFhMDhkNDc5MTMwZDExZDlmYzA4YmM3YzczYTgyNTc1",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-07T19:21:30Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-07T19:21:52Z"
      },
      "message": "Merge #14667: Add deriveaddresses RPC util method\n\n595283851 [rpc] util: add deriveaddresses method (Sjors Provoost)\n\nPull request description:\n\n  Usage:\n\n  ```sh\n  bitcoin-cli deriveaddresses \"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/0)\"\n  [\n    \"bc1qg6ucjz7kgdedam7v5yarecy54uqw82yym06z3q\"\n  ] // part of the BIP32 test vector\n  ```\n\n  Avoids the need for external (BIP32) libraries to derive an address. Can be used in conjunction with `scantxoutset` as a poor mans wallet. Might be useful to test more complicated future descriptors.\n\n  ~To keep it as simple as possible it only supports descriptors that result in a single address, so no `combo()` and ranges.~\n\n  As discussed recently on IRC it might make sense to put this in a separate utility along with other descriptor and psbt utility functions which don't need a chain or wallet context. However I prefer to leave that to another PR.\n\nTree-SHA512: b8e53db11a8fd87638cc98766270cc3be9adc4b3e5085798a6a4e2e6ad252bf6d2189346bbb2da72d04d13f7f1e80b5cb88e8039653bea1f150602a876ef7f34",
      "tree": {
        "sha": "a33fadde95cd569835a5753681ab0014f58a843f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a33fadde95cd569835a5753681ab0014f58a843f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1933e38c1a08d479130d11d9fc08bc7c73a82575",
      "comment_count": 1,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAlxchVAACgkQ0wARbhyH\nWj2m2RAAnZ73JTtIn9Crn7pMZk/m9Me8Q09PWcVHsROyVdGY61uFN5nBXYtyL0v+\nVBcvoPzJjXWiCJVbzjFgUGlLapVFnh/xU7VC6Cb++Di9XudylDf2SfRP7+vyKIZN\nf33Tj0fR40+xKoAFEtIAwe5VgLcmdo4yTY1eFtQbxKmOawXu9BXHyn8k49IVxaVh\nQ7bu1obC/GJPISHfVC1afqGnd9fN96mbvLtmFRscP6gfsvmE6bVtdgFdqWjZK1j0\nBgefHbJ+ZxL6+SWtu0AwY6+7j3S63VVwW8m4c4gD4lhpZ6blSTJ4USo01VkX7DlW\nlQnPkQfMZmUG7pNYwZGdYoFOdieXm51McCYmOEe5xw1faaUBhAORWvjVNVXrOQNK\nbulNwJCB3Mp4wqLc2UvZc9HNG6Upk4KvSJo0YqmyiYcp06nBK4zJUqjpdCmlWo03\n3wqDFZAG3foKIAN0H9MveSREkQ3wjC3xQGNtM5dQUZRYkn/31cUItPZLhk9Mk157\nriQRY73QT+cUXEiDGLva3zahvNY8YkNwH0yYZiY7dWjbihfsG2kuPy/cZaaChC5S\nr2JJ8JPPX7a6IIFIMwqUWWyqhPC4JP+p6kcQM5yp3F0FIeIYiPuoYgTj6afcDPpL\nHNJFbqah5V5aiiHBj0Xeg+8uBQ7J81wowNn77cidZhG5tZhfGsc=\n=3TTn\n-----END PGP SIGNATURE-----",
        "payload": "tree a33fadde95cd569835a5753681ab0014f58a843f\nparent d83d6079432cf592ff6c740d1d3fbdb5e596facb\nparent 595283851d8fe3e18553fdb2ad6e773e1a9c1a22\nauthor MeshCollider <dobsonsa68@gmail.com> 1549567290 +1300\ncommitter MeshCollider <dobsonsa68@gmail.com> 1549567312 +1300\n\nMerge #14667: Add deriveaddresses RPC util method\n\n595283851 [rpc] util: add deriveaddresses method (Sjors Provoost)\n\nPull request description:\n\n  Usage:\n\n  ```sh\n  bitcoin-cli deriveaddresses \"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/0)\"\n  [\n    \"bc1qg6ucjz7kgdedam7v5yarecy54uqw82yym06z3q\"\n  ] // part of the BIP32 test vector\n  ```\n\n  Avoids the need for external (BIP32) libraries to derive an address. Can be used in conjunction with `scantxoutset` as a poor mans wallet. Might be useful to test more complicated future descriptors.\n\n  ~To keep it as simple as possible it only supports descriptors that result in a single address, so no `combo()` and ranges.~\n\n  As discussed recently on IRC it might make sense to put this in a separate utility along with other descriptor and psbt utility functions which don't need a chain or wallet context. However I prefer to leave that to another PR.\n\nTree-SHA512: b8e53db11a8fd87638cc98766270cc3be9adc4b3e5085798a6a4e2e6ad252bf6d2189346bbb2da72d04d13f7f1e80b5cb88e8039653bea1f150602a876ef7f34\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1933e38c1a08d479130d11d9fc08bc7c73a82575",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1933e38c1a08d479130d11d9fc08bc7c73a82575",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1933e38c1a08d479130d11d9fc08bc7c73a82575/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d83d6079432cf592ff6c740d1d3fbdb5e596facb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d83d6079432cf592ff6c740d1d3fbdb5e596facb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d83d6079432cf592ff6c740d1d3fbdb5e596facb"
      },
      {
        "sha": "595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/595283851d8fe3e18553fdb2ad6e773e1a9c1a22"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 149,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5cb1d0aee77ce9678850b37252ee191329fb500f",
        "filename": "doc/release-notes-14667.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1933e38c1a08d479130d11d9fc08bc7c73a82575/doc/release-notes-14667.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1933e38c1a08d479130d11d9fc08bc7c73a82575/doc/release-notes-14667.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14667.md?ref=1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "patch": "@@ -0,0 +1,4 @@\n+New RPC methods\n+------------\n+\n+- `deriveaddresses` returns one or more addresses corresponding to an [output descriptor](/doc/descriptors.md)."
      },
      {
        "sha": "338384a21a2397d34cd6bf430215b87706269809",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1933e38c1a08d479130d11d9fc08bc7c73a82575/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1933e38c1a08d479130d11d9fc08bc7c73a82575/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "patch": "@@ -68,6 +68,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n     { \"sendmany\", 5 , \"replaceable\" },\n     { \"sendmany\", 6 , \"conf_target\" },\n+    { \"deriveaddresses\", 1, \"begin\" },\n+    { \"deriveaddresses\", 2, \"end\" },\n     { \"scantxoutset\", 1, \"scanobjects\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },"
      },
      {
        "sha": "9702dc47e8ba1f7af4dc17dca00b389ff7bcb6e2",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 91,
        "deletions": 0,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1933e38c1a08d479130d11d9fc08bc7c73a82575/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1933e38c1a08d479130d11d9fc08bc7c73a82575/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "patch": "@@ -16,6 +16,7 @@\n #include <rpc/blockchain.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n+#include <script/descriptor.h>\n #include <timedata.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n@@ -142,6 +143,95 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+            {\"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"},\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The descriptor.\"},\n+                {\"begin\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n+                {\"end\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n+            },\n+            RPCResult{\n+                \"[ address ] (array) the derived addresses\\n\"\n+            },\n+            RPCExamples{\n+                \"First three native segwit receive addresses\\n\" +\n+                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\")\n+            }}.ToString()\n+        );\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_begin = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_begin = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+        if (range_begin < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should be greater or equal than 0\");\n+        }\n+        if (range_begin > range_end) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range end should be equal to or greater than begin\");\n+        }\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_begin; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor does not have a corresponding address\"));\n+            }\n+\n+            addresses.push_back(EncodeDestination(dest));\n+        }\n+    }\n+\n+    // This should not be possible, but an assert seems overkill:\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Unexpected empty result\");\n+    }\n+\n+    return addresses;\n+}\n+\n static UniValue verifymessage(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n@@ -473,6 +563,7 @@ static const CRPCCommand commands[] =\n     { \"control\",            \"logging\",                &logging,                {\"include\", \"exclude\"}},\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} },\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n+    { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"begin\", \"end\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n "
      },
      {
        "sha": "2cc5bc974bb60c95d951812ae25b00d50a85b7a3",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1933e38c1a08d479130d11d9fc08bc7c73a82575/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1933e38c1a08d479130d11d9fc08bc7c73a82575/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "patch": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the deriveaddresses rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class DeriveaddressesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.supports_cli = 1\n+\n+    def run_test(self):\n+        assert_raises_rpc_error(-5, \"Invalid descriptor\", self.nodes[0].deriveaddresses, \"a\")\n+\n+        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n+\n+        assert_equal(self.nodes[0].deriveaddresses(descriptor), [address])\n+\n+        descriptor_pubkey = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)\"\n+        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n+\n+        assert_equal(self.nodes[0].deriveaddresses(descriptor_pubkey), [address])\n+\n+        ranged_descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"\n+        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 0, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n+\n+        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\", 0, 2)\n+\n+        assert_raises_rpc_error(-8, \"Range must be specified for a ranged descriptor\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\")\n+\n+        assert_raises_rpc_error(-8, \"Missing range end parameter\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", 0)\n+\n+        assert_raises_rpc_error(-8, \"Range end should be equal to or greater than begin\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", 2, 0)\n+\n+        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", -1, 0)\n+\n+        combo_descriptor = \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        assert_equal(self.nodes[0].deriveaddresses(combo_descriptor), [\"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", \"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", address, \"2NDvEwGfpEqJWfybzpKPHF2XH3jwoQV3D7x\"])\n+\n+        hardened_without_privkey_descriptor = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1'/1/0)\"\n+        assert_raises_rpc_error(-5, \"Cannot derive script without private keys\", self.nodes[0].deriveaddresses, hardened_without_privkey_descriptor)\n+\n+        bare_multisig_descriptor = \"multi(1, tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0, tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1)\"\n+        assert_raises_rpc_error(-5, \"Descriptor does not have a corresponding address\", self.nodes[0].deriveaddresses, bare_multisig_descriptor)\n+\n+if __name__ == '__main__':\n+    DeriveaddressesTest().main()"
      },
      {
        "sha": "0e16a8e549d118f3f7f8420ca6a03537ee71e548",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1933e38c1a08d479130d11d9fc08bc7c73a82575/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1933e38c1a08d479130d11d9fc08bc7c73a82575/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "patch": "@@ -182,6 +182,8 @@\n     'feature_filelock.py',\n     'p2p_unrequested_blocks.py',\n     'feature_includeconf.py',\n+    'rpc_deriveaddresses.py',\n+    'rpc_deriveaddresses.py --usecli',\n     'rpc_scantxoutset.py',\n     'feature_logging.py',\n     'p2p_node_network_limited.py',"
      }
    ]
  },
  {
    "sha": "faa46475d7d7dc60dcc80be34826cf98fb25dc95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE0NjQ3NWQ3ZDdkYzYwZGNjODBiZTM0ODI2Y2Y5OGZiMjVkYzk1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-07T19:46:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-07T20:22:14Z"
      },
      "message": "wallet: Add lock annotation for mapAddressBook",
      "tree": {
        "sha": "09c37985d69ba643c9b0cd7693345f13acf3d282",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09c37985d69ba643c9b0cd7693345f13acf3d282"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa46475d7d7dc60dcc80be34826cf98fb25dc95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcXJN2AAoJEM4rdWl+aaVIy3MMAM4816GV57M9cDW+NSdzS+v/\nhZZJxvuhWyGXnYm2biCCddwCWyH6lWHWS3c3Uf52p+LfAV/+RtuSocKd9LRLbBfm\noNC9B6Yhefu5xKGIhU8YLJtxHalfSRmFASoKtHwtdWrI4t8XLUWL71NHOly9VF9N\nKp19hnTufz3J3CEltLhe0Pr16n/dLXY5PkPkoyPfxrn/LWbIVDOhBSr6+QP0NYwe\nzWeXkebB5M7VCjjDZCXUpKIN7tF5OzGHIkQ0sa4LD957NxkyeRmISBXECtcvnawk\neK2ubKHRfbgoWTGZfjZnv7btziRRve0FwRbBVRvwhyKxNe67chN+KsyBxpMqKBmS\nt/Mbi6qFqfLNVgglgR59F/VFqVvcdmDbLwGqUU/XskyOqEATuiFFPHdXJeOrXZ2X\njHECQiKHEaf3CgAAb4pCTCBruzy4/OMKfNVTg8sTO6pqYpLSoktuRdxht7SUKMvC\n/1QWd+/ogxB/bQoBPlGnV9Ev5bpiphYi79JctSo/Og==\n=TQl4\n-----END PGP SIGNATURE-----",
        "payload": "tree 09c37985d69ba643c9b0cd7693345f13acf3d282\nparent 72d34c0edc5ad9e69e0d054459ec15d2278f206b\nauthor MarcoFalke <falke.marco@gmail.com> 1549568768 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549570934 -0500\n\nwallet: Add lock annotation for mapAddressBook\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa46475d7d7dc60dcc80be34826cf98fb25dc95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa46475d7d7dc60dcc80be34826cf98fb25dc95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa46475d7d7dc60dcc80be34826cf98fb25dc95/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72d34c0edc5ad9e69e0d054459ec15d2278f206b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72d34c0edc5ad9e69e0d054459ec15d2278f206b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72d34c0edc5ad9e69e0d054459ec15d2278f206b"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "82dd8a094b2efe1a09a20f089fa32eb49038b9e9",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=faa46475d7d7dc60dcc80be34826cf98fb25dc95",
        "patch": "@@ -212,6 +212,7 @@ class WalletImpl : public Wallet\n     }\n     std::vector<std::string> getDestValues(const std::string& prefix) override\n     {\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.GetDestValues(prefix);\n     }\n     void lockCoin(const COutPoint& output) override"
      },
      {
        "sha": "7f5e92ea9fc1bb146727279dc51e4e8e08f5c69a",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=faa46475d7d7dc60dcc80be34826cf98fb25dc95",
        "patch": "@@ -95,6 +95,7 @@ void TestAddAddressesToSendBook()\n     }\n \n     auto check_addbook_size = [&wallet](int expected_size) {\n+        LOCK(wallet->cs_wallet);\n         QCOMPARE(static_cast<int>(wallet->mapAddressBook.size()), expected_size);\n     };\n "
      },
      {
        "sha": "6fd0e60d5751f4d22bb05c368c8f3c72bf3b58bb",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=faa46475d7d7dc60dcc80be34826cf98fb25dc95",
        "patch": "@@ -66,7 +66,7 @@ static std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-static bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyid, std::string &strAddr, std::string &strLabel)\n+static bool GetWalletAddressesForKey(CWallet* const pwallet, const CKeyID& keyid, std::string& strAddr, std::string& strLabel) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     bool fLabelFound = false;\n     CKey key;"
      },
      {
        "sha": "b9d993dc9cfdce2dba307051fed40edfe296b101",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=faa46475d7d7dc60dcc80be34826cf98fb25dc95",
        "patch": "@@ -1309,7 +1309,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  filter_ismine  The \"is mine\" filter flags.\n  * @param  filter_label   Optional label string to filter incoming transactions.\n  */\n-static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label)\n+static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     CAmount nFee;\n     std::list<COutputEntry> listReceived;"
      },
      {
        "sha": "af9365337546b87be47bd12f552d71788d090930",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=faa46475d7d7dc60dcc80be34826cf98fb25dc95",
        "patch": "@@ -3172,7 +3172,7 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n {\n     bool fUpdated = false;\n     {\n-        LOCK(cs_wallet); // mapAddressBook\n+        LOCK(cs_wallet);\n         std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n         fUpdated = mi != mapAddressBook.end();\n         mapAddressBook[address].name = strName;\n@@ -3189,7 +3189,7 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n     {\n-        LOCK(cs_wallet); // mapAddressBook\n+        LOCK(cs_wallet);\n \n         // Delete destdata tuples associated with address\n         std::string strAddress = EncodeDestination(address);\n@@ -3869,7 +3869,6 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n \n std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n {\n-    LOCK(cs_wallet);\n     std::vector<std::string> values;\n     for (const auto& address : mapAddressBook) {\n         for (const auto& data : address.second.destdata) {"
      },
      {
        "sha": "9dde7e1f94824e9b46b5deafb0f8f2ebc9e82bb5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=faa46475d7d7dc60dcc80be34826cf98fb25dc95",
        "patch": "@@ -788,7 +788,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     int64_t nOrderPosNext GUARDED_BY(cs_wallet) = 0;\n     uint64_t nAccountingEntryNumber = 0;\n \n-    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+    std::map<CTxDestination, CAddressBookData> mapAddressBook GUARDED_BY(cs_wallet);\n \n     std::set<COutPoint> setLockedCoins GUARDED_BY(cs_wallet);\n \n@@ -865,15 +865,15 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n-    bool AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n+    bool AddDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Erases a destination data tuple in the store and on disk\n-    bool EraseDestData(const CTxDestination &dest, const std::string &key);\n+    bool EraseDestData(const CTxDestination& dest, const std::string& key) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a destination data tuple to the store, without saving it to disk\n-    void LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n+    void LoadDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Look up a destination data tuple in the store, return true if found false otherwise\n-    bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n+    bool GetDestData(const CTxDestination& dest, const std::string& key, std::string* value) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Get all destination values matching a prefix.\n-    std::vector<std::string> GetDestValues(const std::string& prefix) const;\n+    std::vector<std::string> GetDestValues(const std::string& prefix) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -1041,7 +1041,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    const std::string& GetLabelName(const CScript& scriptPubKey) const;\n+    const std::string& GetLabelName(const CScript& scriptPubKey) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n "
      },
      {
        "sha": "628f3fe803476d2d5f19430fea797e787422f021",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa46475d7d7dc60dcc80be34826cf98fb25dc95/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=faa46475d7d7dc60dcc80be34826cf98fb25dc95",
        "patch": "@@ -94,7 +94,6 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    // lock required because of some AssertLockHeld()\n     LOCK(wallet_instance->cs_wallet);\n \n     fprintf(stdout, \"Wallet info\\n===========\\n\");"
      }
    ]
  },
  {
    "sha": "d855e4cac8303ad4e34ac31cfa7634286589ce99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODU1ZTRjYWM4MzAzYWQ0ZTM0YWMzMWNmYTc2MzQyODY1ODljZTk5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-17T14:30:08Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-07T21:30:25Z"
      },
      "message": "Avoid triggering undefined behaviour (std::memset(nullptr, 0, 0)) if an invalid string is passed to DecodeSecret(...)",
      "tree": {
        "sha": "bb5a0565037d721742410cbbf6b9094fbfec7c11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb5a0565037d721742410cbbf6b9094fbfec7c11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d855e4cac8303ad4e34ac31cfa7634286589ce99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d855e4cac8303ad4e34ac31cfa7634286589ce99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d855e4cac8303ad4e34ac31cfa7634286589ce99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d855e4cac8303ad4e34ac31cfa7634286589ce99/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1933e38c1a08d479130d11d9fc08bc7c73a82575"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1d53a5e074dc896a0e7eebffe51589e13b4e972a",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d855e4cac8303ad4e34ac31cfa7634286589ce99/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d855e4cac8303ad4e34ac31cfa7634286589ce99/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=d855e4cac8303ad4e34ac31cfa7634286589ce99",
        "patch": "@@ -142,7 +142,9 @@ CKey DecodeSecret(const std::string& str)\n             key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n         }\n     }\n-    memory_cleanse(data.data(), data.size());\n+    if (!data.empty()) {\n+        memory_cleanse(data.data(), data.size());\n+    }\n     return key;\n }\n "
      },
      {
        "sha": "d55119b2662e87b424e9b67ae5e523f5ae76e16a",
        "filename": "test/sanitizer_suppressions/ubsan",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d855e4cac8303ad4e34ac31cfa7634286589ce99/test/sanitizer_suppressions/ubsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d855e4cac8303ad4e34ac31cfa7634286589ce99/test/sanitizer_suppressions/ubsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/ubsan?ref=d855e4cac8303ad4e34ac31cfa7634286589ce99",
        "patch": "@@ -4,7 +4,6 @@ bool:wallet/wallet.cpp\n float-divide-by-zero:policy/fees.cpp\n float-divide-by-zero:validation.cpp\n float-divide-by-zero:wallet/wallet.cpp\n-nonnull-attribute:support/cleanse.cpp\n unsigned-integer-overflow:arith_uint256.h\n unsigned-integer-overflow:basic_string.h\n unsigned-integer-overflow:bench/bench.h"
      }
    ]
  },
  {
    "sha": "9127bd7abaf8762456285007080571c5868789c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTI3YmQ3YWJhZjg3NjI0NTYyODUwMDcwODA1NzFjNTg2ODc4OWM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-07T20:08:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-07T21:43:33Z"
      },
      "message": "Merge #14491: Allow descriptor imports with importmulti\n\nb985e9c850ea682eced7021faf6c7c835066c61b Add release notes for importmulti descriptor support (MeshCollider)\nfbb5e935eaf17d603ec62e1a704a174235540b71 Add test for importing via descriptor (MeshCollider)\n9f48053d8f9a1feacc96d7e2a00c8a3a67576948 [wallet] Allow descriptor imports with importmulti (MeshCollider)\nd2b381cc91b2c4e74abe11e5bd66af647b70dafb [wallet] Refactor ProcessImport() to call ProcessImportLegacy() (John Newbery)\n4cac0ddd258bc82258ccc99568d02d3b2415339d [wallet] Add ProcessImportLegacy() (John Newbery)\na1b25e12a5f57048a4639964d57c0b46eb84cd4e [wallet] Refactor ProcessImport() (John Newbery)\n\nPull request description:\n\n  ~~Based on #14454 #14565, last two commits only are for review.~~\n\n  Best reviewed with `?w=1`\n\n  Allows a descriptor to be imported into the wallet using `importmulti` RPC. Start and end of range can be specified for ranged descriptors. The descriptor is implicitly converted to old structures on import.\n\n  Also adds a simple test of a P2SH-P2WPKH address being imported as a descriptor. More tests to come, as well as release notes.\n\nTree-SHA512: 160eb6fd574c4ae5b70e0109f7e5ccc95d9309138603408a1114ceb3c558065409c0d7afb66926bc8e1743c365a3b300c5f944ff18b2451acc0514fbeca1f2b3",
      "tree": {
        "sha": "1b96e9f51f2e601d8b3436ce9f72e18291768aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b96e9f51f2e601d8b3436ce9f72e18291768aa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9127bd7abaf8762456285007080571c5868789c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxcpoUACgkQHkrtYphs\n0l1sTwf+NovyWPZqX7HfNBdngc4Fv1M3eBpK2q+xIzShmviTmOjQ4rWeKvA7Gbfz\nZLf3pBzUQpayqQqeSMefk9ZecK7mVgZePZbSjc0LWu88ZGVFBOC7+0L2ZY9ioYe2\nIeRTRcPqXeNFOd0SnIyZf+7WQxycrLZA/pMjpeqdR4NopgnjxYWnJQmN8eY7OvM6\nJ7Pq9H8NRFjtN9sDBRoRlAGCQWaEXnj4K++nao2KfzLXFg/WHX4EgX2s1DJdEiAs\nfhU4e+HE8opLhtdkHogAOI1kTlfLbbHqxfZzwCeSyynecSY5ER6rhh03p1F8Z67T\nDeEPY6t0nN35mylsoljfHxCrSalp9A==\n=U+++\n-----END PGP SIGNATURE-----",
        "payload": "tree 1b96e9f51f2e601d8b3436ce9f72e18291768aa4\nparent 1933e38c1a08d479130d11d9fc08bc7c73a82575\nparent b985e9c850ea682eced7021faf6c7c835066c61b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1549570110 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1549575813 +0100\n\nMerge #14491: Allow descriptor imports with importmulti\n\nb985e9c850ea682eced7021faf6c7c835066c61b Add release notes for importmulti descriptor support (MeshCollider)\nfbb5e935eaf17d603ec62e1a704a174235540b71 Add test for importing via descriptor (MeshCollider)\n9f48053d8f9a1feacc96d7e2a00c8a3a67576948 [wallet] Allow descriptor imports with importmulti (MeshCollider)\nd2b381cc91b2c4e74abe11e5bd66af647b70dafb [wallet] Refactor ProcessImport() to call ProcessImportLegacy() (John Newbery)\n4cac0ddd258bc82258ccc99568d02d3b2415339d [wallet] Add ProcessImportLegacy() (John Newbery)\na1b25e12a5f57048a4639964d57c0b46eb84cd4e [wallet] Refactor ProcessImport() (John Newbery)\n\nPull request description:\n\n  ~~Based on #14454 #14565, last two commits only are for review.~~\n\n  Best reviewed with `?w=1`\n\n  Allows a descriptor to be imported into the wallet using `importmulti` RPC. Start and end of range can be specified for ranged descriptors. The descriptor is implicitly converted to old structures on import.\n\n  Also adds a simple test of a P2SH-P2WPKH address being imported as a descriptor. More tests to come, as well as release notes.\n\nTree-SHA512: 160eb6fd574c4ae5b70e0109f7e5ccc95d9309138603408a1114ceb3c558065409c0d7afb66926bc8e1743c365a3b300c5f944ff18b2451acc0514fbeca1f2b3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9127bd7abaf8762456285007080571c5868789c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9127bd7abaf8762456285007080571c5868789c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9127bd7abaf8762456285007080571c5868789c8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1933e38c1a08d479130d11d9fc08bc7c73a82575"
      },
      {
        "sha": "b985e9c850ea682eced7021faf6c7c835066c61b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b985e9c850ea682eced7021faf6c7c835066c61b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b985e9c850ea682eced7021faf6c7c835066c61b"
      }
    ],
    "stats": {
      "total": 480,
      "additions": 347,
      "deletions": 133
    },
    "files": [
      {
        "sha": "1cf36e85cffcc2dc88e51964ca0a2a8f565a2ed2",
        "filename": "doc/release-notes-14491.md",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9127bd7abaf8762456285007080571c5868789c8/doc/release-notes-14491.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9127bd7abaf8762456285007080571c5868789c8/doc/release-notes-14491.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14491.md?ref=9127bd7abaf8762456285007080571c5868789c8",
        "patch": "@@ -0,0 +1,5 @@\n+Descriptor import support\n+---------------------\n+\n+The `importmulti` RPC now supports importing of addresses from descriptors. A \"desc\" parameter can be provided instead of the \"scriptPubKey\" in a request, as well as an optional range for ranged descriptors to specify the start and end of the range to import. More information about\n+descriptors can be found [here](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)."
      },
      {
        "sha": "9ed2a16416e036945623bf93e3b75dad7be4a5af",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 258,
        "deletions": 132,
        "changes": 390,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9127bd7abaf8762456285007080571c5868789c8/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9127bd7abaf8762456285007080571c5868789c8/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9127bd7abaf8762456285007080571c5868789c8",
        "patch": "@@ -9,6 +9,7 @@\n #include <merkleblock.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n+#include <script/descriptor.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n@@ -964,159 +965,273 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n     }\n }\n \n-static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data)\n {\n     UniValue warnings(UniValue::VARR);\n-    UniValue result(UniValue::VOBJ);\n \n-    try {\n-        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n-        const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n-        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n+    // First ensure scriptPubKey has either a script or JSON with \"address\" string\n+    const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+    bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+    if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n+    }\n+    const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+    // Optional fields.\n+    const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+    const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n+    const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n+    const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+    const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+    const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+    if (data.exists(\"range\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for a non-descriptor import\");\n+    }\n+\n+    // Generate the script and destination for the scriptPubKey provided\n+    CScript script;\n+    if (!isScript) {\n+        CTxDestination dest = DecodeDestination(output);\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address \\\"\" + output + \"\\\"\");\n+        }\n+        script = GetScriptForDestination(dest);\n+    } else {\n+        if (!IsHex(output)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey \\\"\" + output + \"\\\"\");\n+        }\n+        std::vector<unsigned char> vData(ParseHex(output));\n+        script = CScript(vData.begin(), vData.end());\n+        CTxDestination dest;\n+        if (!ExtractDestination(script, dest) && !internal) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n         }\n-        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+    }\n+    script_pub_keys.emplace(script);\n \n-        // Optional fields.\n-        const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n-        const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n-        const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n-        const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n-        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n-        const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n-        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+    // Parse all arguments\n+    if (strRedeemScript.size()) {\n+        if (!IsHex(strRedeemScript)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script \\\"\" + strRedeemScript + \"\\\": must be hex string\");\n+        }\n+        auto parsed_redeemscript = ParseHex(strRedeemScript);\n+        import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+    }\n+    if (witness_script_hex.size()) {\n+        if (!IsHex(witness_script_hex)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script \\\"\" + witness_script_hex + \"\\\": must be hex string\");\n+        }\n+        auto parsed_witnessscript = ParseHex(witness_script_hex);\n+        import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+    }\n+    for (size_t i = 0; i < pubKeys.size(); ++i) {\n+        const auto& str = pubKeys[i].get_str();\n+        if (!IsHex(str)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" must be a hex string\");\n+        }\n+        auto parsed_pubkey = ParseHex(str);\n+        CPubKey pubkey(parsed_pubkey.begin(), parsed_pubkey.end());\n+        if (!pubkey.IsFullyValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" is not a valid public key\");\n+        }\n+        pubkey_map.emplace(pubkey.GetID(), pubkey);\n+    }\n+    for (size_t i = 0; i < keys.size(); ++i) {\n+        const auto& str = keys[i].get_str();\n+        CKey key = DecodeSecret(str);\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID id = pubkey.GetID();\n+        if (pubkey_map.count(id)) {\n+            pubkey_map.erase(id);\n+        }\n+        privkey_map.emplace(id, key);\n+    }\n \n-        // If private keys are disabled, abort if private keys are being imported\n-        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.isNull()) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+\n+    // Verify and process input data\n+    have_solving_data = import_data.redeemscript || import_data.witnessscript || pubkey_map.size() || privkey_map.size();\n+    if (have_solving_data) {\n+        // Match up data in import_data with the scriptPubKey in script.\n+        auto error = RecurseImportData(script, import_data, ScriptContext::TOP);\n+\n+        // Verify whether the watchonly option corresponds to the availability of private keys.\n+        bool spendable = std::all_of(import_data.used_keys.begin(), import_data.used_keys.end(), [&](const std::pair<CKeyID, bool>& used_key){ return privkey_map.count(used_key.first) > 0; });\n+        if (!watchOnly && !spendable) {\n+            warnings.push_back(\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\");\n+        }\n+        if (watchOnly && spendable) {\n+            warnings.push_back(\"All private keys are provided, outputs will be considered spendable. If this is intentional, do not specify the watchonly flag.\");\n         }\n \n-        // Generate the script and destination for the scriptPubKey provided\n-        CScript script;\n-        CTxDestination dest;\n-        if (!isScript) {\n-            dest = DecodeDestination(output);\n-            if (!IsValidDestination(dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address \\\"\" + output + \"\\\"\");\n+        // Check that all required keys for solvability are provided.\n+        if (error.empty()) {\n+            for (const auto& require_key : import_data.used_keys) {\n+                if (!require_key.second) continue; // Not a required key\n+                if (pubkey_map.count(require_key.first) == 0 && privkey_map.count(require_key.first) == 0) {\n+                    error = \"some required keys are missing\";\n+                }\n             }\n-            script = GetScriptForDestination(dest);\n+        }\n+\n+        if (!error.empty()) {\n+            warnings.push_back(\"Importing as non-solvable: \" + error + \". If this is intentional, don't provide any keys, pubkeys, witnessscript, or redeemscript.\");\n+            import_data = ImportData();\n+            pubkey_map.clear();\n+            privkey_map.clear();\n+            have_solving_data = false;\n         } else {\n-            if (!IsHex(output)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey \\\"\" + output + \"\\\"\");\n+            // RecurseImportData() removes any relevant redeemscript/witnessscript from import_data, so we can use that to discover if a superfluous one was provided.\n+            if (import_data.redeemscript) warnings.push_back(\"Ignoring redeemscript as this is not a P2SH script.\");\n+            if (import_data.witnessscript) warnings.push_back(\"Ignoring witnessscript as this is not a (P2SH-)P2WSH script.\");\n+            for (auto it = privkey_map.begin(); it != privkey_map.end(); ) {\n+                auto oldit = it++;\n+                if (import_data.used_keys.count(oldit->first) == 0) {\n+                    warnings.push_back(\"Ignoring irrelevant private key.\");\n+                    privkey_map.erase(oldit);\n+                }\n             }\n-            std::vector<unsigned char> vData(ParseHex(output));\n-            script = CScript(vData.begin(), vData.end());\n-            if (!ExtractDestination(script, dest) && !internal) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n+            for (auto it = pubkey_map.begin(); it != pubkey_map.end(); ) {\n+                auto oldit = it++;\n+                auto key_data_it = import_data.used_keys.find(oldit->first);\n+                if (key_data_it == import_data.used_keys.end() || !key_data_it->second) {\n+                    warnings.push_back(\"Ignoring public key \\\"\" + HexStr(oldit->first) + \"\\\" as it doesn't appear inside P2PKH or P2WPKH.\");\n+                    pubkey_map.erase(oldit);\n+                }\n             }\n         }\n+    }\n \n-        // Parse all arguments\n-        ImportData import_data;\n-        if (strRedeemScript.size()) {\n-            if (!IsHex(strRedeemScript)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script \\\"\" + strRedeemScript + \"\\\": must be hex string\");\n-            }\n-            auto parsed_redeemscript = ParseHex(strRedeemScript);\n-            import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+    return warnings;\n+}\n+\n+static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data)\n+{\n+    UniValue warnings(UniValue::VARR);\n+\n+    const std::string& descriptor = data[\"desc\"].get_str();\n+    FlatSigningProvider keys;\n+    auto parsed_desc = Parse(descriptor, keys);\n+    if (!parsed_desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Descriptor is invalid\");\n+    }\n+\n+    have_solving_data = parsed_desc->IsSolvable();\n+    const bool watch_only = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+\n+    int64_t range_start = 0, range_end = 0;\n+    if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    } else if (parsed_desc->IsRange()) {\n+        if (!data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n         }\n-        if (witness_script_hex.size()) {\n-            if (!IsHex(witness_script_hex)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script \\\"\" + witness_script_hex + \"\\\": must be hex string\");\n-            }\n-            auto parsed_witnessscript = ParseHex(witness_script_hex);\n-            import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+        const UniValue& range = data[\"range\"];\n+        range_start = range.exists(\"start\") ? range[\"start\"].get_int64() : 0;\n+        if (!range.exists(\"end\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range for descriptor must be specified\");\n         }\n-        std::map<CKeyID, CPubKey> pubkey_map;\n-        for (size_t i = 0; i < pubKeys.size(); ++i) {\n-            const auto& str = pubKeys[i].get_str();\n-            if (!IsHex(str)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" must be a hex string\");\n-            }\n-            auto parsed_pubkey = ParseHex(str);\n-            CPubKey pubkey(parsed_pubkey.begin(), parsed_pubkey.end());\n-            if (!pubkey.IsFullyValid()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" is not a valid public key\");\n-            }\n-            pubkey_map.emplace(pubkey.GetID(), pubkey);\n+        range_end = range[\"end\"].get_int64();\n+        if (range_end < range_start || range_start < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid descriptor range specified\");\n         }\n-        std::map<CKeyID, CKey> privkey_map;\n-        for (size_t i = 0; i < keys.size(); ++i) {\n-            const auto& str = keys[i].get_str();\n-            CKey key = DecodeSecret(str);\n-            if (!key.IsValid()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-            }\n-            CPubKey pubkey = key.GetPubKey();\n-            CKeyID id = pubkey.GetID();\n-            if (pubkey_map.count(id)) {\n-                pubkey_map.erase(id);\n-            }\n+    }\n+\n+    const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+\n+    FlatSigningProvider out_keys;\n+\n+    // Expand all descriptors to get public keys and scripts.\n+    // TODO: get private keys from descriptors too\n+    for (int i = range_start; i <= range_end; ++i) {\n+        std::vector<CScript> scripts_temp;\n+        parsed_desc->Expand(i, keys, scripts_temp, out_keys);\n+        std::copy(scripts_temp.begin(), scripts_temp.end(), std::inserter(script_pub_keys, script_pub_keys.end()));\n+    }\n+\n+    for (const auto& x : out_keys.scripts) {\n+        import_data.import_scripts.emplace(x.second);\n+    }\n+\n+    std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n+\n+    for (size_t i = 0; i < priv_keys.size(); ++i) {\n+        const auto& str = priv_keys[i].get_str();\n+        CKey key = DecodeSecret(str);\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        }\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID id = pubkey.GetID();\n+\n+        // Check if this private key corresponds to a public key from the descriptor\n+        if (!pubkey_map.count(id)) {\n+            warnings.push_back(\"Ignoring irrelevant private key.\");\n+        } else {\n             privkey_map.emplace(id, key);\n         }\n+    }\n+\n+    // Check if all the public keys have corresponding private keys in the import for spendability.\n+    // This does not take into account threshold multisigs which could be spendable without all keys.\n+    // Thus, threshold multisigs without all keys will be considered not spendable here, even if they are,\n+    // perhaps triggering a false warning message. This is consistent with the current wallet IsMine check.\n+    bool spendable = std::all_of(pubkey_map.begin(), pubkey_map.end(),\n+        [&](const std::pair<CKeyID, CPubKey>& used_key) {\n+            return privkey_map.count(used_key.first) > 0;\n+        });\n+    if (!watch_only && !spendable) {\n+        warnings.push_back(\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\");\n+    }\n+    if (watch_only && spendable) {\n+        warnings.push_back(\"All private keys are provided, outputs will be considered spendable. If this is intentional, do not specify the watchonly flag.\");\n+    }\n+\n+    return warnings;\n+}\n+\n+static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n \n+    try {\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n         // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n         }\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n \n-        // Verify and process input data\n-        bool have_solving_data = import_data.redeemscript || import_data.witnessscript || pubkey_map.size() || privkey_map.size();\n-        if (have_solving_data) {\n-            // Match up data in import_data with the scriptPubKey in script.\n-            auto error = RecurseImportData(script, import_data, ScriptContext::TOP);\n-\n-            // Verify whether the watchonly option corresponds to the availability of private keys.\n-            bool spendable = std::all_of(import_data.used_keys.begin(), import_data.used_keys.end(), [&](const std::pair<CKeyID, bool>& used_key){ return privkey_map.count(used_key.first) > 0; });\n-            if (!watchOnly && !spendable) {\n-                warnings.push_back(\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\");\n-            }\n-            if (watchOnly && spendable) {\n-                warnings.push_back(\"All private keys are provided, outputs will be considered spendable. If this is intentional, do not specify the watchonly flag.\");\n-            }\n-\n-            // Check that all required keys for solvability are provided.\n-            if (error.empty()) {\n-                for (const auto& require_key : import_data.used_keys) {\n-                    if (!require_key.second) continue; // Not a required key\n-                    if (pubkey_map.count(require_key.first) == 0 && privkey_map.count(require_key.first) == 0) {\n-                        error = \"some required keys are missing\";\n-                    }\n-                }\n-            }\n+        ImportData import_data;\n+        std::map<CKeyID, CPubKey> pubkey_map;\n+        std::map<CKeyID, CKey> privkey_map;\n+        std::set<CScript> script_pub_keys;\n+        bool have_solving_data;\n+\n+        if (data.exists(\"scriptPubKey\") && data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Both a descriptor and a scriptPubKey should not be provided.\");\n+        } else if (data.exists(\"scriptPubKey\")) {\n+            warnings = ProcessImportLegacy(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data);\n+        } else if (data.exists(\"desc\")) {\n+            warnings = ProcessImportDescriptor(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data);\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Either a descriptor or scriptPubKey must be provided.\");\n+        }\n \n-            if (!error.empty()) {\n-                warnings.push_back(\"Importing as non-solvable: \" + error + \". If this is intentional, don't provide any keys, pubkeys, witnessscript, or redeemscript.\");\n-                import_data = ImportData();\n-                pubkey_map.clear();\n-                privkey_map.clear();\n-                have_solving_data = false;\n-            } else {\n-                // RecurseImportData() removes any relevant redeemscript/witnessscript from import_data, so we can use that to discover if a superfluous one was provided.\n-                if (import_data.redeemscript) warnings.push_back(\"Ignoring redeemscript as this is not a P2SH script.\");\n-                if (import_data.witnessscript) warnings.push_back(\"Ignoring witnessscript as this is not a (P2SH-)P2WSH script.\");\n-                for (auto it = privkey_map.begin(); it != privkey_map.end(); ) {\n-                    auto oldit = it++;\n-                    if (import_data.used_keys.count(oldit->first) == 0) {\n-                        warnings.push_back(\"Ignoring irrelevant private key.\");\n-                        privkey_map.erase(oldit);\n-                    }\n-                }\n-                for (auto it = pubkey_map.begin(); it != pubkey_map.end(); ) {\n-                    auto oldit = it++;\n-                    auto key_data_it = import_data.used_keys.find(oldit->first);\n-                    if (key_data_it == import_data.used_keys.end() || !key_data_it->second) {\n-                        warnings.push_back(\"Ignoring public key \\\"\" + HexStr(oldit->first) + \"\\\" as it doesn't appear inside P2PKH or P2WPKH.\");\n-                        pubkey_map.erase(oldit);\n-                    }\n-                }\n-            }\n+        // If private keys are disabled, abort if private keys are being imported\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !privkey_map.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n         }\n \n         // Check whether we have any work to do\n-        if (::IsMine(*pwallet, script) & ISMINE_SPENDABLE) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        for (const CScript& script : script_pub_keys) {\n+            if (::IsMine(*pwallet, script) & ISMINE_SPENDABLE) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script (\\\"\" + HexStr(script.begin(), script.end()) + \"\\\")\");\n+            }\n         }\n \n         // All good, time to import\n@@ -1146,14 +1261,18 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n         }\n-        if (!have_solving_data || !::IsMine(*pwallet, script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n-            if (!pwallet->AddWatchOnly(script, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+\n+        for (const CScript& script : script_pub_keys) {\n+            if (!have_solving_data || !::IsMine(*pwallet, script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n+                if (!pwallet->AddWatchOnly(script, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n+            }\n+            CTxDestination dest;\n+            ExtractDestination(script, dest);\n+            if (!internal && IsValidDestination(dest)) {\n+                pwallet->SetAddressBook(dest, label, \"receive\");\n             }\n-        }\n-        if (!internal) {\n-            assert(IsValidDestination(dest));\n-            pwallet->SetAddressBook(dest, label, \"receive\");\n         }\n \n         result.pushKV(\"success\", UniValue(true));\n@@ -1204,7 +1323,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                         {\n                             {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n                                 {\n-                                    {\"scriptPubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Type of scriptPubKey (string for script, json for address)\",\n+                                    {\"desc\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Descriptor to import. If using descriptor, do not also provide address/scriptPubKey, scripts, or pubkeys\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n                                         /* oneline_description */ \"\", {\"\\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }\", \"string / json\"}\n                                     },\n                                     {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n@@ -1227,6 +1347,12 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                             {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n                                         }\n                                     },\n+                                    {\"range\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n+                                        {\n+                                            {\"start\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Start of the range to import\"},\n+                                            {\"end\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"End of the range to import (inclusive)\"},\n+                                        }\n+                                    },\n                                     {\"internal\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n                                     {\"watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n                                     {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},"
      },
      {
        "sha": "7cce72b39fc87fbc83c6ec116cc6d606455f8fcd",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 84,
        "deletions": 1,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9127bd7abaf8762456285007080571c5868789c8/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9127bd7abaf8762456285007080571c5868789c8/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=9127bd7abaf8762456285007080571c5868789c8",
        "patch": "@@ -203,7 +203,7 @@ def run_test(self):\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-4,\n-                              error_message='The wallet already contains the private key for this address or script')\n+                              error_message='The wallet already contains the private key for this address or script (\"' + key.p2pkh_script + '\")')\n \n         # Address + Private key + watchonly\n         self.log.info(\"Should import an address with private key and with watchonly\")\n@@ -543,5 +543,88 @@ def run_test(self):\n                      solvable=True,\n                      ismine=False)\n \n+        # Test importing of a P2SH-P2WPKH address via descriptor + private key\n+        key = get_key(self.nodes[0])\n+        self.log.info(\"Should import a p2sh-p2wpkh address from descriptor and private key\")\n+        self.test_importmulti({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                               \"timestamp\": \"now\",\n+                               \"label\": \"Descriptor import test\",\n+                               \"keys\": [key.privkey]},\n+                              success=True)\n+        test_address(self.nodes[1],\n+                     key.p2sh_p2wpkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     label=\"Descriptor import test\")\n+\n+        # Test ranged descriptor fails if range is not specified\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.log.info(\"Ranged descriptor import should fail without a specified range\")\n+        self.test_importmulti({\"desc\": desc,\n+                               \"timestamp\": \"now\"},\n+                              success=False,\n+                              error_code=-8,\n+                              error_message='Descriptor is ranged, please specify the range')\n+\n+        # Test importing of a ranged descriptor without keys\n+        self.log.info(\"Should import the ranged descriptor with specified range as solvable\")\n+        self.test_importmulti({\"desc\": desc,\n+                               \"timestamp\": \"now\",\n+                               \"range\": {\"end\": 1}},\n+                              success=True,\n+                              warnings=[\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\"])\n+        for address in addresses:\n+            test_address(self.nodes[1],\n+                         key.p2sh_p2wpkh_addr,\n+                         solvable=True)\n+\n+        # Test importing of a P2PKH address via descriptor\n+        key = get_key(self.nodes[0])\n+        self.log.info(\"Should import a p2pkh address from descriptor\")\n+        self.test_importmulti({\"desc\": \"pkh(\" + key.pubkey + \")\",\n+                               \"timestamp\": \"now\",\n+                               \"label\": \"Descriptor import test\"},\n+                              True,\n+                              warnings=[\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\"])\n+        test_address(self.nodes[1],\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=False,\n+                     label=\"Descriptor import test\")\n+\n+        # Test import fails if both desc and scriptPubKey are provided\n+        key = get_key(self.nodes[0])\n+        self.log.info(\"Import should fail if both scriptPubKey and desc are provided\")\n+        self.test_importmulti({\"desc\": \"pkh(\" + key.pubkey + \")\",\n+                               \"scriptPubKey\": {\"address\": key.p2pkh_addr},\n+                               \"timestamp\": \"now\"},\n+                              success=False,\n+                              error_code=-8,\n+                              error_message='Both a descriptor and a scriptPubKey should not be provided.')\n+\n+        # Test import fails if neither desc nor scriptPubKey are present\n+        key = get_key(self.nodes[0])\n+        self.log.info(\"Import should fail if neither a descriptor nor a scriptPubKey are provided\")\n+        self.test_importmulti({\"timestamp\": \"now\"},\n+                              success=False,\n+                              error_code=-8,\n+                              error_message='Either a descriptor or scriptPubKey must be provided.')\n+\n+        # Test importing of a multisig via descriptor\n+        key1 = get_key(self.nodes[0])\n+        key2 = get_key(self.nodes[0])\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importmulti({\"desc\": \"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\",\n+                               \"timestamp\": \"now\"},\n+                              success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(self.nodes[1],\n+                     key1.p2pkh_addr,\n+                     ismine=False,\n+                     iswatchonly=False)\n+\n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      }
    ]
  },
  {
    "sha": "faf3d2272594834bc4b7c7a127a396cd6c810cdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWYzZDIyNzI1OTQ4MzRiYzRiN2M3YTEyN2EzOTZjZDZjODEwY2Ri",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T00:18:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T00:16:57Z"
      },
      "message": "test_runner: Remove unused --force option",
      "tree": {
        "sha": "9a3b96f459d0249a7bd32852956d2ee00545836c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a3b96f459d0249a7bd32852956d2ee00545836c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf3d2272594834bc4b7c7a127a396cd6c810cdb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcXMp5AAoJEM4rdWl+aaVIP18L/iPrGZ7pBpuBV24aSaKKRWyR\nCEfJ1vtVmG+eJX81p1V9RBTOZYjIRPuqr18Bv0L5aVq6qnPW3GDodNkL2R+gmPSj\nx5MCeP1QPHVuG5F9ub6lJMh8B5s/92cgv7otbbTY5gsEu+Zz7JHfv/vP2u2LgFNl\nsDIQCUQSs2zbxqC5eeZHn8nocVlHu0Je0w6faxgUPrcYbSyaP71i/X5fpWs6Nc5/\nm6h0pFa0U8gNKf15uYUcShRwg0uIovt5Y50SnlpiV5AXraLYVMsSQpIiCSQZwLtW\n9F/4WBoC2+hWZAadMI1h0YyPmpaQcMWyCyS8uLjyO2xbYGAUL35AIVPK0Z8vrq8I\nA/rX+XGeSzM/v9HfU2682zNy3Zers4DSjCq1pZk+Xz62meptFF/R1JHUci4uibAv\n2zRJ2Bj5qehp7+1/8+FtL4IABfEBJonyFVhYeKPpMicGCPGCN2zppvVHJZRG4Swc\nT/Em7lIKNS8u+EWQ2jQhqfItvlaW6XsdfSs8SFdKsQ==\n=DP/k\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a3b96f459d0249a7bd32852956d2ee00545836c\nparent 72d34c0edc5ad9e69e0d054459ec15d2278f206b\nauthor MarcoFalke <falke.marco@gmail.com> 1549585082 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549585017 -0500\n\ntest_runner: Remove unused --force option\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf3d2272594834bc4b7c7a127a396cd6c810cdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf3d2272594834bc4b7c7a127a396cd6c810cdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf3d2272594834bc4b7c7a127a396cd6c810cdb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72d34c0edc5ad9e69e0d054459ec15d2278f206b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72d34c0edc5ad9e69e0d054459ec15d2278f206b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72d34c0edc5ad9e69e0d054459ec15d2278f206b"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 5,
      "deletions": 12
    },
    "files": [
      {
        "sha": "08132edb7d1a4a63a6908084e334e8fb1ec840e9",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf3d2272594834bc4b7c7a127a396cd6c810cdb/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf3d2272594834bc4b7c7a127a396cd6c810cdb/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=faf3d2272594834bc4b7c7a127a396cd6c810cdb",
        "patch": "@@ -54,5 +54,5 @@ test_script:\n - cmd: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n - ps:  python test\\util\\bitcoin-util-test.py\n - cmd: python test\\util\\rpcauth-test.py\n-- cmd: python test\\functional\\test_runner.py --ci --force --quiet --combinedlogslen=4000 --failfast\n+- cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast\n deploy: off"
      },
      {
        "sha": "d5086b084a0fad76c4379f611aa359d4a4e7f38f",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf3d2272594834bc4b7c7a127a396cd6c810cdb/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf3d2272594834bc4b7c7a127a396cd6c810cdb/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=faf3d2272594834bc4b7c7a127a396cd6c810cdb",
        "patch": "@@ -66,19 +66,21 @@ jobs:\n         BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi\"\n \n     - stage: test\n-      name: 'Win32  [GOAL: deploy]  [no gui tests]'\n+      name: 'Win32  [GOAL: deploy]  [no gui or functional tests]'\n       env: >-\n         HOST=i686-w64-mingw32\n         DPKG_ADD_ARCH=\"i386\"\n         PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine-binfmt wine32\"\n+        RUN_FUNCTIONAL_TESTS=false\n         GOAL=\"deploy\"\n         BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n \n     - stage: test\n-      name: 'Win64  [GOAL: deploy]  [no gui tests]'\n+      name: 'Win64  [GOAL: deploy]  [no gui or functional tests]'\n       env: >-\n         HOST=x86_64-w64-mingw32\n         PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64\"\n+        RUN_FUNCTIONAL_TESTS=false\n         GOAL=\"deploy\"\n         BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n "
      },
      {
        "sha": "eb46f5cb228ab4a68a17309f4ed66ad25f38cb75",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf3d2272594834bc4b7c7a127a396cd6c810cdb/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf3d2272594834bc4b7c7a127a396cd6c810cdb/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=faf3d2272594834bc4b7c7a127a396cd6c810cdb",
        "patch": "@@ -7,8 +7,6 @@\n This module calls down into individual test cases via subprocess. It will\n forward all unrecognized arguments onto the individual test scripts.\n \n-Functional tests are disabled on Windows by default. Use --force to run them anyway.\n-\n For a description of arguments recognized by test scripts, see\n `test/functional/test_framework/test_framework.py:BitcoinTestFramework.main`.\n \n@@ -224,7 +222,6 @@ def main():\n     parser.add_argument('--ci', action='store_true', help='Run checks and code that are usually only enabled in a continuous integration environment')\n     parser.add_argument('--exclude', '-x', help='specify a comma-separated-list of scripts to exclude.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n-    parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n     parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n     parser.add_argument('--keepcache', '-k', action='store_true', help='the default behavior is to flush the cache directory on startup. --keepcache retains the cache from the previous testrun.')\n@@ -261,12 +258,6 @@ def main():\n \n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n \n-    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n-        # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n-        # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-        print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n-        sys.exit(0)\n-\n     if not enable_bitcoind:\n         print(\"No functional tests to run.\")\n         print(\"Rerun ./configure with --with-daemon and then make\")"
      }
    ]
  },
  {
    "sha": "b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWIyNmQ5YzM2MTVkMTU2NjlhZTBhMDQ5YzFkZWRlMzlhOWU1OWE5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-08T04:04:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-08T04:12:16Z"
      },
      "message": "Merge #14897: randomize GETDATA(tx) request order and introduce bias toward outbound\n\n1cff3d6cb0 Change in transaction pull scheduling to prevent InvBlock-related attacks (Gleb Naumenko)\n\nPull request description:\n\n  This code makes executing two particular (and potentially other) attacks harder.\n\n  ### InvBlock\n  This behavior was described well [here](https://www.cs.umd.edu/projects/coinscope/coinscope.pdf) (page 11).\n\n  Per current implementation, if node A receives _INV_ (tx) from node B, node A sends _GETDATA_ to B and waits for _TX_ message back.\n\n  Node A is likely to receive more _INVs_ (regarding the same tx) from other peers. But node A would not send another _GETDATA_ unless it does not hear _TX_ back from node B for next 2 minutes (to save bandwidth)\n\n  Thus, if B is a malicious node, it can prevent node A from getting the transaction (even if all A\u2019s peers have it) for 2 minutes.\n\n  This behavior seems to be an inherent limitation of the current P2P relay protocol, and I don\u2019t see how it can be fundamentally changed (I can see workarounds which involve rewriting a lot of P2P code though).\n\n  ### What does this PR fix?\n\n  The attacks I\u2019m looking at involve preventing A from learning the transaction for 2*N minutes. To do that, an attacker has to spin up N nodes and send N _INVs_ simultaneously to node A (then InvBlocks will be queued with an interval of 2 minutes according to current implementation)\n\n  More precisely, 2 scenarios I\u2019m looking at are:\n  1. An attacker censors a particular transaction. By performing InvBlock from different nodes, an attacker can execute a network-wide censorship of a particular transaction (or all transactions). The earlier an attacker founds the transaction he wants to censor, the easier it is to perform an attack. As it was pointed out by @gwillen, this is even more dangerous in the case of lightning, where transactions are known in advance.\n  2. Topology inference described in papers [1](https://www.cs.umd.edu/projects/coinscope/coinscope.pdf), [2](https://arxiv.org/pdf/1812.00942.pdf) involve network-wide InvBlock. This fix would not mitigate this type of inference, but I believe it will make it more expensive to perform (an attacker would have to create more transactions and perform more rounds to learn the topology, the second paper itself notes that InvBlock isolation is important for the attack).\n\n  ### How does it work\n  This PR introduces bias toward outbound connections (they have higher priority when a node chooses from whom it should request a transaction) and randomizes the order.\n  As per @gmaxwell suggestion, GETDATA requests queue is created after processing all incoming messages from all nodes.\n\n  After this fix, if the incoming messages were [I1, I2, I3, O1, O2, O3, O4], the queue for _GETDATA_ may look like [O2, O1, O3, O4, I1, I3, I2, \u2026.].\n\n  If {I1, I2, I3} were significantly earlier (but the difference is less than TX_TIMEOUT=60 s) than others, the queue for _GETDATA_ may look like [I2, O2, O1, O3, O4, I1, I3, \u2026.].\n\n  ### Other comments:\n  1. This mitigation works better if the connectivity is higher (especially outbound, because it would be less likely that 2 _GETDATAs_ for inbound malicious nodes queued together)\n\nTree-SHA512: 2ad1e80c3c7e16ff0f2d1160aa7d9a5eaae88baa88467f156b987fe2a387f767a41e11507d7f99ea02ab75e89ab93b6a278d138cb1054f1aaa2df336e9b2ca6a",
      "tree": {
        "sha": "17c87c19086316360f32ffb934b3d3264435fbb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17c87c19086316360f32ffb934b3d3264435fbb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEErGYmFy4AqCz/rolypjbpdjH3Z+AFAlxdAaAACgkQpjbpdjH3\nZ+DvTRAAmBfzFQwyQSZYM7sjXhHjCpRgZEVkekcBGW8Wx+7N40di0+DzFJDeYbBM\nNktKe44Z3Iei+3Otj2Pz5YgKkQVTzoK8k1phumyI8oYVMIZeefac0k4PT18tpJ2C\nK8ULAZ8XNZHN8gAbW6HaqJ5tcft4mgM+EHCODG7wXotuqR1CHDwlcqMAaq8oBos7\nqIDCS8RAg8xumuHrORLTQUOalnmLwVlsXcPn/2w4KIdx+QUC63sUZCbE/Em0qJPw\n8JEYzCj8hXEDwZ11zW5SZRR32g3YFWpJ37taP/u65TioTFF5zWqMSMtzdeKio8fg\nPMT3PbyZeEWSdAZcG2Zw+rMv4Q6CFtdtoZ3z2A8XBqa+ms/SS6O7OxX2EvRTUsvH\nLhlVw5FzsMo9NPWwdKNmog5LAUcbO1S5o+XM0K5jRl5m0C75oBlrlczGkUBwELH1\ncul5crVfCbNmCzkCcyLS8hrRKhvvkKfcQ9uh0t+SLv/4N12X+uvKfpSc/02ppwZg\nS4s9Z3Lk91P09vgxnI6TYDdVOpZCKbN9sE5zU5cjifQuQ5r0mUil9F3Uio7hk/yr\nDaKhMrYpPtmRC0F5kCFEVGD4VkspYX1MTDzDIuIqKK4+GbRuVGaoe2hu5e0NuoM7\nDTLNBq7Ed1t0Mn9lqRQsD4q9PGW0cIJ37/SPV43Z7OzZpRrtDtg=\n=jokU\n-----END PGP SIGNATURE-----",
        "payload": "tree 17c87c19086316360f32ffb934b3d3264435fbb5\nparent 9127bd7abaf8762456285007080571c5868789c8\nparent 1cff3d6cb017aea87d16cbda0768bbab256d16da\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1549598669 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1549599136 -0800\n\nMerge #14897: randomize GETDATA(tx) request order and introduce bias toward outbound\n\n1cff3d6cb0 Change in transaction pull scheduling to prevent InvBlock-related attacks (Gleb Naumenko)\n\nPull request description:\n\n  This code makes executing two particular (and potentially other) attacks harder.\n\n  ### InvBlock\n  This behavior was described well [here](https://www.cs.umd.edu/projects/coinscope/coinscope.pdf) (page 11).\n\n  Per current implementation, if node A receives _INV_ (tx) from node B, node A sends _GETDATA_ to B and waits for _TX_ message back.\n\n  Node A is likely to receive more _INVs_ (regarding the same tx) from other peers. But node A would not send another _GETDATA_ unless it does not hear _TX_ back from node B for next 2 minutes (to save bandwidth)\n\n  Thus, if B is a malicious node, it can prevent node A from getting the transaction (even if all A\u2019s peers have it) for 2 minutes.\n\n  This behavior seems to be an inherent limitation of the current P2P relay protocol, and I don\u2019t see how it can be fundamentally changed (I can see workarounds which involve rewriting a lot of P2P code though).\n\n  ### What does this PR fix?\n\n  The attacks I\u2019m looking at involve preventing A from learning the transaction for 2*N minutes. To do that, an attacker has to spin up N nodes and send N _INVs_ simultaneously to node A (then InvBlocks will be queued with an interval of 2 minutes according to current implementation)\n\n  More precisely, 2 scenarios I\u2019m looking at are:\n  1. An attacker censors a particular transaction. By performing InvBlock from different nodes, an attacker can execute a network-wide censorship of a particular transaction (or all transactions). The earlier an attacker founds the transaction he wants to censor, the easier it is to perform an attack. As it was pointed out by @gwillen, this is even more dangerous in the case of lightning, where transactions are known in advance.\n  2. Topology inference described in papers [1](https://www.cs.umd.edu/projects/coinscope/coinscope.pdf), [2](https://arxiv.org/pdf/1812.00942.pdf) involve network-wide InvBlock. This fix would not mitigate this type of inference, but I believe it will make it more expensive to perform (an attacker would have to create more transactions and perform more rounds to learn the topology, the second paper itself notes that InvBlock isolation is important for the attack).\n\n  ### How does it work\n  This PR introduces bias toward outbound connections (they have higher priority when a node chooses from whom it should request a transaction) and randomizes the order.\n  As per @gmaxwell suggestion, GETDATA requests queue is created after processing all incoming messages from all nodes.\n\n  After this fix, if the incoming messages were [I1, I2, I3, O1, O2, O3, O4], the queue for _GETDATA_ may look like [O2, O1, O3, O4, I1, I3, I2, \u2026.].\n\n  If {I1, I2, I3} were significantly earlier (but the difference is less than TX_TIMEOUT=60 s) than others, the queue for _GETDATA_ may look like [I2, O2, O1, O3, O4, I1, I3, \u2026.].\n\n  ### Other comments:\n  1. This mitigation works better if the connectivity is higher (especially outbound, because it would be less likely that 2 _GETDATAs_ for inbound malicious nodes queued together)\n\nTree-SHA512: 2ad1e80c3c7e16ff0f2d1160aa7d9a5eaae88baa88467f156b987fe2a387f767a41e11507d7f99ea02ab75e89ab93b6a278d138cb1054f1aaa2df336e9b2ca6a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9127bd7abaf8762456285007080571c5868789c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9127bd7abaf8762456285007080571c5868789c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9127bd7abaf8762456285007080571c5868789c8"
      },
      {
        "sha": "1cff3d6cb017aea87d16cbda0768bbab256d16da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cff3d6cb017aea87d16cbda0768bbab256d16da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cff3d6cb017aea87d16cbda0768bbab256d16da"
      }
    ],
    "stats": {
      "total": 249,
      "additions": 168,
      "deletions": 81
    },
    "files": [
      {
        "sha": "87f1ef05775bf341b1f2082b854152fd6b5fe917",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
        "patch": "@@ -85,8 +85,6 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n \n-limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n-\n void CConnman::AddOneShot(const std::string& strDest)\n {\n     LOCK(cs_vOneShots);\n@@ -2644,40 +2642,6 @@ CNode::~CNode()\n     CloseSocket(hSocket);\n }\n \n-void CNode::AskFor(const CInv& inv)\n-{\n-    if (mapAskFor.size() > MAPASKFOR_MAX_SZ || setAskFor.size() > SETASKFOR_MAX_SZ)\n-        return;\n-    // a peer may not have multiple non-responded queue positions for a single inv item\n-    if (!setAskFor.insert(inv.hash).second)\n-        return;\n-\n-    // We're using mapAskFor as a priority queue,\n-    // the key is the earliest time the request can be sent\n-    int64_t nRequestTime;\n-    limitedmap<uint256, int64_t>::const_iterator it = mapAlreadyAskedFor.find(inv.hash);\n-    if (it != mapAlreadyAskedFor.end())\n-        nRequestTime = it->second;\n-    else\n-        nRequestTime = 0;\n-    LogPrint(BCLog::NET, \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, FormatISO8601Time(nRequestTime/1000000), id);\n-\n-    // Make sure not to reuse time indexes to keep things in the same order\n-    int64_t nNow = GetTimeMicros() - 1000000;\n-    static int64_t nLastTime;\n-    ++nLastTime;\n-    nNow = std::max(nNow, nLastTime);\n-    nLastTime = nNow;\n-\n-    // Each retry is 2 minutes after the last\n-    nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n-    if (it != mapAlreadyAskedFor.end())\n-        mapAlreadyAskedFor.update(it, nRequestTime);\n-    else\n-        mapAlreadyAskedFor.insert(std::make_pair(inv.hash, nRequestTime));\n-    mapAskFor.insert(std::make_pair(nRequestTime, inv));\n-}\n-\n bool CConnman::NodeFullyConnected(const CNode* pnode)\n {\n     return pnode && pnode->fSuccessfullyConnected && !pnode->fDisconnect;"
      },
      {
        "sha": "869c8079ca3fb2f19dfced208b3340777328b316",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
        "patch": "@@ -67,10 +67,6 @@ static const bool DEFAULT_UPNP = USE_UPNP;\n #else\n static const bool DEFAULT_UPNP = false;\n #endif\n-/** The maximum number of entries in mapAskFor */\n-static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n-/** The maximum number of entries in setAskFor (larger due to getdata latency)*/\n-static const size_t SETASKFOR_MAX_SZ = 2 * MAX_INV_SZ;\n /** The maximum number of peer connections to maintain. */\n static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n /** The default for -maxuploadtarget. 0 = Unlimited */\n@@ -514,8 +510,6 @@ extern bool fDiscover;\n extern bool fListen;\n extern bool fRelayTxes;\n \n-extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n-\n /** Subversion as sent to the P2P network in `version` messages */\n extern std::string strSubVersion;\n \n@@ -704,8 +698,6 @@ class CNode\n     // and in the order requested.\n     std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\n     CCriticalSection cs_inventory;\n-    std::set<uint256> setAskFor;\n-    std::multimap<int64_t, CInv> mapAskFor;\n     int64_t nNextInvSend{0};\n     // Used for headers announcements - unfiltered blocks to relay\n     std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(cs_inventory);\n@@ -852,8 +844,6 @@ class CNode\n         vBlockHashesToAnnounce.push_back(hash);\n     }\n \n-    void AskFor(const CInv& inv);\n-\n     void CloseSocketDisconnect();\n \n     void copyStats(CNodeStats &stats);"
      },
      {
        "sha": "5927a14a6ec5b4abce62dbffe83ee9d8699241c5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 168,
        "deletions": 18,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
        "patch": "@@ -64,6 +64,21 @@ static constexpr int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n /// Age after which a block is considered historical for purposes of rate\n /// limiting block relay. Set to one week, denominated in seconds.\n static constexpr int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n+/** Maximum number of in-flight transactions from a peer */\n+static constexpr int32_t MAX_PEER_TX_IN_FLIGHT = 100;\n+/** Maximum number of announced transactions from a peer */\n+static constexpr int32_t MAX_PEER_TX_ANNOUNCEMENTS = 2 * MAX_INV_SZ;\n+/** How many microseconds to delay requesting transactions from inbound peers */\n+static constexpr int64_t INBOUND_PEER_TX_DELAY = 2 * 1000000;\n+/** How long to wait (in microseconds) before downloading a transaction from an additional peer */\n+static constexpr int64_t GETDATA_TX_INTERVAL = 60 * 1000000;\n+/** Maximum delay (in microseconds) for transaction requests to avoid biasing some peers over others. */\n+static constexpr int64_t MAX_GETDATA_RANDOM_DELAY = 2 * 1000000;\n+static_assert(INBOUND_PEER_TX_DELAY >= MAX_GETDATA_RANDOM_DELAY,\n+\"To preserve security, MAX_GETDATA_RANDOM_DELAY should not exceed INBOUND_PEER_DELAY\");\n+/** Limit to avoid sending big packets. Not used in processing incoming GETDATA for compatibility */\n+static const unsigned int MAX_GETDATA_SZ = 1000;\n+\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -274,6 +289,66 @@ struct CNodeState {\n     //! Time of last new block announcement\n     int64_t m_last_block_announcement;\n \n+    /*\n+     * State associated with transaction download.\n+     *\n+     * Tx download algorithm:\n+     *\n+     *   When inv comes in, queue up (process_time, txid) inside the peer's\n+     *   CNodeState (m_tx_process_time) as long as m_tx_announced for the peer\n+     *   isn't too big (MAX_PEER_TX_ANNOUNCEMENTS).\n+     *\n+     *   The process_time for a transaction is set to nNow for outbound peers,\n+     *   nNow + 2 seconds for inbound peers. This is the time at which we'll\n+     *   consider trying to request the transaction from the peer in\n+     *   SendMessages(). The delay for inbound peers is to allow outbound peers\n+     *   a chance to announce before we request from inbound peers, to prevent\n+     *   an adversary from using inbound connections to blind us to a\n+     *   transaction (InvBlock).\n+     *\n+     *   When we call SendMessages() for a given peer,\n+     *   we will loop over the transactions in m_tx_process_time, looking\n+     *   at the transactions whose process_time <= nNow. We'll request each\n+     *   such transaction that we don't have already and that hasn't been\n+     *   requested from another peer recently, up until we hit the\n+     *   MAX_PEER_TX_IN_FLIGHT limit for the peer. Then we'll update\n+     *   g_already_asked_for for each requested txid, storing the time of the\n+     *   GETDATA request. We use g_already_asked_for to coordinate transaction\n+     *   requests amongst our peers.\n+     *\n+     *   For transactions that we still need but we have already recently\n+     *   requested from some other peer, we'll reinsert (process_time, txid)\n+     *   back into the peer's m_tx_process_time at the point in the future at\n+     *   which the most recent GETDATA request would time out (ie\n+     *   GETDATA_TX_INTERVAL + the request time stored in g_already_asked_for).\n+     *   We add an additional delay for inbound peers, again to prefer\n+     *   attempting download from outbound peers first.\n+     *   We also add an extra small random delay up to 2 seconds\n+     *   to avoid biasing some peers over others. (e.g., due to fixed ordering\n+     *   of peer processing in ThreadMessageHandler).\n+     *\n+     *   When we receive a transaction from a peer, we remove the txid from the\n+     *   peer's m_tx_in_flight set and from their recently announced set\n+     *   (m_tx_announced).  We also clear g_already_asked_for for that entry, so\n+     *   that if somehow the transaction is not accepted but also not added to\n+     *   the reject filter, then we will eventually redownload from other\n+     *   peers.\n+     */\n+    struct TxDownloadState {\n+        /* Track when to attempt download of announced transactions (process\n+         * time in micros -> txid)\n+         */\n+        std::multimap<int64_t, uint256> m_tx_process_time;\n+\n+        //! Store all the transactions a peer has recently announced\n+        std::set<uint256> m_tx_announced;\n+\n+        //! Store transactions which were requested by us\n+        std::set<uint256> m_tx_in_flight;\n+    };\n+\n+    TxDownloadState m_tx_download;\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -301,6 +376,9 @@ struct CNodeState {\n     }\n };\n \n+// Keeps track of the time (in microseconds) when transactions were requested last time\n+limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n+\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n@@ -591,6 +669,58 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n     }\n }\n \n+void EraseTxRequest(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    g_already_asked_for.erase(txid);\n+}\n+\n+int64_t GetTxRequestTime(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    auto it = g_already_asked_for.find(txid);\n+    if (it != g_already_asked_for.end()) {\n+        return it->second;\n+    }\n+    return 0;\n+}\n+\n+void UpdateTxRequestTime(const uint256& txid, int64_t request_time) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    auto it = g_already_asked_for.find(txid);\n+    if (it == g_already_asked_for.end()) {\n+        g_already_asked_for.insert(std::make_pair(txid, request_time));\n+    } else {\n+        g_already_asked_for.update(it, request_time);\n+    }\n+}\n+\n+\n+void RequestTx(CNodeState* state, const uint256& txid, int64_t nNow) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+{\n+    CNodeState::TxDownloadState& peer_download_state = state->m_tx_download;\n+    if (peer_download_state.m_tx_announced.size() >= MAX_PEER_TX_ANNOUNCEMENTS || peer_download_state.m_tx_announced.count(txid)) {\n+        // Too many queued announcements from this peer, or we already have\n+        // this announcement\n+        return;\n+    }\n+    peer_download_state.m_tx_announced.insert(txid);\n+\n+    int64_t process_time;\n+    int64_t last_request_time = GetTxRequestTime(txid);\n+    // First time requesting this tx\n+    if (last_request_time == 0) {\n+        process_time = nNow;\n+    } else {\n+        // Randomize the delay to avoid biasing some peers over others (such as due to\n+        // fixed ordering of peer processing in ThreadMessageHandler)\n+        process_time = last_request_time + GETDATA_TX_INTERVAL + GetRand(MAX_GETDATA_RANDOM_DELAY);\n+    }\n+\n+    // We delay processing announcements from non-preferred (eg inbound) peers\n+    if (!state->fPreferredDownload) process_time += INBOUND_PEER_TX_DELAY;\n+\n+    peer_download_state.m_tx_process_time.emplace(process_time, txid);\n+}\n+\n } // namespace\n \n // This function is used for testing the stale tip eviction logic, see\n@@ -1945,6 +2075,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         LOCK(cs_main);\n \n         uint32_t nFetchFlags = GetFetchFlags(pfrom);\n+        int64_t nNow = GetTimeMicros();\n \n         for (CInv &inv : vInv)\n         {\n@@ -1976,7 +2107,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n                 } else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload()) {\n-                    pfrom->AskFor(inv);\n+                    RequestTx(State(pfrom->GetId()), inv.hash, nNow);\n                 }\n             }\n         }\n@@ -2211,8 +2342,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         bool fMissingInputs = false;\n         CValidationState state;\n \n-        pfrom->setAskFor.erase(inv.hash);\n-        mapAlreadyAskedFor.erase(inv.hash);\n+        CNodeState* nodestate = State(pfrom->GetId());\n+        nodestate->m_tx_download.m_tx_announced.erase(inv.hash);\n+        nodestate->m_tx_download.m_tx_in_flight.erase(inv.hash);\n+        EraseTxRequest(inv.hash);\n \n         std::list<CTransactionRef> lRemovedTxn;\n \n@@ -2303,10 +2436,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n             if (!fRejectedParents) {\n                 uint32_t nFetchFlags = GetFetchFlags(pfrom);\n+                int64_t nNow = GetTimeMicros();\n+\n                 for (const CTxIn& txin : tx.vin) {\n                     CInv _inv(MSG_TX | nFetchFlags, txin.prevout.hash);\n                     pfrom->AddInventoryKnown(_inv);\n-                    if (!AlreadyHave(_inv)) pfrom->AskFor(_inv);\n+                    if (!AlreadyHave(_inv)) RequestTx(State(pfrom->GetId()), _inv.hash, nNow);\n                 }\n                 AddOrphanTx(ptx, pfrom->GetId());\n \n@@ -3731,24 +3866,39 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         //\n         // Message: getdata (non-blocks)\n         //\n-        while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n-        {\n-            const CInv& inv = (*pto->mapAskFor.begin()).second;\n-            if (!AlreadyHave(inv))\n-            {\n-                LogPrint(BCLog::NET, \"Requesting %s peer=%d\\n\", inv.ToString(), pto->GetId());\n-                vGetData.push_back(inv);\n-                if (vGetData.size() >= 1000)\n-                {\n-                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n-                    vGetData.clear();\n+        auto& tx_process_time = state.m_tx_download.m_tx_process_time;\n+        while (!tx_process_time.empty() && tx_process_time.begin()->first <= nNow && state.m_tx_download.m_tx_in_flight.size() < MAX_PEER_TX_IN_FLIGHT) {\n+            const uint256& txid = tx_process_time.begin()->second;\n+            CInv inv(MSG_TX | GetFetchFlags(pto), txid);\n+            if (!AlreadyHave(inv)) {\n+                // If this transaction was last requested more than 1 minute ago,\n+                // then request.\n+                int64_t last_request_time = GetTxRequestTime(inv.hash);\n+                if (last_request_time <= nNow - GETDATA_TX_INTERVAL) {\n+                    LogPrint(BCLog::NET, \"Requesting %s peer=%d\\n\", inv.ToString(), pto->GetId());\n+                    vGetData.push_back(inv);\n+                    if (vGetData.size() >= MAX_GETDATA_SZ) {\n+                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                        vGetData.clear();\n+                    }\n+                    UpdateTxRequestTime(inv.hash, nNow);\n+                    state.m_tx_download.m_tx_in_flight.insert(inv.hash);\n+                } else {\n+                    // This transaction is in flight from someone else; queue\n+                    // up processing to happen after the download times out\n+                    // (with a slight delay for inbound peers, to prefer\n+                    // requests to outbound peers).\n+                    RequestTx(&state, txid, nNow);\n                 }\n             } else {\n-                //If we're not going to ask, don't expect a response.\n-                pto->setAskFor.erase(inv.hash);\n+                // We have already seen this transaction, no need to download.\n+                state.m_tx_download.m_tx_announced.erase(inv.hash);\n+                state.m_tx_download.m_tx_in_flight.erase(inv.hash);\n             }\n-            pto->mapAskFor.erase(pto->mapAskFor.begin());\n+            tx_process_time.erase(tx_process_time.begin());\n         }\n+\n+\n         if (!vGetData.empty())\n             connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n "
      },
      {
        "sha": "860f64bb1141790aa2627c4e46acf081bfedb901",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
        "patch": "@@ -169,11 +169,6 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n     BOOST_CHECK_EQUAL(FormatISO8601Date(1317425777), \"2011-09-30\");\n }\n \n-BOOST_AUTO_TEST_CASE(util_FormatISO8601Time)\n-{\n-    BOOST_CHECK_EQUAL(FormatISO8601Time(1317425777), \"23:36:17Z\");\n-}\n-\n struct TestArgsManager : public ArgsManager\n {\n     TestArgsManager() { m_network_only_args.clear(); }"
      },
      {
        "sha": "c0ede98701a250b241ef83a65069f8b1146a05b6",
        "filename": "src/util/time.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/util/time.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/util/time.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.cpp?ref=b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
        "patch": "@@ -97,14 +97,3 @@ std::string FormatISO8601Date(int64_t nTime) {\n #endif\n     return strprintf(\"%04i-%02i-%02i\", ts.tm_year + 1900, ts.tm_mon + 1, ts.tm_mday);\n }\n-\n-std::string FormatISO8601Time(int64_t nTime) {\n-    struct tm ts;\n-    time_t time_val = nTime;\n-#ifdef _MSC_VER\n-    gmtime_s(&ts, &time_val);\n-#else\n-    gmtime_r(&time_val, &ts);\n-#endif\n-    return strprintf(\"%02i:%02i:%02iZ\", ts.tm_hour, ts.tm_min, ts.tm_sec);\n-}"
      },
      {
        "sha": "68de1c156eda7de10707649377f3176f3a7f28a5",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b26d9c3615d15669ae0a049c1dede39a9e59a9/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
        "patch": "@@ -33,6 +33,5 @@ void MilliSleep(int64_t n);\n  */\n std::string FormatISO8601DateTime(int64_t nTime);\n std::string FormatISO8601Date(int64_t nTime);\n-std::string FormatISO8601Time(int64_t nTime);\n \n #endif // BITCOIN_UTIL_TIME_H"
      }
    ]
  },
  {
    "sha": "a94e470921a9d373e4c6e418adf3b4e185a96b54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTRlNDcwOTIxYTlkMzczZTRjNmU0MThhZGYzYjRlMTg1YTk2YjU0",
    "commit": {
      "author": {
        "name": "Martin Erlandsson",
        "email": "martin@megabit.se",
        "date": "2019-02-06T13:48:06Z"
      },
      "committer": {
        "name": "Martin Erlandsson",
        "email": "merland@users.noreply.github.com",
        "date": "2019-02-08T08:47:50Z"
      },
      "message": "A few textual improvements",
      "tree": {
        "sha": "89119db1490eeee4e6f5d039941dc6253c5abdc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89119db1490eeee4e6f5d039941dc6253c5abdc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a94e470921a9d373e4c6e418adf3b4e185a96b54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a94e470921a9d373e4c6e418adf3b4e185a96b54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a94e470921a9d373e4c6e418adf3b4e185a96b54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a94e470921a9d373e4c6e418adf3b4e185a96b54/comments",
    "author": {
      "login": "merland",
      "id": 453092,
      "node_id": "MDQ6VXNlcjQ1MzA5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/453092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/merland",
      "html_url": "https://github.com/merland",
      "followers_url": "https://api.github.com/users/merland/followers",
      "following_url": "https://api.github.com/users/merland/following{/other_user}",
      "gists_url": "https://api.github.com/users/merland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/merland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/merland/subscriptions",
      "organizations_url": "https://api.github.com/users/merland/orgs",
      "repos_url": "https://api.github.com/users/merland/repos",
      "events_url": "https://api.github.com/users/merland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/merland/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "merland",
      "id": 453092,
      "node_id": "MDQ6VXNlcjQ1MzA5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/453092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/merland",
      "html_url": "https://github.com/merland",
      "followers_url": "https://api.github.com/users/merland/followers",
      "following_url": "https://api.github.com/users/merland/following{/other_user}",
      "gists_url": "https://api.github.com/users/merland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/merland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/merland/subscriptions",
      "organizations_url": "https://api.github.com/users/merland/orgs",
      "repos_url": "https://api.github.com/users/merland/repos",
      "events_url": "https://api.github.com/users/merland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/merland/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5029e94f855c73bad2e0ea6dc0378f33787ae131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5029e94f855c73bad2e0ea6dc0378f33787ae131"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "634aca35597ccf72580a4095b867c65ad1e67e3d",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a94e470921a9d373e4c6e418adf3b4e185a96b54/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a94e470921a9d373e4c6e418adf3b4e185a96b54/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=a94e470921a9d373e4c6e418adf3b4e185a96b54",
        "patch": "@@ -33,25 +33,25 @@ General recommendations\n \n Try not to burden translators with translating messages that are e.g. slight variations of other messages.\n In the GUI, avoid the use of text where an icon or symbol will do.\n-Make sure that placeholder texts in forms don't end up in the list of strings to be translated (use `<string notr=\"true\">`).\n+Make sure that placeholder texts in forms do not end up in the list of strings to be translated (use `<string notr=\"true\">`).\n \n ### Make translated strings understandable\n \n-Try to write translation strings in an understandable way, for both the user and the translator. Avoid overly technical or detailed messages\n+Try to write translation strings in an understandable way, for both the user and the translator. Avoid overly technical or detailed messages.\n \n ### Do not translate internal errors\n \n-Do not translate internal errors, or log messages, or messages that appear on the RPC interface. If an error is to be shown to the user,\n-use a translatable generic message, then log the detailed message to the log. E.g. \"A fatal internal error occurred, see debug.log for details\".\n+Do not translate internal errors, log messages, or messages that appear on the RPC interface. If an error is to be shown to the user,\n+use a translatable generic message, then log the detailed message to the log. E.g., \"A fatal internal error occurred, see debug.log for details\".\n This helps troubleshooting; if the error is the same for everyone, the likelihood is increased that it can be found using a search engine.\n \n ### Avoid fragments\n \n-Avoid dividing up a message into fragments. Translators see every string separately, so may misunderstand the context if the messages are not self-contained.\n+Avoid dividing up a message into fragments. Translators see every string separately, so they may misunderstand the context if the messages are not self-contained.\n \n ### Avoid HTML in translation strings\n \n-There have been difficulties with use of HTML in translation strings; translators should not be able to accidentally affect the formatting of messages.\n+There have been difficulties with the use of HTML in translation strings; translators should not be able to accidentally affect the formatting of messages.\n This may sometimes be at conflict with the recommendation in the previous section.\n \n ### Plurals\n@@ -66,7 +66,7 @@ Plurals can be complex in some languages. A quote from the gettext documentation\n     25-31 pliko'w\n     and so on\n \n-In Qt code use tr's third argument for optional plurality. For example:\n+In Qt code, use tr's third argument for optional plurality. For example:\n \n     tr(\"%n hour(s)\",\"\",secs/HOUR_IN_SECONDS);\n     tr(\"%n day(s)\",\"\",secs/DAY_IN_SECONDS);\n@@ -82,7 +82,7 @@ This adds `<numerusform>`s to the respective `.ts` file, which can be translated\n         </translation>\n     </message>\n \n-Where it is possible try to avoid embedding numbers into the flow of the string at all. e.g.\n+Where possible, try to avoid embedding numbers into the flow of the string at all. E.g.,\n \n     WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)\n "
      }
    ]
  },
  {
    "sha": "6fc656a410b6fa469be258414f1e26cd4b6025af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmM2NTZhNDEwYjZmYTQ2OWJlMjU4NDE0ZjFlMjZjZDRiNjAyNWFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-08T10:41:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-08T11:30:21Z"
      },
      "message": "Merge #14242: Avoid triggering undefined behaviour (std::memset(nullptr, 0, 0)) if an invalid string is passed to DecodeSecret(...)\n\nd855e4cac8303ad4e34ac31cfa7634286589ce99 Avoid triggering undefined behaviour (std::memset(nullptr, 0, 0)) if an invalid string is passed to DecodeSecret(...) (practicalswift)\n\nPull request description:\n\n  Avoid triggering undefined behaviour (`std::memset(nullptr, 0, 0)`) if an invalid string is passed to `DecodeSecret(...)`.\n\n  Background reading: [memcpy (and friends) with NULL pointers](https://www.imperialviolet.org/2016/06/26/nonnull.html)\n\n  Steps to reproduce:\n\n  ```\n  ./configure --with-sanitizers=undefined && make check && ./test/functional/test_runner.py\n  ```\n\nTree-SHA512: b8325ced4f724d9c03065e0747af56b1f297a90d9fb09a24d46c3231a90dce3df6299f2c41f863b5cec18eaeded7b46ee4b93d9a52adc2541eb4c44d2c0965d9",
      "tree": {
        "sha": "4813191e90ece4956a1e0c95ff459cb2cf1b142a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4813191e90ece4956a1e0c95ff459cb2cf1b142a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fc656a410b6fa469be258414f1e26cd4b6025af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxdaE0ACgkQHkrtYphs\n0l2jwQf+KdYFt6nln8iIYsSyrgZXIqD5SQBg/PpEi+I1+LpDk3xeOFHEp+jueg1/\n4FCnKITzh0LvTG5+UJ9oDBNLtGsCEfFXg9c+M8oP+uRvYLOhCmomyk1GFhjJnxZ6\nvBpoBExIhElsQQNWswc7K8JyXsHCexyD+fNYbKdnVdbZrjZ+z52TuvLeHUEQppph\ns6oPWhZZ5NxJAWAVQZEp3SsS+Ut8Oo01q36Tk8tM3dShIqo3wEI/0Mac4wEEvEQJ\nsD0SxPIvnxcqpJBNA2WtWK5oEZH8lM241mD0Ct9p00idaJLuxbBYmUAJchgi2TPb\nRB9vrSC/umbur874SNywonuotEOrdg==\n=rxQk\n-----END PGP SIGNATURE-----",
        "payload": "tree 4813191e90ece4956a1e0c95ff459cb2cf1b142a\nparent b9b26d9c3615d15669ae0a049c1dede39a9e59a9\nparent d855e4cac8303ad4e34ac31cfa7634286589ce99\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1549622499 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1549625421 +0100\n\nMerge #14242: Avoid triggering undefined behaviour (std::memset(nullptr, 0, 0)) if an invalid string is passed to DecodeSecret(...)\n\nd855e4cac8303ad4e34ac31cfa7634286589ce99 Avoid triggering undefined behaviour (std::memset(nullptr, 0, 0)) if an invalid string is passed to DecodeSecret(...) (practicalswift)\n\nPull request description:\n\n  Avoid triggering undefined behaviour (`std::memset(nullptr, 0, 0)`) if an invalid string is passed to `DecodeSecret(...)`.\n\n  Background reading: [memcpy (and friends) with NULL pointers](https://www.imperialviolet.org/2016/06/26/nonnull.html)\n\n  Steps to reproduce:\n\n  ```\n  ./configure --with-sanitizers=undefined && make check && ./test/functional/test_runner.py\n  ```\n\nTree-SHA512: b8325ced4f724d9c03065e0747af56b1f297a90d9fb09a24d46c3231a90dce3df6299f2c41f863b5cec18eaeded7b46ee4b93d9a52adc2541eb4c44d2c0965d9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc656a410b6fa469be258414f1e26cd4b6025af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc656a410b6fa469be258414f1e26cd4b6025af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc656a410b6fa469be258414f1e26cd4b6025af/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9b26d9c3615d15669ae0a049c1dede39a9e59a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9b26d9c3615d15669ae0a049c1dede39a9e59a9"
      },
      {
        "sha": "d855e4cac8303ad4e34ac31cfa7634286589ce99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d855e4cac8303ad4e34ac31cfa7634286589ce99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d855e4cac8303ad4e34ac31cfa7634286589ce99"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1d53a5e074dc896a0e7eebffe51589e13b4e972a",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc656a410b6fa469be258414f1e26cd4b6025af/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc656a410b6fa469be258414f1e26cd4b6025af/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=6fc656a410b6fa469be258414f1e26cd4b6025af",
        "patch": "@@ -142,7 +142,9 @@ CKey DecodeSecret(const std::string& str)\n             key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n         }\n     }\n-    memory_cleanse(data.data(), data.size());\n+    if (!data.empty()) {\n+        memory_cleanse(data.data(), data.size());\n+    }\n     return key;\n }\n "
      },
      {
        "sha": "d55119b2662e87b424e9b67ae5e523f5ae76e16a",
        "filename": "test/sanitizer_suppressions/ubsan",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc656a410b6fa469be258414f1e26cd4b6025af/test/sanitizer_suppressions/ubsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc656a410b6fa469be258414f1e26cd4b6025af/test/sanitizer_suppressions/ubsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/ubsan?ref=6fc656a410b6fa469be258414f1e26cd4b6025af",
        "patch": "@@ -4,7 +4,6 @@ bool:wallet/wallet.cpp\n float-divide-by-zero:policy/fees.cpp\n float-divide-by-zero:validation.cpp\n float-divide-by-zero:wallet/wallet.cpp\n-nonnull-attribute:support/cleanse.cpp\n unsigned-integer-overflow:arith_uint256.h\n unsigned-integer-overflow:basic_string.h\n unsigned-integer-overflow:bench/bench.h"
      }
    ]
  },
  {
    "sha": "fae8b8bb1a62003fedc188d22c5da650513a93f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU4YjhiYjFhNjIwMDNmZWRjMTg4ZDIyYzVkYTY1MDUxM2E5M2Y0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T13:34:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T13:33:07Z"
      },
      "message": "qa: Add tool-prefix to functional test readme",
      "tree": {
        "sha": "64091db073d5cba233ae96ad68c9915d801c57fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64091db073d5cba233ae96ad68c9915d801c57fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae8b8bb1a62003fedc188d22c5da650513a93f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcXYUTAAoJEM4rdWl+aaVIBvUMAL4mqq1BMz53i58BKxQiglFt\nETyzF/1Tc1Pu4n5EkZFbuvILYTXE8Pm52N5ltwfV7IPeh8GxxIqRv7Q0/Stz+rkI\nwnnMy65qMsDpdS8gbvIC7Qx/lPRd2ax8l+0v1afXjRh6Oxa0L6CSWMfDNWxkPO6m\nJzYM0t7HgJ9a1yo+rlgRrxQgpqAbk9xJuio5C1XSv3geMyIXb89tGj7QIuH7Sux8\nTfwwoiBW0JxmHQodcxyp3iGIXhV6QE0aRHdEbf+urzGje7IjDH1FRzJMKePIc4KK\nbfrWO0R7Vo5b5muOv4jbCyVrjzKQz971TL6KxVFeHLtTbZYdGVASoNk5JZ+TqUFt\n9pku29fS7zpfZ4tYgt3TOb12jZi7V8z9JGaMXtssvmGIiAFVftHkKq2W/UehtXjP\nM8kiiZZOa164NIX30ell66fHSVPKjlYVZR6JrYY+K0jW4M73D9mXMemsc/etbmEs\nlVksJyIkTRP/Ce6FOAnC3LB7ZKaH9+c8K8MpEuzKow==\n=ClCs\n-----END PGP SIGNATURE-----",
        "payload": "tree 64091db073d5cba233ae96ad68c9915d801c57fa\nparent faf3d2272594834bc4b7c7a127a396cd6c810cdb\nauthor MarcoFalke <falke.marco@gmail.com> 1549632899 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549632787 -0500\n\nqa: Add tool-prefix to functional test readme\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae8b8bb1a62003fedc188d22c5da650513a93f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae8b8bb1a62003fedc188d22c5da650513a93f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae8b8bb1a62003fedc188d22c5da650513a93f4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf3d2272594834bc4b7c7a127a396cd6c810cdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf3d2272594834bc4b7c7a127a396cd6c810cdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf3d2272594834bc4b7c7a127a396cd6c810cdb"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5e3009e6af9e6ed7d227dc72b4604ee5f16e5c19",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae8b8bb1a62003fedc188d22c5da650513a93f4/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae8b8bb1a62003fedc188d22c5da650513a93f4/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=fae8b8bb1a62003fedc188d22c5da650513a93f4",
        "patch": "@@ -43,6 +43,7 @@ don't have test cases for.\n     - `mining` for tests for mining features, eg `mining_prioritisetransaction.py`\n     - `p2p` for tests that explicitly test the p2p interface, eg `p2p_disconnect_ban.py`\n     - `rpc` for tests for individual RPC methods or features, eg `rpc_listtransactions.py`\n+    - `tool` for tests for tools, eg `tool_wallet.py`\n     - `wallet` for tests for wallet features, eg `wallet_keypool.py`\n - use an underscore to separate words\n     - exception: for tests for specific RPCs or command line options which don't include underscores, name the test after the exact RPC or argument name, eg `rpc_decodescript.py`, not `rpc_decode_script.py`"
      }
    ]
  },
  {
    "sha": "30495d1e756c2bb0ff8bbc72372abd1678dd1253",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDQ5NWQxZTc1NmMyYmIwZmY4YmJjNzIzNzJhYmQxNjc4ZGQxMjUz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T13:58:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T13:58:29Z"
      },
      "message": "Merge #15201: net: Add missing locking annotation for vNodes. vNodes is guarded by cs_vNodes.\n\neea02be70e Add locking annotation for vNodes. vNodes is guarded by cs_vNodes. (practicalswift)\n\nPull request description:\n\n  Add locking annotation for `vNodes`. `vNodes` is guarded by `cs_vNodes`.\n\nTree-SHA512: b1e18be22ba5b9dd153536380321b09b30a75a20575f975af9af94164f51982b32267ba0994e77c801513b59da05d923a974a9d2dfebdac48024c4bda98b53af",
      "tree": {
        "sha": "1339329d1a43d05945429693eb8db8573a719026",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1339329d1a43d05945429693eb8db8573a719026"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30495d1e756c2bb0ff8bbc72372abd1678dd1253",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcXYsGAAoJENLqSFDnUoslQ9EP/j93wG3hH62I1SVz4bVzVB3T\nq0rUWvnVuNSVNvku2eHxU05JO/ReZcsWAg6/oM5zdrQ+mGH0CciBiMJAu+NLTILy\nRf1AV+JbUH1uGNxd04mEqCx7JnQLd3/2Tn77R0jfpmH50R7DrNtcY4OMSPOmaHFm\nfaXGh4Kakx09HBtfuqhJM4/TXJwVkPdFwf9fqqPpQpc7/lJQzIwedOMWHv6Pd8Lk\noYUroV4coUiceyb6zrimawkJ22JtV/ceG5RvQAVcHQ2Ell9NtBBYPFFTzahNtm2l\no1H4wYrXjRCmr97x7MOas/oZJlwIjxjVmiCgfbiRHt8Gf+dUJzlkfVpgGzTVWJr6\nnt/RYZ4y9zbE31Eng1mRTSXV6kw0PsGPqfgieGBTnmvml8ApyLXUAfWelZzCi0zf\nDjGa1FdgL9f/uDIN4O0Qzbl9YEgW9kFODOORvR+dhe5V/a+H8sZc8hnX3XIZoTVm\nOT85SOKzp5vFJcjmRrOQPH/qxwXE7gwdkE913+NIGAgLQDnuD5mZ++99FoGBnQcY\n0O63Oa2aGH6EMTRTpwKubzjr4duOgpxpuhjmsSzY+DwV9FSqtSkWnH8HnlWJF3vI\nglefX1+gQDNIu+HAUOR78TQkV7implJHOaIbO6F3N2hpNR86zwX7YTVhEtS6ERCg\nu6gRDEe++fx1rmJkRbIl\n=3SQC\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMgmLWSpQDnTeeusNiN0e6rDXF8MHVGjaxAtr9G44LYSCP/wEH4HRYiEM0kC\n9DLl3Ucm7H0I8CDue+Rs8aE1hIQwuTUN4u1To22cymyOhGJ2IOXy9xaadQjxBFxd\niwjwCJXNjz7e+ZW9AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDjAFNoyGd+RnFpAwSVmd3uCPAgE2q48fAgZjPd\nI3PCZ+a0vecJmbSD9TVRassyv1UiRIwI8QRcXYsI8AiXQSI3Go1FLQCD3+MNLvkM\nji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 1339329d1a43d05945429693eb8db8573a719026\nparent 6fc656a410b6fa469be258414f1e26cd4b6025af\nparent eea02be70ee37b845f2719b3c08e5baf4b6f51f6\nauthor MarcoFalke <falke.marco@gmail.com> 1549634307 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549634309 -0500\n\nMerge #15201: net: Add missing locking annotation for vNodes. vNodes is guarded by cs_vNodes.\n\neea02be70e Add locking annotation for vNodes. vNodes is guarded by cs_vNodes. (practicalswift)\n\nPull request description:\n\n  Add locking annotation for `vNodes`. `vNodes` is guarded by `cs_vNodes`.\n\nTree-SHA512: b1e18be22ba5b9dd153536380321b09b30a75a20575f975af9af94164f51982b32267ba0994e77c801513b59da05d923a974a9d2dfebdac48024c4bda98b53af\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30495d1e756c2bb0ff8bbc72372abd1678dd1253",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30495d1e756c2bb0ff8bbc72372abd1678dd1253",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30495d1e756c2bb0ff8bbc72372abd1678dd1253/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fc656a410b6fa469be258414f1e26cd4b6025af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc656a410b6fa469be258414f1e26cd4b6025af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc656a410b6fa469be258414f1e26cd4b6025af"
      },
      {
        "sha": "eea02be70ee37b845f2719b3c08e5baf4b6f51f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eea02be70ee37b845f2719b3c08e5baf4b6f51f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eea02be70ee37b845f2719b3c08e5baf4b6f51f6"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f4a90e01f16b82a4e96f56f229b64da54a1c41ca",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30495d1e756c2bb0ff8bbc72372abd1678dd1253/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30495d1e756c2bb0ff8bbc72372abd1678dd1253/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=30495d1e756c2bb0ff8bbc72372abd1678dd1253",
        "patch": "@@ -174,7 +174,18 @@ class CConnman\n     CConnman(uint64_t seed0, uint64_t seed1);\n     ~CConnman();\n     bool Start(CScheduler& scheduler, const Options& options);\n-    void Stop();\n+\n+    // TODO: Remove NO_THREAD_SAFETY_ANALYSIS. Lock cs_vNodes before reading the variable vNodes.\n+    //\n+    // When removing NO_THREAD_SAFETY_ANALYSIS be aware of the following lock order requirements:\n+    // * CheckForStaleTipAndEvictPeers locks cs_main before indirectly calling GetExtraOutboundCount\n+    //   which locks cs_vNodes.\n+    // * ProcessMessage locks cs_main and g_cs_orphans before indirectly calling ForEachNode which\n+    //   locks cs_vNodes.\n+    //\n+    // Thus the implicit locking order requirement is: (1) cs_main, (2) g_cs_orphans, (3) cs_vNodes.\n+    void Stop() NO_THREAD_SAFETY_ANALYSIS;\n+\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n     bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n@@ -382,7 +393,7 @@ class CConnman\n     CCriticalSection cs_vOneShots;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     CCriticalSection cs_vAddedNodes;\n-    std::vector<CNode*> vNodes;\n+    std::vector<CNode*> vNodes GUARDED_BY(cs_vNodes);\n     std::list<CNode*> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId{0};"
      }
    ]
  },
  {
    "sha": "dfbf117bbb82c76c8cb60dba73ae7d653e3b8348",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmJmMTE3YmJiODJjNzZjOGNiNjBkYmE3M2FlN2Q2NTNlM2I4MzQ4",
    "commit": {
      "author": {
        "name": "Jordan Baczuk",
        "email": "Jordan.Baczuk@gmail.com",
        "date": "2019-02-08T14:06:44Z"
      },
      "committer": {
        "name": "Jordan Baczuk",
        "email": "Jordan.Baczuk@gmail.com",
        "date": "2019-02-08T14:06:44Z"
      },
      "message": "Move maxTxFee initialization to init.cpp",
      "tree": {
        "sha": "2c113386868e4113fbd36e9b694f34dc943abcf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c113386868e4113fbd36e9b694f34dc943abcf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348/comments",
    "author": {
      "login": "JBaczuk",
      "id": 8162417,
      "node_id": "MDQ6VXNlcjgxNjI0MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8162417?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JBaczuk",
      "html_url": "https://github.com/JBaczuk",
      "followers_url": "https://api.github.com/users/JBaczuk/followers",
      "following_url": "https://api.github.com/users/JBaczuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/JBaczuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JBaczuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JBaczuk/subscriptions",
      "organizations_url": "https://api.github.com/users/JBaczuk/orgs",
      "repos_url": "https://api.github.com/users/JBaczuk/repos",
      "events_url": "https://api.github.com/users/JBaczuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JBaczuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JBaczuk",
      "id": 8162417,
      "node_id": "MDQ6VXNlcjgxNjI0MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8162417?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JBaczuk",
      "html_url": "https://github.com/JBaczuk",
      "followers_url": "https://api.github.com/users/JBaczuk/followers",
      "following_url": "https://api.github.com/users/JBaczuk/following{/other_user}",
      "gists_url": "https://api.github.com/users/JBaczuk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JBaczuk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JBaczuk/subscriptions",
      "organizations_url": "https://api.github.com/users/JBaczuk/orgs",
      "repos_url": "https://api.github.com/users/JBaczuk/repos",
      "events_url": "https://api.github.com/users/JBaczuk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JBaczuk/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6036978e9d7fabafcd7a113a221d68bc1bd8db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a6036978e9d7fabafcd7a113a221d68bc1bd8db"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 16,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e3d5c4953877c1d1aadde0a495810f9a45b70719",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dfbf117bbb82c76c8cb60dba73ae7d653e3b8348",
        "patch": "@@ -1098,6 +1098,22 @@ bool AppInitParameterInteraction()\n         dustRelayFee = CFeeRate(n);\n     }\n \n+    // This is required by both the wallet and node\n+    if (gArgs.IsArgSet(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n+            return InitError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n+        if (nMaxFee > HIGH_MAX_TX_FEE)\n+            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+        maxTxFee = nMaxFee;\n+        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                                       gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n+        }\n+    }\n+\n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));"
      },
      {
        "sha": "20d540c8db81bf9c1c0b9fe423206b3ec82ff15f",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=dfbf117bbb82c76c8cb60dba73ae7d653e3b8348",
        "patch": "@@ -127,21 +127,6 @@ bool WalletInit::ParameterInteraction() const\n         InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n-    if (gArgs.IsArgSet(\"-maxtxfee\"))\n-    {\n-        CAmount nMaxFee = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n-            return InitError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n-        if (nMaxFee > HIGH_MAX_TX_FEE)\n-            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n-        maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n-        }\n-    }\n-\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "020695660859439c10518e6d38b308942836fa69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjA2OTU2NjA4NTk0MzljMTA1MThlNmQzOGIzMDg5NDI4MzZmYTY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T15:35:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T15:36:02Z"
      },
      "message": "Merge #15365: wallet: Add lock annotation for mapAddressBook\n\nfaa46475d7 wallet: Add lock annotation for mapAddressBook (MarcoFalke)\n\nPull request description:\n\n  This adds lock annotations for `mapAddressBook` and also moves one lock from inside `GetDestValues` to the caller to be in line with the other methods (`eraseDestData`, `addDestData`, ...)\n\nTree-SHA512: cef9397523e2f5717d4a9a6b2da1fe07042484a51b3c067ae64425768637f334350a2c3db4ab7e00af99b2a587f6b656b68ee1195f6a3db6d47298d0b2b6174a",
      "tree": {
        "sha": "8d6c92aa92eba25018c655639195f0fd48947c33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d6c92aa92eba25018c655639195f0fd48947c33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/020695660859439c10518e6d38b308942836fa69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcXaHiAAoJENLqSFDnUoslj8oP/3DlHorhPHsAqyejOivI7v9I\nG2qTu3F/V3ma44ZF8gbwMwaIofuUk4nTKk2DQpTlv4iH/UIIFyZXlHwdcbKKAlyj\n8PXQDfKNg1sPBC3gPb9FR4SUNCEhF68nQ2yeIDl4VoSopUtf4r97DqWHCu9E7Rux\npJ+Lp2gf5a0UyfRAXhXd83tHnkhkDbEcJTY5E01TN1FCKo3YiHdUO0cs9LeWrXBY\nC1hsyzrCU3371gnduQTP/jmmRUGvCuU8jurHHNhGjum6XvMvzric5VetxjMHVdVj\nHIJWDNMxSn87i2w3iKdtF2MqrKK3Fe5P4sKbmwWhaPiB/huqDcQpfbEdr8Ur1MW6\n2/pmCbBd62/USk0PQFfD9cBtMXpNuj6KWtjiMAaC/2r6Fkirgy7zjujT8495Didh\nvk08tdxVrrgofnyALIzsqT9B4uzI7axGt+D18wuuSpqVgsW5FUE/wNSJs9386JuR\n/oB0eY1/RSZrWqa/6JPUP0snZFYq5b2EpL0Xqlqcq1B0WHb6wBIO8GDUb1/TUhHH\noADdlSe7TeNTTgE74KfZl3zExdzz/ziREJBWKn4NxZjF2WAEZ1gu/URkc0Wzo6Rh\nifjoG500AjOORueNJJptynNCkPTgc15Jaf5PUkzJlLI2+4X9AYem0MvDxc3jl2wl\n2TEEknBQyyntgPIOEaVu\n=gWOf\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAsL+3llmeB838D8qT6iWA8rLzbVhWWrwxXsXe+chIE8CP/wEFoYZpwFBODo\n4Kbz5WGK5dcI8CA/KO7sASKhIE/OawteQr2S3oVgNZFcBfg5675F83tY6AjxBFxd\noeXwCN5tzR7+dnIXAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BCT4N2qaPrnZsbnNk6OPY7kCPEEXF2h5PAI\nsJZD/zKOxdsAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmfwEK5ino6JcJTQ0P+8MTYXeSMI8BAXct+xBFGPYRfsEeF8\n8gXgCPEEXF2h5fAISMN2OZUQracAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNh\nbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 8d6c92aa92eba25018c655639195f0fd48947c33\nparent 30495d1e756c2bb0ff8bbc72372abd1678dd1253\nparent faa46475d7d7dc60dcc80be34826cf98fb25dc95\nauthor MarcoFalke <falke.marco@gmail.com> 1549640106 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549640162 -0500\n\nMerge #15365: wallet: Add lock annotation for mapAddressBook\n\nfaa46475d7 wallet: Add lock annotation for mapAddressBook (MarcoFalke)\n\nPull request description:\n\n  This adds lock annotations for `mapAddressBook` and also moves one lock from inside `GetDestValues` to the caller to be in line with the other methods (`eraseDestData`, `addDestData`, ...)\n\nTree-SHA512: cef9397523e2f5717d4a9a6b2da1fe07042484a51b3c067ae64425768637f334350a2c3db4ab7e00af99b2a587f6b656b68ee1195f6a3db6d47298d0b2b6174a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/020695660859439c10518e6d38b308942836fa69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/020695660859439c10518e6d38b308942836fa69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/020695660859439c10518e6d38b308942836fa69/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30495d1e756c2bb0ff8bbc72372abd1678dd1253",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30495d1e756c2bb0ff8bbc72372abd1678dd1253",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30495d1e756c2bb0ff8bbc72372abd1678dd1253"
      },
      {
        "sha": "faa46475d7d7dc60dcc80be34826cf98fb25dc95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa46475d7d7dc60dcc80be34826cf98fb25dc95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa46475d7d7dc60dcc80be34826cf98fb25dc95"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "82dd8a094b2efe1a09a20f089fa32eb49038b9e9",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020695660859439c10518e6d38b308942836fa69/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020695660859439c10518e6d38b308942836fa69/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=020695660859439c10518e6d38b308942836fa69",
        "patch": "@@ -212,6 +212,7 @@ class WalletImpl : public Wallet\n     }\n     std::vector<std::string> getDestValues(const std::string& prefix) override\n     {\n+        LOCK(m_wallet.cs_wallet);\n         return m_wallet.GetDestValues(prefix);\n     }\n     void lockCoin(const COutPoint& output) override"
      },
      {
        "sha": "7f5e92ea9fc1bb146727279dc51e4e8e08f5c69a",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020695660859439c10518e6d38b308942836fa69/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020695660859439c10518e6d38b308942836fa69/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=020695660859439c10518e6d38b308942836fa69",
        "patch": "@@ -95,6 +95,7 @@ void TestAddAddressesToSendBook()\n     }\n \n     auto check_addbook_size = [&wallet](int expected_size) {\n+        LOCK(wallet->cs_wallet);\n         QCOMPARE(static_cast<int>(wallet->mapAddressBook.size()), expected_size);\n     };\n "
      },
      {
        "sha": "7552722a8e7fc91e9ece5e7e9fb9b08edaf220b4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020695660859439c10518e6d38b308942836fa69/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020695660859439c10518e6d38b308942836fa69/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=020695660859439c10518e6d38b308942836fa69",
        "patch": "@@ -67,7 +67,7 @@ static std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-static bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyid, std::string &strAddr, std::string &strLabel)\n+static bool GetWalletAddressesForKey(CWallet* const pwallet, const CKeyID& keyid, std::string& strAddr, std::string& strLabel) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     bool fLabelFound = false;\n     CKey key;"
      },
      {
        "sha": "b9d993dc9cfdce2dba307051fed40edfe296b101",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020695660859439c10518e6d38b308942836fa69/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020695660859439c10518e6d38b308942836fa69/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=020695660859439c10518e6d38b308942836fa69",
        "patch": "@@ -1309,7 +1309,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  filter_ismine  The \"is mine\" filter flags.\n  * @param  filter_label   Optional label string to filter incoming transactions.\n  */\n-static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label)\n+static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     CAmount nFee;\n     std::list<COutputEntry> listReceived;"
      },
      {
        "sha": "af9365337546b87be47bd12f552d71788d090930",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020695660859439c10518e6d38b308942836fa69/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020695660859439c10518e6d38b308942836fa69/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=020695660859439c10518e6d38b308942836fa69",
        "patch": "@@ -3172,7 +3172,7 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n {\n     bool fUpdated = false;\n     {\n-        LOCK(cs_wallet); // mapAddressBook\n+        LOCK(cs_wallet);\n         std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address);\n         fUpdated = mi != mapAddressBook.end();\n         mapAddressBook[address].name = strName;\n@@ -3189,7 +3189,7 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n     {\n-        LOCK(cs_wallet); // mapAddressBook\n+        LOCK(cs_wallet);\n \n         // Delete destdata tuples associated with address\n         std::string strAddress = EncodeDestination(address);\n@@ -3869,7 +3869,6 @@ bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, st\n \n std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n {\n-    LOCK(cs_wallet);\n     std::vector<std::string> values;\n     for (const auto& address : mapAddressBook) {\n         for (const auto& data : address.second.destdata) {"
      },
      {
        "sha": "9dde7e1f94824e9b46b5deafb0f8f2ebc9e82bb5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020695660859439c10518e6d38b308942836fa69/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020695660859439c10518e6d38b308942836fa69/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=020695660859439c10518e6d38b308942836fa69",
        "patch": "@@ -788,7 +788,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     int64_t nOrderPosNext GUARDED_BY(cs_wallet) = 0;\n     uint64_t nAccountingEntryNumber = 0;\n \n-    std::map<CTxDestination, CAddressBookData> mapAddressBook;\n+    std::map<CTxDestination, CAddressBookData> mapAddressBook GUARDED_BY(cs_wallet);\n \n     std::set<COutPoint> setLockedCoins GUARDED_BY(cs_wallet);\n \n@@ -865,15 +865,15 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n-    bool AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n+    bool AddDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Erases a destination data tuple in the store and on disk\n-    bool EraseDestData(const CTxDestination &dest, const std::string &key);\n+    bool EraseDestData(const CTxDestination& dest, const std::string& key) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a destination data tuple to the store, without saving it to disk\n-    void LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value);\n+    void LoadDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Look up a destination data tuple in the store, return true if found false otherwise\n-    bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n+    bool GetDestData(const CTxDestination& dest, const std::string& key, std::string* value) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Get all destination values matching a prefix.\n-    std::vector<std::string> GetDestValues(const std::string& prefix) const;\n+    std::vector<std::string> GetDestValues(const std::string& prefix) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -1041,7 +1041,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    const std::string& GetLabelName(const CScript& scriptPubKey) const;\n+    const std::string& GetLabelName(const CScript& scriptPubKey) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n "
      },
      {
        "sha": "628f3fe803476d2d5f19430fea797e787422f021",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020695660859439c10518e6d38b308942836fa69/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020695660859439c10518e6d38b308942836fa69/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=020695660859439c10518e6d38b308942836fa69",
        "patch": "@@ -94,7 +94,6 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    // lock required because of some AssertLockHeld()\n     LOCK(wallet_instance->cs_wallet);\n \n     fprintf(stdout, \"Wallet info\\n===========\\n\");"
      }
    ]
  },
  {
    "sha": "1477933f289ed1b27ded2a8fc275ee88a4787592",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDc3OTMzZjI4OWVkMWIyN2RlZDJhOGZjMjc1ZWU4OGE0Nzg3NTky",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T15:40:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T15:40:34Z"
      },
      "message": "Merge #15370: test_runner: Remove unused --force option\n\nfae8b8bb1a qa: Add tool-prefix to functional test readme (MarcoFalke)\nfaf3d22725 test_runner: Remove unused --force option (MarcoFalke)\n\nPull request description:\n\n  When someone calls the script they already have all intention to call it, no need to specify a redundant `--force`.\n\n  The functional tests are still disabled on the travis windows cross builds, where they'd run into issues when run under Wine.\n\nTree-SHA512: ada0dd9b3c0cd28c5832a12c5e04c029dc3bfe5ddf366fd0abc24fb7914d2e0f0a873fe756ade7ba780a561abe9bc731838c289accc421deda481269e08514cd",
      "tree": {
        "sha": "7d9cd88dec2527249f1e75fb042f1ee44ae8f391",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d9cd88dec2527249f1e75fb042f1ee44ae8f391"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1477933f289ed1b27ded2a8fc275ee88a4787592",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcXaLyAAoJENLqSFDnUoslKgcP/2n+J9H5qfAEnjlRcr/2dVys\noTloh0n98bTS5sKnaJT4IMjqZ0phsUci7/d4Y41OZvLkuEw0iDSkRzsR3WcFuA+w\n7p30g1BJjVjEtgpMjFmzQrlXhpCjsCpcXeWBojEn8Sb3w7nAimo98InyI+aOZ5JK\nt+Dx9JKB1SZuhiLlFikaAHHyQ1EHa/B30URXVGQPOQFZmvJcOFvaKefB/nh94+oO\n+RUBT2fOqNaOSXgarmyO93UI+RTjVaFXM/YtR2w2Vyrs6Lv6qe+JPNtPrMSYxzfu\nrgUZGQGLspu5ZwGb96dDeDkzptBRePPoSKFLyn0hRNIbMY4njB5MYUN/hUpChCCX\nljEOQGmxQRzXANu6UoJzua21HUZKlG5nMUtogosO9nf6Lw/3/9OuI8kTiFvwUYnt\nCjWa+vEGkPvET2grIXTRJaXyf6MaoJb4OsljfXZfDAdinsUC/A/6Bmo+HX1dBkEW\nQxnXt3tnWsZ+uJ4cAaS0cVmpXmCJJvNTxsfE9+ClUdRTqHbDQjFn/09KPBO8IH3m\noyv2s/0B+QTBcZXnsAR/Vn3E/kvzFluMzli1viwwrJeYLRplYJPPrRYXyOxnywuH\n/GPXA/UHhlBgyeRgjRCXbnDvosz7uTUF86fg08a9QSWqlU8RaPnr2bBNIGgRdvao\nL1VvQ19PCCG6aBcDanfA\n=RLBj\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDH1ONywu7vlKvjfAFrA99cUUmyvKLSvOMiPhDClws3VCP/wECbsgzF5eO4m\n/xyz6S8AbFEI8CDNAhx8fhagAE8QpMmOFjqtDMXrqNFr1LiXxF0FtWjH3QjxBFxd\novXwCMd2phJpabCYAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQZPNGp+mISkAJOeBgsLUgXwjwEKZMmtDaIi6A\nxh42tji4EVgI8QRcXaL18AhG1FKkjv0vugCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQrWq2soWFNK600larexp+Mgjw\nICtP4eMcpIwQRyczIW2eMehAOmYjg8akH/g+QsDkPUL5CPEEXF2i9fAIAB5UFol+\n/8QAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1l\nc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 7d9cd88dec2527249f1e75fb042f1ee44ae8f391\nparent 020695660859439c10518e6d38b308942836fa69\nparent fae8b8bb1a62003fedc188d22c5da650513a93f4\nauthor MarcoFalke <falke.marco@gmail.com> 1549640413 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549640434 -0500\n\nMerge #15370: test_runner: Remove unused --force option\n\nfae8b8bb1a qa: Add tool-prefix to functional test readme (MarcoFalke)\nfaf3d22725 test_runner: Remove unused --force option (MarcoFalke)\n\nPull request description:\n\n  When someone calls the script they already have all intention to call it, no need to specify a redundant `--force`.\n\n  The functional tests are still disabled on the travis windows cross builds, where they'd run into issues when run under Wine.\n\nTree-SHA512: ada0dd9b3c0cd28c5832a12c5e04c029dc3bfe5ddf366fd0abc24fb7914d2e0f0a873fe756ade7ba780a561abe9bc731838c289accc421deda481269e08514cd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1477933f289ed1b27ded2a8fc275ee88a4787592",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1477933f289ed1b27ded2a8fc275ee88a4787592",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1477933f289ed1b27ded2a8fc275ee88a4787592/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "020695660859439c10518e6d38b308942836fa69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/020695660859439c10518e6d38b308942836fa69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/020695660859439c10518e6d38b308942836fa69"
      },
      {
        "sha": "fae8b8bb1a62003fedc188d22c5da650513a93f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae8b8bb1a62003fedc188d22c5da650513a93f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae8b8bb1a62003fedc188d22c5da650513a93f4"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 6,
      "deletions": 12
    },
    "files": [
      {
        "sha": "08132edb7d1a4a63a6908084e334e8fb1ec840e9",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1477933f289ed1b27ded2a8fc275ee88a4787592/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1477933f289ed1b27ded2a8fc275ee88a4787592/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=1477933f289ed1b27ded2a8fc275ee88a4787592",
        "patch": "@@ -54,5 +54,5 @@ test_script:\n - cmd: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n - ps:  python test\\util\\bitcoin-util-test.py\n - cmd: python test\\util\\rpcauth-test.py\n-- cmd: python test\\functional\\test_runner.py --ci --force --quiet --combinedlogslen=4000 --failfast\n+- cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast\n deploy: off"
      },
      {
        "sha": "d5086b084a0fad76c4379f611aa359d4a4e7f38f",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1477933f289ed1b27ded2a8fc275ee88a4787592/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1477933f289ed1b27ded2a8fc275ee88a4787592/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=1477933f289ed1b27ded2a8fc275ee88a4787592",
        "patch": "@@ -66,19 +66,21 @@ jobs:\n         BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi\"\n \n     - stage: test\n-      name: 'Win32  [GOAL: deploy]  [no gui tests]'\n+      name: 'Win32  [GOAL: deploy]  [no gui or functional tests]'\n       env: >-\n         HOST=i686-w64-mingw32\n         DPKG_ADD_ARCH=\"i386\"\n         PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine-binfmt wine32\"\n+        RUN_FUNCTIONAL_TESTS=false\n         GOAL=\"deploy\"\n         BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n \n     - stage: test\n-      name: 'Win64  [GOAL: deploy]  [no gui tests]'\n+      name: 'Win64  [GOAL: deploy]  [no gui or functional tests]'\n       env: >-\n         HOST=x86_64-w64-mingw32\n         PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64\"\n+        RUN_FUNCTIONAL_TESTS=false\n         GOAL=\"deploy\"\n         BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n "
      },
      {
        "sha": "5e3009e6af9e6ed7d227dc72b4604ee5f16e5c19",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1477933f289ed1b27ded2a8fc275ee88a4787592/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1477933f289ed1b27ded2a8fc275ee88a4787592/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=1477933f289ed1b27ded2a8fc275ee88a4787592",
        "patch": "@@ -43,6 +43,7 @@ don't have test cases for.\n     - `mining` for tests for mining features, eg `mining_prioritisetransaction.py`\n     - `p2p` for tests that explicitly test the p2p interface, eg `p2p_disconnect_ban.py`\n     - `rpc` for tests for individual RPC methods or features, eg `rpc_listtransactions.py`\n+    - `tool` for tests for tools, eg `tool_wallet.py`\n     - `wallet` for tests for wallet features, eg `wallet_keypool.py`\n - use an underscore to separate words\n     - exception: for tests for specific RPCs or command line options which don't include underscores, name the test after the exact RPC or argument name, eg `rpc_decodescript.py`, not `rpc_decode_script.py`"
      },
      {
        "sha": "138bcc13a0b13456ca7db10c35d34e3db948e73a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1477933f289ed1b27ded2a8fc275ee88a4787592/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1477933f289ed1b27ded2a8fc275ee88a4787592/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=1477933f289ed1b27ded2a8fc275ee88a4787592",
        "patch": "@@ -7,8 +7,6 @@\n This module calls down into individual test cases via subprocess. It will\n forward all unrecognized arguments onto the individual test scripts.\n \n-Functional tests are disabled on Windows by default. Use --force to run them anyway.\n-\n For a description of arguments recognized by test scripts, see\n `test/functional/test_framework/test_framework.py:BitcoinTestFramework.main`.\n \n@@ -226,7 +224,6 @@ def main():\n     parser.add_argument('--ci', action='store_true', help='Run checks and code that are usually only enabled in a continuous integration environment')\n     parser.add_argument('--exclude', '-x', help='specify a comma-separated-list of scripts to exclude.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n-    parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n     parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n     parser.add_argument('--keepcache', '-k', action='store_true', help='the default behavior is to flush the cache directory on startup. --keepcache retains the cache from the previous testrun.')\n@@ -263,12 +260,6 @@ def main():\n \n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n \n-    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n-        # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n-        # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-        print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n-        sys.exit(0)\n-\n     if not enable_bitcoind:\n         print(\"No functional tests to run.\")\n         print(\"Rerun ./configure with --with-daemon and then make\")"
      }
    ]
  },
  {
    "sha": "d5dbb45bdf7d62257cf73c452f7d43727e3ae72b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWRiYjQ1YmRmN2Q2MjI1N2NmNzNjNDUyZjdkNDM3MjdlM2FlNzJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T17:45:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T17:46:01Z"
      },
      "message": "Merge #15314: [Doc] update release notes for changes up to cb35f1d\n\n5d35d4384a Update release notes through to cb35f1d3 (David A. Harding)\n9ad5ca17d9 Release notes: integrate detached & rm backports (David A. Harding)\n\nPull request description:\n\n  Monthly release notes update.  ~~In addition to a few new notes, this removes from the master branch two notes about things that have been backported to the 0.17 branch (though not released yet): `unloadwallet` RPC now being blocking (0.17 has a detached release note for that) and the PSBT doc (0.17 does not have a release note for that; I'll open a PR).~~\n\nTree-SHA512: 569b651f2ec4d6d22c2410897f6980a0db2d9aad479730537f0c77cc8d905599a4e6d1db716720fec55a4ee77dd0bd5de9d02a0f636b63cd68ece61d24547af0",
      "tree": {
        "sha": "012a4820c4e47d5eacb9f91cab2c8d685a6d64b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/012a4820c4e47d5eacb9f91cab2c8d685a6d64b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5dbb45bdf7d62257cf73c452f7d43727e3ae72b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcXcBZAAoJENLqSFDnUoslzIUQAJwPkk3DbeM3ikOKq22TUKUh\nYnxuCFbSp+E8TC78U125GFCKBJmbJ23jqschW374HqTsFGPLA3uUFoj0hEFxhCvQ\ncXjltOPe4ciAov1P33U0HOdFwd7sQAZCCi9/pUc4g9ShuIUFyEW1oeo4ogKUww65\nlir6r0Pforreb3CxAEKIaXJmaTluisAWXudBuGOIWFXQ4kP8Yy940WxqoTXDw6Ac\nSnWpio8qxj8KQhZlUIl4pQiXIwbqLsGQxeDWr03JfcK6QdwtwWP/ehI+1qOaElbN\n4nsVqsesO+q1dpvf08YgavTORcV2Br6u6oD54vvqKZtn2x7J5W/vljKhxxMAh1qF\nRDqgmzh6hTse90GOy6rsPP5qnld+ITf4PIsjM5zsFoSXwMHJqygD569XNK14zodI\nkNC/yZnFTm6QwfNxpI/rLdtP3JaEo2OnIcgHy4o3AzfRvoTyR0YgvWAqJA95IOOP\njy1u3R4CXHlHvIu6LqNq7/tbiTz3tt/cWeLgz8cYWvjJ90GjtA64TYDX0HzoDZYt\nxLFprKeey5iNtd2SbpA0Eg2LsrT282tv/U6/pSy6+sORR4ddBdesLc4qOJd7ql9i\nabSkb+4Ejdoo6eSWaPFfXUBdT/qGT6WE6TFYeznms9klfw5/Qxgz0x987+dqMNeV\nK9a6qjILpNOjO8v4PpvV\n=5R4l\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINobIgk4A4iujOhNFWYRVfkkMk7V79rDj1eevOMEEfqqCP/wEE4wYzf1Rj/F\n6n3J5huVFhoI8QRcXcBb8Aj286FAIx28FwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wENvawx8tz4PTLS+fqvBz\nbHQI8BA/LVLR+oT8hCkP0QhV3aHbCPEEXF3AXPAI/l8mkqOpDDAAg9/jDS75DI4p\nKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wEPBmaUOv\nI0B3S4VuOPu0/z0I8QRcXcBc8AgKiYByrANUEgCD3+MNLvkMji4taHR0cHM6Ly9h\nbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 012a4820c4e47d5eacb9f91cab2c8d685a6d64b8\nparent 1477933f289ed1b27ded2a8fc275ee88a4787592\nparent 5d35d4384ac9d18dd03f127d45f83635d76a57d0\nauthor MarcoFalke <falke.marco@gmail.com> 1549647956 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549647961 -0500\n\nMerge #15314: [Doc] update release notes for changes up to cb35f1d\n\n5d35d4384a Update release notes through to cb35f1d3 (David A. Harding)\n9ad5ca17d9 Release notes: integrate detached & rm backports (David A. Harding)\n\nPull request description:\n\n  Monthly release notes update.  ~~In addition to a few new notes, this removes from the master branch two notes about things that have been backported to the 0.17 branch (though not released yet): `unloadwallet` RPC now being blocking (0.17 has a detached release note for that) and the PSBT doc (0.17 does not have a release note for that; I'll open a PR).~~\n\nTree-SHA512: 569b651f2ec4d6d22c2410897f6980a0db2d9aad479730537f0c77cc8d905599a4e6d1db716720fec55a4ee77dd0bd5de9d02a0f636b63cd68ece61d24547af0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5dbb45bdf7d62257cf73c452f7d43727e3ae72b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5dbb45bdf7d62257cf73c452f7d43727e3ae72b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5dbb45bdf7d62257cf73c452f7d43727e3ae72b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1477933f289ed1b27ded2a8fc275ee88a4787592",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1477933f289ed1b27ded2a8fc275ee88a4787592",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1477933f289ed1b27ded2a8fc275ee88a4787592"
      },
      {
        "sha": "5d35d4384ac9d18dd03f127d45f83635d76a57d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d35d4384ac9d18dd03f127d45f83635d76a57d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d35d4384ac9d18dd03f127d45f83635d76a57d0"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 58,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c3820d0368525b5adb6e3a0f0be1cb68289cd57c",
        "filename": "doc/release-notes-14941.md",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1477933f289ed1b27ded2a8fc275ee88a4787592/doc/release-notes-14941.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1477933f289ed1b27ded2a8fc275ee88a4787592/doc/release-notes-14941.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14941.md?ref=1477933f289ed1b27ded2a8fc275ee88a4787592",
        "patch": "@@ -1,5 +0,0 @@\n-Miscellaneous RPC changes\n-------------\n-\n-- The `unloadwallet` RPC is now synchronous, meaning that it blocks until the\n-  wallet is fully unloaded."
      },
      {
        "sha": "3f0bf8aacde2eb476f1ae52cbdc85cb2f31636b4",
        "filename": "doc/release-notes-14982.md",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1477933f289ed1b27ded2a8fc275ee88a4787592/doc/release-notes-14982.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1477933f289ed1b27ded2a8fc275ee88a4787592/doc/release-notes-14982.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14982.md?ref=1477933f289ed1b27ded2a8fc275ee88a4787592",
        "patch": "@@ -1,5 +0,0 @@\n-New RPCs\n---------\n-\n-- The RPC `getrpcinfo` returns runtime details of the RPC server. At the moment\n-  it returns the active commands and the corresponding execution time."
      },
      {
        "sha": "113b8c07d0d82a0a77f3e4257c6d691323458e27",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 58,
        "deletions": 3,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5dbb45bdf7d62257cf73c452f7d43727e3ae72b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5dbb45bdf7d62257cf73c452f7d43727e3ae72b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d5dbb45bdf7d62257cf73c452f7d43727e3ae72b",
        "patch": "@@ -116,7 +116,8 @@ Configuration option changes\n   defaults to being off, so that changes in policy and disconnect/ban behavior\n   will not cause a node that is whitelisting another to be dropped by peers.\n   Users can still explicitly enable this behavior with the command line option\n-  (and may want to consider letting the Bitcoin Core project know about their\n+  (and may want to consider [contacting](https://bitcoincore.org/en/contact/)\n+  the Bitcoin Core project to let us know about their\n   use-case, as this feature could be deprecated in the future).\n \n Documentation\n@@ -130,6 +131,10 @@ Documentation\n   to the [REST interface documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md)\n   indicating that the same rules apply.\n \n+- Further information is added to the [JSON-RPC\n+  documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md)\n+  about how to secure this interface.\n+\n - A new [document](https://github.com/bitcoin/bitcoin/blob/master/doc/bitcoin-conf.md)\n   about the `bitcoin.conf` file describes how to use it to configure\n   Bitcoin Core.\n@@ -190,14 +195,18 @@ Deprecated or removed RPCs\n New RPCs\n --------\n \n-- A new `getnodeaddresses` RPC returns peer addresses known to this\n+- The `getnodeaddresses` RPC returns peer addresses known to this\n   node. It may be used to find nodes to connect to without using a DNS\n   seeder.\n \n-- A new `listwalletdir` RPC returns a list of wallets in the wallet\n+- The `listwalletdir` RPC returns a list of wallets in the wallet\n   directory (either the default wallet directory or the directory\n   configured by the `-walletdir` parameter).\n \n+- The `getrpcinfo` returns runtime details of the RPC server. At the\n+  moment, it returns an array of the currently active commands and how\n+  long they've been running.\n+\n Updated RPCs\n ------------\n \n@@ -260,6 +269,16 @@ in the Low-level Changes section below.\n   2. If no blockhash is provided, check the mempool. 3. If no blockhash\n   is provided but txindex is enabled, also check txindex.\n \n+- The `unloadwallet` RPC is now synchronous, meaning it will not return\n+  until the wallet is fully unloaded.\n+\n+REST changes\n+------------\n+\n+- A new `/rest/blockhashbyheight/` endpoint is added for fetching the\n+  hash of the block in the current best blockchain based on its height\n+  (how many blocks it is after the Genesis Block).\n+\n Graphical User Interface (GUI)\n ------------------------------\n \n@@ -282,6 +301,16 @@ Graphical User Interface (GUI)\n   CFLAGS=\"-mmacosx-version-min=10.11\" for setting the deployment\n   sdk version)\n \n+Tools\n+----\n+\n+- A new `bitcoin-wallet` tool is now distributed alongside Bitcoin\n+  Core's other executables.  Without needing to use any RPCs, this tool\n+  can currently create a new wallet file or display some basic\n+  information about an existing wallet, such as whether the wallet is\n+  encrypted, whether it uses an HD seed, how many transactions it\n+  contains, and how many address book entries it has.\n+\n Low-level changes\n =================\n \n@@ -306,6 +335,32 @@ Configuration\n   deterministic wallets. This release makes specifying `-usehd` an\n   invalid configuration option.\n \n+Network\n+-------\n+\n+- This release allows peers that your node automatically disconnected\n+  for misbehavior (e.g. sending invalid data) to reconnect to your node\n+  if you have unused incoming connection slots.  If your slots fill up,\n+  a misbehaving node will be disconnected to make room for nodes without\n+  a history of problems (unless the misbehaving node helps your node in\n+  some other way, such as by connecting to a part of the Internet from\n+  which you don't have many other peers).  Previously, Bitcoin Core\n+  banned the IP addresses of misbehaving peers for a period of time\n+  (default of 1 day); this was easily circumvented by attackers with\n+  multiple IP addresses.  If you manually ban a peer, such as by using\n+  the `setban` RPC, all connections from that peer will still be\n+  rejected.\n+\n+Security\n+--------\n+\n+- This release changes the Random Number Generator (RNG) used from\n+  OpenSSL to Bitcoin Core's own implementation, although entropy\n+  gathered by Bitcoin Core is fed out to OpenSSL and then read back in\n+  when the program needs strong randomness.  This moves Bitcoin Core a\n+  little closer to no longer needing to depend on OpenSSL, a dependency\n+  that has caused security issues in the past.\n+\n Changes for particular platforms\n --------------------------------\n "
      }
    ]
  },
  {
    "sha": "2945492424934fa360f86b116184ee8e34f19d0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTQ1NDkyNDI0OTM0ZmEzNjBmODZiMTE2MTg0ZWU4ZTM0ZjE5ZDBh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T19:41:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-08T19:41:25Z"
      },
      "message": "Merge #15357: rpc: Don't ignore `-maxtxfee` when wallet is disabled\n\ndfbf117bbb Move maxTxFee initialization to init.cpp (Jordan Baczuk)\n\nPull request description:\n\n  Resolves #15355\n\nTree-SHA512: 6eafacc6a3b0589fb645b0080fd3c01598566df1bd7ee7929284853866a23493960fbd4d6f9c3417e192f8a21706d9f593197734f6189e046e4747991305a0b8",
      "tree": {
        "sha": "a0d8a0e1b329d4a6c3323db5cd91097abb223b94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0d8a0e1b329d4a6c3323db5cd91097abb223b94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2945492424934fa360f86b116184ee8e34f19d0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcXdtmAAoJENLqSFDnUosl26oP/0eFx9mzVCFd/49X7WHL5UP2\nOKUAcXcrVmY3wBd7ZtrZ2Be/FufidqATbj0qpqN42MEq8kLoVqHaKVVyV7gwiury\nVDfyFLgP3lhHjGmkdnVPD5B9p38OAGerkJwRHTvz+tAoMwRGiFrCc6olli+wtfeC\njAWz6UsOzD43IBgaRYFZuVmaBH3fapyPZGOwLsK3gfkAboMQ3uFXZmZw2O5/3K9r\nmhYo1xLrS+diWwC3YwA5uTuidCkkD/heewoQU7KGcbM4Gq5Hrmn+NMdtqO7H8Z5+\nLVUCtqAWolQN/vWW6VhfhcfJBWF+pqFIpphQqogfb4PGLsAR3OdsqfPkW8OxKe5W\nMunjjOaJFNKyR1RHU0aBiOgJCa8d3Tt+dYKHy+UcplGeRpFKf28n+sr1fbipXhOw\nl23DUfBmmG+GRg1SVu6weyxsJPBvdE9jonyU7brmwZDepeC2dAWD32b5wP66tFAz\nyPjw+4+Ynu3FfZkba5xbz8dvwS1Ablm2VwqyaM3c1LWIgTF0/uPiCt3RjvrIcJol\n8PzQGz5jQrR5TD8vQcxrk0hjLBIMG45Xi5GUovDTDBInHt7xBqHOnA+zm76REgzd\nN7Qniu/7sFkwFCY7I7QUb2iWnOcJvGajJ+69AfihnLBCli0DKMXaYvKdDvHgb5EK\nS8NoVheuSTGS63zn3hv8\n=FMM0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDXjYcsRU+IfXoPCV/PAKHY378GmjawMunB8gUj8ALzZCP/wEDOFTKC7GiJi\nBbhYFb5TgEoI8QRcXdto8AgWpm/e5AqNxgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEHwt1q8X054eKGadHdg8\nPJEI8QRcXdto8AjozEXxFfzm1gCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQ7bhToN9eTTR31XLLYjGXnwjxBFxd22jwCCWRCViz\nKRQ1AIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a0d8a0e1b329d4a6c3323db5cd91097abb223b94\nparent d5dbb45bdf7d62257cf73c452f7d43727e3ae72b\nparent dfbf117bbb82c76c8cb60dba73ae7d653e3b8348\nauthor MarcoFalke <falke.marco@gmail.com> 1549654879 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549654885 -0500\n\nMerge #15357: rpc: Don't ignore `-maxtxfee` when wallet is disabled\n\ndfbf117bbb Move maxTxFee initialization to init.cpp (Jordan Baczuk)\n\nPull request description:\n\n  Resolves #15355\n\nTree-SHA512: 6eafacc6a3b0589fb645b0080fd3c01598566df1bd7ee7929284853866a23493960fbd4d6f9c3417e192f8a21706d9f593197734f6189e046e4747991305a0b8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2945492424934fa360f86b116184ee8e34f19d0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2945492424934fa360f86b116184ee8e34f19d0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2945492424934fa360f86b116184ee8e34f19d0a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5dbb45bdf7d62257cf73c452f7d43727e3ae72b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5dbb45bdf7d62257cf73c452f7d43727e3ae72b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5dbb45bdf7d62257cf73c452f7d43727e3ae72b"
      },
      {
        "sha": "dfbf117bbb82c76c8cb60dba73ae7d653e3b8348",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfbf117bbb82c76c8cb60dba73ae7d653e3b8348"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 16,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e3d5c4953877c1d1aadde0a495810f9a45b70719",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2945492424934fa360f86b116184ee8e34f19d0a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2945492424934fa360f86b116184ee8e34f19d0a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2945492424934fa360f86b116184ee8e34f19d0a",
        "patch": "@@ -1098,6 +1098,22 @@ bool AppInitParameterInteraction()\n         dustRelayFee = CFeeRate(n);\n     }\n \n+    // This is required by both the wallet and node\n+    if (gArgs.IsArgSet(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n+            return InitError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n+        if (nMaxFee > HIGH_MAX_TX_FEE)\n+            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+        maxTxFee = nMaxFee;\n+        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                                       gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n+        }\n+    }\n+\n     fRequireStandard = !gArgs.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));"
      },
      {
        "sha": "20d540c8db81bf9c1c0b9fe423206b3ec82ff15f",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2945492424934fa360f86b116184ee8e34f19d0a/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2945492424934fa360f86b116184ee8e34f19d0a/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=2945492424934fa360f86b116184ee8e34f19d0a",
        "patch": "@@ -127,21 +127,6 @@ bool WalletInit::ParameterInteraction() const\n         InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n-    if (gArgs.IsArgSet(\"-maxtxfee\"))\n-    {\n-        CAmount nMaxFee = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n-            return InitError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n-        if (nMaxFee > HIGH_MAX_TX_FEE)\n-            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n-        maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n-        }\n-    }\n-\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "50e647210d513dab8f40ded61fe439ecaa9a67c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGU2NDcyMTBkNTEzZGFiOGY0MGRlZDYxZmU0MzllY2FhOWE2N2Mz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-08T20:29:45Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-08T20:29:45Z"
      },
      "message": "Move ParseConfirmTarget from rpc/mining to rpc/util\n\nUtil is a better home since it's called both by wallet and mining code.\n\nSuggested https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254449444",
      "tree": {
        "sha": "35ff7860a0fc640c6ead14dcb1aca9d05c9da556",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35ff7860a0fc640c6ead14dcb1aca9d05c9da556"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50e647210d513dab8f40ded61fe439ecaa9a67c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50e647210d513dab8f40ded61fe439ecaa9a67c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50e647210d513dab8f40ded61fe439ecaa9a67c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50e647210d513dab8f40ded61fe439ecaa9a67c3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2945492424934fa360f86b116184ee8e34f19d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2945492424934fa360f86b116184ee8e34f19d0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2945492424934fa360f86b116184ee8e34f19d0a"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 15,
      "deletions": 13
    },
    "files": [
      {
        "sha": "35f55b01418e89d565aebceaa702badf09a32ab9",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50e647210d513dab8f40ded61fe439ecaa9a67c3/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50e647210d513dab8f40ded61fe439ecaa9a67c3/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=50e647210d513dab8f40ded61fe439ecaa9a67c3",
        "patch": "@@ -31,16 +31,6 @@\n #include <memory>\n #include <stdint.h>\n \n-unsigned int ParseConfirmTarget(const UniValue& value)\n-{\n-    int target = value.get_int();\n-    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n-    if (target < 1 || (unsigned int)target > max_target) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n-    }\n-    return (unsigned int)target;\n-}\n-\n /**\n  * Return average network hashes per second based on the last 'lookup' blocks,\n  * or from the last difficulty change if 'lookup' is nonpositive."
      },
      {
        "sha": "be9a9733159171cdf6019cfae6040b88fcc2c864",
        "filename": "src/rpc/mining.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50e647210d513dab8f40ded61fe439ecaa9a67c3/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50e647210d513dab8f40ded61fe439ecaa9a67c3/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=50e647210d513dab8f40ded61fe439ecaa9a67c3",
        "patch": "@@ -12,7 +12,4 @@\n /** Generate blocks (mine) */\n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript);\n \n-/** Check bounds on a command line confirm target */\n-unsigned int ParseConfirmTarget(const UniValue& value);\n-\n #endif"
      },
      {
        "sha": "aa5076cd8e77ceec8fc4badb6e099d1bccf322e7",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50e647210d513dab8f40ded61fe439ecaa9a67c3/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50e647210d513dab8f40ded61fe439ecaa9a67c3/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=50e647210d513dab8f40ded61fe439ecaa9a67c3",
        "patch": "@@ -4,10 +4,12 @@\n \n #include <key_io.h>\n #include <keystore.h>\n+#include <policy/fees.h>\n #include <rpc/protocol.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n+#include <validation.h>\n \n InitInterfaces* g_rpc_interfaces = nullptr;\n \n@@ -129,6 +131,16 @@ UniValue DescribeAddress(const CTxDestination& dest)\n     return boost::apply_visitor(DescribeAddressVisitor(), dest);\n }\n \n+unsigned int ParseConfirmTarget(const UniValue& value)\n+{\n+    int target = value.get_int();\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    if (target < 1 || (unsigned int)target > max_target) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n+    }\n+    return (unsigned int)target;\n+}\n+\n struct Section {\n     Section(const std::string& left, const std::string& right)\n         : m_left{left}, m_right{right} {}"
      },
      {
        "sha": "d34c9cfdbbbad8acc62e6bbe25ff3728d2f199cb",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50e647210d513dab8f40ded61fe439ecaa9a67c3/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50e647210d513dab8f40ded61fe439ecaa9a67c3/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=50e647210d513dab8f40ded61fe439ecaa9a67c3",
        "patch": "@@ -28,6 +28,9 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n UniValue DescribeAddress(const CTxDestination& dest);\n \n+//! Parse a confirm target option and raise an RPC error if it is invalid.\n+unsigned int ParseConfirmTarget(const UniValue& value);\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,"
      }
    ]
  },
  {
    "sha": "7687f7873b75c3cbdfa15ab570211dc39d24ab80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Njg3Zjc4NzNiNzVjM2NiZGZhMTVhYjU3MDIxMWRjMzlkMjRhYjgw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-07T02:26:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-10T17:24:53Z"
      },
      "message": "[wallet] Support creating a blank wallet\n\nA blank wallet is a wallet that has no keys, script or watch only things.\nA new wallet flag indicating that it is blank will be set when the wallet\nis blank. Once it is no longer blank (a seed has been generated, keys or\nscripts imported, etc), the flag will be unset.",
      "tree": {
        "sha": "2bbbc90f6c961ae1e6005be6584c63d94d721653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bbbc90f6c961ae1e6005be6584c63d94d721653"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7687f7873b75c3cbdfa15ab570211dc39d24ab80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7687f7873b75c3cbdfa15ab570211dc39d24ab80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7687f7873b75c3cbdfa15ab570211dc39d24ab80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7687f7873b75c3cbdfa15ab570211dc39d24ab80/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c99bb00470057f573f1d76b76e744a6ccd65b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c99bb00470057f573f1d76b76e744a6ccd65b08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c99bb00470057f573f1d76b76e744a6ccd65b08"
      }
    ],
    "stats": {
      "total": 292,
      "additions": 221,
      "deletions": 71
    },
    "files": [
      {
        "sha": "3be84db3e9b88cf82ab9c30805d0c1a4b2c8ffd6",
        "filename": "doc/release-notes-15226.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/doc/release-notes-15226.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/doc/release-notes-15226.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15226.md?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -0,0 +1,8 @@\n+Miscellaneous RPC changes\n+------------\n+\n+- The RPC `createwallet` now has an optional `blank` argument that can be used to create a blank wallet.\n+Blank wallets do not have any keys or HD seed.\n+They cannot be opened in software older than 0.18.\n+Once a blank wallet has a HD seed set (by using `sethdseed`) or private keys, scripts, addresses, and other watch only things have been imported, the wallet is no longer blank and can be opened in 0.17.x.\n+Encrypting a blank wallet will also set a HD seed for it."
      },
      {
        "sha": "339c5f248723204aa8bdd4e2542c3b8c168b1f96",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -463,6 +463,7 @@ class WalletImpl : public Wallet\n     }\n     unsigned int getConfirmTarget() override { return m_wallet.m_confirm_target; }\n     bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n+    bool canGetAddresses() override { return m_wallet.CanGetAddresses(); }\n     bool IsWalletFlagSet(uint64_t flag) override { return m_wallet.IsWalletFlagSet(flag); }\n     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }"
      },
      {
        "sha": "a86212356cbbf81574aabfe10a617633a24dec6e",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -235,6 +235,9 @@ class Wallet\n     // Return whether HD enabled.\n     virtual bool hdEnabled() = 0;\n \n+    // Return whether the wallet is blank.\n+    virtual bool canGetAddresses() = 0;\n+\n     // check if a certain wallet flag is set.\n     virtual bool IsWalletFlagSet(uint64_t flag) = 0;\n "
      },
      {
        "sha": "f4f3be8f435c5222ddbcc5c17e4b9b5b93b4f7cb",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -580,12 +580,7 @@ bool WalletModel::privateKeysDisabled() const\n \n bool WalletModel::canGetAddresses() const\n {\n-    // The wallet can provide a fresh address if:\n-    // * hdEnabled(): an HD seed is present; or\n-    // * it is a legacy wallet, because:\n-    //     * !hdEnabled(): an HD seed is not present; and\n-    //     * !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS): private keys have not been disabled (which results in hdEnabled() == true)\n-    return m_wallet->hdEnabled() || (!m_wallet->hdEnabled() && !m_wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    return m_wallet->canGetAddresses();\n }\n \n QString WalletModel::getWalletName() const"
      },
      {
        "sha": "7115ce70d1967f3511256c7d15a8df4a7c1cebb3",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -161,6 +161,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"rescanblockchain\", 0, \"start_height\"},\n     { \"rescanblockchain\", 1, \"stop_height\"},\n     { \"createwallet\", 1, \"disable_private_keys\"},\n+    { \"createwallet\", 2, \"blank\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"stop\", 0, \"wait\" },\n };"
      },
      {
        "sha": "a255177e360f45b3cb858c0ca0436fc62909e85b",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -182,7 +182,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no\n         if (!SetCrypted())\n             return false;\n \n-        bool keyPass = false;\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n         bool keyFail = false;\n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n         for (; mi != mapCryptedKeys.end(); ++mi)"
      },
      {
        "sha": "674c10879f5fe3c988ac5bb62db5578adb00124a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -170,12 +170,18 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    // Belt and suspenders check for disabled private keys\n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n \n     LOCK(pwallet->cs_wallet);\n \n+    if (!pwallet->CanGetAddresses()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n+    }\n+\n+\n     // Parse the label first so we don't generate a key if there's an error\n     std::string label;\n     if (!request.params[0].isNull())\n@@ -231,12 +237,17 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    // Belt and suspenders check for disabled private keys\n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n \n     LOCK(pwallet->cs_wallet);\n \n+    if (!pwallet->CanGetAddresses(true)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n+    }\n+\n     if (!pwallet->IsLocked()) {\n         pwallet->TopUpKeyPool();\n     }\n@@ -2578,13 +2589,14 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue createwallet(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n         throw std::runtime_error(\n             RPCHelpMan{\"createwallet\",\n                 \"\\nCreates and loads a new wallet.\\n\",\n                 {\n                     {\"wallet_name\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n                     {\"disable_private_keys\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n+                    {\"blank\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -2601,9 +2613,13 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     std::string error;\n     std::string warning;\n \n-    bool disable_privatekeys = false;\n-    if (!request.params[1].isNull()) {\n-        disable_privatekeys = request.params[1].get_bool();\n+    uint64_t flags = 0;\n+    if (!request.params[1].isNull() && request.params[1].get_bool()) {\n+        flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+    }\n+\n+    if (!request.params[2].isNull() && request.params[2].get_bool()) {\n+        flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n \n     WalletLocation location(request.params[0].get_str());\n@@ -2616,7 +2632,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, flags);\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }\n@@ -3880,7 +3896,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n \n     // Do not do anything to non-HD wallets\n-    if (!pwallet->IsHDEnabled()) {\n+    if (!pwallet->CanSupportFeature(FEATURE_HD)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot set a HD seed on a non-HD wallet. Start with -upgradewallet in order to upgrade a non-HD wallet to HD\");\n     }\n \n@@ -4184,7 +4200,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      },
      {
        "sha": "1d4eae73a45b5d79eb7e943a4fd369fe9349182a",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -449,6 +449,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n     auto chain = interfaces::MakeChain();\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+    wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n     CPubKey pubkey;"
      },
      {
        "sha": "8201b58e0edaef2f456e11db861ae885884e4304",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 8,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -168,6 +168,7 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n {\n     assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n@@ -177,7 +178,7 @@ CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n-    // use HD key derivation if HD was enabled during wallet creation\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n     if (IsHDEnabled()) {\n         DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n     } else {\n@@ -283,6 +284,7 @@ bool CWallet::AddKeyPubKeyWithDB(WalletBatch &batch, const CKey& secret, const C\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n     }\n+    UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n     return true;\n }\n \n@@ -349,7 +351,11 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))\n         return false;\n-    return WalletBatch(*database).WriteCScript(Hash160(redeemScript), redeemScript);\n+    if (WalletBatch(*database).WriteCScript(Hash160(redeemScript), redeemScript)) {\n+        UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n }\n \n bool CWallet::LoadCScript(const CScript& redeemScript)\n@@ -374,7 +380,11 @@ bool CWallet::AddWatchOnly(const CScript& dest)\n     const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n-    return WalletBatch(*database).WriteWatchOnly(dest, meta);\n+    if (WalletBatch(*database).WriteWatchOnly(dest, meta)) {\n+        UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n }\n \n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n@@ -1402,6 +1412,7 @@ void CWallet::SetHDSeed(const CPubKey& seed)\n     newHdChain.seed_id = seed.GetID();\n     SetHDChain(newHdChain, false);\n     NotifyCanGetAddressesChanged();\n+    UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n }\n \n void CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n@@ -1418,6 +1429,30 @@ bool CWallet::IsHDEnabled() const\n     return !hdChain.seed_id.IsNull();\n }\n \n+bool CWallet::CanGenerateKeys()\n+{\n+    // A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)\n+    LOCK(cs_wallet);\n+    return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n+}\n+\n+bool CWallet::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_wallet);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n+}\n+\n void CWallet::SetWalletFlag(uint64_t flags)\n {\n     LOCK(cs_wallet);\n@@ -1426,6 +1461,14 @@ void CWallet::SetWalletFlag(uint64_t flags)\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n }\n \n+void CWallet::UnsetWalletFlag(uint64_t flag)\n+{\n+    LOCK(cs_wallet);\n+    m_wallet_flags &= ~flag;\n+    if (!WalletBatch(*database).WriteWalletFlags(m_wallet_flags))\n+        throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n+}\n+\n bool CWallet::IsWalletFlagSet(uint64_t flag)\n {\n     return (m_wallet_flags & flag);\n@@ -3101,7 +3144,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         LOCK(cs_KeyStore);\n         // This wallet is in its first run if all of these are empty\n-        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()\n+            && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n     }\n \n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n@@ -3286,7 +3330,7 @@ void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+    if (!CanGenerateKeys()) {\n         return false;\n     }\n     {\n@@ -3416,7 +3460,7 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n \n bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n {\n-    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+    if (!CanGetAddresses(internal)) {\n         return false;\n     }\n \n@@ -3617,6 +3661,10 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n {\n+    if (!pwallet->CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n@@ -4071,14 +4119,16 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         if ((wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             //selective allow to set flags\n             walletInstance->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        } else if (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET) {\n+            walletInstance->SetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n         } else {\n             // generate a new seed\n             CPubKey seed = walletInstance->GenerateNewSeed();\n             walletInstance->SetHDSeed(seed);\n-        }\n+        } // Otherwise, do not generate a new seed\n \n         // Top up the keypool\n-        if (!walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !walletInstance->TopUpKeyPool()) {\n+        if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n             InitError(_(\"Unable to generate initial keys\"));\n             return nullptr;\n         }"
      },
      {
        "sha": "0f7f3bab1850816f9cd469a253397a542a4128ae",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -136,9 +136,21 @@ enum WalletFlags : uint64_t {\n \n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n+\n+    //! Flag set when a wallet contains no HD seed and no private keys, scripts,\n+    //! addresses, and other watch only things, and is therefore \"blank.\"\n+    //!\n+    //! The only function this flag serves is to distinguish a blank wallet from\n+    //! a newly created wallet when the wallet database is loaded, to avoid\n+    //! initialization that should only happen on first run.\n+    //!\n+    //! This flag is also a mandatory flag to prevent previous versions of\n+    //! bitcoin from opening the wallet, thinking it was newly created, and\n+    //! then improperly reinitializing it.\n+    WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n };\n \n-static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET;\n \n /** A key pool entry */\n class CKeyPool\n@@ -1132,6 +1144,12 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /* Returns true if HD is enabled */\n     bool IsHDEnabled() const;\n \n+    /* Returns true if the wallet can generate new keys */\n+    bool CanGenerateKeys();\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    bool CanGetAddresses(bool internal = false);\n+\n     /* Generates a new HD seed (will not be activated) */\n     CPubKey GenerateNewSeed();\n \n@@ -1169,6 +1187,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /** set a single wallet flag */\n     void SetWalletFlag(uint64_t flags);\n \n+    /** Unsets a single wallet flag */\n+    void UnsetWalletFlag(uint64_t flag);\n+\n     /** check if a certain wallet flag is set */\n     bool IsWalletFlagSet(uint64_t flag);\n "
      },
      {
        "sha": "b380a98d06cc34eee68574f2a2691632d60f382b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -118,8 +118,8 @@\n     'mempool_persist.py',\n     'wallet_multiwallet.py',\n     'wallet_multiwallet.py --usecli',\n-    'wallet_disableprivatekeys.py',\n-    'wallet_disableprivatekeys.py --usecli',\n+    'wallet_createwallet.py',\n+    'wallet_createwallet.py --usecli',\n     'interface_http.py',\n     'interface_rpc.py',\n     'rpc_psbt.py',"
      },
      {
        "sha": "9fd2650d788b5617cce403474600a52972897451",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7687f7873b75c3cbdfa15ab570211dc39d24ab80/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7687f7873b75c3cbdfa15ab570211dc39d24ab80/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "patch": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test createwallet arguments.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+class CreateWalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.supports_cli = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(1) # Leave IBD for sethdseed\n+\n+        self.nodes[0].createwallet(wallet_name='w0')\n+        w0 = node.get_wallet_rpc('w0')\n+        address1 = w0.getnewaddress()\n+\n+        self.log.info(\"Test disableprivatekeys creation.\")\n+        self.nodes[0].createwallet(wallet_name='w1', disable_private_keys=True)\n+        w1 = node.get_wallet_rpc('w1')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n+        w1.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n+\n+        self.log.info('Test that private keys cannot be imported')\n+        addr = w0.getnewaddress('', 'legacy')\n+        privkey = w0.dumpprivkey(addr)\n+        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)\n+        result = w1.importmulti([{'scriptPubKey': {'address': addr}, 'timestamp': 'now', 'keys': [privkey]}])\n+        assert(not result[0]['success'])\n+        assert('warning' not in result[0])\n+        assert_equal(result[0]['error']['code'], -4)\n+        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')\n+\n+        self.log.info(\"Test blank creation with private keys disabled.\")\n+        self.nodes[0].createwallet(wallet_name='w2', disable_private_keys=True, blank=True)\n+        w2 = node.get_wallet_rpc('w2')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getrawchangeaddress)\n+        w2.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n+\n+        self.log.info(\"Test blank creation with private keys enabled.\")\n+        self.nodes[0].createwallet(wallet_name='w3', disable_private_keys=False, blank=True)\n+        w3 = node.get_wallet_rpc('w3')\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getrawchangeaddress)\n+        # Import private key\n+        w3.importprivkey(w0.dumpprivkey(address1))\n+        # Imported private keys are currently ignored by the keypool\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getnewaddress)\n+        # Set the seed\n+        w3.sethdseed()\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 1)\n+        w3.getnewaddress()\n+        w3.getrawchangeaddress()\n+\n+        self.log.info(\"Test blank creation with privkeys enabled and then encryption\")\n+        self.nodes[0].createwallet(wallet_name='w4', disable_private_keys=False, blank=True)\n+        w4 = node.get_wallet_rpc('w4')\n+        assert_equal(w4.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getrawchangeaddress)\n+        # Encrypt the wallet. Nothing should change about the keypool\n+        w4.encryptwallet('pass')\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getrawchangeaddress)\n+        # Now set a seed and it should work. Wallet should also be encrypted\n+        w4.walletpassphrase('pass', 2)\n+        w4.sethdseed()\n+        w4.getnewaddress()\n+        w4.getrawchangeaddress()\n+\n+        self.log.info(\"Test blank creation with privkeys disabled and then encryption\")\n+        self.nodes[0].createwallet(wallet_name='w5', disable_private_keys=True, blank=True)\n+        w5 = node.get_wallet_rpc('w5')\n+        assert_equal(w5.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+        # Encrypt the wallet\n+        w5.encryptwallet('pass')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+\n+if __name__ == '__main__':\n+    CreateWalletTest().main()"
      },
      {
        "sha": "e55bb82e76d6084b0b5bd11f9dc16f45954f98de",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "removed",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c99bb00470057f573f1d76b76e744a6ccd65b08/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c99bb00470057f573f1d76b76e744a6ccd65b08/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=5c99bb00470057f573f1d76b76e744a6ccd65b08",
        "patch": "@@ -1,46 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test disable-privatekeys mode.\n-\"\"\"\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    assert_raises_rpc_error,\n-)\n-\n-\n-class DisablePrivateKeysTest(BitcoinTestFramework):\n-    def set_test_params(self):\n-        self.setup_clean_chain = False\n-        self.num_nodes = 1\n-        self.supports_cli = True\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n-    def run_test(self):\n-        node = self.nodes[0]\n-        self.log.info(\"Test disableprivatekeys creation.\")\n-        self.nodes[0].createwallet('w1', True)\n-        self.nodes[0].createwallet('w2')\n-        w1 = node.get_wallet_rpc('w1')\n-        w2 = node.get_wallet_rpc('w2')\n-        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n-        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n-        w1.importpubkey(w2.getaddressinfo(w2.getnewaddress())['pubkey'])\n-\n-        self.log.info('Test that private keys cannot be imported')\n-        addr = w2.getnewaddress('', 'legacy')\n-        privkey = w2.dumpprivkey(addr)\n-        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)\n-        result = w1.importmulti([{'scriptPubKey': {'address': addr}, 'timestamp': 'now', 'keys': [privkey]}])\n-        assert(not result[0]['success'])\n-        assert('warning' not in result[0])\n-        assert_equal(result[0]['error']['code'], -4)\n-        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')\n-\n-if __name__ == '__main__':\n-    DisablePrivateKeysTest().main()"
      }
    ]
  },
  {
    "sha": "6f4e0d154256c2041f15f0c4acba5707e985d649",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjRlMGQxNTQyNTZjMjA0MWYxNWYwYzRhY2JhNTcwN2U5ODVkNjQ5",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-10T19:07:17Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-10T19:08:33Z"
      },
      "message": "Merge #15226: Allow creating blank (empty) wallets (alternative)\n\n7687f7873 [wallet] Support creating a blank wallet (Andrew Chow)\n\nPull request description:\n\n  Alternative (kind of) to #14938\n\n  This PR adds a `blank` parameter to the `createwallet` RPC to create a wallet that has no private keys initially. `sethdseed` can then be used to make a clean wallet with a custom seed. `encryptwallet` can also be used to make a wallet that is born encrypted.\n\n  Instead of changing the version number as done in #14938, a wallet flag is used to indicate that the wallet should be blank. This flag is set at creation, and then unset when the wallet is no longer blank. A wallet becomes non-blank when a HD seed is set or anything is imported. The main change to create a blank wallet is primarily taken from #14938.\n\n  Also with this, the term \"blank wallet\" is used instead of \"empty wallet\" to avoid confusion with wallets that have balance which would also be referred to as \"empty\".\n\n  This is built on top of #15225 in order to fix GUI issues.\n\nTree-SHA512: 824d685e11ac2259a26b5ece99c67a7bda94a570cd921472c464243ee356b7734595ad35cc439b34357135df041ed9cba951e6edac194935c3a55a1dc4fcbdea",
      "tree": {
        "sha": "4f3c21dbb0520a4a0e5718d4da8f387378de547a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f3c21dbb0520a4a0e5718d4da8f387378de547a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f4e0d154256c2041f15f0c4acba5707e985d649",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAlxgdrIACgkQ0wARbhyH\nWj0b5A//WHuUTwnSF2XSNEfP7MLy7hLLrx9rCZplwvyH50B/uCs75BQL7So7Ij+X\nWVck5BTwUQMfAu46WmDYLQQErmuzyR5SDgLBk1mMj6CaFPJ3GcC9JuRF1OxxYZJj\nlN2ALtulvCR652XoEPVzz+3Up8bq72z1AKHVNg8CVEmsxwQRdW2gduRmAspEkVx+\nXwyghzaK9MUqo+NO0/sN3A3+q0c5k8P2Xh7IC8IEwPbNHse2zWdz3oKD9PATLRd6\nxKeTazMgZb/78ciXUO7oovHZBrBXgpmlHeyHGJDsy9SswuUiRr2LyrKZCbT8FiWq\nLYCWF0mNYTRrAoMuW9jnmm+TOEQiYym3SUz3y3m0V2jy5ql5bHa/mQa9TNN+hWbU\nKBLaeagqEzxzn0ogwBqPzAWkQCyqMkhea8q/LUzQkFEtlXogTxzD7JfWwnMmr54E\nAJZlY1sMpuokcqxITvh4QJOjuSo6GPwInnLHa+NoGdT5UMcAkenqOT/sUajuhswx\nllecDkttBle+LC4o9maDtmVkAgC1zs9iVmT8kJ/U6gjWBn/1jzcTEUcX6ir9oyzL\nHoFQeLG8U6iLURaMwTpCMCm+4Po5us1cDLFV5TY0LKxc9aKiz0seDjU95zS0KLBj\n55YVHa2TlqJddmalnoSlpe7c/4gmyCWohBRn48DzIVQDkLwb+/k=\n=Mq1o\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f3c21dbb0520a4a0e5718d4da8f387378de547a\nparent 2945492424934fa360f86b116184ee8e34f19d0a\nparent 7687f7873b75c3cbdfa15ab570211dc39d24ab80\nauthor MeshCollider <dobsonsa68@gmail.com> 1549825637 +1300\ncommitter MeshCollider <dobsonsa68@gmail.com> 1549825713 +1300\n\nMerge #15226: Allow creating blank (empty) wallets (alternative)\n\n7687f7873 [wallet] Support creating a blank wallet (Andrew Chow)\n\nPull request description:\n\n  Alternative (kind of) to #14938\n\n  This PR adds a `blank` parameter to the `createwallet` RPC to create a wallet that has no private keys initially. `sethdseed` can then be used to make a clean wallet with a custom seed. `encryptwallet` can also be used to make a wallet that is born encrypted.\n\n  Instead of changing the version number as done in #14938, a wallet flag is used to indicate that the wallet should be blank. This flag is set at creation, and then unset when the wallet is no longer blank. A wallet becomes non-blank when a HD seed is set or anything is imported. The main change to create a blank wallet is primarily taken from #14938.\n\n  Also with this, the term \"blank wallet\" is used instead of \"empty wallet\" to avoid confusion with wallets that have balance which would also be referred to as \"empty\".\n\n  This is built on top of #15225 in order to fix GUI issues.\n\nTree-SHA512: 824d685e11ac2259a26b5ece99c67a7bda94a570cd921472c464243ee356b7734595ad35cc439b34357135df041ed9cba951e6edac194935c3a55a1dc4fcbdea\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4e0d154256c2041f15f0c4acba5707e985d649",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4e0d154256c2041f15f0c4acba5707e985d649",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4e0d154256c2041f15f0c4acba5707e985d649/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2945492424934fa360f86b116184ee8e34f19d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2945492424934fa360f86b116184ee8e34f19d0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2945492424934fa360f86b116184ee8e34f19d0a"
      },
      {
        "sha": "7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7687f7873b75c3cbdfa15ab570211dc39d24ab80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7687f7873b75c3cbdfa15ab570211dc39d24ab80"
      }
    ],
    "stats": {
      "total": 292,
      "additions": 221,
      "deletions": 71
    },
    "files": [
      {
        "sha": "3be84db3e9b88cf82ab9c30805d0c1a4b2c8ffd6",
        "filename": "doc/release-notes-15226.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/doc/release-notes-15226.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/doc/release-notes-15226.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15226.md?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -0,0 +1,8 @@\n+Miscellaneous RPC changes\n+------------\n+\n+- The RPC `createwallet` now has an optional `blank` argument that can be used to create a blank wallet.\n+Blank wallets do not have any keys or HD seed.\n+They cannot be opened in software older than 0.18.\n+Once a blank wallet has a HD seed set (by using `sethdseed`) or private keys, scripts, addresses, and other watch only things have been imported, the wallet is no longer blank and can be opened in 0.17.x.\n+Encrypting a blank wallet will also set a HD seed for it."
      },
      {
        "sha": "03b47bd3b5ac873898afbb9b904ac937a0df9665",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -464,6 +464,7 @@ class WalletImpl : public Wallet\n     }\n     unsigned int getConfirmTarget() override { return m_wallet.m_confirm_target; }\n     bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n+    bool canGetAddresses() override { return m_wallet.CanGetAddresses(); }\n     bool IsWalletFlagSet(uint64_t flag) override { return m_wallet.IsWalletFlagSet(flag); }\n     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }"
      },
      {
        "sha": "a86212356cbbf81574aabfe10a617633a24dec6e",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -235,6 +235,9 @@ class Wallet\n     // Return whether HD enabled.\n     virtual bool hdEnabled() = 0;\n \n+    // Return whether the wallet is blank.\n+    virtual bool canGetAddresses() = 0;\n+\n     // check if a certain wallet flag is set.\n     virtual bool IsWalletFlagSet(uint64_t flag) = 0;\n "
      },
      {
        "sha": "f4f3be8f435c5222ddbcc5c17e4b9b5b93b4f7cb",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -580,12 +580,7 @@ bool WalletModel::privateKeysDisabled() const\n \n bool WalletModel::canGetAddresses() const\n {\n-    // The wallet can provide a fresh address if:\n-    // * hdEnabled(): an HD seed is present; or\n-    // * it is a legacy wallet, because:\n-    //     * !hdEnabled(): an HD seed is not present; and\n-    //     * !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS): private keys have not been disabled (which results in hdEnabled() == true)\n-    return m_wallet->hdEnabled() || (!m_wallet->hdEnabled() && !m_wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    return m_wallet->canGetAddresses();\n }\n \n QString WalletModel::getWalletName() const"
      },
      {
        "sha": "c5694e6d558d44c5bfd6f380a77d5001a88f8813",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -161,6 +161,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"rescanblockchain\", 0, \"start_height\"},\n     { \"rescanblockchain\", 1, \"stop_height\"},\n     { \"createwallet\", 1, \"disable_private_keys\"},\n+    { \"createwallet\", 2, \"blank\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"stop\", 0, \"wait\" },\n };"
      },
      {
        "sha": "a255177e360f45b3cb858c0ca0436fc62909e85b",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -182,7 +182,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no\n         if (!SetCrypted())\n             return false;\n \n-        bool keyPass = false;\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n         bool keyFail = false;\n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n         for (; mi != mapCryptedKeys.end(); ++mi)"
      },
      {
        "sha": "9bbbdc61322ae032e985a9b0afc922d35747564c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -170,12 +170,18 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    // Belt and suspenders check for disabled private keys\n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n \n     LOCK(pwallet->cs_wallet);\n \n+    if (!pwallet->CanGetAddresses()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n+    }\n+\n+\n     // Parse the label first so we don't generate a key if there's an error\n     std::string label;\n     if (!request.params[0].isNull())\n@@ -231,12 +237,17 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n+    // Belt and suspenders check for disabled private keys\n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n \n     LOCK(pwallet->cs_wallet);\n \n+    if (!pwallet->CanGetAddresses(true)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n+    }\n+\n     if (!pwallet->IsLocked()) {\n         pwallet->TopUpKeyPool();\n     }\n@@ -2578,13 +2589,14 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue createwallet(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n         throw std::runtime_error(\n             RPCHelpMan{\"createwallet\",\n                 \"\\nCreates and loads a new wallet.\\n\",\n                 {\n                     {\"wallet_name\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n                     {\"disable_private_keys\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n+                    {\"blank\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -2601,9 +2613,13 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     std::string error;\n     std::string warning;\n \n-    bool disable_privatekeys = false;\n-    if (!request.params[1].isNull()) {\n-        disable_privatekeys = request.params[1].get_bool();\n+    uint64_t flags = 0;\n+    if (!request.params[1].isNull() && request.params[1].get_bool()) {\n+        flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+    }\n+\n+    if (!request.params[2].isNull() && request.params[2].get_bool()) {\n+        flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n \n     WalletLocation location(request.params[0].get_str());\n@@ -2616,7 +2632,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, flags);\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }\n@@ -3886,7 +3902,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n     LOCK(pwallet->cs_wallet);\n \n     // Do not do anything to non-HD wallets\n-    if (!pwallet->IsHDEnabled()) {\n+    if (!pwallet->CanSupportFeature(FEATURE_HD)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot set a HD seed on a non-HD wallet. Start with -upgradewallet in order to upgrade a non-HD wallet to HD\");\n     }\n \n@@ -4190,7 +4206,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      },
      {
        "sha": "e674b2faeaa5f33698726a394007e76dff53d350",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -452,6 +452,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n     auto chain = interfaces::MakeChain();\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n+    wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n     CPubKey pubkey;"
      },
      {
        "sha": "d38c15220fdd8474caadbec32c26ff285e9f5121",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 8,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -168,6 +168,7 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n {\n     assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n@@ -177,7 +178,7 @@ CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n-    // use HD key derivation if HD was enabled during wallet creation\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n     if (IsHDEnabled()) {\n         DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n     } else {\n@@ -283,6 +284,7 @@ bool CWallet::AddKeyPubKeyWithDB(WalletBatch &batch, const CKey& secret, const C\n                                                  secret.GetPrivKey(),\n                                                  mapKeyMetadata[pubkey.GetID()]);\n     }\n+    UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n     return true;\n }\n \n@@ -349,7 +351,11 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))\n         return false;\n-    return WalletBatch(*database).WriteCScript(Hash160(redeemScript), redeemScript);\n+    if (WalletBatch(*database).WriteCScript(Hash160(redeemScript), redeemScript)) {\n+        UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n }\n \n bool CWallet::LoadCScript(const CScript& redeemScript)\n@@ -374,7 +380,11 @@ bool CWallet::AddWatchOnly(const CScript& dest)\n     const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n-    return WalletBatch(*database).WriteWatchOnly(dest, meta);\n+    if (WalletBatch(*database).WriteWatchOnly(dest, meta)) {\n+        UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n }\n \n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n@@ -1402,6 +1412,7 @@ void CWallet::SetHDSeed(const CPubKey& seed)\n     newHdChain.seed_id = seed.GetID();\n     SetHDChain(newHdChain, false);\n     NotifyCanGetAddressesChanged();\n+    UnsetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n }\n \n void CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n@@ -1418,6 +1429,30 @@ bool CWallet::IsHDEnabled() const\n     return !hdChain.seed_id.IsNull();\n }\n \n+bool CWallet::CanGenerateKeys()\n+{\n+    // A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)\n+    LOCK(cs_wallet);\n+    return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n+}\n+\n+bool CWallet::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_wallet);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n+}\n+\n void CWallet::SetWalletFlag(uint64_t flags)\n {\n     LOCK(cs_wallet);\n@@ -1426,6 +1461,14 @@ void CWallet::SetWalletFlag(uint64_t flags)\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n }\n \n+void CWallet::UnsetWalletFlag(uint64_t flag)\n+{\n+    LOCK(cs_wallet);\n+    m_wallet_flags &= ~flag;\n+    if (!WalletBatch(*database).WriteWalletFlags(m_wallet_flags))\n+        throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n+}\n+\n bool CWallet::IsWalletFlagSet(uint64_t flag)\n {\n     return (m_wallet_flags & flag);\n@@ -3103,7 +3146,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         LOCK(cs_KeyStore);\n         // This wallet is in its first run if all of these are empty\n-        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()\n+            && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n     }\n \n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n@@ -3288,7 +3332,7 @@ void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+    if (!CanGenerateKeys()) {\n         return false;\n     }\n     {\n@@ -3418,7 +3462,7 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n \n bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n {\n-    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+    if (!CanGetAddresses(internal)) {\n         return false;\n     }\n \n@@ -3619,6 +3663,10 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool internal)\n {\n+    if (!pwallet->CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n@@ -4072,14 +4120,16 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         if ((wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             //selective allow to set flags\n             walletInstance->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        } else if (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET) {\n+            walletInstance->SetWalletFlag(WALLET_FLAG_BLANK_WALLET);\n         } else {\n             // generate a new seed\n             CPubKey seed = walletInstance->GenerateNewSeed();\n             walletInstance->SetHDSeed(seed);\n-        }\n+        } // Otherwise, do not generate a new seed\n \n         // Top up the keypool\n-        if (!walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !walletInstance->TopUpKeyPool()) {\n+        if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n             InitError(_(\"Unable to generate initial keys\"));\n             return nullptr;\n         }"
      },
      {
        "sha": "c455b7cdadf4495863ab4a348c8b2bc125ce8b23",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -136,9 +136,21 @@ enum WalletFlags : uint64_t {\n \n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n+\n+    //! Flag set when a wallet contains no HD seed and no private keys, scripts,\n+    //! addresses, and other watch only things, and is therefore \"blank.\"\n+    //!\n+    //! The only function this flag serves is to distinguish a blank wallet from\n+    //! a newly created wallet when the wallet database is loaded, to avoid\n+    //! initialization that should only happen on first run.\n+    //!\n+    //! This flag is also a mandatory flag to prevent previous versions of\n+    //! bitcoin from opening the wallet, thinking it was newly created, and\n+    //! then improperly reinitializing it.\n+    WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n };\n \n-static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET;\n \n /** A key pool entry */\n class CKeyPool\n@@ -1132,6 +1144,12 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /* Returns true if HD is enabled */\n     bool IsHDEnabled() const;\n \n+    /* Returns true if the wallet can generate new keys */\n+    bool CanGenerateKeys();\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    bool CanGetAddresses(bool internal = false);\n+\n     /* Generates a new HD seed (will not be activated) */\n     CPubKey GenerateNewSeed();\n \n@@ -1169,6 +1187,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /** set a single wallet flag */\n     void SetWalletFlag(uint64_t flags);\n \n+    /** Unsets a single wallet flag */\n+    void UnsetWalletFlag(uint64_t flag);\n+\n     /** check if a certain wallet flag is set */\n     bool IsWalletFlagSet(uint64_t flag);\n "
      },
      {
        "sha": "d8f92e26013b4c86406866569203465e0d28cb6c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -116,8 +116,8 @@\n     'mempool_persist.py',\n     'wallet_multiwallet.py',\n     'wallet_multiwallet.py --usecli',\n-    'wallet_disableprivatekeys.py',\n-    'wallet_disableprivatekeys.py --usecli',\n+    'wallet_createwallet.py',\n+    'wallet_createwallet.py --usecli',\n     'interface_http.py',\n     'interface_rpc.py',\n     'rpc_psbt.py',"
      },
      {
        "sha": "9fd2650d788b5617cce403474600a52972897451",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "added",
        "additions": 100,
        "deletions": 0,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f4e0d154256c2041f15f0c4acba5707e985d649/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f4e0d154256c2041f15f0c4acba5707e985d649/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=6f4e0d154256c2041f15f0c4acba5707e985d649",
        "patch": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test createwallet arguments.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+class CreateWalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.supports_cli = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(1) # Leave IBD for sethdseed\n+\n+        self.nodes[0].createwallet(wallet_name='w0')\n+        w0 = node.get_wallet_rpc('w0')\n+        address1 = w0.getnewaddress()\n+\n+        self.log.info(\"Test disableprivatekeys creation.\")\n+        self.nodes[0].createwallet(wallet_name='w1', disable_private_keys=True)\n+        w1 = node.get_wallet_rpc('w1')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n+        w1.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n+\n+        self.log.info('Test that private keys cannot be imported')\n+        addr = w0.getnewaddress('', 'legacy')\n+        privkey = w0.dumpprivkey(addr)\n+        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)\n+        result = w1.importmulti([{'scriptPubKey': {'address': addr}, 'timestamp': 'now', 'keys': [privkey]}])\n+        assert(not result[0]['success'])\n+        assert('warning' not in result[0])\n+        assert_equal(result[0]['error']['code'], -4)\n+        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')\n+\n+        self.log.info(\"Test blank creation with private keys disabled.\")\n+        self.nodes[0].createwallet(wallet_name='w2', disable_private_keys=True, blank=True)\n+        w2 = node.get_wallet_rpc('w2')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getrawchangeaddress)\n+        w2.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n+\n+        self.log.info(\"Test blank creation with private keys enabled.\")\n+        self.nodes[0].createwallet(wallet_name='w3', disable_private_keys=False, blank=True)\n+        w3 = node.get_wallet_rpc('w3')\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getrawchangeaddress)\n+        # Import private key\n+        w3.importprivkey(w0.dumpprivkey(address1))\n+        # Imported private keys are currently ignored by the keypool\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w3.getnewaddress)\n+        # Set the seed\n+        w3.sethdseed()\n+        assert_equal(w3.getwalletinfo()['keypoolsize'], 1)\n+        w3.getnewaddress()\n+        w3.getrawchangeaddress()\n+\n+        self.log.info(\"Test blank creation with privkeys enabled and then encryption\")\n+        self.nodes[0].createwallet(wallet_name='w4', disable_private_keys=False, blank=True)\n+        w4 = node.get_wallet_rpc('w4')\n+        assert_equal(w4.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getrawchangeaddress)\n+        # Encrypt the wallet. Nothing should change about the keypool\n+        w4.encryptwallet('pass')\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w4.getrawchangeaddress)\n+        # Now set a seed and it should work. Wallet should also be encrypted\n+        w4.walletpassphrase('pass', 2)\n+        w4.sethdseed()\n+        w4.getnewaddress()\n+        w4.getrawchangeaddress()\n+\n+        self.log.info(\"Test blank creation with privkeys disabled and then encryption\")\n+        self.nodes[0].createwallet(wallet_name='w5', disable_private_keys=True, blank=True)\n+        w5 = node.get_wallet_rpc('w5')\n+        assert_equal(w5.getwalletinfo()['keypoolsize'], 0)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+        # Encrypt the wallet\n+        w5.encryptwallet('pass')\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+\n+if __name__ == '__main__':\n+    CreateWalletTest().main()"
      },
      {
        "sha": "e55bb82e76d6084b0b5bd11f9dc16f45954f98de",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "removed",
        "additions": 0,
        "deletions": 46,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2945492424934fa360f86b116184ee8e34f19d0a/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2945492424934fa360f86b116184ee8e34f19d0a/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=2945492424934fa360f86b116184ee8e34f19d0a",
        "patch": "@@ -1,46 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test disable-privatekeys mode.\n-\"\"\"\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    assert_raises_rpc_error,\n-)\n-\n-\n-class DisablePrivateKeysTest(BitcoinTestFramework):\n-    def set_test_params(self):\n-        self.setup_clean_chain = False\n-        self.num_nodes = 1\n-        self.supports_cli = True\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n-    def run_test(self):\n-        node = self.nodes[0]\n-        self.log.info(\"Test disableprivatekeys creation.\")\n-        self.nodes[0].createwallet('w1', True)\n-        self.nodes[0].createwallet('w2')\n-        w1 = node.get_wallet_rpc('w1')\n-        w2 = node.get_wallet_rpc('w2')\n-        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n-        assert_raises_rpc_error(-4,\"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n-        w1.importpubkey(w2.getaddressinfo(w2.getnewaddress())['pubkey'])\n-\n-        self.log.info('Test that private keys cannot be imported')\n-        addr = w2.getnewaddress('', 'legacy')\n-        privkey = w2.dumpprivkey(addr)\n-        assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)\n-        result = w1.importmulti([{'scriptPubKey': {'address': addr}, 'timestamp': 'now', 'keys': [privkey]}])\n-        assert(not result[0]['success'])\n-        assert('warning' not in result[0])\n-        assert_equal(result[0]['error']['code'], -4)\n-        assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')\n-\n-if __name__ == '__main__':\n-    DisablePrivateKeysTest().main()"
      }
    ]
  },
  {
    "sha": "1a0139cbaf5293914b07c6301225272bd5a836a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTAxMzljYmFmNTI5MzkxNGIwN2M2MzAxMjI1MjcyYmQ1YTgzNmE3",
    "commit": {
      "author": {
        "name": "andrewtoth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-02-10T22:17:32Z"
      },
      "committer": {
        "name": "andrewtoth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-02-10T22:17:32Z"
      },
      "message": "trivial: correct parameter name in comments",
      "tree": {
        "sha": "a54541e28066da92cb4b258e2c5c1b5687ea0a5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a54541e28066da92cb4b258e2c5c1b5687ea0a5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a0139cbaf5293914b07c6301225272bd5a836a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0139cbaf5293914b07c6301225272bd5a836a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a0139cbaf5293914b07c6301225272bd5a836a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0139cbaf5293914b07c6301225272bd5a836a7/comments",
    "author": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f4e0d154256c2041f15f0c4acba5707e985d649",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4e0d154256c2041f15f0c4acba5707e985d649",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4e0d154256c2041f15f0c4acba5707e985d649"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "436f661c594fdb7b37cfd01f772c3d79cfe01db0",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a0139cbaf5293914b07c6301225272bd5a836a7/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a0139cbaf5293914b07c6301225272bd5a836a7/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=1a0139cbaf5293914b07c6301225272bd5a836a7",
        "patch": "@@ -45,13 +45,13 @@ class CScheduler\n     // Call func at/after time t\n     void schedule(Function f, boost::chrono::system_clock::time_point t=boost::chrono::system_clock::now());\n \n-    // Convenience method: call f once deltaSeconds from now\n+    // Convenience method: call f once deltaMilliSeconds from now\n     void scheduleFromNow(Function f, int64_t deltaMilliSeconds);\n \n     // Another convenience method: call f approximately\n-    // every deltaSeconds forever, starting deltaSeconds from now.\n+    // every deltaMilliSeconds forever, starting deltaMilliSeconds from now.\n     // To be more precise: every time f is finished, it\n-    // is rescheduled to run deltaSeconds later. If you\n+    // is rescheduled to run deltaMilliSeconds later. If you\n     // need more accurate scheduling, don't use this method.\n     void scheduleEvery(Function f, int64_t deltaMilliSeconds);\n "
      }
    ]
  },
  {
    "sha": "e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODRlMGQ0YjVlMWZmYTBmMWJkZGIyZjcwZDY0YTY2ZTNjYTM2MGU2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T13:08:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T13:08:17Z"
      },
      "message": "Merge #15337: rpc: Fix for segfault if combinepsbt called with empty inputs\n\n30d0f7be6e rpc: Fix for segfault if combinepsbt called with empty inputs (benthecarman)\n\nPull request description:\n\n  Fixes #15300\n\nTree-SHA512: 25e7b4e6e48d8b0d197f0ab96df308fff33e2110f8929cb48914877fa7f4c4a84f173b1378fdb2dec5d03fe7d6d1aced4b577e55f9fe180d8147d9106ebf543f",
      "tree": {
        "sha": "e7b666f1f88156e7bcc80c0130cd0d5dafaaa8f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7b666f1f88156e7bcc80c0130cd0d5dafaaa8f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcYXPBAAoJENLqSFDnUoslxe4QALhzKL0opcHWlJO0Z6MT7dIV\nQOqBODyZzSpTYMVJMnHA4Se3JzrMITrs1BEVulrPXRysMd8mYXCJDXKnD72nFQlq\nTS5a/q/09OGCqEE1Ed6pIE51wv91QE+RlL3MfuYSz0J4jbYCWIiDi/ZXaRATkWSK\nkeAXZ/35YHpe4PH5YqppBxEDdxA14Hl3tMBLu9+vr7PEEsidQsPHAoeZwbCRnMlu\n+5RUBmmMr3SRUJVkQVBexyTC4AB/C29T6dl9GVV2ipjDLlcIF/a1d9EjkT/a2Vq2\nNnMxAblf6Oc6tiw2a3cs8fciT0PYuQP7J6D0w51BCYkR7dCVhn7PRNnV9iPSQmbL\n9afL63jNgU/Rhx9UwvpHabi3ot2+7rYvfUAbxK4gG3BvIHwv0srsS4pqtj2CoA9o\n7XzTPrXtNu5TwprOwi4mzSMtbTOFVWx2NCDQlFNEsYSt3d5DTzYm/Dm/5hOnmth4\nyXr1JCz4OqxEncoqpDxgA9SR5e4olnDEVjjCoWmtuVeiwMOq4nCwrKOkTrE0Hz00\nBgJH9YYh6k3IPPrfl/YJQC4k/Hpk3H5HOxyG8PSqjIzNIk7aZwm0YU86swXWfhQs\nsrDy+OUhI0YHl7eh3W8Gi+WyLjXmEI3nX+JY7tNROJFyfaX/D3YgZc3HZeFt9+fH\nbtVKN3esBBI2rrDgHXzu\n=B/U7\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBOl4X+n6hih4zWOHMGODDxCodLwGLvs4HDln0OorxhRCP/wEAPGreU6hDRK\ngTulPArv7X0I8QRcYXPD8AiOcvKK5+jBVwCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQpLeSFku+1a5Tivd7\nOjnFSwjxBFxhc8PwCHV+4Nku2O2bAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQ5cPQP5S2JtpZfxq46hJihAjx\nBFxhc8PwCFHSchlALPN2AIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BDvCIcBoaOIeOzXDdGza8JxCPAQuT/BLQ99GrcU4DL+rxyZ\nrQjxBFxhc8PwCPQNhsLHj6mBAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e7b666f1f88156e7bcc80c0130cd0d5dafaaa8f0\nparent 6f4e0d154256c2041f15f0c4acba5707e985d649\nparent 30d0f7be6e6bd45fed7195ddf31187438b02227a\nauthor MarcoFalke <falke.marco@gmail.com> 1549890490 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549890497 -0500\n\nMerge #15337: rpc: Fix for segfault if combinepsbt called with empty inputs\n\n30d0f7be6e rpc: Fix for segfault if combinepsbt called with empty inputs (benthecarman)\n\nPull request description:\n\n  Fixes #15300\n\nTree-SHA512: 25e7b4e6e48d8b0d197f0ab96df308fff33e2110f8929cb48914877fa7f4c4a84f173b1378fdb2dec5d03fe7d6d1aced4b577e55f9fe180d8147d9106ebf543f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f4e0d154256c2041f15f0c4acba5707e985d649",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4e0d154256c2041f15f0c4acba5707e985d649",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4e0d154256c2041f15f0c4acba5707e985d649"
      },
      {
        "sha": "30d0f7be6e6bd45fed7195ddf31187438b02227a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30d0f7be6e6bd45fed7195ddf31187438b02227a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30d0f7be6e6bd45fed7195ddf31187438b02227a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cce62bacef741690cac3565bc31c6c4dfddca8a0",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6",
        "patch": "@@ -1518,6 +1518,9 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n     // Unserialize the transactions\n     std::vector<PartiallySignedTransaction> psbtxs;\n     UniValue txs = request.params[0].get_array();\n+    if (txs.empty()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Parameter 'txs' cannot be empty\");\n+    }\n     for (unsigned int i = 0; i < txs.size(); ++i) {\n         PartiallySignedTransaction psbtx;\n         std::string error;"
      },
      {
        "sha": "a82a5d0208ff8bac3e848e8f73c92a7280283a44",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6",
        "patch": "@@ -269,6 +269,9 @@ def run_test(self):\n             combined = self.nodes[2].combinepsbt(combiner['combine'])\n             assert_equal(combined, combiner['result'])\n \n+        # Empty combiner test\n+        assert_raises_rpc_error(-8, \"Parameter 'txs' cannot be empty\", self.nodes[0].combinepsbt, [])\n+\n         # Finalizer test\n         for finalizer in finalizers:\n             finalized = self.nodes[2].finalizepsbt(finalizer['finalize'], False)['psbt']"
      }
    ]
  },
  {
    "sha": "ff9e197212eba49a7865430126c8e803b9825aa8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjllMTk3MjEyZWJhNDlhNzg2NTQzMDEyNmM4ZTgwM2I5ODI1YWE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T13:20:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T13:20:27Z"
      },
      "message": "Merge #15380: trivial: correct parameter name in comments\n\n1a0139cbaf trivial: correct parameter name in comments (andrewtoth)\n\nPull request description:\n\nTree-SHA512: 029b5ca5406cd7bf704b4d7611dac072cdc46a8659041bf631d77372ed4c16fa9ddf02c754044e310b16ea9bdd0803d051bef6ef6a86815d523826666134c649",
      "tree": {
        "sha": "92817cee3c8f397977d4a550ca3628c1a99c8d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92817cee3c8f397977d4a550ca3628c1a99c8d47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff9e197212eba49a7865430126c8e803b9825aa8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcYXabAAoJENLqSFDnUosl8SQP/iVG62q+yN7rJ2D7CLWLCMKh\nw0YbgMgyAPBU4tuV+xcqKmNxYCmdtxX5BeLPJ8AVw40HX1DxkAhr/5VM6sKAMrMm\niR10RotCvxiSgLprWNXqOP5AFKY6EM1GiWjSDajIFJHcf59aEIng5jcLWQ5KbUPl\nkGau4cAqWAUFixX2Y6+FWDEFVHYSHSwxe9Gy9aVP957rcpIdHCZFL/9aQs9CWISc\nsYbLZgdPgAnyXCp+bF7TmnyNkwnXMDakIObW0zIMhm0Xv+lX+QPY5iUiPSj4Xnvi\naXorogYSTj/JjNFEB/lG/WyBle9WUeHg5cL+CwRfd8KDxa3nDQdDWdFV5+wZMtIP\nToBEdG0o9cU3MZM4SwLDtyYRbIu4QRbK/b9MVCNZFsahFdh9rxUWk8rljZZpNEgb\nGjZmSu+Qgn/7wPCxMAiGWJnkJ02mkGFOPvwtik3K0rjD6rY7qyLVPvisMkqUN2Gh\nmXPkZ3KKWtuYxSosj2bSzZ7sD5iYDvajZw3hQB2/2SSdBrM2fEg/29bMm3pxJb7t\npYoxq7Y3V6Ep2+NNB+H6aLS+sEjbrMluIjpM4cuFDaW+ZGVv5s5oeI6HipXx5nQT\ndxhPq/TJWkAPt+9Di0BWL0smVOgG2d3Lx9V9FhG/JJx26sE6HJ3ilKNdrv+G/UO9\njaO2yjzCbdWFSHE1QPi2\n=GvWe\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIB4k9290/S9+IweXO/Qtz9DODkX/zwiwtl5R9Ga/E2+ZCP/wEADtC+LGFfXM\nbAIw6FO7oZUI8QRcYXad8AjgIIqhA7fV8QCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wECXurBWwT9NY+Z3fXI1g\nvh0I8CAlKX7dtkcNguJC463KiNPl22n2vP2tC06TNUrfv0sCHgjxBFxhdp7wCBxI\ngQR9xcqqAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmf/8BCUXvM+rVD+seM6Bof7s1ZeCPEEXGF2nfAIy69qBjGv\ntXkAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23w\nEOCCva3zX7ai10vxA3z93bEI8BCwzfkGCF7Ftj1KYKFgXuOTCPEEXGF2n/AI27I1\nRKsDrV0Ag9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5\nd2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 92817cee3c8f397977d4a550ca3628c1a99c8d47\nparent e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6\nparent 1a0139cbaf5293914b07c6301225272bd5a836a7\nauthor MarcoFalke <falke.marco@gmail.com> 1549891225 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549891227 -0500\n\nMerge #15380: trivial: correct parameter name in comments\n\n1a0139cbaf trivial: correct parameter name in comments (andrewtoth)\n\nPull request description:\n\nTree-SHA512: 029b5ca5406cd7bf704b4d7611dac072cdc46a8659041bf631d77372ed4c16fa9ddf02c754044e310b16ea9bdd0803d051bef6ef6a86815d523826666134c649\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9e197212eba49a7865430126c8e803b9825aa8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9e197212eba49a7865430126c8e803b9825aa8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9e197212eba49a7865430126c8e803b9825aa8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e84e0d4b5e1ffa0f1bddb2f70d64a66e3ca360e6"
      },
      {
        "sha": "1a0139cbaf5293914b07c6301225272bd5a836a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0139cbaf5293914b07c6301225272bd5a836a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a0139cbaf5293914b07c6301225272bd5a836a7"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "436f661c594fdb7b37cfd01f772c3d79cfe01db0",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9e197212eba49a7865430126c8e803b9825aa8/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9e197212eba49a7865430126c8e803b9825aa8/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=ff9e197212eba49a7865430126c8e803b9825aa8",
        "patch": "@@ -45,13 +45,13 @@ class CScheduler\n     // Call func at/after time t\n     void schedule(Function f, boost::chrono::system_clock::time_point t=boost::chrono::system_clock::now());\n \n-    // Convenience method: call f once deltaSeconds from now\n+    // Convenience method: call f once deltaMilliSeconds from now\n     void scheduleFromNow(Function f, int64_t deltaMilliSeconds);\n \n     // Another convenience method: call f approximately\n-    // every deltaSeconds forever, starting deltaSeconds from now.\n+    // every deltaMilliSeconds forever, starting deltaMilliSeconds from now.\n     // To be more precise: every time f is finished, it\n-    // is rescheduled to run deltaSeconds later. If you\n+    // is rescheduled to run deltaMilliSeconds later. If you\n     // need more accurate scheduling, don't use this method.\n     void scheduleEvery(Function f, int64_t deltaMilliSeconds);\n "
      }
    ]
  },
  {
    "sha": "ad039aa0d3e8a831559434022b1da1de4d72a847",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDAzOWFhMGQzZThhODMxNTU5NDM0MDIyYjFkYTFkZTRkNzJhODQ3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T13:34:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T13:34:14Z"
      },
      "message": "Merge #15373: Move ParseConfirmTarget from rpc/mining to rpc/util\n\n50e647210d Move ParseConfirmTarget from rpc/mining to rpc/util (Russell Yanofsky)\n\nPull request description:\n\n  Util is a better home since it's called both by wallet and mining code.\n\n  Suggested https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254449444\n\nTree-SHA512: 4320caf2a3f70d2885c421de04f2ec68ff3f6519258c5155fc46e245dc1765fd15c81f260af5096318f24ff9deb88fc3c5ef40eec8b7393f467f5b963d17215b",
      "tree": {
        "sha": "3a3bd8db2ab65fb2657eced4de9e1e3c23e0e1f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a3bd8db2ab65fb2657eced4de9e1e3c23e0e1f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad039aa0d3e8a831559434022b1da1de4d72a847",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcYXnWAAoJENLqSFDnUosl7x4QAJYCdI/8G1kN5MA7KSTE4Cxx\nHIMjTllOl9FIJmhashzyMJf2SksLp2FFnSmffHE9mko8oZtmFdTRjoEt0KApoQ3e\nDq90vJsXiodTh+otEBWcImLGZGNPsBDcZ2a1o4UI4YtcxSO1GlMHOTsE6crEMK2d\n8myLL9OFdZsvQFQ5dCWlkXuiYnrpNnKsdmwwnlutY+Rx4YVCPp01+xDNlLRagw1W\nEOLEmb7NS2BR/3QMFSAA2mBrqKzgUEO0Z+0ADEQbt36M77lBPjgGazRoyS2kOBPA\n+Ig2zBcdGkndaIYzww8jYLh23jrvwI/34+AlO1RAr4KuZ1hQAU1r1M6OsPqwTDdc\ncMnk3OaYRy1f1eOr8YPwkETpTn20bZLIbQkAKgZtftFTpo+TA00NF2/ZXHAJDimG\n1fWSnnc47QqUS11uP9lZnIqg44sP8Kr/dSvpj83KPC3Ad92aZFmQo6Q7y6UtjoN3\nB5z7zgp5cwLV0llQJ/OXe/g8o8b0r+Y4f4qE6I4ksMyteEVq1Ld4aYqYADMk2JoG\nv9uQ2TQmZ2b2qFN32vZbwuE3w5RBqK/ZeJWltWzZUjEyXffCzbuz1GAuHhPgl2QS\naKowvwWwZyJz4CvQVczBjxlrL1++H+byGlKbWK67GUPyakQXnxWQKdoOv7ba04Rp\nMLR/jytI9d69SN9UoTm+\n=wIVc\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDZ6KvUPMyNPNvhoVqD9oTFueqHUHPb226w76XpH0ZWFCP/wEBbVt1oKaU2q\nkpdRiBEAARYI8BDY0TIzvC+nuxHlIBBpnXu8CPEEXGF52PAIuvJBRwf1p2gAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BBYmFEiwwv10MoNv5sIUuEmCPAg9jB0Szphh/NlNrz/WVcAVQvuPBYO+X4HyBHd\nj4/dJ3kI8QRcYXnY8AiTjj351JwjcwCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRj\nLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEGTvS/U9qNyZl/UL5qtifDYI\n8QRcYXnY8AiBZc9OCmnukQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbfAQc22rjfrlwNhtLIsi103YIQjxIDgyKrUrtEYhfrF+Gmqi\n6mSyN9cUd0io49uuC6gNLQakCPEEXGF52PAIe4gqQ0oQXVYAg9/jDS75DI4uLWh0\ndHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 3a3bd8db2ab65fb2657eced4de9e1e3c23e0e1f8\nparent ff9e197212eba49a7865430126c8e803b9825aa8\nparent 50e647210d513dab8f40ded61fe439ecaa9a67c3\nauthor MarcoFalke <falke.marco@gmail.com> 1549892050 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549892054 -0500\n\nMerge #15373: Move ParseConfirmTarget from rpc/mining to rpc/util\n\n50e647210d Move ParseConfirmTarget from rpc/mining to rpc/util (Russell Yanofsky)\n\nPull request description:\n\n  Util is a better home since it's called both by wallet and mining code.\n\n  Suggested https://github.com/bitcoin/bitcoin/pull/15288#discussion_r254449444\n\nTree-SHA512: 4320caf2a3f70d2885c421de04f2ec68ff3f6519258c5155fc46e245dc1765fd15c81f260af5096318f24ff9deb88fc3c5ef40eec8b7393f467f5b963d17215b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad039aa0d3e8a831559434022b1da1de4d72a847",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad039aa0d3e8a831559434022b1da1de4d72a847",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad039aa0d3e8a831559434022b1da1de4d72a847/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff9e197212eba49a7865430126c8e803b9825aa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9e197212eba49a7865430126c8e803b9825aa8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9e197212eba49a7865430126c8e803b9825aa8"
      },
      {
        "sha": "50e647210d513dab8f40ded61fe439ecaa9a67c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50e647210d513dab8f40ded61fe439ecaa9a67c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50e647210d513dab8f40ded61fe439ecaa9a67c3"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 15,
      "deletions": 13
    },
    "files": [
      {
        "sha": "35f55b01418e89d565aebceaa702badf09a32ab9",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad039aa0d3e8a831559434022b1da1de4d72a847/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad039aa0d3e8a831559434022b1da1de4d72a847/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ad039aa0d3e8a831559434022b1da1de4d72a847",
        "patch": "@@ -31,16 +31,6 @@\n #include <memory>\n #include <stdint.h>\n \n-unsigned int ParseConfirmTarget(const UniValue& value)\n-{\n-    int target = value.get_int();\n-    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n-    if (target < 1 || (unsigned int)target > max_target) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n-    }\n-    return (unsigned int)target;\n-}\n-\n /**\n  * Return average network hashes per second based on the last 'lookup' blocks,\n  * or from the last difficulty change if 'lookup' is nonpositive."
      },
      {
        "sha": "be9a9733159171cdf6019cfae6040b88fcc2c864",
        "filename": "src/rpc/mining.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad039aa0d3e8a831559434022b1da1de4d72a847/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad039aa0d3e8a831559434022b1da1de4d72a847/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=ad039aa0d3e8a831559434022b1da1de4d72a847",
        "patch": "@@ -12,7 +12,4 @@\n /** Generate blocks (mine) */\n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript);\n \n-/** Check bounds on a command line confirm target */\n-unsigned int ParseConfirmTarget(const UniValue& value);\n-\n #endif"
      },
      {
        "sha": "aa5076cd8e77ceec8fc4badb6e099d1bccf322e7",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad039aa0d3e8a831559434022b1da1de4d72a847/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad039aa0d3e8a831559434022b1da1de4d72a847/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=ad039aa0d3e8a831559434022b1da1de4d72a847",
        "patch": "@@ -4,10 +4,12 @@\n \n #include <key_io.h>\n #include <keystore.h>\n+#include <policy/fees.h>\n #include <rpc/protocol.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n+#include <validation.h>\n \n InitInterfaces* g_rpc_interfaces = nullptr;\n \n@@ -129,6 +131,16 @@ UniValue DescribeAddress(const CTxDestination& dest)\n     return boost::apply_visitor(DescribeAddressVisitor(), dest);\n }\n \n+unsigned int ParseConfirmTarget(const UniValue& value)\n+{\n+    int target = value.get_int();\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    if (target < 1 || (unsigned int)target > max_target) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n+    }\n+    return (unsigned int)target;\n+}\n+\n struct Section {\n     Section(const std::string& left, const std::string& right)\n         : m_left{left}, m_right{right} {}"
      },
      {
        "sha": "d34c9cfdbbbad8acc62e6bbe25ff3728d2f199cb",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad039aa0d3e8a831559434022b1da1de4d72a847/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad039aa0d3e8a831559434022b1da1de4d72a847/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=ad039aa0d3e8a831559434022b1da1de4d72a847",
        "patch": "@@ -28,6 +28,9 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n UniValue DescribeAddress(const CTxDestination& dest);\n \n+//! Parse a confirm target option and raise an RPC error if it is invalid.\n+unsigned int ParseConfirmTarget(const UniValue& value);\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,"
      }
    ]
  },
  {
    "sha": "fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBhZDRlN2NlOGY0YzE5ZmU1OGJmMDY3NDdiZjhjNjI2MDA1ODFj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-10T21:56:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T13:40:10Z"
      },
      "message": "RPCHelpMan: Check default values are given at compile-time",
      "tree": {
        "sha": "5c9ef121d5f875fc9a1cb4c6a648dea756e47810",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c9ef121d5f875fc9a1cb4c6a648dea756e47810"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcYXs6AAoJEM4rdWl+aaVIa28MAKCmN08d4Fr8eC1mH+/Bmg5O\nG6TriCnxdaaZqaJGIKC2mtHlYQx4mzsMoKjtB9Zt9hPWTBH9Q4XvD68UUw3MQ7Z7\ngTsvlZGy4KrLEHPk0HIkkj8j6++ciYiH+Rm5csEeh6is0q3ruQrS8oHQrR5g3MCj\n0aP/QOdFkDZLIHNxIv4lc5tJon9GfzcBPqjQHRv5hz4UvgXLspBHdq7AqHQIf1ex\nwp5yVT+7bLD5jpBZJvKPOE/NSf8foUEbjNPE3FKYQArklImkGxDfnvaGVerWkqJz\nLgbezNpe/tmhXAyuYvO8b7aNK9N+ifCCNvInyH+aSYTjZbJHdeJpzpAiY8JwNmd0\n69VoX9nSkhW4oePTOP+v6FsPR4nj2yftgp26YpMqmSv+F9YkXmP3dUrj4tL9oqf2\nKYs9W6Eu3jU6i6oim3A3MZOyP0rvKpJMJ51yZTnL4HQvd8XMixu85/FiTsZl/MbD\n/Su0pVwXfNqmJX6I+jG5QSLKz6Oapq06YfmlcwHlqA==\n=J7BQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c9ef121d5f875fc9a1cb4c6a648dea756e47810\nparent ff9e197212eba49a7865430126c8e803b9825aa8\nauthor MarcoFalke <falke.marco@gmail.com> 1544479011 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549892410 -0500\n\nRPCHelpMan: Check default values are given at compile-time\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff9e197212eba49a7865430126c8e803b9825aa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9e197212eba49a7865430126c8e803b9825aa8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9e197212eba49a7865430126c8e803b9825aa8"
      }
    ],
    "stats": {
      "total": 751,
      "additions": 388,
      "deletions": 363
    },
    "files": [
      {
        "sha": "7fb9ff2eaf03d77e1ce8f6b489b61713ac66d8e1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 37,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -215,7 +215,7 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -256,8 +256,8 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"Block hash to wait for.\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"Block hash to wait for.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -302,8 +302,8 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                 \"of the current tip.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Block height to wait for.\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Block height to wait for.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -501,7 +501,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n                 \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n                 \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\",\n                 {\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n                 RPCResult{\"for verbose = false\",\n             \"[                     (json array of string)\\n\"\n@@ -535,8 +535,8 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempoolancestors\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n@@ -605,8 +605,8 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempooldescendants\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n@@ -675,7 +675,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempoolentry\",\n                 \"\\nReturns mempool data for given transaction\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -711,7 +711,7 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n             RPCHelpMan{\"getblockhash\",\n                 \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The height index\"},\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The height index\"},\n                 },\n                 RPCResult{\n             \"\\\"hash\\\"         (string) The block hash\\n\"\n@@ -740,8 +740,8 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n                 \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n                 \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"true for a json object, false for the hex-encoded data\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"true\", \"true for a json object, false for the hex-encoded data\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = true\",\n@@ -830,8 +830,8 @@ static UniValue getblock(const JSONRPCRequest& request)\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n                 \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n-                    {\"verbosity\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n                 },\n                 {\n                     RPCResult{\"for verbosity = 0\",\n@@ -986,7 +986,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n                 },\n                 RPCResult{\n@@ -1085,9 +1085,9 @@ UniValue gettxout(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxout\",\n                 \"\\nReturns details about an unspent transaction output.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                    {\"n\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"vout number\"},\n-                    {\"include_mempool\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n+                    {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"n\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"vout number\"},\n+                    {\"include_mempool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1166,8 +1166,8 @@ static UniValue verifychain(const JSONRPCRequest& request)\n             RPCHelpMan{\"verifychain\",\n                 \"\\nVerifies blockchain database.\\n\",\n                 {\n-                    {\"checklevel\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, range=0-4\", nCheckLevel), \"How thorough the block verification is.\"},\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, 0=all\", nCheckDepth), \"The number of blocks to check.\"},\n+                    {\"checklevel\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, range=0-4\", nCheckLevel), \"How thorough the block verification is.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, 0=all\", nCheckDepth), \"The number of blocks to check.\"},\n                 },\n                 RPCResult{\n             \"true|false       (boolean) Verified or not\\n\"\n@@ -1534,7 +1534,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n                 \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n                 \"\\nThe effects of preciousblock are not retained across restarts.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as precious\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to mark as precious\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1571,7 +1571,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n             RPCHelpMan{\"invalidateblock\",\n                 \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as invalid\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to mark as invalid\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1612,7 +1612,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n                 \"\\nRemoves invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\\n\"\n                 \"This can be used to undo the effects of invalidateblock.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to reconsider\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to reconsider\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1650,8 +1650,8 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n             RPCHelpMan{\"getchaintxstats\",\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"one month\", \"Size of the window in number of blocks\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"chain tip\", \"The hash of the block that ends the window.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* default */ \"one month\", \"Size of the window in number of blocks\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* default */ \"chain tip\", \"The hash of the block that ends the window.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1785,11 +1785,11 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                 \"It won't work for some heights with pruning.\\n\"\n                 \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\",\n                 {\n-                    {\"hash_or_height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n-                    {\"stats\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"all values\", \"Values to plot (see result below)\",\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"stats\", RPCArg::Type::ARR, /* default */ \"all values\", \"Values to plot (see result below)\",\n                         {\n-                            {\"height\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n-                            {\"time\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n+                            {\"height\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Selected statistic\"},\n+                            {\"time\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Selected statistic\"},\n                         },\n                         \"stats\"},\n                 },\n@@ -2148,18 +2148,18 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n                 \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n                 {\n-                    {\"action\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The action to execute\\n\"\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n             \"                                      \\\"start\\\" for starting a scan\\n\"\n             \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n             \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n-                    {\"scanobjects\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"Array of scan objects\\n\"\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects\\n\"\n             \"                                  Every scan object is either a string descriptor or an object:\",\n                         {\n-                            {\"descriptor\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"An output descriptor\"},\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"An object with output descriptor and metadata\",\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                                 {\n-                                    {\"desc\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"An output descriptor\"},\n-                                    {\"range\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000\", \"Up to what child index HD chains should be explored\"},\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::NUM, /* default */ \"1000\", \"Up to what child index HD chains should be explored\"},\n                                 },\n                             },\n                         },"
      },
      {
        "sha": "3aae2c645c22770d5cc40bead7299bc21cf26c8e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -92,8 +92,8 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n                 \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n                 \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"120\", \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"-1\", \"To estimate at the time of the given height.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* default */ \"120\", \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n+                    {\"height\", RPCArg::Type::NUM, /* default */ \"-1\", \"To estimate at the time of the given height.\"},\n                 },\n                 RPCResult{\n             \"x             (numeric) Hashes per second estimated\\n\"\n@@ -163,9 +163,9 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"generatetoaddress\",\n                 \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The address to send the newly generated bitcoin to.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address to send the newly generated bitcoin to.\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n                 },\n                 RPCResult{\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n@@ -244,10 +244,10 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"prioritisetransaction\",\n                 \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id.\"},\n-                    {\"dummy\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"null\", \"API-Compatibility for previous API. Must be zero or null.\\n\"\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id.\"},\n+                    {\"dummy\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"API-Compatibility for previous API. Must be zero or null.\\n\"\n             \"                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.\"},\n-                    {\"fee_delta\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n+                    {\"fee_delta\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n             \"                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\\n\"\n             \"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n             \"                  considers the transaction as it would have paid a higher (or lower) fee.\"},\n@@ -316,17 +316,17 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"A json object in the following spec\",\n+                    {\"template_request\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"A json object in the following spec\",\n                         {\n-                            {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n-                            {\"capabilities\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A list of strings\",\n+                            {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n+                            {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n+                                    {\"support\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n                                 },\n                                 },\n-                            {\"rules\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A list of strings\",\n+                            {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported softfork deployment\"},\n+                                    {\"support\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported softfork deployment\"},\n                                 },\n                                 },\n                         },\n@@ -716,8 +716,8 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                 \"\\nAttempts to submit new block to network.\\n\"\n                 \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n                 {\n-                    {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block data to submit\"},\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block data to submit\"},\n+                    {\"dummy\", RPCArg::Type::STR, /* default */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -781,7 +781,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n                 \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n                 \"\\nThrows when the header is invalid.\\n\",\n                 {\n-                    {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block header data\"},\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block header data\"},\n                 },\n                 RPCResult{\n             \"None\"\n@@ -823,8 +823,8 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n                 \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n                 \"in BIP 141 (witness data is discounted).\\n\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Confirmation target in blocks (1 - 1008)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"CONSERVATIVE\", \"The fee estimate mode.\\n\"\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"CONSERVATIVE\", \"The fee estimate mode.\\n\"\n             \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n             \"                   a longer history. A conservative estimate potentially returns a\\n\"\n             \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n@@ -890,8 +890,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n                 \"defined in BIP 141 (witness data is discounted).\\n\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Confirmation target in blocks (1 - 1008)\"},\n-                    {\"threshold\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n+                    {\"threshold\", RPCArg::Type::NUM, /* default */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.\"},\n                 },"
      },
      {
        "sha": "784adfa9691cf633f0dc1b2fb68da4b9905e97fa",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -40,7 +40,7 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n                 \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n                 \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to validate\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -87,12 +87,12 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n                 \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n                 \"It returns a json object with the address and redeemScript.\\n\",\n                 {\n-                    {\"nrequired\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The number of required signatures out of the n keys.\"},\n-                    {\"keys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of hex-encoded public keys.\",\n+                    {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys.\"},\n+                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of hex-encoded public keys.\",\n                         {\n-                            {\"key\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n+                            {\"key\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"The hex-encoded public key\"},\n                         }},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -158,9 +158,9 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n             \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"},\n             {\n-                {\"descriptor\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The descriptor.\"},\n-                {\"begin\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n-                {\"end\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n+                {\"begin\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n+                {\"end\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n             },\n             RPCResult{\n                 \"[ address ] (array) the derived addresses\\n\"\n@@ -239,9 +239,9 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n             RPCHelpMan{\"verifymessage\",\n                 \"\\nVerify a signed message\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the signature.\"},\n-                    {\"signature\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n-                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message that was signed.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to use for the signature.\"},\n+                    {\"signature\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n+                    {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message that was signed.\"},\n                 },\n                 RPCResult{\n             \"true|false   (boolean) If the signature is verified or not.\\n\"\n@@ -298,8 +298,8 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             RPCHelpMan{\"signmessagewithprivkey\",\n                 \"\\nSign a message with the private key of an address\\n\",\n                 {\n-                    {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key to sign the message with.\"},\n-                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n+                    {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key to sign the message with.\"},\n+                    {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message to create a signature of.\"},\n                 },\n                 RPCResult{\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n@@ -340,7 +340,7 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n-                    {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Unix seconds-since-epoch timestamp\\n\"\n+                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Unix seconds-since-epoch timestamp\\n\"\n             \"   Pass 0 to go back to using the system time.\"},\n                 },\n                 RPCResults{},\n@@ -406,7 +406,7 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmemoryinfo\",\n                 \"Returns an object containing information about memory usage.\\n\",\n                 {\n-                    {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n+                    {\"mode\", RPCArg::Type::STR, /* default */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n             \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n             \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\"},\n                 },\n@@ -483,13 +483,13 @@ UniValue logging(const JSONRPCRequest& request)\n             \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n             ,\n                 {\n-                    {\"include\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of categories to add debug logging\",\n+                    {\"include\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of categories to add debug logging\",\n                         {\n-                            {\"include_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n+                            {\"include_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},\n-                    {\"exclude\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of categories to remove debug logging\",\n+                    {\"exclude\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of categories to remove debug logging\",\n                         {\n-                            {\"exclude_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n+                            {\"exclude_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},\n                 },\n                 RPCResult{"
      },
      {
        "sha": "6bbbbc9876d2743cd6a890d57a196d57180f7860",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -221,8 +221,8 @@ static UniValue addnode(const JSONRPCRequest& request)\n                 \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n                 \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The node (see getpeerinfo for nodes)\"},\n-                    {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n+                    {\"node\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The node (see getpeerinfo for nodes)\"},\n+                    {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -266,8 +266,8 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                 \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n                 \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n-                    {\"nodeid\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n+                    {\"address\", RPCArg::Type::STR, /* default */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n+                    {\"nodeid\", RPCArg::Type::NUM, /* default */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -311,7 +311,7 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n                 \"(note that onetry addnodes are not listed here)\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n+                    {\"node\", RPCArg::Type::STR, /* default */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -532,10 +532,10 @@ static UniValue setban(const JSONRPCRequest& request)\n             RPCHelpMan{\"setban\",\n                 \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\",\n                 {\n-                    {\"subnet\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n-                    {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n-                    {\"bantime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n-                    {\"absolute\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n+                    {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n+                    {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n+                    {\"bantime\", RPCArg::Type::NUM, /* default */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n+                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -667,7 +667,7 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n             RPCHelpMan{\"setnetworkactive\",\n                 \"\\nDisable/enable all p2p network activity.\\n\",\n                 {\n-                    {\"state\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"true to enable networking, false to disable\"},\n+                    {\"state\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"true to enable networking, false to disable\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n@@ -691,7 +691,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n             RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n                 {\n-                    {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n+                    {\"count\", RPCArg::Type::NUM, /* default */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n                 },\n                 RPCResult{\n             \"[\\n\""
      },
      {
        "sha": "c2f0c73851b5274f485c1901ffb5e7a3646bbc87",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 60,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -82,9 +82,9 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n                 \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If false, return a string, otherwise return a json object\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"The block in which to look for the transaction\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If false, return a string, otherwise return a json object\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"The block in which to look for the transaction\"},\n                 },\n                 {\n                     RPCResult{\"if verbose is not set or set to false\",\n@@ -218,12 +218,12 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                 \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n                 \"specify the block in which the transaction is included manually (by blockhash).\\n\",\n                 {\n-                    {\"txids\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of txids to filter\",\n+                    {\"txids\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of txids to filter\",\n                         {\n-                            {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A transaction hash\"},\n                         },\n                         },\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"If specified, looks for txid in the block with this hash\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"If specified, looks for txid in the block with this hash\"},\n                 },\n                 RPCResult{\n             \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n@@ -311,7 +311,7 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n                 \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n                 \"and throwing an RPC error if the block is not in our best chain\\n\",\n                 {\n-                    {\"proof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded proof generated by gettxoutproof\"},\n+                    {\"proof\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded proof generated by gettxoutproof\"},\n                 },\n                 RPCResult{\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n@@ -472,36 +472,36 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n                 \"Note that the transaction's inputs are not signed, and\\n\"\n                 \"it is not stored in the wallet or transmitted to the network.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* default */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n                                 },\n                                 },\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125-replaceable.\\n\"\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125-replaceable.\\n\"\n             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n@@ -536,8 +536,8 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n             \"                         If iswitness is not present, heuristic tests will be used in decoding\"},\n                 },\n                 RPCResult{\n@@ -611,7 +611,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             RPCHelpMan{\"decodescript\",\n                 \"\\nDecode a hex-encoded script.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded script\"},\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -711,9 +711,9 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                 \"The combined transaction may be another partially signed transaction or a \\n\"\n                 \"fully signed transaction.\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of hex strings of partially signed transactions\",\n+                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of hex strings of partially signed transactions\",\n                         {\n-                            {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n+                            {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A transaction hash\"},\n                         },\n                         },\n                 },\n@@ -936,26 +936,26 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                 \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n                 \"this transaction depends on but may not yet be in the block chain.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"privkeys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base58-encoded private keys for signing\",\n+                    {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"privkeys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base58-encoded private keys for signing\",\n                         {\n-                            {\"privatekey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"private key in base58-encoding\"},\n+                            {\"privatekey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"private key in base58-encoding\"},\n                         },\n                         },\n-                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of previous dependent transaction outputs\",\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of previous dependent transaction outputs\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"omitted\", \"(required for P2SH or P2WSH) redeem script\"},\n-                                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type. Must be one of:\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type. Must be one of:\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -1023,8 +1023,8 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n                 \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n+                    {\"allowhighfees\", RPCArg::Type::BOOL, /* default */ \"false\", \"Allow high fees\"},\n                 },\n                 RPCResult{\n             \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n@@ -1122,13 +1122,13 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                 \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n                 {\n-                    {\"rawtxs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"An array of hex strings of raw transactions.\\n\"\n+                    {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\\n\"\n             \"                                        Length must be one for now.\",\n                         {\n-                            {\"rawtx\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"\"},\n+                            {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n+                    {\"allowhighfees\", RPCArg::Type::BOOL, /* default */ \"false\", \"Allow high fees\"},\n                 },\n                 RPCResult{\n             \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n@@ -1223,7 +1223,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n             RPCHelpMan{\"decodepsbt\",\n                 \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The PSBT base64 string\"},\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The PSBT base64 string\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1499,9 +1499,9 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                 \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n                 \"Implements the Combiner role.\\n\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base64 strings of partially signed transactions\",\n+                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n                         {\n-                            {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n+                            {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A base64 string of a PSBT\"},\n                         },\n                         },\n                 },\n@@ -1559,8 +1559,8 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n                 \"created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\\n\"\n                 \"Implements the Finalizer and Extractor roles.\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n-                    {\"extract\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"If true and the transaction is complete,\\n\"\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"},\n+                    {\"extract\", RPCArg::Type::BOOL, /* default */ \"true\", \"If true and the transaction is complete,\\n\"\n             \"                             extract and return the complete transaction in normal network serialization instead of the PSBT.\"},\n                 },\n                 RPCResult{\n@@ -1622,36 +1622,36 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator role.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* default */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n                                 },\n                                 },\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n@@ -1698,10 +1698,10 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of a raw transaction\"},\n-                    {\"permitsigdata\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of a raw transaction\"},\n+                    {\"permitsigdata\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n                             \"                              will continue. If false, RPC will fail if any signatures are present.\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n                             \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n                             \"                              permitsigdata is true.\"},"
      },
      {
        "sha": "cd90573da0ed32c589e9d4259caed4e2b842e2eb",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -230,7 +230,7 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n             RPCHelpMan{\"help\",\n                 \"\\nList all commands, or get help for a specified command.\\n\",\n                 {\n-                    {\"command\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all commands\", \"The command to get help on\"},\n+                    {\"command\", RPCArg::Type::STR, /* default */ \"all commands\", \"The command to get help on\"},\n                 },\n                 RPCResult{\n             \"\\\"text\\\"     (string) The help text\\n\""
      },
      {
        "sha": "5599be815ba5e97e53cd093130b7335f22709ad9",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 18,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -170,12 +170,12 @@ struct Sections {\n                 left += outer_type == OuterType::OBJ ? arg.ToStringObj(/* oneline */ false) : arg.ToString(/* oneline */ false);\n             }\n             left += \",\";\n-            PushSection({left, arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR)});\n+            PushSection({left, arg.ToDescriptionString()});\n             break;\n         }\n         case RPCArg::Type::OBJ:\n         case RPCArg::Type::OBJ_USER_KEYS: {\n-            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR);\n+            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString();\n             PushSection({indent + \"{\", right});\n             for (const auto& arg_inner : arg.m_inner) {\n                 Push(arg_inner, current_indent + 2, OuterType::OBJ);\n@@ -190,7 +190,7 @@ struct Sections {\n             auto left = indent;\n             left += outer_type == OuterType::OBJ ? \"\\\"\" + arg.m_name + \"\\\": \" : \"\";\n             left += \"[\";\n-            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR);\n+            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString();\n             PushSection({left, right});\n             for (const auto& arg_inner : arg.m_inner) {\n                 Push(arg_inner, current_indent + 2, OuterType::ARR);\n@@ -283,8 +283,14 @@ std::string RPCHelpMan::ToString() const\n     ret += m_name;\n     bool was_optional{false};\n     for (const auto& arg : m_args) {\n+        bool optional;\n+        if (arg.m_fallback.which() == 1) {\n+            optional = true;\n+        } else {\n+            optional = RPCArg::Optional::NO != boost::get<RPCArg::Optional>(arg.m_fallback);\n+        }\n         ret += \" \";\n-        if (arg.m_optional) {\n+        if (optional) {\n             if (!was_optional) ret += \"( \";\n             was_optional = true;\n         } else {\n@@ -324,7 +330,7 @@ std::string RPCHelpMan::ToString() const\n     return ret;\n }\n \n-std::string RPCArg::ToDescriptionString(const bool implicitly_required) const\n+std::string RPCArg::ToDescriptionString() const\n {\n     std::string ret;\n     ret += \"(\";\n@@ -362,19 +368,24 @@ std::string RPCArg::ToDescriptionString(const bool implicitly_required) const\n             // no default case, so the compiler can warn about missing cases\n         }\n     }\n-    if (!implicitly_required) {\n-        ret += \", \";\n-        if (m_optional) {\n-            ret += \"optional\";\n-            if (!m_default_value.empty()) {\n-                ret += \", default=\" + m_default_value;\n-            } else {\n-                // TODO enable this assert, when all optional parameters have their default value documented\n-                //assert(false);\n-            }\n-        } else {\n-            ret += \"required\";\n-            assert(m_default_value.empty()); // Default value is ignored, and must not be present\n+    if (m_fallback.which() == 1) {\n+        ret += \", optional, default=\" + boost::get<std::string>(m_fallback);\n+    } else {\n+        switch (boost::get<RPCArg::Optional>(m_fallback)) {\n+        case RPCArg::Optional::OMITTED: {\n+            // nothing to do. Element is treated as if not present and has no default value\n+            break;\n+        }\n+        case RPCArg::Optional::OMITTED_NAMED_ARG: {\n+            ret += \", optional\"; // Default value is \"null\"\n+            break;\n+        }\n+        case RPCArg::Optional::NO: {\n+            ret += \", required\";\n+            break;\n+        }\n+\n+            // no default case, so the compiler can warn about missing cases\n         }\n     }\n     ret += \")\";"
      },
      {
        "sha": "e296ee68c9b0794322689529adbea17272d4dcce",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 26,
        "deletions": 12,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -12,6 +12,8 @@\n #include <string>\n #include <vector>\n \n+#include <boost/variant.hpp>\n+\n class CKeyStore;\n class CPubKey;\n class CScript;\n@@ -39,27 +41,42 @@ struct RPCArg {\n         AMOUNT,        //!< Special type representing a floating point amount (can be either NUM or STR)\n         STR_HEX,       //!< Special type that is a STR with only hex chars\n     };\n+\n+    enum class Optional {\n+        /** Required arg */\n+        NO,\n+        /**\n+         * Optinal arg that is a named argument and has a default value of\n+         * `null`. When possible, the default value should be specified.\n+         */\n+        OMITTED_NAMED_ARG,\n+        /**\n+         * Optional argument with default value omitted because they are\n+         * implicitly clear. That is, elements in an array or object may not\n+         * exist by default.\n+         * When possible, the default value should be specified.\n+         */\n+        OMITTED,\n+    };\n+    using Fallback = boost::variant<Optional, /* default value for optional args */ std::string>;\n     const std::string m_name; //!< The name of the arg (can be empty for inner args)\n     const Type m_type;\n     const std::vector<RPCArg> m_inner; //!< Only used for arrays or dicts\n-    const bool m_optional;\n-    const std::string m_default_value; //!< Only used for optional args\n+    const Fallback m_fallback;\n     const std::string m_description;\n     const std::string m_oneline_description; //!< Should be empty unless it is supposed to override the auto-generated summary line\n     const std::vector<std::string> m_type_str; //!< Should be empty unless it is supposed to override the auto-generated type strings. Vector length is either 0 or 2, m_type_str.at(0) will override the type of the value in a key-value pair, m_type_str.at(1) will override the type in the argument description.\n \n     RPCArg(\n         const std::string& name,\n         const Type& type,\n-        const bool opt,\n-        const std::string& default_val,\n+        const Fallback& fallback,\n         const std::string& description,\n         const std::string& oneline_description = \"\",\n         const std::vector<std::string>& type_str = {})\n         : m_name{name},\n           m_type{type},\n-          m_optional{opt},\n-          m_default_value{default_val},\n+          m_fallback{fallback},\n           m_description{description},\n           m_oneline_description{oneline_description},\n           m_type_str{type_str}\n@@ -70,17 +87,15 @@ struct RPCArg {\n     RPCArg(\n         const std::string& name,\n         const Type& type,\n-        const bool opt,\n-        const std::string& default_val,\n+        const Fallback& fallback,\n         const std::string& description,\n         const std::vector<RPCArg>& inner,\n         const std::string& oneline_description = \"\",\n         const std::vector<std::string>& type_str = {})\n         : m_name{name},\n           m_type{type},\n           m_inner{inner},\n-          m_optional{opt},\n-          m_default_value{default_val},\n+          m_fallback{fallback},\n           m_description{description},\n           m_oneline_description{oneline_description},\n           m_type_str{type_str}\n@@ -101,9 +116,8 @@ struct RPCArg {\n     /**\n      * Return the description string, including the argument type and whether\n      * the argument is required.\n-     * implicitly_required is set for arguments in an array, which are neither optional nor required.\n      */\n-    std::string ToDescriptionString(bool implicitly_required = false) const;\n+    std::string ToDescriptionString() const;\n };\n \n struct RPCResult {"
      },
      {
        "sha": "ec49efcf2246932a770537f5d088324f28d473ce",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -116,9 +116,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n                 {\n-                    {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key (see dumpprivkey)\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key (see dumpprivkey)\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -286,10 +286,10 @@ UniValue importaddress(const JSONRPCRequest& request)\n             \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n             \"as change, and not show up in many RPCs.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The Bitcoin address (or hex-encoded script)\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n-                    {\"p2sh\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Add the P2SH version of the script as well\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The Bitcoin address (or hex-encoded script)\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"p2sh\", RPCArg::Type::BOOL, /* default */ \"false\", \"Add the P2SH version of the script as well\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -364,8 +364,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n             RPCHelpMan{\"importprunedfunds\",\n                 \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\",\n                 {\n-                    {\"rawtransaction\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A raw transaction in hex funding an already-existing address in wallet\"},\n-                    {\"txoutproof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex output from gettxoutproof that contains the transaction\"},\n+                    {\"rawtransaction\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A raw transaction in hex funding an already-existing address in wallet\"},\n+                    {\"txoutproof\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex output from gettxoutproof that contains the transaction\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n@@ -431,7 +431,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             RPCHelpMan{\"removeprunedfunds\",\n                 \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded id of the transaction you are deleting\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded id of the transaction you are deleting\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -475,9 +475,9 @@ UniValue importpubkey(const JSONRPCRequest& request)\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n                 {\n-                    {\"pubkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"pubkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The hex-encoded public key\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -548,7 +548,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"importwallet\",\n                 \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet file\"},\n+                    {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet file\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -709,7 +709,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                 \"\\nReveals the private key corresponding to 'address'.\\n\"\n                 \"Then the importprivkey can be used with this output\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for the private key\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for the private key\"},\n                 },\n                 RPCResult{\n             \"\\\"key\\\"                (string) The private key\\n\"\n@@ -759,7 +759,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n                 \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The filename with path (either absolute or relative to bitcoind)\"},\n+                    {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The filename with path (either absolute or relative to bitcoind)\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -1319,50 +1319,50 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n                 {\n-                    {\"requests\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"Data to be imported\",\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"desc\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Descriptor to import. If using descriptor, do not also provide address/scriptPubKey, scripts, or pubkeys\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Descriptor to import. If using descriptor, do not also provide address/scriptPubKey, scripts, or pubkeys\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n                                         /* oneline_description */ \"\", {\"\\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }\", \"string / json\"}\n                                     },\n-                                    {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n         \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n         \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n         \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n         \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n         \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\",\n                                         /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n                                     },\n-                                    {\"redeemscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"omitted\", \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n-                                    {\"witnessscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"omitted\", \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n-                                    {\"pubkeys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"Array of strings giving pubkeys to import. They must occur in P2PKH or P2WPKH scripts. They are not required when the private key is also provided (see the \\\"keys\\\" argument).\",\n+                                    {\"redeemscript\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n+                                    {\"witnessscript\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n+                                    {\"pubkeys\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Array of strings giving pubkeys to import. They must occur in P2PKH or P2WPKH scripts. They are not required when the private key is also provided (see the \\\"keys\\\" argument).\",\n                                         {\n-                                            {\"pubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n+                                            {\"pubKey\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"keys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"Array of strings giving private keys to import. The corresponding public keys must occur in the output or redeemscript.\",\n+                                    {\"keys\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Array of strings giving private keys to import. The corresponding public keys must occur in the output or redeemscript.\",\n                                         {\n-                                            {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n+                                            {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"range\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n+                                    {\"range\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n                                         {\n-                                            {\"start\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Start of the range to import\"},\n-                                            {\"end\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"End of the range to import (inclusive)\"},\n+                                            {\"start\", RPCArg::Type::NUM, /* default */ \"0\", \"Start of the range to import\"},\n+                                            {\"end\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"End of the range to import (inclusive)\"},\n                                         }\n                                     },\n-                                    {\"internal\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n-                                    {\"watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n-                                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n+                                    {\"watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n+                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n                                 },\n                             },\n                         },\n                         \"\\\"requests\\\"\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n+                            {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n                         },\n                         \"\\\"options\\\"\"},\n                 },"
      },
      {
        "sha": "7dd27d7866416dce2bf787d6857b008339cc5366",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 149,
        "deletions": 149,
        "changes": 298,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "patch": "@@ -158,8 +158,8 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 \"If 'label' is specified, it is added to the address book \\n\"\n                 \"so payments received with the address will be associated with 'label'.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"The label name for the address to be linked to. If not provided, the default label \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"The label name for the address to be linked to. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n@@ -226,7 +226,7 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n                 {\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"\\\"address\\\"    (string) The address\\n\"\n@@ -287,8 +287,8 @@ static UniValue setlabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"setlabel\",\n                 \"\\nSets the label associated with the given address.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to be associated with a label.\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label to assign to the address.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to be associated with a label.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label to assign to the address.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -371,18 +371,18 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n                 \"\\nSend an amount to a given address.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to send to.\"},\n-                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n-                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment used to store what the transaction is for.\\n\"\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to send to.\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment used to store what the transaction is for.\\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\"},\n-                    {\"comment_to\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment to store the name of the person or organization\\n\"\n+                    {\"comment_to\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment to store the name of the person or organization\\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\"},\n-                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n+                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n@@ -527,8 +527,8 @@ static UniValue signmessage(const JSONRPCRequest& request)\n                 \"\\nSign a message with the private key of an address\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the private key.\"},\n-                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to use for the private key.\"},\n+                    {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message to create a signature of.\"},\n                 },\n                 RPCResult{\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n@@ -593,8 +593,8 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"getreceivedbyaddress\",\n                 \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for transactions.\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for transactions.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n@@ -665,8 +665,8 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"getreceivedbylabel\",\n                 \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The selected label, may be the default label using \\\"\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The selected label, may be the default label using \\\"\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this label.\\n\"\n@@ -737,9 +737,9 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n                 \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n+                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\\n\"\n@@ -823,25 +823,25 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                 \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n-                    {\"amounts\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"A json object with addresses and amounts\",\n+                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n+                    {\"amounts\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"A json object with addresses and amounts\",\n                         {\n-                            {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n                         },\n                     },\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only use the balance confirmed at least this many times.\"},\n-                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment\"},\n-                    {\"subtractfeefrom\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array with addresses.\\n\"\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only use the balance confirmed at least this many times.\"},\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment\"},\n+                    {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array with addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n             \"                           If no addresses are specified here, the sender pays the fee.\",\n                         {\n-                            {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Subtract fee from this address\"},\n+                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Subtract fee from this address\"},\n                         },\n                     },\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n@@ -983,14 +983,14 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                 \"See `importaddress` for watchonly p2sh address support.\\n\"\n                 \"If 'label' is specified, assign address to that label.\\n\",\n                 {\n-                    {\"nrequired\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The number of required signatures out of the n keys or addresses.\"},\n-                    {\"keys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of bitcoin addresses or hex-encoded public keys\",\n+                    {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys or addresses.\"},\n+                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of bitcoin addresses or hex-encoded public keys\",\n                         {\n-                            {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"bitcoin address or hex-encoded public key\"},\n+                            {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address or hex-encoded public key\"},\n                         },\n                         },\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A label to assign the addresses to.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A label to assign the addresses to.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1217,10 +1217,10 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"listreceivedbyaddress\",\n                 \"\\nList balances by receiving address.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n-                    {\"address_filter\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If present, only return information on this address.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n+                    {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If present, only return information on this address.\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1270,9 +1270,9 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"listreceivedbylabel\",\n                 \"\\nList received transactions by label.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1411,11 +1411,11 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If set, should be a valid label name to return only incoming transactions\\n\"\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, should be a valid label name to return only incoming transactions\\n\"\n             \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n-                    {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"10\", \"The number of transactions to return\"},\n-                    {\"skip\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"The number of transactions to skip\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"count\", RPCArg::Type::NUM, /* default */ \"10\", \"The number of transactions to return\"},\n+                    {\"skip\", RPCArg::Type::NUM, /* default */ \"0\", \"The number of transactions to skip\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1546,10 +1546,10 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                 \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n                 \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n-                    {\"target_confirmations\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n-                    {\"include_removed\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n+                    {\"blockhash\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n+                    {\"target_confirmations\", RPCArg::Type::NUM, /* default */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"include_removed\", RPCArg::Type::BOOL, /* default */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n             \"                                                           (not guaranteed to work on pruned nodes)\"},\n                 },\n                 RPCResult{\n@@ -1689,8 +1689,8 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettransaction\",\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n+                    {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1795,7 +1795,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n                 \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n                 \"It has no effect on transactions which are already abandoned.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1839,7 +1839,7 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"backupwallet\",\n                 \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n                 {\n-                    {\"destination\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The destination directory or file\"},\n+                    {\"destination\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The destination directory or file\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1879,7 +1879,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                 \"\\nFills the keypool.\"+\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"newsize\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"100\", \"The new keypool size\"},\n+                    {\"newsize\", RPCArg::Type::NUM, /* default */ \"100\", \"The new keypool size\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1932,8 +1932,8 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n             \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n             \"time that overrides the old one.\\n\",\n                 {\n-                    {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet passphrase\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\"},\n+                    {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet passphrase\"},\n+                    {\"timeout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2015,8 +2015,8 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n             RPCHelpMan{\"walletpassphrasechange\",\n                 \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\",\n                 {\n-                    {\"oldpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The current passphrase\"},\n-                    {\"newpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The new passphrase\"},\n+                    {\"oldpassphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The current passphrase\"},\n+                    {\"newpassphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The new passphrase\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2117,7 +2117,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n                 \"Use the walletpassphrase call for this, and then walletlock call.\\n\"\n                 \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\",\n                 {\n-                    {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\"},\n+                    {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2179,13 +2179,13 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                 \"is always cleared (by virtue of process exit) when a node stops or fails.\\n\"\n                 \"Also see the listunspent call\\n\",\n                 {\n-                    {\"unlock\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"Whether to unlock (true) or lock (false) the specified transactions\"},\n-                    {\"transactions\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of objects. Each object the txid (string) vout (numeric).\",\n+                    {\"unlock\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"Whether to unlock (true) or lock (false) the specified transactions\"},\n+                    {\"transactions\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of objects. Each object the txid (string) vout (numeric).\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                 },\n                             },\n                         },\n@@ -2359,7 +2359,7 @@ static UniValue settxfee(const JSONRPCRequest& request)\n             RPCHelpMan{\"settxfee\",\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\",\n                 {\n-                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n                 },\n                 RPCResult{\n             \"true|false        (boolean) Returns true if successful\\n\"\n@@ -2540,7 +2540,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n                 \"\\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet directory or .dat file.\"},\n+                    {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -2594,9 +2594,9 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"createwallet\",\n                 \"\\nCreates and loads a new wallet.\\n\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n-                    {\"disable_private_keys\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n-                    {\"blank\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n+                    {\"wallet_name\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n+                    {\"disable_private_keys\", RPCArg::Type::BOOL, /* default */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n+                    {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -2655,7 +2655,7 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n+                    {\"wallet_name\", RPCArg::Type::STR, /* default */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2750,21 +2750,21 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n                 \"Optionally filter to only include txouts paid to specified addresses.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum confirmations to filter\"},\n-                    {\"maxconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"9999999\", \"The maximum confirmations to filter\"},\n-                    {\"addresses\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of bitcoin addresses to filter\",\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum confirmations to filter\"},\n+                    {\"maxconf\", RPCArg::Type::NUM, /* default */ \"9999999\", \"The maximum confirmations to filter\"},\n+                    {\"addresses\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of bitcoin addresses to filter\",\n                         {\n-                            {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"bitcoin address\"},\n+                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address\"},\n                         },\n                     },\n-                    {\"include_unsafe\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Include outputs that are not safe to spend\\n\"\n+                    {\"include_unsafe\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include outputs that are not safe to spend\\n\"\n             \"                  See description of \\\"safe\\\" attribute below.\"},\n-                    {\"query_options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"JSON with query options\",\n+                    {\"query_options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"JSON with query options\",\n                         {\n-                            {\"minimumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumCount\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"unlimited\", \"Maximum number of UTXOs\"},\n-                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n+                            {\"minimumAmount\", RPCArg::Type::AMOUNT, /* default */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumAmount\", RPCArg::Type::AMOUNT, /* default */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumCount\", RPCArg::Type::NUM, /* default */ \"unlimited\", \"Maximum number of UTXOs\"},\n+                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, /* default */ \"unlimited\", \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n                         },\n                         \"query_options\"},\n                 },\n@@ -3052,33 +3052,33 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 \"You can see whether this is the case by checking the \\\"solvable\\\" field in the listunspent output.\\n\"\n                 \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n                         {\n-                            {\"changeAddress\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of integers.\\n\"\n+                            {\"changeAddress\", RPCArg::Type::STR, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n                                 {\n-                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The zero-based output index, before a change output is added.\"},\n+                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding\"},\n                 },\n                 RPCResult{\n@@ -3139,21 +3139,21 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                 \"this transaction depends on but may not yet be in the block chain.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of previous dependent transaction outputs\",\n+                    {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of previous dependent transaction outputs\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"omitted\", \"(required for P2SH or P2WSH)\"},\n-                                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                             },\n                         },\n                     },\n-                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type. Must be one of\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -3222,22 +3222,22 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n                 \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The txid to be bumped\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"confTarget\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                            {\"totalFee\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+                            {\"confTarget\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                            {\"totalFee\", RPCArg::Type::NUM, /* default */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n             \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n             \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n             \"                         the dust threshold.\"},\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether the new transaction should still be\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n             \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n             \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n             \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n             \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"         \\\"UNSET\\\"\\n\"\n             \"         \\\"ECONOMICAL\\\"\\n\"\n             \"         \\\"CONSERVATIVE\\\"\"},\n@@ -3369,8 +3369,8 @@ UniValue generate(const JSONRPCRequest& request)\n             RPCHelpMan{\"generate\",\n                 \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n                 },\n                 RPCResult{\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n@@ -3424,8 +3424,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             RPCHelpMan{\"rescanblockchain\",\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\",\n                 {\n-                    {\"start_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"block height where the rescan should start\"},\n-                    {\"stop_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /* default */ \"0\", \"block height where the rescan should start\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -3638,7 +3638,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n                 \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n                 \"to be in the wallet.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to get the information of.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to get the information of.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -3765,7 +3765,7 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"getaddressesbylabel\",\n                 \"\\nReturns the list of addresses assigned the specified label.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label.\"},\n                 },\n                 RPCResult{\n             \"{ (json object with addresses as keys)\\n\"\n@@ -3813,7 +3813,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n-                    {\"purpose\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n+                    {\"purpose\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n                 },\n                 RPCResult{\n             \"[               (json array of string)\\n\"\n@@ -3873,11 +3873,11 @@ UniValue sethdseed(const JSONRPCRequest& request)\n                 \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"newkeypool\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+                    {\"newkeypool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n             \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n             \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n             \"                             keypool will be used until it has been depleted.\"},\n-                    {\"seed\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n+                    {\"seed\", RPCArg::Type::STR, /* default */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n             \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n                 },\n                 RPCResults{},\n@@ -4018,16 +4018,16 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n                 \"that we can sign for.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction base64 string\"},\n-                    {\"sign\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Also sign the transaction when updating\"},\n-                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction base64 string\"},\n+                    {\"sign\", RPCArg::Type::BOOL, /* default */ \"true\", \"Also sign the transaction when updating\"},\n+                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -4082,61 +4082,61 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The sequence number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n                                 },\n                             },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n                                 },\n                                 },\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                             },\n                         },\n                     },\n-                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"changeAddress\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of integers.\\n\"\n+                            {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n                                 {\n-                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The zero-based output index, before a change output is added.\"},\n+                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n                             \"{\\n\""
      }
    ]
  },
  {
    "sha": "1bc149d05b09d716723d2f091250fab38fd70fc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmMxNDlkMDViMDlkNzE2NzIzZDJmMDkxMjUwZmFiMzhmZDcwZmMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T14:59:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T15:00:01Z"
      },
      "message": "Merge #15353: docs: Minor textual improvements in translation_strings_policy.md\n\na94e470921 A few textual improvements (Martin Erlandsson)\n\nPull request description:\n\n  Found a few places where the reading flow was interrupted by minor grammar and punctuation issues.\n\nTree-SHA512: 50640288449eb035f463bce563d259efbe97c14517d92c916e1bc52b7c54961ba2fc6fca1272470153803397f20ae7570bd090c16850ebd0180ebcf6bb2415d1",
      "tree": {
        "sha": "038b319269e824b9f31e26c928f3f6feae1ca6c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/038b319269e824b9f31e26c928f3f6feae1ca6c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bc149d05b09d716723d2f091250fab38fd70fc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcYY3xAAoJENLqSFDnUoslpxkP/iH7pNZiD5G2wSM4EAyS0CgG\nGJJMLqeMzXDt5KCC6Nx/jSYOYvb4BdjbKrke5EU3S3AlF5vn92OHHe46B+hHdacp\nS+HQpRb8ioSGa6MwXkzPkpJjHXjY8hh+JpvAHehxOppE73bmDVlbht6OxcSGB9B/\nkN7KKHSG6tuw2df7BmCYoE5j7Gj8ZkpibAOCtJBoky9tyXikrR1vhRm3GosKRd3K\nU5n9NU0JXBSXiiCOvA0WkImm1gBFYJsk1vHhBYMTdSTqPjgjcBE/IOV/9lCCpGdM\nUK2GTRLRGKnF/c0G5HoYkLy6SaNqAeYfjk+vSTvAJlj4kkVWW1IVWYhUbCNVcbEi\nE05Yv4OLQ/bsCNaW6jvuJiGxRjYc5UgTLAq57oiHHLx/wRYN84OJ2oFRgM5xuNus\nar9DP6nWtuBD0HaxCwqs72kz+YNgc47RKecIf4k5hJBe2y6+RFLPk8ZEp2nyr6Dx\nINpgBxMcKOmFtSYJq/vGXe3ajB4dL5grPdi/y2VpSzO6VoIqhNIJX0TE9zy9WZmK\nijIzoZC0yzra3ttboYVzwoZZK9LTwHDsjaSDwlISBo1u25J3vPFNeHYPSQci6FMY\nthx51xB7P5mpWXJ9OJ7wlVSLreUZXh7LWyEQsgbwkhsPrjM3B4LbpyOgUpsdoaJQ\nR0ois8m+9T6dQ8le3CQV\n=jDIH\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPPbA6dDZszBjYqZP27Rep9Sjgi3/Jec1RRODA0EdDPCCP/wEBHLNxMLKVVj\nvAzA7fhFYPoI8CDN/B1oTdGgdgZayJezd66JQs+WXA2gaQKoH9H9QeFaqQjxBFxh\njfPwCHx9n5QqYxYoAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQhCT7Hr3yGQgSeG7P3ltYIQjwIKWrSSF/rUXb\nfUvY7Jf9DWEGf5UmH3TozRDdvxxxb5ErCPEEXGGN8/AIhNMB1a0UyzEAg9/jDS75\nDI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9y\nZ//wEJ3d1XIMd2QoQsPsexATq2UI8BAZC6m0kGhQXqRUBJwC+V3hCPAgdnkFhiw0\n83LMEyBKcwwAZGUII/BwsVHMNGk4MNGDquQI8QRcYY308AgRu+wE+/s2SACD3+MN\nLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQ\nuFjttXPlZRI94Qr07lgwjAjxBFxhjfPwCCSrNiSJ/eQLAIPf4w0u+QyOIyJodHRw\nczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 038b319269e824b9f31e26c928f3f6feae1ca6c4\nparent ad039aa0d3e8a831559434022b1da1de4d72a847\nparent a94e470921a9d373e4c6e418adf3b4e185a96b54\nauthor MarcoFalke <falke.marco@gmail.com> 1549897198 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549897201 -0500\n\nMerge #15353: docs: Minor textual improvements in translation_strings_policy.md\n\na94e470921 A few textual improvements (Martin Erlandsson)\n\nPull request description:\n\n  Found a few places where the reading flow was interrupted by minor grammar and punctuation issues.\n\nTree-SHA512: 50640288449eb035f463bce563d259efbe97c14517d92c916e1bc52b7c54961ba2fc6fca1272470153803397f20ae7570bd090c16850ebd0180ebcf6bb2415d1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc149d05b09d716723d2f091250fab38fd70fc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc149d05b09d716723d2f091250fab38fd70fc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc149d05b09d716723d2f091250fab38fd70fc2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad039aa0d3e8a831559434022b1da1de4d72a847",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad039aa0d3e8a831559434022b1da1de4d72a847",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad039aa0d3e8a831559434022b1da1de4d72a847"
      },
      {
        "sha": "a94e470921a9d373e4c6e418adf3b4e185a96b54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a94e470921a9d373e4c6e418adf3b4e185a96b54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a94e470921a9d373e4c6e418adf3b4e185a96b54"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "634aca35597ccf72580a4095b867c65ad1e67e3d",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bc149d05b09d716723d2f091250fab38fd70fc2/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bc149d05b09d716723d2f091250fab38fd70fc2/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=1bc149d05b09d716723d2f091250fab38fd70fc2",
        "patch": "@@ -33,25 +33,25 @@ General recommendations\n \n Try not to burden translators with translating messages that are e.g. slight variations of other messages.\n In the GUI, avoid the use of text where an icon or symbol will do.\n-Make sure that placeholder texts in forms don't end up in the list of strings to be translated (use `<string notr=\"true\">`).\n+Make sure that placeholder texts in forms do not end up in the list of strings to be translated (use `<string notr=\"true\">`).\n \n ### Make translated strings understandable\n \n-Try to write translation strings in an understandable way, for both the user and the translator. Avoid overly technical or detailed messages\n+Try to write translation strings in an understandable way, for both the user and the translator. Avoid overly technical or detailed messages.\n \n ### Do not translate internal errors\n \n-Do not translate internal errors, or log messages, or messages that appear on the RPC interface. If an error is to be shown to the user,\n-use a translatable generic message, then log the detailed message to the log. E.g. \"A fatal internal error occurred, see debug.log for details\".\n+Do not translate internal errors, log messages, or messages that appear on the RPC interface. If an error is to be shown to the user,\n+use a translatable generic message, then log the detailed message to the log. E.g., \"A fatal internal error occurred, see debug.log for details\".\n This helps troubleshooting; if the error is the same for everyone, the likelihood is increased that it can be found using a search engine.\n \n ### Avoid fragments\n \n-Avoid dividing up a message into fragments. Translators see every string separately, so may misunderstand the context if the messages are not self-contained.\n+Avoid dividing up a message into fragments. Translators see every string separately, so they may misunderstand the context if the messages are not self-contained.\n \n ### Avoid HTML in translation strings\n \n-There have been difficulties with use of HTML in translation strings; translators should not be able to accidentally affect the formatting of messages.\n+There have been difficulties with the use of HTML in translation strings; translators should not be able to accidentally affect the formatting of messages.\n This may sometimes be at conflict with the recommendation in the previous section.\n \n ### Plurals\n@@ -66,7 +66,7 @@ Plurals can be complex in some languages. A quote from the gettext documentation\n     25-31 pliko'w\n     and so on\n \n-In Qt code use tr's third argument for optional plurality. For example:\n+In Qt code, use tr's third argument for optional plurality. For example:\n \n     tr(\"%n hour(s)\",\"\",secs/HOUR_IN_SECONDS);\n     tr(\"%n day(s)\",\"\",secs/DAY_IN_SECONDS);\n@@ -82,7 +82,7 @@ This adds `<numerusform>`s to the respective `.ts` file, which can be translated\n         </translation>\n     </message>\n \n-Where it is possible try to avoid embedding numbers into the flow of the string at all. e.g.\n+Where possible, try to avoid embedding numbers into the flow of the string at all. E.g.,\n \n     WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)\n "
      }
    ]
  },
  {
    "sha": "9975282fa80b1ffd6274d5c7fcff4494375e3f9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTc1MjgyZmE4MGIxZmZkNjI3NGQ1YzdmY2ZmNDQ5NDM3NWUzZjli",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-12-30T10:06:53Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-11T15:08:41Z"
      },
      "message": "GUI: If BIP70 is disabled, attempt to fall back to BIP21 parsing",
      "tree": {
        "sha": "ab3d71df24ece0d4959c8c5be43de5d89a3a0d1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab3d71df24ece0d4959c8c5be43de5d89a3a0d1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9975282fa80b1ffd6274d5c7fcff4494375e3f9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9975282fa80b1ffd6274d5c7fcff4494375e3f9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9975282fa80b1ffd6274d5c7fcff4494375e3f9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9975282fa80b1ffd6274d5c7fcff4494375e3f9b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bc149d05b09d716723d2f091250fab38fd70fc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc149d05b09d716723d2f091250fab38fd70fc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc149d05b09d716723d2f091250fab38fd70fc2"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9e8afc8aa4d255181eb779929357ac1f2a10ddd0",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9975282fa80b1ffd6274d5c7fcff4494375e3f9b/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9975282fa80b1ffd6274d5c7fcff4494375e3f9b/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=9975282fa80b1ffd6274d5c7fcff4494375e3f9b",
        "patch": "@@ -292,9 +292,9 @@ void PaymentServer::handleURIOrFile(const QString& s)\n     else if (s.startsWith(BITCOIN_IPC_PREFIX, Qt::CaseInsensitive)) // bitcoin: URI\n     {\n         QUrlQuery uri((QUrl(s)));\n+#ifdef ENABLE_BIP70\n         if (uri.hasQueryItem(\"r\")) // payment request URI\n         {\n-#ifdef ENABLE_BIP70\n             Q_EMIT message(tr(\"URI handling\"),\n                 tr(\"You are using a BIP70 URL which will be unsupported in the future.\"),\n                 CClientUIInterface::ICON_WARNING);\n@@ -315,19 +315,23 @@ void PaymentServer::handleURIOrFile(const QString& s)\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n             }\n-#else\n-            Q_EMIT message(tr(\"URI handling\"),\n-                tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n-                CClientUIInterface::ICON_WARNING);\n-#endif\n             return;\n         }\n-        else // normal URI\n+        else\n+#endif\n+        // normal URI\n         {\n             SendCoinsRecipient recipient;\n             if (GUIUtil::parseBitcoinURI(s, &recipient))\n             {\n                 if (!IsValidDestinationString(recipient.address.toStdString())) {\n+#ifndef ENABLE_BIP70\n+                    if (uri.hasQueryItem(\"r\")) {  // payment request\n+                        Q_EMIT message(tr(\"URI handling\"),\n+                            tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n+                            CClientUIInterface::ICON_WARNING);\n+                    }\n+#endif\n                     Q_EMIT message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n                         CClientUIInterface::MSG_ERROR);\n                 }"
      }
    ]
  },
  {
    "sha": "113f0004bec2dd203502f2a9bcba93676d5b9cda",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTNmMDAwNGJlYzJkZDIwMzUwMmYyYTliY2JhOTM2NzZkNWI5Y2Rh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-12-31T02:48:46Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-11T15:08:41Z"
      },
      "message": "GUI: If BIP70 is disabled, give a proper error when trying to open a payment request file",
      "tree": {
        "sha": "e105af8080a3b69e1489322cdc68494c0e065fb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e105af8080a3b69e1489322cdc68494c0e065fb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/113f0004bec2dd203502f2a9bcba93676d5b9cda",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113f0004bec2dd203502f2a9bcba93676d5b9cda",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/113f0004bec2dd203502f2a9bcba93676d5b9cda",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113f0004bec2dd203502f2a9bcba93676d5b9cda/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9975282fa80b1ffd6274d5c7fcff4494375e3f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9975282fa80b1ffd6274d5c7fcff4494375e3f9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9975282fa80b1ffd6274d5c7fcff4494375e3f9b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "43dccec4ea4bb0b7bd773438128011a811395ed0",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/113f0004bec2dd203502f2a9bcba93676d5b9cda/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/113f0004bec2dd203502f2a9bcba93676d5b9cda/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=113f0004bec2dd203502f2a9bcba93676d5b9cda",
        "patch": "@@ -347,9 +347,9 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         }\n     }\n \n-#ifdef ENABLE_BIP70\n     if (QFile::exists(s)) // payment request file\n     {\n+#ifdef ENABLE_BIP70\n         PaymentRequestPlus request;\n         SendCoinsRecipient recipient;\n         if (!readPaymentRequestFromFile(s, request))\n@@ -362,8 +362,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             Q_EMIT receivedPaymentRequest(recipient);\n \n         return;\n-    }\n+#else\n+        Q_EMIT message(tr(\"Payment request file handling\"),\n+            tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n+            CClientUIInterface::ICON_WARNING);\n #endif\n+    }\n }\n \n void PaymentServer::handleURIConnection()"
      }
    ]
  },
  {
    "sha": "84f53154e1a0309ef582443476451748eb982805",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGY1MzE1NGUxYTAzMDllZjU4MjQ0MzQ3NjQ1MTc0OGViOTgyODA1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-12-31T02:52:31Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-11T15:14:33Z"
      },
      "message": "Travis: Add test without BIP70 (but still full wallet + tests)",
      "tree": {
        "sha": "a74d8195f8226cd729894021ca435be00d214206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a74d8195f8226cd729894021ca435be00d214206"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84f53154e1a0309ef582443476451748eb982805",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84f53154e1a0309ef582443476451748eb982805",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84f53154e1a0309ef582443476451748eb982805",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84f53154e1a0309ef582443476451748eb982805/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "113f0004bec2dd203502f2a9bcba93676d5b9cda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113f0004bec2dd203502f2a9bcba93676d5b9cda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/113f0004bec2dd203502f2a9bcba93676d5b9cda"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "41532b9260e8f153bce42f2cba7ece2641e4ba96",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84f53154e1a0309ef582443476451748eb982805/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84f53154e1a0309ef582443476451748eb982805/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=84f53154e1a0309ef582443476451748eb982805",
        "patch": "@@ -132,6 +132,15 @@ jobs:\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n \n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [no BIP70]'\n+      env: >-\n+        HOST=x86_64-unknown-linux-gnu\n+        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+        NO_DEPENDS=1\n+        GOAL=\"install\"\n+        BITCOIN_CONFIG=\"--enable-zmq --disable-bip70 --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n+\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n       env: >-"
      }
    ]
  },
  {
    "sha": "162ffefd2f562169725559906601c25c579aa91c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjJmZmVmZDJmNTYyMTY5NzI1NTU5OTA2NjAxYzI1YzU3OWFhOTFj",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-01-29T06:44:11Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-02-11T20:23:14Z"
      },
      "message": "Add pf_invalid arg to std::string DecodeBase{32,64}\n\nAdd support for the optional \"pf_invalid\" out parameter (which allows the caller\nto detect decoding failures) to the std::string versions of DecodeBase32 and\nDecodeBase64. The char* versions already have this feature.\n\nAlso, rename all uses of pfInvalid to pf_invalid to match style guidelines.",
      "tree": {
        "sha": "1ab7e3660d0a07d6e92dcabddc8875e392452aed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ab7e3660d0a07d6e92dcabddc8875e392452aed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/162ffefd2f562169725559906601c25c579aa91c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/162ffefd2f562169725559906601c25c579aa91c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/162ffefd2f562169725559906601c25c579aa91c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/162ffefd2f562169725559906601c25c579aa91c/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bc149d05b09d716723d2f091250fab38fd70fc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc149d05b09d716723d2f091250fab38fd70fc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc149d05b09d716723d2f091250fab38fd70fc2"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b55547bc63cd4e7f39e9147c000aa650149c11cf",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/162ffefd2f562169725559906601c25c579aa91c/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/162ffefd2f562169725559906601c25c579aa91c/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=162ffefd2f562169725559906601c25c579aa91c",
        "patch": "@@ -141,7 +141,7 @@ std::string EncodeBase64(const std::string& str)\n     return EncodeBase64((const unsigned char*)str.c_str(), str.size());\n }\n \n-std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n+std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid)\n {\n     static const int decode64_table[256] =\n     {\n@@ -183,14 +183,14 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n         ++p;\n     }\n     valid = valid && (p - e) % 4 == 0 && p - q < 4;\n-    if (pfInvalid) *pfInvalid = !valid;\n+    if (pf_invalid) *pf_invalid = !valid;\n \n     return ret;\n }\n \n-std::string DecodeBase64(const std::string& str)\n+std::string DecodeBase64(const std::string& str, bool* pf_invalid)\n {\n-    std::vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n+    std::vector<unsigned char> vchRet = DecodeBase64(str.c_str(), pf_invalid);\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n@@ -210,7 +210,7 @@ std::string EncodeBase32(const std::string& str)\n     return EncodeBase32((const unsigned char*)str.c_str(), str.size());\n }\n \n-std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n+std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)\n {\n     static const int decode32_table[256] =\n     {\n@@ -252,14 +252,14 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n         ++p;\n     }\n     valid = valid && (p - e) % 8 == 0 && p - q < 8;\n-    if (pfInvalid) *pfInvalid = !valid;\n+    if (pf_invalid) *pf_invalid = !valid;\n \n     return ret;\n }\n \n-std::string DecodeBase32(const std::string& str)\n+std::string DecodeBase32(const std::string& str, bool* pf_invalid)\n {\n-    std::vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n+    std::vector<unsigned char> vchRet = DecodeBase32(str.c_str(), pf_invalid);\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n "
      },
      {
        "sha": "59eefff566f258a26c1ebcc966522837fa1534b7",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/162ffefd2f562169725559906601c25c579aa91c/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/162ffefd2f562169725559906601c25c579aa91c/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=162ffefd2f562169725559906601c25c579aa91c",
        "patch": "@@ -44,12 +44,12 @@ bool IsHex(const std::string& str);\n * Return true if the string is a hex number, optionally prefixed with \"0x\"\n */\n bool IsHexNumber(const std::string& str);\n-std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = nullptr);\n-std::string DecodeBase64(const std::string& str);\n+std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid = nullptr);\n+std::string DecodeBase64(const std::string& str, bool* pf_invalid = nullptr);\n std::string EncodeBase64(const unsigned char* pch, size_t len);\n std::string EncodeBase64(const std::string& str);\n-std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid = nullptr);\n-std::string DecodeBase32(const std::string& str);\n+std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid = nullptr);\n+std::string DecodeBase32(const std::string& str, bool* pf_invalid = nullptr);\n std::string EncodeBase32(const unsigned char* pch, size_t len);\n std::string EncodeBase32(const std::string& str);\n "
      }
    ]
  },
  {
    "sha": "c734aaa15d924470cec0f17b00ad2e47472b471f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzM0YWFhMTVkOTI0NDcwY2VjMGYxN2IwMGFkMmU0NzQ3MmI0NzFm",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-01-30T05:32:38Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-02-11T20:23:14Z"
      },
      "message": "Split DecodePSBT into Base64 and Raw versions\n\nSplit up DecodePSBT, which both decodes base64 and then deserializes a\nPartiallySignedTransaction, into two functions: DecodeBase64PSBT, which retains\nthe old behavior, and DecodeRawPSBT, which only performs the deserialization.\n\nAdd a test for base64 decoding failure.",
      "tree": {
        "sha": "57a374ce9179e44ba453c2d48014b5375268f965",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57a374ce9179e44ba453c2d48014b5375268f965"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c734aaa15d924470cec0f17b00ad2e47472b471f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c734aaa15d924470cec0f17b00ad2e47472b471f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c734aaa15d924470cec0f17b00ad2e47472b471f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c734aaa15d924470cec0f17b00ad2e47472b471f/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "162ffefd2f562169725559906601c25c579aa91c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/162ffefd2f562169725559906601c25c579aa91c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/162ffefd2f562169725559906601c25c579aa91c"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 25,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ae377eb6e811c592be63b14918677a8bf056524e",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c734aaa15d924470cec0f17b00ad2e47472b471f/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c734aaa15d924470cec0f17b00ad2e47472b471f/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=c734aaa15d924470cec0f17b00ad2e47472b471f",
        "patch": "@@ -37,7 +37,11 @@ bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n  */\n bool ParseHashStr(const std::string& strHex, uint256& result);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n-NODISCARD bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error);\n+\n+//! Decode a base64ed PSBT into a PartiallySignedTransaction\n+NODISCARD bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n+//! Decode a raw (binary blob) PSBT into a PartiallySignedTransaction\n+NODISCARD bool DecodeRawPSBT(PartiallySignedTransaction& decoded_psbt, const std::string& raw_psbt, std::string& error);\n int ParseSighashString(const UniValue& sighash);\n \n // core_write.cpp"
      },
      {
        "sha": "0379098712fc5f70179c35f94e9ba2f54b41de66",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c734aaa15d924470cec0f17b00ad2e47472b471f/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c734aaa15d924470cec0f17b00ad2e47472b471f/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=c734aaa15d924470cec0f17b00ad2e47472b471f",
        "patch": "@@ -176,10 +176,20 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)\n+bool DecodeBase64PSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)\n {\n-    std::vector<unsigned char> tx_data = DecodeBase64(base64_tx.c_str());\n-    CDataStream ss_data(tx_data, SER_NETWORK, PROTOCOL_VERSION);\n+    bool invalid;\n+    std::string tx_data = DecodeBase64(base64_tx, &invalid);\n+    if (invalid) {\n+        error = \"invalid base64\";\n+        return false;\n+    }\n+    return DecodeRawPSBT(psbt, tx_data, error);\n+}\n+\n+bool DecodeRawPSBT(PartiallySignedTransaction& psbt, const std::string& tx_data, std::string& error)\n+{\n+    CDataStream ss_data(tx_data.data(), tx_data.data() + tx_data.size(), SER_NETWORK, PROTOCOL_VERSION);\n     try {\n         ss_data >> psbt;\n         if (!ss_data.empty()) {"
      },
      {
        "sha": "9dac989b977f4065de3ef332fa424486e30c05e1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c734aaa15d924470cec0f17b00ad2e47472b471f/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c734aaa15d924470cec0f17b00ad2e47472b471f/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c734aaa15d924470cec0f17b00ad2e47472b471f",
        "patch": "@@ -1323,7 +1323,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n     // Unserialize the transactions\n     PartiallySignedTransaction psbtx;\n     std::string error;\n-    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n@@ -1524,7 +1524,7 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n     for (unsigned int i = 0; i < txs.size(); ++i) {\n         PartiallySignedTransaction psbtx;\n         std::string error;\n-        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n             throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n         }\n         psbtxs.push_back(psbtx);\n@@ -1581,7 +1581,7 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n     // Unserialize the transactions\n     PartiallySignedTransaction psbtx;\n     std::string error;\n-    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n "
      },
      {
        "sha": "b01f40b125114f337a6976bc6f706e94b9f5aebf",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c734aaa15d924470cec0f17b00ad2e47472b471f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c734aaa15d924470cec0f17b00ad2e47472b471f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c734aaa15d924470cec0f17b00ad2e47472b471f",
        "patch": "@@ -4046,7 +4046,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     // Unserialize the transaction\n     PartiallySignedTransaction psbtx;\n     std::string error;\n-    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n "
      },
      {
        "sha": "c98f1058282c9d22c47874b5bd8f4d3885e128b2",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c734aaa15d924470cec0f17b00ad2e47472b471f/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c734aaa15d924470cec0f17b00ad2e47472b471f/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=c734aaa15d924470cec0f17b00ad2e47472b471f",
        "patch": "@@ -293,5 +293,8 @@ def run_test(self):\n         psbt = self.nodes[1].walletcreatefundedpsbt([], [{p2pkh : 1}], 0, {\"includeWatching\" : True}, True)\n         self.nodes[0].decodepsbt(psbt['psbt'])\n \n+        # Test decoding error: invalid base64\n+        assert_raises_rpc_error(-22, \"TX decode failed invalid base64\", self.nodes[0].decodepsbt, \";definitely not base64;\")\n+\n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "81cd9588484cb4f4050ea4e239da0681111795db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWNkOTU4ODQ4NGNiNGY0MDUwZWE0ZTIzOWRhMDY4MTExMTc5NWRi",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-01-09T06:16:50Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-02-11T20:23:14Z"
      },
      "message": "Factor BroadcastTransaction out of sendrawtransaction\n\nFactor out a new BroadcastTransaction function, performing the core work of the\nsendrawtransaction rpc, so that it can be used from the GUI code. Move it from\nsrc/rpc/ to src/node/.",
      "tree": {
        "sha": "33f5789d3f2d831d2bfb4098b57a4dea3ec75aea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33f5789d3f2d831d2bfb4098b57a4dea3ec75aea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81cd9588484cb4f4050ea4e239da0681111795db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81cd9588484cb4f4050ea4e239da0681111795db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81cd9588484cb4f4050ea4e239da0681111795db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81cd9588484cb4f4050ea4e239da0681111795db/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c734aaa15d924470cec0f17b00ad2e47472b471f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c734aaa15d924470cec0f17b00ad2e47472b471f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c734aaa15d924470cec0f17b00ad2e47472b471f"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 99,
      "deletions": 65
    },
    "files": [
      {
        "sha": "9a87af2efcb452a311c9496522c020f11f969be5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81cd9588484cb4f4050ea4e239da0681111795db/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81cd9588484cb4f4050ea4e239da0681111795db/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=81cd9588484cb4f4050ea4e239da0681111795db",
        "patch": "@@ -152,6 +152,7 @@ BITCOIN_CORE_H = \\\n   netaddress.h \\\n   netbase.h \\\n   netmessagemaker.h \\\n+  node/transaction.h \\\n   noui.h \\\n   optional.h \\\n   outputtype.h \\\n@@ -255,6 +256,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   net_processing.cpp \\\n+  node/transaction.cpp \\\n   noui.cpp \\\n   outputtype.cpp \\\n   policy/fees.cpp \\"
      },
      {
        "sha": "47c0323f146393600f4fda6fd5a551bc60fcd8df",
        "filename": "src/node/transaction.cpp",
        "status": "added",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81cd9588484cb4f4050ea4e239da0681111795db/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81cd9588484cb4f4050ea4e239da0681111795db/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=81cd9588484cb4f4050ea4e239da0681111795db",
        "patch": "@@ -0,0 +1,79 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <net.h>\n+#include <rpc/server.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <node/transaction.h>\n+\n+#include <future>\n+\n+uint256 BroadcastTransaction(const CTransactionRef tx, const bool allowhighfees) {\n+    std::promise<void> promise;\n+    const uint256& hashTx = tx->GetHash();\n+\n+    CAmount nMaxRawTxFee = maxTxFee;\n+    if (allowhighfees)\n+        nMaxRawTxFee = 0;\n+\n+    { // cs_main scope\n+    LOCK(cs_main);\n+    CCoinsViewCache &view = *pcoinsTip;\n+    bool fHaveChain = false;\n+    for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n+        const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n+        fHaveChain = !existingCoin.IsSpent();\n+    }\n+    bool fHaveMempool = mempool.exists(hashTx);\n+    if (!fHaveMempool && !fHaveChain) {\n+        // push to local node and sync with wallets\n+        CValidationState state;\n+        bool fMissingInputs;\n+        if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n+            if (state.IsInvalid()) {\n+                throw JSONRPCError(RPC_TRANSACTION_REJECTED, FormatStateMessage(state));\n+            } else {\n+                if (fMissingInputs) {\n+                    throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+                }\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, FormatStateMessage(state));\n+            }\n+        } else {\n+            // If wallet is enabled, ensure that the wallet has been made aware\n+            // of the new transaction prior to returning. This prevents a race\n+            // where a user might call sendrawtransaction with a transaction\n+            // to/from their wallet, immediately call some wallet RPC, and get\n+            // a stale result because callbacks have not yet been processed.\n+            CallFunctionInValidationInterfaceQueue([&promise] {\n+                promise.set_value();\n+            });\n+        }\n+    } else if (fHaveChain) {\n+        throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n+    } else {\n+        // Make sure we don't block forever if re-sending\n+        // a transaction already in mempool.\n+        promise.set_value();\n+    }\n+\n+    } // cs_main\n+\n+    promise.get_future().wait();\n+\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    CInv inv(MSG_TX, hashTx);\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return hashTx;\n+}"
      },
      {
        "sha": "1916c6db267e8b3f7fd891dc20d65a8addd46795",
        "filename": "src/node/transaction.h",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81cd9588484cb4f4050ea4e239da0681111795db/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81cd9588484cb4f4050ea4e239da0681111795db/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=81cd9588484cb4f4050ea4e239da0681111795db",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TRANSACTION_H\n+#define BITCOIN_NODE_TRANSACTION_H\n+\n+#include <primitives/transaction.h>\n+#include <uint256.h>\n+\n+/** Broadcast a transaction */\n+uint256 BroadcastTransaction(CTransactionRef tx, bool allowhighfees = false);\n+\n+#endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "8e561c61846dbe86534a737f83e4d70a02715a62",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 65,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81cd9588484cb4f4050ea4e239da0681111795db/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81cd9588484cb4f4050ea4e239da0681111795db/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=81cd9588484cb4f4050ea4e239da0681111795db",
        "patch": "@@ -13,7 +13,7 @@\n #include <key_io.h>\n #include <keystore.h>\n #include <merkleblock.h>\n-#include <net.h>\n+#include <node/transaction.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n@@ -24,13 +24,11 @@\n #include <script/script_error.h>\n #include <script/sign.h>\n #include <script/standard.h>\n-#include <txmempool.h>\n #include <uint256.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n-#include <future>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -1041,76 +1039,17 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    std::promise<void> promise;\n-\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n     // parse hex string from parameter\n     CMutableTransaction mtx;\n     if (!DecodeHexTx(mtx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& hashTx = tx->GetHash();\n-\n-    CAmount nMaxRawTxFee = maxTxFee;\n-    if (!request.params[1].isNull() && request.params[1].get_bool())\n-        nMaxRawTxFee = 0;\n-\n-    { // cs_main scope\n-    LOCK(cs_main);\n-    CCoinsViewCache &view = *pcoinsTip;\n-    bool fHaveChain = false;\n-    for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n-        const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n-        fHaveChain = !existingCoin.IsSpent();\n-    }\n-    bool fHaveMempool = mempool.exists(hashTx);\n-    if (!fHaveMempool && !fHaveChain) {\n-        // push to local node and sync with wallets\n-        CValidationState state;\n-        bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n-            if (state.IsInvalid()) {\n-                throw JSONRPCError(RPC_TRANSACTION_REJECTED, FormatStateMessage(state));\n-            } else {\n-                if (fMissingInputs) {\n-                    throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n-                }\n-                throw JSONRPCError(RPC_TRANSACTION_ERROR, FormatStateMessage(state));\n-            }\n-        } else {\n-            // If wallet is enabled, ensure that the wallet has been made aware\n-            // of the new transaction prior to returning. This prevents a race\n-            // where a user might call sendrawtransaction with a transaction\n-            // to/from their wallet, immediately call some wallet RPC, and get\n-            // a stale result because callbacks have not yet been processed.\n-            CallFunctionInValidationInterfaceQueue([&promise] {\n-                promise.set_value();\n-            });\n-        }\n-    } else if (fHaveChain) {\n-        throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n-    } else {\n-        // Make sure we don't block forever if re-sending\n-        // a transaction already in mempool.\n-        promise.set_value();\n-    }\n-\n-    } // cs_main\n-\n-    promise.get_future().wait();\n-\n-    if(!g_connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-\n-    CInv inv(MSG_TX, hashTx);\n-    g_connman->ForEachNode([&inv](CNode* pnode)\n-    {\n-        pnode->PushInventory(inv);\n-    });\n \n-    return hashTx.GetHex();\n+    bool allowhighfees = false;\n+    if (!request.params[1].isNull()) allowhighfees = request.params[1].get_bool();\n+    return BroadcastTransaction(tx, allowhighfees).GetHex();\n }\n \n static UniValue testmempoolaccept(const JSONRPCRequest& request)"
      }
    ]
  },
  {
    "sha": "c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmMzZDQyYTdkNmI1MjUxNDRmYzdmYzY2NTNjZDExMTM5ZDJiMzRh",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-01-09T10:06:29Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-02-11T20:23:14Z"
      },
      "message": "Move PSBT definitions and code to separate files\n\nMove non-wallet PSBT code to src/psbt.{h,cpp}, and PSBT wallet code to\nsrc/wallet/psbtwallet.{h,cpp}. This commit contains only code movement (and\nadjustments to includes and Makefile.am.)",
      "tree": {
        "sha": "861f35c6e35fce6509182384fe42007fe864e88c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/861f35c6e35fce6509182384fe42007fe864e88c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81cd9588484cb4f4050ea4e239da0681111795db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81cd9588484cb4f4050ea4e239da0681111795db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81cd9588484cb4f4050ea4e239da0681111795db"
      }
    ],
    "stats": {
      "total": 1678,
      "additions": 862,
      "deletions": 816
    },
    "files": [
      {
        "sha": "7490d8b7906e479ef8c450650845175c75b6e460",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -162,6 +162,7 @@ BITCOIN_CORE_H = \\\n   policy/rbf.h \\\n   pow.h \\\n   protocol.h \\\n+  psbt.h \\\n   random.h \\\n   reverse_iterator.h \\\n   reverselock.h \\\n@@ -210,6 +211,7 @@ BITCOIN_CORE_H = \\\n   wallet/db.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n+  wallet/psbtwallet.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -310,6 +312,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/init.cpp \\\n+  wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n@@ -423,6 +426,7 @@ libbitcoin_common_a_SOURCES = \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   policy/feerate.cpp \\\n+  psbt.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\"
      },
      {
        "sha": "536a7f4f17d989ee0da301dab93be4ee58f61cf1",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <core_io.h>\n \n+#include <psbt.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <script/script.h>"
      },
      {
        "sha": "97fb39f1c8a97ff8caa995d31aca1685079b8866",
        "filename": "src/psbt.cpp",
        "status": "added",
        "additions": 227,
        "deletions": 0,
        "changes": 227,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -0,0 +1,227 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <psbt.h>\n+#include <util/strencodings.h>\n+\n+PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx) : tx(tx)\n+{\n+    inputs.resize(tx.vin.size());\n+    outputs.resize(tx.vout.size());\n+}\n+\n+bool PartiallySignedTransaction::IsNull() const\n+{\n+    return !tx && inputs.empty() && outputs.empty() && unknown.empty();\n+}\n+\n+void PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n+{\n+    for (unsigned int i = 0; i < inputs.size(); ++i) {\n+        inputs[i].Merge(psbt.inputs[i]);\n+    }\n+    for (unsigned int i = 0; i < outputs.size(); ++i) {\n+        outputs[i].Merge(psbt.outputs[i]);\n+    }\n+    unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+}\n+\n+bool PartiallySignedTransaction::IsSane() const\n+{\n+    for (PSBTInput input : inputs) {\n+        if (!input.IsSane()) return false;\n+    }\n+    return true;\n+}\n+\n+bool PSBTInput::IsNull() const\n+{\n+    return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();\n+}\n+\n+void PSBTInput::FillSignatureData(SignatureData& sigdata) const\n+{\n+    if (!final_script_sig.empty()) {\n+        sigdata.scriptSig = final_script_sig;\n+        sigdata.complete = true;\n+    }\n+    if (!final_script_witness.IsNull()) {\n+        sigdata.scriptWitness = final_script_witness;\n+        sigdata.complete = true;\n+    }\n+    if (sigdata.complete) {\n+        return;\n+    }\n+\n+    sigdata.signatures.insert(partial_sigs.begin(), partial_sigs.end());\n+    if (!redeem_script.empty()) {\n+        sigdata.redeem_script = redeem_script;\n+    }\n+    if (!witness_script.empty()) {\n+        sigdata.witness_script = witness_script;\n+    }\n+    for (const auto& key_pair : hd_keypaths) {\n+        sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n+    }\n+}\n+\n+void PSBTInput::FromSignatureData(const SignatureData& sigdata)\n+{\n+    if (sigdata.complete) {\n+        partial_sigs.clear();\n+        hd_keypaths.clear();\n+        redeem_script.clear();\n+        witness_script.clear();\n+\n+        if (!sigdata.scriptSig.empty()) {\n+            final_script_sig = sigdata.scriptSig;\n+        }\n+        if (!sigdata.scriptWitness.IsNull()) {\n+            final_script_witness = sigdata.scriptWitness;\n+        }\n+        return;\n+    }\n+\n+    partial_sigs.insert(sigdata.signatures.begin(), sigdata.signatures.end());\n+    if (redeem_script.empty() && !sigdata.redeem_script.empty()) {\n+        redeem_script = sigdata.redeem_script;\n+    }\n+    if (witness_script.empty() && !sigdata.witness_script.empty()) {\n+        witness_script = sigdata.witness_script;\n+    }\n+    for (const auto& entry : sigdata.misc_pubkeys) {\n+        hd_keypaths.emplace(entry.second);\n+    }\n+}\n+\n+void PSBTInput::Merge(const PSBTInput& input)\n+{\n+    if (!non_witness_utxo && input.non_witness_utxo) non_witness_utxo = input.non_witness_utxo;\n+    if (witness_utxo.IsNull() && !input.witness_utxo.IsNull()) {\n+        witness_utxo = input.witness_utxo;\n+        non_witness_utxo = nullptr; // Clear out any non-witness utxo when we set a witness one.\n+    }\n+\n+    partial_sigs.insert(input.partial_sigs.begin(), input.partial_sigs.end());\n+    hd_keypaths.insert(input.hd_keypaths.begin(), input.hd_keypaths.end());\n+    unknown.insert(input.unknown.begin(), input.unknown.end());\n+\n+    if (redeem_script.empty() && !input.redeem_script.empty()) redeem_script = input.redeem_script;\n+    if (witness_script.empty() && !input.witness_script.empty()) witness_script = input.witness_script;\n+    if (final_script_sig.empty() && !input.final_script_sig.empty()) final_script_sig = input.final_script_sig;\n+    if (final_script_witness.IsNull() && !input.final_script_witness.IsNull()) final_script_witness = input.final_script_witness;\n+}\n+\n+bool PSBTInput::IsSane() const\n+{\n+    // Cannot have both witness and non-witness utxos\n+    if (!witness_utxo.IsNull() && non_witness_utxo) return false;\n+\n+    // If we have a witness_script or a scriptWitness, we must also have a witness utxo\n+    if (!witness_script.empty() && witness_utxo.IsNull()) return false;\n+    if (!final_script_witness.IsNull() && witness_utxo.IsNull()) return false;\n+\n+    return true;\n+}\n+\n+void PSBTOutput::FillSignatureData(SignatureData& sigdata) const\n+{\n+    if (!redeem_script.empty()) {\n+        sigdata.redeem_script = redeem_script;\n+    }\n+    if (!witness_script.empty()) {\n+        sigdata.witness_script = witness_script;\n+    }\n+    for (const auto& key_pair : hd_keypaths) {\n+        sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n+    }\n+}\n+\n+void PSBTOutput::FromSignatureData(const SignatureData& sigdata)\n+{\n+    if (redeem_script.empty() && !sigdata.redeem_script.empty()) {\n+        redeem_script = sigdata.redeem_script;\n+    }\n+    if (witness_script.empty() && !sigdata.witness_script.empty()) {\n+        witness_script = sigdata.witness_script;\n+    }\n+    for (const auto& entry : sigdata.misc_pubkeys) {\n+        hd_keypaths.emplace(entry.second);\n+    }\n+}\n+\n+bool PSBTOutput::IsNull() const\n+{\n+    return redeem_script.empty() && witness_script.empty() && hd_keypaths.empty() && unknown.empty();\n+}\n+\n+void PSBTOutput::Merge(const PSBTOutput& output)\n+{\n+    hd_keypaths.insert(output.hd_keypaths.begin(), output.hd_keypaths.end());\n+    unknown.insert(output.unknown.begin(), output.unknown.end());\n+\n+    if (redeem_script.empty() && !output.redeem_script.empty()) redeem_script = output.redeem_script;\n+    if (witness_script.empty() && !output.witness_script.empty()) witness_script = output.witness_script;\n+}\n+\n+bool PSBTInputSigned(PSBTInput& input)\n+{\n+    return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n+}\n+\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash)\n+{\n+    PSBTInput& input = psbt.inputs.at(index);\n+    const CMutableTransaction& tx = *psbt.tx;\n+\n+    if (PSBTInputSigned(input)) {\n+        return true;\n+    }\n+\n+    // Fill SignatureData with input info\n+    SignatureData sigdata;\n+    input.FillSignatureData(sigdata);\n+\n+    // Get UTXO\n+    bool require_witness_sig = false;\n+    CTxOut utxo;\n+\n+    // Verify input sanity, which checks that at most one of witness or non-witness utxos is provided.\n+    if (!input.IsSane()) {\n+        return false;\n+    }\n+\n+    if (input.non_witness_utxo) {\n+        // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n+        COutPoint prevout = tx.vin[index].prevout;\n+        if (input.non_witness_utxo->GetHash() != prevout.hash) {\n+            return false;\n+        }\n+        utxo = input.non_witness_utxo->vout[prevout.n];\n+    } else if (!input.witness_utxo.IsNull()) {\n+        utxo = input.witness_utxo;\n+        // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n+        // the output being spent. This is safe in case a witness signature is produced (which includes this\n+        // information directly in the hash), but not for non-witness signatures. Remember that we require\n+        // a witness signature in this situation.\n+        require_witness_sig = true;\n+    } else {\n+        return false;\n+    }\n+\n+    MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+    sigdata.witness = false;\n+    bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    // Verify that a witness signature was produced in case one was required.\n+    if (require_witness_sig && !sigdata.witness) return false;\n+    input.FromSignatureData(sigdata);\n+\n+    // If we have a witness signature, use the smaller witness UTXO.\n+    if (sigdata.witness) {\n+        input.witness_utxo = utxo;\n+        input.non_witness_utxo = nullptr;\n+    }\n+\n+    return sig_complete;\n+}"
      },
      {
        "sha": "fbe55ca1006976136f8c38a11d0bfd7bbd776e55",
        "filename": "src/psbt.h",
        "status": "added",
        "additions": 553,
        "deletions": 0,
        "changes": 553,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -0,0 +1,553 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PSBT_H\n+#define BITCOIN_PSBT_H\n+\n+#include <attributes.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+\n+// Magic bytes\n+static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n+\n+// Global types\n+static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n+\n+// Input types\n+static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;\n+static constexpr uint8_t PSBT_IN_WITNESS_UTXO = 0x01;\n+static constexpr uint8_t PSBT_IN_PARTIAL_SIG = 0x02;\n+static constexpr uint8_t PSBT_IN_SIGHASH = 0x03;\n+static constexpr uint8_t PSBT_IN_REDEEMSCRIPT = 0x04;\n+static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;\n+static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;\n+static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;\n+static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;\n+\n+// Output types\n+static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;\n+static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;\n+static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n+\n+// The separator is 0x00. Reading this in means that the unserializer can interpret it\n+// as a 0 length key which indicates that this is the separator. The separator has no value.\n+static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n+\n+/** A structure for PSBTs which contain per-input information */\n+struct PSBTInput\n+{\n+    CTransactionRef non_witness_utxo;\n+    CTxOut witness_utxo;\n+    CScript redeem_script;\n+    CScript witness_script;\n+    CScript final_script_sig;\n+    CScriptWitness final_script_witness;\n+    std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+    std::map<CKeyID, SigPair> partial_sigs;\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+    int sighash_type = 0;\n+\n+    bool IsNull() const;\n+    void FillSignatureData(SignatureData& sigdata) const;\n+    void FromSignatureData(const SignatureData& sigdata);\n+    void Merge(const PSBTInput& input);\n+    bool IsSane() const;\n+    PSBTInput() {}\n+\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const {\n+        // Write the utxo\n+        // If there is a non-witness utxo, then don't add the witness one.\n+        if (non_witness_utxo) {\n+            SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n+            OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+            SerializeToVector(os, non_witness_utxo);\n+        } else if (!witness_utxo.IsNull()) {\n+            SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n+            SerializeToVector(s, witness_utxo);\n+        }\n+\n+        if (final_script_sig.empty() && final_script_witness.IsNull()) {\n+            // Write any partial signatures\n+            for (auto sig_pair : partial_sigs) {\n+                SerializeToVector(s, PSBT_IN_PARTIAL_SIG, MakeSpan(sig_pair.second.first));\n+                s << sig_pair.second.second;\n+            }\n+\n+            // Write the sighash type\n+            if (sighash_type > 0) {\n+                SerializeToVector(s, PSBT_IN_SIGHASH);\n+                SerializeToVector(s, sighash_type);\n+            }\n+\n+            // Write the redeem script\n+            if (!redeem_script.empty()) {\n+                SerializeToVector(s, PSBT_IN_REDEEMSCRIPT);\n+                s << redeem_script;\n+            }\n+\n+            // Write the witness script\n+            if (!witness_script.empty()) {\n+                SerializeToVector(s, PSBT_IN_WITNESSSCRIPT);\n+                s << witness_script;\n+            }\n+\n+            // Write any hd keypaths\n+            SerializeHDKeypaths(s, hd_keypaths, PSBT_IN_BIP32_DERIVATION);\n+        }\n+\n+        // Write script sig\n+        if (!final_script_sig.empty()) {\n+            SerializeToVector(s, PSBT_IN_SCRIPTSIG);\n+            s << final_script_sig;\n+        }\n+        // write script witness\n+        if (!final_script_witness.IsNull()) {\n+            SerializeToVector(s, PSBT_IN_SCRIPTWITNESS);\n+            SerializeToVector(s, final_script_witness.stack);\n+        }\n+\n+        // Write unknown things\n+        for (auto& entry : unknown) {\n+            s << entry.first;\n+            s << entry.second;\n+        }\n+\n+        s << PSBT_SEPARATOR;\n+    }\n+\n+\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s) {\n+        // Read loop\n+        bool found_sep = false;\n+        while(!s.empty()) {\n+            // Read\n+            std::vector<unsigned char> key;\n+            s >> key;\n+\n+            // the key is empty if that was actually a separator byte\n+            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n+\n+            // First byte of key is the type\n+            unsigned char type = key[0];\n+\n+            // Do stuff based on type\n+            switch(type) {\n+                case PSBT_IN_NON_WITNESS_UTXO:\n+                {\n+                    if (non_witness_utxo) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input non-witness utxo already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Non-witness utxo key is more than one byte type\");\n+                    }\n+                    // Set the stream to unserialize with witness since this is always a valid network transaction\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() & ~SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, non_witness_utxo);\n+                    break;\n+                }\n+                case PSBT_IN_WITNESS_UTXO:\n+                    if (!witness_utxo.IsNull()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input witness utxo already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Witness utxo key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, witness_utxo);\n+                    break;\n+                case PSBT_IN_PARTIAL_SIG:\n+                {\n+                    // Make sure that the key is the size of pubkey + 1\n+                    if (key.size() != CPubKey::PUBLIC_KEY_SIZE + 1 && key.size() != CPubKey::COMPRESSED_PUBLIC_KEY_SIZE + 1) {\n+                        throw std::ios_base::failure(\"Size of key was not the expected size for the type partial signature pubkey\");\n+                    }\n+                    // Read in the pubkey from key\n+                    CPubKey pubkey(key.begin() + 1, key.end());\n+                    if (!pubkey.IsFullyValid()) {\n+                       throw std::ios_base::failure(\"Invalid pubkey\");\n+                    }\n+                    if (partial_sigs.count(pubkey.GetID()) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input partial signature for pubkey already provided\");\n+                    }\n+\n+                    // Read in the signature from value\n+                    std::vector<unsigned char> sig;\n+                    s >> sig;\n+\n+                    // Add to list\n+                    partial_sigs.emplace(pubkey.GetID(), SigPair(pubkey, std::move(sig)));\n+                    break;\n+                }\n+                case PSBT_IN_SIGHASH:\n+                    if (sighash_type > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input sighash type already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Sighash type key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, sighash_type);\n+                    break;\n+                case PSBT_IN_REDEEMSCRIPT:\n+                {\n+                    if (!redeem_script.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input redeemScript already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Input redeemScript key is more than one byte type\");\n+                    }\n+                    s >> redeem_script;\n+                    break;\n+                }\n+                case PSBT_IN_WITNESSSCRIPT:\n+                {\n+                    if (!witness_script.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input witnessScript already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Input witnessScript key is more than one byte type\");\n+                    }\n+                    s >> witness_script;\n+                    break;\n+                }\n+                case PSBT_IN_BIP32_DERIVATION:\n+                {\n+                    DeserializeHDKeypaths(s, key, hd_keypaths);\n+                    break;\n+                }\n+                case PSBT_IN_SCRIPTSIG:\n+                {\n+                    if (!final_script_sig.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input final scriptSig already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Final scriptSig key is more than one byte type\");\n+                    }\n+                    s >> final_script_sig;\n+                    break;\n+                }\n+                case PSBT_IN_SCRIPTWITNESS:\n+                {\n+                    if (!final_script_witness.IsNull()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input final scriptWitness already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Final scriptWitness key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, final_script_witness.stack);\n+                    break;\n+                }\n+                // Unknown stuff\n+                default:\n+                    if (unknown.count(key) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n+                    }\n+                    // Read in the value\n+                    std::vector<unsigned char> val_bytes;\n+                    s >> val_bytes;\n+                    unknown.emplace(std::move(key), std::move(val_bytes));\n+                    break;\n+            }\n+        }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of an input map\");\n+        }\n+    }\n+\n+    template <typename Stream>\n+    PSBTInput(deserialize_type, Stream& s) {\n+        Unserialize(s);\n+    }\n+};\n+\n+/** A structure for PSBTs which contains per output information */\n+struct PSBTOutput\n+{\n+    CScript redeem_script;\n+    CScript witness_script;\n+    std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+\n+    bool IsNull() const;\n+    void FillSignatureData(SignatureData& sigdata) const;\n+    void FromSignatureData(const SignatureData& sigdata);\n+    void Merge(const PSBTOutput& output);\n+    bool IsSane() const;\n+    PSBTOutput() {}\n+\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const {\n+        // Write the redeem script\n+        if (!redeem_script.empty()) {\n+            SerializeToVector(s, PSBT_OUT_REDEEMSCRIPT);\n+            s << redeem_script;\n+        }\n+\n+        // Write the witness script\n+        if (!witness_script.empty()) {\n+            SerializeToVector(s, PSBT_OUT_WITNESSSCRIPT);\n+            s << witness_script;\n+        }\n+\n+        // Write any hd keypaths\n+        SerializeHDKeypaths(s, hd_keypaths, PSBT_OUT_BIP32_DERIVATION);\n+\n+        // Write unknown things\n+        for (auto& entry : unknown) {\n+            s << entry.first;\n+            s << entry.second;\n+        }\n+\n+        s << PSBT_SEPARATOR;\n+    }\n+\n+\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s) {\n+        // Read loop\n+        bool found_sep = false;\n+        while(!s.empty()) {\n+            // Read\n+            std::vector<unsigned char> key;\n+            s >> key;\n+\n+            // the key is empty if that was actually a separator byte\n+            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n+\n+            // First byte of key is the type\n+            unsigned char type = key[0];\n+\n+            // Do stuff based on type\n+            switch(type) {\n+                case PSBT_OUT_REDEEMSCRIPT:\n+                {\n+                    if (!redeem_script.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, output redeemScript already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Output redeemScript key is more than one byte type\");\n+                    }\n+                    s >> redeem_script;\n+                    break;\n+                }\n+                case PSBT_OUT_WITNESSSCRIPT:\n+                {\n+                    if (!witness_script.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, output witnessScript already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Output witnessScript key is more than one byte type\");\n+                    }\n+                    s >> witness_script;\n+                    break;\n+                }\n+                case PSBT_OUT_BIP32_DERIVATION:\n+                {\n+                    DeserializeHDKeypaths(s, key, hd_keypaths);\n+                    break;\n+                }\n+                // Unknown stuff\n+                default: {\n+                    if (unknown.count(key) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n+                    }\n+                    // Read in the value\n+                    std::vector<unsigned char> val_bytes;\n+                    s >> val_bytes;\n+                    unknown.emplace(std::move(key), std::move(val_bytes));\n+                    break;\n+                }\n+            }\n+        }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of an output map\");\n+        }\n+    }\n+\n+    template <typename Stream>\n+    PSBTOutput(deserialize_type, Stream& s) {\n+        Unserialize(s);\n+    }\n+};\n+\n+/** A version of CTransaction with the PSBT format*/\n+struct PartiallySignedTransaction\n+{\n+    boost::optional<CMutableTransaction> tx;\n+    std::vector<PSBTInput> inputs;\n+    std::vector<PSBTOutput> outputs;\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+\n+    bool IsNull() const;\n+    void Merge(const PartiallySignedTransaction& psbt);\n+    bool IsSane() const;\n+    PartiallySignedTransaction() {}\n+    PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n+    explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n+\n+    // Only checks if they refer to the same transaction\n+    friend bool operator==(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)\n+    {\n+        return a.tx->GetHash() == b.tx->GetHash();\n+    }\n+    friend bool operator!=(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)\n+    {\n+        return !(a == b);\n+    }\n+\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const {\n+\n+        // magic bytes\n+        s << PSBT_MAGIC_BYTES;\n+\n+        // unsigned tx flag\n+        SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n+\n+        // Write serialized tx to a stream\n+        OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+        SerializeToVector(os, *tx);\n+\n+        // Write the unknown things\n+        for (auto& entry : unknown) {\n+            s << entry.first;\n+            s << entry.second;\n+        }\n+\n+        // Separator\n+        s << PSBT_SEPARATOR;\n+\n+        // Write inputs\n+        for (const PSBTInput& input : inputs) {\n+            s << input;\n+        }\n+        // Write outputs\n+        for (const PSBTOutput& output : outputs) {\n+            s << output;\n+        }\n+    }\n+\n+\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s) {\n+        // Read the magic bytes\n+        uint8_t magic[5];\n+        s >> magic;\n+        if (!std::equal(magic, magic + 5, PSBT_MAGIC_BYTES)) {\n+            throw std::ios_base::failure(\"Invalid PSBT magic bytes\");\n+        }\n+\n+        // Read global data\n+        bool found_sep = false;\n+        while(!s.empty()) {\n+            // Read\n+            std::vector<unsigned char> key;\n+            s >> key;\n+\n+            // the key is empty if that was actually a separator byte\n+            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n+\n+            // First byte of key is the type\n+            unsigned char type = key[0];\n+\n+            // Do stuff based on type\n+            switch(type) {\n+                case PSBT_GLOBAL_UNSIGNED_TX:\n+                {\n+                    if (tx) {\n+                        throw std::ios_base::failure(\"Duplicate Key, unsigned tx already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Global unsigned tx key is more than one byte type\");\n+                    }\n+                    CMutableTransaction mtx;\n+                    // Set the stream to serialize with non-witness since this should always be non-witness\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, mtx);\n+                    tx = std::move(mtx);\n+                    // Make sure that all scriptSigs and scriptWitnesses are empty\n+                    for (const CTxIn& txin : tx->vin) {\n+                        if (!txin.scriptSig.empty() || !txin.scriptWitness.IsNull()) {\n+                            throw std::ios_base::failure(\"Unsigned tx does not have empty scriptSigs and scriptWitnesses.\");\n+                        }\n+                    }\n+                    break;\n+                }\n+                // Unknown stuff\n+                default: {\n+                    if (unknown.count(key) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n+                    }\n+                    // Read in the value\n+                    std::vector<unsigned char> val_bytes;\n+                    s >> val_bytes;\n+                    unknown.emplace(std::move(key), std::move(val_bytes));\n+                }\n+            }\n+        }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of the global map\");\n+        }\n+\n+        // Make sure that we got an unsigned tx\n+        if (!tx) {\n+            throw std::ios_base::failure(\"No unsigned transcation was provided\");\n+        }\n+\n+        // Read input data\n+        unsigned int i = 0;\n+        while (!s.empty() && i < tx->vin.size()) {\n+            PSBTInput input;\n+            s >> input;\n+            inputs.push_back(input);\n+\n+            // Make sure the non-witness utxo matches the outpoint\n+            if (input.non_witness_utxo && input.non_witness_utxo->GetHash() != tx->vin[i].prevout.hash) {\n+                throw std::ios_base::failure(\"Non-witness UTXO does not match outpoint hash\");\n+            }\n+            ++i;\n+        }\n+        // Make sure that the number of inputs matches the number of inputs in the transaction\n+        if (inputs.size() != tx->vin.size()) {\n+            throw std::ios_base::failure(\"Inputs provided does not match the number of inputs in transaction.\");\n+        }\n+\n+        // Read output data\n+        i = 0;\n+        while (!s.empty() && i < tx->vout.size()) {\n+            PSBTOutput output;\n+            s >> output;\n+            outputs.push_back(output);\n+            ++i;\n+        }\n+        // Make sure that the number of outputs matches the number of outputs in the transaction\n+        if (outputs.size() != tx->vout.size()) {\n+            throw std::ios_base::failure(\"Outputs provided does not match the number of outputs in transaction.\");\n+        }\n+        // Sanity check\n+        if (!IsSane()) {\n+            throw std::ios_base::failure(\"PSBT is not sane.\");\n+        }\n+    }\n+\n+    template <typename Stream>\n+    PartiallySignedTransaction(deserialize_type, Stream& s) {\n+        Unserialize(s);\n+    }\n+};\n+\n+/** Checks whether a PSBTInput is already signed. */\n+bool PSBTInputSigned(PSBTInput& input);\n+\n+/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL);\n+\n+#endif // BITCOIN_PSBT_H"
      },
      {
        "sha": "03e38739a1c1857dfb0372bda365af2230b66629",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -17,6 +17,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n+#include <psbt.h>\n #include <rpc/rawtransaction.h>\n #include <rpc/server.h>\n #include <rpc/util.h>"
      },
      {
        "sha": "9d6a390ea2119b8f4d5874eceeeb620fef042343",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 221,
        "changes": 221,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -232,67 +232,6 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     return sigdata.complete;\n }\n \n-bool PSBTInputSigned(PSBTInput& input)\n-{\n-    return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n-}\n-\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash)\n-{\n-    PSBTInput& input = psbt.inputs.at(index);\n-    const CMutableTransaction& tx = *psbt.tx;\n-\n-    if (PSBTInputSigned(input)) {\n-        return true;\n-    }\n-\n-    // Fill SignatureData with input info\n-    SignatureData sigdata;\n-    input.FillSignatureData(sigdata);\n-\n-    // Get UTXO\n-    bool require_witness_sig = false;\n-    CTxOut utxo;\n-\n-    // Verify input sanity, which checks that at most one of witness or non-witness utxos is provided.\n-    if (!input.IsSane()) {\n-        return false;\n-    }\n-\n-    if (input.non_witness_utxo) {\n-        // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n-        COutPoint prevout = tx.vin[index].prevout;\n-        if (input.non_witness_utxo->GetHash() != prevout.hash) {\n-            return false;\n-        }\n-        utxo = input.non_witness_utxo->vout[prevout.n];\n-    } else if (!input.witness_utxo.IsNull()) {\n-        utxo = input.witness_utxo;\n-        // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n-        // the output being spent. This is safe in case a witness signature is produced (which includes this\n-        // information directly in the hash), but not for non-witness signatures. Remember that we require\n-        // a witness signature in this situation.\n-        require_witness_sig = true;\n-    } else {\n-        return false;\n-    }\n-\n-    MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n-    sigdata.witness = false;\n-    bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n-    // Verify that a witness signature was produced in case one was required.\n-    if (require_witness_sig && !sigdata.witness) return false;\n-    input.FromSignatureData(sigdata);\n-\n-    // If we have a witness signature, use the smaller witness UTXO.\n-    if (sigdata.witness) {\n-        input.witness_utxo = utxo;\n-        input.non_witness_utxo = nullptr;\n-    }\n-\n-    return sig_complete;\n-}\n-\n class SignatureExtractorChecker final : public BaseSignatureChecker\n {\n private:\n@@ -509,166 +448,6 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n     return false;\n }\n \n-PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx) : tx(tx)\n-{\n-    inputs.resize(tx.vin.size());\n-    outputs.resize(tx.vout.size());\n-}\n-\n-bool PartiallySignedTransaction::IsNull() const\n-{\n-    return !tx && inputs.empty() && outputs.empty() && unknown.empty();\n-}\n-\n-void PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n-{\n-    for (unsigned int i = 0; i < inputs.size(); ++i) {\n-        inputs[i].Merge(psbt.inputs[i]);\n-    }\n-    for (unsigned int i = 0; i < outputs.size(); ++i) {\n-        outputs[i].Merge(psbt.outputs[i]);\n-    }\n-    unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n-}\n-\n-bool PartiallySignedTransaction::IsSane() const\n-{\n-    for (PSBTInput input : inputs) {\n-        if (!input.IsSane()) return false;\n-    }\n-    return true;\n-}\n-\n-bool PSBTInput::IsNull() const\n-{\n-    return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();\n-}\n-\n-void PSBTInput::FillSignatureData(SignatureData& sigdata) const\n-{\n-    if (!final_script_sig.empty()) {\n-        sigdata.scriptSig = final_script_sig;\n-        sigdata.complete = true;\n-    }\n-    if (!final_script_witness.IsNull()) {\n-        sigdata.scriptWitness = final_script_witness;\n-        sigdata.complete = true;\n-    }\n-    if (sigdata.complete) {\n-        return;\n-    }\n-\n-    sigdata.signatures.insert(partial_sigs.begin(), partial_sigs.end());\n-    if (!redeem_script.empty()) {\n-        sigdata.redeem_script = redeem_script;\n-    }\n-    if (!witness_script.empty()) {\n-        sigdata.witness_script = witness_script;\n-    }\n-    for (const auto& key_pair : hd_keypaths) {\n-        sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n-    }\n-}\n-\n-void PSBTInput::FromSignatureData(const SignatureData& sigdata)\n-{\n-    if (sigdata.complete) {\n-        partial_sigs.clear();\n-        hd_keypaths.clear();\n-        redeem_script.clear();\n-        witness_script.clear();\n-\n-        if (!sigdata.scriptSig.empty()) {\n-            final_script_sig = sigdata.scriptSig;\n-        }\n-        if (!sigdata.scriptWitness.IsNull()) {\n-            final_script_witness = sigdata.scriptWitness;\n-        }\n-        return;\n-    }\n-\n-    partial_sigs.insert(sigdata.signatures.begin(), sigdata.signatures.end());\n-    if (redeem_script.empty() && !sigdata.redeem_script.empty()) {\n-        redeem_script = sigdata.redeem_script;\n-    }\n-    if (witness_script.empty() && !sigdata.witness_script.empty()) {\n-        witness_script = sigdata.witness_script;\n-    }\n-    for (const auto& entry : sigdata.misc_pubkeys) {\n-        hd_keypaths.emplace(entry.second);\n-    }\n-}\n-\n-void PSBTInput::Merge(const PSBTInput& input)\n-{\n-    if (!non_witness_utxo && input.non_witness_utxo) non_witness_utxo = input.non_witness_utxo;\n-    if (witness_utxo.IsNull() && !input.witness_utxo.IsNull()) {\n-        witness_utxo = input.witness_utxo;\n-        non_witness_utxo = nullptr; // Clear out any non-witness utxo when we set a witness one.\n-    }\n-\n-    partial_sigs.insert(input.partial_sigs.begin(), input.partial_sigs.end());\n-    hd_keypaths.insert(input.hd_keypaths.begin(), input.hd_keypaths.end());\n-    unknown.insert(input.unknown.begin(), input.unknown.end());\n-\n-    if (redeem_script.empty() && !input.redeem_script.empty()) redeem_script = input.redeem_script;\n-    if (witness_script.empty() && !input.witness_script.empty()) witness_script = input.witness_script;\n-    if (final_script_sig.empty() && !input.final_script_sig.empty()) final_script_sig = input.final_script_sig;\n-    if (final_script_witness.IsNull() && !input.final_script_witness.IsNull()) final_script_witness = input.final_script_witness;\n-}\n-\n-bool PSBTInput::IsSane() const\n-{\n-    // Cannot have both witness and non-witness utxos\n-    if (!witness_utxo.IsNull() && non_witness_utxo) return false;\n-\n-    // If we have a witness_script or a scriptWitness, we must also have a witness utxo\n-    if (!witness_script.empty() && witness_utxo.IsNull()) return false;\n-    if (!final_script_witness.IsNull() && witness_utxo.IsNull()) return false;\n-\n-    return true;\n-}\n-\n-void PSBTOutput::FillSignatureData(SignatureData& sigdata) const\n-{\n-    if (!redeem_script.empty()) {\n-        sigdata.redeem_script = redeem_script;\n-    }\n-    if (!witness_script.empty()) {\n-        sigdata.witness_script = witness_script;\n-    }\n-    for (const auto& key_pair : hd_keypaths) {\n-        sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n-    }\n-}\n-\n-void PSBTOutput::FromSignatureData(const SignatureData& sigdata)\n-{\n-    if (redeem_script.empty() && !sigdata.redeem_script.empty()) {\n-        redeem_script = sigdata.redeem_script;\n-    }\n-    if (witness_script.empty() && !sigdata.witness_script.empty()) {\n-        witness_script = sigdata.witness_script;\n-    }\n-    for (const auto& entry : sigdata.misc_pubkeys) {\n-        hd_keypaths.emplace(entry.second);\n-    }\n-}\n-\n-bool PSBTOutput::IsNull() const\n-{\n-    return redeem_script.empty() && witness_script.empty() && hd_keypaths.empty() && unknown.empty();\n-}\n-\n-void PSBTOutput::Merge(const PSBTOutput& output)\n-{\n-    hd_keypaths.insert(output.hd_keypaths.begin(), output.hd_keypaths.end());\n-    unknown.insert(output.unknown.begin(), output.unknown.end());\n-\n-    if (redeem_script.empty() && !output.redeem_script.empty()) redeem_script = output.redeem_script;\n-    if (witness_script.empty() && !output.witness_script.empty()) witness_script = output.witness_script;\n-}\n-\n bool HidingSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const\n {\n     return m_provider->GetCScript(scriptid, script);"
      },
      {
        "sha": "64eb3eb8e5328516f30fe914ecb87bc65ff2f1e8",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 0,
        "deletions": 540,
        "changes": 540,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -123,32 +123,6 @@ struct SignatureData {\n     void MergeSignatureData(SignatureData sigdata);\n };\n \n-// Magic bytes\n-static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n-\n-// Global types\n-static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n-\n-// Input types\n-static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;\n-static constexpr uint8_t PSBT_IN_WITNESS_UTXO = 0x01;\n-static constexpr uint8_t PSBT_IN_PARTIAL_SIG = 0x02;\n-static constexpr uint8_t PSBT_IN_SIGHASH = 0x03;\n-static constexpr uint8_t PSBT_IN_REDEEMSCRIPT = 0x04;\n-static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;\n-static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;\n-static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;\n-static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;\n-\n-// Output types\n-static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;\n-static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;\n-static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n-\n-// The separator is 0x00. Reading this in means that the unserializer can interpret it\n-// as a 0 length key which indicates that this is the separator. The separator has no value.\n-static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n-\n // Takes a stream and multiple arguments and serializes them as if first serialized into a vector and then into the stream\n // The resulting output into the stream has the total serialized length of all of the objects followed by all objects concatenated with each other.\n template<typename Stream, typename... X>\n@@ -223,527 +197,13 @@ void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_k\n     }\n }\n \n-/** A structure for PSBTs which contain per-input information */\n-struct PSBTInput\n-{\n-    CTransactionRef non_witness_utxo;\n-    CTxOut witness_utxo;\n-    CScript redeem_script;\n-    CScript witness_script;\n-    CScript final_script_sig;\n-    CScriptWitness final_script_witness;\n-    std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n-    std::map<CKeyID, SigPair> partial_sigs;\n-    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n-    int sighash_type = 0;\n-\n-    bool IsNull() const;\n-    void FillSignatureData(SignatureData& sigdata) const;\n-    void FromSignatureData(const SignatureData& sigdata);\n-    void Merge(const PSBTInput& input);\n-    bool IsSane() const;\n-    PSBTInput() {}\n-\n-    template <typename Stream>\n-    inline void Serialize(Stream& s) const {\n-        // Write the utxo\n-        // If there is a non-witness utxo, then don't add the witness one.\n-        if (non_witness_utxo) {\n-            SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n-            OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n-            SerializeToVector(os, non_witness_utxo);\n-        } else if (!witness_utxo.IsNull()) {\n-            SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n-            SerializeToVector(s, witness_utxo);\n-        }\n-\n-        if (final_script_sig.empty() && final_script_witness.IsNull()) {\n-            // Write any partial signatures\n-            for (auto sig_pair : partial_sigs) {\n-                SerializeToVector(s, PSBT_IN_PARTIAL_SIG, MakeSpan(sig_pair.second.first));\n-                s << sig_pair.second.second;\n-            }\n-\n-            // Write the sighash type\n-            if (sighash_type > 0) {\n-                SerializeToVector(s, PSBT_IN_SIGHASH);\n-                SerializeToVector(s, sighash_type);\n-            }\n-\n-            // Write the redeem script\n-            if (!redeem_script.empty()) {\n-                SerializeToVector(s, PSBT_IN_REDEEMSCRIPT);\n-                s << redeem_script;\n-            }\n-\n-            // Write the witness script\n-            if (!witness_script.empty()) {\n-                SerializeToVector(s, PSBT_IN_WITNESSSCRIPT);\n-                s << witness_script;\n-            }\n-\n-            // Write any hd keypaths\n-            SerializeHDKeypaths(s, hd_keypaths, PSBT_IN_BIP32_DERIVATION);\n-        }\n-\n-        // Write script sig\n-        if (!final_script_sig.empty()) {\n-            SerializeToVector(s, PSBT_IN_SCRIPTSIG);\n-            s << final_script_sig;\n-        }\n-        // write script witness\n-        if (!final_script_witness.IsNull()) {\n-            SerializeToVector(s, PSBT_IN_SCRIPTWITNESS);\n-            SerializeToVector(s, final_script_witness.stack);\n-        }\n-\n-        // Write unknown things\n-        for (auto& entry : unknown) {\n-            s << entry.first;\n-            s << entry.second;\n-        }\n-\n-        s << PSBT_SEPARATOR;\n-    }\n-\n-\n-    template <typename Stream>\n-    inline void Unserialize(Stream& s) {\n-        // Read loop\n-        bool found_sep = false;\n-        while(!s.empty()) {\n-            // Read\n-            std::vector<unsigned char> key;\n-            s >> key;\n-\n-            // the key is empty if that was actually a separator byte\n-            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) {\n-                found_sep = true;\n-                break;\n-            }\n-\n-            // First byte of key is the type\n-            unsigned char type = key[0];\n-\n-            // Do stuff based on type\n-            switch(type) {\n-                case PSBT_IN_NON_WITNESS_UTXO:\n-                {\n-                    if (non_witness_utxo) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input non-witness utxo already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Non-witness utxo key is more than one byte type\");\n-                    }\n-                    // Set the stream to unserialize with witness since this is always a valid network transaction\n-                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() & ~SERIALIZE_TRANSACTION_NO_WITNESS);\n-                    UnserializeFromVector(os, non_witness_utxo);\n-                    break;\n-                }\n-                case PSBT_IN_WITNESS_UTXO:\n-                    if (!witness_utxo.IsNull()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input witness utxo already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Witness utxo key is more than one byte type\");\n-                    }\n-                    UnserializeFromVector(s, witness_utxo);\n-                    break;\n-                case PSBT_IN_PARTIAL_SIG:\n-                {\n-                    // Make sure that the key is the size of pubkey + 1\n-                    if (key.size() != CPubKey::PUBLIC_KEY_SIZE + 1 && key.size() != CPubKey::COMPRESSED_PUBLIC_KEY_SIZE + 1) {\n-                        throw std::ios_base::failure(\"Size of key was not the expected size for the type partial signature pubkey\");\n-                    }\n-                    // Read in the pubkey from key\n-                    CPubKey pubkey(key.begin() + 1, key.end());\n-                    if (!pubkey.IsFullyValid()) {\n-                       throw std::ios_base::failure(\"Invalid pubkey\");\n-                    }\n-                    if (partial_sigs.count(pubkey.GetID()) > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input partial signature for pubkey already provided\");\n-                    }\n-\n-                    // Read in the signature from value\n-                    std::vector<unsigned char> sig;\n-                    s >> sig;\n-\n-                    // Add to list\n-                    partial_sigs.emplace(pubkey.GetID(), SigPair(pubkey, std::move(sig)));\n-                    break;\n-                }\n-                case PSBT_IN_SIGHASH:\n-                    if (sighash_type > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input sighash type already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Sighash type key is more than one byte type\");\n-                    }\n-                    UnserializeFromVector(s, sighash_type);\n-                    break;\n-                case PSBT_IN_REDEEMSCRIPT:\n-                {\n-                    if (!redeem_script.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input redeemScript already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Input redeemScript key is more than one byte type\");\n-                    }\n-                    s >> redeem_script;\n-                    break;\n-                }\n-                case PSBT_IN_WITNESSSCRIPT:\n-                {\n-                    if (!witness_script.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input witnessScript already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Input witnessScript key is more than one byte type\");\n-                    }\n-                    s >> witness_script;\n-                    break;\n-                }\n-                case PSBT_IN_BIP32_DERIVATION:\n-                {\n-                    DeserializeHDKeypaths(s, key, hd_keypaths);\n-                    break;\n-                }\n-                case PSBT_IN_SCRIPTSIG:\n-                {\n-                    if (!final_script_sig.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input final scriptSig already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Final scriptSig key is more than one byte type\");\n-                    }\n-                    s >> final_script_sig;\n-                    break;\n-                }\n-                case PSBT_IN_SCRIPTWITNESS:\n-                {\n-                    if (!final_script_witness.IsNull()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input final scriptWitness already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Final scriptWitness key is more than one byte type\");\n-                    }\n-                    UnserializeFromVector(s, final_script_witness.stack);\n-                    break;\n-                }\n-                // Unknown stuff\n-                default:\n-                    if (unknown.count(key) > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n-                    }\n-                    // Read in the value\n-                    std::vector<unsigned char> val_bytes;\n-                    s >> val_bytes;\n-                    unknown.emplace(std::move(key), std::move(val_bytes));\n-                    break;\n-            }\n-        }\n-\n-        if (!found_sep) {\n-            throw std::ios_base::failure(\"Separator is missing at the end of an input map\");\n-        }\n-    }\n-\n-    template <typename Stream>\n-    PSBTInput(deserialize_type, Stream& s) {\n-        Unserialize(s);\n-    }\n-};\n-\n-/** A structure for PSBTs which contains per output information */\n-struct PSBTOutput\n-{\n-    CScript redeem_script;\n-    CScript witness_script;\n-    std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n-    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n-\n-    bool IsNull() const;\n-    void FillSignatureData(SignatureData& sigdata) const;\n-    void FromSignatureData(const SignatureData& sigdata);\n-    void Merge(const PSBTOutput& output);\n-    bool IsSane() const;\n-    PSBTOutput() {}\n-\n-    template <typename Stream>\n-    inline void Serialize(Stream& s) const {\n-        // Write the redeem script\n-        if (!redeem_script.empty()) {\n-            SerializeToVector(s, PSBT_OUT_REDEEMSCRIPT);\n-            s << redeem_script;\n-        }\n-\n-        // Write the witness script\n-        if (!witness_script.empty()) {\n-            SerializeToVector(s, PSBT_OUT_WITNESSSCRIPT);\n-            s << witness_script;\n-        }\n-\n-        // Write any hd keypaths\n-        SerializeHDKeypaths(s, hd_keypaths, PSBT_OUT_BIP32_DERIVATION);\n-\n-        // Write unknown things\n-        for (auto& entry : unknown) {\n-            s << entry.first;\n-            s << entry.second;\n-        }\n-\n-        s << PSBT_SEPARATOR;\n-    }\n-\n-\n-    template <typename Stream>\n-    inline void Unserialize(Stream& s) {\n-        // Read loop\n-        bool found_sep = false;\n-        while(!s.empty()) {\n-            // Read\n-            std::vector<unsigned char> key;\n-            s >> key;\n-\n-            // the key is empty if that was actually a separator byte\n-            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) {\n-                found_sep = true;\n-                break;\n-            }\n-\n-            // First byte of key is the type\n-            unsigned char type = key[0];\n-\n-            // Do stuff based on type\n-            switch(type) {\n-                case PSBT_OUT_REDEEMSCRIPT:\n-                {\n-                    if (!redeem_script.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, output redeemScript already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Output redeemScript key is more than one byte type\");\n-                    }\n-                    s >> redeem_script;\n-                    break;\n-                }\n-                case PSBT_OUT_WITNESSSCRIPT:\n-                {\n-                    if (!witness_script.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, output witnessScript already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Output witnessScript key is more than one byte type\");\n-                    }\n-                    s >> witness_script;\n-                    break;\n-                }\n-                case PSBT_OUT_BIP32_DERIVATION:\n-                {\n-                    DeserializeHDKeypaths(s, key, hd_keypaths);\n-                    break;\n-                }\n-                // Unknown stuff\n-                default: {\n-                    if (unknown.count(key) > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n-                    }\n-                    // Read in the value\n-                    std::vector<unsigned char> val_bytes;\n-                    s >> val_bytes;\n-                    unknown.emplace(std::move(key), std::move(val_bytes));\n-                    break;\n-                }\n-            }\n-        }\n-\n-        if (!found_sep) {\n-            throw std::ios_base::failure(\"Separator is missing at the end of an output map\");\n-        }\n-    }\n-\n-    template <typename Stream>\n-    PSBTOutput(deserialize_type, Stream& s) {\n-        Unserialize(s);\n-    }\n-};\n-\n-/** A version of CTransaction with the PSBT format*/\n-struct PartiallySignedTransaction\n-{\n-    boost::optional<CMutableTransaction> tx;\n-    std::vector<PSBTInput> inputs;\n-    std::vector<PSBTOutput> outputs;\n-    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n-\n-    bool IsNull() const;\n-    void Merge(const PartiallySignedTransaction& psbt);\n-    bool IsSane() const;\n-    PartiallySignedTransaction() {}\n-    PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n-    explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n-\n-    // Only checks if they refer to the same transaction\n-    friend bool operator==(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)\n-    {\n-        return a.tx->GetHash() == b.tx->GetHash();\n-    }\n-    friend bool operator!=(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)\n-    {\n-        return !(a == b);\n-    }\n-\n-    template <typename Stream>\n-    inline void Serialize(Stream& s) const {\n-\n-        // magic bytes\n-        s << PSBT_MAGIC_BYTES;\n-\n-        // unsigned tx flag\n-        SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n-\n-        // Write serialized tx to a stream\n-        OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n-        SerializeToVector(os, *tx);\n-\n-        // Write the unknown things\n-        for (auto& entry : unknown) {\n-            s << entry.first;\n-            s << entry.second;\n-        }\n-\n-        // Separator\n-        s << PSBT_SEPARATOR;\n-\n-        // Write inputs\n-        for (const PSBTInput& input : inputs) {\n-            s << input;\n-        }\n-        // Write outputs\n-        for (const PSBTOutput& output : outputs) {\n-            s << output;\n-        }\n-    }\n-\n-\n-    template <typename Stream>\n-    inline void Unserialize(Stream& s) {\n-        // Read the magic bytes\n-        uint8_t magic[5];\n-        s >> magic;\n-        if (!std::equal(magic, magic + 5, PSBT_MAGIC_BYTES)) {\n-            throw std::ios_base::failure(\"Invalid PSBT magic bytes\");\n-        }\n-\n-        // Read global data\n-        bool found_sep = false;\n-        while(!s.empty()) {\n-            // Read\n-            std::vector<unsigned char> key;\n-            s >> key;\n-\n-            // the key is empty if that was actually a separator byte\n-            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) {\n-                found_sep = true;\n-                break;\n-            }\n-\n-            // First byte of key is the type\n-            unsigned char type = key[0];\n-\n-            // Do stuff based on type\n-            switch(type) {\n-                case PSBT_GLOBAL_UNSIGNED_TX:\n-                {\n-                    if (tx) {\n-                        throw std::ios_base::failure(\"Duplicate Key, unsigned tx already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Global unsigned tx key is more than one byte type\");\n-                    }\n-                    CMutableTransaction mtx;\n-                    // Set the stream to serialize with non-witness since this should always be non-witness\n-                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n-                    UnserializeFromVector(os, mtx);\n-                    tx = std::move(mtx);\n-                    // Make sure that all scriptSigs and scriptWitnesses are empty\n-                    for (const CTxIn& txin : tx->vin) {\n-                        if (!txin.scriptSig.empty() || !txin.scriptWitness.IsNull()) {\n-                            throw std::ios_base::failure(\"Unsigned tx does not have empty scriptSigs and scriptWitnesses.\");\n-                        }\n-                    }\n-                    break;\n-                }\n-                // Unknown stuff\n-                default: {\n-                    if (unknown.count(key) > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n-                    }\n-                    // Read in the value\n-                    std::vector<unsigned char> val_bytes;\n-                    s >> val_bytes;\n-                    unknown.emplace(std::move(key), std::move(val_bytes));\n-                }\n-            }\n-        }\n-\n-        if (!found_sep) {\n-            throw std::ios_base::failure(\"Separator is missing at the end of the global map\");\n-        }\n-\n-        // Make sure that we got an unsigned tx\n-        if (!tx) {\n-            throw std::ios_base::failure(\"No unsigned transcation was provided\");\n-        }\n-\n-        // Read input data\n-        unsigned int i = 0;\n-        while (!s.empty() && i < tx->vin.size()) {\n-            PSBTInput input;\n-            s >> input;\n-            inputs.push_back(input);\n-\n-            // Make sure the non-witness utxo matches the outpoint\n-            if (input.non_witness_utxo && input.non_witness_utxo->GetHash() != tx->vin[i].prevout.hash) {\n-                throw std::ios_base::failure(\"Non-witness UTXO does not match outpoint hash\");\n-            }\n-            ++i;\n-        }\n-        // Make sure that the number of inputs matches the number of inputs in the transaction\n-        if (inputs.size() != tx->vin.size()) {\n-            throw std::ios_base::failure(\"Inputs provided does not match the number of inputs in transaction.\");\n-        }\n-\n-        // Read output data\n-        i = 0;\n-        while (!s.empty() && i < tx->vout.size()) {\n-            PSBTOutput output;\n-            s >> output;\n-            outputs.push_back(output);\n-            ++i;\n-        }\n-        // Make sure that the number of outputs matches the number of outputs in the transaction\n-        if (outputs.size() != tx->vout.size()) {\n-            throw std::ios_base::failure(\"Outputs provided does not match the number of outputs in transaction.\");\n-        }\n-        // Sanity check\n-        if (!IsSane()) {\n-            throw std::ios_base::failure(\"PSBT is not sane.\");\n-        }\n-    }\n-\n-    template <typename Stream>\n-    PartiallySignedTransaction(deserialize_type, Stream& s) {\n-        Unserialize(s);\n-    }\n-};\n-\n /** Produce a script signature using a generic signature creator. */\n bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n \n /** Produce a script signature for a transaction. */\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n-/** Checks whether a PSBTInput is already signed. */\n-bool PSBTInputSigned(PSBTInput& input);\n-\n-/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL);\n-\n /** Extract signature data from a transaction input, and insert it. */\n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout);\n void UpdateInput(CTxIn& input, const SignatureData& data);"
      },
      {
        "sha": "a62ad0837003e569ea6d7011d5f5d2ede52c59e6",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <rpc/protocol.h>\n+#include <wallet/psbtwallet.h>\n+\n+bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    // Get all of the previous transactions\n+    bool complete = true;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"PSBT input is not sane.\");\n+        }\n+\n+        // If we have no utxo, grab it from the wallet.\n+        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n+            const uint256& txhash = txin.prevout.hash;\n+            const auto it = pwallet->mapWallet.find(txhash);\n+            if (it != pwallet->mapWallet.end()) {\n+                const CWalletTx& wtx = it->second;\n+                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n+                //   The signing code will switch to the smaller witness_utxo if this is ok.\n+                input.non_witness_utxo = wtx.tx;\n+            }\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Specified Sighash and sighash in PSBT do not match.\");\n+        }\n+\n+        complete &= SignPSBTInput(HidingSigningProvider(pwallet, !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        const CTxOut& out = psbtx.tx->vout.at(i);\n+        PSBTOutput& psbt_out = psbtx.outputs.at(i);\n+\n+        // Fill a SignatureData with output info\n+        SignatureData sigdata;\n+        psbt_out.FillSignatureData(sigdata);\n+\n+        MutableTransactionSignatureCreator creator(psbtx.tx.get_ptr(), 0, out.nValue, 1);\n+        ProduceSignature(HidingSigningProvider(pwallet, true, !bip32derivs), creator, out.scriptPubKey, sigdata);\n+        psbt_out.FromSignatureData(sigdata);\n+    }\n+    return complete;\n+}"
      },
      {
        "sha": "4f888a06ec63b2226fe86a792218b8e5c0b5e568",
        "filename": "src/wallet/psbtwallet.h",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_PSBTWALLET_H\n+#define BITCOIN_WALLET_PSBTWALLET_H\n+\n+#include <psbt.h>\n+#include <primitives/transaction.h>\n+#include <wallet/wallet.h>\n+\n+bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false);\n+\n+#endif // BITCOIN_WALLET_PSBTWALLET_H"
      },
      {
        "sha": "905b18330758746c09aee14a68acfcaedc320ea6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 54,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -30,6 +30,7 @@\n #include <util/moneystr.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n+#include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n@@ -3948,60 +3949,6 @@ void AddKeypathToMap(const CWallet* pwallet, const CKeyID& keyID, std::map<CPubK\n     hd_keypaths.emplace(vchPubKey, std::move(info));\n }\n \n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs)\n-{\n-    LOCK(pwallet->cs_wallet);\n-    // Get all of the previous transactions\n-    bool complete = true;\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        const CTxIn& txin = psbtx.tx->vin[i];\n-        PSBTInput& input = psbtx.inputs.at(i);\n-\n-        if (PSBTInputSigned(input)) {\n-            continue;\n-        }\n-\n-        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n-        if (!input.IsSane()) {\n-            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"PSBT input is not sane.\");\n-        }\n-\n-        // If we have no utxo, grab it from the wallet.\n-        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n-            const uint256& txhash = txin.prevout.hash;\n-            const auto it = pwallet->mapWallet.find(txhash);\n-            if (it != pwallet->mapWallet.end()) {\n-                const CWalletTx& wtx = it->second;\n-                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n-                //   The signing code will switch to the smaller witness_utxo if this is ok.\n-                input.non_witness_utxo = wtx.tx;\n-            }\n-        }\n-\n-        // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Specified Sighash and sighash in PSBT do not match.\");\n-        }\n-\n-        complete &= SignPSBTInput(HidingSigningProvider(pwallet, !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n-\n-    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        const CTxOut& out = psbtx.tx->vout.at(i);\n-        PSBTOutput& psbt_out = psbtx.outputs.at(i);\n-\n-        // Fill a SignatureData with output info\n-        SignatureData sigdata;\n-        psbt_out.FillSignatureData(sigdata);\n-\n-        MutableTransactionSignatureCreator creator(psbtx.tx.get_ptr(), 0, out.nValue, 1);\n-        ProduceSignature(HidingSigningProvider(pwallet, true, !bip32derivs), creator, out.scriptPubKey, sigdata);\n-        psbt_out.FromSignatureData(sigdata);\n-    }\n-    return complete;\n-}\n-\n UniValue walletprocesspsbt(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);"
      },
      {
        "sha": "58053bde59a4e8939574d767823523fe0316a97d",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -30,5 +30,4 @@ bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "0c5b7c7e98c3fc7186ab2838629ebb4a9b204235",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "patch": "@@ -5,6 +5,7 @@\n #include <key_io.h>\n #include <script/sign.h>\n #include <util/strencodings.h>\n+#include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <univalue.h>"
      }
    ]
  },
  {
    "sha": "ae892adceb0ad41bf3edfcebc6537c11d492127c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTg5MmFkY2ViMGFkNDFiZjNlZGZjZWJjNjUzN2MxMWQ0OTIxMjdj",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-09-30T06:36:12Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-11T21:17:15Z"
      },
      "message": "tests: accept unicode characters on Windows",
      "tree": {
        "sha": "23dea7cf0291c58f28fa00f7e57fb1443aa68fd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23dea7cf0291c58f28fa00f7e57fb1443aa68fd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae892adceb0ad41bf3edfcebc6537c11d492127c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae892adceb0ad41bf3edfcebc6537c11d492127c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae892adceb0ad41bf3edfcebc6537c11d492127c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae892adceb0ad41bf3edfcebc6537c11d492127c/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f4e0d154256c2041f15f0c4acba5707e985d649",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4e0d154256c2041f15f0c4acba5707e985d649",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4e0d154256c2041f15f0c4acba5707e985d649"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "999cd72108caeea1d36d6c49af55f578e00679e6",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae892adceb0ad41bf3edfcebc6537c11d492127c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae892adceb0ad41bf3edfcebc6537c11d492127c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ae892adceb0ad41bf3edfcebc6537c11d492127c",
        "patch": "@@ -250,10 +250,6 @@ def main():\n     # Create base test directory\n     tmpdir = \"%s/test_runner_\u20bf_\ud83c\udfc3_%s\" % (args.tmpdirprefix, datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\"))\n \n-    # If we fixed the command-line and filename encoding issue on Windows, these two lines could be removed\n-    if config[\"environment\"][\"EXEEXT\"] == \".exe\":\n-        tmpdir = \"%s/test_runner_%s\" % (args.tmpdirprefix, datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\"))\n-\n     os.makedirs(tmpdir)\n \n     logging.debug(\"Temporary test directory at %s\" % tmpdir)"
      }
    ]
  },
  {
    "sha": "15b31032a67f09e54b3d40a9a0b19718a6440758",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWIzMTAzMmE2N2YwOWU1NGIzZDQwYTlhMGIxOTcxOGE2NDQwNzU4",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-11T21:42:44Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-11T21:45:53Z"
      },
      "message": "appveyor: Remove outdated libraries",
      "tree": {
        "sha": "317a2bd16af7a0002141591ab95047f8c14bbc9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/317a2bd16af7a0002141591ab95047f8c14bbc9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15b31032a67f09e54b3d40a9a0b19718a6440758",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15b31032a67f09e54b3d40a9a0b19718a6440758",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15b31032a67f09e54b3d40a9a0b19718a6440758",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15b31032a67f09e54b3d40a9a0b19718a6440758/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae892adceb0ad41bf3edfcebc6537c11d492127c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae892adceb0ad41bf3edfcebc6537c11d492127c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae892adceb0ad41bf3edfcebc6537c11d492127c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "31c3aba8c60abe4b63248e7f1f3b679ae5dfaf80",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15b31032a67f09e54b3d40a9a0b19718a6440758/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15b31032a67f09e54b3d40a9a0b19718a6440758/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=15b31032a67f09e54b3d40a9a0b19718a6440758",
        "patch": "@@ -17,6 +17,7 @@ install:\n - cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n # - cmd: pip install zmq\n+- cmd: vcpkg remove --outdated --recurse\n - cmd: vcpkg install --triplet %PLATFORM%-windows-static %PACKAGES% > NUL\n - cmd: del /s /q C:\\Tools\\vcpkg\\installed\\%PLATFORM%-windows-static\\debug # Remove unused debug library\n before_build:"
      }
    ]
  },
  {
    "sha": "bd0dbe8763fc3029cf96531c9ccaba280b939445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDBkYmU4NzYzZmMzMDI5Y2Y5NjUzMWM5Y2NhYmEyODBiOTM5NDQ1",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-02-10T04:51:33Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-02-11T22:08:04Z"
      },
      "message": "Switch away from exceptions in refactored tx code\n\nAfter refactoring general-purpose PSBT and transaction code out of RPC code,\nfor use in the GUI, it's no longer appropriate to throw exceptions. Instead we\nnow return bools for success, and take an output parameter for an error object.\nWe still use JSONRPCError() for the error objects, since only RPC callers\nactually care about the error codes.",
      "tree": {
        "sha": "f9ac966b3363bec18db36714ffc37ec3c36dd4be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9ac966b3363bec18db36714ffc37ec3c36dd4be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd0dbe8763fc3029cf96531c9ccaba280b939445",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0dbe8763fc3029cf96531c9ccaba280b939445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd0dbe8763fc3029cf96531c9ccaba280b939445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0dbe8763fc3029cf96531c9ccaba280b939445/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c3d42a7d6b525144fc7fc6653cd11139d2b34a"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 159,
      "deletions": 24
    },
    "files": [
      {
        "sha": "6c4efb3d26e297cc35fefb79fb9f121d6ad0f9f4",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 11,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -5,17 +5,43 @@\n \n #include <consensus/validation.h>\n #include <net.h>\n-#include <rpc/server.h>\n #include <txmempool.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <node/transaction.h>\n \n #include <future>\n \n-uint256 BroadcastTransaction(const CTransactionRef tx, const bool allowhighfees) {\n+const char* TransactionErrorString(const TransactionError err)\n+{\n+    switch (err) {\n+        case TransactionError::OK:\n+            return \"No error\";\n+        case TransactionError::MISSING_INPUTS:\n+            return \"Missing inputs\";\n+        case TransactionError::ALREADY_IN_CHAIN:\n+            return \"Transaction already in block chain\";\n+        case TransactionError::P2P_DISABLED:\n+            return \"Peer-to-peer functionality missing or disabled\";\n+        case TransactionError::MEMPOOL_REJECTED:\n+            return \"Transaction rejected by AcceptToMemoryPool\";\n+        case TransactionError::MEMPOOL_ERROR:\n+            return \"AcceptToMemoryPool failed\";\n+        case TransactionError::INVALID_PSBT:\n+            return \"PSBT is not sane\";\n+        case TransactionError::SIGHASH_MISMATCH:\n+            return \"Specified sighash value does not match existing value\";\n+\n+        case TransactionError::UNKNOWN_ERROR:\n+        default: break;\n+    }\n+    return \"Unknown error\";\n+}\n+\n+bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, TransactionError& error, std::string& err_string, const bool allowhighfees)\n+{\n     std::promise<void> promise;\n-    const uint256& hashTx = tx->GetHash();\n+    hashTx = tx->GetHash();\n \n     CAmount nMaxRawTxFee = maxTxFee;\n     if (allowhighfees)\n@@ -37,12 +63,17 @@ uint256 BroadcastTransaction(const CTransactionRef tx, const bool allowhighfees)\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n-                throw JSONRPCError(RPC_TRANSACTION_REJECTED, FormatStateMessage(state));\n+                err_string = FormatStateMessage(state);\n+                error = TransactionError::MEMPOOL_REJECTED;\n+                return false;\n             } else {\n                 if (fMissingInputs) {\n-                    throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n+                    error = TransactionError::MISSING_INPUTS;\n+                    return false;\n                 }\n-                throw JSONRPCError(RPC_TRANSACTION_ERROR, FormatStateMessage(state));\n+                err_string = FormatStateMessage(state);\n+                error = TransactionError::MEMPOOL_ERROR;\n+                return false;\n             }\n         } else {\n             // If wallet is enabled, ensure that the wallet has been made aware\n@@ -55,7 +86,8 @@ uint256 BroadcastTransaction(const CTransactionRef tx, const bool allowhighfees)\n             });\n         }\n     } else if (fHaveChain) {\n-        throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n+        error = TransactionError::ALREADY_IN_CHAIN;\n+        return false;\n     } else {\n         // Make sure we don't block forever if re-sending\n         // a transaction already in mempool.\n@@ -66,14 +98,16 @@ uint256 BroadcastTransaction(const CTransactionRef tx, const bool allowhighfees)\n \n     promise.get_future().wait();\n \n-    if(!g_connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    if(!g_connman) {\n+        error = TransactionError::P2P_DISABLED;\n+        return false;\n+    }\n \n     CInv inv(MSG_TX, hashTx);\n     g_connman->ForEachNode([&inv](CNode* pnode)\n     {\n         pnode->PushInventory(inv);\n     });\n \n-    return hashTx;\n-}\n+    return true;\n+    }"
      },
      {
        "sha": "83354d9400f1c974a88c7a9c605cb515ded31105",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 30,
        "deletions": 2,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -8,7 +8,35 @@\n #include <primitives/transaction.h>\n #include <uint256.h>\n \n-/** Broadcast a transaction */\n-uint256 BroadcastTransaction(CTransactionRef tx, bool allowhighfees = false);\n+enum class TransactionError {\n+    OK = 0,\n+    UNKNOWN_ERROR,\n+\n+    MISSING_INPUTS,\n+    ALREADY_IN_CHAIN,\n+    P2P_DISABLED,\n+    MEMPOOL_REJECTED,\n+    MEMPOOL_ERROR,\n+    INVALID_PSBT,\n+    SIGHASH_MISMATCH,\n+\n+    ERROR_COUNT\n+};\n+\n+#define TRANSACTION_ERR_LAST TransactionError::ERROR_COUNT\n+\n+const char* TransactionErrorString(const TransactionError error);\n+\n+/**\n+ * Broadcast a transaction\n+ *\n+ * @param[in]  tx the transaction to broadcast\n+ * @param[out] &txid the txid of the transaction, if successfully broadcast\n+ * @param[out] &error reference to UniValue to fill with error info on failure\n+ * @param[out] &err_string reference to std::string to fill with error string if available\n+ * @param[in]  allowhighfees whether to allow fees exceeding maxTxFee\n+ * return true on success, false on error (and fills in `error`)\n+ */\n+bool BroadcastTransaction(CTransactionRef tx, uint256& txid, TransactionError& error, std::string& err_string, bool allowhighfees = false);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "ad6f0030157250ce7487ca30de1c526592ec1521",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_PSBT_H\n \n #include <attributes.h>\n+#include <node/transaction.h>\n #include <primitives/transaction.h>\n #include <pubkey.h>\n #include <script/sign.h>"
      },
      {
        "sha": "bc836614ae3080f1abd2ff9fe7393a6c59683c1f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -1050,7 +1050,14 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n     bool allowhighfees = false;\n     if (!request.params[1].isNull()) allowhighfees = request.params[1].get_bool();\n-    return BroadcastTransaction(tx, allowhighfees).GetHex();\n+    uint256 txid;\n+    TransactionError err;\n+    std::string err_string;\n+    if (!BroadcastTransaction(tx, txid, err, err_string, allowhighfees)) {\n+        throw JSONRPCTransactionError(err, err_string);\n+    }\n+\n+    return txid.GetHex();\n }\n \n static UniValue testmempoolaccept(const JSONRPCRequest& request)"
      },
      {
        "sha": "9e825ac12a6a8c8ce6a7b380c3b0feebdb2b0f97",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -141,6 +141,32 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n     return (unsigned int)target;\n }\n \n+RPCErrorCode RPCErrorFromTransactionError(TransactionError terr)\n+{\n+    switch (terr) {\n+        case TransactionError::MEMPOOL_REJECTED:\n+            return RPC_TRANSACTION_REJECTED;\n+        case TransactionError::ALREADY_IN_CHAIN:\n+            return RPC_TRANSACTION_ALREADY_IN_CHAIN;\n+        case TransactionError::P2P_DISABLED:\n+            return RPC_CLIENT_P2P_DISABLED;\n+        case TransactionError::INVALID_PSBT:\n+        case TransactionError::SIGHASH_MISMATCH:\n+            return RPC_DESERIALIZATION_ERROR;\n+        default: break;\n+    }\n+    return RPC_TRANSACTION_ERROR;\n+}\n+\n+UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string)\n+{\n+    if (err_string.length() > 0) {\n+        return JSONRPCError(RPCErrorFromTransactionError(terr), err_string);\n+    } else {\n+        return JSONRPCError(RPCErrorFromTransactionError(terr), TransactionErrorString(terr));\n+    }\n+}\n+\n struct Section {\n     Section(const std::string& left, const std::string& right)\n         : m_left{left}, m_right{right} {}"
      },
      {
        "sha": "33fca790291752401451a34fbbf35f38ab02f23b",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_RPC_UTIL_H\n #define BITCOIN_RPC_UTIL_H\n \n+#include <node/transaction.h>\n #include <pubkey.h>\n #include <script/standard.h>\n #include <univalue.h>\n@@ -31,6 +32,9 @@ UniValue DescribeAddress(const CTxDestination& dest);\n //! Parse a confirm target option and raise an RPC error if it is invalid.\n unsigned int ParseConfirmTarget(const UniValue& value);\n \n+RPCErrorCode RPCErrorFromTransactionError(TransactionError terr);\n+UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string = \"\");\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,"
      },
      {
        "sha": "761e7b7dd77878c2c3d5097b235404f017198b2f",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -2,14 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <rpc/protocol.h>\n #include <wallet/psbtwallet.h>\n \n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs)\n+bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, TransactionError& error, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n {\n     LOCK(pwallet->cs_wallet);\n     // Get all of the previous transactions\n-    bool complete = true;\n+    complete = true;\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n         const CTxIn& txin = psbtx.tx->vin[i];\n         PSBTInput& input = psbtx.inputs.at(i);\n@@ -20,7 +19,8 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sig\n \n         // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n         if (!input.IsSane()) {\n-            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"PSBT input is not sane.\");\n+            error = TransactionError::INVALID_PSBT;\n+            return false;\n         }\n \n         // If we have no utxo, grab it from the wallet.\n@@ -37,7 +37,8 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sig\n \n         // Get the Sighash type\n         if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Specified Sighash and sighash in PSBT do not match.\");\n+            error = TransactionError::SIGHASH_MISMATCH;\n+            return false;\n         }\n \n         complete &= SignPSBTInput(HidingSigningProvider(pwallet, !sign, !bip32derivs), psbtx, i, sighash_type);\n@@ -56,5 +57,6 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sig\n         ProduceSignature(HidingSigningProvider(pwallet, true, !bip32derivs), creator, out.scriptPubKey, sigdata);\n         psbt_out.FromSignatureData(sigdata);\n     }\n-    return complete;\n+\n+    return true;\n }"
      },
      {
        "sha": "b679f5c6ba6c2ae24cc15296ae06f9babee0798a",
        "filename": "src/wallet/psbtwallet.h",
        "status": "modified",
        "additions": 23,
        "deletions": 1,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -5,10 +5,32 @@\n #ifndef BITCOIN_WALLET_PSBTWALLET_H\n #define BITCOIN_WALLET_PSBTWALLET_H\n \n+#include <node/transaction.h>\n #include <psbt.h>\n #include <primitives/transaction.h>\n #include <wallet/wallet.h>\n \n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false);\n+/**\n+ * Fills out a PSBT with information from the wallet. Fills in UTXOs if we have\n+ * them. Tries to sign if sign=true. Sets `complete` if the PSBT is now complete\n+ * (i.e. has all required signatures or signature-parts, and is ready to\n+ * finalize.) Sets `error` and returns false if something goes wrong.\n+ *\n+ * @param[in]  pwallet pointer to a wallet\n+ * @param[in]  &psbtx reference to PartiallySignedTransaction to fill in\n+ * @param[out] &error reference to UniValue to fill with error info on failure\n+ * @param[out] &complete indicates whether the PSBT is now complete\n+ * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n+ * @param[in]  sign whether to sign or not\n+ * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n+ * return true on success, false on error (and fills in `error`)\n+ */\n+bool FillPSBT(const CWallet* pwallet,\n+              PartiallySignedTransaction& psbtx,\n+              TransactionError& error,\n+              bool& complete,\n+              int sighash_type = 1 /* SIGHASH_ALL */,\n+              bool sign = true,\n+              bool bip32derivs = false);\n \n #endif // BITCOIN_WALLET_PSBTWALLET_H"
      },
      {
        "sha": "6811d927f201726d0b27dcf8aff6b3806140c68b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -13,6 +13,7 @@\n #include <validation.h>\n #include <key_io.h>\n #include <net.h>\n+#include <node/transaction.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n@@ -4003,7 +4004,11 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     // Fill transaction with our data and also sign\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n-    bool complete = FillPSBT(pwallet, psbtx, nHashType, sign, bip32derivs);\n+    bool complete = true;\n+    TransactionError err;\n+    if (!FillPSBT(pwallet, psbtx, err, complete, nHashType, sign, bip32derivs)) {\n+        throw JSONRPCTransactionError(err);\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n@@ -4117,7 +4122,11 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n \n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n-    FillPSBT(pwallet, psbtx, 1, false, bip32derivs);\n+    bool complete = true;\n+    TransactionError err;\n+    if (!FillPSBT(pwallet, psbtx, err, complete, 1, false, bip32derivs)) {\n+        throw JSONRPCTransactionError(err);\n+    }\n \n     // Serialize the PSBT\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "e89d4121bccfc4810ea267f4b0020916417f8bf8",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0dbe8763fc3029cf96531c9ccaba280b939445/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "patch": "@@ -61,7 +61,9 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     ssData >> psbtx;\n \n     // Fill transaction with our data\n-    FillPSBT(&m_wallet, psbtx, SIGHASH_ALL, false, true);\n+    TransactionError err;\n+    bool complete = true;\n+    FillPSBT(&m_wallet, psbtx, err, complete, SIGHASH_ALL, false, true);\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      }
    ]
  },
  {
    "sha": "78b9893d020e8b1351565f1adbf591cb32f6dc90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGI5ODkzZDAyMGU4YjEzNTE1NjVmMWFkYmY1OTFjYjMyZjZkYzkw",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-01-30T06:51:56Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-02-11T22:08:04Z"
      },
      "message": "Remove op== on PSBTs; check compatibility in Merge\n\nRemove the op== on PartiallySignedTransaction, which only checks that the\nCTransactions are equal. Instead, check this directly in Merge, and return\nfalse if the CTransactions are not equal (so the PSBTs cannot be merged.)",
      "tree": {
        "sha": "599c5a1b8627fb1681b038d3b89aef07f3ea8663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/599c5a1b8627fb1681b038d3b89aef07f3ea8663"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78b9893d020e8b1351565f1adbf591cb32f6dc90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b9893d020e8b1351565f1adbf591cb32f6dc90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78b9893d020e8b1351565f1adbf591cb32f6dc90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b9893d020e8b1351565f1adbf591cb32f6dc90/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0dbe8763fc3029cf96531c9ccaba280b939445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd0dbe8763fc3029cf96531c9ccaba280b939445"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 13,
      "deletions": 14
    },
    "files": [
      {
        "sha": "06032d69538664b60ec9f012d830cbb0574b1b6e",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78b9893d020e8b1351565f1adbf591cb32f6dc90/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78b9893d020e8b1351565f1adbf591cb32f6dc90/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=78b9893d020e8b1351565f1adbf591cb32f6dc90",
        "patch": "@@ -16,15 +16,22 @@ bool PartiallySignedTransaction::IsNull() const\n     return !tx && inputs.empty() && outputs.empty() && unknown.empty();\n }\n \n-void PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n+bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n {\n+    // Prohibited to merge two PSBTs over different transactions\n+    if (tx->GetHash() != psbt.tx->GetHash()) {\n+        return false;\n+    }\n+\n     for (unsigned int i = 0; i < inputs.size(); ++i) {\n         inputs[i].Merge(psbt.inputs[i]);\n     }\n     for (unsigned int i = 0; i < outputs.size(); ++i) {\n         outputs[i].Merge(psbt.outputs[i]);\n     }\n     unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+\n+    return true;\n }\n \n bool PartiallySignedTransaction::IsSane() const"
      },
      {
        "sha": "4b7ea4383a7acc8dbbed78eda0f4a3215a00e1f0",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78b9893d020e8b1351565f1adbf591cb32f6dc90/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78b9893d020e8b1351565f1adbf591cb32f6dc90/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=78b9893d020e8b1351565f1adbf591cb32f6dc90",
        "patch": "@@ -384,22 +384,15 @@ struct PartiallySignedTransaction\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n \n     bool IsNull() const;\n-    void Merge(const PartiallySignedTransaction& psbt);\n+\n+    /** Merge psbt into this. The two psbts must have the same underlying CTransaction (i.e. the\n+      * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n+    NODISCARD bool Merge(const PartiallySignedTransaction& psbt);\n     bool IsSane() const;\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n \n-    // Only checks if they refer to the same transaction\n-    friend bool operator==(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)\n-    {\n-        return a.tx->GetHash() == b.tx->GetHash();\n-    }\n-    friend bool operator!=(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)\n-    {\n-        return !(a == b);\n-    }\n-\n     template <typename Stream>\n     inline void Serialize(Stream& s) const {\n "
      },
      {
        "sha": "4205a3d10f9947f5e34a8ea151f2d78baf341d4f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78b9893d020e8b1351565f1adbf591cb32f6dc90/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78b9893d020e8b1351565f1adbf591cb32f6dc90/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=78b9893d020e8b1351565f1adbf591cb32f6dc90",
        "patch": "@@ -1481,10 +1481,9 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n \n     // Merge\n     for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n-        if (*it != merged_psbt) {\n+        if (!merged_psbt.Merge(*it)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"PSBTs do not refer to the same transactions.\");\n         }\n-        merged_psbt.Merge(*it);\n     }\n     if (!merged_psbt.IsSane()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Merged PSBT is inconsistent\");"
      }
    ]
  },
  {
    "sha": "102faad81efa1cb12c29c466cfe81fc8c7351e1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDJmYWFkODFlZmExY2IxMmMyOWM0NjZjZmU4MWZjOGM3MzUxZTFk",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-01-09T11:08:32Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-02-11T22:08:04Z"
      },
      "message": "Factor out combine / finalize / extract PSBT helpers\n\nRefactor the new CombinePSBT, FinalizePSBT, and FinalizeAndExtractPSBT\ngeneral-purpose functions out of the combinepsbt and finalizepsbt RPCs,\nfor use in the GUI code.",
      "tree": {
        "sha": "7353c37cc34161eb350e41cac2f1a7e1e8b8ee23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7353c37cc34161eb350e41cac2f1a7e1e8b8ee23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/102faad81efa1cb12c29c466cfe81fc8c7351e1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/102faad81efa1cb12c29c466cfe81fc8c7351e1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/102faad81efa1cb12c29c466cfe81fc8c7351e1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/102faad81efa1cb12c29c466cfe81fc8c7351e1d/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78b9893d020e8b1351565f1adbf591cb32f6dc90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b9893d020e8b1351565f1adbf591cb32f6dc90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78b9893d020e8b1351565f1adbf591cb32f6dc90"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 95,
      "deletions": 26
    },
    "files": [
      {
        "sha": "c9cdd0d1cdc077fd183d926b5e080d22f30ba302",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=102faad81efa1cb12c29c466cfe81fc8c7351e1d",
        "patch": "@@ -29,6 +29,8 @@ const char* TransactionErrorString(const TransactionError err)\n             return \"AcceptToMemoryPool failed\";\n         case TransactionError::INVALID_PSBT:\n             return \"PSBT is not sane\";\n+        case TransactionError::PSBT_MISMATCH:\n+            return \"PSBTs not compatible (different transactions)\";\n         case TransactionError::SIGHASH_MISMATCH:\n             return \"Specified sighash value does not match existing value\";\n "
      },
      {
        "sha": "3b0cbba98b520ef051277eb106737232be127e31",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=102faad81efa1cb12c29c466cfe81fc8c7351e1d",
        "patch": "@@ -18,6 +18,7 @@ enum class TransactionError {\n     MEMPOOL_REJECTED,\n     MEMPOOL_ERROR,\n     INVALID_PSBT,\n+    PSBT_MISMATCH,\n     SIGHASH_MISMATCH,\n \n     ERROR_COUNT"
      },
      {
        "sha": "81633c0cc7ffa3c95420ee1996f4238b197d1bb8",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=102faad81efa1cb12c29c466cfe81fc8c7351e1d",
        "patch": "@@ -232,3 +232,52 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n \n     return sig_complete;\n }\n+\n+bool FinalizePSBT(PartiallySignedTransaction& psbtx)\n+{\n+    // Finalize input signatures -- in case we have partial signatures that add up to a complete\n+    //   signature, but have not combined them yet (e.g. because the combiner that created this\n+    //   PartiallySignedTransaction did not understand them), this will combine them into a final\n+    //   script.\n+    bool complete = true;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, SIGHASH_ALL);\n+    }\n+\n+    return complete;\n+}\n+\n+bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransaction& result)\n+{\n+    // It's not safe to extract a PSBT that isn't finalized, and there's no easy way to check\n+    //   whether a PSBT is finalized without finalizing it, so we just do this.\n+    if (!FinalizePSBT(psbtx)) {\n+        return false;\n+    }\n+\n+    result = *psbtx.tx;\n+    for (unsigned int i = 0; i < result.vin.size(); ++i) {\n+        result.vin[i].scriptSig = psbtx.inputs[i].final_script_sig;\n+        result.vin[i].scriptWitness = psbtx.inputs[i].final_script_witness;\n+    }\n+    return true;\n+}\n+\n+bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs)\n+{\n+    out = psbtxs[0]; // Copy the first one\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        if (!out.Merge(*it)) {\n+            error = TransactionError::PSBT_MISMATCH;\n+            return false;\n+        }\n+    }\n+    if (!out.IsSane()) {\n+        error = TransactionError::INVALID_PSBT;\n+        return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "e18790322bf997063e42d5c44ffc0724ec5dd6c8",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=102faad81efa1cb12c29c466cfe81fc8c7351e1d",
        "patch": "@@ -544,4 +544,31 @@ bool PSBTInputSigned(PSBTInput& input);\n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL);\n \n+/**\n+ * Finalizes a PSBT if possible, combining partial signatures.\n+ *\n+ * @param[in,out] &psbtx reference to PartiallySignedTransaction to finalize\n+ * return True if the PSBT is now complete, false otherwise\n+ */\n+bool FinalizePSBT(PartiallySignedTransaction& psbtx);\n+\n+/**\n+ * Finalizes a PSBT if possible, and extracts it to a CMutableTransaction if it could be finalized.\n+ *\n+ * @param[in]  &psbtx reference to PartiallySignedTransaction\n+ * @param[out] result CMutableTransaction representing the complete transaction, if successful\n+ * @return True if we successfully extracted the transaction, false otherwise\n+ */\n+bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransaction& result);\n+\n+/**\n+ * Combines PSBTs with the same underlying transaction, resulting in a single PSBT with all partial signatures from each input.\n+ *\n+ * @param[out] &out   the combined PSBT, if successful\n+ * @param[out] &error reference to TransactionError to fill with error info on failure\n+ * @param[in]  psbtxs the PSBTs to combine\n+ * @return True if we successfully combined the transactions, false if they were not compatible\n+ */\n+bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs);\n+\n #endif // BITCOIN_PSBT_H"
      },
      {
        "sha": "f511cbbdabbd447473f6a98cec3bcd89867aaa54",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 26,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=102faad81efa1cb12c29c466cfe81fc8c7351e1d",
        "patch": "@@ -1477,16 +1477,10 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n         psbtxs.push_back(psbtx);\n     }\n \n-    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n-\n-    // Merge\n-    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n-        if (!merged_psbt.Merge(*it)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"PSBTs do not refer to the same transactions.\");\n-        }\n-    }\n-    if (!merged_psbt.IsSane()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Merged PSBT is inconsistent\");\n+    PartiallySignedTransaction merged_psbt;\n+    TransactionError error;\n+    if (!CombinePSBTs(merged_psbt, error, psbtxs)) {\n+        throw JSONRPCTransactionError(error);\n     }\n \n     UniValue result(UniValue::VOBJ);\n@@ -1531,29 +1525,23 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    // Finalize input signatures -- in case we have partial signatures that add up to a complete\n-    //   signature, but have not combined them yet (e.g. because the combiner that created this\n-    //   PartiallySignedTransaction did not understand them), this will combine them into a final\n-    //   script.\n-    bool complete = true;\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, SIGHASH_ALL);\n-    }\n+    bool extract = request.params[1].isNull() || (!request.params[1].isNull() && request.params[1].get_bool());\n+\n+    CMutableTransaction mtx;\n+    bool complete = FinalizeAndExtractPSBT(psbtx, mtx);\n \n     UniValue result(UniValue::VOBJ);\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-    bool extract = request.params[1].isNull() || (!request.params[1].isNull() && request.params[1].get_bool());\n+    std::string result_str;\n+\n     if (complete && extract) {\n-        CMutableTransaction mtx(*psbtx.tx);\n-        for (unsigned int i = 0; i < mtx.vin.size(); ++i) {\n-            mtx.vin[i].scriptSig = psbtx.inputs[i].final_script_sig;\n-            mtx.vin[i].scriptWitness = psbtx.inputs[i].final_script_witness;\n-        }\n         ssTx << mtx;\n-        result.pushKV(\"hex\", HexStr(ssTx.str()));\n+        result_str = HexStr(ssTx.str());\n+        result.pushKV(\"hex\", result_str);\n     } else {\n         ssTx << psbtx;\n-        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+        result_str = EncodeBase64(ssTx.str());\n+        result.pushKV(\"psbt\", result_str);\n     }\n     result.pushKV(\"complete\", complete);\n "
      },
      {
        "sha": "653568044d5af9a1e4eb09e856144e321ad06b13",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/102faad81efa1cb12c29c466cfe81fc8c7351e1d/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=102faad81efa1cb12c29c466cfe81fc8c7351e1d",
        "patch": "@@ -151,6 +151,8 @@ RPCErrorCode RPCErrorFromTransactionError(TransactionError terr)\n         case TransactionError::P2P_DISABLED:\n             return RPC_CLIENT_P2P_DISABLED;\n         case TransactionError::INVALID_PSBT:\n+        case TransactionError::PSBT_MISMATCH:\n+            return RPC_INVALID_PARAMETER;\n         case TransactionError::SIGHASH_MISMATCH:\n             return RPC_DESERIALIZATION_ERROR;\n         default: break;"
      }
    ]
  },
  {
    "sha": "dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzNiMmNjYjVmNWRkNDMzMWU0Zjk4NWYyZDllZjY1ZjJhOGI0YzU1",
    "commit": {
      "author": {
        "name": "Ben Carman",
        "email": "benthecarman@live.com",
        "date": "2019-02-12T00:19:22Z"
      },
      "committer": {
        "name": "Ben Carman",
        "email": "benthecarman@live.com",
        "date": "2019-02-12T00:19:22Z"
      },
      "message": "tests: Added missing tests for RPC wallet errors",
      "tree": {
        "sha": "9202612735d3e53b18c226e3c8a162d20ea29e87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9202612735d3e53b18c226e3c8a162d20ea29e87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEECtg4d8HwzR7pvWYK18x3C4H9IqgFAlxiEQoACgkQ18x3C4H9\nIqhLVwv/WHTZASa+IGp8TbFOJJS8XQSKn/Tkeuhp38yKCfe/n+sTMTF3zN9gSnRR\nxMDXXWrBxPjdIpDLn7tfK5aUiU83hZX1vgc9PY857kDyAuC6k//fNiyk4qhR0UZ4\nKYHQPpQguAsWGMiC7+EHVR0Nvd/1+ta6KXRMN+qizTQ2J3hrRjYCUWhfhkf6us0b\nPGRc0OEOVr77wQbaLK7NIND26ZNQFALhRhZWdF0o2Irpt3/uSls4G5SyfOZK+OEZ\nVyZCVFC8ph9NbhrwtNrJQIf5CXKx2Z/N31QZf/S1DrzRRdRcm/bigAyjKkTq6fT3\n+KfbF42ZfZ+p3JKy4VqkbOSWsmtZ/GO8zSnDiCRyov6XSuIDnEjP9incM7aVSz78\ngG8QdrFlBalVEiOhl0vDJ35iy+zE2jutK4SNacZo+VlLB1xv+daqtYMgiBgzO8kg\n8hCAXrFwWQNYxW27jfH2sHo+GVH9zuspYTsN5fnxLHR39iKm5Stak9NW3FGp6V9s\nrTt7lP/I\n=QRFa\n-----END PGP SIGNATURE-----",
        "payload": "tree 9202612735d3e53b18c226e3c8a162d20ea29e87\nparent 1bc149d05b09d716723d2f091250fab38fd70fc2\nauthor Ben Carman <benthecarman@live.com> 1549930762 -0600\ncommitter Ben Carman <benthecarman@live.com> 1549930762 -0600\n\ntests: Added missing tests for RPC wallet errors\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55/comments",
    "author": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bc149d05b09d716723d2f091250fab38fd70fc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc149d05b09d716723d2f091250fab38fd70fc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc149d05b09d716723d2f091250fab38fd70fc2"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe1a614700099e6388b26cedc50e2bb55b7c4e11",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55",
        "patch": "@@ -327,12 +327,38 @@ def run_test(self):\n         tx_obj = self.nodes[0].gettransaction(txid)\n         assert_equal(tx_obj['amount'], Decimal('-0.0001'))\n \n+        # General checks for errors from incorrect inputs\n         # This will raise an exception because the amount type is wrong\n         assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n \n         # This will raise an exception since generate does not accept a string\n         assert_raises_rpc_error(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n \n+        # This will raise an exception for the invalid private key format\n+        assert_raises_rpc_error(-5, \"Invalid private key encoding\", self.nodes[0].importprivkey, \"invalid\")\n+\n+        # This will raise an exception for importing an address with the PS2H flag\n+        temp_address = self.nodes[1].getnewaddress()\n+        assert_raises_rpc_error(-5, \"Cannot use the p2sh flag with an address - use a script instead\", self.nodes[0].importaddress, temp_address, \"label\", False, True)\n+\n+        # This will raise an exception for attempting to dump the private key of an address you do not own\n+        assert_raises_rpc_error(-3, \"Address does not refer to a key\", self.nodes[0].dumpprivkey, temp_address)\n+\n+        # This will raise an exception for attempting to get the private key of an invalid Bitcoin address\n+        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].dumpprivkey, \"invalid\")\n+\n+        # This will raise an exception for attempting to set a label for an invalid Bitcoin address\n+        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].setlabel, \"invalid address\", \"label\")\n+\n+        # This will raise an exception for importing an invalid address\n+        assert_raises_rpc_error(-5, \"Invalid Bitcoin address or script\", self.nodes[0].importaddress, \"invalid\")\n+\n+        # This will raise an exception for attempting to import a pubkey that isn't in hex\n+        assert_raises_rpc_error(-5, \"Pubkey must be a hex string\", self.nodes[0].importpubkey, \"not hex\")\n+\n+        # This will raise an exception for importing an invalid pubkey\n+        assert_raises_rpc_error(-5, \"Pubkey is not a valid public key\", self.nodes[0].importpubkey, \"5361746f736869204e616b616d6f746f\")\n+\n         # Import address and private key to check correct behavior of spendable unspents\n         # 1. Send some coins to generate new UTXO\n         address_to_import = self.nodes[2].getnewaddress()"
      }
    ]
  },
  {
    "sha": "65435701efdafc6b91db542327c57c69386f02eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTQzNTcwMWVmZGFmYzZiOTFkYjU0MjMyN2M1N2M2OTM4NmYwMmVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-12T14:09:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-12T14:27:39Z"
      },
      "message": "Merge #15358: util: Add SetupHelpOptions()\n\na99999cc04c2e7d79bb841fd954c84e985ed3b88 util: Add SetupHelpOptions() (MarcoFalke)\n\nPull request description:\n\n  Every binary we have sets up the help option in their own way and wording.\n\n  Solve that by having one function take care of it for all of them.\n\nTree-SHA512: 6e947fa8bc2a46fa6ca9f45777020aa269a5df0dd916ebc863224f9a1e0f79e8e7754a1478567307edd9461e8babd77d26bc2710bbd56e8f8da9020aa85a8c9c",
      "tree": {
        "sha": "508819bb668967e3f2f5cab197b572e292a69e9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/508819bb668967e3f2f5cab197b572e292a69e9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65435701efdafc6b91db542327c57c69386f02eb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxi19sACgkQHkrtYphs\n0l2njwf+Mbn9fz1vSot6s0B6id6YBIR1DWoUPyAlhCtfIpM2iGVjQRbUzkd/t5V1\n8t4IP6Yg9HasyFKjU6yKHZn/kVVkSkqrS4SjXEZnaA1C6wkrIZwjvPnm56J7f1dF\nBYaXvYdo44hPOnnlXv674Ql/mD7BI3SpdPwPaNLtFh4fbFjFKJlytBzlYS97uWr7\n2qNzBSNRNfr5OgU6iCl7PdEN6TySlhCKpSveywEeAMSs7Zwr5ALL9diiQuu/xYMV\n5vC+TMleRl7W0fSrxqb/7Yl78gXIjpQ9FML5xqZCCM8k8lqx2uYCteToYBztroBA\nsPa534BFw70bnCOkQechq6oOLvzSsw==\n=07KK\n-----END PGP SIGNATURE-----",
        "payload": "tree 508819bb668967e3f2f5cab197b572e292a69e9a\nparent 1bc149d05b09d716723d2f091250fab38fd70fc2\nparent a99999cc04c2e7d79bb841fd954c84e985ed3b88\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1549980592 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1549981659 +0100\n\nMerge #15358: util: Add SetupHelpOptions()\n\na99999cc04c2e7d79bb841fd954c84e985ed3b88 util: Add SetupHelpOptions() (MarcoFalke)\n\nPull request description:\n\n  Every binary we have sets up the help option in their own way and wording.\n\n  Solve that by having one function take care of it for all of them.\n\nTree-SHA512: 6e947fa8bc2a46fa6ca9f45777020aa269a5df0dd916ebc863224f9a1e0f79e8e7754a1478567307edd9461e8babd77d26bc2710bbd56e8f8da9020aa85a8c9c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65435701efdafc6b91db542327c57c69386f02eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65435701efdafc6b91db542327c57c69386f02eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65435701efdafc6b91db542327c57c69386f02eb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bc149d05b09d716723d2f091250fab38fd70fc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc149d05b09d716723d2f091250fab38fd70fc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc149d05b09d716723d2f091250fab38fd70fc2"
      },
      {
        "sha": "a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99999cc04c2e7d79bb841fd954c84e985ed3b88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a99999cc04c2e7d79bb841fd954c84e985ed3b88"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 23,
      "deletions": 28
    },
    "files": [
      {
        "sha": "95c1d24dff0cc13d6b46728008564080ffe5674c",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -20,7 +20,7 @@ Bitcoin Core RPC client version v0.17.99.0\n .HP\n \\-?\n .IP\n-This help message\n+Print this help message and exit\n .HP\n \\fB\\-conf=\\fR<file>\n .IP"
      },
      {
        "sha": "6b6071d9b744c6c21923086773b5563585d6824e",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -14,7 +14,7 @@ Bitcoin Core bitcoin\\-tx utility version v0.17.99.0\n .HP\n \\-?\n .IP\n-This help message\n+Print this help message and exit\n .HP\n \\fB\\-create\\fR\n .IP"
      },
      {
        "sha": "1cb8cdebcd3e533936120218d5d0243ef132b842",
        "filename": "doc/man/bitcoin-wallet.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/doc/man/bitcoin-wallet.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/doc/man/bitcoin-wallet.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-wallet.1?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -15,7 +15,7 @@ bitcoin\\-wallet [options] <command>\n .HP\n \\-?\n .IP\n-This help message\n+Print this help message and exit\n .HP\n \\fB\\-datadir=\\fR<dir>\n .IP"
      },
      {
        "sha": "d67b2c5bc7896fa68370dfe6aa4967520b14d3b8",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -24,7 +24,8 @@ static const int64_t DEFAULT_PLOT_HEIGHT = 768;\n \n static void SetupBenchArgs()\n {\n-    gArgs.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n+    SetupHelpOptions(gArgs);\n+\n     gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), false, OptionsCategory::OPTIONS);\n@@ -33,10 +34,6 @@ static void SetupBenchArgs()\n     gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), false, OptionsCategory::OPTIONS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n static fs::path SetDataDir()"
      },
      {
        "sha": "b0e1f67d93981f32fceab04f91d0153a75e2c6ea",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -34,11 +34,12 @@ static const int CONTINUE_EXECUTION=-1;\n \n static void SetupCliArgs()\n {\n+    SetupHelpOptions(gArgs);\n+\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n-    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n@@ -55,10 +56,6 @@ static void SetupCliArgs()\n     gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n /** libevent event log callback */"
      },
      {
        "sha": "4be89aab6cfe1986c1e5b8f9ddced62716baf8e9",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -35,7 +35,8 @@ const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n static void SetupBitcoinTxArgs()\n {\n-    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n+    SetupHelpOptions(gArgs);\n+\n     gArgs.AddArg(\"-create\", \"Create new, empty TX.\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-json\", \"Select JSON output\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", false, OptionsCategory::OPTIONS);\n@@ -66,10 +67,6 @@ static void SetupBitcoinTxArgs()\n \n     gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", false, OptionsCategory::REGISTER_COMMANDS);\n     gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", false, OptionsCategory::REGISTER_COMMANDS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n //"
      },
      {
        "sha": "32a539aac66d914f4254012315ec3a7d7acb4383",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -20,20 +20,16 @@ const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n static void SetupWalletToolArgs()\n {\n+    SetupHelpOptions(gArgs);\n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise.\", false, OptionsCategory::DEBUG_TEST);\n \n     gArgs.AddArg(\"info\", \"Get wallet info\", false, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"create\", \"Create new wallet file\", false, OptionsCategory::COMMANDS);\n-\n-    // Hidden\n-    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n-    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "0013319ad553f8ec917bfd459e0c3975fc7ee150",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -326,6 +326,9 @@ static void OnRPCStopped()\n \n void SetupServerArgs()\n {\n+    SetupHelpOptions(gArgs);\n+    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", false, OptionsCategory::DEBUG_TEST); // server-only for now\n+\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n@@ -334,14 +337,11 @@ void SetupServerArgs()\n     const auto regtestChainParams = CreateChainParams(CBaseChainParams::REGTEST);\n \n     // Hidden Options\n-    std::vector<std::string> hidden_args = {\"-h\", \"-help\",\n+    std::vector<std::string> hidden_args = {\n         \"-dbcrashratio\", \"-forcecompactdb\",\n         // GUI args. These will be overwritten by SetupUIArgs for the GUI\n         \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n \n-    // Set all of the args and their help\n-    // When adding new options to the categories, please keep and ensure alphabetical ordering.\n-    gArgs.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n@@ -470,7 +470,6 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "27ed24d01223e8c1269f34d035506f2a03982fe7",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -635,6 +635,12 @@ bool HelpRequested(const ArgsManager& args)\n     return args.IsArgSet(\"-?\") || args.IsArgSet(\"-h\") || args.IsArgSet(\"-help\") || args.IsArgSet(\"-help-debug\");\n }\n \n+void SetupHelpOptions(ArgsManager& args)\n+{\n+    args.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n+    args.AddHiddenArgs({\"-h\", \"-help\"});\n+}\n+\n static const int screenWidth = 79;\n static const int optIndent = 2;\n static const int msgIndent = 7;"
      },
      {
        "sha": "54d4cf2e58b738ded4e4cc528a9c006b54ba5083",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65435701efdafc6b91db542327c57c69386f02eb/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65435701efdafc6b91db542327c57c69386f02eb/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=65435701efdafc6b91db542327c57c69386f02eb",
        "patch": "@@ -295,6 +295,9 @@ extern ArgsManager gArgs;\n  */\n bool HelpRequested(const ArgsManager& args);\n \n+/** Add help options to the args manager */\n+void SetupHelpOptions(ArgsManager& args);\n+\n /**\n  * Format a string to be used as group of options in help messages\n  *"
      }
    ]
  },
  {
    "sha": "03732f8644a449af34f4df1bb3b8915fb15ef22c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzczMmY4NjQ0YTQ0OWFmMzRmNGRmMWJiM2I4OTE1ZmIxNWVmMjJj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T16:09:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T16:10:02Z"
      },
      "message": "Merge #14543: [QA] minor p2p_sendheaders fix of height in coinbase\n\n1cdb9bb51f minor p2p_sendheaders fix of height in coinbase (Gregory Sanders)\n\nPull request description:\n\n  > \\# Now announce a header that forks the last two blocks\n\n  Doesn't effect any behavior since BIP34 isn't active in regtest for many blocks.\n\nTree-SHA512: 3f214b956a94250bb640f63b6ff707930e1d4cb8df1bbf0fef4012d89a94bafbde0d7b42bbe7113ec33810169281c22c6e389445921d99decb74aa56e87a0f27",
      "tree": {
        "sha": "99fd576b23df4aabe253af808b79cf58f244b3d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99fd576b23df4aabe253af808b79cf58f244b3d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03732f8644a449af34f4df1bb3b8915fb15ef22c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcYu/aAAoJENLqSFDnUosl2z0QAJS75Q7F5ah9FAqzyGSD9+MM\nqbVVL9X3p7qf+9vQL/wBvnCDqAsOSunHU21vN0T05DCidtiHNGlkQBSJ9CY6etNd\nW6rOM7MX6rYYhM4giAZU/ghNu1oTB+jv/f8uAM+c1Qq5uRdfC84QVRKJlc3zLXoO\n3UmiIkHkCEKj5XPZUnA5oJx9Md0AwmRWVAzGBWVQGv5EChkcKIPEhLDbLpaVhQbt\nQB64NsvS5DDJJciu4GG2e7hGEiS8v+9DzwD15Gzn6cH7hygLKPgXsEdLRD7zu3dr\nBKP43gl+/v9YRwTv28I8SPcUIK3pCWsMnkxn5i9oVqehZ0TI1Ms7xhW6AeG9nmPM\nDCLVQLdUbfMcMtTIgjSM+xg0VU6NqjoO0N8KzfnPqz4Wq/+iL/M/ffjqhTOYX6Vk\n09y4NmzTMxFaI7+wxKfiWF4piSs9dpYCyv1gang/nBxkbsD5zsrSATFAzGbp/nQp\ny6QO4iYWonFh5R/QnpwENPCa1Il17U8DHkbJ0Vqnr4TbP3egljVfbpG7mBM9LHgz\nmcgUbHluJxRQfJXQWOYUg8G9xzcPNgiQEQLCGVI0GAhx1r0qDiHXD1Gur9h/HxBx\nop0b8AA4MICqyTZX2LQlZHJpg4XrgaoKwG+Nz2+uwLfKMg/iU6Wxkh15MnfJ/vTx\nTw/SJ1oQ8Kt4N7hAAsAR\n=xsF1\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGkoYZkbYBEw+jWLcaEfraM/1zsdcvqdU2DQAWj3zn5KCP/wEGz3Nhpih4g9\ndKdENW9AE9oI8CDrqg78skkZbfpjjrvjWEwDQlNwn9yQClfEvi2BJ+83uwjxBFxi\n7/PwCEgti7Iz+VxWAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BCafBfVMSIpLq3cHU5iwJrvCPAgRE/Xp0ch\nC9viJo7eE7SY0I0G25NQyb3NHcM17HXplcYI8QRcYu/z8AizSIFmEGT7lgCD3+MN\nLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9y\nZ//wELPs1MghX3uOq2hJQVsetZMI8BCicg86a2fnB4SC2MYIGRLsCPEEXGLv9PAI\nMssBAcJHShYAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJu\naXR5d2FsbC5jb23wEPmdLPPCkBfQmcuRYXj6lkcI8QRcYu/z8AiHo2p6bwF7oQCD\n3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 99fd576b23df4aabe253af808b79cf58f244b3d3\nparent 65435701efdafc6b91db542327c57c69386f02eb\nparent 1cdb9bb51fa9f6396c8a684b3340b32b29d626e5\nauthor MarcoFalke <falke.marco@gmail.com> 1549987797 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549987802 -0500\n\nMerge #14543: [QA] minor p2p_sendheaders fix of height in coinbase\n\n1cdb9bb51f minor p2p_sendheaders fix of height in coinbase (Gregory Sanders)\n\nPull request description:\n\n  > \\# Now announce a header that forks the last two blocks\n\n  Doesn't effect any behavior since BIP34 isn't active in regtest for many blocks.\n\nTree-SHA512: 3f214b956a94250bb640f63b6ff707930e1d4cb8df1bbf0fef4012d89a94bafbde0d7b42bbe7113ec33810169281c22c6e389445921d99decb74aa56e87a0f27\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03732f8644a449af34f4df1bb3b8915fb15ef22c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03732f8644a449af34f4df1bb3b8915fb15ef22c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03732f8644a449af34f4df1bb3b8915fb15ef22c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65435701efdafc6b91db542327c57c69386f02eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65435701efdafc6b91db542327c57c69386f02eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65435701efdafc6b91db542327c57c69386f02eb"
      },
      {
        "sha": "1cdb9bb51fa9f6396c8a684b3340b32b29d626e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cdb9bb51fa9f6396c8a684b3340b32b29d626e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cdb9bb51fa9f6396c8a684b3340b32b29d626e5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7d7d251765361ed5d68fd9e7111bf4d0419f5bc5",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03732f8644a449af34f4df1bb3b8915fb15ef22c/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03732f8644a449af34f4df1bb3b8915fb15ef22c/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=03732f8644a449af34f4df1bb3b8915fb15ef22c",
        "patch": "@@ -490,7 +490,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n         # Now announce a header that forks the last two blocks\n         tip = blocks[0].sha256\n-        height -= 1\n+        height -= 2\n         blocks = []\n \n         # Create extra blocks for later"
      }
    ]
  },
  {
    "sha": "d8794a78a887a920276c7124f1c46d69592c6c4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODc5NGE3OGE4ODdhOTIwMjc2YzcxMjRmMWM0NmQ2OTU5MmM2YzRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T16:15:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T16:15:11Z"
      },
      "message": "Merge #13787: Test for Windows encoding issue\n\n15b31032a6 appveyor: Remove outdated libraries (Chun Kuan Lee)\nae892adceb tests: accept unicode characters on Windows (Chun Kuan Lee)\n\nPull request description:\n\n  This PR removes unused Windows compatible path. Encoding issues has been solved.\n\nTree-SHA512: d24dce035fe3b576eaa002896f815a6691e88618ea371171d7e39883e1d63b3ed4d4631ab3b3a26bd67ae4e8ae13b1ff188942ab7ac6a93d704e0de301368cd0",
      "tree": {
        "sha": "88320157b53d177a2316e4e77dc3d7fd0a4dae4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88320157b53d177a2316e4e77dc3d7fd0a4dae4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8794a78a887a920276c7124f1c46d69592c6c4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcYvEPAAoJENLqSFDnUoslg8EP/jVaXtTgsV8E8ep6KmbsJsYF\nYVPlh5x9hWngYQ0TcMm7Lp7Ht9BGJ94cYgrpFcR/1lk1hc5/r4Ysn4I+fZnaimRp\ndzJt5wBGYyrd0k0+lMJ4vSNOkAkUS/l7pot44uxGZLnPrEXpDWKNoAyuptqFiyXT\nA1l4DtOK0koddawxHOX2g+fXDwllHzOotJR2UrizJbpm0ODW4LSShyBqZUGztX1m\n1b/VDuHbwOZkJZ0vd90lQrlERUIENokebFVvpomSmJl7YcUZHvieYiPnPruRZDjn\nSUWmsFb1R70Q3fCtA8PmkRsiZ+2JSO0/xma3K5quVJcMvtyHMfKuR6AlNbUWbhUl\nUzRc06dXXApQhsE082GzxB8ko4y9LlaBFZl31qV/5qsFfq9gG40Is+/MUuGz4U/2\nREisUXQem1A+a8IJPAW3u9jUgWOlK6nZpkQ9g4nkjAOydqeQP7R/Ie2fbNRXzKvu\nQHjfKZnvjicyy0YJRZlT0KWCG1qE+TRsBsNXzSBkxlMtdaCF/zilRurtAEaben+R\n00D62JNNbsxFhSnGV4Yp2/jpqKN7Q4qX7n43DFtgMje2kQjP5cRKtiSNJGxAquH1\nPU3GCyy9xMxNEbTNGYheTMcjrZCbRASgxx2zmdewk7qZYu7H40ohYgNbzfEMvQm4\np/AG+DCxg0t6UWsG0bks\n=RmPi\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEVmXEEBx2sdwRM93mCvv4xRIrEW9R0G2zttqe7dT9VdCP/wEEX/cyjDX7G+\na/Wa+1LrJjcI8QRcYvER8Aha3pmv0Cbk9wCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEJfJLkYfw+YnDYIeMzDHV8cI8SAzXYuK\noYcJ9eL97S+KyU7/P9uCSNlMMzSsSQt4Tss49AjxBFxi8RHwCICRbmgMmayjAIPf\n4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMu\nb3Jn//AQrgRRjZXWQDBIJ2ByK29bjwjxBFxi8RLwCN4hERfOF8qYAIPf4w0u+QyO\nLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfw\nENQcfMJbunk5nuuEzO13o7oI8BDy/qWLgoSlitSAwceHpD03CPEgmXcPIFSAHhBj\nGGQ5Db252Sh83NSW3uNxb0E87759hH4I8QRcYvES8AhRmSO6OseacgCD3+MNLvkM\njikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 88320157b53d177a2316e4e77dc3d7fd0a4dae4d\nparent 03732f8644a449af34f4df1bb3b8915fb15ef22c\nparent 15b31032a67f09e54b3d40a9a0b19718a6440758\nauthor MarcoFalke <falke.marco@gmail.com> 1549988109 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549988111 -0500\n\nMerge #13787: Test for Windows encoding issue\n\n15b31032a6 appveyor: Remove outdated libraries (Chun Kuan Lee)\nae892adceb tests: accept unicode characters on Windows (Chun Kuan Lee)\n\nPull request description:\n\n  This PR removes unused Windows compatible path. Encoding issues has been solved.\n\nTree-SHA512: d24dce035fe3b576eaa002896f815a6691e88618ea371171d7e39883e1d63b3ed4d4631ab3b3a26bd67ae4e8ae13b1ff188942ab7ac6a93d704e0de301368cd0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8794a78a887a920276c7124f1c46d69592c6c4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8794a78a887a920276c7124f1c46d69592c6c4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8794a78a887a920276c7124f1c46d69592c6c4e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03732f8644a449af34f4df1bb3b8915fb15ef22c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03732f8644a449af34f4df1bb3b8915fb15ef22c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03732f8644a449af34f4df1bb3b8915fb15ef22c"
      },
      {
        "sha": "15b31032a67f09e54b3d40a9a0b19718a6440758",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15b31032a67f09e54b3d40a9a0b19718a6440758",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15b31032a67f09e54b3d40a9a0b19718a6440758"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "31c3aba8c60abe4b63248e7f1f3b679ae5dfaf80",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8794a78a887a920276c7124f1c46d69592c6c4e/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8794a78a887a920276c7124f1c46d69592c6c4e/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=d8794a78a887a920276c7124f1c46d69592c6c4e",
        "patch": "@@ -17,6 +17,7 @@ install:\n - cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n # - cmd: pip install zmq\n+- cmd: vcpkg remove --outdated --recurse\n - cmd: vcpkg install --triplet %PLATFORM%-windows-static %PACKAGES% > NUL\n - cmd: del /s /q C:\\Tools\\vcpkg\\installed\\%PLATFORM%-windows-static\\debug # Remove unused debug library\n before_build:"
      },
      {
        "sha": "999cd72108caeea1d36d6c49af55f578e00679e6",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8794a78a887a920276c7124f1c46d69592c6c4e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8794a78a887a920276c7124f1c46d69592c6c4e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d8794a78a887a920276c7124f1c46d69592c6c4e",
        "patch": "@@ -250,10 +250,6 @@ def main():\n     # Create base test directory\n     tmpdir = \"%s/test_runner_\u20bf_\ud83c\udfc3_%s\" % (args.tmpdirprefix, datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\"))\n \n-    # If we fixed the command-line and filename encoding issue on Windows, these two lines could be removed\n-    if config[\"environment\"][\"EXEEXT\"] == \".exe\":\n-        tmpdir = \"%s/test_runner_%s\" % (args.tmpdirprefix, datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\"))\n-\n     os.makedirs(tmpdir)\n \n     logging.debug(\"Temporary test directory at %s\" % tmpdir)"
      }
    ]
  },
  {
    "sha": "fa178a6385bf300499fb18940051fc4142fb5b6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE3OGE2Mzg1YmYzMDA0OTlmYjE4OTQwMDUxZmM0MTQyZmI1YjZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T16:59:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T16:34:57Z"
      },
      "message": "[rpc] mining: Omit uninitialized currentblockweight, currentblocktx",
      "tree": {
        "sha": "65c7d92724a4d7b91c06c4a6b9d0eaf3e37189ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65c7d92724a4d7b91c06c4a6b9d0eaf3e37189ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa178a6385bf300499fb18940051fc4142fb5b6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcYvWxAAoJEM4rdWl+aaVIdtsL/iBDWp5bfelPkjCo0fVyPcWh\n3w/3JAx5urwz7AeCeFdXiDocfgGRbIPPH/PNaHjA+4MR3LG9OiVJF7eHhrJgSt7V\nckDzebF7kGUq+gLIUMSlhH8UpVJ81C+gsg9UWodK+yDQrYtlP4lOjkoNR641TGG4\nHPrw8RLRepK1hvun1oBAuPmLMbMrFC2KdIJjRnd4kBlfc+gke0XzLJXLOVilMJOP\n6wEdmuw5OSxjQWP1dAne0WnHxNbVkv/GhPFnGkZ8GnZrKk/uQg8F/IbElorCtXoo\nXmrN+9ImYmbdDe/N1ZaXZX3y9z1WwF+uXxZCaYVMZ0L2pbe6TJ+fG2GSf4NuBuJc\nf2gs0ud+5cwtTcXs0WMv4MJx44CmyYFsSklbkLEiAeRozbw7eW4+PeCebk+5aOa1\nk14Y1KVaInNLdeJGe/tdoGvJgVCwaJJVmfEAeQDiqfGHj1StQYoqqqiGc0r5ZOHy\n8L4oPvoXafgO3fRn0GoXbA16tY8jlkEVp5L8YWTfOA==\n=mra4\n-----END PGP SIGNATURE-----",
        "payload": "tree 65c7d92724a4d7b91c06c4a6b9d0eaf3e37189ad\nparent ad039aa0d3e8a831559434022b1da1de4d72a847\nauthor MarcoFalke <falke.marco@gmail.com> 1549904374 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1549989297 -0500\n\n[rpc] mining: Omit uninitialized currentblockweight, currentblocktx\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa178a6385bf300499fb18940051fc4142fb5b6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa178a6385bf300499fb18940051fc4142fb5b6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa178a6385bf300499fb18940051fc4142fb5b6b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad039aa0d3e8a831559434022b1da1de4d72a847",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad039aa0d3e8a831559434022b1da1de4d72a847",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad039aa0d3e8a831559434022b1da1de4d72a847"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 62,
      "deletions": 39
    },
    "files": [
      {
        "sha": "a6408cf1e6b73fb6c713be2bbfae9164315f527c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa178a6385bf300499fb18940051fc4142fb5b6b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa178a6385bf300499fb18940051fc4142fb5b6b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa178a6385bf300499fb18940051fc4142fb5b6b",
        "patch": "@@ -263,6 +263,9 @@ in the Low-level Changes section below.\n \n - See the [Mining](#mining) section for changes to `getblocktemplate`.\n \n+- The `getmininginfo` RPC now omits `currentblockweight` and `currentblocktx`\n+  when a block was never assembled via RPC on this node.\n+\n - The `getrawtransaction` RPC & REST endpoints no longer check the\n   unspent UTXO set for a transaction. The remaining behaviors are as\n   follows: 1. If a blockhash is provided, check the corresponding block."
      },
      {
        "sha": "80a2f8f018073a7bf6f81009feb364850141178e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa178a6385bf300499fb18940051fc4142fb5b6b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa178a6385bf300499fb18940051fc4142fb5b6b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=fa178a6385bf300499fb18940051fc4142fb5b6b",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,8 +10,8 @@\n #include <chainparams.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n-#include <consensus/tx_verify.h>\n #include <consensus/merkle.h>\n+#include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <hash.h>\n #include <net.h>\n@@ -21,22 +21,14 @@\n #include <primitives/transaction.h>\n #include <script/standard.h>\n #include <timedata.h>\n-#include <util/system.h>\n #include <util/moneystr.h>\n+#include <util/system.h>\n #include <validationinterface.h>\n \n #include <algorithm>\n #include <queue>\n #include <utility>\n \n-// Unconfirmed transactions in the memory pool often depend on other\n-// transactions in the memory pool. When we select transactions from the\n-// pool, we select by highest fee rate of a transaction combined with all\n-// its ancestors.\n-\n-uint64_t nLastBlockTx = 0;\n-uint64_t nLastBlockWeight = 0;\n-\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     int64_t nOldTime = pblock->nTime;\n@@ -95,6 +87,9 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n+Optional<int64_t> BlockAssembler::m_last_block_num_txs{nullopt};\n+Optional<int64_t> BlockAssembler::m_last_block_weight{nullopt};\n+\n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     int64_t nTimeStart = GetTimeMicros();\n@@ -147,8 +142,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     int64_t nTime1 = GetTimeMicros();\n \n-    nLastBlockTx = nBlockTx;\n-    nLastBlockWeight = nBlockWeight;\n+    m_last_block_num_txs = nBlockTx;\n+    m_last_block_weight = nBlockWeight;\n \n     // Create coinbase transaction.\n     CMutableTransaction coinbaseTx;"
      },
      {
        "sha": "7c4c455072ed660fdf04cf6231876e5ac0f619af",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa178a6385bf300499fb18940051fc4142fb5b6b/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa178a6385bf300499fb18940051fc4142fb5b6b/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=fa178a6385bf300499fb18940051fc4142fb5b6b",
        "patch": "@@ -1,17 +1,19 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n+#include <optional.h>\n #include <primitives/block.h>\n #include <txmempool.h>\n #include <validation.h>\n \n-#include <stdint.h>\n #include <memory>\n+#include <stdint.h>\n+\n #include <boost/multi_index_container.hpp>\n #include <boost/multi_index/ordered_index.hpp>\n \n@@ -159,6 +161,9 @@ class BlockAssembler\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n \n+    static Optional<int64_t> m_last_block_num_txs;\n+    static Optional<int64_t> m_last_block_weight;\n+\n private:\n     // utility functions\n     /** Clear the block's state and prepare for assembling a new block */"
      },
      {
        "sha": "3cdda5123ceb789c87e0a41e9ff00a6b7075cf51",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa178a6385bf300499fb18940051fc4142fb5b6b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa178a6385bf300499fb18940051fc4142fb5b6b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa178a6385bf300499fb18940051fc4142fb5b6b",
        "patch": "@@ -187,36 +187,36 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n \n static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n             RPCHelpMan{\"getmininginfo\",\n                 \"\\nReturns a json object containing mining-related information.\",\n                 {},\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n-            \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n-            \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n-            \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n-            \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n-            \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n-            \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-            \"}\\n\"\n+                    \"{\\n\"\n+                    \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n+                    \"  \\\"currentblockweight\\\": nnn, (numeric, optional) The block weight of the last assembled block (only present if a block was ever assembled)\\n\"\n+                    \"  \\\"currentblocktx\\\": nnn,     (numeric, optional) The number of block transactions of the last assembled block (only present if a block was ever assembled)\\n\"\n+                    \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n+                    \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n+                    \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n+                    \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n+                    \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n+                    \"}\\n\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getmininginfo\", \"\")\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n                 },\n             }.ToString());\n-\n+    }\n \n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"blocks\",           (int)chainActive.Height());\n-    obj.pushKV(\"currentblockweight\", (uint64_t)nLastBlockWeight);\n-    obj.pushKV(\"currentblocktx\",   (uint64_t)nLastBlockTx);\n+    if (BlockAssembler::m_last_block_weight) obj.pushKV(\"currentblockweight\", *BlockAssembler::m_last_block_weight);\n+    if (BlockAssembler::m_last_block_num_txs) obj.pushKV(\"currentblocktx\", *BlockAssembler::m_last_block_num_txs);\n     obj.pushKV(\"difficulty\",       (double)GetDifficulty(chainActive.Tip()));\n     obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n     obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());"
      },
      {
        "sha": "1975846b69f85bf9e663f0494021a9c80232182f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa178a6385bf300499fb18940051fc4142fb5b6b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa178a6385bf300499fb18940051fc4142fb5b6b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa178a6385bf300499fb18940051fc4142fb5b6b",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,8 +14,8 @@\n #include <coins.h>\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n-#include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <policy/feerate.h>\n+#include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n #include <sync.h>\n #include <versionbits.h>\n@@ -152,8 +152,6 @@ extern CTxMemPool mempool;\n extern std::atomic_bool g_is_mempool_loaded;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap& mapBlockIndex GUARDED_BY(cs_main);\n-extern uint64_t nLastBlockTx;\n-extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n extern Mutex g_best_block_mutex;\n extern std::condition_variable g_best_block_cv;"
      },
      {
        "sha": "6298dde3a010ccdbf6cda23808d802e53b105bf3",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 23,
        "deletions": 5,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa178a6385bf300499fb18940051fc4142fb5b6b/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa178a6385bf300499fb18940051fc4142fb5b6b/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=fa178a6385bf300499fb18940051fc4142fb5b6b",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mining RPCs\n@@ -11,7 +11,10 @@\n import copy\n from decimal import Decimal\n \n-from test_framework.blocktools import create_coinbase\n+from test_framework.blocktools import (\n+    create_coinbase,\n+    TIME_GENESIS_BLOCK,\n+)\n from test_framework.messages import (\n     CBlock,\n     CBlockHeader,\n@@ -24,9 +27,11 @@\n     assert_equal,\n     assert_raises_rpc_error,\n     bytes_to_hex_str as b2x,\n+    connect_nodes_bi,\n )\n from test_framework.script import CScriptNum\n \n+\n def assert_template(node, block, expect, rehash=True):\n     if rehash:\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -37,9 +42,22 @@ def assert_template(node, block, expect, rehash=True):\n class MiningTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n+        self.setup_clean_chain = True\n+\n+    def mine_chain(self):\n+        self.log.info('Create some old blocks')\n+        for t in range(TIME_GENESIS_BLOCK, TIME_GENESIS_BLOCK + 200 * 600, 600):\n+            self.nodes[0].setmocktime(t)\n+            self.nodes[0].generate(1)\n+        mining_info = self.nodes[0].getmininginfo()\n+        assert_equal(mining_info['blocks'], 200)\n+        assert_equal(mining_info['currentblocktx'], 0)\n+        assert_equal(mining_info['currentblockweight'], 4000)\n+        self.restart_node(0)\n+        connect_nodes_bi(self.nodes, 0, 1)\n \n     def run_test(self):\n+        self.mine_chain()\n         node = self.nodes[0]\n \n         def assert_submitblock(block, result_str_1, result_str_2=None):\n@@ -52,8 +70,8 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         mining_info = node.getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n         assert_equal(mining_info['chain'], 'regtest')\n-        assert_equal(mining_info['currentblocktx'], 0)\n-        assert_equal(mining_info['currentblockweight'], 0)\n+        assert 'currentblocktx' not in mining_info\n+        assert 'currentblockweight' not in mining_info\n         assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))\n         assert_equal(mining_info['networkhashps'], Decimal('0.003333333333333334'))\n         assert_equal(mining_info['pooledtx'], 0)"
      },
      {
        "sha": "15f4502994da9a395e2d63873d018a79754c417e",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa178a6385bf300499fb18940051fc4142fb5b6b/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa178a6385bf300499fb18940051fc4142fb5b6b/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=fa178a6385bf300499fb18940051fc4142fb5b6b",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Utilities for manipulating blocks and transactions.\"\"\"\n@@ -43,9 +43,13 @@\n \n MAX_BLOCK_SIGOPS = 20000\n \n+# Genesis block time (regtest)\n+TIME_GENESIS_BLOCK = 1296688602\n+\n # From BIP141\n WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n \n+\n def create_block(hashprev, coinbase, ntime=None, *, version=1):\n     \"\"\"Create a block (with regtest difficulty).\"\"\"\n     block = CBlock()"
      }
    ]
  },
  {
    "sha": "7d3f255316fc0d45272a38e3fea206105f67dc45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDNmMjU1MzE2ZmMwZDQ1MjcyYTM4ZTNmZWEyMDYxMDVmNjdkYzQ1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-12T18:19:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-12T18:20:50Z"
      },
      "message": "Merge #15153: gui: Add Open Wallet menu\n\n1951ea434 gui: Show indeterminate progress dialog while opening walllet (Jo\u00e3o Barbosa)\n8847cdaaa gui: Add OpenWalletActivity (Jo\u00e3o Barbosa)\n4c8982a88 interfaces: Avoid interface instance if wallet is null (Jo\u00e3o Barbosa)\nbe82dea23 gui: Add thread to run background activity in WalletController (Jo\u00e3o Barbosa)\n6c49a55b4 gui: Add Open Wallet menu (Jo\u00e3o Barbosa)\n32a8c6abf gui: Add openWallet and getWalletsAvailableToOpen to WalletController (Jo\u00e3o Barbosa)\nab288b4e5 interfaces: Add loadWallet to Node (Jo\u00e3o Barbosa)\n17abc0fd5 wallet: Factor out LoadWallet (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  The *Open Wallet* menu has all the available wallets currently not loaded. The list of the available wallets comes from `listWalletDir`.\n\n  In the future the menu can be replaced by a custom dialog.\n\n  <img width=\"674\" alt=\"screenshot 2019-01-12 at 12 17 02\" src=\"https://user-images.githubusercontent.com/3534524/51073166-ac041480-1664-11e9-8302-be81702bc146.png\">\n\nTree-SHA512: ebfd75eee0c8264863748899843afab67dadb7dff21313c11e3cb5b6108d954978dd1f1ae786bc07580c5a771ea4ab38d18c1643c9b9b3683ed53f0f6c582e38",
      "tree": {
        "sha": "9ea3977ad966597372981d790b40650e2f820783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ea3977ad966597372981d790b40650e2f820783"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d3f255316fc0d45272a38e3fea206105f67dc45",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlxjDoIACgkQHrd2uwPH\nki1IRA//RyAt1qEiqHAlOnsxxbzbZ55G6+La2lK0xTcaOHuURwu531AsmIUkVEK/\nfJ8SAyqjZi6D4tea2Amf5WNig7qvjkfsn4rm5MxYY7VUjdIqS9oRsnPtXo6zyPfV\nTgOk8VAuSZWZ6oZXpDYK/ZtvZZ5+6Wh7FZHHScq6PXgI1udFzctI9VAgDNFiPm7w\ncaWxfO0sJeRSPZ3hKzOB0Ykxw8m77jDeQN8bF++nNdjGsOwXCjnRzJxHsnYQPpd8\nJ192OP2vA1LfIBOg3/w7RLjg2UqbjTKAS/cjcgToLgUsqeMV5ULdeZBjD9FSS2Am\niznzun5poolT0shFLVuUB/OfAGrgzJUe8q5qVXijxsWG5ufBc5Y3OI+FHYIUd6v8\niLHvdrFZmVwpmVVYkmY4ZsJKvxda1xBgXThkADDuWb9kDMHBaUBt0oYCsTqd0P5M\nXCrKAiu3/XCctolf1dBFJ+2zrA+o8e5FuBdXcUpU6FOAx139Pxt3p7OVg5XPdnsc\n8z4Rgi4OcDsAhomDDfDGY3YbvNhZ+HoG1L7SqSqupzunO85lri1WGaOKa6zgxVMh\nEeg79y58gMlZcsxVrTlKlCCqVstry6XeryMU1nNjBZfoBkf8pbjbPboAkGa1W5+T\nTVl9RwcPunYTvgpP+4hTabfFqBmRSRUpshspg+o6l+DWWB7107k=\n=UCg8\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQD/8BBJYL90zsRuQ7OenFUBFC31CPEgag3bb88AWgJlgNfMM1Cu7DlSDq1pNYIt\nM3cJ2SRfyZ0I8QRcYw6J8Aj+XVxOWBCY0wCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEGPwZJDAW+dmQVQpZNOM\nLh4I8CBXO+/jTnKjpPLa8mth+u6EBPGSI7DMHh9h+9yfSXRBxQjxBFxjDonwCI81\nUEr9hu++AIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmfwEPiwPDQ7bW+UBlr1AoT3lccI8BAaN6gAMYQ9F6ckmrBd\nshmGCPEEXGMOifAI+MarufyI/nkAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNh\nbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 9ea3977ad966597372981d790b40650e2f820783\nparent d8794a78a887a920276c7124f1c46d69592c6c4e\nparent 1951ea4342db4122032660139248b79a02c574f3\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1549995545 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1549995650 -1000\n\nMerge #15153: gui: Add Open Wallet menu\n\n1951ea434 gui: Show indeterminate progress dialog while opening walllet (Jo\u00e3o Barbosa)\n8847cdaaa gui: Add OpenWalletActivity (Jo\u00e3o Barbosa)\n4c8982a88 interfaces: Avoid interface instance if wallet is null (Jo\u00e3o Barbosa)\nbe82dea23 gui: Add thread to run background activity in WalletController (Jo\u00e3o Barbosa)\n6c49a55b4 gui: Add Open Wallet menu (Jo\u00e3o Barbosa)\n32a8c6abf gui: Add openWallet and getWalletsAvailableToOpen to WalletController (Jo\u00e3o Barbosa)\nab288b4e5 interfaces: Add loadWallet to Node (Jo\u00e3o Barbosa)\n17abc0fd5 wallet: Factor out LoadWallet (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  The *Open Wallet* menu has all the available wallets currently not loaded. The list of the available wallets comes from `listWalletDir`.\n\n  In the future the menu can be replaced by a custom dialog.\n\n  <img width=\"674\" alt=\"screenshot 2019-01-12 at 12 17 02\" src=\"https://user-images.githubusercontent.com/3534524/51073166-ac041480-1664-11e9-8302-be81702bc146.png\">\n\nTree-SHA512: ebfd75eee0c8264863748899843afab67dadb7dff21313c11e3cb5b6108d954978dd1f1ae786bc07580c5a771ea4ab38d18c1643c9b9b3683ed53f0f6c582e38\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d3f255316fc0d45272a38e3fea206105f67dc45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d3f255316fc0d45272a38e3fea206105f67dc45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d3f255316fc0d45272a38e3fea206105f67dc45/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8794a78a887a920276c7124f1c46d69592c6c4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8794a78a887a920276c7124f1c46d69592c6c4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8794a78a887a920276c7124f1c46d69592c6c4e"
      },
      {
        "sha": "1951ea4342db4122032660139248b79a02c574f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1951ea4342db4122032660139248b79a02c574f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1951ea4342db4122032660139248b79a02c574f3"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 163,
      "deletions": 16
    },
    "files": [
      {
        "sha": "8a76021a5bff3356fc3d26c2e5cf0fc8bbd65246",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -8,6 +8,10 @@\n \n class CWallet;\n \n+namespace interfaces {\n+class Chain;\n+}\n+\n class DummyWalletInit : public WalletInitInterface {\n public:\n \n@@ -43,6 +47,11 @@ std::vector<std::shared_ptr<CWallet>> GetWallets()\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n namespace interfaces {\n \n class Wallet;"
      },
      {
        "sha": "96bde7e9f2596da498ed455aedfbd8ee53b449d6",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -42,6 +42,7 @@ class CWallet;\n fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning);\n \n namespace interfaces {\n \n@@ -252,6 +253,10 @@ class NodeImpl : public Node\n         }\n         return wallets;\n     }\n+    std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) override\n+    {\n+        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warning));\n+    }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n         return MakeHandler(::uiInterface.InitMessage_connect(fn));"
      },
      {
        "sha": "76b93af234b8ce5d98eb6f5dd5e54b1ecd9afa4d",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -192,6 +192,11 @@ class Node\n     //! Return interfaces for accessing wallets (if any).\n     virtual std::vector<std::unique_ptr<Wallet>> getWallets() = 0;\n \n+    //! Attempts to load a wallet from file or directory.\n+    //! The loaded wallet is also notified to handlers previously registered\n+    //! with handleLoadWallet.\n+    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) = 0;\n+\n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;\n     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;"
      },
      {
        "sha": "206227b101ba2e42a2b16e0bd29d01a8f7cd393b",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -525,7 +525,7 @@ class WalletClientImpl : public ChainClient\n \n } // namespace\n \n-std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return MakeUnique<WalletImpl>(wallet); }\n+std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return wallet ? MakeUnique<WalletImpl>(wallet) : nullptr; }\n \n std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, std::vector<std::string> wallet_filenames)\n {"
      },
      {
        "sha": "d6c6fd6e98ab13e36de1d979058154723c3ef972",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -456,7 +456,7 @@ int GuiMain(int argc, char* argv[])\n     //   IMPORTANT if it is no longer a typedef use the normal variant above\n     qRegisterMetaType< CAmount >(\"CAmount\");\n     qRegisterMetaType< std::function<void()> >(\"std::function<void()>\");\n-\n+    qRegisterMetaType<QMessageBox::Icon>(\"QMessageBox::Icon\");\n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n     node->setupServerArgs();"
      },
      {
        "sha": "f7a4bad916c060cd10f29a87dbfc6e4f41ec45c4",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -334,6 +334,10 @@ void BitcoinGUI::createActions()\n     openAction = new QAction(platformStyle->TextColorIcon(\":/icons/open\"), tr(\"Open &URI...\"), this);\n     openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n \n+    m_open_wallet_action = new QAction(tr(\"Open Wallet\"), this);\n+    m_open_wallet_action->setMenu(new QMenu(this));\n+    m_open_wallet_action->setStatusTip(tr(\"Open a wallet\"));\n+\n     showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(tr(PACKAGE_NAME)));\n@@ -361,6 +365,37 @@ void BitcoinGUI::createActions()\n         connect(usedSendingAddressesAction, &QAction::triggered, walletFrame, &WalletFrame::usedSendingAddresses);\n         connect(usedReceivingAddressesAction, &QAction::triggered, walletFrame, &WalletFrame::usedReceivingAddresses);\n         connect(openAction, &QAction::triggered, this, &BitcoinGUI::openClicked);\n+        connect(m_open_wallet_action->menu(), &QMenu::aboutToShow, [this] {\n+            m_open_wallet_action->menu()->clear();\n+            for (std::string path : m_wallet_controller->getWalletsAvailableToOpen()) {\n+                QString name = path.empty() ? QString(\"[\"+tr(\"default wallet\")+\"]\") : QString::fromStdString(path);\n+                QAction* action = m_open_wallet_action->menu()->addAction(name);\n+                connect(action, &QAction::triggered, [this, name, path] {\n+                    OpenWalletActivity* activity = m_wallet_controller->openWallet(path);\n+\n+                    QProgressDialog* dialog = new QProgressDialog(this);\n+                    dialog->setLabelText(tr(\"Opening Wallet <b>%1</b>...\").arg(name.toHtmlEscaped()));\n+                    dialog->setRange(0, 0);\n+                    dialog->setCancelButton(nullptr);\n+                    dialog->setWindowModality(Qt::ApplicationModal);\n+                    dialog->show();\n+\n+                    connect(activity, &OpenWalletActivity::message, this, [this] (QMessageBox::Icon icon, QString text) {\n+                        QMessageBox box;\n+                        box.setIcon(icon);\n+                        box.setText(tr(\"Open Wallet Failed\"));\n+                        box.setInformativeText(text);\n+                        box.setStandardButtons(QMessageBox::Ok);\n+                        box.setDefaultButton(QMessageBox::Ok);\n+                        connect(this, &QObject::destroyed, &box, &QDialog::accept);\n+                        box.exec();\n+                    });\n+                    connect(activity, &OpenWalletActivity::opened, this, &BitcoinGUI::setCurrentWallet);\n+                    connect(activity, &OpenWalletActivity::finished, activity, &QObject::deleteLater);\n+                    connect(activity, &OpenWalletActivity::finished, dialog, &QObject::deleteLater);\n+                });\n+            }\n+        });\n     }\n #endif // ENABLE_WALLET\n \n@@ -382,6 +417,8 @@ void BitcoinGUI::createMenuBar()\n     QMenu *file = appMenuBar->addMenu(tr(\"&File\"));\n     if(walletFrame)\n     {\n+        file->addAction(m_open_wallet_action);\n+        file->addSeparator();\n         file->addAction(openAction);\n         file->addAction(backupWalletAction);\n         file->addAction(signMessageAction);"
      },
      {
        "sha": "c226494020a62f8940a5fc939bfc6b66e5d9dd02",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -147,6 +147,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* openRPCConsoleAction = nullptr;\n     QAction* openAction = nullptr;\n     QAction* showHelpMessageAction = nullptr;\n+    QAction* m_open_wallet_action{nullptr};\n     QAction* m_wallet_selector_label_action = nullptr;\n     QAction* m_wallet_selector_action = nullptr;\n "
      },
      {
        "sha": "3483c75970c0e7a90c15bed0372b025268f993bb",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 1,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <algorithm>\n \n+#include <QMessageBox>\n #include <QMutexLocker>\n #include <QThread>\n \n@@ -25,18 +26,43 @@ WalletController::WalletController(interfaces::Node& node, const PlatformStyle*\n     for (std::unique_ptr<interfaces::Wallet>& wallet : m_node.getWallets()) {\n         getOrCreateWallet(std::move(wallet));\n     }\n+\n+    m_activity_thread.start();\n }\n \n // Not using the default destructor because not all member types definitions are\n // available in the header, just forward declared.\n-WalletController::~WalletController() {}\n+WalletController::~WalletController()\n+{\n+    m_activity_thread.quit();\n+    m_activity_thread.wait();\n+}\n \n std::vector<WalletModel*> WalletController::getWallets() const\n {\n     QMutexLocker locker(&m_mutex);\n     return m_wallets;\n }\n \n+std::vector<std::string> WalletController::getWalletsAvailableToOpen() const\n+{\n+    QMutexLocker locker(&m_mutex);\n+    std::vector<std::string> wallets = m_node.listWalletDir();\n+    for (WalletModel* wallet_model : m_wallets) {\n+        auto it = std::remove(wallets.begin(), wallets.end(), wallet_model->wallet().getWalletName());\n+        if (it != wallets.end()) wallets.erase(it);\n+    }\n+    return wallets;\n+}\n+\n+OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidget* parent)\n+{\n+    OpenWalletActivity* activity = new OpenWalletActivity(this, name);\n+    activity->moveToThread(&m_activity_thread);\n+    QMetaObject::invokeMethod(activity, \"open\", Qt::QueuedConnection);\n+    return activity;\n+}\n+\n WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet)\n {\n     QMutexLocker locker(&m_mutex);\n@@ -93,3 +119,24 @@ void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)\n     // CWallet shared pointer.\n     delete wallet_model;\n }\n+\n+\n+OpenWalletActivity::OpenWalletActivity(WalletController* wallet_controller, const std::string& name)\n+    : m_wallet_controller(wallet_controller)\n+    , m_name(name)\n+{}\n+\n+void OpenWalletActivity::open()\n+{\n+    std::string error, warning;\n+    std::unique_ptr<interfaces::Wallet> wallet = m_wallet_controller->m_node.loadWallet(m_name, error, warning);\n+    if (!warning.empty()) {\n+        Q_EMIT message(QMessageBox::Warning, QString::fromStdString(warning));\n+    }\n+    if (wallet) {\n+        Q_EMIT opened(m_wallet_controller->getOrCreateWallet(std::move(wallet)));\n+    } else {\n+        Q_EMIT message(QMessageBox::Critical, QString::fromStdString(error));\n+    }\n+    Q_EMIT finished();\n+}"
      },
      {
        "sha": "f19c0e1f3d7b66277f35785ece08dce397708a00",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -12,7 +12,9 @@\n #include <memory>\n #include <vector>\n \n+#include <QMessageBox>\n #include <QMutex>\n+#include <QThread>\n \n class OptionsModel;\n class PlatformStyle;\n@@ -22,6 +24,8 @@ class Handler;\n class Node;\n } // namespace interfaces\n \n+class OpenWalletActivity;\n+\n /**\n  * Controller between interfaces::Node, WalletModel instances and the GUI.\n  */\n@@ -37,6 +41,9 @@ class WalletController : public QObject\n     ~WalletController();\n \n     std::vector<WalletModel*> getWallets() const;\n+    std::vector<std::string> getWalletsAvailableToOpen() const;\n+\n+    OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n \n private Q_SLOTS:\n     void addWallet(WalletModel* wallet_model);\n@@ -48,12 +55,35 @@ private Q_SLOTS:\n     void coinsSent(WalletModel* wallet_model, SendCoinsRecipient recipient, QByteArray transaction);\n \n private:\n+    QThread m_activity_thread;\n     interfaces::Node& m_node;\n     const PlatformStyle* const m_platform_style;\n     OptionsModel* const m_options_model;\n     mutable QMutex m_mutex;\n     std::vector<WalletModel*> m_wallets;\n     std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n+\n+    friend class OpenWalletActivity;\n+};\n+\n+class OpenWalletActivity : public QObject\n+{\n+    Q_OBJECT\n+\n+public:\n+    OpenWalletActivity(WalletController* wallet_controller, const std::string& name);\n+\n+public Q_SLOTS:\n+    void open();\n+\n+Q_SIGNALS:\n+    void message(QMessageBox::Icon icon, const QString text);\n+    void finished();\n+    void opened(WalletModel* wallet_model);\n+\n+private:\n+    WalletController* const m_wallet_controller;\n+    std::string const m_name;\n };\n \n #endif // BITCOIN_QT_WALLETCONTROLLER_H"
      },
      {
        "sha": "a9fbed542379dc2cfb1950866670f4c08f5074e6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -2555,7 +2555,6 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n             }.ToString());\n \n     WalletLocation location(request.params[0].get_str());\n-    std::string error;\n \n     if (!location.Exists()) {\n         throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + location.GetName() + \" not found.\");\n@@ -2567,18 +2566,9 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n         }\n     }\n \n-    std::string warning;\n-    if (!CWallet::Verify(*g_rpc_interfaces->chain, location, false, error, warning)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n-    }\n-\n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location);\n-    if (!wallet) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet loading failed.\");\n-    }\n-    AddWallet(wallet);\n-\n-    wallet->postInitProcess();\n+    std::string error, warning;\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_interfaces->chain, location, error, warning);\n+    if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());"
      },
      {
        "sha": "063015d1d8db14d3c338d773d9186fc5ec83b1d3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -130,6 +130,28 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n     }\n }\n \n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning)\n+{\n+    if (!CWallet::Verify(chain, location, false, error, warning)) {\n+        error = \"Wallet file verification failed: \" + error;\n+        return nullptr;\n+    }\n+\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location);\n+    if (!wallet) {\n+        error = \"Wallet loading failed.\";\n+        return nullptr;\n+    }\n+    AddWallet(wallet);\n+    wallet->postInitProcess();\n+    return wallet;\n+}\n+\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning)\n+{\n+    return LoadWallet(chain, WalletLocation(name), error, warning);\n+}\n+\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));"
      },
      {
        "sha": "5846ac0f3e74e8a3ae06a694fcd3e391a59e9247",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d3f255316fc0d45272a38e3fea206105f67dc45/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d3f255316fc0d45272a38e3fea206105f67dc45/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7d3f255316fc0d45272a38e3fea206105f67dc45",
        "patch": "@@ -66,6 +66,7 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning);\n \n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;"
      }
    ]
  },
  {
    "sha": "318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMThiMWY3YWYxMTNmZTE2YjY3Y2YzZWQ0ZDliYmFiM2RkNGM1ZTRl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-02-12T17:54:38Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-02-12T18:27:18Z"
      },
      "message": "[wallet] Close bdb when flushing wallet.\n\nbdb would not be closed when closing the wallet in wallet-tool. Fix this\nby calling wallet->flush with true.",
      "tree": {
        "sha": "0df44d96665551a06aa7ad25bac2b15ff62135bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0df44d96665551a06aa7ad25bac2b15ff62135bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65435701efdafc6b91db542327c57c69386f02eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65435701efdafc6b91db542327c57c69386f02eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65435701efdafc6b91db542327c57c69386f02eb"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "797f051189be786837c59d5d01dcec4816c4cc25",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e",
        "patch": "@@ -17,7 +17,7 @@ namespace WalletTool {\n static void WalletToolReleaseWallet(CWallet* wallet)\n {\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n-    wallet->Flush();\n+    wallet->Flush(true);\n     delete wallet;\n }\n \n@@ -112,7 +112,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         std::shared_ptr<CWallet> wallet_instance = CreateWallet(name, path);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Flush();\n+            wallet_instance->Flush(true);\n         }\n     } else if (command == \"info\") {\n         if (!fs::exists(path)) {\n@@ -127,7 +127,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n         if (!wallet_instance) return false;\n         WalletShowInfo(wallet_instance.get());\n-        wallet_instance->Flush();\n+        wallet_instance->Flush(true);\n     } else {\n         fprintf(stderr, \"Invalid command: %s\\n\", command.c_str());\n         return false;"
      }
    ]
  },
  {
    "sha": "ea022d9fd0479c671fb44a40cb3ca3813c5952d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTAyMmQ5ZmQwNDc5YzY3MWZiNDRhNDBjYjNjYTM4MTNjNTk1MmQx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T20:27:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T20:27:15Z"
      },
      "message": "Merge #15378: tests: Added missing tests for RPC wallet errors\n\ndc3b2ccb5f tests: Added missing tests for RPC wallet errors (Ben Carman)\n\nPull request description:\n\nTree-SHA512: b18dcd4f7547c974c93ae67dcd92a168bdb55951b164cf174cb1e59e0daa463187068aec43108309a75d65721a5c0bcdf10a16a9869620f160121e2287559926",
      "tree": {
        "sha": "0df3eeba59b40ce54aca0e97d541ab50d345da66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0df3eeba59b40ce54aca0e97d541ab50d345da66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea022d9fd0479c671fb44a40cb3ca3813c5952d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcYywjAAoJENLqSFDnUoslTxoP+gJHHANr/tr9aMZo5tRuA2nx\nyiV6okxL7Vt+7p5UJeqZDoLv9C/LLB1a7uWSHSKQKf4Z0SN+nnNGE98p0um5TG84\nw6gJTJYtf8CYE5FADky4Itw8V8+QubwGPL54gteSsbN18TVyaoNxKvnCjMLprC6Q\nSobEN0WJXlH/hjNwzG42fISlLwYYZXq5ddgHCV/bLSN9a4BphZw76dyxTE1iOe+e\nGMwYLl2TDIc83CXpr6ch2ieGI86C2CDiCduQgwLdvxVKTyHUsZ6AtaYgz8AT8OBq\nP59Mq77QtAyFMe5Uc8ah7awh3zHo2Pb0HOlVXf+8VK2yacT8a61JYehfchxHaWUZ\ns+R77Z7FIYmrYDaa4AeilLe6BkdZinAGBr8bBz/jyWZIcEsmLoFDGk67IDVxsjdt\ngxG3fYaZp8Y/Q/4tHqFwcxnwy+wNhyU6SDRqXjKNUjDADOOOEsKW8bCqzpX9WhSp\nndQ6sxViC5spH36H6Dbidhl+GUKbFf3EBbwi8hDP5vcAWqO3KiDxn2mwlTJB4DTk\nsBzFM+9+9XRkDBdTlgSCnMdH3uRy6VUZb3LNo9Iofvpdj0Npe/R1omlhPwS2Qnb5\nVZc8Cs4poC9YHfUEAkQOtJbPP3Lelm3ASRgb3Or1vFDy1+IejySMozkvBIthslh9\ngRB3BUHIn32Cwdg3pyZe\n=m5ZM\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILr+WCnBbCd9jtcPCzihGyIQortLlMkKo0RZVB6O3XbBCP/wEB/wHgxbebYz\nHW7VQwbgcXEI8BD3E8ov2QQfsngk2Cergt7PCPEEXGMsJvAIQS1US6J8dlQAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BBQ8o968QyXYYcArUHuIpqKCPEEXGMsJfAIDY/HtiJ0QkYAg9/jDS75DI4sK2h0\ndHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmf/8BB2py8L\nvVWRJ0WIUrCujVP4CPEEXGMsJfAIZ24KMqbKtvcAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ30rjdnbHkYMW\nrgyq6MO66wjxBFxjLCXwCLE+oivpw27eAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0df3eeba59b40ce54aca0e97d541ab50d345da66\nparent 7d3f255316fc0d45272a38e3fea206105f67dc45\nparent dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55\nauthor MarcoFalke <falke.marco@gmail.com> 1550003233 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550003235 -0500\n\nMerge #15378: tests: Added missing tests for RPC wallet errors\n\ndc3b2ccb5f tests: Added missing tests for RPC wallet errors (Ben Carman)\n\nPull request description:\n\nTree-SHA512: b18dcd4f7547c974c93ae67dcd92a168bdb55951b164cf174cb1e59e0daa463187068aec43108309a75d65721a5c0bcdf10a16a9869620f160121e2287559926\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea022d9fd0479c671fb44a40cb3ca3813c5952d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea022d9fd0479c671fb44a40cb3ca3813c5952d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea022d9fd0479c671fb44a40cb3ca3813c5952d1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d3f255316fc0d45272a38e3fea206105f67dc45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d3f255316fc0d45272a38e3fea206105f67dc45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d3f255316fc0d45272a38e3fea206105f67dc45"
      },
      {
        "sha": "dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc3b2ccb5f5dd4331e4f985f2d9ef65f2a8b4c55"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe1a614700099e6388b26cedc50e2bb55b7c4e11",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea022d9fd0479c671fb44a40cb3ca3813c5952d1/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea022d9fd0479c671fb44a40cb3ca3813c5952d1/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=ea022d9fd0479c671fb44a40cb3ca3813c5952d1",
        "patch": "@@ -327,12 +327,38 @@ def run_test(self):\n         tx_obj = self.nodes[0].gettransaction(txid)\n         assert_equal(tx_obj['amount'], Decimal('-0.0001'))\n \n+        # General checks for errors from incorrect inputs\n         # This will raise an exception because the amount type is wrong\n         assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n \n         # This will raise an exception since generate does not accept a string\n         assert_raises_rpc_error(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n \n+        # This will raise an exception for the invalid private key format\n+        assert_raises_rpc_error(-5, \"Invalid private key encoding\", self.nodes[0].importprivkey, \"invalid\")\n+\n+        # This will raise an exception for importing an address with the PS2H flag\n+        temp_address = self.nodes[1].getnewaddress()\n+        assert_raises_rpc_error(-5, \"Cannot use the p2sh flag with an address - use a script instead\", self.nodes[0].importaddress, temp_address, \"label\", False, True)\n+\n+        # This will raise an exception for attempting to dump the private key of an address you do not own\n+        assert_raises_rpc_error(-3, \"Address does not refer to a key\", self.nodes[0].dumpprivkey, temp_address)\n+\n+        # This will raise an exception for attempting to get the private key of an invalid Bitcoin address\n+        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].dumpprivkey, \"invalid\")\n+\n+        # This will raise an exception for attempting to set a label for an invalid Bitcoin address\n+        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].setlabel, \"invalid address\", \"label\")\n+\n+        # This will raise an exception for importing an invalid address\n+        assert_raises_rpc_error(-5, \"Invalid Bitcoin address or script\", self.nodes[0].importaddress, \"invalid\")\n+\n+        # This will raise an exception for attempting to import a pubkey that isn't in hex\n+        assert_raises_rpc_error(-5, \"Pubkey must be a hex string\", self.nodes[0].importpubkey, \"not hex\")\n+\n+        # This will raise an exception for importing an invalid pubkey\n+        assert_raises_rpc_error(-5, \"Pubkey is not a valid public key\", self.nodes[0].importpubkey, \"5361746f736869204e616b616d6f746f\")\n+\n         # Import address and private key to check correct behavior of spendable unspents\n         # 1. Send some coins to generate new UTXO\n         address_to_import = self.nodes[2].getnewaddress()"
      }
    ]
  },
  {
    "sha": "5039e4b61beb937bad33ac4300cc784642782589",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDM5ZTRiNjFiZWI5MzdiYWQzM2FjNDMwMGNjNzg0NjQyNzgyNTg5",
    "commit": {
      "author": {
        "name": "Julian Fleischer",
        "email": "scravy@users.noreply.github.com",
        "date": "2019-02-12T17:13:29Z"
      },
      "committer": {
        "name": "Julian Fleischer",
        "email": "julian@thirdhash.com",
        "date": "2019-02-12T21:25:47Z"
      },
      "message": "Remove unnecessary const_cast\n\nSigned-off-by: Julian Fleischer <julian@thirdhash.com>",
      "tree": {
        "sha": "f7595571a62a31ed0dbe60cb8868b15329feb967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7595571a62a31ed0dbe60cb8868b15329feb967"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5039e4b61beb937bad33ac4300cc784642782589",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5039e4b61beb937bad33ac4300cc784642782589",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5039e4b61beb937bad33ac4300cc784642782589",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5039e4b61beb937bad33ac4300cc784642782589/comments",
    "author": {
      "login": "scravy",
      "id": 295504,
      "node_id": "MDQ6VXNlcjI5NTUwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/295504?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scravy",
      "html_url": "https://github.com/scravy",
      "followers_url": "https://api.github.com/users/scravy/followers",
      "following_url": "https://api.github.com/users/scravy/following{/other_user}",
      "gists_url": "https://api.github.com/users/scravy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scravy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scravy/subscriptions",
      "organizations_url": "https://api.github.com/users/scravy/orgs",
      "repos_url": "https://api.github.com/users/scravy/repos",
      "events_url": "https://api.github.com/users/scravy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scravy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "scravy",
      "id": 295504,
      "node_id": "MDQ6VXNlcjI5NTUwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/295504?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scravy",
      "html_url": "https://github.com/scravy",
      "followers_url": "https://api.github.com/users/scravy/followers",
      "following_url": "https://api.github.com/users/scravy/following{/other_user}",
      "gists_url": "https://api.github.com/users/scravy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scravy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scravy/subscriptions",
      "organizations_url": "https://api.github.com/users/scravy/orgs",
      "repos_url": "https://api.github.com/users/scravy/repos",
      "events_url": "https://api.github.com/users/scravy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scravy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea022d9fd0479c671fb44a40cb3ca3813c5952d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea022d9fd0479c671fb44a40cb3ca3813c5952d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea022d9fd0479c671fb44a40cb3ca3813c5952d1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1806bc12683b8b537b45b4ef623a869dbe9437b4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5039e4b61beb937bad33ac4300cc784642782589/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5039e4b61beb937bad33ac4300cc784642782589/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5039e4b61beb937bad33ac4300cc784642782589",
        "patch": "@@ -4347,7 +4347,7 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n         return true;\n \n     try {\n-        CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n+        const CBlock& block = chainparams.GenesisBlock();\n         CDiskBlockPos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n         if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);"
      }
    ]
  },
  {
    "sha": "8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzliOGEzNjY4ZjNlY2RkMGZkZWQwMWMyNDY5ZDZjN2Q2MTY4YzM5",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-01-20T16:32:47Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-02-12T21:25:54Z"
      },
      "message": "Replace script name with special parameter",
      "tree": {
        "sha": "1e9f175e74936e21565d7a218ab18b110c251e2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e9f175e74936e21565d7a218ab18b110c251e2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAlxjOe4ACgkQQQEIES5+\nqB9nWA/+JvcwDVUtfBSFCEVdz5s4NqwzHAWNyybnLfgRsNcJDqtTgTpC612Ow1Av\n4EUdlAV/C6tW86dHsy8wOWVN8qkHEihdXE9ygJn4PtoGsh55foN5+GWASG/vkn1i\nV6r/RD5k6UJppRMt+u0X+NZdLnXJPd006mQGw+cFfUvBtdWutx4/HaX/fGEsCfCk\nGGSoFwzOWNuBVT4h9R1V3CXK5HGN9DAZVET6L+k/85QYF96iHUZAfGkEl5iGNUsK\nSH4iLnR7/4IXfXtwZud7nb8tI7kqMTh+z05yGnfim4vhbRMBth4/r3PQrZ97tarm\nDvPnK04NOA/cLuCCRD636rSsd1gD7zpw2ZuCxhLENSP41Dq34n9yM2EItYm8Q8F3\nYjylO+QmHql8hd8xYeDZ6LESNa8A1SKJs2Mj9J7yd7UkLntZVTLHQYr7XNqQUWwG\n7pcmCLB7aiSv15SYkripkzU2EZOpBtGNsMT2MtAidpDS6mKKLL/gVH9lWrO4fpGD\n2byWXE58qY+KxCUHBlL6DoNSZFP7f//Dm2824t8VZPtEx1khFXdA1l8n3OtOfk1p\n/xtpxh1O5icTDgdPm6SVxPlN8iQZVTipvyOCly16HgNYkUBXbTKar2tc3/wtJJSq\npY1WZgsD/Ass5ArohOixuAJ3k0aBYAFNmAu5R1wYR4b04q+od00=\n=YJ45\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e9f175e74936e21565d7a218ab18b110c251e2e\nparent 978682b9dccfb48425c0129431bb108e78e33e4e\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1548001967 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1550006754 +0200\n\nReplace script name with special parameter\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "978682b9dccfb48425c0129431bb108e78e33e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978682b9dccfb48425c0129431bb108e78e33e4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/978682b9dccfb48425c0129431bb108e78e33e4e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "088d1c9dce9dc9cc54ea397b1fdf738535e7b2ff",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39",
        "patch": "@@ -6,7 +6,7 @@ export LC_ALL=C\n set -e\n \n if [ -z \"${1}\" ]; then\n-  echo \"Usage: ./install_db4.sh <base-dir> [<extra-bdb-configure-flag> ...]\"\n+  echo \"Usage: $0 <base-dir> [<extra-bdb-configure-flag> ...]\"\n   echo\n   echo \"Must specify a single argument: the directory in which db4 will be built.\"\n   echo \"This is probably \\`pwd\\` if you're at the root of the bitcoin repository.\""
      },
      {
        "sha": "d5c1dee42d1574446df7a1fcb69fcd7132fc9e0b",
        "filename": "test/lint/lint-whitespace.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39/test/lint/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39/test/lint/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-whitespace.sh?ref=8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2017 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -12,11 +12,11 @@ export LC_ALL=C\n while getopts \"?\" opt; do\n   case $opt in\n     ?)\n-      echo \"Usage: .lint-whitespace.sh [N]\"\n-      echo \"       TRAVIS_COMMIT_RANGE='<commit range>' .lint-whitespace.sh\"\n-      echo \"       .lint-whitespace.sh -?\"\n+      echo \"Usage: $0 [N]\"\n+      echo \"       TRAVIS_COMMIT_RANGE='<commit range>' $0\"\n+      echo \"       $0 -?\"\n       echo \"Checks unstaged changes, the previous N commits, or a commit range.\"\n-      echo \"TRAVIS_COMMIT_RANGE='47ba2c3...ee50c9e' .lint-whitespace.sh\"\n+      echo \"TRAVIS_COMMIT_RANGE='47ba2c3...ee50c9e' $0\"\n       exit 0\n     ;;\n   esac"
      }
    ]
  },
  {
    "sha": "d73918447faf168670b5dfdd55f6c19ed6dd8632",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzM5MTg0NDdmYWYxNjg2NzBiNWRmZGQ1NWY2YzE5ZWQ2ZGQ4NjMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T21:39:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T21:39:39Z"
      },
      "message": "Merge #15216: Scripts and tools: Replace script name with a special parameter\n\n8c9b8a3668 Replace script name with special parameter (Hennadii Stepanov)\n\nPull request description:\n\n  This PR improves UX; all others shell scripts ~(excluding travis linters)~ in the bitcoin repo have this feature.\n\n  Before:\n  ![screenshot from 2019-01-20 17-45-42](https://user-images.githubusercontent.com/32963518/51442159-b5cfec80-1ce2-11e9-8017-3b0b464ccaf8.png)\n\n  After:\n  ![screenshot from 2019-01-20 18-30-27](https://user-images.githubusercontent.com/32963518/51442166-bf595480-1ce2-11e9-9520-481518c3b288.png)\n\n  cc: @jamesob @laanwj\n\nTree-SHA512: 7924e5658a2efe81fd5591390ca5af1ff0558bd9d5693363b9f8addedb1d6b90aa16f11c9b361c6fdfbd931a959255817473a240c175dee95aefc7d2d4a10a36",
      "tree": {
        "sha": "0002344cd24df3200bde079e77c6cad40f7cdd95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0002344cd24df3200bde079e77c6cad40f7cdd95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d73918447faf168670b5dfdd55f6c19ed6dd8632",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcYz0bAAoJENLqSFDnUoslfkAP/0j9suqmtCXGLQ6vdXbfw+gh\nEzhc0fohARjjEw+hoADjmUELfdCG6zEhe9SUALJbflREv9F3B7/SDHGqdu3O5RuC\nZqseqe9G5mPm7dsP4njn8hZPY70Hgw7H2eq8tSklR93lsUr+lMZwjfRgAA0Z5Nq1\nOuObUAyh6ONQYDvkN2udlvrSvLPa6HmXv3bspMDjFeFdUT9umcEE9cAbXTzm//a1\npDwMA7Rm+sQ6OqxkRLhNW6zhiwR3Eeq5pYajFtLwlhWRtigvnVrV9otpvk0EcMUO\nQM2LPN2H6E3NodyENwK7O+KpeD94S7WJmYgEpYB955trIRs6FBnUb3JGiyx+CfYK\nU6rJN/+piV8s/ePaoQ2Tn42Zf/dveN57e9n2t0ZaIHzvXWz3ww4q0Y7GA12mBYSk\nNwx5wE3+zk5A8dS0rzigbM6UfqD/WI2b4x7mxw01Qjm29y5hmCASr5PuK3y403Tc\nRZBX8Mep35Q4Jr15rFN22sZNtHOUU7m/veZV54fSUvc6uHHxicN3ZvRAwJF8rM/X\nampmYp8eSFDwK5pm4e2Ora+xBbn9ptk7mZ821vPcujoMR1+l/551lrO+RNZDd/oX\nZnpNzE2x6evnkmwhX+TePNjLGLY0fc58CsNYC1+IZ4N+CdhsjCIOGD4+5CKN6OlQ\nebFVgG8wGLKAbHKc/AOj\n=uOoB\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFPaiDGm7HjRgkRJRQgerDEEixi9mH4ojcLsX7ucvlR/CP/wEAur2dja3KZa\n6hl/ACKi//MI8BDSCvZU6C+kBD63VcHzYnVgCPEEXGM9HfAIZqRqjq6Gcs4Ag9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BA9Vp63v37xMUBSDdqbMSGpCPEgnEtv/MI12gInLfZ1FDYpqxDGu0qsj1/Addpp\nJRUx8RoI8QRcYz0d8AjJ0yBFLJghFwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5i\ndGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQjpIc+hxdi8g11SpnAcVu\nAwjxBFxjPR3wCHuT311z/aruAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BD0Dgbt1Y1rKHXlLw++pUnhCPEEXGM9\nHfAI4fgmokOIlYsAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFs\nbGF4eS5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0002344cd24df3200bde079e77c6cad40f7cdd95\nparent ea022d9fd0479c671fb44a40cb3ca3813c5952d1\nparent 8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39\nauthor MarcoFalke <falke.marco@gmail.com> 1550007567 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550007579 -0500\n\nMerge #15216: Scripts and tools: Replace script name with a special parameter\n\n8c9b8a3668 Replace script name with special parameter (Hennadii Stepanov)\n\nPull request description:\n\n  This PR improves UX; all others shell scripts ~(excluding travis linters)~ in the bitcoin repo have this feature.\n\n  Before:\n  ![screenshot from 2019-01-20 17-45-42](https://user-images.githubusercontent.com/32963518/51442159-b5cfec80-1ce2-11e9-8017-3b0b464ccaf8.png)\n\n  After:\n  ![screenshot from 2019-01-20 18-30-27](https://user-images.githubusercontent.com/32963518/51442166-bf595480-1ce2-11e9-9520-481518c3b288.png)\n\n  cc: @jamesob @laanwj\n\nTree-SHA512: 7924e5658a2efe81fd5591390ca5af1ff0558bd9d5693363b9f8addedb1d6b90aa16f11c9b361c6fdfbd931a959255817473a240c175dee95aefc7d2d4a10a36\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73918447faf168670b5dfdd55f6c19ed6dd8632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d73918447faf168670b5dfdd55f6c19ed6dd8632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73918447faf168670b5dfdd55f6c19ed6dd8632/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea022d9fd0479c671fb44a40cb3ca3813c5952d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea022d9fd0479c671fb44a40cb3ca3813c5952d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea022d9fd0479c671fb44a40cb3ca3813c5952d1"
      },
      {
        "sha": "8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c9b8a3668f3ecdd0fded01c2469d6c7d6168c39"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "088d1c9dce9dc9cc54ea397b1fdf738535e7b2ff",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d73918447faf168670b5dfdd55f6c19ed6dd8632/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d73918447faf168670b5dfdd55f6c19ed6dd8632/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=d73918447faf168670b5dfdd55f6c19ed6dd8632",
        "patch": "@@ -6,7 +6,7 @@ export LC_ALL=C\n set -e\n \n if [ -z \"${1}\" ]; then\n-  echo \"Usage: ./install_db4.sh <base-dir> [<extra-bdb-configure-flag> ...]\"\n+  echo \"Usage: $0 <base-dir> [<extra-bdb-configure-flag> ...]\"\n   echo\n   echo \"Must specify a single argument: the directory in which db4 will be built.\"\n   echo \"This is probably \\`pwd\\` if you're at the root of the bitcoin repository.\""
      },
      {
        "sha": "d5c1dee42d1574446df7a1fcb69fcd7132fc9e0b",
        "filename": "test/lint/lint-whitespace.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d73918447faf168670b5dfdd55f6c19ed6dd8632/test/lint/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d73918447faf168670b5dfdd55f6c19ed6dd8632/test/lint/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-whitespace.sh?ref=d73918447faf168670b5dfdd55f6c19ed6dd8632",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2017 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -12,11 +12,11 @@ export LC_ALL=C\n while getopts \"?\" opt; do\n   case $opt in\n     ?)\n-      echo \"Usage: .lint-whitespace.sh [N]\"\n-      echo \"       TRAVIS_COMMIT_RANGE='<commit range>' .lint-whitespace.sh\"\n-      echo \"       .lint-whitespace.sh -?\"\n+      echo \"Usage: $0 [N]\"\n+      echo \"       TRAVIS_COMMIT_RANGE='<commit range>' $0\"\n+      echo \"       $0 -?\"\n       echo \"Checks unstaged changes, the previous N commits, or a commit range.\"\n-      echo \"TRAVIS_COMMIT_RANGE='47ba2c3...ee50c9e' .lint-whitespace.sh\"\n+      echo \"TRAVIS_COMMIT_RANGE='47ba2c3...ee50c9e' $0\"\n       exit 0\n     ;;\n   esac"
      }
    ]
  },
  {
    "sha": "029d28a7aa5619973eb59fe445b9a4186c0c2a58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjlkMjhhN2FhNTYxOTk3M2ViNTlmZTQ0NWI5YTQxODZjMGMyYTU4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T21:51:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T21:52:06Z"
      },
      "message": "Merge #15238: [QA] remove some magic mining constants in functional tests\n\nb651ef7e1c submitheader: more directly test missing prev block header (Gregory Sanders)\n1e7f741745 remove some magic mining constants in functional tests (Gregory Sanders)\n\nPull request description:\n\n  The fewer magic numbers the better.\n\n  Also more directly tested a `submitheader` case of bad previous blockhash.\n\nTree-SHA512: 52b01a6aa199fa909eea4e9e84409a901933e545724e33149cc4132c82168199fd678809b6d94d95c9ff6ad02238a9552363620d13b8beaa5d4b67ade9ef425c",
      "tree": {
        "sha": "feb47331a944d2a5b2892273626600a1b970f1a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/feb47331a944d2a5b2892273626600a1b970f1a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/029d28a7aa5619973eb59fe445b9a4186c0c2a58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcY0AGAAoJENLqSFDnUoslbucP/1bqPvnUPiZmW4bw6+kuzKcZ\nnGYRvEAe7EjJsWgnsTjD9P3kHdRvHEmHPUhMgL+jTmDdvlWwh2BeF6JjZ/KmnCIS\nESNXr9VjjGcHxpnUknPXy8i8BQ6V8Fcg2L5E6PeIM229jxz7doOajYcHa9T6QBYh\n7GhR+6gCacP38KUnfjxS4OnyGNd7pLs/NFzSAHRDLno7acn+dA7ZcWfxavc0XgHT\n3dbzvv3G2ivO2GYDfacR6B1wbotrZfEleLGxlNJ1wREv+eSV5u1/0LgKffG5M1Cn\nuPptKNLKaFQH+4ekB96QiAzvRm8CpaR/UJebYo2grRTsdB1dH+BDfrPRI8VdbZbg\nG7dzdm3oQWo4AQ3WrcmGPl61PVp7FpRZVMC5C05WyT79Z8QnkVaR0wc8uI4m374Q\nD+EjrEK31lNUmqEzkzWT8hu+YMVZan1NHtoVlkiZcqOCRUshKMfUOpRQSfg9+AaU\nQY9vzehCslSG8jgnQbmv2rxqGD3qDieaK2ZnVOlD329WgwmX99DdugCX1IpsmNrP\nzNynh1ez0cVyCgiSQJOVif3ED+Jxz8Zg7adGXdoWGIDuTxbml9gSAgaBh+xs+ngi\nKwQicPDmv8dV+k9ubB7JXzQF5i7fbtIqGSHMhjTugND+gIaLJgUFY7HxuxTF00lr\n+VA6EyABUubXneEIkdgF\n=zOfq\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIA1D3PuhzkiXOWOC+/zLZ3rko6lRfq+pELanlAViLwD+CP/wEC+tKT89Oh+S\nN5LN5/UbTj0I8QRcY0AI8AixLxzTk/K3PACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEFePaPnyXuUXJORc6kCpRbMI8QRcY0AI\n8Agk8AWc+9XytwCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEKUxp2vzG9qeKz3rA0hwGccI8QRcY0AI8Agp2wIZ\nNL/6OQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDhjDJjpB+26B4l/gpJs/LXCPAQqQCKqjJA+0J3kpoiBA1y\nFAjxBFxjQAjwCEjNDdNLmMqZAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree feb47331a944d2a5b2892273626600a1b970f1a8\nparent d73918447faf168670b5dfdd55f6c19ed6dd8632\nparent b651ef7e1c39a820089695b29d14a07d910a385a\nauthor MarcoFalke <falke.marco@gmail.com> 1550008319 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550008326 -0500\n\nMerge #15238: [QA] remove some magic mining constants in functional tests\n\nb651ef7e1c submitheader: more directly test missing prev block header (Gregory Sanders)\n1e7f741745 remove some magic mining constants in functional tests (Gregory Sanders)\n\nPull request description:\n\n  The fewer magic numbers the better.\n\n  Also more directly tested a `submitheader` case of bad previous blockhash.\n\nTree-SHA512: 52b01a6aa199fa909eea4e9e84409a901933e545724e33149cc4132c82168199fd678809b6d94d95c9ff6ad02238a9552363620d13b8beaa5d4b67ade9ef425c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/029d28a7aa5619973eb59fe445b9a4186c0c2a58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/029d28a7aa5619973eb59fe445b9a4186c0c2a58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/029d28a7aa5619973eb59fe445b9a4186c0c2a58/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d73918447faf168670b5dfdd55f6c19ed6dd8632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73918447faf168670b5dfdd55f6c19ed6dd8632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d73918447faf168670b5dfdd55f6c19ed6dd8632"
      },
      {
        "sha": "b651ef7e1c39a820089695b29d14a07d910a385a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b651ef7e1c39a820089695b29d14a07d910a385a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b651ef7e1c39a820089695b29d14a07d910a385a"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 18,
      "deletions": 14
    },
    "files": [
      {
        "sha": "a47a55640680cad12ef0baa6537832aec3d64d1b",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/029d28a7aa5619973eb59fe445b9a4186c0c2a58/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/029d28a7aa5619973eb59fe445b9a4186c0c2a58/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=029d28a7aa5619973eb59fe445b9a4186c0c2a58",
        "patch": "@@ -22,6 +22,8 @@\n     hex_str_to_bytes,\n )\n \n+from test_framework.messages import BLOCK_HEADER_SIZE\n+\n class ReqType(Enum):\n     JSON = 1\n     BIN = 2\n@@ -214,26 +216,26 @@ def run_test(self):\n \n         # Check binary format\n         response = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n-        assert_greater_than(int(response.getheader('content-length')), 80)\n+        assert_greater_than(int(response.getheader('content-length')), BLOCK_HEADER_SIZE)\n         response_bytes = response.read()\n \n         # Compare with block header\n         response_header = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n-        assert_equal(int(response_header.getheader('content-length')), 80)\n+        assert_equal(int(response_header.getheader('content-length')), BLOCK_HEADER_SIZE)\n         response_header_bytes = response_header.read()\n-        assert_equal(response_bytes[:80], response_header_bytes)\n+        assert_equal(response_bytes[:BLOCK_HEADER_SIZE], response_header_bytes)\n \n         # Check block hex format\n         response_hex = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n-        assert_greater_than(int(response_hex.getheader('content-length')), 160)\n+        assert_greater_than(int(response_hex.getheader('content-length')), BLOCK_HEADER_SIZE*2)\n         response_hex_bytes = response_hex.read().strip(b'\\n')\n         assert_equal(binascii.hexlify(response_bytes), response_hex_bytes)\n \n         # Compare with hex block header\n         response_header_hex = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n-        assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n-        response_header_hex_bytes = response_header_hex.read(160)\n-        assert_equal(binascii.hexlify(response_bytes[:80]), response_header_hex_bytes)\n+        assert_greater_than(int(response_header_hex.getheader('content-length')), BLOCK_HEADER_SIZE*2)\n+        response_header_hex_bytes = response_header_hex.read(BLOCK_HEADER_SIZE*2)\n+        assert_equal(binascii.hexlify(response_bytes[:BLOCK_HEADER_SIZE]), response_header_hex_bytes)\n \n         # Check json format\n         block_json_obj = self.test_rest_request(\"/block/{}\".format(bb_hash))"
      },
      {
        "sha": "5dafb11ac58b58b9830a77b758d115d2d62f412b",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/029d28a7aa5619973eb59fe445b9a4186c0c2a58/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/029d28a7aa5619973eb59fe445b9a4186c0c2a58/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=029d28a7aa5619973eb59fe445b9a4186c0c2a58",
        "patch": "@@ -15,6 +15,7 @@\n from test_framework.messages import (\n     CBlock,\n     CBlockHeader,\n+    BLOCK_HEADER_SIZE\n )\n from test_framework.mininode import (\n     P2PDataStore,\n@@ -131,10 +132,9 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n \n         self.log.info(\"getblocktemplate: Test bad tx count\")\n         # The tx count is immediately after the block header\n-        TX_COUNT_OFFSET = 80\n         bad_block_sn = bytearray(block.serialize())\n-        assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n-        bad_block_sn[TX_COUNT_OFFSET] += 1\n+        assert_equal(bad_block_sn[BLOCK_HEADER_SIZE], 1)\n+        bad_block_sn[BLOCK_HEADER_SIZE] += 1\n         assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal', 'rules': ['segwit']})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n@@ -164,9 +164,9 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         assert_submitblock(bad_block, 'prev-blk-not-found', 'prev-blk-not-found')\n \n         self.log.info('submitheader tests')\n-        assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='xx' * 80))\n-        assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='ff' * 78))\n-        assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata='ff' * 80))\n+        assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='xx' * BLOCK_HEADER_SIZE))\n+        assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='ff' * (BLOCK_HEADER_SIZE-2)))\n+        assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata=super(CBlock, bad_block).serialize().hex()))\n \n         block.nTime += 1\n         block.solve()"
      },
      {
        "sha": "4bd58519c5550b13bbc5c02d249cfd696db15e47",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/029d28a7aa5619973eb59fe445b9a4186c0c2a58/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/029d28a7aa5619973eb59fe445b9a4186c0c2a58/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=029d28a7aa5619973eb59fe445b9a4186c0c2a58",
        "patch": "@@ -28,7 +28,7 @@\n import time\n \n from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, bytes_to_hex_str\n+from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, assert_equal\n \n MIN_VERSION_SUPPORTED = 60001\n MY_VERSION = 70014  # past bip-31 for ping/pong\n@@ -591,6 +591,8 @@ def __repr__(self):\n             % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n                time.ctime(self.nTime), self.nBits, self.nNonce)\n \n+BLOCK_HEADER_SIZE = len(CBlockHeader().serialize())\n+assert_equal(BLOCK_HEADER_SIZE, 80)\n \n class CBlock(CBlockHeader):\n     __slots__ = (\"vtx\",)"
      }
    ]
  },
  {
    "sha": "f6122abe03699423faca29035f16f3afc527f4d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjEyMmFiZTAzNjk5NDIzZmFjYTI5MDM1ZjE2ZjNhZmM1MjdmNGQz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-17T17:37:46Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-12T22:07:45Z"
      },
      "message": "interfaces: Add remove to Wallet",
      "tree": {
        "sha": "a71d1af59576a741a86f52b94bde5a9550aea674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a71d1af59576a741a86f52b94bde5a9550aea674"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6122abe03699423faca29035f16f3afc527f4d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6122abe03699423faca29035f16f3afc527f4d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6122abe03699423faca29035f16f3afc527f4d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6122abe03699423faca29035f16f3afc527f4d3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "029d28a7aa5619973eb59fe445b9a4186c0c2a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/029d28a7aa5619973eb59fe445b9a4186c0c2a58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/029d28a7aa5619973eb59fe445b9a4186c0c2a58"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b5430037cc52beaaf1beb2c563854f7b10e60f9",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6122abe03699423faca29035f16f3afc527f4d3/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6122abe03699423faca29035f16f3afc527f4d3/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=f6122abe03699423faca29035f16f3afc527f4d3",
        "patch": "@@ -468,6 +468,10 @@ class WalletImpl : public Wallet\n     bool IsWalletFlagSet(uint64_t flag) override { return m_wallet.IsWalletFlagSet(flag); }\n     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }\n+    void remove() override\n+    {\n+        RemoveWallet(m_shared_wallet);\n+    }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n     {\n         return MakeHandler(m_wallet.NotifyUnload.connect(fn));"
      },
      {
        "sha": "a931e5fafb7023a28c30984e2b52a3665811a647",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6122abe03699423faca29035f16f3afc527f4d3/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6122abe03699423faca29035f16f3afc527f4d3/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=f6122abe03699423faca29035f16f3afc527f4d3",
        "patch": "@@ -247,6 +247,9 @@ class Wallet\n     // Get default change type.\n     virtual OutputType getDefaultChangeType() = 0;\n \n+    // Remove wallet.\n+    virtual void remove() = 0;\n+\n     //! Register handler for unload message.\n     using UnloadFn = std::function<void()>;\n     virtual std::unique_ptr<Handler> handleUnload(UnloadFn fn) = 0;"
      }
    ]
  },
  {
    "sha": "f77ba34313768fde9b813243dcd408f9755b0418",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzdiYTM0MzEzNzY4ZmRlOWI4MTMyNDNkY2Q0MDhmOTc1NWIwNDE4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-18T00:21:36Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-12T22:07:45Z"
      },
      "message": "gui: Add closeWallet to WalletController",
      "tree": {
        "sha": "f82671faace45374c31cdde667123dd2594b012b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f82671faace45374c31cdde667123dd2594b012b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f77ba34313768fde9b813243dcd408f9755b0418",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f77ba34313768fde9b813243dcd408f9755b0418",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f77ba34313768fde9b813243dcd408f9755b0418",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f77ba34313768fde9b813243dcd408f9755b0418/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6122abe03699423faca29035f16f3afc527f4d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6122abe03699423faca29035f16f3afc527f4d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6122abe03699423faca29035f16f3afc527f4d3"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c532ffbbfe51a8193d01cd45d85109e6b5f7a60f",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f77ba34313768fde9b813243dcd408f9755b0418/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f77ba34313768fde9b813243dcd408f9755b0418/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=f77ba34313768fde9b813243dcd408f9755b0418",
        "patch": "@@ -63,6 +63,22 @@ OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidge\n     return activity;\n }\n \n+void WalletController::closeWallet(WalletModel* wallet_model, QWidget* parent)\n+{\n+    QMessageBox box(parent);\n+    box.setWindowTitle(tr(\"Close wallet\"));\n+    box.setText(tr(\"Are you sure you wish to close wallet <i>%1</i>?\").arg(wallet_model->getDisplayName()));\n+    box.setInformativeText(tr(\"Closing the wallet for too long can result in having to resync the entire chain if pruning is enabled.\"));\n+    box.setStandardButtons(QMessageBox::Yes|QMessageBox::Cancel);\n+    box.setDefaultButton(QMessageBox::Yes);\n+    if (box.exec() != QMessageBox::Yes) return;\n+\n+    // First remove wallet from node.\n+    wallet_model->wallet().remove();\n+    // Now release the model.\n+    removeAndDeleteWallet(wallet_model);\n+}\n+\n WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet)\n {\n     QMutexLocker locker(&m_mutex);"
      },
      {
        "sha": "19b3a82253154352dbc08ece7cd84a89ec75c965",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f77ba34313768fde9b813243dcd408f9755b0418/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f77ba34313768fde9b813243dcd408f9755b0418/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=f77ba34313768fde9b813243dcd408f9755b0418",
        "patch": "@@ -44,6 +44,7 @@ class WalletController : public QObject\n     std::vector<std::string> getWalletsAvailableToOpen() const;\n \n     OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n+    void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n private Q_SLOTS:\n     void addWallet(WalletModel* wallet_model);"
      }
    ]
  },
  {
    "sha": "94086fb59d1a05eb9a2960c2aae242e49c0a9103",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDA4NmZiNTlkMWEwNWViOWEyOTYwYzJhYWUyNDJlNDljMGE5MTAz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-18T00:22:32Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-12T22:07:45Z"
      },
      "message": "gui: Add close wallet action",
      "tree": {
        "sha": "3f57c497829ac5cc393552c357df6dccd7013015",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f57c497829ac5cc393552c357df6dccd7013015"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94086fb59d1a05eb9a2960c2aae242e49c0a9103",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94086fb59d1a05eb9a2960c2aae242e49c0a9103",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94086fb59d1a05eb9a2960c2aae242e49c0a9103",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94086fb59d1a05eb9a2960c2aae242e49c0a9103/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f77ba34313768fde9b813243dcd408f9755b0418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f77ba34313768fde9b813243dcd408f9755b0418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f77ba34313768fde9b813243dcd408f9755b0418"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bc88dd5e0a1743373fb26eb87b9a344c80d30442",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94086fb59d1a05eb9a2960c2aae242e49c0a9103/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94086fb59d1a05eb9a2960c2aae242e49c0a9103/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=94086fb59d1a05eb9a2960c2aae242e49c0a9103",
        "patch": "@@ -338,6 +338,9 @@ void BitcoinGUI::createActions()\n     m_open_wallet_action->setMenu(new QMenu(this));\n     m_open_wallet_action->setStatusTip(tr(\"Open a wallet\"));\n \n+    m_close_wallet_action = new QAction(tr(\"Close Wallet...\"), this);\n+    m_close_wallet_action->setStatusTip(tr(\"Close wallet\"));\n+\n     showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(tr(PACKAGE_NAME)));\n@@ -396,6 +399,9 @@ void BitcoinGUI::createActions()\n                 });\n             }\n         });\n+        connect(m_close_wallet_action, &QAction::triggered, [this] {\n+            m_wallet_controller->closeWallet(walletFrame->currentWalletModel(), this);\n+        });\n     }\n #endif // ENABLE_WALLET\n \n@@ -418,6 +424,7 @@ void BitcoinGUI::createMenuBar()\n     if(walletFrame)\n     {\n         file->addAction(m_open_wallet_action);\n+        file->addAction(m_close_wallet_action);\n         file->addSeparator();\n         file->addAction(openAction);\n         file->addAction(backupWalletAction);\n@@ -693,6 +700,7 @@ void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n     usedSendingAddressesAction->setEnabled(enabled);\n     usedReceivingAddressesAction->setEnabled(enabled);\n     openAction->setEnabled(enabled);\n+    m_close_wallet_action->setEnabled(enabled);\n }\n \n void BitcoinGUI::createTrayIcon()"
      },
      {
        "sha": "b58ccbb4552f0cf52412ebbcdc5189b7e4fd1538",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94086fb59d1a05eb9a2960c2aae242e49c0a9103/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94086fb59d1a05eb9a2960c2aae242e49c0a9103/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=94086fb59d1a05eb9a2960c2aae242e49c0a9103",
        "patch": "@@ -148,6 +148,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* openAction = nullptr;\n     QAction* showHelpMessageAction = nullptr;\n     QAction* m_open_wallet_action{nullptr};\n+    QAction* m_close_wallet_action{nullptr};\n     QAction* m_wallet_selector_label_action = nullptr;\n     QAction* m_wallet_selector_action = nullptr;\n "
      }
    ]
  },
  {
    "sha": "a4b92e467dd182621497deda1e80a9737629c75f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGI5MmU0NjdkZDE4MjYyMTQ5N2RlZGExZTgwYTk3Mzc2MjljNzVm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-02-03T19:31:52Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-02-12T22:47:45Z"
      },
      "message": "Log full paths for wallets",
      "tree": {
        "sha": "3bc3adf396ff4f9b5d993357296ae56bb2b44920",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bc3adf396ff4f9b5d993357296ae56bb2b44920"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4b92e467dd182621497deda1e80a9737629c75f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAlxjTRwACgkQQQEIES5+\nqB9zRw//YSZvGjrk/uucIy5MTyYG/ZBGwLdpDjOqU9DvSQlXFq08X2s8DTnjedHl\nTQqJAda+SjHesEccb4nz5Z0JvVXVYt5pfFOpKxE+1j+9od0njrdCOYKrywbuZsQI\nO2eUtQm7iCVpqTLh1v1JwIemaU0kp+AcCXRI8dG2oREdIcDyWcsfe4bnuPLVBPBT\njtM+fH9uGnZHTSzQHzeyqDwb8QAdc8la7PuSvwdolME3SBUvfRu/32KvkOoY7siW\n0q7FWELRMUwtPMeZbWjfumlQqkAkJtGCPaTsBdvQ8flLASt/SL1ZanD73EEaqjIR\nw6PApQBdfhECBaTVw9XNNKiCfX1Vx+6pbCXZ5MYAAX9kCByZ7HbXHdJFq1iMzk2p\nKc5zrxpiakNJG/yo5RYEyNplhh57z3MRSGr6sb+TsZze6UJOiOOHX4pkAjMYAyZC\nScpHAptNtCXiDB2M4Cf+8Yp3T2MAYc8FMNDHnoKWUeaRhHy9GqW5zcXwo4RYatYh\npu9UIbrlDvf5LJnIcEIRySp0w5zFYZyStHenMoXKJb8qlxqNaIDY0Ka5OtF/NMG0\njYM8LUuubm98yYMvAQwTFv8e/N447h0jKNuCAIwP0T2QXVoSXnxkygb3+ot5CUFR\ntuuWYjjhbrQWRPr69H9wez/9t1TQ5DxSelFqp4OqwcGoONrjHcg=\n=O5uP\n-----END PGP SIGNATURE-----",
        "payload": "tree 3bc3adf396ff4f9b5d993357296ae56bb2b44920\nparent b3a715301a0fd972fb2f3bd36e2680b3cdbbab26\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1549222312 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1550011665 +0200\n\nLog full paths for wallets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b92e467dd182621497deda1e80a9737629c75f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4b92e467dd182621497deda1e80a9737629c75f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b92e467dd182621497deda1e80a9737629c75f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3a715301a0fd972fb2f3bd36e2680b3cdbbab26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a715301a0fd972fb2f3bd36e2680b3cdbbab26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3a715301a0fd972fb2f3bd36e2680b3cdbbab26"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4d8ff9b79c00ccbc43ab1456f463a48b9f4a7795",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4b92e467dd182621497deda1e80a9737629c75f/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4b92e467dd182621497deda1e80a9737629c75f/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=a4b92e467dd182621497deda1e80a9737629c75f",
        "patch": "@@ -389,7 +389,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n     fs::path walletDir = env->Directory();\n \n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(nullptr, nullptr, nullptr));\n-    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+    LogPrintf(\"Using wallet %s\\n\", file_path.string());\n \n     // Wallet file must be a plain filename without a directory\n     if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))"
      }
    ]
  },
  {
    "sha": "0d1160e42185983b398cbc2e2be379002f4a62e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDExNjBlNDIxODU5ODNiMzk4Y2JjMmUyYmUzNzkwMDJmNGE2MmU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T23:42:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T23:43:06Z"
      },
      "message": "Merge #14918: RPCHelpMan: Check default values are given at compile-time\n\nfa0ad4e7ce RPCHelpMan: Check default values are given at compile-time (MarcoFalke)\n\nPull request description:\n\n  Remove the run time assertions on the default values and ensure that the correct default type and value is provided at compile time.\n\nTree-SHA512: 80df2f3fab4379b500c773c27da63f22786c58be5963fe99744746320e43627a5d433eedf8b32209158df7805ebdce65ed4d242c829c4fe6e5d13deb4799ed42",
      "tree": {
        "sha": "926f90ace6f781bab590a462d9fe37ce361dec25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/926f90ace6f781bab590a462d9fe37ce361dec25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d1160e42185983b398cbc2e2be379002f4a62e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcY1oKAAoJENLqSFDnUoslutAP/i99cAE2zbaTwIte1oO04QY9\n2CN7vkoSGSprccif8Ii5MGg0WYKycuRdP1enVwNkKWxvFx8tgdujyfi+pibgMoqu\nBjrQJzpsytGMSgBfewYKjrtmLVfmYoZgEI7jzkqlxSHSj57f7qwM91fbffIsu5bd\nZik79ypGIp2e7cVjfsqxxuKuNMWCpqqD2cfUDcPzpIy5VdCB6GrQvJAQss0skgoJ\nWcRBECbNabdozw/KbrIZClRl6lpKaJWLeroxabwMDa3kDdcDJ48cV9qpmkqkCw0z\noUUKyc96/nxk/emtO8dNcSmv806CT/jkDksWu5/jInY860W8H12UEnXaekoW5xRQ\nMzUmkO8WWG9czZe/xEDlYHRmq0/hlSwLdU0dBHbZehA6FUkae8Dueuif7wOdc6R3\nxc5D7d6QI3RokvCwftga2j/Inhajopgncs0D9YXkIspe6ppNmIUOJUZ1IO1qUko5\nOxfEfCrFmvP9vSMC4kzghXVotuObZzJKc26pN5bnqHMNxdVHsXbN+FR39PtOHMLb\ny2Hn5qydHmim3EcMJzvlHR9ImuVYrtM3p+ATkOxDMRw7doeqkpQ4H39jSVbCNWZt\nYsgfbHQxzwQ4QDwzLeGv7OrJTenyav2BkgPb/hM7dmoZ0q8sTfVdhlY9QohbyUqi\n9qYJuk2eDWiIWYLxY8Jy\n=cxtn\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMRZwKepHeCFi8G/JbruQQPeoeMRR70YWL6QiF1xBr3/CP/wECahd0Enek0U\nCfsGmUSAYfYI8QRcY1oM8Aj1RMs2E5b06wCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEDd/Ic1Y0SC/H+C3PUlWNjoI8CCC3DTC\n6cLaDsguQEyv8PbeUHPhcAtZfp3aWPIlmwcanAjxBFxjWg3wCIjTp56gOibuAIPf\n4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BB2932yDoPf6REbX+1QdQdoCPEEXGNaDPAIS0G/WlLKHx8Ag9/jDS75\nDI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfw\nEI7lUeZFKLWRC81BW9tBjlII8BBQRALLSnA66TMQgOWpvxRzCPEEXGNaDfAItZtX\naPlwoRwAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5\nd2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 926f90ace6f781bab590a462d9fe37ce361dec25\nparent 029d28a7aa5619973eb59fe445b9a4186c0c2a58\nparent fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c\nauthor MarcoFalke <falke.marco@gmail.com> 1550014970 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550014986 -0500\n\nMerge #14918: RPCHelpMan: Check default values are given at compile-time\n\nfa0ad4e7ce RPCHelpMan: Check default values are given at compile-time (MarcoFalke)\n\nPull request description:\n\n  Remove the run time assertions on the default values and ensure that the correct default type and value is provided at compile time.\n\nTree-SHA512: 80df2f3fab4379b500c773c27da63f22786c58be5963fe99744746320e43627a5d433eedf8b32209158df7805ebdce65ed4d242c829c4fe6e5d13deb4799ed42\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d1160e42185983b398cbc2e2be379002f4a62e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d1160e42185983b398cbc2e2be379002f4a62e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d1160e42185983b398cbc2e2be379002f4a62e9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "029d28a7aa5619973eb59fe445b9a4186c0c2a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/029d28a7aa5619973eb59fe445b9a4186c0c2a58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/029d28a7aa5619973eb59fe445b9a4186c0c2a58"
      },
      {
        "sha": "fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0ad4e7ce8f4c19fe58bf06747bf8c62600581c"
      }
    ],
    "stats": {
      "total": 751,
      "additions": 388,
      "deletions": 363
    },
    "files": [
      {
        "sha": "7fb9ff2eaf03d77e1ce8f6b489b61713ac66d8e1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 37,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -215,7 +215,7 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -256,8 +256,8 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"Block hash to wait for.\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"Block hash to wait for.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -302,8 +302,8 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                 \"of the current tip.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Block height to wait for.\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Block height to wait for.\"},\n+                    {\"timeout\", RPCArg::Type::NUM, /* default */ \"0\", \"Time in milliseconds to wait for a response. 0 indicates no timeout.\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -501,7 +501,7 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n                 \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n                 \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\",\n                 {\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n                 RPCResult{\"for verbose = false\",\n             \"[                     (json array of string)\\n\"\n@@ -535,8 +535,8 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempoolancestors\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n@@ -605,8 +605,8 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempooldescendants\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"True for a json object, false for array of transaction ids\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for a json object, false for array of transaction ids\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = false\",\n@@ -675,7 +675,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmempoolentry\",\n                 \"\\nReturns mempool data for given transaction\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id (must be in mempool)\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -711,7 +711,7 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n             RPCHelpMan{\"getblockhash\",\n                 \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The height index\"},\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The height index\"},\n                 },\n                 RPCResult{\n             \"\\\"hash\\\"         (string) The block hash\\n\"\n@@ -740,8 +740,8 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n                 \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n                 \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"true for a json object, false for the hex-encoded data\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"true\", \"true for a json object, false for the hex-encoded data\"},\n                 },\n                 {\n                     RPCResult{\"for verbose = true\",\n@@ -830,8 +830,8 @@ static UniValue getblock(const JSONRPCRequest& request)\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n                 \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The block hash\"},\n-                    {\"verbosity\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n                 },\n                 {\n                     RPCResult{\"for verbosity = 0\",\n@@ -986,7 +986,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n                 },\n                 RPCResult{\n@@ -1085,9 +1085,9 @@ UniValue gettxout(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxout\",\n                 \"\\nReturns details about an unspent transaction output.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                    {\"n\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"vout number\"},\n-                    {\"include_mempool\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n+                    {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"n\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"vout number\"},\n+                    {\"include_mempool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1166,8 +1166,8 @@ static UniValue verifychain(const JSONRPCRequest& request)\n             RPCHelpMan{\"verifychain\",\n                 \"\\nVerifies blockchain database.\\n\",\n                 {\n-                    {\"checklevel\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, range=0-4\", nCheckLevel), \"How thorough the block verification is.\"},\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ strprintf(\"%d, 0=all\", nCheckDepth), \"The number of blocks to check.\"},\n+                    {\"checklevel\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, range=0-4\", nCheckLevel), \"How thorough the block verification is.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, 0=all\", nCheckDepth), \"The number of blocks to check.\"},\n                 },\n                 RPCResult{\n             \"true|false       (boolean) Verified or not\\n\"\n@@ -1534,7 +1534,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n                 \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n                 \"\\nThe effects of preciousblock are not retained across restarts.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as precious\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to mark as precious\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1571,7 +1571,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n             RPCHelpMan{\"invalidateblock\",\n                 \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to mark as invalid\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to mark as invalid\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1612,7 +1612,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n                 \"\\nRemoves invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\\n\"\n                 \"This can be used to undo the effects of invalidateblock.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to reconsider\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to reconsider\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1650,8 +1650,8 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n             RPCHelpMan{\"getchaintxstats\",\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"one month\", \"Size of the window in number of blocks\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"chain tip\", \"The hash of the block that ends the window.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* default */ \"one month\", \"Size of the window in number of blocks\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, /* default */ \"chain tip\", \"The hash of the block that ends the window.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1785,11 +1785,11 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                 \"It won't work for some heights with pruning.\\n\"\n                 \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\",\n                 {\n-                    {\"hash_or_height\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n-                    {\"stats\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"all values\", \"Values to plot (see result below)\",\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block hash or height of the target block\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"stats\", RPCArg::Type::ARR, /* default */ \"all values\", \"Values to plot (see result below)\",\n                         {\n-                            {\"height\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n-                            {\"time\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Selected statistic\"},\n+                            {\"height\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Selected statistic\"},\n+                            {\"time\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Selected statistic\"},\n                         },\n                         \"stats\"},\n                 },\n@@ -2148,18 +2148,18 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n                 \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n                 {\n-                    {\"action\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The action to execute\\n\"\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n             \"                                      \\\"start\\\" for starting a scan\\n\"\n             \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n             \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n-                    {\"scanobjects\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"Array of scan objects\\n\"\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects\\n\"\n             \"                                  Every scan object is either a string descriptor or an object:\",\n                         {\n-                            {\"descriptor\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"An output descriptor\"},\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"An object with output descriptor and metadata\",\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                                 {\n-                                    {\"desc\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"An output descriptor\"},\n-                                    {\"range\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000\", \"Up to what child index HD chains should be explored\"},\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::NUM, /* default */ \"1000\", \"Up to what child index HD chains should be explored\"},\n                                 },\n                             },\n                         },"
      },
      {
        "sha": "66a3b1048e0696fdf369ff829a26947b9840a03f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -82,8 +82,8 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n                 \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n                 \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"120\", \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n-                    {\"height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"-1\", \"To estimate at the time of the given height.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, /* default */ \"120\", \"The number of blocks, or -1 for blocks since last difficulty change.\"},\n+                    {\"height\", RPCArg::Type::NUM, /* default */ \"-1\", \"To estimate at the time of the given height.\"},\n                 },\n                 RPCResult{\n             \"x             (numeric) Hashes per second estimated\\n\"\n@@ -153,9 +153,9 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"generatetoaddress\",\n                 \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The address to send the newly generated bitcoin to.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address to send the newly generated bitcoin to.\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n                 },\n                 RPCResult{\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n@@ -234,10 +234,10 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"prioritisetransaction\",\n                 \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id.\"},\n-                    {\"dummy\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"null\", \"API-Compatibility for previous API. Must be zero or null.\\n\"\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id.\"},\n+                    {\"dummy\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"API-Compatibility for previous API. Must be zero or null.\\n\"\n             \"                  DEPRECATED. For forward compatibility use named arguments and omit this parameter.\"},\n-                    {\"fee_delta\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n+                    {\"fee_delta\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The fee value (in satoshis) to add (or subtract, if negative).\\n\"\n             \"                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\\n\"\n             \"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\\n\"\n             \"                  considers the transaction as it would have paid a higher (or lower) fee.\"},\n@@ -306,17 +306,17 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n                 {\n-                    {\"template_request\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"A json object in the following spec\",\n+                    {\"template_request\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"A json object in the following spec\",\n                         {\n-                            {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n-                            {\"capabilities\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"\", \"A list of strings\",\n+                            {\"mode\", RPCArg::Type::STR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\"},\n+                            {\"capabilities\", RPCArg::Type::ARR, /* treat as named arg */ RPCArg::Optional::OMITTED_NAMED_ARG, \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n+                                    {\"support\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\"},\n                                 },\n                                 },\n-                            {\"rules\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A list of strings\",\n+                            {\"rules\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A list of strings\",\n                                 {\n-                                    {\"support\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"client side supported softfork deployment\"},\n+                                    {\"support\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"client side supported softfork deployment\"},\n                                 },\n                                 },\n                         },\n@@ -706,8 +706,8 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                 \"\\nAttempts to submit new block to network.\\n\"\n                 \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n                 {\n-                    {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block data to submit\"},\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block data to submit\"},\n+                    {\"dummy\", RPCArg::Type::STR, /* default */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -771,7 +771,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n                 \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n                 \"\\nThrows when the header is invalid.\\n\",\n                 {\n-                    {\"hexdata\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded block header data\"},\n+                    {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block header data\"},\n                 },\n                 RPCResult{\n             \"None\"\n@@ -813,8 +813,8 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n                 \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n                 \"in BIP 141 (witness data is discounted).\\n\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Confirmation target in blocks (1 - 1008)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"CONSERVATIVE\", \"The fee estimate mode.\\n\"\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"CONSERVATIVE\", \"The fee estimate mode.\\n\"\n             \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n             \"                   a longer history. A conservative estimate potentially returns a\\n\"\n             \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n@@ -880,8 +880,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n                 \"defined in BIP 141 (witness data is discounted).\\n\",\n                 {\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Confirmation target in blocks (1 - 1008)\"},\n-                    {\"threshold\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Confirmation target in blocks (1 - 1008)\"},\n+                    {\"threshold\", RPCArg::Type::NUM, /* default */ \"0.95\", \"The proportion of transactions in a given feerate range that must have been\\n\"\n             \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n             \"               lower buckets.\"},\n                 },"
      },
      {
        "sha": "784adfa9691cf633f0dc1b2fb68da4b9905e97fa",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -40,7 +40,7 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n                 \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n                 \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to validate\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -87,12 +87,12 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n                 \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n                 \"It returns a json object with the address and redeemScript.\\n\",\n                 {\n-                    {\"nrequired\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The number of required signatures out of the n keys.\"},\n-                    {\"keys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of hex-encoded public keys.\",\n+                    {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys.\"},\n+                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of hex-encoded public keys.\",\n                         {\n-                            {\"key\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n+                            {\"key\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"The hex-encoded public key\"},\n                         }},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -158,9 +158,9 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n             \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"},\n             {\n-                {\"descriptor\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The descriptor.\"},\n-                {\"begin\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n-                {\"end\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n+                {\"begin\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n+                {\"end\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n             },\n             RPCResult{\n                 \"[ address ] (array) the derived addresses\\n\"\n@@ -239,9 +239,9 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n             RPCHelpMan{\"verifymessage\",\n                 \"\\nVerify a signed message\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the signature.\"},\n-                    {\"signature\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n-                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message that was signed.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to use for the signature.\"},\n+                    {\"signature\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n+                    {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message that was signed.\"},\n                 },\n                 RPCResult{\n             \"true|false   (boolean) If the signature is verified or not.\\n\"\n@@ -298,8 +298,8 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             RPCHelpMan{\"signmessagewithprivkey\",\n                 \"\\nSign a message with the private key of an address\\n\",\n                 {\n-                    {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key to sign the message with.\"},\n-                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n+                    {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key to sign the message with.\"},\n+                    {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message to create a signature of.\"},\n                 },\n                 RPCResult{\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n@@ -340,7 +340,7 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n-                    {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Unix seconds-since-epoch timestamp\\n\"\n+                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Unix seconds-since-epoch timestamp\\n\"\n             \"   Pass 0 to go back to using the system time.\"},\n                 },\n                 RPCResults{},\n@@ -406,7 +406,7 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"getmemoryinfo\",\n                 \"Returns an object containing information about memory usage.\\n\",\n                 {\n-                    {\"mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n+                    {\"mode\", RPCArg::Type::STR, /* default */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n             \"  - \\\"stats\\\" returns general statistics about memory usage in the daemon.\\n\"\n             \"  - \\\"mallocinfo\\\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+).\"},\n                 },\n@@ -483,13 +483,13 @@ UniValue logging(const JSONRPCRequest& request)\n             \"  - \\\"none\\\", \\\"0\\\" : even if other logging categories are specified, ignore all of them.\\n\"\n             ,\n                 {\n-                    {\"include\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of categories to add debug logging\",\n+                    {\"include\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of categories to add debug logging\",\n                         {\n-                            {\"include_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n+                            {\"include_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},\n-                    {\"exclude\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of categories to remove debug logging\",\n+                    {\"exclude\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of categories to remove debug logging\",\n                         {\n-                            {\"exclude_category\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"the valid logging category\"},\n+                            {\"exclude_category\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"the valid logging category\"},\n                         }},\n                 },\n                 RPCResult{"
      },
      {
        "sha": "6bbbbc9876d2743cd6a890d57a196d57180f7860",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -221,8 +221,8 @@ static UniValue addnode(const JSONRPCRequest& request)\n                 \"Nodes added using addnode (or -connect) are protected from DoS disconnection and are not required to be\\n\"\n                 \"full nodes/support SegWit as other outbound peers are (though such peers will not be synced from).\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The node (see getpeerinfo for nodes)\"},\n-                    {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n+                    {\"node\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The node (see getpeerinfo for nodes)\"},\n+                    {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -266,8 +266,8 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                 \"\\nStrictly one out of 'address' and 'nodeid' can be provided to identify the node.\\n\"\n                 \"\\nTo disconnect by nodeid, either set 'address' to the empty string, or call using the named 'nodeid' argument only.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n-                    {\"nodeid\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n+                    {\"address\", RPCArg::Type::STR, /* default */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n+                    {\"nodeid\", RPCArg::Type::NUM, /* default */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -311,7 +311,7 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                 \"\\nReturns information about the given added node, or all added nodes\\n\"\n                 \"(note that onetry addnodes are not listed here)\\n\",\n                 {\n-                    {\"node\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n+                    {\"node\", RPCArg::Type::STR, /* default */ \"all nodes\", \"If provided, return information about this specific node, otherwise all nodes are returned.\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -532,10 +532,10 @@ static UniValue setban(const JSONRPCRequest& request)\n             RPCHelpMan{\"setban\",\n                 \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\",\n                 {\n-                    {\"subnet\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n-                    {\"command\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n-                    {\"bantime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n-                    {\"absolute\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n+                    {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n+                    {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n+                    {\"bantime\", RPCArg::Type::NUM, /* default */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n+                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -667,7 +667,7 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n             RPCHelpMan{\"setnetworkactive\",\n                 \"\\nDisable/enable all p2p network activity.\\n\",\n                 {\n-                    {\"state\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"true to enable networking, false to disable\"},\n+                    {\"state\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"true to enable networking, false to disable\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n@@ -691,7 +691,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n             RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n                 {\n-                    {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n+                    {\"count\", RPCArg::Type::NUM, /* default */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n                 },\n                 RPCResult{\n             \"[\\n\""
      },
      {
        "sha": "c2f0c73851b5274f485c1901ffb5e7a3646bbc87",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 60,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -82,9 +82,9 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n                 \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If false, return a string, otherwise return a json object\"},\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"The block in which to look for the transaction\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, /* default */ \"false\", \"If false, return a string, otherwise return a json object\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"The block in which to look for the transaction\"},\n                 },\n                 {\n                     RPCResult{\"if verbose is not set or set to false\",\n@@ -218,12 +218,12 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                 \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n                 \"specify the block in which the transaction is included manually (by blockhash).\\n\",\n                 {\n-                    {\"txids\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of txids to filter\",\n+                    {\"txids\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of txids to filter\",\n                         {\n-                            {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A transaction hash\"},\n                         },\n                         },\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"null\", \"If specified, looks for txid in the block with this hash\"},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED_NAMED_ARG, \"If specified, looks for txid in the block with this hash\"},\n                 },\n                 RPCResult{\n             \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n@@ -311,7 +311,7 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n                 \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n                 \"and throwing an RPC error if the block is not in our best chain\\n\",\n                 {\n-                    {\"proof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded proof generated by gettxoutproof\"},\n+                    {\"proof\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded proof generated by gettxoutproof\"},\n                 },\n                 RPCResult{\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof can not be validated.\\n\"\n@@ -472,36 +472,36 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n                 \"Note that the transaction's inputs are not signed, and\\n\"\n                 \"it is not stored in the wallet or transmitted to the network.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* default */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n                                 },\n                                 },\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125-replaceable.\\n\"\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125-replaceable.\\n\"\n             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n@@ -536,8 +536,8 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n             \"                         If iswitness is not present, heuristic tests will be used in decoding\"},\n                 },\n                 RPCResult{\n@@ -611,7 +611,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             RPCHelpMan{\"decodescript\",\n                 \"\\nDecode a hex-encoded script.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hex-encoded script\"},\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -711,9 +711,9 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                 \"The combined transaction may be another partially signed transaction or a \\n\"\n                 \"fully signed transaction.\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of hex strings of partially signed transactions\",\n+                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of hex strings of partially signed transactions\",\n                         {\n-                            {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A transaction hash\"},\n+                            {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A transaction hash\"},\n                         },\n                         },\n                 },\n@@ -936,26 +936,26 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                 \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n                 \"this transaction depends on but may not yet be in the block chain.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"privkeys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base58-encoded private keys for signing\",\n+                    {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"privkeys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base58-encoded private keys for signing\",\n                         {\n-                            {\"privatekey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"private key in base58-encoding\"},\n+                            {\"privatekey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"private key in base58-encoding\"},\n                         },\n                         },\n-                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of previous dependent transaction outputs\",\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of previous dependent transaction outputs\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"omitted\", \"(required for P2SH or P2WSH) redeem script\"},\n-                                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type. Must be one of:\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type. Must be one of:\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -1023,8 +1023,8 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n                 \"\\nAlso see createrawtransaction and signrawtransactionwithkey calls.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n+                    {\"allowhighfees\", RPCArg::Type::BOOL, /* default */ \"false\", \"Allow high fees\"},\n                 },\n                 RPCResult{\n             \"\\\"hex\\\"             (string) The transaction hash in hex\\n\"\n@@ -1122,13 +1122,13 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                 \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n                 {\n-                    {\"rawtxs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"An array of hex strings of raw transactions.\\n\"\n+                    {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings of raw transactions.\\n\"\n             \"                                        Length must be one for now.\",\n                         {\n-                            {\"rawtx\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"\"},\n+                            {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"allowhighfees\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Allow high fees\"},\n+                    {\"allowhighfees\", RPCArg::Type::BOOL, /* default */ \"false\", \"Allow high fees\"},\n                 },\n                 RPCResult{\n             \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n@@ -1223,7 +1223,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n             RPCHelpMan{\"decodepsbt\",\n                 \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The PSBT base64 string\"},\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The PSBT base64 string\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1499,9 +1499,9 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                 \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n                 \"Implements the Combiner role.\\n\",\n                 {\n-                    {\"txs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of base64 strings of partially signed transactions\",\n+                    {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n                         {\n-                            {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n+                            {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A base64 string of a PSBT\"},\n                         },\n                         },\n                 },\n@@ -1559,8 +1559,8 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n                 \"created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\\n\"\n                 \"Implements the Finalizer and Extractor roles.\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"A base64 string of a PSBT\"},\n-                    {\"extract\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"If true and the transaction is complete,\\n\"\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"},\n+                    {\"extract\", RPCArg::Type::BOOL, /* default */ \"true\", \"If true and the transaction is complete,\\n\"\n             \"                             extract and return the complete transaction in normal network serialization instead of the PSBT.\"},\n                 },\n                 RPCResult{\n@@ -1622,36 +1622,36 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator role.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, /* default */ \"depends on the value of the 'replaceable' and 'locktime' arguments\", \"The sequence number\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT},\n                                 },\n                                 },\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                                 },\n                         },\n                         },\n-                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\"},\n                 },\n                 RPCResult{\n@@ -1698,10 +1698,10 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of a raw transaction\"},\n-                    {\"permitsigdata\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of a raw transaction\"},\n+                    {\"permitsigdata\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n                             \"                              will continue. If false, RPC will fail if any signatures are present.\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n                             \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n                             \"                              permitsigdata is true.\"},"
      },
      {
        "sha": "cd90573da0ed32c589e9d4259caed4e2b842e2eb",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -230,7 +230,7 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n             RPCHelpMan{\"help\",\n                 \"\\nList all commands, or get help for a specified command.\\n\",\n                 {\n-                    {\"command\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"all commands\", \"The command to get help on\"},\n+                    {\"command\", RPCArg::Type::STR, /* default */ \"all commands\", \"The command to get help on\"},\n                 },\n                 RPCResult{\n             \"\\\"text\\\"     (string) The help text\\n\""
      },
      {
        "sha": "ee7f3ca0dc7d175505a75239a2883794714d713e",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 18,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -182,12 +182,12 @@ struct Sections {\n                 left += outer_type == OuterType::OBJ ? arg.ToStringObj(/* oneline */ false) : arg.ToString(/* oneline */ false);\n             }\n             left += \",\";\n-            PushSection({left, arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR)});\n+            PushSection({left, arg.ToDescriptionString()});\n             break;\n         }\n         case RPCArg::Type::OBJ:\n         case RPCArg::Type::OBJ_USER_KEYS: {\n-            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR);\n+            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString();\n             PushSection({indent + \"{\", right});\n             for (const auto& arg_inner : arg.m_inner) {\n                 Push(arg_inner, current_indent + 2, OuterType::OBJ);\n@@ -202,7 +202,7 @@ struct Sections {\n             auto left = indent;\n             left += outer_type == OuterType::OBJ ? \"\\\"\" + arg.m_name + \"\\\": \" : \"\";\n             left += \"[\";\n-            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString(/* implicitly_required */ outer_type == OuterType::ARR);\n+            const auto right = outer_type == OuterType::NAMED_ARG ? \"\" : arg.ToDescriptionString();\n             PushSection({left, right});\n             for (const auto& arg_inner : arg.m_inner) {\n                 Push(arg_inner, current_indent + 2, OuterType::ARR);\n@@ -295,8 +295,14 @@ std::string RPCHelpMan::ToString() const\n     ret += m_name;\n     bool was_optional{false};\n     for (const auto& arg : m_args) {\n+        bool optional;\n+        if (arg.m_fallback.which() == 1) {\n+            optional = true;\n+        } else {\n+            optional = RPCArg::Optional::NO != boost::get<RPCArg::Optional>(arg.m_fallback);\n+        }\n         ret += \" \";\n-        if (arg.m_optional) {\n+        if (optional) {\n             if (!was_optional) ret += \"( \";\n             was_optional = true;\n         } else {\n@@ -336,7 +342,7 @@ std::string RPCHelpMan::ToString() const\n     return ret;\n }\n \n-std::string RPCArg::ToDescriptionString(const bool implicitly_required) const\n+std::string RPCArg::ToDescriptionString() const\n {\n     std::string ret;\n     ret += \"(\";\n@@ -374,19 +380,24 @@ std::string RPCArg::ToDescriptionString(const bool implicitly_required) const\n             // no default case, so the compiler can warn about missing cases\n         }\n     }\n-    if (!implicitly_required) {\n-        ret += \", \";\n-        if (m_optional) {\n-            ret += \"optional\";\n-            if (!m_default_value.empty()) {\n-                ret += \", default=\" + m_default_value;\n-            } else {\n-                // TODO enable this assert, when all optional parameters have their default value documented\n-                //assert(false);\n-            }\n-        } else {\n-            ret += \"required\";\n-            assert(m_default_value.empty()); // Default value is ignored, and must not be present\n+    if (m_fallback.which() == 1) {\n+        ret += \", optional, default=\" + boost::get<std::string>(m_fallback);\n+    } else {\n+        switch (boost::get<RPCArg::Optional>(m_fallback)) {\n+        case RPCArg::Optional::OMITTED: {\n+            // nothing to do. Element is treated as if not present and has no default value\n+            break;\n+        }\n+        case RPCArg::Optional::OMITTED_NAMED_ARG: {\n+            ret += \", optional\"; // Default value is \"null\"\n+            break;\n+        }\n+        case RPCArg::Optional::NO: {\n+            ret += \", required\";\n+            break;\n+        }\n+\n+            // no default case, so the compiler can warn about missing cases\n         }\n     }\n     ret += \")\";"
      },
      {
        "sha": "d895e99c7ea21429ba030b929c3583c925dce696",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 26,
        "deletions": 12,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -12,6 +12,8 @@\n #include <string>\n #include <vector>\n \n+#include <boost/variant.hpp>\n+\n class CKeyStore;\n class CPubKey;\n class CScript;\n@@ -42,27 +44,42 @@ struct RPCArg {\n         AMOUNT,        //!< Special type representing a floating point amount (can be either NUM or STR)\n         STR_HEX,       //!< Special type that is a STR with only hex chars\n     };\n+\n+    enum class Optional {\n+        /** Required arg */\n+        NO,\n+        /**\n+         * Optinal arg that is a named argument and has a default value of\n+         * `null`. When possible, the default value should be specified.\n+         */\n+        OMITTED_NAMED_ARG,\n+        /**\n+         * Optional argument with default value omitted because they are\n+         * implicitly clear. That is, elements in an array or object may not\n+         * exist by default.\n+         * When possible, the default value should be specified.\n+         */\n+        OMITTED,\n+    };\n+    using Fallback = boost::variant<Optional, /* default value for optional args */ std::string>;\n     const std::string m_name; //!< The name of the arg (can be empty for inner args)\n     const Type m_type;\n     const std::vector<RPCArg> m_inner; //!< Only used for arrays or dicts\n-    const bool m_optional;\n-    const std::string m_default_value; //!< Only used for optional args\n+    const Fallback m_fallback;\n     const std::string m_description;\n     const std::string m_oneline_description; //!< Should be empty unless it is supposed to override the auto-generated summary line\n     const std::vector<std::string> m_type_str; //!< Should be empty unless it is supposed to override the auto-generated type strings. Vector length is either 0 or 2, m_type_str.at(0) will override the type of the value in a key-value pair, m_type_str.at(1) will override the type in the argument description.\n \n     RPCArg(\n         const std::string& name,\n         const Type& type,\n-        const bool opt,\n-        const std::string& default_val,\n+        const Fallback& fallback,\n         const std::string& description,\n         const std::string& oneline_description = \"\",\n         const std::vector<std::string>& type_str = {})\n         : m_name{name},\n           m_type{type},\n-          m_optional{opt},\n-          m_default_value{default_val},\n+          m_fallback{fallback},\n           m_description{description},\n           m_oneline_description{oneline_description},\n           m_type_str{type_str}\n@@ -73,17 +90,15 @@ struct RPCArg {\n     RPCArg(\n         const std::string& name,\n         const Type& type,\n-        const bool opt,\n-        const std::string& default_val,\n+        const Fallback& fallback,\n         const std::string& description,\n         const std::vector<RPCArg>& inner,\n         const std::string& oneline_description = \"\",\n         const std::vector<std::string>& type_str = {})\n         : m_name{name},\n           m_type{type},\n           m_inner{inner},\n-          m_optional{opt},\n-          m_default_value{default_val},\n+          m_fallback{fallback},\n           m_description{description},\n           m_oneline_description{oneline_description},\n           m_type_str{type_str}\n@@ -104,9 +119,8 @@ struct RPCArg {\n     /**\n      * Return the description string, including the argument type and whether\n      * the argument is required.\n-     * implicitly_required is set for arguments in an array, which are neither optional nor required.\n      */\n-    std::string ToDescriptionString(bool implicitly_required = false) const;\n+    std::string ToDescriptionString() const;\n };\n \n struct RPCResult {"
      },
      {
        "sha": "ec49efcf2246932a770537f5d088324f28d473ce",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -116,9 +116,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n                 {\n-                    {\"privkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The private key (see dumpprivkey)\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key (see dumpprivkey)\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -286,10 +286,10 @@ UniValue importaddress(const JSONRPCRequest& request)\n             \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n             \"as change, and not show up in many RPCs.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The Bitcoin address (or hex-encoded script)\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n-                    {\"p2sh\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Add the P2SH version of the script as well\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The Bitcoin address (or hex-encoded script)\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"p2sh\", RPCArg::Type::BOOL, /* default */ \"false\", \"Add the P2SH version of the script as well\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -364,8 +364,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n             RPCHelpMan{\"importprunedfunds\",\n                 \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\",\n                 {\n-                    {\"rawtransaction\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A raw transaction in hex funding an already-existing address in wallet\"},\n-                    {\"txoutproof\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex output from gettxoutproof that contains the transaction\"},\n+                    {\"rawtransaction\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A raw transaction in hex funding an already-existing address in wallet\"},\n+                    {\"txoutproof\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex output from gettxoutproof that contains the transaction\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\"\"},\n@@ -431,7 +431,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             RPCHelpMan{\"removeprunedfunds\",\n                 \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex-encoded id of the transaction you are deleting\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded id of the transaction you are deleting\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -475,9 +475,9 @@ UniValue importpubkey(const JSONRPCRequest& request)\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\",\n                 {\n-                    {\"pubkey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The hex-encoded public key\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\\\"\\\"\", \"An optional label\"},\n-                    {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Rescan the wallet for transactions\"},\n+                    {\"pubkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The hex-encoded public key\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n+                    {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -548,7 +548,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"importwallet\",\n                 \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet file\"},\n+                    {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet file\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -709,7 +709,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                 \"\\nReveals the private key corresponding to 'address'.\\n\"\n                 \"Then the importprivkey can be used with this output\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for the private key\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for the private key\"},\n                 },\n                 RPCResult{\n             \"\\\"key\\\"                (string) The private key\\n\"\n@@ -759,7 +759,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n                 \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The filename with path (either absolute or relative to bitcoind)\"},\n+                    {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The filename with path (either absolute or relative to bitcoind)\"},\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n@@ -1319,50 +1319,50 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\",\n                 {\n-                    {\"requests\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"Data to be imported\",\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"desc\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Descriptor to import. If using descriptor, do not also provide address/scriptPubKey, scripts, or pubkeys\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Descriptor to import. If using descriptor, do not also provide address/scriptPubKey, scripts, or pubkeys\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n                                         /* oneline_description */ \"\", {\"\\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }\", \"string / json\"}\n                                     },\n-                                    {\"timestamp\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n         \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n         \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n         \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n         \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n         \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\",\n                                         /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n                                     },\n-                                    {\"redeemscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"omitted\", \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n-                                    {\"witnessscript\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"omitted\", \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n-                                    {\"pubkeys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"Array of strings giving pubkeys to import. They must occur in P2PKH or P2WPKH scripts. They are not required when the private key is also provided (see the \\\"keys\\\" argument).\",\n+                                    {\"redeemscript\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\"},\n+                                    {\"witnessscript\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\"},\n+                                    {\"pubkeys\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Array of strings giving pubkeys to import. They must occur in P2PKH or P2WPKH scripts. They are not required when the private key is also provided (see the \\\"keys\\\" argument).\",\n                                         {\n-                                            {\"pubKey\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n+                                            {\"pubKey\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"keys\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"Array of strings giving private keys to import. The corresponding public keys must occur in the output or redeemscript.\",\n+                                    {\"keys\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Array of strings giving private keys to import. The corresponding public keys must occur in the output or redeemscript.\",\n                                         {\n-                                            {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"\"},\n+                                            {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"range\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n+                                    {\"range\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n                                         {\n-                                            {\"start\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Start of the range to import\"},\n-                                            {\"end\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"End of the range to import (inclusive)\"},\n+                                            {\"start\", RPCArg::Type::NUM, /* default */ \"0\", \"Start of the range to import\"},\n+                                            {\"end\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"End of the range to import (inclusive)\"},\n                                         }\n                                     },\n-                                    {\"internal\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n-                                    {\"watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n-                                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n+                                    {\"watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n+                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n                                 },\n                             },\n                         },\n                         \"\\\"requests\\\"\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"rescan\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n+                            {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Stating if should rescan the blockchain after all imports\"},\n                         },\n                         \"\\\"options\\\"\"},\n                 },"
      },
      {
        "sha": "e836f507927173c47950b06b1867aba0282c1051",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 149,
        "deletions": 149,
        "changes": 298,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d1160e42185983b398cbc2e2be379002f4a62e9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d1160e42185983b398cbc2e2be379002f4a62e9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0d1160e42185983b398cbc2e2be379002f4a62e9",
        "patch": "@@ -158,8 +158,8 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 \"If 'label' is specified, it is added to the address book \\n\"\n                 \"so payments received with the address will be associated with 'label'.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"The label name for the address to be linked to. If not provided, the default label \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"The label name for the address to be linked to. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n@@ -226,7 +226,7 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n                 {\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"\\\"address\\\"    (string) The address\\n\"\n@@ -287,8 +287,8 @@ static UniValue setlabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"setlabel\",\n                 \"\\nSets the label associated with the given address.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to be associated with a label.\"},\n-                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label to assign to the address.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to be associated with a label.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label to assign to the address.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -371,18 +371,18 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n                 \"\\nSend an amount to a given address.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to send to.\"},\n-                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n-                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment used to store what the transaction is for.\\n\"\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to send to.\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment used to store what the transaction is for.\\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\"},\n-                    {\"comment_to\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment to store the name of the person or organization\\n\"\n+                    {\"comment_to\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment to store the name of the person or organization\\n\"\n             \"                             to which you're sending the transaction. This is not part of the \\n\"\n             \"                             transaction, just kept in your wallet.\"},\n-                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n+                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, /* default */ \"false\", \"The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n@@ -527,8 +527,8 @@ static UniValue signmessage(const JSONRPCRequest& request)\n                 \"\\nSign a message with the private key of an address\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to use for the private key.\"},\n-                    {\"message\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The message to create a signature of.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to use for the private key.\"},\n+                    {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message to create a signature of.\"},\n                 },\n                 RPCResult{\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n@@ -593,8 +593,8 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"getreceivedbyaddress\",\n                 \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address for transactions.\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for transactions.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n@@ -665,8 +665,8 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"getreceivedbylabel\",\n                 \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The selected label, may be the default label using \\\"\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The selected label, may be the default label using \\\"\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only include transactions confirmed at least this many times.\"},\n                 },\n                 RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this label.\\n\"\n@@ -737,9 +737,9 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n                 \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n+                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"0\", \"Only include transactions confirmed at least this many times.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also include balance in watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\\n\"\n@@ -823,25 +823,25 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                 \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"dummy\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n-                    {\"amounts\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"A json object with addresses and amounts\",\n+                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n+                    {\"amounts\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"A json object with addresses and amounts\",\n                         {\n-                            {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n                         },\n                     },\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Only use the balance confirmed at least this many times.\"},\n-                    {\"comment\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A comment\"},\n-                    {\"subtractfeefrom\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array with addresses.\\n\"\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only use the balance confirmed at least this many times.\"},\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment\"},\n+                    {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array with addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n             \"                           If no addresses are specified here, the sender pays the fee.\",\n                         {\n-                            {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"Subtract fee from this address\"},\n+                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Subtract fee from this address\"},\n                         },\n                     },\n-                    {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\"},\n@@ -983,14 +983,14 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                 \"See `importaddress` for watchonly p2sh address support.\\n\"\n                 \"If 'label' is specified, assign address to that label.\\n\",\n                 {\n-                    {\"nrequired\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The number of required signatures out of the n keys or addresses.\"},\n-                    {\"keys\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of bitcoin addresses or hex-encoded public keys\",\n+                    {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys or addresses.\"},\n+                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of bitcoin addresses or hex-encoded public keys\",\n                         {\n-                            {\"key\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"bitcoin address or hex-encoded public key\"},\n+                            {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address or hex-encoded public key\"},\n                         },\n                         },\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"A label to assign the addresses to.\"},\n-                    {\"address_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A label to assign the addresses to.\"},\n+                    {\"address_type\", RPCArg::Type::STR, /* default */ \"set by -addresstype\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1217,10 +1217,10 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             RPCHelpMan{\"listreceivedbyaddress\",\n                 \"\\nList balances by receiving address.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n-                    {\"address_filter\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If present, only return information on this address.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include addresses that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n+                    {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If present, only return information on this address.\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1270,9 +1270,9 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"listreceivedbylabel\",\n                 \"\\nList received transactions by label.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include labels that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses (see 'importaddress').\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1411,11 +1411,11 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If set, should be a valid label name to return only incoming transactions\\n\"\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, should be a valid label name to return only incoming transactions\\n\"\n             \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n-                    {\"count\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"10\", \"The number of transactions to return\"},\n-                    {\"skip\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"The number of transactions to skip\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"count\", RPCArg::Type::NUM, /* default */ \"10\", \"The number of transactions to return\"},\n+                    {\"skip\", RPCArg::Type::NUM, /* default */ \"0\", \"The number of transactions to skip\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n                 },\n                 RPCResult{\n             \"[\\n\"\n@@ -1546,10 +1546,10 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                 \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n                 \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n                 {\n-                    {\"blockhash\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n-                    {\"target_confirmations\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n-                    {\"include_removed\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n+                    {\"blockhash\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n+                    {\"target_confirmations\", RPCArg::Type::NUM, /* default */ \"1\", \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"include_removed\", RPCArg::Type::BOOL, /* default */ \"true\", \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n             \"                                                           (not guaranteed to work on pruned nodes)\"},\n                 },\n                 RPCResult{\n@@ -1689,8 +1689,8 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettransaction\",\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n+                    {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to include watch-only addresses in balance calculation and details[]\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1795,7 +1795,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n                 \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n                 \"It has no effect on transactions which are already abandoned.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1839,7 +1839,7 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"backupwallet\",\n                 \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n                 {\n-                    {\"destination\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The destination directory or file\"},\n+                    {\"destination\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The destination directory or file\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1879,7 +1879,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                 \"\\nFills the keypool.\"+\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"newsize\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"100\", \"The new keypool size\"},\n+                    {\"newsize\", RPCArg::Type::NUM, /* default */ \"100\", \"The new keypool size\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -1932,8 +1932,8 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n             \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n             \"time that overrides the old one.\\n\",\n                 {\n-                    {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet passphrase\"},\n-                    {\"timeout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\"},\n+                    {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet passphrase\"},\n+                    {\"timeout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2015,8 +2015,8 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n             RPCHelpMan{\"walletpassphrasechange\",\n                 \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\",\n                 {\n-                    {\"oldpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The current passphrase\"},\n-                    {\"newpassphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The new passphrase\"},\n+                    {\"oldpassphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The current passphrase\"},\n+                    {\"newpassphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The new passphrase\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2117,7 +2117,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n                 \"Use the walletpassphrase call for this, and then walletlock call.\\n\"\n                 \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\",\n                 {\n-                    {\"passphrase\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\"},\n+                    {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2179,13 +2179,13 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                 \"is always cleared (by virtue of process exit) when a node stops or fails.\\n\"\n                 \"Also see the listunspent call\\n\",\n                 {\n-                    {\"unlock\", RPCArg::Type::BOOL, /* opt */ false, /* default_val */ \"\", \"Whether to unlock (true) or lock (false) the specified transactions\"},\n-                    {\"transactions\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of objects. Each object the txid (string) vout (numeric).\",\n+                    {\"unlock\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"Whether to unlock (true) or lock (false) the specified transactions\"},\n+                    {\"transactions\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of objects. Each object the txid (string) vout (numeric).\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                 },\n                             },\n                         },\n@@ -2359,7 +2359,7 @@ static UniValue settxfee(const JSONRPCRequest& request)\n             RPCHelpMan{\"settxfee\",\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\",\n                 {\n-                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kB\"},\n                 },\n                 RPCResult{\n             \"true|false        (boolean) Returns true if successful\\n\"\n@@ -2540,7 +2540,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n                 \"\\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\\n\",\n                 {\n-                    {\"filename\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The wallet directory or .dat file.\"},\n+                    {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -2584,9 +2584,9 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"createwallet\",\n                 \"\\nCreates and loads a new wallet.\\n\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n-                    {\"disable_private_keys\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n-                    {\"blank\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n+                    {\"wallet_name\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n+                    {\"disable_private_keys\", RPCArg::Type::BOOL, /* default */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n+                    {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -2645,7 +2645,7 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                 \"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\\n\"\n                 \"Specifying the wallet name on a wallet endpoint is invalid.\",\n                 {\n-                    {\"wallet_name\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n+                    {\"wallet_name\", RPCArg::Type::STR, /* default */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -2740,21 +2740,21 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n                 \"Optionally filter to only include txouts paid to specified addresses.\\n\",\n                 {\n-                    {\"minconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1\", \"The minimum confirmations to filter\"},\n-                    {\"maxconf\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"9999999\", \"The maximum confirmations to filter\"},\n-                    {\"addresses\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of bitcoin addresses to filter\",\n+                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"The minimum confirmations to filter\"},\n+                    {\"maxconf\", RPCArg::Type::NUM, /* default */ \"9999999\", \"The maximum confirmations to filter\"},\n+                    {\"addresses\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of bitcoin addresses to filter\",\n                         {\n-                            {\"address\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"\", \"bitcoin address\"},\n+                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address\"},\n                         },\n                     },\n-                    {\"include_unsafe\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Include outputs that are not safe to spend\\n\"\n+                    {\"include_unsafe\", RPCArg::Type::BOOL, /* default */ \"true\", \"Include outputs that are not safe to spend\\n\"\n             \"                  See description of \\\"safe\\\" attribute below.\"},\n-                    {\"query_options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"JSON with query options\",\n+                    {\"query_options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"JSON with query options\",\n                         {\n-                            {\"minimumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumCount\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"unlimited\", \"Maximum number of UTXOs\"},\n-                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"unlimited\", \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n+                            {\"minimumAmount\", RPCArg::Type::AMOUNT, /* default */ \"0\", \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumAmount\", RPCArg::Type::AMOUNT, /* default */ \"unlimited\", \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumCount\", RPCArg::Type::NUM, /* default */ \"unlimited\", \"Maximum number of UTXOs\"},\n+                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, /* default */ \"unlimited\", \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n                         },\n                         \"query_options\"},\n                 },\n@@ -3042,33 +3042,33 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 \"You can see whether this is the case by checking the \\\"solvable\\\" field in the listunspent output.\\n\"\n                 \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The hex string of the raw transaction\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n                         {\n-                            {\"changeAddress\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of integers.\\n\"\n+                            {\"changeAddress\", RPCArg::Type::STR, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n                                 {\n-                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The zero-based output index, before a change output is added.\"},\n+                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"fallback to wallet's default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding\"},\n                 },\n                 RPCResult{\n@@ -3129,21 +3129,21 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                 \"this transaction depends on but may not yet be in the block chain.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"hexstring\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction hex string\"},\n-                    {\"prevtxs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"null\", \"A json array of previous dependent transaction outputs\",\n+                    {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array of previous dependent transaction outputs\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"omitted\", \"(required for P2SH or P2WSH)\"},\n-                                    {\"amount\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"The amount spent\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                             },\n                         },\n                     },\n-                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type. Must be one of\\n\"\n+                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n@@ -3212,22 +3212,22 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n                 \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The txid to be bumped\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"confTarget\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                            {\"totalFee\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+                            {\"confTarget\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n+                            {\"totalFee\", RPCArg::Type::NUM, /* default */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n             \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n             \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n             \"                         the dust threshold.\"},\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether the new transaction should still be\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n             \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n             \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n             \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n             \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n             \"         \\\"UNSET\\\"\\n\"\n             \"         \\\"ECONOMICAL\\\"\\n\"\n             \"         \\\"CONSERVATIVE\\\"\"},\n@@ -3359,8 +3359,8 @@ UniValue generate(const JSONRPCRequest& request)\n             RPCHelpMan{\"generate\",\n                 \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\",\n                 {\n-                    {\"nblocks\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"How many blocks are generated immediately.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"1000000\", \"How many iterations to try.\"},\n+                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n+                    {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n                 },\n                 RPCResult{\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n@@ -3414,8 +3414,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             RPCHelpMan{\"rescanblockchain\",\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\",\n                 {\n-                    {\"start_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"block height where the rescan should start\"},\n-                    {\"stop_height\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /* default */ \"0\", \"block height where the rescan should start\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -3628,7 +3628,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n                 \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n                 \"to be in the wallet.\\n\",\n                 {\n-                    {\"address\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The bitcoin address to get the information of.\"},\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to get the information of.\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -3755,7 +3755,7 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n             RPCHelpMan{\"getaddressesbylabel\",\n                 \"\\nReturns the list of addresses assigned the specified label.\\n\",\n                 {\n-                    {\"label\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The label.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label.\"},\n                 },\n                 RPCResult{\n             \"{ (json object with addresses as keys)\\n\"\n@@ -3803,7 +3803,7 @@ static UniValue listlabels(const JSONRPCRequest& request)\n             RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n-                    {\"purpose\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"null\", \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n+                    {\"purpose\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n                 },\n                 RPCResult{\n             \"[               (json array of string)\\n\"\n@@ -3863,11 +3863,11 @@ UniValue sethdseed(const JSONRPCRequest& request)\n                 \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"newkeypool\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+                    {\"newkeypool\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n             \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n             \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n             \"                             keypool will be used until it has been depleted.\"},\n-                    {\"seed\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n+                    {\"seed\", RPCArg::Type::STR, /* default */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n             \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n                 },\n                 RPCResults{},\n@@ -4008,16 +4008,16 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n                 \"that we can sign for.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n-                    {\"psbt\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The transaction base64 string\"},\n-                    {\"sign\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"true\", \"Also sign the transaction when updating\"},\n-                    {\"sighashtype\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"ALL\", \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction base64 string\"},\n+                    {\"sign\", RPCArg::Type::BOOL, /* default */ \"true\", \"Also sign the transaction when updating\"},\n+                    {\"sighashtype\", RPCArg::Type::STR, /* default */ \"ALL\", \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n             \"       \\\"ALL\\\"\\n\"\n             \"       \\\"NONE\\\"\\n\"\n             \"       \\\"SINGLE\\\"\\n\"\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -4072,61 +4072,61 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"A json array of json objects\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of json objects\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ false, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, /* opt */ false, /* default_val */ \"\", \"The sequence number\"},\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n                                 },\n                             },\n                         },\n                         },\n-                    {\"outputs\", RPCArg::Type::ARR, /* opt */ false, /* default_val */ \"\", \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n                             \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n                             \"                             accepted as second parameter.\",\n                         {\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"address\", RPCArg::Type::AMOUNT, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n                                 },\n                                 },\n-                            {\"\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"\", \"\",\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n-                                    {\"data\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n                                 },\n                             },\n                         },\n                     },\n-                    {\"locktime\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"options\", RPCArg::Type::OBJ, /* opt */ true, /* default_val */ \"null\", \"\",\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n-                            {\"changeAddress\", RPCArg::Type::STR_HEX, /* opt */ true, /* default_val */ \"pool address\", \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"random\", \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Also select inputs which are watch only\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Lock selected unspent outputs\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, /* opt */ true, /* default_val */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* opt */ true, /* default_val */ \"empty array\", \"A json array of integers.\\n\"\n+                            {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n                             \"                              If no outputs are specified here, the sender pays the fee.\",\n                                 {\n-                                    {\"vout_index\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"The zero-based output index, before a change output is added.\"},\n+                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n                                 },\n                             },\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* opt */ true, /* default_val */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, /* opt */ true, /* default_val */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, includes the BIP 32 derivation paths for public keys if we know them\"},\n                 },\n                 RPCResult{\n                             \"{\\n\""
      }
    ]
  },
  {
    "sha": "314784a60f18424b004e935aa6e41b824e9645b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTQ3ODRhNjBmMTg0MjRiMDA0ZTkzNWFhNmU0MWI4MjRlOTY0NWIz",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-15T03:57:18Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-13T01:26:19Z"
      },
      "message": "Make listunspent and signrawtransaction RPCs support witnessScript",
      "tree": {
        "sha": "e303eeb5b9f2836c635d7339528c867ba801ade6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e303eeb5b9f2836c635d7339528c867ba801ade6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/314784a60f18424b004e935aa6e41b824e9645b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314784a60f18424b004e935aa6e41b824e9645b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/314784a60f18424b004e935aa6e41b824e9645b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314784a60f18424b004e935aa6e41b824e9645b3/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d1160e42185983b398cbc2e2be379002f4a62e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d1160e42185983b398cbc2e2be379002f4a62e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d1160e42185983b398cbc2e2be379002f4a62e9"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 42,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1126fa3d2ca4146a8fada53e0ae8f9ad1e52f21c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/314784a60f18424b004e935aa6e41b824e9645b3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/314784a60f18424b004e935aa6e41b824e9645b3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=314784a60f18424b004e935aa6e41b824e9645b3",
        "patch": "@@ -856,15 +856,25 @@ UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, con\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"redeemScript\", UniValueType(UniValue::VSTR)},\n-                    });\n-                UniValue v = find_value(prevOut, \"redeemScript\");\n-                if (!v.isNull()) {\n-                    std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n+                        {\"witnessScript\", UniValueType(UniValue::VSTR)},\n+                    }, true);\n+                UniValue rs = find_value(prevOut, \"redeemScript\");\n+                if (!rs.isNull()) {\n+                    std::vector<unsigned char> rsData(ParseHexV(rs, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n                     keystore->AddCScript(redeemScript);\n                     // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    // This is only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n                     keystore->AddCScript(GetScriptForWitness(redeemScript));\n                 }\n+                UniValue ws = find_value(prevOut, \"witnessScript\");\n+                if (!ws.isNull()) {\n+                    std::vector<unsigned char> wsData(ParseHexV(ws, \"witnessScript\"));\n+                    CScript witnessScript(wsData.begin(), wsData.end());\n+                    keystore->AddCScript(witnessScript);\n+                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    keystore->AddCScript(GetScriptForWitness(witnessScript));\n+                }\n             }\n         }\n     }\n@@ -949,7 +959,8 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                     {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH) redeem script\"},\n+                                    {\"witnessScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2WSH or P2SH-P2WSH) witness script\"},\n                                     {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                                 },"
      },
      {
        "sha": "ac752252e72df162cd2a33d4f8da972e6de32ee3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/314784a60f18424b004e935aa6e41b824e9645b3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/314784a60f18424b004e935aa6e41b824e9645b3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=314784a60f18424b004e935aa6e41b824e9645b3",
        "patch": "@@ -2768,7 +2768,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n-            \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n+            \"    \\\"redeemScript\\\" : \\\"script\\\" (string) The redeemScript if scriptPubKey is P2SH\"\n+            \"    \\\"witnessScript\\\" : \\\"script\\\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n             \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n             \"    \\\"desc\\\" : xxx,             (string, only when solvable) A descriptor for spending this output\\n\"\n@@ -2882,6 +2883,28 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n                     entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n+                    // Now check if the redeemScript is actually a P2WSH script\n+                    CTxDestination witness_destination;\n+                    if (redeemScript.IsPayToWitnessScriptHash()) {\n+                        bool extracted = ExtractDestination(redeemScript, witness_destination);\n+                        assert(extracted);\n+                        // Also return the witness script\n+                        const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n+                        CScriptID id;\n+                        CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                        CScript witnessScript;\n+                        if (pwallet->GetCScript(id, witnessScript)) {\n+                            entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                        }\n+                    }\n+                }\n+            } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+                const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n+                CScriptID id;\n+                CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                CScript witnessScript;\n+                if (pwallet->GetCScript(id, witnessScript)) {\n+                    entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n                 }\n             }\n         }\n@@ -3137,7 +3160,8 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                     {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH) redeem script\"},\n+                                    {\"witnessScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2WSH or P2SH-P2WSH) witness script\"},\n                                     {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                             },"
      }
    ]
  },
  {
    "sha": "928beae007fc2f951e79ea307a5e983af4cb3acf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjhiZWFlMDA3ZmMyZjk1MWU3OWVhMzA3YTVlOTgzYWY0Y2IzYWNm",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-15T04:19:06Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-13T01:35:16Z"
      },
      "message": "Add test for P2SH-P2WSH in signrawtransactionwithkey and listunspent",
      "tree": {
        "sha": "30898d6596e4265bee0487e1f51defe4f4324ec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30898d6596e4265bee0487e1f51defe4f4324ec2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/928beae007fc2f951e79ea307a5e983af4cb3acf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928beae007fc2f951e79ea307a5e983af4cb3acf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/928beae007fc2f951e79ea307a5e983af4cb3acf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928beae007fc2f951e79ea307a5e983af4cb3acf/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "314784a60f18424b004e935aa6e41b824e9645b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314784a60f18424b004e935aa6e41b824e9645b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/314784a60f18424b004e935aa6e41b824e9645b3"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 30,
      "deletions": 3
    },
    "files": [
      {
        "sha": "56e2c73a90fce7e0aad57020f33eb410faca5f71",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928beae007fc2f951e79ea307a5e983af4cb3acf/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928beae007fc2f951e79ea307a5e983af4cb3acf/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=928beae007fc2f951e79ea307a5e983af4cb3acf",
        "patch": "@@ -5,14 +5,17 @@\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, hex_str_to_bytes\n+from test_framework.messages import sha256\n+from test_framework.script import CScript, OP_0\n \n+from decimal import Decimal\n \n class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n-        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -143,9 +146,33 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+    def witness_script_test(self):\n+        # Now test signing transaction to P2SH-P2WSH addresses without wallet\n+        # Create a new P2SH-P2WSH 1-of-1 multisig address:\n+        embedded_address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())\n+        embedded_privkey = self.nodes[1].dumpprivkey(embedded_address[\"address\"])\n+        p2sh_p2wsh_address = self.nodes[1].addmultisigaddress(1, [embedded_address[\"pubkey\"]], \"\", \"p2sh-segwit\")\n+        # send transaction to P2SH-P2WSH 1-of-1 multisig address\n+        self.nodes[0].generate(101)\n+        self.nodes[0].sendtoaddress(p2sh_p2wsh_address[\"address\"], 49.999)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        # Find the UTXO for the transaction node[1] should have received, check witnessScript matches\n+        unspent_output = self.nodes[1].listunspent(0, 999999, [p2sh_p2wsh_address[\"address\"]])[0]\n+        assert_equal(unspent_output[\"witnessScript\"], p2sh_p2wsh_address[\"redeemScript\"])\n+        p2sh_redeemScript = CScript([OP_0, sha256(hex_str_to_bytes(p2sh_p2wsh_address[\"redeemScript\"]))])\n+        assert_equal(unspent_output[\"redeemScript\"], bytes_to_hex_str(p2sh_redeemScript))\n+        # Now create and sign a transaction spending that output on node[0], which doesn't know the scripts or keys\n+        spending_tx = self.nodes[0].createrawtransaction([unspent_output], {self.nodes[1].getnewaddress(): Decimal(\"49.998\")})\n+        spending_tx_signed = self.nodes[0].signrawtransactionwithkey(spending_tx, [embedded_privkey], [unspent_output])\n+        # Check the signing completed successfully\n+        assert 'complete' in spending_tx_signed\n+        assert_equal(spending_tx_signed['complete'], True)\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()\n+        self.witness_script_test()\n         self.test_with_lock_outputs()\n \n "
      }
    ]
  },
  {
    "sha": "6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2E4MzZhYjNhYmVmNWE5MGRmMGMzYzRlNDk4M2YzMjhiMWFmZTAw",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-15T05:54:37Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-13T01:35:16Z"
      },
      "message": "Add release note for listunspent P2WSH change",
      "tree": {
        "sha": "cf777ab4d0e55386a6776fb08574f97df0697804",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf777ab4d0e55386a6776fb08574f97df0697804"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ca836ab3abef5a90df0c3c4e4983f328b1afe00/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "928beae007fc2f951e79ea307a5e983af4cb3acf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928beae007fc2f951e79ea307a5e983af4cb3acf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/928beae007fc2f951e79ea307a5e983af4cb3acf"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ea8fc3c34ed2a979d8f1a7feeef6fa6136473132",
        "filename": "doc/release-notes-14481.md",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca836ab3abef5a90df0c3c4e4983f328b1afe00/doc/release-notes-14481.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca836ab3abef5a90df0c3c4e4983f328b1afe00/doc/release-notes-14481.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14481.md?ref=6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
        "patch": "@@ -0,0 +1,9 @@\n+Low-level RPC changes\n+----------------------\n+\n+The `listunspent` RPC has been modified so that it also returns `witnessScript`,\n+the witness script in the case of a P2WSH or P2SH-P2WSH output.\n+\n+The `signrawtransactionwithkey` and `signrawtransactionwithwallet` RPCs have been\n+modified so that they also optionally accept a `witnessScript`, the witness script in the\n+case of a P2WSH or P2SH-P2WSH output. This is compatible with the change to `listunspent`."
      }
    ]
  },
  {
    "sha": "6aaa0abc1241ad26f5895760701e77c9c8e93924",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWFhMGFiYzEyNDFhZDI2ZjU4OTU3NjA3MDFlNzdjOWM4ZTkzOTI0",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-02-13T14:49:36Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-02-13T14:49:36Z"
      },
      "message": "Remove manual byte editing in wallet_tx_clone func test",
      "tree": {
        "sha": "58bbc3b05ad14d58aec97d782a23e8808c4e60df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58bbc3b05ad14d58aec97d782a23e8808c4e60df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6aaa0abc1241ad26f5895760701e77c9c8e93924",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aaa0abc1241ad26f5895760701e77c9c8e93924",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6aaa0abc1241ad26f5895760701e77c9c8e93924",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aaa0abc1241ad26f5895760701e77c9c8e93924/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d1160e42185983b398cbc2e2be379002f4a62e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d1160e42185983b398cbc2e2be379002f4a62e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d1160e42185983b398cbc2e2be379002f4a62e9"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "2f927502ff7859dcd1514961c64b9d7e5c12ac06",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aaa0abc1241ad26f5895760701e77c9c8e93924/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aaa0abc1241ad26f5895760701e77c9c8e93924/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=6aaa0abc1241ad26f5895760701e77c9c8e93924",
        "patch": "@@ -4,13 +4,15 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet accounts properly when there are cloned transactions with malleated scriptsigs.\"\"\"\n \n+import io\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     connect_nodes,\n     disconnect_nodes,\n     sync_blocks,\n )\n+from test_framework.messages import CTransaction, COIN\n \n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -72,19 +74,14 @@ def run_test(self):\n         clone_raw = self.nodes[0].createrawtransaction(clone_inputs, clone_outputs, clone_locktime)\n \n         # createrawtransaction randomizes the order of its outputs, so swap them if necessary.\n-        # output 0 is at version+#inputs+input+sigstub+sequence+#outputs\n-        # 40 BTC serialized is 00286bee00000000\n-        pos0 = 2 * (4 + 1 + 36 + 1 + 4 + 1)\n-        hex40 = \"00286bee00000000\"\n-        output_len = 16 + 2 + 2 * int(\"0x\" + clone_raw[pos0 + 16:pos0 + 16 + 2], 0)\n-        if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_raw[pos0:pos0 + 16] != hex40 or rawtx1[\"vout\"][0][\"value\"] != 40 and clone_raw[pos0:pos0 + 16] == hex40):\n-            output0 = clone_raw[pos0:pos0 + output_len]\n-            output1 = clone_raw[pos0 + output_len:pos0 + 2 * output_len]\n-            clone_raw = clone_raw[:pos0] + output1 + output0 + clone_raw[pos0 + 2 * output_len:]\n+        clone_tx = CTransaction()\n+        clone_tx.deserialize(io.BytesIO(bytes.fromhex(clone_raw)))\n+        if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_tx.vout[0].nValue != 40*COIN or rawtx1[\"vout\"][0][\"value\"] != 40 and clone_tx.vout[0].nValue == 40*COIN):\n+            (clone_tx.vout[0], clone_tx.vout[1]) = (clone_tx.vout[1], clone_tx.vout[0])\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_raw, None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_tx.serialize().hex(), None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      }
    ]
  },
  {
    "sha": "cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmU3ZWZlOWVhNmMxNGEzNjQ5ZDNlMTBmNWYxOGQyMDk3ZWJlZjc0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-13T16:06:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-13T16:09:32Z"
      },
      "message": "Merge #15389: Remove unnecessary const_cast\n\n5039e4b61beb937bad33ac4300cc784642782589 Remove unnecessary const_cast (Julian Fleischer)\n\nPull request description:\n\n  The const_cast\n\n  ```C++\n  CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n  ```\n\n  is not necessary as all the functions invoked form this block receive a `const CBlock&` anyway. Simply add the `const` to `block`:\n\n  ```C++\n  const CBlock& block = chainparams.GenesisBlock();\n  ```\n\n  Casting away `const`, especially from something as precious as the genesis block, feels really weird to me as a reader of bitcoin-core source code.\n\nTree-SHA512: 0290b2cabb216a60655ded153ed1f213c051fb216cec6f3f810f8b760e276f8def86eb696c492e89631682531e215f56d7897b59685d3aa787bcd80cc4f86c90",
      "tree": {
        "sha": "d9410e394aa67732a3ec74d8127d1408bde95152",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9410e394aa67732a3ec74d8127d1408bde95152"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxkQTwACgkQHkrtYphs\n0l2aKwgApIQAb9As4yB5g3HwLhhuZ/9uE1oGeVoSXXvxtzvVn4uxfzFSOn7p1hLY\nNIp0Kb8fL2I8FFrbMpkeraIMG1zwztvMxTKG7vCyZxTmXL8BICQokuvRm27tVWc9\n5K3E/bizBQ7yMadjBvRff/MUvM2xIssqFR+495VZKKIkHRMdPW+xgOi9vHFjhg3o\nZFNTlKEhDZMmOmR/4j2SgHAODXPnRp3PrAeKJJohMID5LN5E+INK10ZEogWRmfrZ\nvqXb2fdsLklTGL4vNT1rF3PXaTmboS6uu3b/pTI8H1ZAE0W5bTWDZN0x77/ZxrQK\n/Sxhz5p/7kDsvv5wKEUeHH02awg16w==\n=OJh2\n-----END PGP SIGNATURE-----",
        "payload": "tree d9410e394aa67732a3ec74d8127d1408bde95152\nparent 0d1160e42185983b398cbc2e2be379002f4a62e9\nparent 5039e4b61beb937bad33ac4300cc784642782589\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550074017 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550074172 +0100\n\nMerge #15389: Remove unnecessary const_cast\n\n5039e4b61beb937bad33ac4300cc784642782589 Remove unnecessary const_cast (Julian Fleischer)\n\nPull request description:\n\n  The const_cast\n\n  ```C++\n  CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n  ```\n\n  is not necessary as all the functions invoked form this block receive a `const CBlock&` anyway. Simply add the `const` to `block`:\n\n  ```C++\n  const CBlock& block = chainparams.GenesisBlock();\n  ```\n\n  Casting away `const`, especially from something as precious as the genesis block, feels really weird to me as a reader of bitcoin-core source code.\n\nTree-SHA512: 0290b2cabb216a60655ded153ed1f213c051fb216cec6f3f810f8b760e276f8def86eb696c492e89631682531e215f56d7897b59685d3aa787bcd80cc4f86c90\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d1160e42185983b398cbc2e2be379002f4a62e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d1160e42185983b398cbc2e2be379002f4a62e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d1160e42185983b398cbc2e2be379002f4a62e9"
      },
      {
        "sha": "5039e4b61beb937bad33ac4300cc784642782589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5039e4b61beb937bad33ac4300cc784642782589",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5039e4b61beb937bad33ac4300cc784642782589"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1806bc12683b8b537b45b4ef623a869dbe9437b4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74",
        "patch": "@@ -4347,7 +4347,7 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n         return true;\n \n     try {\n-        CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n+        const CBlock& block = chainparams.GenesisBlock();\n         CDiskBlockPos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n         if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);"
      }
    ]
  },
  {
    "sha": "fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJjZmE1ZjBjZmUyNDg0ZmU1Y2Y1Y2VkN2NiYWUzNGEzNWM0N2M5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T16:49:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T16:46:36Z"
      },
      "message": "fuzz: Move deserialize tests to test/fuzz/deserialize.cpp",
      "tree": {
        "sha": "4e6bf4d248686db84203172532d353dd7721a553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e6bf4d248686db84203172532d353dd7721a553"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZEnsAAoJEM4rdWl+aaVIaS4L/RM8mhH5zht1WOpiw/+V6rPf\nZf4Ra4KxQMBSqnBIYSZvsjdIQxEVyPHgR8G/b3W3E3gISmghZ7fPPwGUFDieDFC5\nXv3RXlujLfX/zwRLy8RlUVkFXqMwjg3yz6dQKJVU4dX/RlGyTZKz5AHkzYe8E+3t\n83JfkbKIoJHIM8J3En9poOHX5v7Ex54B5BXdXUvKM7NMS5av0KOkQn0RsHduWx1e\nGt4P4tRixvQQPdK+4hlde3Bb988xPJPNpThkx34MGLz5Yjfv2SENSzl2KYW12CJR\ntkwyP3naflmnJj+Kc9RSpSJq8dXKCnKdTnoIhpxpwQ11MQIftmpsWCLcBLLh4Ec8\nigHQ0LbstM3GZKvZj8inT05uVv6RLyZVCvnhmtyjGna8g11hisqD7vLjiDOp5FWe\nZHrjQTc5yvDlgCZOrSbR6DxftaBy4DvBPL4Rk5ZdI8EIxXfiNdAxHDXZe1w2EgLv\nQa8REPIS7p66i55GlFxRPVjiifLNdLeA47sGrL54LA==\n=8J1P\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e6bf4d248686db84203172532d353dd7721a553\nparent d73918447faf168670b5dfdd55f6c19ed6dd8632\nauthor MarcoFalke <falke.marco@gmail.com> 1550076540 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550076396 -0500\n\nfuzz: Move deserialize tests to test/fuzz/deserialize.cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d73918447faf168670b5dfdd55f6c19ed6dd8632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73918447faf168670b5dfdd55f6c19ed6dd8632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d73918447faf168670b5dfdd55f6c19ed6dd8632"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "f7007050f2289ad173a2bcadf1692189e5a09d01",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9",
        "patch": "@@ -171,7 +171,7 @@ test_test_bitcoin_LDADD += $(ZMQ_LIBS)\n endif\n \n if ENABLE_FUZZ\n-test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_DESERIALIZE=1\n test_fuzz_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -188,7 +188,7 @@ test_fuzz_block_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_block_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTRANSACTION_DESERIALIZE=1\n test_fuzz_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -205,7 +205,7 @@ test_fuzz_transaction_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_transaction_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blocklocator_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blocklocator_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blocklocator_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKLOCATOR_DESERIALIZE=1\n test_fuzz_blocklocator_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blocklocator_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -222,7 +222,7 @@ test_fuzz_blocklocator_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blocklocator_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blockmerkleroot_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blockmerkleroot_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blockmerkleroot_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKMERKLEROOT=1\n test_fuzz_blockmerkleroot_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blockmerkleroot_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -239,7 +239,7 @@ test_fuzz_blockmerkleroot_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blockmerkleroot_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_addrman_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_addrman_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_addrman_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRMAN_DESERIALIZE=1\n test_fuzz_addrman_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_addrman_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -256,7 +256,7 @@ test_fuzz_addrman_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_addrman_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blockheader_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blockheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blockheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKHEADER_DESERIALIZE=1\n test_fuzz_blockheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blockheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -273,7 +273,7 @@ test_fuzz_blockheader_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blockheader_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_banentry_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_banentry_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_banentry_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBANENTRY_DESERIALIZE=1\n test_fuzz_banentry_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_banentry_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -290,7 +290,7 @@ test_fuzz_banentry_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_banentry_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_txundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXUNDO_DESERIALIZE=1\n test_fuzz_txundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_txundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -307,7 +307,7 @@ test_fuzz_txundo_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_txundo_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blockundo_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blockundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blockundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKUNDO_DESERIALIZE=1\n test_fuzz_blockundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blockundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -324,7 +324,7 @@ test_fuzz_blockundo_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blockundo_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_coins_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_coins_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_coins_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DCOINS_DESERIALIZE=1\n test_fuzz_coins_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_coins_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -341,7 +341,7 @@ test_fuzz_coins_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_coins_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_netaddr_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DNETADDR_DESERIALIZE=1\n test_fuzz_netaddr_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_netaddr_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -358,7 +358,7 @@ test_fuzz_netaddr_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_netaddr_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_service_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -375,7 +375,7 @@ test_fuzz_service_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_service_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_messageheader_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_messageheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_messageheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGEHEADER_DESERIALIZE=1\n test_fuzz_messageheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_messageheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -392,7 +392,7 @@ test_fuzz_messageheader_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_messageheader_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_address_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_address_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_address_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRESS_DESERIALIZE=1\n test_fuzz_address_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -409,7 +409,7 @@ test_fuzz_address_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_address_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_inv_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DINV_DESERIALIZE=1\n test_fuzz_inv_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_inv_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -426,7 +426,7 @@ test_fuzz_inv_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_inv_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_bloomfilter_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_bloomfilter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_bloomfilter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOOMFILTER_DESERIALIZE=1\n test_fuzz_bloomfilter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_bloomfilter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -443,7 +443,7 @@ test_fuzz_bloomfilter_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_bloomfilter_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_diskblockindex_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_diskblockindex_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_diskblockindex_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DDISKBLOCKINDEX_DESERIALIZE=1\n test_fuzz_diskblockindex_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_diskblockindex_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -460,7 +460,7 @@ test_fuzz_diskblockindex_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_diskblockindex_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_txoutcompressor_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -477,7 +477,7 @@ test_fuzz_txoutcompressor_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_txoutcompressor_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blocktransactions_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blocktransactions_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blocktransactions_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONS_DESERIALIZE=1\n test_fuzz_blocktransactions_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blocktransactions_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -494,7 +494,7 @@ test_fuzz_blocktransactions_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blocktransactions_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blocktransactionsrequest_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blocktransactionsrequest_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blocktransactionsrequest_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONSREQUEST_DESERIALIZE=1\n test_fuzz_blocktransactionsrequest_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blocktransactionsrequest_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "859fba0bdc19dfb0024bd16e02091c4419d753ed",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9",
        "previous_filename": "src/test/test_bitcoin_fuzzy.cpp"
      }
    ]
  },
  {
    "sha": "fab15ff70e8db26942db83a9aab7ebf974e8b6b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIxNWZmNzBlOGRiMjY5NDJkYjgzYTlhYWI3ZWJmOTc0ZThiNmIy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T19:25:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T19:53:57Z"
      },
      "message": "fuzz: Script validation flags",
      "tree": {
        "sha": "d53a64bc8bc3a0e3db277d5d724489047a39bde6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d53a64bc8bc3a0e3db277d5d724489047a39bde6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab15ff70e8db26942db83a9aab7ebf974e8b6b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZHXVAAoJEM4rdWl+aaVIkW8MAKFuFJwLBfR3AVaCw4pnIpp9\nyHGXBHVr3Yzk1lShikTTwPsobju1CDaSufKcGCiSP+IC+I+z/RAWoleOdUn5JigC\n8wA95PI42zC0JyGkfwknP1u0AYC/yW9zub61qx6ivfqOregr1noGDJIFaE3ST2Q+\nMM3x1vTsxw2Q4HCkmhK2PAL/1AI3hcfFaIryHqEikufnHWMWWoTtRbgX47RKlMmO\nPSRV2aImwNOtMCTp2rjXIiG/cGhb80sF425FrkId5MGhb771XyoL1KJ1+8ZAMzyg\nNWwyxLoxIYvWKBTr07huxHEmVTBW86gFQ+47jqsCv9bc+CgMzJF0qQOQHHy1v8WJ\n0AOiVrwIRasNVAMC9/n54v0MWXXBx3MplAoqU8+75RYbtgBwccz7zgVUqKXtKprf\nPpLAhugh32w/J2zqrHav4/5qwE2ZGjTQhad42XxlfXrATf2mIlDrkyUrFddBRQdw\nLRdeh/LrOv3/O3361Jcv8K0wNf9hLb7xWMLNY2jFhg==\n=0Hxq\n-----END PGP SIGNATURE-----",
        "payload": "tree d53a64bc8bc3a0e3db277d5d724489047a39bde6\nparent fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9\nauthor MarcoFalke <falke.marco@gmail.com> 1550085949 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550087637 -0500\n\nfuzz: Script validation flags\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab15ff70e8db26942db83a9aab7ebf974e8b6b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab15ff70e8db26942db83a9aab7ebf974e8b6b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab15ff70e8db26942db83a9aab7ebf974e8b6b2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fabcfa5f0cfe2484fe5cf5ced7cbae34a35c47c9"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 90,
      "deletions": 0
    },
    "files": [
      {
        "sha": "be6633e3d3975d97e88727a93e027b6d6ebff83c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab15ff70e8db26942db83a9aab7ebf974e8b6b2/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab15ff70e8db26942db83a9aab7ebf974e8b6b2/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fab15ff70e8db26942db83a9aab7ebf974e8b6b2",
        "patch": "@@ -21,6 +21,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/inv_deserialize \\\n   test/fuzz/messageheader_deserialize \\\n   test/fuzz/netaddr_deserialize \\\n+  test/fuzz/script_flags \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/transaction_deserialize \\\n   test/fuzz/txoutcompressor_deserialize \\\n@@ -358,6 +359,23 @@ test_fuzz_netaddr_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_netaddr_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n+test_fuzz_script_flags_SOURCES = $(FUZZ_SUITE) test/fuzz/script_flags.cpp\n+test_fuzz_script_flags_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_flags_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_flags_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_flags_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_script_flags_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "2c0bfa360c7ee814b3488c714827f01330f77008",
        "filename": "src/test/fuzz/script_flags.cpp",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab15ff70e8db26942db83a9aab7ebf974e8b6b2/src/test/fuzz/script_flags.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab15ff70e8db26942db83a9aab7ebf974e8b6b2/src/test/fuzz/script_flags.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_flags.cpp?ref=fab15ff70e8db26942db83a9aab7ebf974e8b6b2",
        "patch": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <streams.h>\n+#include <version.h>\n+\n+#include <test/fuzz/fuzz.h>\n+\n+/** Flags that are not forbidden by an assert */\n+static bool IsValidFlagCombination(unsigned flags);\n+\n+void test_one_input(std::vector<uint8_t> buffer)\n+{\n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    try {\n+        int nVersion;\n+        ds >> nVersion;\n+        ds.SetVersion(nVersion);\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+\n+    try {\n+        const CTransaction tx(deserialize, ds);\n+        const PrecomputedTransactionData txdata(tx);\n+\n+        unsigned int verify_flags;\n+        ds >> verify_flags;\n+\n+        if (!IsValidFlagCombination(verify_flags)) return;\n+\n+        unsigned int fuzzed_flags;\n+        ds >> fuzzed_flags;\n+\n+        for (unsigned i = 0; i < tx.vin.size(); ++i) {\n+            CTxOut prevout;\n+            ds >> prevout;\n+\n+            const TransactionSignatureChecker checker{&tx, i, prevout.nValue, txdata};\n+\n+            ScriptError serror;\n+            const bool ret = VerifyScript(tx.vin.at(i).scriptSig, prevout.scriptPubKey, &tx.vin.at(i).scriptWitness, verify_flags, checker, &serror);\n+            assert(ret == (serror == SCRIPT_ERR_OK));\n+\n+            // Verify that removing flags from a passing test or adding flags to a failing test does not change the result\n+            if (ret) {\n+                verify_flags &= ~fuzzed_flags;\n+            } else {\n+                verify_flags |= fuzzed_flags;\n+            }\n+            if (!IsValidFlagCombination(verify_flags)) return;\n+\n+            ScriptError serror_fuzzed;\n+            const bool ret_fuzzed = VerifyScript(tx.vin.at(i).scriptSig, prevout.scriptPubKey, &tx.vin.at(i).scriptWitness, verify_flags, checker, &serror_fuzzed);\n+            assert(ret_fuzzed == (serror_fuzzed == SCRIPT_ERR_OK));\n+\n+            assert(ret_fuzzed == ret);\n+        }\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+}\n+\n+static bool IsValidFlagCombination(unsigned flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}"
      }
    ]
  },
  {
    "sha": "9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzRhOTAwNDBkZDNkM2E1YzY3MzdkYmI3ZGVlMzI0NTlmMTJmNGQ0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T20:49:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T20:49:13Z"
      },
      "message": "Merge #15390: [wallet-tool] Close bdb when flushing wallet\n\n318b1f7af1 [wallet] Close bdb when flushing wallet. (John Newbery)\n\nPull request description:\n\n  bdb would not be closed when closing the wallet in wallet-tool. Fix this by calling wallet->flush with true.\n\nTree-SHA512: f722e527e4806eca5254221e944f57853d11bf89a9264309fa558a6cc2b23feefb7bb2963e87b4fad9cfb31ac4cffe563688988e0614a481a8ff1d393aceb132",
      "tree": {
        "sha": "c5e6cc93068da8f9ee478e0a3cc7344886ca8b8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5e6cc93068da8f9ee478e0a3cc7344886ca8b8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZILJAAoJENLqSFDnUoslFTQP/AtUeS3brj1szl8d6JMRJsSn\nVdnOcvptKI3GoY+GqiCmJaQ4EuuSoi4lfUvSfEUFZbtNPzejPycGmDOuBBU6GnUq\ncLTI7V/zUNgIqC3JPEDp0UXh9tRsylPTGU4W+hje2MGZ/jrSXtmizJKRovW0BUz0\nPiSssuqEFtvjpogQu4lwgW9C3UgGeEAR9s0t3CG+55miB8hT6M1809cpCEOda5TM\nc/Cb5uwl3OHJeEjZqwi8k9+nBOj4BT799rblnB9o84bqAakhgNzbkxu03aSnZKX3\nYZIop5naKXzkT2SMFpyGhBeOlrEVDCIsEy1jrxScxDz88vqLmyZlnk0pWOhvQCBu\ndQg5iWG6XWGZ8MqO3akZf6GmM3vj2CTP4QIOwfiEmMI64UweT1ij6bID9U7Q0zAk\nTtkJMJTCqHRTUQLooQ+eje2Z2Pbv0yjJET89ifCw42QHlKeOQ+1Bw3RkMK6tJsQL\nosr03pvH1OtM4ClQ41vkomJorrRJ6GHaG2RjjtBsYx3P0dBer/nk2a1LL6wHbMHe\nZ8x/V4E5CSSc2Eu7OKoQpsi1Pmts/pQPD/k5ZgRive585XVh7+WEVeUWF6KqftJ6\nr4D71/yz1gnERhJtHKRiHEZeYLguVbySbyq82axdmVVmGmdH8IzFe30QHh00dNGp\np46V1ZXeWTCanpuIH/tn\n=wHZ9\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFQ04pUghKHChMW9e2WbTS2I5U0048HGx+ddqsBdnTNzCP/wEANgqOZ6/IUa\nQEgEDPl4K2YI8SAW2LZ65ubZMcoV/ddwap+38Y3bmXpvIjxQzgzfgrVNDgjxBFxk\ngsvwCFLTSKsnS23KAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BANIFVBsTz+bC87BDx5O8MxCPEgAINOYkGe\nn/irWGPRMaKCegjLe6QaoFVk7EOGb5ZdHiwI8QRcZILL8AiM/8O9HaAaGACD3+MN\nLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9y\nZ//wEFqcOBUnYVK5TJWjsb92UaoI8BAXQAsqWrIFE8MS/2Uogx1WCPEEXGSCzPAI\n87gdx4lvPsMAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJu\naXR5d2FsbC5jb23wEJl8vaB+iYUqEnwNYrEpNcUI8QRcZILM8AhNuS5e6J1f+QCD\n3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c5e6cc93068da8f9ee478e0a3cc7344886ca8b8f\nparent cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74\nparent 318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e\nauthor MarcoFalke <falke.marco@gmail.com> 1550090950 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550090953 -0500\n\nMerge #15390: [wallet-tool] Close bdb when flushing wallet\n\n318b1f7af1 [wallet] Close bdb when flushing wallet. (John Newbery)\n\nPull request description:\n\n  bdb would not be closed when closing the wallet in wallet-tool. Fix this by calling wallet->flush with true.\n\nTree-SHA512: f722e527e4806eca5254221e944f57853d11bf89a9264309fa558a6cc2b23feefb7bb2963e87b4fad9cfb31ac4cffe563688988e0614a481a8ff1d393aceb132\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbe7efe9ea6c14a3649d3e10f5f18d2097ebef74"
      },
      {
        "sha": "318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/318b1f7af113fe16b67cf3ed4d9bbab3dd4c5e4e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "797f051189be786837c59d5d01dcec4816c4cc25",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4",
        "patch": "@@ -17,7 +17,7 @@ namespace WalletTool {\n static void WalletToolReleaseWallet(CWallet* wallet)\n {\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n-    wallet->Flush();\n+    wallet->Flush(true);\n     delete wallet;\n }\n \n@@ -112,7 +112,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         std::shared_ptr<CWallet> wallet_instance = CreateWallet(name, path);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Flush();\n+            wallet_instance->Flush(true);\n         }\n     } else if (command == \"info\") {\n         if (!fs::exists(path)) {\n@@ -127,7 +127,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n         if (!wallet_instance) return false;\n         WalletShowInfo(wallet_instance.get());\n-        wallet_instance->Flush();\n+        wallet_instance->Flush(true);\n     } else {\n         fprintf(stderr, \"Invalid command: %s\\n\", command.c_str());\n         return false;"
      }
    ]
  },
  {
    "sha": "9c93f5d9fc93df2120998e8383bc972b738f3ff5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzkzZjVkOWZjOTNkZjIxMjA5OThlODM4M2JjOTcyYjczOGYzZmY1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-13T21:51:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-13T21:51:44Z"
      },
      "message": "Merge #15334: wallet: Log absolute paths for the wallets\n\na4b92e467dd182621497deda1e80a9737629c75f Log full paths for wallets (Hennadii Stepanov)\n\nPull request description:\n\n  Fix #15333\n\n  `debug.log` with this PR:\n  ```\n  ...\n  2019-02-03T19:02:35Z Using wallet directory /home/hebasto/.bitcoin/testnet3/wallets\n  2019-02-03T19:02:35Z init message: Verifying wallet(s)...\n  2019-02-03T19:02:35Z Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\n  2019-02-03T19:02:35Z Using wallet test_alpha/wallet.dat\n  2019-02-03T19:02:35Z BerkeleyEnvironment::Open: LogDir=/home/hebasto/.bitcoin/testnet3/wallets/test_alpha/database ErrorFile=/home/hebasto/.bitcoin/testnet3/wallets/test_alpha/db.log\n  2019-02-03T19:02:35Z Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\n  2019-02-03T19:02:35Z Using wallet alpha_wallet/wallet.dat\n  2019-02-03T19:02:35Z BerkeleyEnvironment::Open: LogDir=/home/hebasto/.bitcoin/testnet3/wallets/alpha_wallet/database ErrorFile=/home/hebasto/.bitcoin/testnet3/wallets/alpha_wallet/db.log\n  2019-02-03T19:02:35Z Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\n  2019-02-03T19:02:35Z Using wallet wallet.dat\n  2019-02-03T19:02:35Z BerkeleyEnvironment::Open: LogDir=/home/hebasto/.bitcoin/testnet3/wallets/database ErrorFile=/home/hebasto/.bitcoin/testnet3/wallets/db.log\n  2019-02-03T19:02:35Z Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\n  2019-02-03T19:02:35Z Using wallet none/wallet.dat\n  2019-02-03T19:02:35Z BerkeleyEnvironment::Open: LogDir=/home/hebasto/.bitcoin/testnet3/wallets/none/database ErrorFile=/home/hebasto/.bitcoin/testnet3/wallets/none/db.log\n  2019-02-03T19:02:35Z init message: Loading banlist...\n  ...\n  ```\n\nTree-SHA512: 8dd4408d3f6b04f396dd0ae0d248fedc3a0f6d36788556ae1662443f06f2ecce1c2be9456bf8d1b3d25b29c2a0cfb03cb805bde0a40387e68988ab932e17e118",
      "tree": {
        "sha": "3a4b93e81b1b6900bb05c8c12671a8b53b29be61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a4b93e81b1b6900bb05c8c12671a8b53b29be61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c93f5d9fc93df2120998e8383bc972b738f3ff5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxkkXAACgkQHkrtYphs\n0l09Gwf/WXXh7MCnyHagC2SPQUC3RfV4rrQ/g1XBW9RveLqwotC8MOfyMv/nPP5K\nTlA18W457Ebgtwf40B46wv3xoSYlHFIKluG1/Jj/hU+GVsGJH85hD4CRm3YdWXyB\nZ6wai+DGpWFy/Ugo5JPZyOsgxBRU6qmaCP+lA4J9RHZx8Fh+MQPIf8kQora25muR\nYOMSrB8yxd9SDjKFy7E3D6z+TzFrx6AO0DJ+tjK7pwxZRVbe4QrfZLnIkp5mMyY4\nnLuo9KrsGfniNijgaL420uwqKYGn6/K/e5/bdWQRh/U2QMeJURMios99HZuHiI1R\nQpe4leBx6vEvyeXwd4qj4B8cWKL3Bw==\n=jVfd\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a4b93e81b1b6900bb05c8c12671a8b53b29be61\nparent 9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4\nparent a4b92e467dd182621497deda1e80a9737629c75f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550094674 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550094704 +0100\n\nMerge #15334: wallet: Log absolute paths for the wallets\n\na4b92e467dd182621497deda1e80a9737629c75f Log full paths for wallets (Hennadii Stepanov)\n\nPull request description:\n\n  Fix #15333\n\n  `debug.log` with this PR:\n  ```\n  ...\n  2019-02-03T19:02:35Z Using wallet directory /home/hebasto/.bitcoin/testnet3/wallets\n  2019-02-03T19:02:35Z init message: Verifying wallet(s)...\n  2019-02-03T19:02:35Z Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\n  2019-02-03T19:02:35Z Using wallet test_alpha/wallet.dat\n  2019-02-03T19:02:35Z BerkeleyEnvironment::Open: LogDir=/home/hebasto/.bitcoin/testnet3/wallets/test_alpha/database ErrorFile=/home/hebasto/.bitcoin/testnet3/wallets/test_alpha/db.log\n  2019-02-03T19:02:35Z Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\n  2019-02-03T19:02:35Z Using wallet alpha_wallet/wallet.dat\n  2019-02-03T19:02:35Z BerkeleyEnvironment::Open: LogDir=/home/hebasto/.bitcoin/testnet3/wallets/alpha_wallet/database ErrorFile=/home/hebasto/.bitcoin/testnet3/wallets/alpha_wallet/db.log\n  2019-02-03T19:02:35Z Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\n  2019-02-03T19:02:35Z Using wallet wallet.dat\n  2019-02-03T19:02:35Z BerkeleyEnvironment::Open: LogDir=/home/hebasto/.bitcoin/testnet3/wallets/database ErrorFile=/home/hebasto/.bitcoin/testnet3/wallets/db.log\n  2019-02-03T19:02:35Z Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)\n  2019-02-03T19:02:35Z Using wallet none/wallet.dat\n  2019-02-03T19:02:35Z BerkeleyEnvironment::Open: LogDir=/home/hebasto/.bitcoin/testnet3/wallets/none/database ErrorFile=/home/hebasto/.bitcoin/testnet3/wallets/none/db.log\n  2019-02-03T19:02:35Z init message: Loading banlist...\n  ...\n  ```\n\nTree-SHA512: 8dd4408d3f6b04f396dd0ae0d248fedc3a0f6d36788556ae1662443f06f2ecce1c2be9456bf8d1b3d25b29c2a0cfb03cb805bde0a40387e68988ab932e17e118\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c93f5d9fc93df2120998e8383bc972b738f3ff5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c93f5d9fc93df2120998e8383bc972b738f3ff5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c93f5d9fc93df2120998e8383bc972b738f3ff5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c4a90040dd3d3a5c6737dbb7dee32459f12f4d4"
      },
      {
        "sha": "a4b92e467dd182621497deda1e80a9737629c75f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b92e467dd182621497deda1e80a9737629c75f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4b92e467dd182621497deda1e80a9737629c75f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "99d880daa0725fb89d1a36ed14b47d3dc66a7403",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c93f5d9fc93df2120998e8383bc972b738f3ff5/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c93f5d9fc93df2120998e8383bc972b738f3ff5/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=9c93f5d9fc93df2120998e8383bc972b738f3ff5",
        "patch": "@@ -397,7 +397,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n     fs::path walletDir = env->Directory();\n \n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(nullptr, nullptr, nullptr));\n-    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+    LogPrintf(\"Using wallet %s\\n\", file_path.string());\n \n     // Wallet file must be a plain filename without a directory\n     if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))"
      }
    ]
  },
  {
    "sha": "fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdjYThlZjU4YmYzZTNiOTFkMWY1YTY3ZmE0MjAwOGU2M2IxZjdi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-16T16:49:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T22:12:28Z"
      },
      "message": "qa: Add test/fuzz/test_runner.py",
      "tree": {
        "sha": "2bb0b1b63931c12593aafded53b4021fe566ab32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bb0b1b63931c12593aafded53b4021fe566ab32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZJZMAAoJEM4rdWl+aaVIAaYL/1ZrREZEwzX/nKSM05vo7Hsv\njjSw74oTCbbDbvspun5Cdbt0hVFoZeW58cP7ewbaCqKTFdBoYFgj75LyNcgSC42p\niXIxBXjpWisAH6WrAkdpSlLH/UFCK6i298q/gdXp5PLin5yThCSmR2Iw506ZAK6w\nbF2DgmNzpUxQ0vJRL/4szezlD2TLPl9VnYI6Y93JBiiH/6unxBDYe6v4LdpNIzno\ngbqMro2Czor/kKU/nw+FlGkcon1brJU0CneUQiNLG9Qpam8PoqUyXsnLmc0PJ1Ux\naZlLt5AjQql5a6tEckrD3AHXGFrk22mIA8Oe1IOX3ueip30XWzQGWwVBQaG1swZX\nBdJvGRuSUHOS8lx/dBiurnq7e35VuNbz/fJfZbZ3v+HFX2kEzVLxWEGjDXzwIaDy\nexEe8fTXXPeDOzwN+qCvJaR433S3nZYWYLOWCalb2/hfbu2eWE9m7EG0dyzT0kSu\n+4kwwHe5oWYRRNHSYURc1yKpPo/XIdLIFR6JPF+YaQ==\n=tzee\n-----END PGP SIGNATURE-----",
        "payload": "tree 2bb0b1b63931c12593aafded53b4021fe566ab32\nparent ad039aa0d3e8a831559434022b1da1de4d72a847\nauthor MarcoFalke <falke.marco@gmail.com> 1547657341 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550095948 -0500\n\nqa: Add test/fuzz/test_runner.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad039aa0d3e8a831559434022b1da1de4d72a847",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad039aa0d3e8a831559434022b1da1de4d72a847",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad039aa0d3e8a831559434022b1da1de4d72a847"
      }
    ],
    "stats": {
      "total": 226,
      "additions": 199,
      "deletions": 27
    },
    "files": [
      {
        "sha": "d2d462306afafafcf2a9589fac9bfd27ba66a0df",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -15,6 +15,7 @@ env:\n     - MAKEJOBS=-j3\n     - RUN_UNIT_TESTS=true\n     - RUN_FUNCTIONAL_TESTS=true\n+    - RUN_FUZZ_TESTS=false\n     - DOCKER_NAME_TAG=ubuntu:18.04\n     - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n@@ -100,7 +101,7 @@ jobs:\n         PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev\"\n         DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-fuzz --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n+        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [trusty]  [no functional tests, no depends, only system libs]'\n@@ -132,6 +133,18 @@ jobs:\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n \n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: fuzzer,address]'\n+      env: >-\n+        HOST=x86_64-unknown-linux-gnu\n+        PACKAGES=\"clang llvm python3 libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\"\n+        NO_DEPENDS=1\n+        RUN_UNIT_TESTS=false\n+        RUN_FUNCTIONAL_TESTS=false\n+        RUN_FUZZ_TESTS=true\n+        GOAL=\"install\"\n+        BITCOIN_CONFIG=\"--disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\"\n+\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n       env: >-"
      },
      {
        "sha": "8055bbdd19de1837814d0df4fa29191b6f6e1e07",
        "filename": ".travis/test_04_install.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis/test_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis/test_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_04_install.sh?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -7,6 +7,11 @@\n export LC_ALL=C.UTF-8\n \n travis_retry docker pull \"$DOCKER_NAME_TAG\"\n+\n+export DIR_FUZZ_IN=${TRAVIS_BUILD_DIR}/qa-assets\n+git clone https://github.com/bitcoin-core/qa-assets ${DIR_FUZZ_IN}\n+export DIR_FUZZ_IN=${DIR_FUZZ_IN}/fuzz_seed_corpus/\n+\n mkdir -p \"${TRAVIS_BUILD_DIR}/sanitizer-output/\"\n export ASAN_OPTIONS=\"\"\n export LSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/lsan\""
      },
      {
        "sha": "e13abfd52f303fba09a61726d38859baad6d59d1",
        "filename": ".travis/test_06_script_b.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis/test_06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/.travis/test_06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_06_script_b.sh?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -19,3 +19,9 @@ if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n   DOCKER_EXEC test/functional/test_runner.py --ci --combinedlogslen=4000 --coverage --quiet --failfast\n   END_FOLD\n fi\n+\n+if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n+  BEGIN_FOLD fuzz-tests\n+  DOCKER_EXEC test/fuzz/test_runner.py -l DEBUG ${DIR_FUZZ_IN}\n+  END_FOLD\n+fi"
      },
      {
        "sha": "f4e4dc98be5ba3e938ba4e4254fabc3ad4e8d1e1",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -220,7 +220,11 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(DIST_SHARE) test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+EXTRA_DIST = $(DIST_SHARE) $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+\n+EXTRA_DIST += \\\n+    test/functional \\\n+    test/fuzz\n \n EXTRA_DIST += \\\n     test/util/bitcoin-util-test.py \\"
      },
      {
        "sha": "f9221dde5bd9703cc6e1d536b874b55089800af4",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 33,
        "deletions": 24,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -5,6 +5,29 @@ A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n provide an easy entry point for fuzzers and the like. In this document we'll\n describe how to use it with AFL and libFuzzer.\n \n+## Preparing fuzzing\n+\n+AFL needs an input directory with examples, and an output directory where it\n+will place examples that it found. These can be anywhere in the file system,\n+we'll define environment variables to make it easy to reference them.\n+\n+libFuzzer will use the input directory as output directory.\n+\n+Extract the example seeds (or other starting inputs) into the inputs\n+directory before starting fuzzing.\n+\n+```\n+git clone https://github.com/bitcoin-core/qa-assets\n+export DIR_FUZZ_IN=$PWD/qa-assets/fuzz_seed_corpus\n+```\n+\n+Only for AFL:\n+\n+```\n+mkdir outputs\n+export AFLOUT=$PWD/outputs\n+```\n+\n ## AFL\n \n ### Building AFL\n@@ -23,7 +46,7 @@ export AFLPATH=$PWD\n To build Bitcoin Core using AFL instrumentation (this assumes that the\n `AFLPATH` was set as above):\n ```\n-./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n+./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n export AFL_HARDEN=1\n cd src/\n make\n@@ -39,31 +62,14 @@ binary will be instrumented in such a way that the AFL\n features \"persistent mode\" and \"deferred forkserver\" can be used. See\n https://github.com/mcarpenter/afl/tree/master/llvm_mode for details.\n \n-### Preparing fuzzing\n-\n-AFL needs an input directory with examples, and an output directory where it\n-will place examples that it found. These can be anywhere in the file system,\n-we'll define environment variables to make it easy to reference them.\n-\n-```\n-mkdir inputs\n-AFLIN=$PWD/inputs\n-mkdir outputs\n-AFLOUT=$PWD/outputs\n-```\n-\n-Example inputs are available from:\n-\n-- https://download.visucore.com/bitcoin/bitcoin_fuzzy_in.tar.xz\n-- http://strateman.ninja/fuzzing.tar.xz\n-\n-Extract these (or other starting inputs) into the `inputs` directory before starting fuzzing.\n-\n ### Fuzzing\n \n To start the actual fuzzing use:\n+\n ```\n-$AFLPATH/afl-fuzz -i ${AFLIN} -o ${AFLOUT} -m52 -- test/fuzz/fuzz_target_foo\n+export FUZZ_TARGET=fuzz_target_foo  # Pick a fuzz_target\n+mkdir ${AFLOUT}/${FUZZ_TARGET}\n+$AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- test/fuzz/${FUZZ_TARGET}\n ```\n \n You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n@@ -74,10 +80,10 @@ will print an error and suggestion if so.\n A recent version of `clang`, the address sanitizer and libFuzzer is needed (all\n found in the `compiler-rt` runtime libraries package).\n \n-To build the `test/test_bitcoin_fuzzy` executable run\n+To build all fuzz targets with libFuzzer, run\n \n ```\n-./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n+./configure --disable-ccache --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n make\n ```\n \n@@ -86,3 +92,6 @@ interchangeably between libFuzzer and AFL.\n \n See https://llvm.org/docs/LibFuzzer.html#running on how to run the libFuzzer\n instrumented executable.\n+\n+Alternatively run the script in `./test/fuzz/test_runner.py` and provide it\n+with the `${DIR_FUZZ_IN}` created earlier."
      },
      {
        "sha": "f40a205a73c54f243fd2b110096a7549b6c284cd",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -2,7 +2,6 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-bin_PROGRAMS += test/test_bitcoin\n \n FUZZ_TARGETS = \\\n   test/fuzz/address_deserialize \\\n@@ -28,6 +27,8 @@ FUZZ_TARGETS = \\\n \n if ENABLE_FUZZ\n noinst_PROGRAMS += $(FUZZ_TARGETS:=)\n+else\n+bin_PROGRAMS += test/test_bitcoin\n endif\n \n TEST_SRCDIR = test"
      },
      {
        "sha": "6b7ef7065921b62b0cb06a3e14343e99a0b7816e",
        "filename": "test/config.ini.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -16,4 +16,5 @@ RPCAUTH=@abs_top_srcdir@/share/rpcauth/rpcauth.py\n @ENABLE_WALLET_TRUE@ENABLE_WALLET=true\n @BUILD_BITCOIN_CLI_TRUE@ENABLE_CLI=true\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n+@ENABLE_FUZZ_TRUE@ENABLE_FUZZ=true\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true"
      },
      {
        "sha": "eb4fe78cd4a5b081a0c354a9f67d59dc5fc61fff",
        "filename": "test/fuzz/test_runner.py",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "patch": "@@ -0,0 +1,133 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Run fuzz test targets.\n+\"\"\"\n+\n+import argparse\n+import configparser\n+import os\n+import sys\n+import subprocess\n+import logging\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n+    parser.add_argument(\n+        \"-l\",\n+        \"--loglevel\",\n+        dest=\"loglevel\",\n+        default=\"INFO\",\n+        help=\"log events at this level and higher to the console. Can be set to DEBUG, INFO, WARNING, ERROR or CRITICAL. Passing --loglevel DEBUG will output all logs to console.\",\n+    )\n+    parser.add_argument(\n+        '--export_coverage',\n+        action='store_true',\n+        help='If true, export coverage information to files in the seed corpus',\n+    )\n+    parser.add_argument(\n+        'seed_dir',\n+        help='The seed corpus to run on (must contain subfolders for each fuzz target).',\n+    )\n+    parser.add_argument(\n+        'target',\n+        nargs='*',\n+        help='The target(s) to run. Default is to run all targets.',\n+    )\n+\n+    args = parser.parse_args()\n+\n+    # Set up logging\n+    logging.basicConfig(\n+        format='%(message)s',\n+        level=int(args.loglevel) if args.loglevel.isdigit() else args.loglevel.upper(),\n+    )\n+\n+    # Read config generated by configure.\n+    config = configparser.ConfigParser()\n+    configfile = os.path.abspath(os.path.dirname(__file__)) + \"/../config.ini\"\n+    config.read_file(open(configfile, encoding=\"utf8\"))\n+\n+    if not config[\"components\"].getboolean(\"ENABLE_FUZZ\"):\n+        logging.error(\"Must have fuzz targets built\")\n+        sys.exit(1)\n+\n+    # Build list of tests\n+    test_list_all = parse_test_list(makefile=os.path.join(config[\"environment\"][\"SRCDIR\"], 'src', 'Makefile.test.include'))\n+\n+    if not test_list_all:\n+        logging.error(\"No fuzz targets found\")\n+        sys.exit(1)\n+\n+    logging.info(\"Fuzz targets found: {}\".format(test_list_all))\n+\n+    args.target = args.target or test_list_all  # By default run all\n+    test_list_error = list(set(args.target).difference(set(test_list_all)))\n+    if test_list_error:\n+        logging.error(\"Unknown fuzz targets selected: {}\".format(test_list_error))\n+    test_list_selection = list(set(test_list_all).intersection(set(args.target)))\n+    if not test_list_selection:\n+        logging.error(\"No fuzz targets selected\")\n+    logging.info(\"Fuzz targets selected: {}\".format(test_list_selection))\n+\n+    help_output = subprocess.run(\n+        args=[\n+            os.path.join(config[\"environment\"][\"BUILDDIR\"], 'src', 'test', 'fuzz', test_list_selection[0]),\n+            '-help=1',\n+        ],\n+        check=True,\n+        stderr=subprocess.PIPE,\n+        universal_newlines=True,\n+    ).stderr\n+    if \"libFuzzer\" not in help_output:\n+        logging.error(\"Must be built with libFuzzer\")\n+        sys.exit(1)\n+\n+    run_once(\n+        corpus=args.seed_dir,\n+        test_list=test_list_selection,\n+        build_dir=config[\"environment\"][\"BUILDDIR\"],\n+        export_coverage=args.export_coverage,\n+    )\n+\n+\n+def run_once(*, corpus, test_list, build_dir, export_coverage):\n+    for t in test_list:\n+        args = [\n+            os.path.join(build_dir, 'src', 'test', 'fuzz', t),\n+            '-runs=1',\n+            os.path.join(corpus, t),\n+        ]\n+        logging.debug('Run {} with args {}'.format(t, args))\n+        output = subprocess.run(args, check=True, stderr=subprocess.PIPE, universal_newlines=True).stderr\n+        logging.debug('Output: {}'.format(output))\n+        if not export_coverage:\n+            continue\n+        for l in output.splitlines():\n+            if 'INITED' in l:\n+                with open(os.path.join(corpus, t + '_coverage'), 'w', encoding='utf-8') as cov_file:\n+                    cov_file.write(l)\n+                    break\n+\n+\n+def parse_test_list(makefile):\n+    with open(makefile, encoding='utf-8') as makefile_test:\n+        test_list_all = []\n+        read_targets = False\n+        for line in makefile_test.readlines():\n+            line = line.strip().replace('test/fuzz/', '').replace(' \\\\', '')\n+            if read_targets:\n+                if not line:\n+                    break\n+                test_list_all.append(line)\n+                continue\n+\n+            if line == 'FUZZ_TARGETS =':\n+                read_targets = True\n+    return test_list_all\n+\n+\n+if __name__ == '__main__':\n+    main()"
      }
    ]
  },
  {
    "sha": "2452c6cc0a236469629c919f8c693e14ca637a0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDUyYzZjYzBhMjM2NDY5NjI5YzkxOWY4YzY5M2UxNGNhNjM3YTBh",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-14T08:48:31Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-14T08:49:01Z"
      },
      "message": "Merge #14978: Factor out PSBT utilities from RPCs for use in GUI code; related refactoring.\n\n102faad81 Factor out combine / finalize / extract PSBT helpers (Glenn Willen)\n78b9893d0 Remove op== on PSBTs; check compatibility in Merge (Glenn Willen)\nbd0dbe876 Switch away from exceptions in refactored tx code (Glenn Willen)\nc6c3d42a7 Move PSBT definitions and code to separate files (Glenn Willen)\n81cd95884 Factor BroadcastTransaction out of sendrawtransaction (Glenn Willen)\nc734aaa15 Split DecodePSBT into Base64 and Raw versions (Glenn Willen)\n162ffefd2 Add pf_invalid arg to std::string DecodeBase{32,64} (Glenn Willen)\n\nPull request description:\n\n  * Move most PSBT definitions into psbt.h.\n  * Move most PSBT RPC utilities into psbt.{h,cpp}.\n  * Move wallet-touching PSBT RPC utilities (FillPSBT) into\n      wallet/psbtwallet.{h,cpp}.\n  * Switch exceptions from JSONRPCError() to new PSBTException class.\n  * Split DecodePSBT into DecodeBase64PSBT (old behavior) and DecodeRawPSBT.\n  * Add one new version of DecodeBase64 utility in strencodings.h (and\n      corresponding DecodeBase32 for completeness).\n  * Factor BroadcastTransaction utility function out of sendrawtransaction RPC\n      handler in rpc/rawtransaction.cpp\n\n  Note: For those keeping score at home wondering why refactor, this is in anticipation of (and developed in parallel with) a change to actually introduce GUI use of all this stuff, which is already under development and working-ish.\n\nTree-SHA512: 2197c448e657421f430943025357597e7b06c4c377d5d4b2622b9edea52a7193c48843dd731abb3a88ac4023a9c88d211991e0a9b740c22f2e1cbe72adefe390",
      "tree": {
        "sha": "08c45f95c0b214a6b65712a1332613847c3d293f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08c45f95c0b214a6b65712a1332613847c3d293f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2452c6cc0a236469629c919f8c693e14ca637a0a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAlxlK30ACgkQ0wARbhyH\nWj1eGQ//fqs+L2mSMlHQtDXWKXHdr2Gisq7E/AN93EZyhjKv+4aatJHZR4gZhTlk\nhLvbVELnQ5tbU+AAHipjujvgGjX2qwJcLvBARTsoBLunrxKqKecLAdrEb+MWCqyg\nrv0ze4UV4O0vOntSDIEIK28M/bIHUVSq5ud+9554qt9H6hQCFs73WvK6pRSGflXU\nRnOLmyKWpzAeygYo3TLItUYe5+VOk/JM6/aJzPyTfbh4e4SrSzy9NjOnzfdos1DH\nYH3YDe274xPMzY1OrzUtQQSBp3NQbVzYeuqkg4kfXVNXv1vgk19aGcM8qfM+RGbq\n0U+3og4+vbMAC9taZRJC4e8Rulw6mzT01bAn1k4LSqz4xG2zqi/R+nRJUxgUa3c4\nh8srm/2HrH3TRH/TtJ2lSbo9E/66KN7Il1q0NYYQuRNw5y9EiPsFVGPxyqcJNFB1\n+Mbv57vcKmhR5NiHV87cLadf9+Ttey4pgDVISJXTDyTcKMJpbbuB/eoqiv71niMu\ngTIOJcfutkJsnzsqZ/hcgLJFHC6Hd4bpQCUmmgVmMR1C1vikO4iDf1Kb8IbTqVKR\n6OaW2cL0fF6V6D2JUWoqpvI142ABDD0dTXrN7l5NxyHs+HOW39+mSUatdTz+Z3lV\n9uQAMtM+d33dtNkzamb4r7iaeiq5H2mDoijLOTJAY7GplFM8ZlA=\n=SdRv\n-----END PGP SIGNATURE-----",
        "payload": "tree 08c45f95c0b214a6b65712a1332613847c3d293f\nparent 9c93f5d9fc93df2120998e8383bc972b738f3ff5\nparent 102faad81efa1cb12c29c466cfe81fc8c7351e1d\nauthor MeshCollider <dobsonsa68@gmail.com> 1550134111 +1300\ncommitter MeshCollider <dobsonsa68@gmail.com> 1550134141 +1300\n\nMerge #14978: Factor out PSBT utilities from RPCs for use in GUI code; related refactoring.\n\n102faad81 Factor out combine / finalize / extract PSBT helpers (Glenn Willen)\n78b9893d0 Remove op== on PSBTs; check compatibility in Merge (Glenn Willen)\nbd0dbe876 Switch away from exceptions in refactored tx code (Glenn Willen)\nc6c3d42a7 Move PSBT definitions and code to separate files (Glenn Willen)\n81cd95884 Factor BroadcastTransaction out of sendrawtransaction (Glenn Willen)\nc734aaa15 Split DecodePSBT into Base64 and Raw versions (Glenn Willen)\n162ffefd2 Add pf_invalid arg to std::string DecodeBase{32,64} (Glenn Willen)\n\nPull request description:\n\n  * Move most PSBT definitions into psbt.h.\n  * Move most PSBT RPC utilities into psbt.{h,cpp}.\n  * Move wallet-touching PSBT RPC utilities (FillPSBT) into\n      wallet/psbtwallet.{h,cpp}.\n  * Switch exceptions from JSONRPCError() to new PSBTException class.\n  * Split DecodePSBT into DecodeBase64PSBT (old behavior) and DecodeRawPSBT.\n  * Add one new version of DecodeBase64 utility in strencodings.h (and\n      corresponding DecodeBase32 for completeness).\n  * Factor BroadcastTransaction utility function out of sendrawtransaction RPC\n      handler in rpc/rawtransaction.cpp\n\n  Note: For those keeping score at home wondering why refactor, this is in anticipation of (and developed in parallel with) a change to actually introduce GUI use of all this stuff, which is already under development and working-ish.\n\nTree-SHA512: 2197c448e657421f430943025357597e7b06c4c377d5d4b2622b9edea52a7193c48843dd731abb3a88ac4023a9c88d211991e0a9b740c22f2e1cbe72adefe390\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2452c6cc0a236469629c919f8c693e14ca637a0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2452c6cc0a236469629c919f8c693e14ca637a0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2452c6cc0a236469629c919f8c693e14ca637a0a/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c93f5d9fc93df2120998e8383bc972b738f3ff5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c93f5d9fc93df2120998e8383bc972b738f3ff5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c93f5d9fc93df2120998e8383bc972b738f3ff5"
      },
      {
        "sha": "102faad81efa1cb12c29c466cfe81fc8c7351e1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/102faad81efa1cb12c29c466cfe81fc8c7351e1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/102faad81efa1cb12c29c466cfe81fc8c7351e1d"
      }
    ],
    "stats": {
      "total": 2158,
      "additions": 1229,
      "deletions": 929
    },
    "files": [
      {
        "sha": "7490d8b7906e479ef8c450650845175c75b6e460",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -152,6 +152,7 @@ BITCOIN_CORE_H = \\\n   netaddress.h \\\n   netbase.h \\\n   netmessagemaker.h \\\n+  node/transaction.h \\\n   noui.h \\\n   optional.h \\\n   outputtype.h \\\n@@ -161,6 +162,7 @@ BITCOIN_CORE_H = \\\n   policy/rbf.h \\\n   pow.h \\\n   protocol.h \\\n+  psbt.h \\\n   random.h \\\n   reverse_iterator.h \\\n   reverselock.h \\\n@@ -209,6 +211,7 @@ BITCOIN_CORE_H = \\\n   wallet/db.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n+  wallet/psbtwallet.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -255,6 +258,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   net_processing.cpp \\\n+  node/transaction.cpp \\\n   noui.cpp \\\n   outputtype.cpp \\\n   policy/fees.cpp \\\n@@ -308,6 +312,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/init.cpp \\\n+  wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n@@ -421,6 +426,7 @@ libbitcoin_common_a_SOURCES = \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   policy/feerate.cpp \\\n+  psbt.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\"
      },
      {
        "sha": "ae377eb6e811c592be63b14918677a8bf056524e",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -37,7 +37,11 @@ bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n  */\n bool ParseHashStr(const std::string& strHex, uint256& result);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n-NODISCARD bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error);\n+\n+//! Decode a base64ed PSBT into a PartiallySignedTransaction\n+NODISCARD bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n+//! Decode a raw (binary blob) PSBT into a PartiallySignedTransaction\n+NODISCARD bool DecodeRawPSBT(PartiallySignedTransaction& decoded_psbt, const std::string& raw_psbt, std::string& error);\n int ParseSighashString(const UniValue& sighash);\n \n // core_write.cpp"
      },
      {
        "sha": "536a7f4f17d989ee0da301dab93be4ee58f61cf1",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <core_io.h>\n \n+#include <psbt.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n@@ -176,10 +177,20 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)\n+bool DecodeBase64PSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)\n {\n-    std::vector<unsigned char> tx_data = DecodeBase64(base64_tx.c_str());\n-    CDataStream ss_data(tx_data, SER_NETWORK, PROTOCOL_VERSION);\n+    bool invalid;\n+    std::string tx_data = DecodeBase64(base64_tx, &invalid);\n+    if (invalid) {\n+        error = \"invalid base64\";\n+        return false;\n+    }\n+    return DecodeRawPSBT(psbt, tx_data, error);\n+}\n+\n+bool DecodeRawPSBT(PartiallySignedTransaction& psbt, const std::string& tx_data, std::string& error)\n+{\n+    CDataStream ss_data(tx_data.data(), tx_data.data() + tx_data.size(), SER_NETWORK, PROTOCOL_VERSION);\n     try {\n         ss_data >> psbt;\n         if (!ss_data.empty()) {"
      },
      {
        "sha": "c9cdd0d1cdc077fd183d926b5e080d22f30ba302",
        "filename": "src/node/transaction.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <net.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <node/transaction.h>\n+\n+#include <future>\n+\n+const char* TransactionErrorString(const TransactionError err)\n+{\n+    switch (err) {\n+        case TransactionError::OK:\n+            return \"No error\";\n+        case TransactionError::MISSING_INPUTS:\n+            return \"Missing inputs\";\n+        case TransactionError::ALREADY_IN_CHAIN:\n+            return \"Transaction already in block chain\";\n+        case TransactionError::P2P_DISABLED:\n+            return \"Peer-to-peer functionality missing or disabled\";\n+        case TransactionError::MEMPOOL_REJECTED:\n+            return \"Transaction rejected by AcceptToMemoryPool\";\n+        case TransactionError::MEMPOOL_ERROR:\n+            return \"AcceptToMemoryPool failed\";\n+        case TransactionError::INVALID_PSBT:\n+            return \"PSBT is not sane\";\n+        case TransactionError::PSBT_MISMATCH:\n+            return \"PSBTs not compatible (different transactions)\";\n+        case TransactionError::SIGHASH_MISMATCH:\n+            return \"Specified sighash value does not match existing value\";\n+\n+        case TransactionError::UNKNOWN_ERROR:\n+        default: break;\n+    }\n+    return \"Unknown error\";\n+}\n+\n+bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, TransactionError& error, std::string& err_string, const bool allowhighfees)\n+{\n+    std::promise<void> promise;\n+    hashTx = tx->GetHash();\n+\n+    CAmount nMaxRawTxFee = maxTxFee;\n+    if (allowhighfees)\n+        nMaxRawTxFee = 0;\n+\n+    { // cs_main scope\n+    LOCK(cs_main);\n+    CCoinsViewCache &view = *pcoinsTip;\n+    bool fHaveChain = false;\n+    for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n+        const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n+        fHaveChain = !existingCoin.IsSpent();\n+    }\n+    bool fHaveMempool = mempool.exists(hashTx);\n+    if (!fHaveMempool && !fHaveChain) {\n+        // push to local node and sync with wallets\n+        CValidationState state;\n+        bool fMissingInputs;\n+        if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n+            if (state.IsInvalid()) {\n+                err_string = FormatStateMessage(state);\n+                error = TransactionError::MEMPOOL_REJECTED;\n+                return false;\n+            } else {\n+                if (fMissingInputs) {\n+                    error = TransactionError::MISSING_INPUTS;\n+                    return false;\n+                }\n+                err_string = FormatStateMessage(state);\n+                error = TransactionError::MEMPOOL_ERROR;\n+                return false;\n+            }\n+        } else {\n+            // If wallet is enabled, ensure that the wallet has been made aware\n+            // of the new transaction prior to returning. This prevents a race\n+            // where a user might call sendrawtransaction with a transaction\n+            // to/from their wallet, immediately call some wallet RPC, and get\n+            // a stale result because callbacks have not yet been processed.\n+            CallFunctionInValidationInterfaceQueue([&promise] {\n+                promise.set_value();\n+            });\n+        }\n+    } else if (fHaveChain) {\n+        error = TransactionError::ALREADY_IN_CHAIN;\n+        return false;\n+    } else {\n+        // Make sure we don't block forever if re-sending\n+        // a transaction already in mempool.\n+        promise.set_value();\n+    }\n+\n+    } // cs_main\n+\n+    promise.get_future().wait();\n+\n+    if(!g_connman) {\n+        error = TransactionError::P2P_DISABLED;\n+        return false;\n+    }\n+\n+    CInv inv(MSG_TX, hashTx);\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+    });\n+\n+    return true;\n+    }"
      },
      {
        "sha": "3b0cbba98b520ef051277eb106737232be127e31",
        "filename": "src/node/transaction.h",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TRANSACTION_H\n+#define BITCOIN_NODE_TRANSACTION_H\n+\n+#include <primitives/transaction.h>\n+#include <uint256.h>\n+\n+enum class TransactionError {\n+    OK = 0,\n+    UNKNOWN_ERROR,\n+\n+    MISSING_INPUTS,\n+    ALREADY_IN_CHAIN,\n+    P2P_DISABLED,\n+    MEMPOOL_REJECTED,\n+    MEMPOOL_ERROR,\n+    INVALID_PSBT,\n+    PSBT_MISMATCH,\n+    SIGHASH_MISMATCH,\n+\n+    ERROR_COUNT\n+};\n+\n+#define TRANSACTION_ERR_LAST TransactionError::ERROR_COUNT\n+\n+const char* TransactionErrorString(const TransactionError error);\n+\n+/**\n+ * Broadcast a transaction\n+ *\n+ * @param[in]  tx the transaction to broadcast\n+ * @param[out] &txid the txid of the transaction, if successfully broadcast\n+ * @param[out] &error reference to UniValue to fill with error info on failure\n+ * @param[out] &err_string reference to std::string to fill with error string if available\n+ * @param[in]  allowhighfees whether to allow fees exceeding maxTxFee\n+ * return true on success, false on error (and fills in `error`)\n+ */\n+bool BroadcastTransaction(CTransactionRef tx, uint256& txid, TransactionError& error, std::string& err_string, bool allowhighfees = false);\n+\n+#endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "81633c0cc7ffa3c95420ee1996f4238b197d1bb8",
        "filename": "src/psbt.cpp",
        "status": "added",
        "additions": 283,
        "deletions": 0,
        "changes": 283,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <psbt.h>\n+#include <util/strencodings.h>\n+\n+PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx) : tx(tx)\n+{\n+    inputs.resize(tx.vin.size());\n+    outputs.resize(tx.vout.size());\n+}\n+\n+bool PartiallySignedTransaction::IsNull() const\n+{\n+    return !tx && inputs.empty() && outputs.empty() && unknown.empty();\n+}\n+\n+bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n+{\n+    // Prohibited to merge two PSBTs over different transactions\n+    if (tx->GetHash() != psbt.tx->GetHash()) {\n+        return false;\n+    }\n+\n+    for (unsigned int i = 0; i < inputs.size(); ++i) {\n+        inputs[i].Merge(psbt.inputs[i]);\n+    }\n+    for (unsigned int i = 0; i < outputs.size(); ++i) {\n+        outputs[i].Merge(psbt.outputs[i]);\n+    }\n+    unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+\n+    return true;\n+}\n+\n+bool PartiallySignedTransaction::IsSane() const\n+{\n+    for (PSBTInput input : inputs) {\n+        if (!input.IsSane()) return false;\n+    }\n+    return true;\n+}\n+\n+bool PSBTInput::IsNull() const\n+{\n+    return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();\n+}\n+\n+void PSBTInput::FillSignatureData(SignatureData& sigdata) const\n+{\n+    if (!final_script_sig.empty()) {\n+        sigdata.scriptSig = final_script_sig;\n+        sigdata.complete = true;\n+    }\n+    if (!final_script_witness.IsNull()) {\n+        sigdata.scriptWitness = final_script_witness;\n+        sigdata.complete = true;\n+    }\n+    if (sigdata.complete) {\n+        return;\n+    }\n+\n+    sigdata.signatures.insert(partial_sigs.begin(), partial_sigs.end());\n+    if (!redeem_script.empty()) {\n+        sigdata.redeem_script = redeem_script;\n+    }\n+    if (!witness_script.empty()) {\n+        sigdata.witness_script = witness_script;\n+    }\n+    for (const auto& key_pair : hd_keypaths) {\n+        sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n+    }\n+}\n+\n+void PSBTInput::FromSignatureData(const SignatureData& sigdata)\n+{\n+    if (sigdata.complete) {\n+        partial_sigs.clear();\n+        hd_keypaths.clear();\n+        redeem_script.clear();\n+        witness_script.clear();\n+\n+        if (!sigdata.scriptSig.empty()) {\n+            final_script_sig = sigdata.scriptSig;\n+        }\n+        if (!sigdata.scriptWitness.IsNull()) {\n+            final_script_witness = sigdata.scriptWitness;\n+        }\n+        return;\n+    }\n+\n+    partial_sigs.insert(sigdata.signatures.begin(), sigdata.signatures.end());\n+    if (redeem_script.empty() && !sigdata.redeem_script.empty()) {\n+        redeem_script = sigdata.redeem_script;\n+    }\n+    if (witness_script.empty() && !sigdata.witness_script.empty()) {\n+        witness_script = sigdata.witness_script;\n+    }\n+    for (const auto& entry : sigdata.misc_pubkeys) {\n+        hd_keypaths.emplace(entry.second);\n+    }\n+}\n+\n+void PSBTInput::Merge(const PSBTInput& input)\n+{\n+    if (!non_witness_utxo && input.non_witness_utxo) non_witness_utxo = input.non_witness_utxo;\n+    if (witness_utxo.IsNull() && !input.witness_utxo.IsNull()) {\n+        witness_utxo = input.witness_utxo;\n+        non_witness_utxo = nullptr; // Clear out any non-witness utxo when we set a witness one.\n+    }\n+\n+    partial_sigs.insert(input.partial_sigs.begin(), input.partial_sigs.end());\n+    hd_keypaths.insert(input.hd_keypaths.begin(), input.hd_keypaths.end());\n+    unknown.insert(input.unknown.begin(), input.unknown.end());\n+\n+    if (redeem_script.empty() && !input.redeem_script.empty()) redeem_script = input.redeem_script;\n+    if (witness_script.empty() && !input.witness_script.empty()) witness_script = input.witness_script;\n+    if (final_script_sig.empty() && !input.final_script_sig.empty()) final_script_sig = input.final_script_sig;\n+    if (final_script_witness.IsNull() && !input.final_script_witness.IsNull()) final_script_witness = input.final_script_witness;\n+}\n+\n+bool PSBTInput::IsSane() const\n+{\n+    // Cannot have both witness and non-witness utxos\n+    if (!witness_utxo.IsNull() && non_witness_utxo) return false;\n+\n+    // If we have a witness_script or a scriptWitness, we must also have a witness utxo\n+    if (!witness_script.empty() && witness_utxo.IsNull()) return false;\n+    if (!final_script_witness.IsNull() && witness_utxo.IsNull()) return false;\n+\n+    return true;\n+}\n+\n+void PSBTOutput::FillSignatureData(SignatureData& sigdata) const\n+{\n+    if (!redeem_script.empty()) {\n+        sigdata.redeem_script = redeem_script;\n+    }\n+    if (!witness_script.empty()) {\n+        sigdata.witness_script = witness_script;\n+    }\n+    for (const auto& key_pair : hd_keypaths) {\n+        sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n+    }\n+}\n+\n+void PSBTOutput::FromSignatureData(const SignatureData& sigdata)\n+{\n+    if (redeem_script.empty() && !sigdata.redeem_script.empty()) {\n+        redeem_script = sigdata.redeem_script;\n+    }\n+    if (witness_script.empty() && !sigdata.witness_script.empty()) {\n+        witness_script = sigdata.witness_script;\n+    }\n+    for (const auto& entry : sigdata.misc_pubkeys) {\n+        hd_keypaths.emplace(entry.second);\n+    }\n+}\n+\n+bool PSBTOutput::IsNull() const\n+{\n+    return redeem_script.empty() && witness_script.empty() && hd_keypaths.empty() && unknown.empty();\n+}\n+\n+void PSBTOutput::Merge(const PSBTOutput& output)\n+{\n+    hd_keypaths.insert(output.hd_keypaths.begin(), output.hd_keypaths.end());\n+    unknown.insert(output.unknown.begin(), output.unknown.end());\n+\n+    if (redeem_script.empty() && !output.redeem_script.empty()) redeem_script = output.redeem_script;\n+    if (witness_script.empty() && !output.witness_script.empty()) witness_script = output.witness_script;\n+}\n+\n+bool PSBTInputSigned(PSBTInput& input)\n+{\n+    return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n+}\n+\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash)\n+{\n+    PSBTInput& input = psbt.inputs.at(index);\n+    const CMutableTransaction& tx = *psbt.tx;\n+\n+    if (PSBTInputSigned(input)) {\n+        return true;\n+    }\n+\n+    // Fill SignatureData with input info\n+    SignatureData sigdata;\n+    input.FillSignatureData(sigdata);\n+\n+    // Get UTXO\n+    bool require_witness_sig = false;\n+    CTxOut utxo;\n+\n+    // Verify input sanity, which checks that at most one of witness or non-witness utxos is provided.\n+    if (!input.IsSane()) {\n+        return false;\n+    }\n+\n+    if (input.non_witness_utxo) {\n+        // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n+        COutPoint prevout = tx.vin[index].prevout;\n+        if (input.non_witness_utxo->GetHash() != prevout.hash) {\n+            return false;\n+        }\n+        utxo = input.non_witness_utxo->vout[prevout.n];\n+    } else if (!input.witness_utxo.IsNull()) {\n+        utxo = input.witness_utxo;\n+        // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n+        // the output being spent. This is safe in case a witness signature is produced (which includes this\n+        // information directly in the hash), but not for non-witness signatures. Remember that we require\n+        // a witness signature in this situation.\n+        require_witness_sig = true;\n+    } else {\n+        return false;\n+    }\n+\n+    MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+    sigdata.witness = false;\n+    bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    // Verify that a witness signature was produced in case one was required.\n+    if (require_witness_sig && !sigdata.witness) return false;\n+    input.FromSignatureData(sigdata);\n+\n+    // If we have a witness signature, use the smaller witness UTXO.\n+    if (sigdata.witness) {\n+        input.witness_utxo = utxo;\n+        input.non_witness_utxo = nullptr;\n+    }\n+\n+    return sig_complete;\n+}\n+\n+bool FinalizePSBT(PartiallySignedTransaction& psbtx)\n+{\n+    // Finalize input signatures -- in case we have partial signatures that add up to a complete\n+    //   signature, but have not combined them yet (e.g. because the combiner that created this\n+    //   PartiallySignedTransaction did not understand them), this will combine them into a final\n+    //   script.\n+    bool complete = true;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, SIGHASH_ALL);\n+    }\n+\n+    return complete;\n+}\n+\n+bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransaction& result)\n+{\n+    // It's not safe to extract a PSBT that isn't finalized, and there's no easy way to check\n+    //   whether a PSBT is finalized without finalizing it, so we just do this.\n+    if (!FinalizePSBT(psbtx)) {\n+        return false;\n+    }\n+\n+    result = *psbtx.tx;\n+    for (unsigned int i = 0; i < result.vin.size(); ++i) {\n+        result.vin[i].scriptSig = psbtx.inputs[i].final_script_sig;\n+        result.vin[i].scriptWitness = psbtx.inputs[i].final_script_witness;\n+    }\n+    return true;\n+}\n+\n+bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs)\n+{\n+    out = psbtxs[0]; // Copy the first one\n+\n+    // Merge\n+    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n+        if (!out.Merge(*it)) {\n+            error = TransactionError::PSBT_MISMATCH;\n+            return false;\n+        }\n+    }\n+    if (!out.IsSane()) {\n+        error = TransactionError::INVALID_PSBT;\n+        return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "e18790322bf997063e42d5c44ffc0724ec5dd6c8",
        "filename": "src/psbt.h",
        "status": "added",
        "additions": 574,
        "deletions": 0,
        "changes": 574,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -0,0 +1,574 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PSBT_H\n+#define BITCOIN_PSBT_H\n+\n+#include <attributes.h>\n+#include <node/transaction.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <script/sign.h>\n+\n+// Magic bytes\n+static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n+\n+// Global types\n+static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n+\n+// Input types\n+static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;\n+static constexpr uint8_t PSBT_IN_WITNESS_UTXO = 0x01;\n+static constexpr uint8_t PSBT_IN_PARTIAL_SIG = 0x02;\n+static constexpr uint8_t PSBT_IN_SIGHASH = 0x03;\n+static constexpr uint8_t PSBT_IN_REDEEMSCRIPT = 0x04;\n+static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;\n+static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;\n+static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;\n+static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;\n+\n+// Output types\n+static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;\n+static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;\n+static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n+\n+// The separator is 0x00. Reading this in means that the unserializer can interpret it\n+// as a 0 length key which indicates that this is the separator. The separator has no value.\n+static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n+\n+/** A structure for PSBTs which contain per-input information */\n+struct PSBTInput\n+{\n+    CTransactionRef non_witness_utxo;\n+    CTxOut witness_utxo;\n+    CScript redeem_script;\n+    CScript witness_script;\n+    CScript final_script_sig;\n+    CScriptWitness final_script_witness;\n+    std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+    std::map<CKeyID, SigPair> partial_sigs;\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+    int sighash_type = 0;\n+\n+    bool IsNull() const;\n+    void FillSignatureData(SignatureData& sigdata) const;\n+    void FromSignatureData(const SignatureData& sigdata);\n+    void Merge(const PSBTInput& input);\n+    bool IsSane() const;\n+    PSBTInput() {}\n+\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const {\n+        // Write the utxo\n+        // If there is a non-witness utxo, then don't add the witness one.\n+        if (non_witness_utxo) {\n+            SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n+            OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+            SerializeToVector(os, non_witness_utxo);\n+        } else if (!witness_utxo.IsNull()) {\n+            SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n+            SerializeToVector(s, witness_utxo);\n+        }\n+\n+        if (final_script_sig.empty() && final_script_witness.IsNull()) {\n+            // Write any partial signatures\n+            for (auto sig_pair : partial_sigs) {\n+                SerializeToVector(s, PSBT_IN_PARTIAL_SIG, MakeSpan(sig_pair.second.first));\n+                s << sig_pair.second.second;\n+            }\n+\n+            // Write the sighash type\n+            if (sighash_type > 0) {\n+                SerializeToVector(s, PSBT_IN_SIGHASH);\n+                SerializeToVector(s, sighash_type);\n+            }\n+\n+            // Write the redeem script\n+            if (!redeem_script.empty()) {\n+                SerializeToVector(s, PSBT_IN_REDEEMSCRIPT);\n+                s << redeem_script;\n+            }\n+\n+            // Write the witness script\n+            if (!witness_script.empty()) {\n+                SerializeToVector(s, PSBT_IN_WITNESSSCRIPT);\n+                s << witness_script;\n+            }\n+\n+            // Write any hd keypaths\n+            SerializeHDKeypaths(s, hd_keypaths, PSBT_IN_BIP32_DERIVATION);\n+        }\n+\n+        // Write script sig\n+        if (!final_script_sig.empty()) {\n+            SerializeToVector(s, PSBT_IN_SCRIPTSIG);\n+            s << final_script_sig;\n+        }\n+        // write script witness\n+        if (!final_script_witness.IsNull()) {\n+            SerializeToVector(s, PSBT_IN_SCRIPTWITNESS);\n+            SerializeToVector(s, final_script_witness.stack);\n+        }\n+\n+        // Write unknown things\n+        for (auto& entry : unknown) {\n+            s << entry.first;\n+            s << entry.second;\n+        }\n+\n+        s << PSBT_SEPARATOR;\n+    }\n+\n+\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s) {\n+        // Read loop\n+        bool found_sep = false;\n+        while(!s.empty()) {\n+            // Read\n+            std::vector<unsigned char> key;\n+            s >> key;\n+\n+            // the key is empty if that was actually a separator byte\n+            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n+\n+            // First byte of key is the type\n+            unsigned char type = key[0];\n+\n+            // Do stuff based on type\n+            switch(type) {\n+                case PSBT_IN_NON_WITNESS_UTXO:\n+                {\n+                    if (non_witness_utxo) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input non-witness utxo already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Non-witness utxo key is more than one byte type\");\n+                    }\n+                    // Set the stream to unserialize with witness since this is always a valid network transaction\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() & ~SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, non_witness_utxo);\n+                    break;\n+                }\n+                case PSBT_IN_WITNESS_UTXO:\n+                    if (!witness_utxo.IsNull()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input witness utxo already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Witness utxo key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, witness_utxo);\n+                    break;\n+                case PSBT_IN_PARTIAL_SIG:\n+                {\n+                    // Make sure that the key is the size of pubkey + 1\n+                    if (key.size() != CPubKey::PUBLIC_KEY_SIZE + 1 && key.size() != CPubKey::COMPRESSED_PUBLIC_KEY_SIZE + 1) {\n+                        throw std::ios_base::failure(\"Size of key was not the expected size for the type partial signature pubkey\");\n+                    }\n+                    // Read in the pubkey from key\n+                    CPubKey pubkey(key.begin() + 1, key.end());\n+                    if (!pubkey.IsFullyValid()) {\n+                       throw std::ios_base::failure(\"Invalid pubkey\");\n+                    }\n+                    if (partial_sigs.count(pubkey.GetID()) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input partial signature for pubkey already provided\");\n+                    }\n+\n+                    // Read in the signature from value\n+                    std::vector<unsigned char> sig;\n+                    s >> sig;\n+\n+                    // Add to list\n+                    partial_sigs.emplace(pubkey.GetID(), SigPair(pubkey, std::move(sig)));\n+                    break;\n+                }\n+                case PSBT_IN_SIGHASH:\n+                    if (sighash_type > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input sighash type already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Sighash type key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, sighash_type);\n+                    break;\n+                case PSBT_IN_REDEEMSCRIPT:\n+                {\n+                    if (!redeem_script.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input redeemScript already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Input redeemScript key is more than one byte type\");\n+                    }\n+                    s >> redeem_script;\n+                    break;\n+                }\n+                case PSBT_IN_WITNESSSCRIPT:\n+                {\n+                    if (!witness_script.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input witnessScript already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Input witnessScript key is more than one byte type\");\n+                    }\n+                    s >> witness_script;\n+                    break;\n+                }\n+                case PSBT_IN_BIP32_DERIVATION:\n+                {\n+                    DeserializeHDKeypaths(s, key, hd_keypaths);\n+                    break;\n+                }\n+                case PSBT_IN_SCRIPTSIG:\n+                {\n+                    if (!final_script_sig.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input final scriptSig already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Final scriptSig key is more than one byte type\");\n+                    }\n+                    s >> final_script_sig;\n+                    break;\n+                }\n+                case PSBT_IN_SCRIPTWITNESS:\n+                {\n+                    if (!final_script_witness.IsNull()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, input final scriptWitness already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Final scriptWitness key is more than one byte type\");\n+                    }\n+                    UnserializeFromVector(s, final_script_witness.stack);\n+                    break;\n+                }\n+                // Unknown stuff\n+                default:\n+                    if (unknown.count(key) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n+                    }\n+                    // Read in the value\n+                    std::vector<unsigned char> val_bytes;\n+                    s >> val_bytes;\n+                    unknown.emplace(std::move(key), std::move(val_bytes));\n+                    break;\n+            }\n+        }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of an input map\");\n+        }\n+    }\n+\n+    template <typename Stream>\n+    PSBTInput(deserialize_type, Stream& s) {\n+        Unserialize(s);\n+    }\n+};\n+\n+/** A structure for PSBTs which contains per output information */\n+struct PSBTOutput\n+{\n+    CScript redeem_script;\n+    CScript witness_script;\n+    std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+\n+    bool IsNull() const;\n+    void FillSignatureData(SignatureData& sigdata) const;\n+    void FromSignatureData(const SignatureData& sigdata);\n+    void Merge(const PSBTOutput& output);\n+    bool IsSane() const;\n+    PSBTOutput() {}\n+\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const {\n+        // Write the redeem script\n+        if (!redeem_script.empty()) {\n+            SerializeToVector(s, PSBT_OUT_REDEEMSCRIPT);\n+            s << redeem_script;\n+        }\n+\n+        // Write the witness script\n+        if (!witness_script.empty()) {\n+            SerializeToVector(s, PSBT_OUT_WITNESSSCRIPT);\n+            s << witness_script;\n+        }\n+\n+        // Write any hd keypaths\n+        SerializeHDKeypaths(s, hd_keypaths, PSBT_OUT_BIP32_DERIVATION);\n+\n+        // Write unknown things\n+        for (auto& entry : unknown) {\n+            s << entry.first;\n+            s << entry.second;\n+        }\n+\n+        s << PSBT_SEPARATOR;\n+    }\n+\n+\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s) {\n+        // Read loop\n+        bool found_sep = false;\n+        while(!s.empty()) {\n+            // Read\n+            std::vector<unsigned char> key;\n+            s >> key;\n+\n+            // the key is empty if that was actually a separator byte\n+            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n+\n+            // First byte of key is the type\n+            unsigned char type = key[0];\n+\n+            // Do stuff based on type\n+            switch(type) {\n+                case PSBT_OUT_REDEEMSCRIPT:\n+                {\n+                    if (!redeem_script.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, output redeemScript already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Output redeemScript key is more than one byte type\");\n+                    }\n+                    s >> redeem_script;\n+                    break;\n+                }\n+                case PSBT_OUT_WITNESSSCRIPT:\n+                {\n+                    if (!witness_script.empty()) {\n+                        throw std::ios_base::failure(\"Duplicate Key, output witnessScript already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Output witnessScript key is more than one byte type\");\n+                    }\n+                    s >> witness_script;\n+                    break;\n+                }\n+                case PSBT_OUT_BIP32_DERIVATION:\n+                {\n+                    DeserializeHDKeypaths(s, key, hd_keypaths);\n+                    break;\n+                }\n+                // Unknown stuff\n+                default: {\n+                    if (unknown.count(key) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n+                    }\n+                    // Read in the value\n+                    std::vector<unsigned char> val_bytes;\n+                    s >> val_bytes;\n+                    unknown.emplace(std::move(key), std::move(val_bytes));\n+                    break;\n+                }\n+            }\n+        }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of an output map\");\n+        }\n+    }\n+\n+    template <typename Stream>\n+    PSBTOutput(deserialize_type, Stream& s) {\n+        Unserialize(s);\n+    }\n+};\n+\n+/** A version of CTransaction with the PSBT format*/\n+struct PartiallySignedTransaction\n+{\n+    boost::optional<CMutableTransaction> tx;\n+    std::vector<PSBTInput> inputs;\n+    std::vector<PSBTOutput> outputs;\n+    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+\n+    bool IsNull() const;\n+\n+    /** Merge psbt into this. The two psbts must have the same underlying CTransaction (i.e. the\n+      * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n+    NODISCARD bool Merge(const PartiallySignedTransaction& psbt);\n+    bool IsSane() const;\n+    PartiallySignedTransaction() {}\n+    PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n+    explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n+\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const {\n+\n+        // magic bytes\n+        s << PSBT_MAGIC_BYTES;\n+\n+        // unsigned tx flag\n+        SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n+\n+        // Write serialized tx to a stream\n+        OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+        SerializeToVector(os, *tx);\n+\n+        // Write the unknown things\n+        for (auto& entry : unknown) {\n+            s << entry.first;\n+            s << entry.second;\n+        }\n+\n+        // Separator\n+        s << PSBT_SEPARATOR;\n+\n+        // Write inputs\n+        for (const PSBTInput& input : inputs) {\n+            s << input;\n+        }\n+        // Write outputs\n+        for (const PSBTOutput& output : outputs) {\n+            s << output;\n+        }\n+    }\n+\n+\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s) {\n+        // Read the magic bytes\n+        uint8_t magic[5];\n+        s >> magic;\n+        if (!std::equal(magic, magic + 5, PSBT_MAGIC_BYTES)) {\n+            throw std::ios_base::failure(\"Invalid PSBT magic bytes\");\n+        }\n+\n+        // Read global data\n+        bool found_sep = false;\n+        while(!s.empty()) {\n+            // Read\n+            std::vector<unsigned char> key;\n+            s >> key;\n+\n+            // the key is empty if that was actually a separator byte\n+            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n+\n+            // First byte of key is the type\n+            unsigned char type = key[0];\n+\n+            // Do stuff based on type\n+            switch(type) {\n+                case PSBT_GLOBAL_UNSIGNED_TX:\n+                {\n+                    if (tx) {\n+                        throw std::ios_base::failure(\"Duplicate Key, unsigned tx already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Global unsigned tx key is more than one byte type\");\n+                    }\n+                    CMutableTransaction mtx;\n+                    // Set the stream to serialize with non-witness since this should always be non-witness\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, mtx);\n+                    tx = std::move(mtx);\n+                    // Make sure that all scriptSigs and scriptWitnesses are empty\n+                    for (const CTxIn& txin : tx->vin) {\n+                        if (!txin.scriptSig.empty() || !txin.scriptWitness.IsNull()) {\n+                            throw std::ios_base::failure(\"Unsigned tx does not have empty scriptSigs and scriptWitnesses.\");\n+                        }\n+                    }\n+                    break;\n+                }\n+                // Unknown stuff\n+                default: {\n+                    if (unknown.count(key) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n+                    }\n+                    // Read in the value\n+                    std::vector<unsigned char> val_bytes;\n+                    s >> val_bytes;\n+                    unknown.emplace(std::move(key), std::move(val_bytes));\n+                }\n+            }\n+        }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of the global map\");\n+        }\n+\n+        // Make sure that we got an unsigned tx\n+        if (!tx) {\n+            throw std::ios_base::failure(\"No unsigned transcation was provided\");\n+        }\n+\n+        // Read input data\n+        unsigned int i = 0;\n+        while (!s.empty() && i < tx->vin.size()) {\n+            PSBTInput input;\n+            s >> input;\n+            inputs.push_back(input);\n+\n+            // Make sure the non-witness utxo matches the outpoint\n+            if (input.non_witness_utxo && input.non_witness_utxo->GetHash() != tx->vin[i].prevout.hash) {\n+                throw std::ios_base::failure(\"Non-witness UTXO does not match outpoint hash\");\n+            }\n+            ++i;\n+        }\n+        // Make sure that the number of inputs matches the number of inputs in the transaction\n+        if (inputs.size() != tx->vin.size()) {\n+            throw std::ios_base::failure(\"Inputs provided does not match the number of inputs in transaction.\");\n+        }\n+\n+        // Read output data\n+        i = 0;\n+        while (!s.empty() && i < tx->vout.size()) {\n+            PSBTOutput output;\n+            s >> output;\n+            outputs.push_back(output);\n+            ++i;\n+        }\n+        // Make sure that the number of outputs matches the number of outputs in the transaction\n+        if (outputs.size() != tx->vout.size()) {\n+            throw std::ios_base::failure(\"Outputs provided does not match the number of outputs in transaction.\");\n+        }\n+        // Sanity check\n+        if (!IsSane()) {\n+            throw std::ios_base::failure(\"PSBT is not sane.\");\n+        }\n+    }\n+\n+    template <typename Stream>\n+    PartiallySignedTransaction(deserialize_type, Stream& s) {\n+        Unserialize(s);\n+    }\n+};\n+\n+/** Checks whether a PSBTInput is already signed. */\n+bool PSBTInputSigned(PSBTInput& input);\n+\n+/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL);\n+\n+/**\n+ * Finalizes a PSBT if possible, combining partial signatures.\n+ *\n+ * @param[in,out] &psbtx reference to PartiallySignedTransaction to finalize\n+ * return True if the PSBT is now complete, false otherwise\n+ */\n+bool FinalizePSBT(PartiallySignedTransaction& psbtx);\n+\n+/**\n+ * Finalizes a PSBT if possible, and extracts it to a CMutableTransaction if it could be finalized.\n+ *\n+ * @param[in]  &psbtx reference to PartiallySignedTransaction\n+ * @param[out] result CMutableTransaction representing the complete transaction, if successful\n+ * @return True if we successfully extracted the transaction, false otherwise\n+ */\n+bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransaction& result);\n+\n+/**\n+ * Combines PSBTs with the same underlying transaction, resulting in a single PSBT with all partial signatures from each input.\n+ *\n+ * @param[out] &out   the combined PSBT, if successful\n+ * @param[out] &error reference to TransactionError to fill with error info on failure\n+ * @param[in]  psbtxs the PSBTs to combine\n+ * @return True if we successfully combined the transactions, false if they were not compatible\n+ */\n+bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs);\n+\n+#endif // BITCOIN_PSBT_H"
      },
      {
        "sha": "7fe73e56da160f2cf6c16b8f2f30ecbb3b3b68d6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 93,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -13,24 +13,23 @@\n #include <key_io.h>\n #include <keystore.h>\n #include <merkleblock.h>\n-#include <net.h>\n+#include <node/transaction.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n+#include <psbt.h>\n #include <rpc/rawtransaction.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/script.h>\n #include <script/script_error.h>\n #include <script/sign.h>\n #include <script/standard.h>\n-#include <txmempool.h>\n #include <uint256.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n-#include <future>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -1041,76 +1040,24 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    std::promise<void> promise;\n-\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n     // parse hex string from parameter\n     CMutableTransaction mtx;\n     if (!DecodeHexTx(mtx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& hashTx = tx->GetHash();\n-\n-    CAmount nMaxRawTxFee = maxTxFee;\n-    if (!request.params[1].isNull() && request.params[1].get_bool())\n-        nMaxRawTxFee = 0;\n \n-    { // cs_main scope\n-    LOCK(cs_main);\n-    CCoinsViewCache &view = *pcoinsTip;\n-    bool fHaveChain = false;\n-    for (size_t o = 0; !fHaveChain && o < tx->vout.size(); o++) {\n-        const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n-        fHaveChain = !existingCoin.IsSpent();\n+    bool allowhighfees = false;\n+    if (!request.params[1].isNull()) allowhighfees = request.params[1].get_bool();\n+    uint256 txid;\n+    TransactionError err;\n+    std::string err_string;\n+    if (!BroadcastTransaction(tx, txid, err, err_string, allowhighfees)) {\n+        throw JSONRPCTransactionError(err, err_string);\n     }\n-    bool fHaveMempool = mempool.exists(hashTx);\n-    if (!fHaveMempool && !fHaveChain) {\n-        // push to local node and sync with wallets\n-        CValidationState state;\n-        bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n-            if (state.IsInvalid()) {\n-                throw JSONRPCError(RPC_TRANSACTION_REJECTED, FormatStateMessage(state));\n-            } else {\n-                if (fMissingInputs) {\n-                    throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n-                }\n-                throw JSONRPCError(RPC_TRANSACTION_ERROR, FormatStateMessage(state));\n-            }\n-        } else {\n-            // If wallet is enabled, ensure that the wallet has been made aware\n-            // of the new transaction prior to returning. This prevents a race\n-            // where a user might call sendrawtransaction with a transaction\n-            // to/from their wallet, immediately call some wallet RPC, and get\n-            // a stale result because callbacks have not yet been processed.\n-            CallFunctionInValidationInterfaceQueue([&promise] {\n-                promise.set_value();\n-            });\n-        }\n-    } else if (fHaveChain) {\n-        throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n-    } else {\n-        // Make sure we don't block forever if re-sending\n-        // a transaction already in mempool.\n-        promise.set_value();\n-    }\n-\n-    } // cs_main\n-\n-    promise.get_future().wait();\n-\n-    if(!g_connman)\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    CInv inv(MSG_TX, hashTx);\n-    g_connman->ForEachNode([&inv](CNode* pnode)\n-    {\n-        pnode->PushInventory(inv);\n-    });\n-\n-    return hashTx.GetHex();\n+    return txid.GetHex();\n }\n \n static UniValue testmempoolaccept(const JSONRPCRequest& request)\n@@ -1323,7 +1270,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n     // Unserialize the transactions\n     PartiallySignedTransaction psbtx;\n     std::string error;\n-    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n@@ -1524,23 +1471,16 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n     for (unsigned int i = 0; i < txs.size(); ++i) {\n         PartiallySignedTransaction psbtx;\n         std::string error;\n-        if (!DecodePSBT(psbtx, txs[i].get_str(), error)) {\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n             throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n         }\n         psbtxs.push_back(psbtx);\n     }\n \n-    PartiallySignedTransaction merged_psbt(psbtxs[0]); // Copy the first one\n-\n-    // Merge\n-    for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n-        if (*it != merged_psbt) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"PSBTs do not refer to the same transactions.\");\n-        }\n-        merged_psbt.Merge(*it);\n-    }\n-    if (!merged_psbt.IsSane()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Merged PSBT is inconsistent\");\n+    PartiallySignedTransaction merged_psbt;\n+    TransactionError error;\n+    if (!CombinePSBTs(merged_psbt, error, psbtxs)) {\n+        throw JSONRPCTransactionError(error);\n     }\n \n     UniValue result(UniValue::VOBJ);\n@@ -1581,33 +1521,27 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n     // Unserialize the transactions\n     PartiallySignedTransaction psbtx;\n     std::string error;\n-    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    // Finalize input signatures -- in case we have partial signatures that add up to a complete\n-    //   signature, but have not combined them yet (e.g. because the combiner that created this\n-    //   PartiallySignedTransaction did not understand them), this will combine them into a final\n-    //   script.\n-    bool complete = true;\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, SIGHASH_ALL);\n-    }\n+    bool extract = request.params[1].isNull() || (!request.params[1].isNull() && request.params[1].get_bool());\n+\n+    CMutableTransaction mtx;\n+    bool complete = FinalizeAndExtractPSBT(psbtx, mtx);\n \n     UniValue result(UniValue::VOBJ);\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-    bool extract = request.params[1].isNull() || (!request.params[1].isNull() && request.params[1].get_bool());\n+    std::string result_str;\n+\n     if (complete && extract) {\n-        CMutableTransaction mtx(*psbtx.tx);\n-        for (unsigned int i = 0; i < mtx.vin.size(); ++i) {\n-            mtx.vin[i].scriptSig = psbtx.inputs[i].final_script_sig;\n-            mtx.vin[i].scriptWitness = psbtx.inputs[i].final_script_witness;\n-        }\n         ssTx << mtx;\n-        result.pushKV(\"hex\", HexStr(ssTx.str()));\n+        result_str = HexStr(ssTx.str());\n+        result.pushKV(\"hex\", result_str);\n     } else {\n         ssTx << psbtx;\n-        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+        result_str = EncodeBase64(ssTx.str());\n+        result.pushKV(\"psbt\", result_str);\n     }\n     result.pushKV(\"complete\", complete);\n "
      },
      {
        "sha": "023b4b67469cb46bdfe041ee105ae44da239dd0b",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -141,6 +141,34 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n     return (unsigned int)target;\n }\n \n+RPCErrorCode RPCErrorFromTransactionError(TransactionError terr)\n+{\n+    switch (terr) {\n+        case TransactionError::MEMPOOL_REJECTED:\n+            return RPC_TRANSACTION_REJECTED;\n+        case TransactionError::ALREADY_IN_CHAIN:\n+            return RPC_TRANSACTION_ALREADY_IN_CHAIN;\n+        case TransactionError::P2P_DISABLED:\n+            return RPC_CLIENT_P2P_DISABLED;\n+        case TransactionError::INVALID_PSBT:\n+        case TransactionError::PSBT_MISMATCH:\n+            return RPC_INVALID_PARAMETER;\n+        case TransactionError::SIGHASH_MISMATCH:\n+            return RPC_DESERIALIZATION_ERROR;\n+        default: break;\n+    }\n+    return RPC_TRANSACTION_ERROR;\n+}\n+\n+UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string)\n+{\n+    if (err_string.length() > 0) {\n+        return JSONRPCError(RPCErrorFromTransactionError(terr), err_string);\n+    } else {\n+        return JSONRPCError(RPCErrorFromTransactionError(terr), TransactionErrorString(terr));\n+    }\n+}\n+\n struct Section {\n     Section(const std::string& left, const std::string& right)\n         : m_left{left}, m_right{right} {}"
      },
      {
        "sha": "1c9ddcdf44d3bd3548d818c29d2fa639337255bd",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_RPC_UTIL_H\n #define BITCOIN_RPC_UTIL_H\n \n+#include <node/transaction.h>\n #include <pubkey.h>\n #include <script/standard.h>\n #include <univalue.h>\n@@ -33,6 +34,9 @@ UniValue DescribeAddress(const CTxDestination& dest);\n //! Parse a confirm target option and raise an RPC error if it is invalid.\n unsigned int ParseConfirmTarget(const UniValue& value);\n \n+RPCErrorCode RPCErrorFromTransactionError(TransactionError terr);\n+UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string = \"\");\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,"
      },
      {
        "sha": "9d6a390ea2119b8f4d5874eceeeb620fef042343",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 221,
        "changes": 221,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -232,67 +232,6 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     return sigdata.complete;\n }\n \n-bool PSBTInputSigned(PSBTInput& input)\n-{\n-    return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n-}\n-\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash)\n-{\n-    PSBTInput& input = psbt.inputs.at(index);\n-    const CMutableTransaction& tx = *psbt.tx;\n-\n-    if (PSBTInputSigned(input)) {\n-        return true;\n-    }\n-\n-    // Fill SignatureData with input info\n-    SignatureData sigdata;\n-    input.FillSignatureData(sigdata);\n-\n-    // Get UTXO\n-    bool require_witness_sig = false;\n-    CTxOut utxo;\n-\n-    // Verify input sanity, which checks that at most one of witness or non-witness utxos is provided.\n-    if (!input.IsSane()) {\n-        return false;\n-    }\n-\n-    if (input.non_witness_utxo) {\n-        // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n-        COutPoint prevout = tx.vin[index].prevout;\n-        if (input.non_witness_utxo->GetHash() != prevout.hash) {\n-            return false;\n-        }\n-        utxo = input.non_witness_utxo->vout[prevout.n];\n-    } else if (!input.witness_utxo.IsNull()) {\n-        utxo = input.witness_utxo;\n-        // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n-        // the output being spent. This is safe in case a witness signature is produced (which includes this\n-        // information directly in the hash), but not for non-witness signatures. Remember that we require\n-        // a witness signature in this situation.\n-        require_witness_sig = true;\n-    } else {\n-        return false;\n-    }\n-\n-    MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n-    sigdata.witness = false;\n-    bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n-    // Verify that a witness signature was produced in case one was required.\n-    if (require_witness_sig && !sigdata.witness) return false;\n-    input.FromSignatureData(sigdata);\n-\n-    // If we have a witness signature, use the smaller witness UTXO.\n-    if (sigdata.witness) {\n-        input.witness_utxo = utxo;\n-        input.non_witness_utxo = nullptr;\n-    }\n-\n-    return sig_complete;\n-}\n-\n class SignatureExtractorChecker final : public BaseSignatureChecker\n {\n private:\n@@ -509,166 +448,6 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n     return false;\n }\n \n-PartiallySignedTransaction::PartiallySignedTransaction(const CMutableTransaction& tx) : tx(tx)\n-{\n-    inputs.resize(tx.vin.size());\n-    outputs.resize(tx.vout.size());\n-}\n-\n-bool PartiallySignedTransaction::IsNull() const\n-{\n-    return !tx && inputs.empty() && outputs.empty() && unknown.empty();\n-}\n-\n-void PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n-{\n-    for (unsigned int i = 0; i < inputs.size(); ++i) {\n-        inputs[i].Merge(psbt.inputs[i]);\n-    }\n-    for (unsigned int i = 0; i < outputs.size(); ++i) {\n-        outputs[i].Merge(psbt.outputs[i]);\n-    }\n-    unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n-}\n-\n-bool PartiallySignedTransaction::IsSane() const\n-{\n-    for (PSBTInput input : inputs) {\n-        if (!input.IsSane()) return false;\n-    }\n-    return true;\n-}\n-\n-bool PSBTInput::IsNull() const\n-{\n-    return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();\n-}\n-\n-void PSBTInput::FillSignatureData(SignatureData& sigdata) const\n-{\n-    if (!final_script_sig.empty()) {\n-        sigdata.scriptSig = final_script_sig;\n-        sigdata.complete = true;\n-    }\n-    if (!final_script_witness.IsNull()) {\n-        sigdata.scriptWitness = final_script_witness;\n-        sigdata.complete = true;\n-    }\n-    if (sigdata.complete) {\n-        return;\n-    }\n-\n-    sigdata.signatures.insert(partial_sigs.begin(), partial_sigs.end());\n-    if (!redeem_script.empty()) {\n-        sigdata.redeem_script = redeem_script;\n-    }\n-    if (!witness_script.empty()) {\n-        sigdata.witness_script = witness_script;\n-    }\n-    for (const auto& key_pair : hd_keypaths) {\n-        sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n-    }\n-}\n-\n-void PSBTInput::FromSignatureData(const SignatureData& sigdata)\n-{\n-    if (sigdata.complete) {\n-        partial_sigs.clear();\n-        hd_keypaths.clear();\n-        redeem_script.clear();\n-        witness_script.clear();\n-\n-        if (!sigdata.scriptSig.empty()) {\n-            final_script_sig = sigdata.scriptSig;\n-        }\n-        if (!sigdata.scriptWitness.IsNull()) {\n-            final_script_witness = sigdata.scriptWitness;\n-        }\n-        return;\n-    }\n-\n-    partial_sigs.insert(sigdata.signatures.begin(), sigdata.signatures.end());\n-    if (redeem_script.empty() && !sigdata.redeem_script.empty()) {\n-        redeem_script = sigdata.redeem_script;\n-    }\n-    if (witness_script.empty() && !sigdata.witness_script.empty()) {\n-        witness_script = sigdata.witness_script;\n-    }\n-    for (const auto& entry : sigdata.misc_pubkeys) {\n-        hd_keypaths.emplace(entry.second);\n-    }\n-}\n-\n-void PSBTInput::Merge(const PSBTInput& input)\n-{\n-    if (!non_witness_utxo && input.non_witness_utxo) non_witness_utxo = input.non_witness_utxo;\n-    if (witness_utxo.IsNull() && !input.witness_utxo.IsNull()) {\n-        witness_utxo = input.witness_utxo;\n-        non_witness_utxo = nullptr; // Clear out any non-witness utxo when we set a witness one.\n-    }\n-\n-    partial_sigs.insert(input.partial_sigs.begin(), input.partial_sigs.end());\n-    hd_keypaths.insert(input.hd_keypaths.begin(), input.hd_keypaths.end());\n-    unknown.insert(input.unknown.begin(), input.unknown.end());\n-\n-    if (redeem_script.empty() && !input.redeem_script.empty()) redeem_script = input.redeem_script;\n-    if (witness_script.empty() && !input.witness_script.empty()) witness_script = input.witness_script;\n-    if (final_script_sig.empty() && !input.final_script_sig.empty()) final_script_sig = input.final_script_sig;\n-    if (final_script_witness.IsNull() && !input.final_script_witness.IsNull()) final_script_witness = input.final_script_witness;\n-}\n-\n-bool PSBTInput::IsSane() const\n-{\n-    // Cannot have both witness and non-witness utxos\n-    if (!witness_utxo.IsNull() && non_witness_utxo) return false;\n-\n-    // If we have a witness_script or a scriptWitness, we must also have a witness utxo\n-    if (!witness_script.empty() && witness_utxo.IsNull()) return false;\n-    if (!final_script_witness.IsNull() && witness_utxo.IsNull()) return false;\n-\n-    return true;\n-}\n-\n-void PSBTOutput::FillSignatureData(SignatureData& sigdata) const\n-{\n-    if (!redeem_script.empty()) {\n-        sigdata.redeem_script = redeem_script;\n-    }\n-    if (!witness_script.empty()) {\n-        sigdata.witness_script = witness_script;\n-    }\n-    for (const auto& key_pair : hd_keypaths) {\n-        sigdata.misc_pubkeys.emplace(key_pair.first.GetID(), key_pair);\n-    }\n-}\n-\n-void PSBTOutput::FromSignatureData(const SignatureData& sigdata)\n-{\n-    if (redeem_script.empty() && !sigdata.redeem_script.empty()) {\n-        redeem_script = sigdata.redeem_script;\n-    }\n-    if (witness_script.empty() && !sigdata.witness_script.empty()) {\n-        witness_script = sigdata.witness_script;\n-    }\n-    for (const auto& entry : sigdata.misc_pubkeys) {\n-        hd_keypaths.emplace(entry.second);\n-    }\n-}\n-\n-bool PSBTOutput::IsNull() const\n-{\n-    return redeem_script.empty() && witness_script.empty() && hd_keypaths.empty() && unknown.empty();\n-}\n-\n-void PSBTOutput::Merge(const PSBTOutput& output)\n-{\n-    hd_keypaths.insert(output.hd_keypaths.begin(), output.hd_keypaths.end());\n-    unknown.insert(output.unknown.begin(), output.unknown.end());\n-\n-    if (redeem_script.empty() && !output.redeem_script.empty()) redeem_script = output.redeem_script;\n-    if (witness_script.empty() && !output.witness_script.empty()) witness_script = output.witness_script;\n-}\n-\n bool HidingSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const\n {\n     return m_provider->GetCScript(scriptid, script);"
      },
      {
        "sha": "64eb3eb8e5328516f30fe914ecb87bc65ff2f1e8",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 0,
        "deletions": 540,
        "changes": 540,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -123,32 +123,6 @@ struct SignatureData {\n     void MergeSignatureData(SignatureData sigdata);\n };\n \n-// Magic bytes\n-static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n-\n-// Global types\n-static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n-\n-// Input types\n-static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;\n-static constexpr uint8_t PSBT_IN_WITNESS_UTXO = 0x01;\n-static constexpr uint8_t PSBT_IN_PARTIAL_SIG = 0x02;\n-static constexpr uint8_t PSBT_IN_SIGHASH = 0x03;\n-static constexpr uint8_t PSBT_IN_REDEEMSCRIPT = 0x04;\n-static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;\n-static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;\n-static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;\n-static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;\n-\n-// Output types\n-static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;\n-static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;\n-static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n-\n-// The separator is 0x00. Reading this in means that the unserializer can interpret it\n-// as a 0 length key which indicates that this is the separator. The separator has no value.\n-static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n-\n // Takes a stream and multiple arguments and serializes them as if first serialized into a vector and then into the stream\n // The resulting output into the stream has the total serialized length of all of the objects followed by all objects concatenated with each other.\n template<typename Stream, typename... X>\n@@ -223,527 +197,13 @@ void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_k\n     }\n }\n \n-/** A structure for PSBTs which contain per-input information */\n-struct PSBTInput\n-{\n-    CTransactionRef non_witness_utxo;\n-    CTxOut witness_utxo;\n-    CScript redeem_script;\n-    CScript witness_script;\n-    CScript final_script_sig;\n-    CScriptWitness final_script_witness;\n-    std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n-    std::map<CKeyID, SigPair> partial_sigs;\n-    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n-    int sighash_type = 0;\n-\n-    bool IsNull() const;\n-    void FillSignatureData(SignatureData& sigdata) const;\n-    void FromSignatureData(const SignatureData& sigdata);\n-    void Merge(const PSBTInput& input);\n-    bool IsSane() const;\n-    PSBTInput() {}\n-\n-    template <typename Stream>\n-    inline void Serialize(Stream& s) const {\n-        // Write the utxo\n-        // If there is a non-witness utxo, then don't add the witness one.\n-        if (non_witness_utxo) {\n-            SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n-            OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n-            SerializeToVector(os, non_witness_utxo);\n-        } else if (!witness_utxo.IsNull()) {\n-            SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n-            SerializeToVector(s, witness_utxo);\n-        }\n-\n-        if (final_script_sig.empty() && final_script_witness.IsNull()) {\n-            // Write any partial signatures\n-            for (auto sig_pair : partial_sigs) {\n-                SerializeToVector(s, PSBT_IN_PARTIAL_SIG, MakeSpan(sig_pair.second.first));\n-                s << sig_pair.second.second;\n-            }\n-\n-            // Write the sighash type\n-            if (sighash_type > 0) {\n-                SerializeToVector(s, PSBT_IN_SIGHASH);\n-                SerializeToVector(s, sighash_type);\n-            }\n-\n-            // Write the redeem script\n-            if (!redeem_script.empty()) {\n-                SerializeToVector(s, PSBT_IN_REDEEMSCRIPT);\n-                s << redeem_script;\n-            }\n-\n-            // Write the witness script\n-            if (!witness_script.empty()) {\n-                SerializeToVector(s, PSBT_IN_WITNESSSCRIPT);\n-                s << witness_script;\n-            }\n-\n-            // Write any hd keypaths\n-            SerializeHDKeypaths(s, hd_keypaths, PSBT_IN_BIP32_DERIVATION);\n-        }\n-\n-        // Write script sig\n-        if (!final_script_sig.empty()) {\n-            SerializeToVector(s, PSBT_IN_SCRIPTSIG);\n-            s << final_script_sig;\n-        }\n-        // write script witness\n-        if (!final_script_witness.IsNull()) {\n-            SerializeToVector(s, PSBT_IN_SCRIPTWITNESS);\n-            SerializeToVector(s, final_script_witness.stack);\n-        }\n-\n-        // Write unknown things\n-        for (auto& entry : unknown) {\n-            s << entry.first;\n-            s << entry.second;\n-        }\n-\n-        s << PSBT_SEPARATOR;\n-    }\n-\n-\n-    template <typename Stream>\n-    inline void Unserialize(Stream& s) {\n-        // Read loop\n-        bool found_sep = false;\n-        while(!s.empty()) {\n-            // Read\n-            std::vector<unsigned char> key;\n-            s >> key;\n-\n-            // the key is empty if that was actually a separator byte\n-            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) {\n-                found_sep = true;\n-                break;\n-            }\n-\n-            // First byte of key is the type\n-            unsigned char type = key[0];\n-\n-            // Do stuff based on type\n-            switch(type) {\n-                case PSBT_IN_NON_WITNESS_UTXO:\n-                {\n-                    if (non_witness_utxo) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input non-witness utxo already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Non-witness utxo key is more than one byte type\");\n-                    }\n-                    // Set the stream to unserialize with witness since this is always a valid network transaction\n-                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() & ~SERIALIZE_TRANSACTION_NO_WITNESS);\n-                    UnserializeFromVector(os, non_witness_utxo);\n-                    break;\n-                }\n-                case PSBT_IN_WITNESS_UTXO:\n-                    if (!witness_utxo.IsNull()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input witness utxo already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Witness utxo key is more than one byte type\");\n-                    }\n-                    UnserializeFromVector(s, witness_utxo);\n-                    break;\n-                case PSBT_IN_PARTIAL_SIG:\n-                {\n-                    // Make sure that the key is the size of pubkey + 1\n-                    if (key.size() != CPubKey::PUBLIC_KEY_SIZE + 1 && key.size() != CPubKey::COMPRESSED_PUBLIC_KEY_SIZE + 1) {\n-                        throw std::ios_base::failure(\"Size of key was not the expected size for the type partial signature pubkey\");\n-                    }\n-                    // Read in the pubkey from key\n-                    CPubKey pubkey(key.begin() + 1, key.end());\n-                    if (!pubkey.IsFullyValid()) {\n-                       throw std::ios_base::failure(\"Invalid pubkey\");\n-                    }\n-                    if (partial_sigs.count(pubkey.GetID()) > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input partial signature for pubkey already provided\");\n-                    }\n-\n-                    // Read in the signature from value\n-                    std::vector<unsigned char> sig;\n-                    s >> sig;\n-\n-                    // Add to list\n-                    partial_sigs.emplace(pubkey.GetID(), SigPair(pubkey, std::move(sig)));\n-                    break;\n-                }\n-                case PSBT_IN_SIGHASH:\n-                    if (sighash_type > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input sighash type already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Sighash type key is more than one byte type\");\n-                    }\n-                    UnserializeFromVector(s, sighash_type);\n-                    break;\n-                case PSBT_IN_REDEEMSCRIPT:\n-                {\n-                    if (!redeem_script.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input redeemScript already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Input redeemScript key is more than one byte type\");\n-                    }\n-                    s >> redeem_script;\n-                    break;\n-                }\n-                case PSBT_IN_WITNESSSCRIPT:\n-                {\n-                    if (!witness_script.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input witnessScript already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Input witnessScript key is more than one byte type\");\n-                    }\n-                    s >> witness_script;\n-                    break;\n-                }\n-                case PSBT_IN_BIP32_DERIVATION:\n-                {\n-                    DeserializeHDKeypaths(s, key, hd_keypaths);\n-                    break;\n-                }\n-                case PSBT_IN_SCRIPTSIG:\n-                {\n-                    if (!final_script_sig.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input final scriptSig already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Final scriptSig key is more than one byte type\");\n-                    }\n-                    s >> final_script_sig;\n-                    break;\n-                }\n-                case PSBT_IN_SCRIPTWITNESS:\n-                {\n-                    if (!final_script_witness.IsNull()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, input final scriptWitness already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Final scriptWitness key is more than one byte type\");\n-                    }\n-                    UnserializeFromVector(s, final_script_witness.stack);\n-                    break;\n-                }\n-                // Unknown stuff\n-                default:\n-                    if (unknown.count(key) > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n-                    }\n-                    // Read in the value\n-                    std::vector<unsigned char> val_bytes;\n-                    s >> val_bytes;\n-                    unknown.emplace(std::move(key), std::move(val_bytes));\n-                    break;\n-            }\n-        }\n-\n-        if (!found_sep) {\n-            throw std::ios_base::failure(\"Separator is missing at the end of an input map\");\n-        }\n-    }\n-\n-    template <typename Stream>\n-    PSBTInput(deserialize_type, Stream& s) {\n-        Unserialize(s);\n-    }\n-};\n-\n-/** A structure for PSBTs which contains per output information */\n-struct PSBTOutput\n-{\n-    CScript redeem_script;\n-    CScript witness_script;\n-    std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n-    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n-\n-    bool IsNull() const;\n-    void FillSignatureData(SignatureData& sigdata) const;\n-    void FromSignatureData(const SignatureData& sigdata);\n-    void Merge(const PSBTOutput& output);\n-    bool IsSane() const;\n-    PSBTOutput() {}\n-\n-    template <typename Stream>\n-    inline void Serialize(Stream& s) const {\n-        // Write the redeem script\n-        if (!redeem_script.empty()) {\n-            SerializeToVector(s, PSBT_OUT_REDEEMSCRIPT);\n-            s << redeem_script;\n-        }\n-\n-        // Write the witness script\n-        if (!witness_script.empty()) {\n-            SerializeToVector(s, PSBT_OUT_WITNESSSCRIPT);\n-            s << witness_script;\n-        }\n-\n-        // Write any hd keypaths\n-        SerializeHDKeypaths(s, hd_keypaths, PSBT_OUT_BIP32_DERIVATION);\n-\n-        // Write unknown things\n-        for (auto& entry : unknown) {\n-            s << entry.first;\n-            s << entry.second;\n-        }\n-\n-        s << PSBT_SEPARATOR;\n-    }\n-\n-\n-    template <typename Stream>\n-    inline void Unserialize(Stream& s) {\n-        // Read loop\n-        bool found_sep = false;\n-        while(!s.empty()) {\n-            // Read\n-            std::vector<unsigned char> key;\n-            s >> key;\n-\n-            // the key is empty if that was actually a separator byte\n-            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) {\n-                found_sep = true;\n-                break;\n-            }\n-\n-            // First byte of key is the type\n-            unsigned char type = key[0];\n-\n-            // Do stuff based on type\n-            switch(type) {\n-                case PSBT_OUT_REDEEMSCRIPT:\n-                {\n-                    if (!redeem_script.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, output redeemScript already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Output redeemScript key is more than one byte type\");\n-                    }\n-                    s >> redeem_script;\n-                    break;\n-                }\n-                case PSBT_OUT_WITNESSSCRIPT:\n-                {\n-                    if (!witness_script.empty()) {\n-                        throw std::ios_base::failure(\"Duplicate Key, output witnessScript already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Output witnessScript key is more than one byte type\");\n-                    }\n-                    s >> witness_script;\n-                    break;\n-                }\n-                case PSBT_OUT_BIP32_DERIVATION:\n-                {\n-                    DeserializeHDKeypaths(s, key, hd_keypaths);\n-                    break;\n-                }\n-                // Unknown stuff\n-                default: {\n-                    if (unknown.count(key) > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n-                    }\n-                    // Read in the value\n-                    std::vector<unsigned char> val_bytes;\n-                    s >> val_bytes;\n-                    unknown.emplace(std::move(key), std::move(val_bytes));\n-                    break;\n-                }\n-            }\n-        }\n-\n-        if (!found_sep) {\n-            throw std::ios_base::failure(\"Separator is missing at the end of an output map\");\n-        }\n-    }\n-\n-    template <typename Stream>\n-    PSBTOutput(deserialize_type, Stream& s) {\n-        Unserialize(s);\n-    }\n-};\n-\n-/** A version of CTransaction with the PSBT format*/\n-struct PartiallySignedTransaction\n-{\n-    boost::optional<CMutableTransaction> tx;\n-    std::vector<PSBTInput> inputs;\n-    std::vector<PSBTOutput> outputs;\n-    std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n-\n-    bool IsNull() const;\n-    void Merge(const PartiallySignedTransaction& psbt);\n-    bool IsSane() const;\n-    PartiallySignedTransaction() {}\n-    PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n-    explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n-\n-    // Only checks if they refer to the same transaction\n-    friend bool operator==(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)\n-    {\n-        return a.tx->GetHash() == b.tx->GetHash();\n-    }\n-    friend bool operator!=(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)\n-    {\n-        return !(a == b);\n-    }\n-\n-    template <typename Stream>\n-    inline void Serialize(Stream& s) const {\n-\n-        // magic bytes\n-        s << PSBT_MAGIC_BYTES;\n-\n-        // unsigned tx flag\n-        SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n-\n-        // Write serialized tx to a stream\n-        OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n-        SerializeToVector(os, *tx);\n-\n-        // Write the unknown things\n-        for (auto& entry : unknown) {\n-            s << entry.first;\n-            s << entry.second;\n-        }\n-\n-        // Separator\n-        s << PSBT_SEPARATOR;\n-\n-        // Write inputs\n-        for (const PSBTInput& input : inputs) {\n-            s << input;\n-        }\n-        // Write outputs\n-        for (const PSBTOutput& output : outputs) {\n-            s << output;\n-        }\n-    }\n-\n-\n-    template <typename Stream>\n-    inline void Unserialize(Stream& s) {\n-        // Read the magic bytes\n-        uint8_t magic[5];\n-        s >> magic;\n-        if (!std::equal(magic, magic + 5, PSBT_MAGIC_BYTES)) {\n-            throw std::ios_base::failure(\"Invalid PSBT magic bytes\");\n-        }\n-\n-        // Read global data\n-        bool found_sep = false;\n-        while(!s.empty()) {\n-            // Read\n-            std::vector<unsigned char> key;\n-            s >> key;\n-\n-            // the key is empty if that was actually a separator byte\n-            // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) {\n-                found_sep = true;\n-                break;\n-            }\n-\n-            // First byte of key is the type\n-            unsigned char type = key[0];\n-\n-            // Do stuff based on type\n-            switch(type) {\n-                case PSBT_GLOBAL_UNSIGNED_TX:\n-                {\n-                    if (tx) {\n-                        throw std::ios_base::failure(\"Duplicate Key, unsigned tx already provided\");\n-                    } else if (key.size() != 1) {\n-                        throw std::ios_base::failure(\"Global unsigned tx key is more than one byte type\");\n-                    }\n-                    CMutableTransaction mtx;\n-                    // Set the stream to serialize with non-witness since this should always be non-witness\n-                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n-                    UnserializeFromVector(os, mtx);\n-                    tx = std::move(mtx);\n-                    // Make sure that all scriptSigs and scriptWitnesses are empty\n-                    for (const CTxIn& txin : tx->vin) {\n-                        if (!txin.scriptSig.empty() || !txin.scriptWitness.IsNull()) {\n-                            throw std::ios_base::failure(\"Unsigned tx does not have empty scriptSigs and scriptWitnesses.\");\n-                        }\n-                    }\n-                    break;\n-                }\n-                // Unknown stuff\n-                default: {\n-                    if (unknown.count(key) > 0) {\n-                        throw std::ios_base::failure(\"Duplicate Key, key for unknown value already provided\");\n-                    }\n-                    // Read in the value\n-                    std::vector<unsigned char> val_bytes;\n-                    s >> val_bytes;\n-                    unknown.emplace(std::move(key), std::move(val_bytes));\n-                }\n-            }\n-        }\n-\n-        if (!found_sep) {\n-            throw std::ios_base::failure(\"Separator is missing at the end of the global map\");\n-        }\n-\n-        // Make sure that we got an unsigned tx\n-        if (!tx) {\n-            throw std::ios_base::failure(\"No unsigned transcation was provided\");\n-        }\n-\n-        // Read input data\n-        unsigned int i = 0;\n-        while (!s.empty() && i < tx->vin.size()) {\n-            PSBTInput input;\n-            s >> input;\n-            inputs.push_back(input);\n-\n-            // Make sure the non-witness utxo matches the outpoint\n-            if (input.non_witness_utxo && input.non_witness_utxo->GetHash() != tx->vin[i].prevout.hash) {\n-                throw std::ios_base::failure(\"Non-witness UTXO does not match outpoint hash\");\n-            }\n-            ++i;\n-        }\n-        // Make sure that the number of inputs matches the number of inputs in the transaction\n-        if (inputs.size() != tx->vin.size()) {\n-            throw std::ios_base::failure(\"Inputs provided does not match the number of inputs in transaction.\");\n-        }\n-\n-        // Read output data\n-        i = 0;\n-        while (!s.empty() && i < tx->vout.size()) {\n-            PSBTOutput output;\n-            s >> output;\n-            outputs.push_back(output);\n-            ++i;\n-        }\n-        // Make sure that the number of outputs matches the number of outputs in the transaction\n-        if (outputs.size() != tx->vout.size()) {\n-            throw std::ios_base::failure(\"Outputs provided does not match the number of outputs in transaction.\");\n-        }\n-        // Sanity check\n-        if (!IsSane()) {\n-            throw std::ios_base::failure(\"PSBT is not sane.\");\n-        }\n-    }\n-\n-    template <typename Stream>\n-    PartiallySignedTransaction(deserialize_type, Stream& s) {\n-        Unserialize(s);\n-    }\n-};\n-\n /** Produce a script signature using a generic signature creator. */\n bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n \n /** Produce a script signature for a transaction. */\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n-/** Checks whether a PSBTInput is already signed. */\n-bool PSBTInputSigned(PSBTInput& input);\n-\n-/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL);\n-\n /** Extract signature data from a transaction input, and insert it. */\n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout);\n void UpdateInput(CTxIn& input, const SignatureData& data);"
      },
      {
        "sha": "b55547bc63cd4e7f39e9147c000aa650149c11cf",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -141,7 +141,7 @@ std::string EncodeBase64(const std::string& str)\n     return EncodeBase64((const unsigned char*)str.c_str(), str.size());\n }\n \n-std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n+std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid)\n {\n     static const int decode64_table[256] =\n     {\n@@ -183,14 +183,14 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n         ++p;\n     }\n     valid = valid && (p - e) % 4 == 0 && p - q < 4;\n-    if (pfInvalid) *pfInvalid = !valid;\n+    if (pf_invalid) *pf_invalid = !valid;\n \n     return ret;\n }\n \n-std::string DecodeBase64(const std::string& str)\n+std::string DecodeBase64(const std::string& str, bool* pf_invalid)\n {\n-    std::vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n+    std::vector<unsigned char> vchRet = DecodeBase64(str.c_str(), pf_invalid);\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n@@ -210,7 +210,7 @@ std::string EncodeBase32(const std::string& str)\n     return EncodeBase32((const unsigned char*)str.c_str(), str.size());\n }\n \n-std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n+std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)\n {\n     static const int decode32_table[256] =\n     {\n@@ -252,14 +252,14 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n         ++p;\n     }\n     valid = valid && (p - e) % 8 == 0 && p - q < 8;\n-    if (pfInvalid) *pfInvalid = !valid;\n+    if (pf_invalid) *pf_invalid = !valid;\n \n     return ret;\n }\n \n-std::string DecodeBase32(const std::string& str)\n+std::string DecodeBase32(const std::string& str, bool* pf_invalid)\n {\n-    std::vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n+    std::vector<unsigned char> vchRet = DecodeBase32(str.c_str(), pf_invalid);\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n "
      },
      {
        "sha": "59eefff566f258a26c1ebcc966522837fa1534b7",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -44,12 +44,12 @@ bool IsHex(const std::string& str);\n * Return true if the string is a hex number, optionally prefixed with \"0x\"\n */\n bool IsHexNumber(const std::string& str);\n-std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = nullptr);\n-std::string DecodeBase64(const std::string& str);\n+std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid = nullptr);\n+std::string DecodeBase64(const std::string& str, bool* pf_invalid = nullptr);\n std::string EncodeBase64(const unsigned char* pch, size_t len);\n std::string EncodeBase64(const std::string& str);\n-std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid = nullptr);\n-std::string DecodeBase32(const std::string& str);\n+std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid = nullptr);\n+std::string DecodeBase32(const std::string& str, bool* pf_invalid = nullptr);\n std::string EncodeBase32(const unsigned char* pch, size_t len);\n std::string EncodeBase32(const std::string& str);\n "
      },
      {
        "sha": "761e7b7dd77878c2c3d5097b235404f017198b2f",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/psbtwallet.h>\n+\n+bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, TransactionError& error, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n+{\n+    LOCK(pwallet->cs_wallet);\n+    // Get all of the previous transactions\n+    complete = true;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            error = TransactionError::INVALID_PSBT;\n+            return false;\n+        }\n+\n+        // If we have no utxo, grab it from the wallet.\n+        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n+            const uint256& txhash = txin.prevout.hash;\n+            const auto it = pwallet->mapWallet.find(txhash);\n+            if (it != pwallet->mapWallet.end()) {\n+                const CWalletTx& wtx = it->second;\n+                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n+                //   The signing code will switch to the smaller witness_utxo if this is ok.\n+                input.non_witness_utxo = wtx.tx;\n+            }\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            error = TransactionError::SIGHASH_MISMATCH;\n+            return false;\n+        }\n+\n+        complete &= SignPSBTInput(HidingSigningProvider(pwallet, !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        const CTxOut& out = psbtx.tx->vout.at(i);\n+        PSBTOutput& psbt_out = psbtx.outputs.at(i);\n+\n+        // Fill a SignatureData with output info\n+        SignatureData sigdata;\n+        psbt_out.FillSignatureData(sigdata);\n+\n+        MutableTransactionSignatureCreator creator(psbtx.tx.get_ptr(), 0, out.nValue, 1);\n+        ProduceSignature(HidingSigningProvider(pwallet, true, !bip32derivs), creator, out.scriptPubKey, sigdata);\n+        psbt_out.FromSignatureData(sigdata);\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "b679f5c6ba6c2ae24cc15296ae06f9babee0798a",
        "filename": "src/wallet/psbtwallet.h",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_PSBTWALLET_H\n+#define BITCOIN_WALLET_PSBTWALLET_H\n+\n+#include <node/transaction.h>\n+#include <psbt.h>\n+#include <primitives/transaction.h>\n+#include <wallet/wallet.h>\n+\n+/**\n+ * Fills out a PSBT with information from the wallet. Fills in UTXOs if we have\n+ * them. Tries to sign if sign=true. Sets `complete` if the PSBT is now complete\n+ * (i.e. has all required signatures or signature-parts, and is ready to\n+ * finalize.) Sets `error` and returns false if something goes wrong.\n+ *\n+ * @param[in]  pwallet pointer to a wallet\n+ * @param[in]  &psbtx reference to PartiallySignedTransaction to fill in\n+ * @param[out] &error reference to UniValue to fill with error info on failure\n+ * @param[out] &complete indicates whether the PSBT is now complete\n+ * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n+ * @param[in]  sign whether to sign or not\n+ * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n+ * return true on success, false on error (and fills in `error`)\n+ */\n+bool FillPSBT(const CWallet* pwallet,\n+              PartiallySignedTransaction& psbtx,\n+              TransactionError& error,\n+              bool& complete,\n+              int sighash_type = 1 /* SIGHASH_ALL */,\n+              bool sign = true,\n+              bool bip32derivs = false);\n+\n+#endif // BITCOIN_WALLET_PSBTWALLET_H"
      },
      {
        "sha": "9e362cf16764f85efaf3b43a88f3b3424a2f4eb7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 57,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -13,6 +13,7 @@\n #include <validation.h>\n #include <key_io.h>\n #include <net.h>\n+#include <node/transaction.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n@@ -30,6 +31,7 @@\n #include <util/moneystr.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n+#include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n@@ -3938,60 +3940,6 @@ void AddKeypathToMap(const CWallet* pwallet, const CKeyID& keyID, std::map<CPubK\n     hd_keypaths.emplace(vchPubKey, std::move(info));\n }\n \n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs)\n-{\n-    LOCK(pwallet->cs_wallet);\n-    // Get all of the previous transactions\n-    bool complete = true;\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        const CTxIn& txin = psbtx.tx->vin[i];\n-        PSBTInput& input = psbtx.inputs.at(i);\n-\n-        if (PSBTInputSigned(input)) {\n-            continue;\n-        }\n-\n-        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n-        if (!input.IsSane()) {\n-            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"PSBT input is not sane.\");\n-        }\n-\n-        // If we have no utxo, grab it from the wallet.\n-        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n-            const uint256& txhash = txin.prevout.hash;\n-            const auto it = pwallet->mapWallet.find(txhash);\n-            if (it != pwallet->mapWallet.end()) {\n-                const CWalletTx& wtx = it->second;\n-                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n-                //   The signing code will switch to the smaller witness_utxo if this is ok.\n-                input.non_witness_utxo = wtx.tx;\n-            }\n-        }\n-\n-        // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Specified Sighash and sighash in PSBT do not match.\");\n-        }\n-\n-        complete &= SignPSBTInput(HidingSigningProvider(pwallet, !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n-\n-    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        const CTxOut& out = psbtx.tx->vout.at(i);\n-        PSBTOutput& psbt_out = psbtx.outputs.at(i);\n-\n-        // Fill a SignatureData with output info\n-        SignatureData sigdata;\n-        psbt_out.FillSignatureData(sigdata);\n-\n-        MutableTransactionSignatureCreator creator(psbtx.tx.get_ptr(), 0, out.nValue, 1);\n-        ProduceSignature(HidingSigningProvider(pwallet, true, !bip32derivs), creator, out.scriptPubKey, sigdata);\n-        psbt_out.FromSignatureData(sigdata);\n-    }\n-    return complete;\n-}\n-\n UniValue walletprocesspsbt(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -4036,7 +3984,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     // Unserialize the transaction\n     PartiallySignedTransaction psbtx;\n     std::string error;\n-    if (!DecodePSBT(psbtx, request.params[0].get_str(), error)) {\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n@@ -4046,7 +3994,11 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     // Fill transaction with our data and also sign\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n-    bool complete = FillPSBT(pwallet, psbtx, nHashType, sign, bip32derivs);\n+    bool complete = true;\n+    TransactionError err;\n+    if (!FillPSBT(pwallet, psbtx, err, complete, nHashType, sign, bip32derivs)) {\n+        throw JSONRPCTransactionError(err);\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n@@ -4160,7 +4112,11 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n \n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n-    FillPSBT(pwallet, psbtx, 1, false, bip32derivs);\n+    bool complete = true;\n+    TransactionError err;\n+    if (!FillPSBT(pwallet, psbtx, err, complete, 1, false, bip32derivs)) {\n+        throw JSONRPCTransactionError(err);\n+    }\n \n     // Serialize the PSBT\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "58053bde59a4e8939574d767823523fe0316a97d",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -30,5 +30,4 @@ bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "e89d4121bccfc4810ea267f4b0020916417f8bf8",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -5,6 +5,7 @@\n #include <key_io.h>\n #include <script/sign.h>\n #include <util/strencodings.h>\n+#include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <univalue.h>\n@@ -60,7 +61,9 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     ssData >> psbtx;\n \n     // Fill transaction with our data\n-    FillPSBT(&m_wallet, psbtx, SIGHASH_ALL, false, true);\n+    TransactionError err;\n+    bool complete = true;\n+    FillPSBT(&m_wallet, psbtx, err, complete, SIGHASH_ALL, false, true);\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "c98f1058282c9d22c47874b5bd8f4d3885e128b2",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2452c6cc0a236469629c919f8c693e14ca637a0a/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2452c6cc0a236469629c919f8c693e14ca637a0a/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=2452c6cc0a236469629c919f8c693e14ca637a0a",
        "patch": "@@ -293,5 +293,8 @@ def run_test(self):\n         psbt = self.nodes[1].walletcreatefundedpsbt([], [{p2pkh : 1}], 0, {\"includeWatching\" : True}, True)\n         self.nodes[0].decodepsbt(psbt['psbt'])\n \n+        # Test decoding error: invalid base64\n+        assert_raises_rpc_error(-22, \"TX decode failed invalid base64\", self.nodes[0].decodepsbt, \";definitely not base64;\")\n+\n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "fd46c4c0018c41d36cd892ccb47485b572d65837",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDQ2YzRjMDAxOGM0MWQzNmNkODkyY2NiNDc0ODViNTcyZDY1ODM3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-12T19:24:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-14T10:12:30Z"
      },
      "message": "Bump minimum Qt version to 5.5.1",
      "tree": {
        "sha": "338a1505b9ea3b8646f82a6c97b31721bbd17822",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/338a1505b9ea3b8646f82a6c97b31721bbd17822"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd46c4c0018c41d36cd892ccb47485b572d65837",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxlPw8ACgkQV/+b28ww\nEAnkRg/+OVxL8+l7UP6HnXQPPPhFK5/9mJ4TR5WUpUbnXkkLnFCcuv6n2qb2RgyU\ncoj8o41TKohlW6btxSMwVyMOtRQbFDE1/Gbr4ZtW+OueXyiXoYqMoIfrOS5deXt6\n69edAn9eh//2/Sw31XoMUWjHN4FNFgF15bjHdwH8X/i3UX052Vb5pMIuNHzn88fy\n20kXC3XJm/Estgdp+tq8L72l6TgmR3AE9KGNOJ0+LxVhI/PvaTHtcZiUpXsNsQuc\n4W3PMFEwOkgatoSSd4OHNVGjZ326MgGWbapRyWPGp3umIaezsyTX2VHoH2L4qbvp\nSlu96+ENRA3oDiS+v5UaH3t+Dcc2e+YN5VTYSj4jutGtCGHNLK+r52DBThk2CMTL\niCFyDhneMwkpODM5VA/Y8xOP3DyYjI/8NnUNoA3d8GSt0BFgKratGvS6Z7RUEW8o\nVHyGs4pTOuL3R15AMaWvnuvJdxqDuqxqZ3NRJyj55h/GIyXyGf/AAgD8uodlbJCu\nlkCCmG9YtkP3liEVWVRoocfFSHMho6scv5Mi7ImYuGJItytAzwpEmLH5RYGyduMI\nnzylujB8D2lG9MSqxVzs4TY8UqByWUzp/L2XnQNXqgk1VMzswW1bg5wC6hIv+AcO\nRVKtpjgQUkbPY24Uyx3L+J9icnapIXpnGSQQ+yH+KqvKV8fGWTw=\n=wpjL\n-----END PGP SIGNATURE-----",
        "payload": "tree 338a1505b9ea3b8646f82a6c97b31721bbd17822\nparent 7d3f255316fc0d45272a38e3fea206105f67dc45\nauthor Sjors Provoost <sjors@sprovoost.nl> 1549999469 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1550139150 +0100\n\nBump minimum Qt version to 5.5.1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd46c4c0018c41d36cd892ccb47485b572d65837",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd46c4c0018c41d36cd892ccb47485b572d65837",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd46c4c0018c41d36cd892ccb47485b572d65837/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d3f255316fc0d45272a38e3fea206105f67dc45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d3f255316fc0d45272a38e3fea206105f67dc45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d3f255316fc0d45272a38e3fea206105f67dc45"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 8,
      "deletions": 32
    },
    "files": [
      {
        "sha": "1a7c5d5f7d39d1c82b9cf7d345e302fa453d54fd",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 24,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46c4c0018c41d36cd892ccb47485b572d65837/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46c4c0018c41d36cd892ccb47485b572d65837/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=fd46c4c0018c41d36cd892ccb47485b572d65837",
        "patch": "@@ -116,24 +116,6 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   if test \"x$bitcoin_cv_static_qt\" = xyes; then\n     _BITCOIN_QT_FIND_STATIC_PLUGINS\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-    AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[\n-      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-          #include <QtCore/qconfig.h>\n-          #ifndef QT_VERSION\n-          #  include <QtCore/qglobal.h>\n-          #endif\n-        ]],\n-        [[\n-          #if QT_VERSION >= 0x050400\n-          choke\n-          #endif\n-        ]])],\n-      [bitcoin_cv_need_acc_widget=yes],\n-      [bitcoin_cv_need_acc_widget=no])\n-    ])\n-    if test \"x$bitcoin_cv_need_acc_widget\" = xyes; then\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n-    fi\n     _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n     AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n     if test \"x$TARGET_OS\" = xwindows; then\n@@ -264,7 +246,7 @@ dnl All macros below are internal and should _not_ be used from the main\n dnl configure.ac.\n dnl ----\n \n-dnl Internal. Check if the included version of Qt is Qt5.\n+dnl Internal. Check included version of Qt against minimum specified in doc/dependencies.md\n dnl Requires: INCLUDES must be populated as necessary.\n dnl Output: bitcoin_cv_qt5=yes|no\n AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n@@ -276,7 +258,7 @@ AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n       #endif\n     ]],\n     [[\n-      #if QT_VERSION < 0x050200 || QT_VERSION_MAJOR < 5\n+      #if QT_VERSION < 0x050501\n       choke\n       #endif\n     ]])],\n@@ -374,9 +356,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n                 fi\n        if test \"x$TARGET_OS\" = xlinux; then\n          PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n-         if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n-           PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n-         fi\n+         PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n        elif test \"x$TARGET_OS\" = xdarwin; then\n          PKG_CHECK_MODULES([QTCLIPBOARD], [Qt5ClipboardSupport], [QT_LIBS=\"-lQt5ClipboardSupport $QT_LIBS\"])\n          PKG_CHECK_MODULES([QTGRAPHICS], [Qt5GraphicsSupport], [QT_LIBS=\"-lQt5GraphicsSupport $QT_LIBS\"])\n@@ -527,4 +507,3 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   CXXFLAGS=\"$TEMP_CXXFLAGS\"\n   LIBS=\"$TEMP_LIBS\"\n ])\n-"
      },
      {
        "sha": "235eeb28b6b1409aae09c9ba6d64dad3c7d9e022",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46c4c0018c41d36cd892ccb47485b572d65837/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46c4c0018c41d36cd892ccb47485b572d65837/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=fd46c4c0018c41d36cd892ccb47485b572d65837",
        "patch": "@@ -23,7 +23,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | protobuf | [2.6.1](https://github.com/google/protobuf/releases) |  | No |  |  |\n | Python (tests) |  | [3.4](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n-| Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.2](https://github.com/bitcoin/bitcoin/pull/14725) | No |  |  |\n+| Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L87) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L86) (Linux only) |\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |"
      },
      {
        "sha": "f478dc798d1592599e71899d2240e9be67b91a61",
        "filename": "doc/release-notes-15393.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46c4c0018c41d36cd892ccb47485b572d65837/doc/release-notes-15393.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46c4c0018c41d36cd892ccb47485b572d65837/doc/release-notes-15393.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15393.md?ref=fd46c4c0018c41d36cd892ccb47485b572d65837",
        "patch": "@@ -0,0 +1,4 @@\n+Dependencies\n+------------\n+\n+- The minimum required version of QT has been increased from 5.2 to 5.5.1 (the [depends system](https://github.com/bitcoin/bitcoin/blob/master/depends/README.md) provides 5.9.7)"
      },
      {
        "sha": "1b063771ef75b095855f78a4649027612b1cad75",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46c4c0018c41d36cd892ccb47485b572d65837/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46c4c0018c41d36cd892ccb47485b572d65837/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fd46c4c0018c41d36cd892ccb47485b572d65837",
        "patch": "@@ -55,9 +55,6 @@\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n-#if QT_VERSION < 0x050400\n-Q_IMPORT_PLUGIN(AccessibleFactory)\n-#endif\n #if defined(QT_QPA_PLATFORM_XCB)\n Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);\n #elif defined(QT_QPA_PLATFORM_WINDOWS)"
      },
      {
        "sha": "da25d831756271ecae26458c485f2662058f6c36",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46c4c0018c41d36cd892ccb47485b572d65837/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46c4c0018c41d36cd892ccb47485b572d65837/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=fd46c4c0018c41d36cd892ccb47485b572d65837",
        "patch": "@@ -27,9 +27,7 @@\n #include <QTest>\n #include <QTextEdit>\n #include <QtGlobal>\n-#if QT_VERSION >= 0x050000\n #include <QtTest/QtTestWidgets>\n-#endif\n #include <QtTest/QtTestGui>\n #include <new>\n #include <string>"
      },
      {
        "sha": "f8a9c25303ee49d8bff26332fa74671287142edc",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46c4c0018c41d36cd892ccb47485b572d65837/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46c4c0018c41d36cd892ccb47485b572d65837/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=fd46c4c0018c41d36cd892ccb47485b572d65837",
        "patch": "@@ -120,7 +120,6 @@ void RPCNestedTests::rpcNestedTests()\n     RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(   abc   ,   cba )\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"cba\\\"]\");\n \n-#if QT_VERSION >= 0x050300\n     // do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n@@ -131,5 +130,4 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-#endif\n }"
      }
    ]
  },
  {
    "sha": "3c6ef0393ff72a6105e3e40e2db8b355945584ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzZlZjAzOTNmZjcyYTYxMDVlM2U0MGUyZGI4YjM1NTk0NTU4NGFi",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-14T12:08:15Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-14T12:08:15Z"
      },
      "message": "msvc: Fix silent merge conflict between #13926 and #14372 part II",
      "tree": {
        "sha": "1328d613bc18ac0cb736a93915b59f2e811ade16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1328d613bc18ac0cb736a93915b59f2e811ade16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c6ef0393ff72a6105e3e40e2db8b355945584ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6ef0393ff72a6105e3e40e2db8b355945584ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c6ef0393ff72a6105e3e40e2db8b355945584ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6ef0393ff72a6105e3e40e2db8b355945584ab/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f4e0d154256c2041f15f0c4acba5707e985d649",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f4e0d154256c2041f15f0c4acba5707e985d649",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f4e0d154256c2041f15f0c4acba5707e985d649"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "12fda65904be65030e39061b121fce6bda452f5f",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c6ef0393ff72a6105e3e40e2db8b355945584ab/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c6ef0393ff72a6105e3e40e2db8b355945584ab/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=3c6ef0393ff72a6105e3e40e2db8b355945584ab",
        "patch": "@@ -56,6 +56,9 @@\n     <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n       <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n+      <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n+    </ProjectReference>\n   </ItemGroup>\n   <PropertyGroup Label=\"Globals\">\n     <VCProjectVersion>15.0</VCProjectVersion>"
      }
    ]
  },
  {
    "sha": "8c3fdd3a6d90256bd2d00e86562f4d451bfd9767",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzNmZGQzYTZkOTAyNTZiZDJkMDBlODY1NjJmNGQ0NTFiZmQ5NzY3",
    "commit": {
      "author": {
        "name": "marcoagner",
        "email": "marco@agner.io",
        "date": "2019-02-14T12:33:24Z"
      },
      "committer": {
        "name": "marcoagner",
        "email": "marco@agner.io",
        "date": "2019-02-14T12:43:10Z"
      },
      "message": "fixes m_assumed_blockchain_size variables values:\n\nThis commit was a fix to `m_assumed_blockchain_size` reverted from\n3fc2063's 220 to 9d0e528's 200 since work on 9d0e528 was being done in\nparallel and ended up reverting `m_assumed_blockchain_size`.\n\nThis commits is now a intended to be a bump of\n`m_assumed_blockchain_size` for both mainnet and testnet for new\nreasonable values.",
      "tree": {
        "sha": "f4a70c8eb0edbf7281a75131142fbe8e5289c69e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4a70c8eb0edbf7281a75131142fbe8e5289c69e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c3fdd3a6d90256bd2d00e86562f4d451bfd9767",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEBVLlIGnnSaHbHcvrDcd/xh7T7MQFAlxlYl4ACgkQDcd/xh7T\n7MQ9CQ/7BAKxqMMm878oGhdwM/XC+hlvNGD6KbFp1HvLdjJYWlOujuptl1ssAJe2\n9xqZMkpqfCOYSBahQHGVK/pO+XVPAc8dacbf0HwARJk6LphsENQEoAJc2ZVtUtvA\npye7IcPtQ2UmMHay+mkv3ofXm37UPn8+A2emI+53MMyZkA+GBNTOuD6EaXz4V+M2\nFVbSXMCtAJepxqbYU4WfXuc35W6pCwj+vV+A8D/IqayQYfVl/C+Hqih+yfKFE13e\nsN5BU2ZRMJejuTHIqHBjQzurxzUEpW8j8UBOb3lAQNIAjpMU8wrL0el5fRBhcjWW\nEhTQDLq7i1nqqSO2PKUrylONz2/fG5plXVTeFIUadx1s2UOhuT3o+tiXq8wI5k2d\nnbNsy9YOrfft95mfBD7jF7FIIQApYcv+lQy8TUtNvGH9alZGI2Lzdu0/SI1YkXNP\noRDalgNKIKZY2byqwL0W1lrcn8pNgzVDGMQ/lAPrqKe/hv3DLZ9kIYK/i+I/G3vU\n1qSzrXhzplwm0mI1J+cvUv7lJRluxzXzjw3rVfEsgAF/ZhCANVOLrX55UsRtSZtD\npYPwAM9iGoCyJJVcwGLDNF9CFdxCawE7PACrZukWHv5DjKhCWfeh2WHd0VQSj3ho\nHcxn2CTpG8bXOFqamslgNsvCHL09JQ19iQ+DwXF7v+a7dPSm3rY=\n=Is2p\n-----END PGP SIGNATURE-----",
        "payload": "tree f4a70c8eb0edbf7281a75131142fbe8e5289c69e\nparent 2452c6cc0a236469629c919f8c693e14ca637a0a\nauthor marcoagner <marco@agner.io> 1550147604 +0000\ncommitter marcoagner <marco@agner.io> 1550148190 +0000\n\nfixes m_assumed_blockchain_size variables values:\n\nThis commit was a fix to `m_assumed_blockchain_size` reverted from\n3fc2063's 220 to 9d0e528's 200 since work on 9d0e528 was being done in\nparallel and ended up reverting `m_assumed_blockchain_size`.\n\nThis commits is now a intended to be a bump of\n`m_assumed_blockchain_size` for both mainnet and testnet for new\nreasonable values.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c3fdd3a6d90256bd2d00e86562f4d451bfd9767",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c3fdd3a6d90256bd2d00e86562f4d451bfd9767",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c3fdd3a6d90256bd2d00e86562f4d451bfd9767/comments",
    "author": {
      "login": "marcoagner",
      "id": 5016303,
      "node_id": "MDQ6VXNlcjUwMTYzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5016303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcoagner",
      "html_url": "https://github.com/marcoagner",
      "followers_url": "https://api.github.com/users/marcoagner/followers",
      "following_url": "https://api.github.com/users/marcoagner/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcoagner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcoagner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcoagner/subscriptions",
      "organizations_url": "https://api.github.com/users/marcoagner/orgs",
      "repos_url": "https://api.github.com/users/marcoagner/repos",
      "events_url": "https://api.github.com/users/marcoagner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcoagner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "marcoagner",
      "id": 5016303,
      "node_id": "MDQ6VXNlcjUwMTYzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5016303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcoagner",
      "html_url": "https://github.com/marcoagner",
      "followers_url": "https://api.github.com/users/marcoagner/followers",
      "following_url": "https://api.github.com/users/marcoagner/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcoagner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcoagner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcoagner/subscriptions",
      "organizations_url": "https://api.github.com/users/marcoagner/orgs",
      "repos_url": "https://api.github.com/users/marcoagner/repos",
      "events_url": "https://api.github.com/users/marcoagner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcoagner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2452c6cc0a236469629c919f8c693e14ca637a0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2452c6cc0a236469629c919f8c693e14ca637a0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2452c6cc0a236469629c919f8c693e14ca637a0a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "97b0e05b20101b5eeebf2995b90376f075f98857",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c3fdd3a6d90256bd2d00e86562f4d451bfd9767/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c3fdd3a6d90256bd2d00e86562f4d451bfd9767/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8c3fdd3a6d90256bd2d00e86562f4d451bfd9767",
        "patch": "@@ -107,7 +107,7 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n-        m_assumed_blockchain_size = 200;\n+        m_assumed_blockchain_size = 240;\n         m_assumed_chain_state_size = 3;\n \n         genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n@@ -219,7 +219,7 @@ class CTestNetParams : public CChainParams {\n         pchMessageStart[3] = 0x07;\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n-        m_assumed_blockchain_size = 20;\n+        m_assumed_blockchain_size = 30;\n         m_assumed_chain_state_size = 2;\n \n         genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);"
      }
    ]
  },
  {
    "sha": "38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODk4OWFiMDNmYjc0YWQ1NmMxMDE4YzM3Y2IyNGQxN2NiYjNhMTZm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T13:32:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T13:33:00Z"
      },
      "message": "Merge #15183: [Qt]: fixes m_assumed_blockchain_size variable value\n\n8c3fdd3a6d fixes m_assumed_blockchain_size variables values: (marcoagner)\n\nPull request description:\n\n  This is used by Qt but I'm not sure if this is the right tag here.\n  Please, edit the title if there's something better.\n\n  `m_assumed_blockchain_size` (src/chainparams.cpp:CChainParams) was\n  `BLOCK_CHAIN_SIZE` (src/qt/intro.cpp) and while the transition was being\n  made by PR 13216 (merged commit: 9d0e528), 3fc2063 changed its value\n  from 200 to 220, which 9d0e528 ended up reverting.\n\n  So, as per MarcoFalke's suggestion (https://github.com/bitcoin/bitcoin/pull/13216#discussion_r247560123), I'm bumping it to 240 before 0.18 is\n  branched to avoid any confusion.\n\n  Anything else (e.g. constexpr) that should/could be done here? Thanks.\n\nTree-SHA512: 4319739b870a2b96a57f268f9edc7dd9f9eff5c4ca3b01863e6b861b9ca58c245416ce362dae54d1673e3d5b1c7f5a16e4031842af250e1b1f0a5109b75fb3c3",
      "tree": {
        "sha": "f4a70c8eb0edbf7281a75131142fbe8e5289c69e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4a70c8eb0edbf7281a75131142fbe8e5289c69e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZW4MAAoJENLqSFDnUosltboP/2lXfaLmffGbt2dqmXMZUrSr\nZXn74Lv+pzOGZ/lfK4T8yKj2gqWScOSlDgZUuAQPqmbsv/leoeZsUW76rUFwZwCo\nqU0b2QxiH2GXJceYJzG1xy5xelhVh3R63S0nq/E7aLRRiYZWxWdZn3tLOctvhmvG\njSlE5TsBKieOT89G7IiQXQchIIhm5H18i6Fk1cep1DlfG6TUP5vM1ZWANgrF6a4b\nJF7khzkHNuyE4UQPCVcFnKOy/GV+DZ9C4uyEx+Pn6pMuf8kOAQk1FNCeprW09lUQ\nPMuoiTdfHkiZvWw3ZlCWwQ+Cr8Z/T7iS/lttuorlFjQbSE3bDigUd8DGI9qKCvT2\nr9Ohu/0H7SJvavPCwO+2n76eKWn3GW3Zi82FCvLuhpvpTiBU/y6Evv2w2qkEEcLJ\n9vCmyA712rBdOgOyOg74Q/bD0iN1Nr5nd7Ja3deVidrMkQUjidEAY0UAe/MjCzmu\npKY1yrS43tsv6/v57P8ZR7rKpogxr6GM+0ZU1F3VFIh9Tj+LKui48nH7H10acZDt\nzVvN9Q+BWTo2s3CpRblbcE0/fAYMuA2inT38Nw1stOF/jaUZEIqXpSt1lrohlzvw\nIDWTHs+pptMoOAPRCSg4VC9BsX3akUmVC/WkNxsKlfmRlVgwgFTFIFCzDA26s0pn\nGhybyjY/lBXkVzCURPfm\n=Y+rm\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBHD7ahs9NXFoM2gHTPRytKE0+Ajz3gS+2SZHdybR44UCP/wEAWkzqPFgKed\nCjyKy9vXY9cI8QRcZW4O8AhXH+84VKqxBwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEGABJC8yswhtv3f91Qk0lNEI8BAlRd1J\nYS0SYlWA1YNsNrCICPEEXGVuDvAIPA+ze/CyQeEAg9/jDS75DI4pKGh0dHBzOi8v\nZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BCMPWmv7nDK//8ufM0a\nOrYSCPAgLOGl/2axkHRyRfdOGSE/ikdVT704h7cwKtTNWwMXkIsI8QRcZW4O8Agw\nRFN+olNnlwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3Bl\nbnRpbWVzdGFtcHMub3Jn8BDq3LkvL+u9DxIQb/V/2VUpCPAg8mGM2mldIdx2KZO1\nVObeKpy4FVBXWz7LLRjSET9TlzsI8QRcZW4O8AjSHZiCGHjeRgCD3+MNLvkMjiwr\naHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f4a70c8eb0edbf7281a75131142fbe8e5289c69e\nparent 2452c6cc0a236469629c919f8c693e14ca637a0a\nparent 8c3fdd3a6d90256bd2d00e86562f4d451bfd9767\nauthor MarcoFalke <falke.marco@gmail.com> 1550151177 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550151180 -0500\n\nMerge #15183: [Qt]: fixes m_assumed_blockchain_size variable value\n\n8c3fdd3a6d fixes m_assumed_blockchain_size variables values: (marcoagner)\n\nPull request description:\n\n  This is used by Qt but I'm not sure if this is the right tag here.\n  Please, edit the title if there's something better.\n\n  `m_assumed_blockchain_size` (src/chainparams.cpp:CChainParams) was\n  `BLOCK_CHAIN_SIZE` (src/qt/intro.cpp) and while the transition was being\n  made by PR 13216 (merged commit: 9d0e528), 3fc2063 changed its value\n  from 200 to 220, which 9d0e528 ended up reverting.\n\n  So, as per MarcoFalke's suggestion (https://github.com/bitcoin/bitcoin/pull/13216#discussion_r247560123), I'm bumping it to 240 before 0.18 is\n  branched to avoid any confusion.\n\n  Anything else (e.g. constexpr) that should/could be done here? Thanks.\n\nTree-SHA512: 4319739b870a2b96a57f268f9edc7dd9f9eff5c4ca3b01863e6b861b9ca58c245416ce362dae54d1673e3d5b1c7f5a16e4031842af250e1b1f0a5109b75fb3c3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38989ab03fb74ad56c1018c37cb24d17cbb3a16f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2452c6cc0a236469629c919f8c693e14ca637a0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2452c6cc0a236469629c919f8c693e14ca637a0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2452c6cc0a236469629c919f8c693e14ca637a0a"
      },
      {
        "sha": "8c3fdd3a6d90256bd2d00e86562f4d451bfd9767",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c3fdd3a6d90256bd2d00e86562f4d451bfd9767",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c3fdd3a6d90256bd2d00e86562f4d451bfd9767"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "97b0e05b20101b5eeebf2995b90376f075f98857",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38989ab03fb74ad56c1018c37cb24d17cbb3a16f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38989ab03fb74ad56c1018c37cb24d17cbb3a16f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
        "patch": "@@ -107,7 +107,7 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n-        m_assumed_blockchain_size = 200;\n+        m_assumed_blockchain_size = 240;\n         m_assumed_chain_state_size = 3;\n \n         genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n@@ -219,7 +219,7 @@ class CTestNetParams : public CChainParams {\n         pchMessageStart[3] = 0x07;\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n-        m_assumed_blockchain_size = 20;\n+        m_assumed_blockchain_size = 30;\n         m_assumed_chain_state_size = 2;\n \n         genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);"
      }
    ]
  },
  {
    "sha": "e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2IxYzdhOWQ2YWVmY2Y1YzYwMjJkZGU2OTU2YWVjNmNiYzdmMjA1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T13:58:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T13:58:46Z"
      },
      "message": "Merge #15407: msvc: Fix silent merge conflict between #13926 and #14372 part II\n\n3c6ef0393f msvc: Fix silent merge conflict between #13926 and #14372 part II (Chun Kuan Lee)\n\nPull request description:\n\n  In #15325, I added secp256k1 as a dependency of bitcoin-wallet. However, I didn't notice that leveldb is also a dependency of it.\n\nTree-SHA512: dc29b5cad6c529dd9517d6c2cbbe5297b69e73303e2fbbcd4b4842c9c5b51a4332df5a4bf3b82cd3ed2c1668cc95f8c9636f9485af0d722fed9c1319da3cc2e2",
      "tree": {
        "sha": "8239e156b0c9c1c6a892472f744cbf1aafc8d347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8239e156b0c9c1c6a892472f744cbf1aafc8d347"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZXQWAAoJENLqSFDnUosl+ggP/2EbsQ/4Z83iB5QhpsYjq4V8\n/zTFXIDo+EdOBCeXyflDVglb87EIkS7IzmavN3U/1Nv4CGaNnbDZAwcRBBq7CGrO\n4momvKhGGvhFCk0t88M3rSuplLdw93Vhz3rPxcFwe5cWM4Mce7r3Dg3RL3CcW/+X\ncb04lkR3IF4UsoImVJzAFzzYdZXznPsvRy4wWLuHuFyu5411VioX6KdDsMtkT6lo\n97evyhFXerUHiiysZa0CkdX9xngWmesFtkSA5vcSPP/yF0oPDlKesHIIbSNZFq2s\nX+3IcDw1CXh3fihXLSxRg2Rp2bBp4Tq8rF9JijMmHxoSzmftAvLgPQUSpn9MLmZN\nV0gOEiRIJohfwIqGuoogLKe6dngEApADdM3PDkXzJ5Y3rgtiWrSQzJkDPwkZzRuD\n0wocoR8tdb9r9WXHWUETyMBBjHkrwMmKQ+oreobWZv5eVuudvkQ5E+xGnNq8HG/W\ndal+i+RAm9elGCmK85KYU4pT2fpsg+w9f7SlZ8xMxNO7ANQ+jxxVIelsCsRCBCcT\n6hmUhVkJ66yD1mpfVk1iimclxTpOhKUq3CY0+JGW1TgNrf50lZIMUdq7KDe3Jyo3\n8dyCSto39xZa9mCk01FF6/NqQV2nJBAL+xrTPwSQ6o29mPdPQXe3t+nI0ftNNIAe\nbu82r8+gFhhZhfoACg4W\n=MX+o\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDn8fIjCVEC4T8ocAuXN+u/TsX7rfs7UtgOQQLQLn57KCP/wEBbeGxbo+dKw\nKJ7OMyOZgbsI8BC88vPIK6JrnN5f1i+57z89CPEEXGV0GvAIoq1oBJ/hSw8Ag9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BBW+CO554OHZTjJFdPCy/X3CPEEXGV0GfAIpWOgwGGtwwYAg9/jDS75DI4uLWh0\ndHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEJxF\n2oAY3Zff7unsEMyoVAEI8QRcZXQZ8AgL1thQygc5CACD3+MNLvkMjiMiaHR0cHM6\nLy9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbfAQxilu+eHkdc7OV0LAkP32JAjx\nBFxldBjwCFooQM0YEWNRAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 8239e156b0c9c1c6a892472f744cbf1aafc8d347\nparent 38989ab03fb74ad56c1018c37cb24d17cbb3a16f\nparent 3c6ef0393ff72a6105e3e40e2db8b355945584ab\nauthor MarcoFalke <falke.marco@gmail.com> 1550152724 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550152726 -0500\n\nMerge #15407: msvc: Fix silent merge conflict between #13926 and #14372 part II\n\n3c6ef0393f msvc: Fix silent merge conflict between #13926 and #14372 part II (Chun Kuan Lee)\n\nPull request description:\n\n  In #15325, I added secp256k1 as a dependency of bitcoin-wallet. However, I didn't notice that leveldb is also a dependency of it.\n\nTree-SHA512: dc29b5cad6c529dd9517d6c2cbbe5297b69e73303e2fbbcd4b4842c9c5b51a4332df5a4bf3b82cd3ed2c1668cc95f8c9636f9485af0d722fed9c1319da3cc2e2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38989ab03fb74ad56c1018c37cb24d17cbb3a16f"
      },
      {
        "sha": "3c6ef0393ff72a6105e3e40e2db8b355945584ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6ef0393ff72a6105e3e40e2db8b355945584ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c6ef0393ff72a6105e3e40e2db8b355945584ab"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "12fda65904be65030e39061b121fce6bda452f5f",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "patch": "@@ -56,6 +56,9 @@\n     <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n       <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n     </ProjectReference>\n+    <ProjectReference Include=\"..\\libleveldb\\libleveldb.vcxproj\">\n+      <Project>{18430fef-6b61-4c53-b396-718e02850f1b}</Project>\n+    </ProjectReference>\n   </ItemGroup>\n   <PropertyGroup Label=\"Globals\">\n     <VCProjectVersion>15.0</VCProjectVersion>"
      }
    ]
  },
  {
    "sha": "7cee85807c4db679003c6659d247a2fe74c2464a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2VlODU4MDdjNGRiNjc5MDAzYzY2NTlkMjQ3YTJmZTc0YzI0NjRh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-11T22:52:59Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-14T15:10:02Z"
      },
      "message": "Add compile time verification of assumptions we're currently making implicitly/tacitly",
      "tree": {
        "sha": "5d4c1c0c326b096b2e4adce6ec630f256bc12b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d4c1c0c326b096b2e4adce6ec630f256bc12b08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cee85807c4db679003c6659d247a2fe74c2464a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cee85807c4db679003c6659d247a2fe74c2464a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cee85807c4db679003c6659d247a2fe74c2464a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cee85807c4db679003c6659d247a2fe74c2464a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bc149d05b09d716723d2f091250fab38fd70fc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc149d05b09d716723d2f091250fab38fd70fc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc149d05b09d716723d2f091250fab38fd70fc2"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a08e7fa4656b9a3ac1f3c801e32d3a480f9b4740",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cee85807c4db679003c6659d247a2fe74c2464a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cee85807c4db679003c6659d247a2fe74c2464a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7cee85807c4db679003c6659d247a2fe74c2464a",
        "patch": "@@ -118,6 +118,7 @@ BITCOIN_CORE_H = \\\n   clientversion.h \\\n   coins.h \\\n   compat.h \\\n+  compat/assumptions.h \\\n   compat/byteswap.h \\\n   compat/endian.h \\\n   compat/sanity.h \\"
      },
      {
        "sha": "820c9b93d912b33bb04775afc5455154c60244d7",
        "filename": "src/compat/assumptions.h",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cee85807c4db679003c6659d247a2fe74c2464a/src/compat/assumptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cee85807c4db679003c6659d247a2fe74c2464a/src/compat/assumptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/assumptions.h?ref=7cee85807c4db679003c6659d247a2fe74c2464a",
        "patch": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// Compile-time verification of assumptions we make.\n+\n+#ifndef BITCOIN_COMPAT_ASSUMPTIONS_H\n+#define BITCOIN_COMPAT_ASSUMPTIONS_H\n+\n+#include <limits>\n+\n+// Assumption: We assume that the macro NDEBUG is not defined.\n+// Example(s): We use assert(...) extensively with the assumption of it never\n+//             being a noop at runtime.\n+#if defined(NDEBUG)\n+# error \"Bitcoin cannot be compiled without assertions.\"\n+#endif\n+\n+// Assumption: We assume the floating-point types to fulfill the requirements of\n+//             IEC 559 (IEEE 754) standard.\n+// Example(s): Floating-point division by zero in ConnectBlock, CreateTransaction\n+//             and EstimateMedianVal.\n+static_assert(std::numeric_limits<float>::is_iec559, \"IEEE 754 float assumed\");\n+static_assert(std::numeric_limits<double>::is_iec559, \"IEEE 754 double assumed\");\n+\n+// Assumption: We assume eight bits per byte (obviously, but remember: don't\n+//             trust -- verify!).\n+// Example(s): Everywhere :-)\n+static_assert(std::numeric_limits<unsigned char>::digits == 8, \"8-bit byte assumed\");\n+\n+// Assumption: We assume floating-point widths.\n+// Example(s): Type punning in serialization code (ser_{float,double}_to_uint{32,64}).\n+static_assert(sizeof(float) == 4, \"32-bit float assumed\");\n+static_assert(sizeof(double) == 8, \"64-bit double assumed\");\n+\n+// Assumption: We assume integer widths.\n+// Example(s): GetSizeOfCompactSize and WriteCompactSize in the serialization\n+//             code.\n+static_assert(sizeof(short) == 2, \"16-bit short assumed\");\n+static_assert(sizeof(int) == 4, \"32-bit int assumed\");\n+\n+// Some important things we are NOT assuming (non-exhaustive list):\n+// * We are NOT assuming a specific value for sizeof(std::size_t).\n+// * We are NOT assuming a specific value for std::endian::native.\n+// * We are NOT assuming a specific value for std::locale(\"\").name().\n+// * We are NOT assuming a specific value for std::numeric_limits<char>::is_signed.\n+\n+#endif // BITCOIN_COMPAT_ASSUMPTIONS_H"
      },
      {
        "sha": "36c13ada1d6931a6421a932364b2d734b1586c32",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cee85807c4db679003c6659d247a2fe74c2464a/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cee85807c4db679003c6659d247a2fe74c2464a/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=7cee85807c4db679003c6659d247a2fe74c2464a",
        "patch": "@@ -16,6 +16,7 @@\n \n #include <attributes.h>\n #include <compat.h>\n+#include <compat/assumptions.h>\n #include <fs.h>\n #include <logging.h>\n #include <sync.h>"
      }
    ]
  },
  {
    "sha": "4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTQzZWI4Y2RmOGJjODBlZTg2NmE1ZTdiYzE2YzZmYjRkZDE5ZWFj",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T15:03:54Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-14T15:17:55Z"
      },
      "message": "[build] Makefile.am: add rule for src/bitcoin-wallet",
      "tree": {
        "sha": "f3818f1817e876c7f54710b5fe3277da75937443",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3818f1817e876c7f54710b5fe3277da75937443"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxlhqMACgkQV/+b28ww\nEAkG3w//fcEJ+VAxmb3oJ5ySDq5qhBoZxCs4fACeo2hcygKJPa9KAyvk7PYy0RXs\n1mLZ/Vlw75i4HZ4eG8BA+78Y6qNgz18LK8+uvslPJ6rQbl5H/3PT7iOz8kZgpo5h\nw2d7PKJ1JaUljnE3kvRnFa9SRz14V591MPgr9eR7xrmSDl0n7Jozcv1Z7dc2TX1U\nGpqYyp9+sH9cyRiZcIAR4aphRS2juBd0KiP1CSUpPiV7igyoNqaKI6BlOMq9Q0kK\n16+c0diZ2Nh2SnLSfkYZANqQxvakiXoTAcaIQ1rFJLZDq22tc9E4W5EMkjssvPi5\n632dadH8p0fcHPXCgGSAgrXMNBjX0TkNDde7Sjnvv8msJAvzz1Y1Xph0mNxOzZJi\nk/u61hlOyaBpSWxZ0hFubJn4gvGKLClZ3LqLlsei8Utgcrrdoc4FSaK+SAnSNYkr\nbQ5maFI6vqsUFxJUQUbLOAxtZas/fKyxTdl3UEQC2GyHRG8VjET6LmkXepz3Id//\naOn/aGvWIZLCfx3uwossWMafhlTnffqJGfZ+2TZETYnh+01m/kcGEmoTfjbzYMnl\nECEbX0aO/hSvgNQ5/fChcOiy3H6vXcfKL+Evkk8rlGlsiRwFPgkDajg9HZr/EaPW\nqD0CZ4a5xJuyfW/914gDX6uFvtGs4fzbTG5ozvWYd8HYSfK3jFE=\n=qSu2\n-----END PGP SIGNATURE-----",
        "payload": "tree f3818f1817e876c7f54710b5fe3277da75937443\nparent e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550070234 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1550157475 +0100\n\n[build] Makefile.am: add rule for src/bitcoin-wallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "287ba3ab3a91203f3976bada5a2db8adce5a86a5",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac",
        "patch": "@@ -20,6 +20,7 @@ BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\n BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\n BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\n BITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)\n+BITCOIN_WALLET_BIN=$(top_builddir)/src/$(BITCOIN_WALLET_TOOL_NAME)$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)\n \n empty :=\n@@ -76,6 +77,7 @@ $(BITCOIN_WIN_INSTALLER): all-recursive\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n+\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_WALLET_BIN) $(top_builddir)/release\n \t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n \t  echo error: could not build $@\n \t@echo built $@\n@@ -172,6 +174,9 @@ $(BITCOIN_CLI_BIN): FORCE\n $(BITCOIN_TX_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n+$(BITCOIN_WALLET_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n if USE_LCOV\n LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"/usr/lib/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n "
      },
      {
        "sha": "046deed9eae0933079e8829d35d4ed559e9d249f",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac",
        "patch": "@@ -81,6 +81,7 @@ Section -Main SEC0000\n     File @abs_top_srcdir@/release/@BITCOIN_DAEMON_NAME@@EXEEXT@\n     File @abs_top_srcdir@/release/@BITCOIN_CLI_NAME@@EXEEXT@\n     File @abs_top_srcdir@/release/@BITCOIN_TX_NAME@@EXEEXT@\n+    File @abs_top_srcdir@/release/@BITCOIN_WALLET_TOOL_NAME@@EXEEXT@\n     SetOutPath $INSTDIR\\doc\n     File /r /x Makefile* @abs_top_srcdir@/doc\\*.*\n     SetOutPath $INSTDIR"
      }
    ]
  },
  {
    "sha": "88a91e2c9d9ec1bee54d2676a74040e3f7665a2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGE5MWUyYzlkOWVjMWJlZTU0ZDI2NzZhNzQwNDBlM2Y3NjY1YTJk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T21:19:12Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-14T15:20:19Z"
      },
      "message": "[build] AppVeyor: clean cache when build configuration changes",
      "tree": {
        "sha": "506dcaec06313dcbee72de9f4ae030574643aa9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/506dcaec06313dcbee72de9f4ae030574643aa9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88a91e2c9d9ec1bee54d2676a74040e3f7665a2d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxlhzMACgkQV/+b28ww\nEAkNiA/+N/PsiPnZjMP+d7yj7BzQ75ReTM/rh4lMaV4odLk2zvrSm4aWw7p4P0R6\n3pBHTvcEOQemDIjed1g7jRzbbA/N43DZIXMLdtNdR2GnsU6v0pM6m54wg+yv47pS\neJ1og+23x+FIlIBVFGfxP6ajQ7AJq3UVupV67HaHhC/oJmGrcCdUTAedgE1g64kD\nFTTkze6cHinYbrcyJDf9MKvW7XtfjOBgWJzDluJtZ9acQrvFafOIxNZKvFjYObRV\nKdT/TMV05aeD0QLMEdpPeKcs/BeLb962kd6TfjN/v9QTtudXBWGD5jaggpc9vbCc\nAbq7o/0JzWXT7VWzg/aJEYo0CVhr1FBcVM6HAXty4fXtoRS9SmYz3UTIRIjtxteW\nV8wgLSoqEwzwtnyIlMHMawxtzGAa/jSfIjCLF+D8ZU4s2NH0XWI4D9vt25BcKL6e\n+DsKiBd7K6O/l3iUZ8ZunUVjkyuoUVMCNBB8qytUEp4mJfeQI06q2K3av7/iWt+f\nNZdo3J/Us/GPTaNbgHQ2o1QJRB3ShQ5PiJkvgsHI68bCMGlKXiqMHW/8B+mfUVH5\nwhgO0I4RZ1RwkMq3tSRzXJ97SRF67e2/sR/UQGqz+U3MLixRIvVB3UVk9/+N8qm+\nx/ChFJZ7vVO4QAqjCh+bhbkPC8bNCwc/h/dlHsfakmBiCxXldHQ=\n=lngC\n-----END PGP SIGNATURE-----",
        "payload": "tree 506dcaec06313dcbee72de9f4ae030574643aa9b\nparent e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550092752 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1550157619 +0100\n\n[build] AppVeyor: clean cache when build configuration changes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a91e2c9d9ec1bee54d2676a74040e3f7665a2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88a91e2c9d9ec1bee54d2676a74040e3f7665a2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a91e2c9d9ec1bee54d2676a74040e3f7665a2d/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d4a343e77767cbaccc96eb77fbdf014699558ef3",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88a91e2c9d9ec1bee54d2676a74040e3f7665a2d/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88a91e2c9d9ec1bee54d2676a74040e3f7665a2d/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=88a91e2c9d9ec1bee54d2676a74040e3f7665a2d",
        "patch": "@@ -11,8 +11,8 @@ environment:\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n cache:\n-- C:\\tools\\vcpkg\\installed\n-- C:\\Users\\appveyor\\clcache\n+- C:\\tools\\vcpkg\\installed -> appveyor.yml\n+- C:\\Users\\appveyor\\clcache -> appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n install:\n - cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes."
      }
    ]
  },
  {
    "sha": "fa9b60c842741dc92a33925fca5796ebaa4510bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTliNjBjODQyNzQxZGM5MmEzMzkyNWZjYTU3OTZlYmFhNDUxMGJk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T15:01:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T15:32:02Z"
      },
      "message": "Remove unused TransactionError constants",
      "tree": {
        "sha": "a918c59fb07a53c5af68f72430f751b2cb642da9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a918c59fb07a53c5af68f72430f751b2cb642da9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9b60c842741dc92a33925fca5796ebaa4510bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZYnyAAoJEM4rdWl+aaVIzLAL/jI/guXWZg+1a5QXg0yYUimp\nSnY6sMFG1SaVpJY2Ke+VchhwsIl8WFJoLBDO2wK/V/b/VwAIJz9rsurR2/vKWfR/\noXRJEZUXKOpPEIqEZEm/o6V2nAjZ8VDn4IwNj7zFVt8JCTy7hq4rBnLZnju9Q+PK\nr0grJXgye9/2kryIKucauMgKuqJgGgYkdCvX7vObMElgyBpM6OCQ9kD1ZdIH38kF\nXzF8aYF6DezOeAcEt1NG4z/6M9FlLEkKV+5IrKbIIpv7Jtj6j3cqDNyTNE7eJAyO\n5p2985+QnodzXF4rQwdXAvHLcS4wP0nHLdtjH+c2wc/QYdbjLqbNQOmvN0Gndcra\nPC8PnQ1ArsgdX3IdKkpAxjy+ahv0FLz8po1fJgkYxWhPRhuPyssCpcc1c/8vOYPM\nOFer2q6kB3TgKDw9/uJu+1gsY66L2tQZdIMPlvclCHKSR8rdK0OwusLq2z9MH7SN\nudmH9NZrHBqfpG5SFvwA/Gn8b++OOdrvzzfm6krLgg==\n=YlIa\n-----END PGP SIGNATURE-----",
        "payload": "tree a918c59fb07a53c5af68f72430f751b2cb642da9\nparent 38989ab03fb74ad56c1018c37cb24d17cbb3a16f\nauthor MarcoFalke <falke.marco@gmail.com> 1550156466 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550158322 -0500\n\nRemove unused TransactionError constants\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9b60c842741dc92a33925fca5796ebaa4510bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9b60c842741dc92a33925fca5796ebaa4510bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9b60c842741dc92a33925fca5796ebaa4510bd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38989ab03fb74ad56c1018c37cb24d17cbb3a16f"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 45,
      "deletions": 70
    },
    "files": [
      {
        "sha": "7b9b4310e7a6c38587c3cb7d9ca70b2deabeba77",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 26,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -12,7 +12,7 @@\n \n #include <future>\n \n-const char* TransactionErrorString(const TransactionError err)\n+std::string TransactionErrorString(const TransactionError err)\n {\n     switch (err) {\n         case TransactionError::OK:\n@@ -33,22 +33,16 @@ const char* TransactionErrorString(const TransactionError err)\n             return \"PSBTs not compatible (different transactions)\";\n         case TransactionError::SIGHASH_MISMATCH:\n             return \"Specified sighash value does not match existing value\";\n-\n-        case TransactionError::UNKNOWN_ERROR:\n-        default: break;\n+        // no default case, so the compiler can warn about missing cases\n     }\n-    return \"Unknown error\";\n+    assert(false);\n }\n \n-bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, TransactionError& error, std::string& err_string, const bool allowhighfees)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, std::string& err_string, const CAmount& highfee)\n {\n     std::promise<void> promise;\n     hashTx = tx->GetHash();\n \n-    CAmount nMaxRawTxFee = maxTxFee;\n-    if (allowhighfees)\n-        nMaxRawTxFee = 0;\n-\n     { // cs_main scope\n     LOCK(cs_main);\n     CCoinsViewCache &view = *pcoinsTip;\n@@ -63,19 +57,16 @@ bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, Transaction\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, highfee)) {\n             if (state.IsInvalid()) {\n                 err_string = FormatStateMessage(state);\n-                error = TransactionError::MEMPOOL_REJECTED;\n-                return false;\n+                return TransactionError::MEMPOOL_REJECTED;\n             } else {\n                 if (fMissingInputs) {\n-                    error = TransactionError::MISSING_INPUTS;\n-                    return false;\n+                    return TransactionError::MISSING_INPUTS;\n                 }\n                 err_string = FormatStateMessage(state);\n-                error = TransactionError::MEMPOOL_ERROR;\n-                return false;\n+                return TransactionError::MEMPOOL_ERROR;\n             }\n         } else {\n             // If wallet is enabled, ensure that the wallet has been made aware\n@@ -88,8 +79,7 @@ bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, Transaction\n             });\n         }\n     } else if (fHaveChain) {\n-        error = TransactionError::ALREADY_IN_CHAIN;\n-        return false;\n+        return TransactionError::ALREADY_IN_CHAIN;\n     } else {\n         // Make sure we don't block forever if re-sending\n         // a transaction already in mempool.\n@@ -100,16 +90,14 @@ bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, Transaction\n \n     promise.get_future().wait();\n \n-    if(!g_connman) {\n-        error = TransactionError::P2P_DISABLED;\n-        return false;\n+    if (!g_connman) {\n+        return TransactionError::P2P_DISABLED;\n     }\n \n     CInv inv(MSG_TX, hashTx);\n-    g_connman->ForEachNode([&inv](CNode* pnode)\n-    {\n+    g_connman->ForEachNode([&inv](CNode* pnode) {\n         pnode->PushInventory(inv);\n     });\n \n-    return true;\n-    }\n+    return TransactionError::OK;\n+}"
      },
      {
        "sha": "3457ececa4cebe37f27c0b5551866c894e1dcd93",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -1,17 +1,16 @@\n-// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_NODE_TRANSACTION_H\n #define BITCOIN_NODE_TRANSACTION_H\n \n+#include <attributes.h>\n #include <primitives/transaction.h>\n #include <uint256.h>\n \n enum class TransactionError {\n-    OK = 0,\n-    UNKNOWN_ERROR,\n-\n+    OK, //!< No error\n     MISSING_INPUTS,\n     ALREADY_IN_CHAIN,\n     P2P_DISABLED,\n@@ -20,24 +19,19 @@ enum class TransactionError {\n     INVALID_PSBT,\n     PSBT_MISMATCH,\n     SIGHASH_MISMATCH,\n-\n-    ERROR_COUNT\n };\n \n-#define TRANSACTION_ERR_LAST TransactionError::ERROR_COUNT\n-\n-const char* TransactionErrorString(const TransactionError error);\n+std::string TransactionErrorString(const TransactionError error);\n \n /**\n  * Broadcast a transaction\n  *\n  * @param[in]  tx the transaction to broadcast\n  * @param[out] &txid the txid of the transaction, if successfully broadcast\n- * @param[out] &error reference to UniValue to fill with error info on failure\n  * @param[out] &err_string reference to std::string to fill with error string if available\n- * @param[in]  allowhighfees whether to allow fees exceeding maxTxFee\n- * return true on success, false on error (and fills in `error`)\n+ * @param[in]  highfee Reject txs with fees higher than this (if 0, accept any fee)\n+ * return error\n  */\n-bool BroadcastTransaction(CTransactionRef tx, uint256& txid, TransactionError& error, std::string& err_string, bool allowhighfees = false);\n+NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, uint256& txid, std::string& err_string, const CAmount& highfee);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "f0e177a6407d6432bd1ba2ca373528f58d439500",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -263,21 +263,19 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n     return true;\n }\n \n-bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs)\n+TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs)\n {\n     out = psbtxs[0]; // Copy the first one\n \n     // Merge\n     for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n         if (!out.Merge(*it)) {\n-            error = TransactionError::PSBT_MISMATCH;\n-            return false;\n+            return TransactionError::PSBT_MISMATCH;\n         }\n     }\n     if (!out.IsSane()) {\n-        error = TransactionError::INVALID_PSBT;\n-        return false;\n+        return TransactionError::INVALID_PSBT;\n     }\n \n-    return true;\n+    return TransactionError::OK;\n }"
      },
      {
        "sha": "efa3d58498bc19b1b579024184a0645222dd5c0b",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -565,10 +565,9 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n  * Combines PSBTs with the same underlying transaction, resulting in a single PSBT with all partial signatures from each input.\n  *\n  * @param[out] &out   the combined PSBT, if successful\n- * @param[out] &error reference to TransactionError to fill with error info on failure\n  * @param[in]  psbtxs the PSBTs to combine\n- * @return True if we successfully combined the transactions, false if they were not compatible\n+ * @return error (OK if we successfully combined the transactions, other error if they were not compatible)\n  */\n-bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs);\n+NODISCARD TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n \n #endif // BITCOIN_PSBT_H"
      },
      {
        "sha": "44cac142285f65058c7194d1899b63664c3649a4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -1050,10 +1050,11 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n     bool allowhighfees = false;\n     if (!request.params[1].isNull()) allowhighfees = request.params[1].get_bool();\n+    const CAmount highfee{allowhighfees ? 0 : ::maxTxFee};\n     uint256 txid;\n-    TransactionError err;\n     std::string err_string;\n-    if (!BroadcastTransaction(tx, txid, err, err_string, allowhighfees)) {\n+    const TransactionError err = BroadcastTransaction(tx, txid, err_string, highfee);\n+    if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n \n@@ -1478,8 +1479,8 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n     }\n \n     PartiallySignedTransaction merged_psbt;\n-    TransactionError error;\n-    if (!CombinePSBTs(merged_psbt, error, psbtxs)) {\n+    const TransactionError error = CombinePSBTs(merged_psbt, psbtxs);\n+    if (error != TransactionError::OK) {\n         throw JSONRPCTransactionError(error);\n     }\n "
      },
      {
        "sha": "1b17b09763460ff2b86100f3bc0bcadcf369221a",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <wallet/psbtwallet.h>\n \n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, TransactionError& error, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n+TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n {\n     LOCK(pwallet->cs_wallet);\n     // Get all of the previous transactions\n@@ -19,8 +19,7 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, Transac\n \n         // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n         if (!input.IsSane()) {\n-            error = TransactionError::INVALID_PSBT;\n-            return false;\n+            return TransactionError::INVALID_PSBT;\n         }\n \n         // If we have no utxo, grab it from the wallet.\n@@ -37,8 +36,7 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, Transac\n \n         // Get the Sighash type\n         if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            error = TransactionError::SIGHASH_MISMATCH;\n-            return false;\n+            return TransactionError::SIGHASH_MISMATCH;\n         }\n \n         complete &= SignPSBTInput(HidingSigningProvider(pwallet, !sign, !bip32derivs), psbtx, i, sighash_type);\n@@ -58,5 +56,5 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, Transac\n         psbt_out.FromSignatureData(sigdata);\n     }\n \n-    return true;\n+    return TransactionError::OK;\n }"
      },
      {
        "sha": "a24a0967d2d6bcbc5c34d3dd98d0003e9afd9fde",
        "filename": "src/wallet/psbtwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,16 +18,14 @@\n  *\n  * @param[in]  pwallet pointer to a wallet\n  * @param[in]  &psbtx reference to PartiallySignedTransaction to fill in\n- * @param[out] &error reference to UniValue to fill with error info on failure\n  * @param[out] &complete indicates whether the PSBT is now complete\n  * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n  * @param[in]  sign whether to sign or not\n  * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n- * return true on success, false on error (and fills in `error`)\n+ * return error\n  */\n-bool FillPSBT(const CWallet* pwallet,\n+NODISCARD TransactionError FillPSBT(const CWallet* pwallet,\n               PartiallySignedTransaction& psbtx,\n-              TransactionError& error,\n               bool& complete,\n               int sighash_type = 1 /* SIGHASH_ALL */,\n               bool sign = true,"
      },
      {
        "sha": "4211eeac88d98e6b03ac6d39274ce50836f19480",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -3995,8 +3995,8 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n     bool complete = true;\n-    TransactionError err;\n-    if (!FillPSBT(pwallet, psbtx, err, complete, nHashType, sign, bip32derivs)) {\n+    const TransactionError err = FillPSBT(pwallet, psbtx, complete, nHashType, sign, bip32derivs);\n+    if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n \n@@ -4113,8 +4113,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n     bool complete = true;\n-    TransactionError err;\n-    if (!FillPSBT(pwallet, psbtx, err, complete, 1, false, bip32derivs)) {\n+    const TransactionError err = FillPSBT(pwallet, psbtx, complete, 1, false, bip32derivs);\n+    if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n "
      },
      {
        "sha": "d1a9741ca1b53e25539ee3efe495294cbcff8d11",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9b60c842741dc92a33925fca5796ebaa4510bd/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "patch": "@@ -61,9 +61,8 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     ssData >> psbtx;\n \n     // Fill transaction with our data\n-    TransactionError err;\n     bool complete = true;\n-    FillPSBT(&m_wallet, psbtx, err, complete, SIGHASH_ALL, false, true);\n+    BOOST_REQUIRE_EQUAL(TransactionError::OK, FillPSBT(&m_wallet, psbtx, complete, SIGHASH_ALL, false, true));\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      }
    ]
  },
  {
    "sha": "9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjFkZjRiYTBiZWMzZmY1ZjYxOTVlYjYzMjIxYTc1MTE5N2YyYTU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T15:33:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T15:34:00Z"
      },
      "message": "Merge #15388: [build] Makefile.am: add rule for src/bitcoin-wallet\n\n4a43eb8cdf [build] Makefile.am: add rule for src/bitcoin-wallet (Sjors Provoost)\n\nPull request description:\n\n  Otherwise `make src/bitcoin-wallet` will fail with `No rule to make target`.\n\n  Also adds `bitcoin-wallet.exe` to the Windows installer.\n\nTree-SHA512: 932c34b349ec3efa17d1f1251d386434d0db6a07939d500236364a851468981c69392e2a00e26c9753d9b2d8ef056b5de870c5bd5202aa0c73326f9ed1403681",
      "tree": {
        "sha": "f3818f1817e876c7f54710b5fe3277da75937443",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3818f1817e876c7f54710b5fe3277da75937443"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZYpoAAoJENLqSFDnUoslSvYP/30SeL2HDmx7Udn3cnKjZh4W\niOFS42U/DSyIRzqyltDsi7dZMCWLDSRp8fqaoQBgy47ZZWAGjAllmztEECQd4HYm\ngzCX1GOFGT5kqVBP5PHsPzAgKhiBXADh1tAC5SFHywzoMnkl3mDlIav+etdxwlZ9\nPr25Dk4P3UphXcOyRwH/BP3C3uzz7ltSuYTcACg5IQ14kCIXWLFn44gw/nI3BBaa\ngzhG9smGyO8xZ55TBWzgRSwwsL/MPgz/cn3sTlLZlzZ50/PJu6KlBxTf9XDoZQQ8\n4kNnEPO6UoFdYmCl1bQZ+iPmD6Iw4yij71TY5CN8cP6PQxT3tLiv90b0qXnBdHCT\nGWA8CuGR5qI+zlJol3BLLDX2srfHkVktSG94y5r1jtvLeoq4WzEYgdiropHATTIw\nrl8fEsib0OYfp42EQKolaIw6LW8uXaC/tAXyglxSjoJJwPsaFOtm7TiVRQVpxhZH\nihjejeHOSfpWRt4l89ayG+5M2/w15OFPYIsRR9PBhmZOTsF9VywGS3YRLaFcLWih\natzzYV9JN6msH/lMk821PQidlW9c8Ku4BvVOLQWKON1jmG7PtQsZfQDKGfkG65NV\nhz27i3VeUd7xwmCSpmXsnXeTKEyZL7sGuLIKuybUZvDu5p/vxU2cCdLwbEKd1pfK\nAujo3QEY9KDpqfsAMUmn\n=ENid\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICZ0oG5T0s7YN94es/Tie5WbjK+41YtHoFjPjRBJX5phCP/wEDBs5DeFB+3z\nIfmuWf3Dd0YI8CBA0whjZ8yvUM9Va2dB/lKfsnnMtdakbQeJVq081kba2wjxBFxl\nimvwCKTvu8NcX/4AAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQb8muJuGZuEVgY/ILo/Dr9QjwEFD9FAAaJts/\nUZ3vbOEoXZoI8CDYXQgc46tNvBcXqwS/f/tW91nRSoMFZHSNP36WG2WywgjxBFxl\nimzwCC61rbD8+xMfAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQuSYgNIjI2tCaDrwbt69ucAjxBFxlimvwCACmjpWk\nyk0XAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n8BC6vBVzYPfjcDTi4RSlVfmWCPAgDq4St3eYeGfHa1hOWLp9wEgpKJjKY4v+JIPp\nulR29SUI8QRcZYpr8AifcAgNq78OowCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5i\ndGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f3818f1817e876c7f54710b5fe3277da75937443\nparent e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205\nparent 4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac\nauthor MarcoFalke <falke.marco@gmail.com> 1550158420 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550158440 -0500\n\nMerge #15388: [build] Makefile.am: add rule for src/bitcoin-wallet\n\n4a43eb8cdf [build] Makefile.am: add rule for src/bitcoin-wallet (Sjors Provoost)\n\nPull request description:\n\n  Otherwise `make src/bitcoin-wallet` will fail with `No rule to make target`.\n\n  Also adds `bitcoin-wallet.exe` to the Windows installer.\n\nTree-SHA512: 932c34b349ec3efa17d1f1251d386434d0db6a07939d500236364a851468981c69392e2a00e26c9753d9b2d8ef056b5de870c5bd5202aa0c73326f9ed1403681\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1df4ba0bec3ff5f6195eb63221a751197f2a57/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205"
      },
      {
        "sha": "4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a43eb8cdf8bc80ee866a5e7bc16c6fb4dd19eac"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "287ba3ab3a91203f3976bada5a2db8adce5a86a5",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b1df4ba0bec3ff5f6195eb63221a751197f2a57/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b1df4ba0bec3ff5f6195eb63221a751197f2a57/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
        "patch": "@@ -20,6 +20,7 @@ BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\n BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\n BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\n BITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)\n+BITCOIN_WALLET_BIN=$(top_builddir)/src/$(BITCOIN_WALLET_TOOL_NAME)$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)\n \n empty :=\n@@ -76,6 +77,7 @@ $(BITCOIN_WIN_INSTALLER): all-recursive\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n+\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_WALLET_BIN) $(top_builddir)/release\n \t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n \t  echo error: could not build $@\n \t@echo built $@\n@@ -172,6 +174,9 @@ $(BITCOIN_CLI_BIN): FORCE\n $(BITCOIN_TX_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n+$(BITCOIN_WALLET_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n if USE_LCOV\n LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"/usr/lib/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n "
      },
      {
        "sha": "046deed9eae0933079e8829d35d4ed559e9d249f",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b1df4ba0bec3ff5f6195eb63221a751197f2a57/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b1df4ba0bec3ff5f6195eb63221a751197f2a57/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
        "patch": "@@ -81,6 +81,7 @@ Section -Main SEC0000\n     File @abs_top_srcdir@/release/@BITCOIN_DAEMON_NAME@@EXEEXT@\n     File @abs_top_srcdir@/release/@BITCOIN_CLI_NAME@@EXEEXT@\n     File @abs_top_srcdir@/release/@BITCOIN_TX_NAME@@EXEEXT@\n+    File @abs_top_srcdir@/release/@BITCOIN_WALLET_TOOL_NAME@@EXEEXT@\n     SetOutPath $INSTDIR\\doc\n     File /r /x Makefile* @abs_top_srcdir@/doc\\*.*\n     SetOutPath $INSTDIR"
      }
    ]
  },
  {
    "sha": "c45415f73a095665a8ff6172b57eb818cf572547",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDU0MTVmNzNhMDk1NjY1YThmZjYxNzJiNTdlYjgxOGNmNTcyNTQ3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T19:00:28Z"
      },
      "message": "Refactor keymetadata writing to a separate method",
      "tree": {
        "sha": "087b8e9989497930c5bb0d862b80139a8c498f2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/087b8e9989497930c5bb0d862b80139a8c498f2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45415f73a095665a8ff6172b57eb818cf572547",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45415f73a095665a8ff6172b57eb818cf572547",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c45415f73a095665a8ff6172b57eb818cf572547",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45415f73a095665a8ff6172b57eb818cf572547/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1df4ba0bec3ff5f6195eb63221a751197f2a57"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6e7b944e49666a83b11ca2e97427516b188afb4f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45415f73a095665a8ff6172b57eb818cf572547/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45415f73a095665a8ff6172b57eb818cf572547/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=c45415f73a095665a8ff6172b57eb818cf572547",
        "patch": "@@ -57,9 +57,14 @@ bool WalletBatch::EraseTx(uint256 hash)\n     return EraseIC(std::make_pair(std::string(\"tx\"), hash));\n }\n \n+bool WalletBatch::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n+{\n+    return WriteIC(std::make_pair(std::string(\"keymeta\"), pubkey), meta, overwrite);\n+}\n+\n bool WalletBatch::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"keymeta\"), vchPubKey), keyMeta, false)) {\n+    if (!WriteKeyMetadata(keyMeta, vchPubKey, false)) {\n         return false;\n     }\n \n@@ -76,7 +81,7 @@ bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n                                 const std::vector<unsigned char>& vchCryptedSecret,\n                                 const CKeyMetadata &keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"keymeta\"), vchPubKey), keyMeta)) {\n+    if (!WriteKeyMetadata(keyMeta, vchPubKey, true)) {\n         return false;\n     }\n "
      },
      {
        "sha": "2e8d9b16ba4be2cc3a8589944195523956cb4bd0",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45415f73a095665a8ff6172b57eb818cf572547/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45415f73a095665a8ff6172b57eb818cf572547/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=c45415f73a095665a8ff6172b57eb818cf572547",
        "patch": "@@ -177,6 +177,7 @@ class WalletBatch\n     bool WriteTx(const CWalletTx& wtx);\n     bool EraseTx(uint256 hash);\n \n+    bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite);\n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n     bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);"
      }
    ]
  },
  {
    "sha": "e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzY1MmQzZjY0MjEyYTZhZjY4ZmM3ZDc4ODQxMWQyOGZjYmRiZDBh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:43Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T19:00:28Z"
      },
      "message": "Add WriteHDKeypath function and move *HDKeypath to util/bip32.{h,cpp}\n\nCreates new files util/bip32.h and util/bip32.cpp for containing\nBIP 32 stuff.\nMoves FormatKeyPath from descriptor.cpp to util/bip32.\nAdds a wrapper around it to prepent the 'm' for when just the\nBIP 32 style keypath is needed.",
      "tree": {
        "sha": "6fefe2f16e7e29c4af58765fad34064d758de483",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fefe2f16e7e29c4af58765fad34064d758de483"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c45415f73a095665a8ff6172b57eb818cf572547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45415f73a095665a8ff6172b57eb818cf572547",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c45415f73a095665a8ff6172b57eb818cf572547"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 95,
      "deletions": 57
    },
    "files": [
      {
        "sha": "e3f5734c0b8b6e1f72b8c726d9371f6ae82774eb",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -196,6 +196,7 @@ BITCOIN_CORE_H = \\\n   txmempool.h \\\n   ui_interface.h \\\n   undo.h \\\n+  util/bip32.h \\\n   util/bytevectorhash.h \\\n   util/system.h \\\n   util/memory.h \\\n@@ -456,6 +457,7 @@ libbitcoin_util_a_SOURCES = \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\\n+  util/bip32.cpp \\\n   util/bytevectorhash.cpp \\\n   util/system.cpp \\\n   util/moneystr.cpp \\"
      },
      {
        "sha": "3c7fa7b80698379dd0d83eaca2ad173197fdef10",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -26,6 +26,7 @@\n #include <script/sign.h>\n #include <script/standard.h>\n #include <uint256.h>\n+#include <util/bip32.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <validationinterface.h>"
      },
      {
        "sha": "532a8028a2895049fd5610ae4d16d4dee9f816ed",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -10,6 +10,7 @@\n #include <script/standard.h>\n \n #include <span.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n \n@@ -25,16 +26,6 @@ namespace {\n \n typedef std::vector<uint32_t> KeyPath;\n \n-std::string FormatKeyPath(const KeyPath& path)\n-{\n-    std::string ret;\n-    for (auto i : path) {\n-        ret += strprintf(\"/%i\", (i << 1) >> 1);\n-        if (i >> 31) ret += '\\'';\n-    }\n-    return ret;\n-}\n-\n /** Interface for public key objects in descriptors. */\n struct PubkeyProvider\n {\n@@ -63,7 +54,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n     std::string OriginString() const\n     {\n-        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatKeyPath(m_origin.path);\n+        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatHDKeypath(m_origin.path);\n     }\n \n public:\n@@ -184,7 +175,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n     std::string ToString() const override\n     {\n-        std::string ret = EncodeExtPubKey(m_extkey) + FormatKeyPath(m_path);\n+        std::string ret = EncodeExtPubKey(m_extkey) + FormatHDKeypath(m_path);\n         if (IsRange()) {\n             ret += \"/*\";\n             if (m_derive == DeriveType::HARDENED) ret += '\\'';\n@@ -195,7 +186,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     {\n         CExtKey key;\n         if (!GetExtKey(arg, key)) return false;\n-        out = EncodeExtKey(key) + FormatKeyPath(m_path);\n+        out = EncodeExtKey(key) + FormatHDKeypath(m_path);\n         if (IsRange()) {\n             out += \"/*\";\n             if (m_derive == DeriveType::HARDENED) out += '\\'';"
      },
      {
        "sha": "6f176dd5ec30defcfcf4360d2f89b285d2a6d23e",
        "filename": "src/util/bip32.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/bip32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/bip32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sstream>\n+#include <stdio.h>\n+#include <tinyformat.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+\n+\n+bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)\n+{\n+    std::stringstream ss(keypath_str);\n+    std::string item;\n+    bool first = true;\n+    while (std::getline(ss, item, '/')) {\n+        if (item.compare(\"m\") == 0) {\n+            if (first) {\n+                first = false;\n+                continue;\n+            }\n+            return false;\n+        }\n+        // Finds whether it is hardened\n+        uint32_t path = 0;\n+        size_t pos = item.find(\"'\");\n+        if (pos != std::string::npos) {\n+            // The hardened tick can only be in the last index of the string\n+            if (pos != item.size() - 1) {\n+                return false;\n+            }\n+            path |= 0x80000000;\n+            item = item.substr(0, item.size() - 1); // Drop the last character which is the hardened tick\n+        }\n+\n+        // Ensure this is only numbers\n+        if (item.find_first_not_of( \"0123456789\" ) != std::string::npos) {\n+            return false;\n+        }\n+        uint32_t number;\n+        if (!ParseUInt32(item, &number)) {\n+            return false;\n+        }\n+        path |= number;\n+\n+        keypath.push_back(path);\n+        first = false;\n+    }\n+    return true;\n+}\n+\n+std::string FormatHDKeypath(const std::vector<uint32_t>& path)\n+{\n+    std::string ret;\n+    for (auto i : path) {\n+        ret += strprintf(\"/%i\", (i << 1) >> 1);\n+        if (i >> 31) ret += '\\'';\n+    }\n+    return ret;\n+}\n+\n+std::string WriteHDKeypath(const std::vector<uint32_t>& keypath)\n+{\n+    return \"m\" + FormatHDKeypath(keypath);\n+}"
      },
      {
        "sha": "7e58b79f38ab73f9c4613fc0c25f15a154c6b7ad",
        "filename": "src/util/bip32.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/bip32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/bip32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.h?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_BIP32_H\n+#define BITCOIN_UTIL_BIP32_H\n+\n+#include <attributes.h>\n+#include <string>\n+#include <vector>\n+\n+/** Parse an HD keypaths like \"m/7/0'/2000\". */\n+NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n+\n+/** Write HD keypaths as strings */\n+std::string WriteHDKeypath(const std::vector<uint32_t>& keypath);\n+std::string FormatHDKeypath(const std::vector<uint32_t>& path);\n+\n+#endif // BITCOIN_UTIL_BIP32_H"
      },
      {
        "sha": "0acbb4f117fafaf0b0a99f196348f6032aec5282",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -546,47 +546,6 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n     return true;\n }\n \n-bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)\n-{\n-    std::stringstream ss(keypath_str);\n-    std::string item;\n-    bool first = true;\n-    while (std::getline(ss, item, '/')) {\n-        if (item.compare(\"m\") == 0) {\n-            if (first) {\n-                first = false;\n-                continue;\n-            }\n-            return false;\n-        }\n-        // Finds whether it is hardened\n-        uint32_t path = 0;\n-        size_t pos = item.find(\"'\");\n-        if (pos != std::string::npos) {\n-            // The hardened tick can only be in the last index of the string\n-            if (pos != item.size() - 1) {\n-                return false;\n-            }\n-            path |= 0x80000000;\n-            item = item.substr(0, item.size() - 1); // Drop the last character which is the hardened tick\n-        }\n-\n-        // Ensure this is only numbers\n-        if (item.find_first_not_of( \"0123456789\" ) != std::string::npos) {\n-            return false;\n-        }\n-        uint32_t number;\n-        if (!ParseUInt32(item, &number)) {\n-            return false;\n-        }\n-        path |= number;\n-\n-        keypath.push_back(path);\n-        first = false;\n-    }\n-    return true;\n-}\n-\n void Downcase(std::string& str)\n {\n     std::transform(str.begin(), str.end(), str.begin(), [](char c){return ToLower(c);});"
      },
      {
        "sha": "cf770440941cbd528fa131194a0631c1d5148368",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -197,9 +197,6 @@ bool ConvertBits(const O& outfn, I it, I end) {\n     return true;\n }\n \n-/** Parse an HD keypaths like \"m/7/0'/2000\". */\n-NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n-\n /**\n  * Converts the given character to its lowercase equivalent.\n  * This function is locale independent. It only converts uppercase"
      },
      {
        "sha": "21edd9686c3b0c8030badc7b89a636863c4d8eee",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -27,6 +27,7 @@\n #include <script/sign.h>\n #include <shutdown.h>\n #include <timedata.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n #include <wallet/coincontrol.h>"
      },
      {
        "sha": "2a3149de465595532d7c0188bbb8c86eb887d5c9",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <key_io.h>\n #include <script/sign.h>\n+#include <util/bip32.h>\n #include <util/strencodings.h>\n #include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>"
      },
      {
        "sha": "69e8b08359385f842fb255f06679255c160ae9c8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7652d3f64212a6af68fc7d788411d28fcbdbd0a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "patch": "@@ -27,6 +27,7 @@\n #include <shutdown.h>\n #include <timedata.h>\n #include <txmempool.h>\n+#include <util/bip32.h>\n #include <util/moneystr.h>\n #include <wallet/fees.h>\n "
      }
    ]
  },
  {
    "sha": "bac8c676a727b4216ffcf4c430858bb93fda302e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWM4YzY3NmE3MjdiNDIxNmZmY2Y0YzQzMDg1OGJiOTNmZGEzMDJl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T19:00:29Z"
      },
      "message": "Add a method to CWallet to write just CKeyMetadata",
      "tree": {
        "sha": "ed1b8573a9ae38bf3f60b257619107bfe0dab93e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed1b8573a9ae38bf3f60b257619107bfe0dab93e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bac8c676a727b4216ffcf4c430858bb93fda302e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac8c676a727b4216ffcf4c430858bb93fda302e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bac8c676a727b4216ffcf4c430858bb93fda302e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac8c676a727b4216ffcf4c430858bb93fda302e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7652d3f64212a6af68fc7d788411d28fcbdbd0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7652d3f64212a6af68fc7d788411d28fcbdbd0a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4c5ac2a821bec2c74425c6d3699dc491c29ce094",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac8c676a727b4216ffcf4c430858bb93fda302e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac8c676a727b4216ffcf4c430858bb93fda302e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bac8c676a727b4216ffcf4c430858bb93fda302e",
        "patch": "@@ -349,6 +349,12 @@ void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata\n     m_script_metadata[script_id] = meta;\n }\n \n+// Writes a keymetadata for a public key. overwrite specifies whether to overwrite an existing metadata for that key if there exists one.\n+bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n+{\n+    return WalletBatch(*database).WriteKeyMetadata(meta, pubkey, overwrite);\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);"
      },
      {
        "sha": "18bcc9af9c16d7fa7c8f803b887c515da69e88c5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac8c676a727b4216ffcf4c430858bb93fda302e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac8c676a727b4216ffcf4c430858bb93fda302e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bac8c676a727b4216ffcf4c430858bb93fda302e",
        "patch": "@@ -776,6 +776,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     // Map from Script ID to key metadata (for watch-only keys).\n     std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_wallet);\n \n+    bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, bool overwrite);\n+\n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID = 0;"
      }
    ]
  },
  {
    "sha": "345bff6013e0d1a7eb0a08a071723b27f0460b77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDViZmY2MDEzZTBkMWE3ZWIwYTA4YTA3MTcyM2IyN2YwNDYwYjc3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-12T15:41:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T19:00:29Z"
      },
      "message": "Remove hdmasterkeyid",
      "tree": {
        "sha": "fea47b5196838378e3d55fc868595b0509b28788",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fea47b5196838378e3d55fc868595b0509b28788"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/345bff6013e0d1a7eb0a08a071723b27f0460b77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/345bff6013e0d1a7eb0a08a071723b27f0460b77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/345bff6013e0d1a7eb0a08a071723b27f0460b77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/345bff6013e0d1a7eb0a08a071723b27f0460b77/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bac8c676a727b4216ffcf4c430858bb93fda302e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac8c676a727b4216ffcf4c430858bb93fda302e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bac8c676a727b4216ffcf4c430858bb93fda302e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b460405821f00d12fb76e2686f72e3d948525169",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/345bff6013e0d1a7eb0a08a071723b27f0460b77/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/345bff6013e0d1a7eb0a08a071723b27f0460b77/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "patch": "@@ -2419,7 +2419,6 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"unlocked_until\\\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"hdseedid\\\": \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n-            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"       (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.\\n\"\n             \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n             \"}\\n\"\n                 },\n@@ -2457,7 +2456,6 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFeePerK()));\n     if (!seed_id.IsNull()) {\n         obj.pushKV(\"hdseedid\", seed_id.GetHex());\n-        obj.pushKV(\"hdmasterkeyid\", seed_id.GetHex());\n     }\n     obj.pushKV(\"private_keys_enabled\", !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     return obj;\n@@ -3661,7 +3659,6 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) alias for hdseedid maintained for backwards compatibility. Will be removed in V0.18.\\n\"\n             \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n@@ -3727,7 +3724,6 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         if (!meta->hdKeypath.empty()) {\n             ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n             ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n-            ret.pushKV(\"hdmasterkeyid\", meta->hd_seed_id.GetHex());\n         }\n     }\n "
      },
      {
        "sha": "61245e5104e8184712adefa8a59bd89486183c61",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/345bff6013e0d1a7eb0a08a071723b27f0460b77/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/345bff6013e0d1a7eb0a08a071723b27f0460b77/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "patch": "@@ -27,7 +27,6 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         # Make sure we use hd, keep masterkeyid\n         masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n-        assert_equal(masterkeyid, self.nodes[1].getwalletinfo()['hdmasterkeyid'])\n         assert_equal(len(masterkeyid), 40)\n \n         # create an internal key\n@@ -53,7 +52,6 @@ def run_test(self):\n             hd_info = self.nodes[1].getaddressinfo(hd_add)\n             assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdseedid\"], masterkeyid)\n-            assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n             self.nodes[0].generate(1)\n         self.nodes[0].sendtoaddress(non_hd_add, 1)\n@@ -83,7 +81,6 @@ def run_test(self):\n             hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info_2[\"hdseedid\"], masterkeyid)\n-            assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()"
      },
      {
        "sha": "11161962680841c00f4066b323352a896926f8ab",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/345bff6013e0d1a7eb0a08a071723b27f0460b77/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/345bff6013e0d1a7eb0a08a071723b27f0460b77/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "patch": "@@ -21,7 +21,6 @@ def run_test(self):\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n-        assert_equal(wallet_info_old['hdseedid'], wallet_info_old['hdmasterkeyid'])\n         assert(addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid'])\n \n         # Encrypt wallet and wait to terminate\n@@ -30,7 +29,6 @@ def run_test(self):\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n-        assert_equal(wallet_info['hdseedid'], wallet_info['hdmasterkeyid'])\n         assert(addr_before_encrypting_data['hdseedid'] != wallet_info['hdseedid'])\n         assert(addr_data['hdseedid'] == wallet_info['hdseedid'])\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)"
      }
    ]
  },
  {
    "sha": "758c6d784da0f191c408fda97b3071dd7e1fe8a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NThjNmQ3ODRkYTBmMTkxYzQwOGZkYTk3YjMwNzFkZDdlMWZlOGEw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-14T19:19:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-14T19:31:17Z"
      },
      "message": "Merge #15063: GUI: If BIP70 is disabled, attempt to fall back to BIP21 parsing\n\n84f53154e Travis: Add test without BIP70 (but still full wallet + tests) (Luke Dashjr)\n113f0004b GUI: If BIP70 is disabled, give a proper error when trying to open a payment request file (Luke Dashjr)\n9975282fa GUI: If BIP70 is disabled, attempt to fall back to BIP21 parsing (Luke Dashjr)\n\nPull request description:\n\nTree-SHA512: 66a684ce4336d0eac8b0107b405ff3a2cf312258a967f3e1b14734cd39db11e2db3e9b03492755583170d94d54754ef536b0776e5f19a0cc2caca8379eeb4495",
      "tree": {
        "sha": "54dfe5ce1d6584826bfe5cc98776bf2d5d85a2e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54dfe5ce1d6584826bfe5cc98776bf2d5d85a2e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/758c6d784da0f191c408fda97b3071dd7e1fe8a0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlxlwgUACgkQHrd2uwPH\nki0mGQ//ZNx1JETrgGks4h+VNUhsvFrZDqn8C4mLGzR4c/gw3cozaIsRWXewQC/l\nzWm8QwY8SIwRUYDDaiKVUuqjO7INFLubAzP1SEUXXPtWEmRWZX2jz1fUX0yCEhH8\nb/bpopgpD2PPWEHIR9CHjoaZbse4sGjgimvU8llu9XnoYyr1AzHFg6ch7iB+u0eg\n/gdSFuazYC/kV4jpkjYwAd33SuOPaz7niCPsjQxWe39AkEl6jiqZEPsFyNnEtlz/\noR9P+r3MPp3Brzx8FwilUxFlCC+SNW8tsOWu2b9p17OvQvh1J/pwa5vmNNQy26kt\nrtNHkKmBITaBXIXlZValgqI8/xYSdsnNY+hLRbzqtZdgpAeoy6/zhJ1QdI6VgHpU\nzJm3B5IqJcqK/BdpMWWR9kuhWA64PhH0K2jMZmC9ywYMke/eFjR0CWoupxfQPdPv\nbp81pZZeVqQk0+ax1Lx9wS1+YI+N1vx3kZVan8VNYfPlmBJQoX0MadwQg72dUm9j\nBVgQ6QjHzCnjIo91lWjDVae9PRcCz9IY8bK5l64jFm+su9zwXQFaMTKyz0zbb9Nm\nDs9LXOGqlaeTMKR/mB7Fx0PhJGVicCUCp7QgnCagL/GBNSdF7xnRG0zGaWMSt6aE\nw5pqLbasUU2BPEo0qBcuTULfmX2TdMSj0FmUzucX+jkNlGN62/8=\n=6vRh\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQD/8BAEVsH579UywhQc99H/ZGCzCPEEXGXCBvAIJgSUmQJVkrYAg9/jDS75DI4s\nK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmf/8BAQ\n/naE4uPQT98NGMdfWGaLCPEEXGXCB/AI2L9kBAwunVQAg9/jDS75DI4uLWh0dHBz\nOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQhwF8n+Tj\nEfwKw09NpjtMwAjwEOXhXigb0wAo22bjorGIFtAI8QRcZcIH8AhKBcEreDnCIgCD\n3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNv\nbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 54dfe5ce1d6584826bfe5cc98776bf2d5d85a2e0\nparent 9b1df4ba0bec3ff5f6195eb63221a751197f2a57\nparent 84f53154e1a0309ef582443476451748eb982805\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1550171967 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1550172677 -1000\n\nMerge #15063: GUI: If BIP70 is disabled, attempt to fall back to BIP21 parsing\n\n84f53154e Travis: Add test without BIP70 (but still full wallet + tests) (Luke Dashjr)\n113f0004b GUI: If BIP70 is disabled, give a proper error when trying to open a payment request file (Luke Dashjr)\n9975282fa GUI: If BIP70 is disabled, attempt to fall back to BIP21 parsing (Luke Dashjr)\n\nPull request description:\n\nTree-SHA512: 66a684ce4336d0eac8b0107b405ff3a2cf312258a967f3e1b14734cd39db11e2db3e9b03492755583170d94d54754ef536b0776e5f19a0cc2caca8379eeb4495\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/758c6d784da0f191c408fda97b3071dd7e1fe8a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/758c6d784da0f191c408fda97b3071dd7e1fe8a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/758c6d784da0f191c408fda97b3071dd7e1fe8a0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1df4ba0bec3ff5f6195eb63221a751197f2a57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1df4ba0bec3ff5f6195eb63221a751197f2a57"
      },
      {
        "sha": "84f53154e1a0309ef582443476451748eb982805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84f53154e1a0309ef582443476451748eb982805",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84f53154e1a0309ef582443476451748eb982805"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 26,
      "deletions": 9
    },
    "files": [
      {
        "sha": "41532b9260e8f153bce42f2cba7ece2641e4ba96",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/758c6d784da0f191c408fda97b3071dd7e1fe8a0/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/758c6d784da0f191c408fda97b3071dd7e1fe8a0/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=758c6d784da0f191c408fda97b3071dd7e1fe8a0",
        "patch": "@@ -132,6 +132,15 @@ jobs:\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n \n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [no BIP70]'\n+      env: >-\n+        HOST=x86_64-unknown-linux-gnu\n+        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+        NO_DEPENDS=1\n+        GOAL=\"install\"\n+        BITCOIN_CONFIG=\"--enable-zmq --disable-bip70 --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n+\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n       env: >-"
      },
      {
        "sha": "43dccec4ea4bb0b7bd773438128011a811395ed0",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 9,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/758c6d784da0f191c408fda97b3071dd7e1fe8a0/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/758c6d784da0f191c408fda97b3071dd7e1fe8a0/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=758c6d784da0f191c408fda97b3071dd7e1fe8a0",
        "patch": "@@ -292,9 +292,9 @@ void PaymentServer::handleURIOrFile(const QString& s)\n     else if (s.startsWith(BITCOIN_IPC_PREFIX, Qt::CaseInsensitive)) // bitcoin: URI\n     {\n         QUrlQuery uri((QUrl(s)));\n+#ifdef ENABLE_BIP70\n         if (uri.hasQueryItem(\"r\")) // payment request URI\n         {\n-#ifdef ENABLE_BIP70\n             Q_EMIT message(tr(\"URI handling\"),\n                 tr(\"You are using a BIP70 URL which will be unsupported in the future.\"),\n                 CClientUIInterface::ICON_WARNING);\n@@ -315,19 +315,23 @@ void PaymentServer::handleURIOrFile(const QString& s)\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n             }\n-#else\n-            Q_EMIT message(tr(\"URI handling\"),\n-                tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n-                CClientUIInterface::ICON_WARNING);\n-#endif\n             return;\n         }\n-        else // normal URI\n+        else\n+#endif\n+        // normal URI\n         {\n             SendCoinsRecipient recipient;\n             if (GUIUtil::parseBitcoinURI(s, &recipient))\n             {\n                 if (!IsValidDestinationString(recipient.address.toStdString())) {\n+#ifndef ENABLE_BIP70\n+                    if (uri.hasQueryItem(\"r\")) {  // payment request\n+                        Q_EMIT message(tr(\"URI handling\"),\n+                            tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n+                            CClientUIInterface::ICON_WARNING);\n+                    }\n+#endif\n                     Q_EMIT message(tr(\"URI handling\"), tr(\"Invalid payment address %1\").arg(recipient.address),\n                         CClientUIInterface::MSG_ERROR);\n                 }\n@@ -343,9 +347,9 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         }\n     }\n \n-#ifdef ENABLE_BIP70\n     if (QFile::exists(s)) // payment request file\n     {\n+#ifdef ENABLE_BIP70\n         PaymentRequestPlus request;\n         SendCoinsRecipient recipient;\n         if (!readPaymentRequestFromFile(s, request))\n@@ -358,8 +362,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             Q_EMIT receivedPaymentRequest(recipient);\n \n         return;\n-    }\n+#else\n+        Q_EMIT message(tr(\"Payment request file handling\"),\n+            tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n+            CClientUIInterface::ICON_WARNING);\n #endif\n+    }\n }\n \n void PaymentServer::handleURIConnection()"
      }
    ]
  },
  {
    "sha": "fab6b07c16768543bcb6a2ce3a76bd31762a1fab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI2YjA3YzE2NzY4NTQzYmNiNmEyY2UzYTc2YmQzMTc2MmExZmFi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T19:47:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T19:40:49Z"
      },
      "message": "test: txindex: interrupt threadGroup before calling destructor",
      "tree": {
        "sha": "d4735e9262b0e4d024602d1a6f72c5ddf9ba4958",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4735e9262b0e4d024602d1a6f72c5ddf9ba4958"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab6b07c16768543bcb6a2ce3a76bd31762a1fab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZcRBAAoJEM4rdWl+aaVIS9sL/1TfIaDnx3Sl403e8JC6zifv\nkQpWFi9GyrctpDR46xbIuM+Elsq44y75fPwf1TBOyIFHJQD0zAV+q01p5gmd+zwH\nbMvre8yuUlGZh6UtGVAKxq0pL7DzCEEmMQHivf+ycn6SaXCalzO9vmdEvx7GtIxm\njGzXs9chyN9bzezAX6CuDm85nPWWevHieUQnKrRral2of1p0vnvCnFqrCHls2ZCQ\nc7UA/iSY/SOMMWc7e0rhpOcWVmAYp0Mfu45MqaNWOY8Cjo5YBVY6p8c+Qo7rI60W\nxFRoN20hPBigE9iEgzTvfTKPqM4sPkS8Ev6oFEaFWtc/Bczs1ITbPz1BL2zwC9LB\nZNDIxP5wx7UynL1jnQ/QMouNm+yS8XuQFEotEFZ1vW0UKYpxh+Ay6GXWZolyNgE7\np3ZEjypL0qRyXT3mTSyG8ssp7tk44U1w5EWDRfPpIT1PYTaHaFQnYhmuhoZq6zO7\nVybv24iZYEb5GnJ+qFMmJWBsFe6lJfz4lwVAvO9FDA==\n=OYud\n-----END PGP SIGNATURE-----",
        "payload": "tree d4735e9262b0e4d024602d1a6f72c5ddf9ba4958\nparent 38989ab03fb74ad56c1018c37cb24d17cbb3a16f\nauthor MarcoFalke <falke.marco@gmail.com> 1550173675 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550173249 -0500\n\ntest: txindex: interrupt threadGroup before calling destructor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab6b07c16768543bcb6a2ce3a76bd31762a1fab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab6b07c16768543bcb6a2ce3a76bd31762a1fab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab6b07c16768543bcb6a2ce3a76bd31762a1fab/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38989ab03fb74ad56c1018c37cb24d17cbb3a16f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38989ab03fb74ad56c1018c37cb24d17cbb3a16f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d667c26c3c536b4dffcb6f93452cf4916db72abc",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab6b07c16768543bcb6a2ce3a76bd31762a1fab/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab6b07c16768543bcb6a2ce3a76bd31762a1fab/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=fab6b07c16768543bcb6a2ce3a76bd31762a1fab",
        "patch": "@@ -69,7 +69,13 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n         }\n     }\n \n-    txindex.Stop(); // Stop thread before calling destructor\n+    // shutdown sequence (c.f. Shutdown() in init.cpp)\n+    txindex.Stop();\n+\n+    threadGroup.interrupt_all();\n+    threadGroup.join_all();\n+\n+    // Rest of shutdown sequence and destructors happen in ~TestingSetup()\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWVlZTU4YmM5YTUyYWQzYmJhMzQ4ZTlkZDBhMmIxOWY0ZGRhZjY2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T19:59:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T19:58:57Z"
      },
      "message": "travis: Combine --disable-bip70 into existing job",
      "tree": {
        "sha": "81a51b7ffe467ead3673a6f5352f8c90f23e600b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a51b7ffe467ead3673a6f5352f8c90f23e600b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZciBAAoJEM4rdWl+aaVIhIUL/RoU8jZmScGLRAjB4a7iOqro\no6b4k42LeRYn657UGva7i/xS8tK+CkS/ChJtfxVlGwBtEA41mlgd/Z5SPSOkKth/\n7vmiI6J/oNOKky4JtSBcbiM9oCkhVOD+/L345FSJlRBrqyokC33aLRZ7f5UvzWyj\n0GzKntLCHoN0KB4BLgKb+UP1pmVQRgwSO/h7bpu6U2cGiWYQ18AyI5YDgQJxpdEn\nFv7CM/Z1dLbOoGIT+x/sr+/54HaQwvrYA4F9FgQw8H8tVlo97H1WGhN8wXhzz3T0\nUNoa0bGNFSLxKiZVyfMhnABleK2fp8izAzNLQ9mhJ7qr1PGYeKrxlKKi6Kvz/iPg\ntRR8YeTI8t1egYHoypZb5RmAk02mboF9E45eYanxs/J1cZl94Ud7CvL2pBn2luEd\njbixx1fXqIxPhPYNVdtuZeoNaqIGYafV/qOej1zEPk0tnuLF9eyG8k19bRWVDQ8I\n/3xAxF/28uJae0S5DKUBE/+jvEW0E9/2VwQD5ct/Jg==\n=RlDS\n-----END PGP SIGNATURE-----",
        "payload": "tree 81a51b7ffe467ead3673a6f5352f8c90f23e600b\nparent 758c6d784da0f191c408fda97b3071dd7e1fe8a0\nauthor MarcoFalke <falke.marco@gmail.com> 1550174358 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550174337 -0500\n\ntravis: Combine --disable-bip70 into existing job\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "758c6d784da0f191c408fda97b3071dd7e1fe8a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/758c6d784da0f191c408fda97b3071dd7e1fe8a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/758c6d784da0f191c408fda97b3071dd7e1fe8a0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 2,
      "deletions": 11
    },
    "files": [
      {
        "sha": "54c386dbb0d69c2ddf6cbb48b3f07907fdc7c2b8",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66",
        "patch": "@@ -85,12 +85,12 @@ jobs:\n         BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n \n     - stage: test\n-      name: '32-bit + dash  [GOAL: install]'\n+      name: '32-bit + dash  [GOAL: install]  [GUI: no BIP70]'\n       env: >-\n         HOST=i686-pc-linux-gnu\n         PACKAGES=\"g++-multilib python3-zmq\"\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n+        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --disable-bip70 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n         CONFIG_SHELL=\"/bin/dash\"\n \n     - stage: test\n@@ -132,15 +132,6 @@ jobs:\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n \n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [no BIP70]'\n-      env: >-\n-        HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n-        NO_DEPENDS=1\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --disable-bip70 --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n-\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n       env: >-"
      }
    ]
  },
  {
    "sha": "3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjMzY2JjMmI2MGQxYWE1NWQ3MjEyOGIzNjU1OGM1ZWVkZjA3ZmM0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-14T20:17:40Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-14T20:17:53Z"
      },
      "message": "Merge #15393: build: Bump minimum Qt version to 5.5.1\n\nfd46c4c00 Bump minimum Qt version to 5.5.1 (Sjors Provoost)\n\nPull request description:\n\n  Fixes #13478\n\n  Compiled and lightly tested on 10.14.3 against QT 5.12.0.\n\nTree-SHA512: 6890331969bbf4c66dc0993b8817b1f0831d008f5863554e9c09a38f4700260b84044ff961664c377decc9fb8300e3543c267f935ec64fbc97b20f8fb396247a",
      "tree": {
        "sha": "6f6e0295a6b4e731d7c7100ead1c65e76bd74f87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f6e0295a6b4e731d7c7100ead1c65e76bd74f87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlxlzPIACgkQHrd2uwPH\nki3sUBAAi/OjhCqgaRGzQM1EhDfXwAyT98yJiwUR5OYnMOZ7noKRtYN5HbEzzmrE\njfU5mjw77c4sQT785IsIteKlmnduNoBrZGd902mk9h1tHrPGHtPLql399qU+WQ7u\ngX+dZTIVSxrnTaSPgcr8V+xInM/Z6InqxAv2J2KDLOqMFBSA9HFN6rok/7Y1BGwu\nefi/SFgPmjozm9Zi1hEFB5veQQGwRtE19yrIg64sDy0Fj9uaNaM80kp4BChnSx99\nQ72DeBFDvL66xCp089gCOM4iq3oK1QB/VWlcrADJ6kUG1Q4wUI3zNrgoGxUIaHZ7\nSxBaMQ3Jq3R8IWyVv+5PuX7p99hE91XcwzXiwNrcDN7v6YeZQMsiDanwZp8emd1I\nSDXrDc0De+NJLFEqFKL145CSBknkiN9BqzaaS16bkFyX448j/yNbBTXpIiC/z/3H\nmeUyJ8QcsghON5QoXX0ly48oOaEBJlmLSIQuzyeHyQhwLTMon3L52XV3p2L1ejvg\nZXT5ipeRJl4zcEGL2ucgSz/xUpZur2dK6Pf8x8/dCz9jgM9Qd7blcj5tjvVgGcil\n8UZnTOIZEqDeJZ+qOtfdCQfoV9gEvR32tOorcyGAzTcG7jxlkPiXNAYWRLnkfo0D\n5IYrc/LUa4cdvK6UgKScb8bsMcrRwckIuFZLrtu/j4h4L+eKqw8=\n=jO5m\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQD/8BBqE3wAWKcgMEwMJ4pdkffqCPAQZtWsdTH3xsSMCbb49zsfVwjxBFxlzPPw\nCJ3h9vStXGimAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVy\nbml0eXdhbGwuY29t//AQpo1hFU29VIPeM8jGocyBOQjxBFxlzPLwCNOJXg3+Y9Rm\nAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmfwEO32lrRi9lILNLE0XzNzENYI8QRcZczz8AgLC6o/hPPWMQCD3+MN\nLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9y\nZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6f6e0295a6b4e731d7c7100ead1c65e76bd74f87\nparent 758c6d784da0f191c408fda97b3071dd7e1fe8a0\nparent fd46c4c0018c41d36cd892ccb47485b572d65837\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1550175460 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1550175473 -1000\n\nMerge #15393: build: Bump minimum Qt version to 5.5.1\n\nfd46c4c00 Bump minimum Qt version to 5.5.1 (Sjors Provoost)\n\nPull request description:\n\n  Fixes #13478\n\n  Compiled and lightly tested on 10.14.3 against QT 5.12.0.\n\nTree-SHA512: 6890331969bbf4c66dc0993b8817b1f0831d008f5863554e9c09a38f4700260b84044ff961664c377decc9fb8300e3543c267f935ec64fbc97b20f8fb396247a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "758c6d784da0f191c408fda97b3071dd7e1fe8a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/758c6d784da0f191c408fda97b3071dd7e1fe8a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/758c6d784da0f191c408fda97b3071dd7e1fe8a0"
      },
      {
        "sha": "fd46c4c0018c41d36cd892ccb47485b572d65837",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd46c4c0018c41d36cd892ccb47485b572d65837",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd46c4c0018c41d36cd892ccb47485b572d65837"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 8,
      "deletions": 32
    },
    "files": [
      {
        "sha": "1a7c5d5f7d39d1c82b9cf7d345e302fa453d54fd",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 24,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
        "patch": "@@ -116,24 +116,6 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   if test \"x$bitcoin_cv_static_qt\" = xyes; then\n     _BITCOIN_QT_FIND_STATIC_PLUGINS\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-    AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[\n-      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-          #include <QtCore/qconfig.h>\n-          #ifndef QT_VERSION\n-          #  include <QtCore/qglobal.h>\n-          #endif\n-        ]],\n-        [[\n-          #if QT_VERSION >= 0x050400\n-          choke\n-          #endif\n-        ]])],\n-      [bitcoin_cv_need_acc_widget=yes],\n-      [bitcoin_cv_need_acc_widget=no])\n-    ])\n-    if test \"x$bitcoin_cv_need_acc_widget\" = xyes; then\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n-    fi\n     _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n     AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n     if test \"x$TARGET_OS\" = xwindows; then\n@@ -264,7 +246,7 @@ dnl All macros below are internal and should _not_ be used from the main\n dnl configure.ac.\n dnl ----\n \n-dnl Internal. Check if the included version of Qt is Qt5.\n+dnl Internal. Check included version of Qt against minimum specified in doc/dependencies.md\n dnl Requires: INCLUDES must be populated as necessary.\n dnl Output: bitcoin_cv_qt5=yes|no\n AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n@@ -276,7 +258,7 @@ AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n       #endif\n     ]],\n     [[\n-      #if QT_VERSION < 0x050200 || QT_VERSION_MAJOR < 5\n+      #if QT_VERSION < 0x050501\n       choke\n       #endif\n     ]])],\n@@ -374,9 +356,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n                 fi\n        if test \"x$TARGET_OS\" = xlinux; then\n          PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n-         if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n-           PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n-         fi\n+         PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n        elif test \"x$TARGET_OS\" = xdarwin; then\n          PKG_CHECK_MODULES([QTCLIPBOARD], [Qt5ClipboardSupport], [QT_LIBS=\"-lQt5ClipboardSupport $QT_LIBS\"])\n          PKG_CHECK_MODULES([QTGRAPHICS], [Qt5GraphicsSupport], [QT_LIBS=\"-lQt5GraphicsSupport $QT_LIBS\"])\n@@ -527,4 +507,3 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   CXXFLAGS=\"$TEMP_CXXFLAGS\"\n   LIBS=\"$TEMP_LIBS\"\n ])\n-"
      },
      {
        "sha": "235eeb28b6b1409aae09c9ba6d64dad3c7d9e022",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
        "patch": "@@ -23,7 +23,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | protobuf | [2.6.1](https://github.com/google/protobuf/releases) |  | No |  |  |\n | Python (tests) |  | [3.4](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n-| Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.2](https://github.com/bitcoin/bitcoin/pull/14725) | No |  |  |\n+| Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L87) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L86) (Linux only) |\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |"
      },
      {
        "sha": "f478dc798d1592599e71899d2240e9be67b91a61",
        "filename": "doc/release-notes-15393.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/doc/release-notes-15393.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/doc/release-notes-15393.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15393.md?ref=3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
        "patch": "@@ -0,0 +1,4 @@\n+Dependencies\n+------------\n+\n+- The minimum required version of QT has been increased from 5.2 to 5.5.1 (the [depends system](https://github.com/bitcoin/bitcoin/blob/master/depends/README.md) provides 5.9.7)"
      },
      {
        "sha": "1b063771ef75b095855f78a4649027612b1cad75",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
        "patch": "@@ -55,9 +55,6 @@\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n-#if QT_VERSION < 0x050400\n-Q_IMPORT_PLUGIN(AccessibleFactory)\n-#endif\n #if defined(QT_QPA_PLATFORM_XCB)\n Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);\n #elif defined(QT_QPA_PLATFORM_WINDOWS)"
      },
      {
        "sha": "da25d831756271ecae26458c485f2662058f6c36",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
        "patch": "@@ -27,9 +27,7 @@\n #include <QTest>\n #include <QTextEdit>\n #include <QtGlobal>\n-#if QT_VERSION >= 0x050000\n #include <QtTest/QtTestWidgets>\n-#endif\n #include <QtTest/QtTestGui>\n #include <new>\n #include <string>"
      },
      {
        "sha": "f8a9c25303ee49d8bff26332fa74671287142edc",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
        "patch": "@@ -120,7 +120,6 @@ void RPCNestedTests::rpcNestedTests()\n     RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(   abc   ,   cba )\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"cba\\\"]\");\n \n-#if QT_VERSION >= 0x050300\n     // do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n@@ -131,5 +130,4 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-#endif\n }"
      }
    ]
  },
  {
    "sha": "b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzQ1NmU2YmY5ZDFiZWJjMGUzYjhkMzM4NmRhNWYyYjNhMzAzYTA0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-14T20:46:22Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-14T20:46:48Z"
      },
      "message": "Merge #15195: gui: Add Close Wallet action\n\n94086fb59 gui: Add close wallet action (Jo\u00e3o Barbosa)\nf77ba3431 gui: Add closeWallet to WalletController (Jo\u00e3o Barbosa)\nf6122abe0 interfaces: Add remove to Wallet (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This PR adds support to close the current wallet in the GUI.\n\n  <img width=\"543\" alt=\"screenshot 2019-01-18 at 00 44 26\" src=\"https://user-images.githubusercontent.com/3534524/51358241-424b9680-1aba-11e9-88f2-b85869507737.png\">\n  <img width=\"532\" alt=\"screenshot 2019-01-18 at 00 44 38\" src=\"https://user-images.githubusercontent.com/3534524/51358242-424b9680-1aba-11e9-83e2-fa275a9017b3.png\">\n\nTree-SHA512: fd7da4d0f73dc240864cc57a1ff1526daf2376904ce3872e52eeca5d40cc21c6dd29eb2ef25f85ffa63697362c150221a2369d80ad36ae445cc99989d337b688",
      "tree": {
        "sha": "671c15a7cd14a5485dca91b6aac82780a284e65b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/671c15a7cd14a5485dca91b6aac82780a284e65b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlxl07gACgkQHrd2uwPH\nki3M9A//dRt3tLuDArWQB/qvQCHseEf6DNNNJA0qDX9EvgWT065hOr0OolPs3gFl\n747Z2ObhJXoIhDQreRQV2r3kjYHea8wpEclYuB9B/AOLoZublOMUB3fjdiP6NbGV\nlvyi+Lr4kWPgW/KMq//KdD2SqSiz41dccOFWr5FPVicpxsFtxZM0VsLoRAXjnBpW\n3s2D2thbqIcIbsQNdLoyp+Sd9J85sJ3WQ+NOC/qo1z1tl3DV56wDho5MhZf/HCSS\nzhpmtkZIRBs7IyM/zpy/ZZMTSsxA0cT8So28v9fpr8zXc9jsCNZQvZJ7PCcL+6p8\n0qGd0jW/hJUfWWgySJ9LSHIUo/o6s+TQd4hrieSKmIWOGz2HpS6ffT6DLlBpoSqE\nvrfRd8QLOG3i1kHvp8WIC19dNASiZfQLzFtgVYqY1fAcKBy3x2BSNFCwCWBoMHCU\nioJSZrb5fStCzeRm16K84eCw2/JsVdZ0EtIu+Y7VZURAo/mMaJ0yIo3k3IraVUEQ\nPevmiAeSfYA3QJRZqxlbwXrFFsu/OD3qYPGad3psjehb2IXkCxs/QSnRS/hULffx\nktvD+IkosAhmjgNW72i7B5J37RbIjYWHfBk7WPXr6XzyR6YBL9dgTLuFc/v14Xnr\nWM9UV4AXoZ9Ju4hizlpfJUv6fRyT7TxPHoCug1/YC8c0LtctEzY=\n=UIsf\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQD/8BBlaweMDcHxfuXiuNt031CMCPAQ67dIMhcbSApONwO6sAHICwjxBFxl07nw\nCG8qiIZ7JuCIAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVy\nbml0eXdhbGwuY29t//AQhHEn4OdQaGUQDNN2rjXUUwjxBFxl07rwCK8Qb2D62ThM\nAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmfwEJZtpoivVRWToyVrBHhTIkUI8QRcZdO58AjqMrv10dqr0wCD3+MN\nLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9y\nZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 671c15a7cd14a5485dca91b6aac82780a284e65b\nparent 3b33cbc2b60d1aa55d72128b36558c5eedf07fc4\nparent 94086fb59d1a05eb9a2960c2aae242e49c0a9103\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1550177182 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1550177208 -1000\n\nMerge #15195: gui: Add Close Wallet action\n\n94086fb59 gui: Add close wallet action (Jo\u00e3o Barbosa)\nf77ba3431 gui: Add closeWallet to WalletController (Jo\u00e3o Barbosa)\nf6122abe0 interfaces: Add remove to Wallet (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This PR adds support to close the current wallet in the GUI.\n\n  <img width=\"543\" alt=\"screenshot 2019-01-18 at 00 44 26\" src=\"https://user-images.githubusercontent.com/3534524/51358241-424b9680-1aba-11e9-88f2-b85869507737.png\">\n  <img width=\"532\" alt=\"screenshot 2019-01-18 at 00 44 38\" src=\"https://user-images.githubusercontent.com/3534524/51358242-424b9680-1aba-11e9-83e2-fa275a9017b3.png\">\n\nTree-SHA512: fd7da4d0f73dc240864cc57a1ff1526daf2376904ce3872e52eeca5d40cc21c6dd29eb2ef25f85ffa63697362c150221a2369d80ad36ae445cc99989d337b688\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b33cbc2b60d1aa55d72128b36558c5eedf07fc4"
      },
      {
        "sha": "94086fb59d1a05eb9a2960c2aae242e49c0a9103",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94086fb59d1a05eb9a2960c2aae242e49c0a9103",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94086fb59d1a05eb9a2960c2aae242e49c0a9103"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b5430037cc52beaaf1beb2c563854f7b10e60f9",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
        "patch": "@@ -468,6 +468,10 @@ class WalletImpl : public Wallet\n     bool IsWalletFlagSet(uint64_t flag) override { return m_wallet.IsWalletFlagSet(flag); }\n     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }\n+    void remove() override\n+    {\n+        RemoveWallet(m_shared_wallet);\n+    }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n     {\n         return MakeHandler(m_wallet.NotifyUnload.connect(fn));"
      },
      {
        "sha": "a931e5fafb7023a28c30984e2b52a3665811a647",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
        "patch": "@@ -247,6 +247,9 @@ class Wallet\n     // Get default change type.\n     virtual OutputType getDefaultChangeType() = 0;\n \n+    // Remove wallet.\n+    virtual void remove() = 0;\n+\n     //! Register handler for unload message.\n     using UnloadFn = std::function<void()>;\n     virtual std::unique_ptr<Handler> handleUnload(UnloadFn fn) = 0;"
      },
      {
        "sha": "bc88dd5e0a1743373fb26eb87b9a344c80d30442",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
        "patch": "@@ -338,6 +338,9 @@ void BitcoinGUI::createActions()\n     m_open_wallet_action->setMenu(new QMenu(this));\n     m_open_wallet_action->setStatusTip(tr(\"Open a wallet\"));\n \n+    m_close_wallet_action = new QAction(tr(\"Close Wallet...\"), this);\n+    m_close_wallet_action->setStatusTip(tr(\"Close wallet\"));\n+\n     showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(tr(PACKAGE_NAME)));\n@@ -396,6 +399,9 @@ void BitcoinGUI::createActions()\n                 });\n             }\n         });\n+        connect(m_close_wallet_action, &QAction::triggered, [this] {\n+            m_wallet_controller->closeWallet(walletFrame->currentWalletModel(), this);\n+        });\n     }\n #endif // ENABLE_WALLET\n \n@@ -418,6 +424,7 @@ void BitcoinGUI::createMenuBar()\n     if(walletFrame)\n     {\n         file->addAction(m_open_wallet_action);\n+        file->addAction(m_close_wallet_action);\n         file->addSeparator();\n         file->addAction(openAction);\n         file->addAction(backupWalletAction);\n@@ -693,6 +700,7 @@ void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n     usedSendingAddressesAction->setEnabled(enabled);\n     usedReceivingAddressesAction->setEnabled(enabled);\n     openAction->setEnabled(enabled);\n+    m_close_wallet_action->setEnabled(enabled);\n }\n \n void BitcoinGUI::createTrayIcon()"
      },
      {
        "sha": "b58ccbb4552f0cf52412ebbcdc5189b7e4fd1538",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
        "patch": "@@ -148,6 +148,7 @@ class BitcoinGUI : public QMainWindow\n     QAction* openAction = nullptr;\n     QAction* showHelpMessageAction = nullptr;\n     QAction* m_open_wallet_action{nullptr};\n+    QAction* m_close_wallet_action{nullptr};\n     QAction* m_wallet_selector_label_action = nullptr;\n     QAction* m_wallet_selector_action = nullptr;\n "
      },
      {
        "sha": "c532ffbbfe51a8193d01cd45d85109e6b5f7a60f",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
        "patch": "@@ -63,6 +63,22 @@ OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidge\n     return activity;\n }\n \n+void WalletController::closeWallet(WalletModel* wallet_model, QWidget* parent)\n+{\n+    QMessageBox box(parent);\n+    box.setWindowTitle(tr(\"Close wallet\"));\n+    box.setText(tr(\"Are you sure you wish to close wallet <i>%1</i>?\").arg(wallet_model->getDisplayName()));\n+    box.setInformativeText(tr(\"Closing the wallet for too long can result in having to resync the entire chain if pruning is enabled.\"));\n+    box.setStandardButtons(QMessageBox::Yes|QMessageBox::Cancel);\n+    box.setDefaultButton(QMessageBox::Yes);\n+    if (box.exec() != QMessageBox::Yes) return;\n+\n+    // First remove wallet from node.\n+    wallet_model->wallet().remove();\n+    // Now release the model.\n+    removeAndDeleteWallet(wallet_model);\n+}\n+\n WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wallet> wallet)\n {\n     QMutexLocker locker(&m_mutex);"
      },
      {
        "sha": "19b3a82253154352dbc08ece7cd84a89ec75c965",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
        "patch": "@@ -44,6 +44,7 @@ class WalletController : public QObject\n     std::vector<std::string> getWalletsAvailableToOpen() const;\n \n     OpenWalletActivity* openWallet(const std::string& name, QWidget* parent = nullptr);\n+    void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n private Q_SLOTS:\n     void addWallet(WalletModel* wallet_model);"
      }
    ]
  },
  {
    "sha": "fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUzNWFmOTJjMTc5YjBmZmI5MjgwZTBiMmRjNWFjZmViODA5NjRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T20:49:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T20:47:08Z"
      },
      "message": "fuzz: test_runner: Better error message when built with afl",
      "tree": {
        "sha": "ca1a8bebe53395e6774e92d36a78c171c3897216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca1a8bebe53395e6774e92d36a78c171c3897216"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcZdPMAAoJEM4rdWl+aaVICyQL/2js+BIiKn8QkjCaRMmoDzJl\nVJEQrVk7zCSCKsqFcegyJMQdI0kmmFOe+Vv75a/PY/oGcc+z1A54jVxOzXQxbprN\nPSuMp9LV8m3DU9QGrR4WIv38VeY0h5GYFrdeuuE6xmYkp2Sl5W4bQS14bCJaLk2Z\ncRhjzRWOGOrBgsU2g6dnMRgRZjZeuNc19wCriVCmEFttUNejqr/osssnjUuYow2s\n6QEvv17yIFtkbTdibowSNuEj3VHnqhl1zzEEReaoM8NQ6cidhrFWdx8bzPpU2RXP\n/jTr8vjuUiA0vX8KXMTRYi/9yk1chsyIkHd4zarm+MSdf9tSnWkBfJkFgmXr/9MO\nh2eAjE2Sy234Ik6+hgUcMoZsFEEd7nXWbOqL7QQ9i33CIvZel7mTRj9BodS3NJgd\nt+kETDi8FdSVsxL6M86N227Cq/SLpgaGAHIGs/IoGqYuJ6SVDPQM+sypZISs8Qzw\nQgO0DlbnP9zm3+E7u5vQfkadXW81/SsZxUcZfr+cRw==\n=K53B\n-----END PGP SIGNATURE-----",
        "payload": "tree ca1a8bebe53395e6774e92d36a78c171c3897216\nparent fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b\nauthor MarcoFalke <falke.marco@gmail.com> 1550177353 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550177228 -0500\n\nfuzz: test_runner: Better error message when built with afl\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa535af92c179b0ffb9280e0b2dc5acfeb80964a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7ca8ef58bf3e3b91d1f5a67fa42008e63b1f7b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 16,
      "deletions": 11
    },
    "files": [
      {
        "sha": "1869f717539a09dca0a6d5803e4f8fbdaa01cadc",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa535af92c179b0ffb9280e0b2dc5acfeb80964a/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa535af92c179b0ffb9280e0b2dc5acfeb80964a/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
        "patch": "@@ -72,17 +72,22 @@ def main():\n         logging.error(\"No fuzz targets selected\")\n     logging.info(\"Fuzz targets selected: {}\".format(test_list_selection))\n \n-    help_output = subprocess.run(\n-        args=[\n-            os.path.join(config[\"environment\"][\"BUILDDIR\"], 'src', 'test', 'fuzz', test_list_selection[0]),\n-            '-help=1',\n-        ],\n-        check=True,\n-        stderr=subprocess.PIPE,\n-        universal_newlines=True,\n-    ).stderr\n-    if \"libFuzzer\" not in help_output:\n-        logging.error(\"Must be built with libFuzzer\")\n+    try:\n+        help_output = subprocess.run(\n+            args=[\n+                os.path.join(config[\"environment\"][\"BUILDDIR\"], 'src', 'test', 'fuzz', test_list_selection[0]),\n+                '-help=1',\n+            ],\n+            timeout=1,\n+            check=True,\n+            stderr=subprocess.PIPE,\n+            universal_newlines=True,\n+        ).stderr\n+        if \"libFuzzer\" not in help_output:\n+            logging.error(\"Must be built with libFuzzer\")\n+            sys.exit(1)\n+    except subprocess.TimeoutExpired:\n+        logging.error(\"subprocess timed out: Currently only libFuzzer is supported\")\n         sys.exit(1)\n \n     run_once("
      }
    ]
  },
  {
    "sha": "3782075a5fd4ad0c15a6119e8cdaf136898f679e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzgyMDc1YTVmZDRhZDBjMTVhNjExOWU4Y2RhZjEzNjg5OGY2Nzll",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-02-14T20:53:03Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-02-14T20:53:03Z"
      },
      "message": "Move all PID file stuff to init.cpp\n\nIt is only used from init.cpp.\nMove-only refactoring.",
      "tree": {
        "sha": "ab02fc2d18d1cf0348be3e70f876f0e73323120d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab02fc2d18d1cf0348be3e70f876f0e73323120d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3782075a5fd4ad0c15a6119e8cdaf136898f679e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAlxl1jgACgkQQQEIES5+\nqB9c/w//V0B1spNgxPIB1MnOkG4NppGn162PDTqR80zTqOIMjjzHfJXHMtx/TIz0\ni5NJ28BmErhy/jHMuksXHFvadtmmKsT1QmZ5tIu6AyowkFL518Pd2TiiZsAQIrXY\nYGwbz5Std+BYsICTp6Vi9R7hjeID9zkNDf9nAGsHpDoin58Ej6mfvOJV0/TElf0A\ngSow3Ll0nY6j+Q4v99UhyieSZYpEd0t5UBcGiqyplDO20W7pHpU4hNUWB6D82SOk\nAvujyNGSdNakZDwgUC9/OkEZQX1z837wP3xnbucFjXyFnKPbcIczTHJit+THpk9Q\nav8UxutsMBxXyBlgESOI5OC4BgXECj0nVkQ9nh6ZOmtGC44NuiVSX4QRla5NsJiw\nQx/GHQSty99A0be+Eip0vKb0rvSAXJ55AYWFu7iC8yjAXOJFLRF4aKaxR4361rT4\npN6/+QpXPMOxXrGvCx0rI5b05DRtjn1E34ocuM4Rj1iK0x11hZ6YLbajUKf5u9++\nVR2HA5Vgu74dLX5eI965j0mYdYPPsbyfIkTOKnjDFotzdoqRxb464Hg/z7bwAfDD\nK61d1VA6hWbw00bXIVjq1yVuRCvxxMyc4UZJfk5CoFDGA4asIYbY2F/auSI6TrDw\njzI9tJ73eIYZTxjuPqY6cmWs8R/m6mmtibIhwpg6Ne1rNTJ1/fc=\n=naiw\n-----END PGP SIGNATURE-----",
        "payload": "tree ab02fc2d18d1cf0348be3e70f876f0e73323120d\nparent 561e375c73a37934fe77a519762d81edf7a3325c\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1550177583 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1550177583 +0200\n\nMove all PID file stuff to init.cpp\n\nIt is only used from init.cpp.\nMove-only refactoring.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3782075a5fd4ad0c15a6119e8cdaf136898f679e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3782075a5fd4ad0c15a6119e8cdaf136898f679e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3782075a5fd4ad0c15a6119e8cdaf136898f679e/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "561e375c73a37934fe77a519762d81edf7a3325c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561e375c73a37934fe77a519762d81edf7a3325c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/561e375c73a37934fe77a519762d81edf7a3325c"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 24,
      "deletions": 26
    },
    "files": [
      {
        "sha": "63dc671fdf8657caa3ce9c6d87363811a092c84c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 14,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3782075a5fd4ad0c15a6119e8cdaf136898f679e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3782075a5fd4ad0c15a6119e8cdaf136898f679e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3782075a5fd4ad0c15a6119e8cdaf136898f679e",
        "patch": "@@ -94,6 +94,30 @@ std::unique_ptr<BanMan> g_banman;\n \n static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n \n+/**\n+ * The PID file facilities.\n+ */\n+#ifndef WIN32\n+static const char* BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n+\n+static fs::path GetPidFile()\n+{\n+    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n+}\n+\n+NODISCARD static bool CreatePidFile()\n+{\n+    FILE* file = fsbridge::fopen(GetPidFile(), \"w\");\n+    if (file) {\n+        fprintf(file, \"%d\\n\", getpid());\n+        fclose(file);\n+        return true;\n+    } else {\n+        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n+    }\n+}\n+#endif\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Shutdown\n@@ -1194,20 +1218,6 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-#ifndef WIN32\n-NODISCARD static bool CreatePidFile()\n-{\n-    FILE* file = fsbridge::fopen(GetPidFile(), \"w\");\n-    if (file) {\n-        fprintf(file, \"%d\\n\", getpid());\n-        fclose(file);\n-        return true;\n-    } else {\n-        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n-    }\n-}\n-#endif\n-\n bool AppInitMain(InitInterfaces& interfaces)\n {\n     const CChainParams& chainparams = Params();"
      },
      {
        "sha": "493417442098017ec20fe5f0b122dc16169c7b06",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3782075a5fd4ad0c15a6119e8cdaf136898f679e/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3782075a5fd4ad0c15a6119e8cdaf136898f679e/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=3782075a5fd4ad0c15a6119e8cdaf136898f679e",
        "patch": "@@ -79,7 +79,6 @@\n const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n-const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n@@ -958,13 +957,6 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n-#ifndef WIN32\n-fs::path GetPidFile()\n-{\n-    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n-}\n-#endif\n-\n bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32"
      },
      {
        "sha": "5dc796c9ba0578ffccd3c190c762674fe4c2ce9a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3782075a5fd4ad0c15a6119e8cdaf136898f679e/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3782075a5fd4ad0c15a6119e8cdaf136898f679e/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=3782075a5fd4ad0c15a6119e8cdaf136898f679e",
        "patch": "@@ -39,7 +39,6 @@\n int64_t GetStartupTime();\n \n extern const char * const BITCOIN_CONF_FILENAME;\n-extern const char * const BITCOIN_PID_FILENAME;\n \n /** Translate a message to the native language of the user. */\n const extern std::function<std::string(const char*)> G_TRANSLATION_FUN;\n@@ -84,9 +83,6 @@ const fs::path &GetBlocksDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n fs::path GetConfigFile(const std::string& confPath);\n-#ifndef WIN32\n-fs::path GetPidFile();\n-#endif\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif"
      }
    ]
  },
  {
    "sha": "cd8ca8be31ab921967fc4d74d8643d0e36f48c31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDhjYThiZTMxYWI5MjE5NjdmYzRkNzRkODY0M2QwZTM2ZjQ4YzMx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T21:07:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T21:11:44Z"
      },
      "message": "Merge #14626: Select orphan transaction uniformly for eviction\n\n7257353b93 Select orphan transaction uniformly for eviction (Pieter Wuille)\n\nPull request description:\n\n  The previous code was biased towards evicting transactions whose txid has a larger gap (lexicographically) with the previous txid in the orphan pool.\n\nTree-SHA512: e35f700aea5ed79d1bc57f64bffcb623424b40156fd0a12f05f74f981a8aa4175d5c18d042989243f7559242bdf1d6d720bcf588d28f43d74a798a4843f09c70",
      "tree": {
        "sha": "14cfa20ea729b02bfe3dc8f1ec2c6342f45f7d3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14cfa20ea729b02bfe3dc8f1ec2c6342f45f7d3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd8ca8be31ab921967fc4d74d8643d0e36f48c31",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZdmQAAoJENLqSFDnUoslGiUP/1exUHBBkyKz/eeOC9SRdvnt\nnmCkNPiWKzqJUjTk2AtVl9XIAMWOWD165dKLWEgrES5gt5TOz37J9Rh+AU5MJBuG\nKK/sueyKNxiZ+IGoK8Kalf986i5Cc6+P2zc0UHrojq0/VyJxjNZbExKqXcr1J1SC\nH8Ao6Y6sQFFbF/yf+xoIN2nSPWtMDcSzbUL/G/Ald8SkSL0ENx+VCvFlg5FXUxDv\nF0kgrRa1y+XYK3kXU9a5qLEPexeljSeYYnz0h5Rkba2Uiclwf7EnQZEmgYBMc5ut\nIy4S1S6AcN+TJlPuPP1KBK6xkny4Lb6HJGcBfvUybMhWx4TZvzAtIzRWors0zJGN\nLE3TKKf8Lg89HYABtgqydVHYf0+dN6UB2QwPwLHAvh1GdizijTXbiOQLAFi1ftSp\n8m0NJBl8h18XsAzLlOyBFFvxc4RU2urOnVM9uW7bIgwFG7hKW/c2sUDvLdV/gGfw\nW5Lkmj1CCryStjvutFmgaDewLVnw/i/ruBNQEG7fa2hwPveucPKWasi8/WeekrVI\nV7zd7OscFNygeOWXxy/So4jO0nYGZYGOOF2f0UXZXMtMKbCo4ihnCwLikYkO0tTR\nET9A/1CAVqg4Pbpp7DqfOg0fEepCwJUfhmNefUj5R4HXjLeQn04EvVcJtANh1HN2\nFF8Np1VEaXnNu6n7h6X8\n=Nl9o\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMw0BLw9Zz7hwnHhZRkUlsLKPrbd9JsW2GRlTnmPj9QvCP/wEBmuT7H56vrB\nOuWMtXmhgjMI8BD3gh4jjsoT8jsY9/ST74mcCPEEXGXZkvAIYfuKujQzIWUAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BBBIieNIhLHhYmV54STBRb+CPAgKzoXLnyoSsW/m0Xr0C+baoZfEiQP4KV6hlDU\nGeNuB/wI8QRcZdmS8AjLN7ymVQR4uQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRj\nLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEKougJXkonkMKubYxLuMzvsI\n8QRcZdmS8Agj9viY0hJ6QACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbfAQ41pgNqkkHnF5ThhFQwhwcwjwIFz7HmCSG4xiiTR9uKAA\nvnaTB225/X5eLFS+ZfwFiezRCPEEXGXZkvAIa1P00G9+y44Ag9/jDS75DI4uLWh0\ndHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 14cfa20ea729b02bfe3dc8f1ec2c6342f45f7d3c\nparent b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04\nparent 7257353b93e9f45e67071b0b86a0313e7a70aaaa\nauthor MarcoFalke <falke.marco@gmail.com> 1550178432 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550178704 -0500\n\nMerge #14626: Select orphan transaction uniformly for eviction\n\n7257353b93 Select orphan transaction uniformly for eviction (Pieter Wuille)\n\nPull request description:\n\n  The previous code was biased towards evicting transactions whose txid has a larger gap (lexicographically) with the previous txid in the orphan pool.\n\nTree-SHA512: e35f700aea5ed79d1bc57f64bffcb623424b40156fd0a12f05f74f981a8aa4175d5c18d042989243f7559242bdf1d6d720bcf588d28f43d74a798a4843f09c70\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd8ca8be31ab921967fc4d74d8643d0e36f48c31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd8ca8be31ab921967fc4d74d8643d0e36f48c31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd8ca8be31ab921967fc4d74d8643d0e36f48c31/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7456e6bf9d1bebc0e3b8d3386da5f2b3a303a04"
      },
      {
        "sha": "7257353b93e9f45e67071b0b86a0313e7a70aaaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7257353b93e9f45e67071b0b86a0313e7a70aaaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7257353b93e9f45e67071b0b86a0313e7a70aaaa"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 19,
      "deletions": 6
    },
    "files": [
      {
        "sha": "18dd2f010cd9423ee19e3a689ee4bd958bf7160c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd8ca8be31ab921967fc4d74d8643d0e36f48c31/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd8ca8be31ab921967fc4d74d8643d0e36f48c31/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cd8ca8be31ab921967fc4d74d8643d0e36f48c31",
        "patch": "@@ -85,6 +85,7 @@ struct COrphanTx {\n     CTransactionRef tx;\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n+    size_t list_pos;\n };\n CCriticalSection g_cs_orphans;\n std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n@@ -186,6 +187,8 @@ namespace {\n     };\n     std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(g_cs_orphans);\n \n+    std::vector<std::map<uint256, COrphanTx>::iterator> g_orphan_list GUARDED_BY(g_cs_orphans); //! For random eviction\n+\n     static size_t vExtraTxnForCompactIt GUARDED_BY(g_cs_orphans) = 0;\n     static std::vector<std::pair<uint256, CTransactionRef>> vExtraTxnForCompact GUARDED_BY(g_cs_orphans);\n } // namespace\n@@ -837,8 +840,9 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n         return false;\n     }\n \n-    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME});\n+    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, g_orphan_list.size()});\n     assert(ret.second);\n+    g_orphan_list.push_back(ret.first);\n     for (const CTxIn& txin : tx->vin) {\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n@@ -864,6 +868,18 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n         if (itPrev->second.empty())\n             mapOrphanTransactionsByPrev.erase(itPrev);\n     }\n+\n+    size_t old_pos = it->second.list_pos;\n+    assert(g_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != g_orphan_list.size()) {\n+        // Unless we're deleting the last entry in g_orphan_list, move the last\n+        // entry to the position we're deleting.\n+        auto it_last = g_orphan_list.back();\n+        g_orphan_list[old_pos] = it_last;\n+        it_last->second.list_pos = old_pos;\n+    }\n+    g_orphan_list.pop_back();\n+\n     mapOrphanTransactions.erase(it);\n     return 1;\n }\n@@ -914,11 +930,8 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n     {\n         // Evict a random orphan:\n-        uint256 randomhash = rng.rand256();\n-        std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n-        if (it == mapOrphanTransactions.end())\n-            it = mapOrphanTransactions.begin();\n-        EraseOrphanTx(it->first);\n+        size_t randompos = rng.randrange(g_orphan_list.size());\n+        EraseOrphanTx(g_orphan_list[randompos]->first);\n         ++nEvicted;\n     }\n     return nEvicted;"
      }
    ]
  },
  {
    "sha": "3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmFjZDlmZGM0ZGQzYTQxZWU2NjhhMjU0MGNjZjQ3NzUxY2U2Y2Jj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-14T21:16:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-14T21:17:52Z"
      },
      "message": "Merge #14481: Add P2SH-P2WSH support to listunspent RPC\n\n6ca836ab3abef5a90df0c3c4e4983f328b1afe00 Add release note for listunspent P2WSH change (MeshCollider)\n928beae007fc2f951e79ea307a5e983af4cb3acf Add test for P2SH-P2WSH in signrawtransactionwithkey and listunspent (MeshCollider)\n314784a60f18424b004e935aa6e41b824e9645b3 Make listunspent and signrawtransaction RPCs support witnessScript (MeshCollider)\n\nPull request description:\n\n  This is a reworked version of #11708 after #12427 and the `signrawtransaction` split.\n\n  For a P2WSH address, listunspent should return the witness script, and for a P2SH-P2WSH address, it should also return the inner witness script (because SignTransaction will automatically wrap it in P2SH if required).\n\n  Includes a test which also tests the behaviour of #12427, and release note.\n\nTree-SHA512: a8e72cf16930312bf48ec47e44a68f8d7e26664043c1b4cc0983eb25aec4087e511188ff9a0f181cd7b8a0c068c60d7f1e7e3f226b79e8c48890039dcf57f7b7",
      "tree": {
        "sha": "ed3ca85df3a7750ea08a42b9593d3c3a0fca4dd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed3ca85df3a7750ea08a42b9593d3c3a0fca4dd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxl2wAACgkQHkrtYphs\n0l0VsQgAtbw8QleRwPxTWGdjBH1FcxKO/78x/2VPryfj7HyOE57/qQaEcGxkHc52\nxJgzqTZXY/SeQZEnbH1mrsWDdpIODasZCV9/RtiErpoJg99pP/WY7Y88wFLeQ6Kt\ngQbzYFQCe2Y4QD9E9/kAOfBipx7zSKHquuGw56c7N5MUwXJkDaSCtYYoGmYNCsva\nMpcwUkyTgkQoRQ6FgBVyVzXefUen+fy7WnoRWMJZXcB8Z0qujJ9ezpqcuhTFbxnR\nV+eVLfWKMt9HS0u+hPzUkUJN5MWbzQoONqEtME5jK3jAnkPeom1kK69rTMiCp1gh\nw3A68vRfyHPXAsjRA2Kz259zDPyEEA==\n=pQcj\n-----END PGP SIGNATURE-----",
        "payload": "tree ed3ca85df3a7750ea08a42b9593d3c3a0fca4dd7\nparent cd8ca8be31ab921967fc4d74d8643d0e36f48c31\nparent 6ca836ab3abef5a90df0c3c4e4983f328b1afe00\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550179008 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550179072 +0100\n\nMerge #14481: Add P2SH-P2WSH support to listunspent RPC\n\n6ca836ab3abef5a90df0c3c4e4983f328b1afe00 Add release note for listunspent P2WSH change (MeshCollider)\n928beae007fc2f951e79ea307a5e983af4cb3acf Add test for P2SH-P2WSH in signrawtransactionwithkey and listunspent (MeshCollider)\n314784a60f18424b004e935aa6e41b824e9645b3 Make listunspent and signrawtransaction RPCs support witnessScript (MeshCollider)\n\nPull request description:\n\n  This is a reworked version of #11708 after #12427 and the `signrawtransaction` split.\n\n  For a P2WSH address, listunspent should return the witness script, and for a P2SH-P2WSH address, it should also return the inner witness script (because SignTransaction will automatically wrap it in P2SH if required).\n\n  Includes a test which also tests the behaviour of #12427, and release note.\n\nTree-SHA512: a8e72cf16930312bf48ec47e44a68f8d7e26664043c1b4cc0983eb25aec4087e511188ff9a0f181cd7b8a0c068c60d7f1e7e3f226b79e8c48890039dcf57f7b7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd8ca8be31ab921967fc4d74d8643d0e36f48c31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd8ca8be31ab921967fc4d74d8643d0e36f48c31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd8ca8be31ab921967fc4d74d8643d0e36f48c31"
      },
      {
        "sha": "6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ca836ab3abef5a90df0c3c4e4983f328b1afe00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ca836ab3abef5a90df0c3c4e4983f328b1afe00"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 81,
      "deletions": 10
    },
    "files": [
      {
        "sha": "ea8fc3c34ed2a979d8f1a7feeef6fa6136473132",
        "filename": "doc/release-notes-14481.md",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc/doc/release-notes-14481.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc/doc/release-notes-14481.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14481.md?ref=3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
        "patch": "@@ -0,0 +1,9 @@\n+Low-level RPC changes\n+----------------------\n+\n+The `listunspent` RPC has been modified so that it also returns `witnessScript`,\n+the witness script in the case of a P2WSH or P2SH-P2WSH output.\n+\n+The `signrawtransactionwithkey` and `signrawtransactionwithwallet` RPCs have been\n+modified so that they also optionally accept a `witnessScript`, the witness script in the\n+case of a P2WSH or P2SH-P2WSH output. This is compatible with the change to `listunspent`."
      },
      {
        "sha": "6ec05565e91498cfe99a24f6d898457eb46c8bf4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
        "patch": "@@ -855,15 +855,25 @@ UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, con\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"redeemScript\", UniValueType(UniValue::VSTR)},\n-                    });\n-                UniValue v = find_value(prevOut, \"redeemScript\");\n-                if (!v.isNull()) {\n-                    std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n+                        {\"witnessScript\", UniValueType(UniValue::VSTR)},\n+                    }, true);\n+                UniValue rs = find_value(prevOut, \"redeemScript\");\n+                if (!rs.isNull()) {\n+                    std::vector<unsigned char> rsData(ParseHexV(rs, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n                     keystore->AddCScript(redeemScript);\n                     // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    // This is only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n                     keystore->AddCScript(GetScriptForWitness(redeemScript));\n                 }\n+                UniValue ws = find_value(prevOut, \"witnessScript\");\n+                if (!ws.isNull()) {\n+                    std::vector<unsigned char> wsData(ParseHexV(ws, \"witnessScript\"));\n+                    CScript witnessScript(wsData.begin(), wsData.end());\n+                    keystore->AddCScript(witnessScript);\n+                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    keystore->AddCScript(GetScriptForWitness(witnessScript));\n+                }\n             }\n         }\n     }\n@@ -948,7 +958,8 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                     {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH) redeem script\"},\n+                                    {\"witnessScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2WSH or P2SH-P2WSH) witness script\"},\n                                     {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                                 },"
      },
      {
        "sha": "ee7773998679d03be043c087f6d108775836f444",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
        "patch": "@@ -2770,7 +2770,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n-            \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n+            \"    \\\"redeemScript\\\" : \\\"script\\\" (string) The redeemScript if scriptPubKey is P2SH\"\n+            \"    \\\"witnessScript\\\" : \\\"script\\\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n             \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n             \"    \\\"desc\\\" : xxx,             (string, only when solvable) A descriptor for spending this output\\n\"\n@@ -2884,6 +2885,28 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n                     entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n+                    // Now check if the redeemScript is actually a P2WSH script\n+                    CTxDestination witness_destination;\n+                    if (redeemScript.IsPayToWitnessScriptHash()) {\n+                        bool extracted = ExtractDestination(redeemScript, witness_destination);\n+                        assert(extracted);\n+                        // Also return the witness script\n+                        const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n+                        CScriptID id;\n+                        CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                        CScript witnessScript;\n+                        if (pwallet->GetCScript(id, witnessScript)) {\n+                            entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n+                        }\n+                    }\n+                }\n+            } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+                const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n+                CScriptID id;\n+                CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                CScript witnessScript;\n+                if (pwallet->GetCScript(id, witnessScript)) {\n+                    entry.pushKV(\"witnessScript\", HexStr(witnessScript.begin(), witnessScript.end()));\n                 }\n             }\n         }\n@@ -3139,7 +3162,8 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                                     {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n                                     {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH or P2WSH) redeem script\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH) redeem script\"},\n+                                    {\"witnessScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2WSH or P2SH-P2WSH) witness script\"},\n                                     {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount spent\"},\n                                 },\n                             },"
      },
      {
        "sha": "56e2c73a90fce7e0aad57020f33eb410faca5f71",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
        "patch": "@@ -5,14 +5,17 @@\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, hex_str_to_bytes\n+from test_framework.messages import sha256\n+from test_framework.script import CScript, OP_0\n \n+from decimal import Decimal\n \n class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n-        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -143,9 +146,33 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+    def witness_script_test(self):\n+        # Now test signing transaction to P2SH-P2WSH addresses without wallet\n+        # Create a new P2SH-P2WSH 1-of-1 multisig address:\n+        embedded_address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())\n+        embedded_privkey = self.nodes[1].dumpprivkey(embedded_address[\"address\"])\n+        p2sh_p2wsh_address = self.nodes[1].addmultisigaddress(1, [embedded_address[\"pubkey\"]], \"\", \"p2sh-segwit\")\n+        # send transaction to P2SH-P2WSH 1-of-1 multisig address\n+        self.nodes[0].generate(101)\n+        self.nodes[0].sendtoaddress(p2sh_p2wsh_address[\"address\"], 49.999)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        # Find the UTXO for the transaction node[1] should have received, check witnessScript matches\n+        unspent_output = self.nodes[1].listunspent(0, 999999, [p2sh_p2wsh_address[\"address\"]])[0]\n+        assert_equal(unspent_output[\"witnessScript\"], p2sh_p2wsh_address[\"redeemScript\"])\n+        p2sh_redeemScript = CScript([OP_0, sha256(hex_str_to_bytes(p2sh_p2wsh_address[\"redeemScript\"]))])\n+        assert_equal(unspent_output[\"redeemScript\"], bytes_to_hex_str(p2sh_redeemScript))\n+        # Now create and sign a transaction spending that output on node[0], which doesn't know the scripts or keys\n+        spending_tx = self.nodes[0].createrawtransaction([unspent_output], {self.nodes[1].getnewaddress(): Decimal(\"49.998\")})\n+        spending_tx_signed = self.nodes[0].signrawtransactionwithkey(spending_tx, [embedded_privkey], [unspent_output])\n+        # Check the signing completed successfully\n+        assert 'complete' in spending_tx_signed\n+        assert_equal(spending_tx_signed['complete'], True)\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()\n+        self.witness_script_test()\n         self.test_with_lock_outputs()\n \n "
      }
    ]
  },
  {
    "sha": "642bd7bbe747399d9e08a9b76a4a97f0e875c487",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDJiZDdiYmU3NDczOTlkOWUwOGE5Yjc2YTRhOTdmMGU4NzVjNDg3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T21:26:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T21:26:03Z"
      },
      "message": "Merge #15411: travis: Combine --disable-bip70 into existing job\n\neeeee58bc9 travis: Combine --disable-bip70 into existing job (MarcoFalke)\n\nPull request description:\n\n  We already have too many jobs, so instead of creating a separate job for the `--disable-bip70` configue option, combine it into an existing job\n\nTree-SHA512: 9e2fae73d90cb55b588c545bc118a14eba064f17fffd9b302c3fdbb8715e2319db03eac92ae51b3c16481f28a004a1c964dab75ca80a213e87574da8f73e3207",
      "tree": {
        "sha": "47b93feefde9e86e2be87eee2c1347abae45cd1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47b93feefde9e86e2be87eee2c1347abae45cd1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/642bd7bbe747399d9e08a9b76a4a97f0e875c487",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZdzrAAoJENLqSFDnUosly+EP/3q/qPYKLGxSVxSDlENKkrYK\n+wrSwtnC31bj7e/mPoZK0fxm5eLMXe2mBGbjWh6bvb0rIkzNmfuYLb+0NY4GJTr/\n/V2sag7D8KaP4FJLm0R6SoudMnejrfOcZwDmRthfYWPRk+SrhCuk/3RNlCoiO2WR\n7/JnAdzeoBOa3kev77jPxrWcvAlt5v6V1u2ewZL5T3DRVH7vqn7FDtLX5Fnkh9wJ\nBfglV4ELsdWN4Kyrf8okLpgsPyfpGo5zSPMQPQEJqLuX4ZcxHmdDc2djgq2KrSlR\nYEfQLA10a/5flXT+FkUufi3kHs2pLdzBVR14DKFC90W+CrrwpqZBwm2uj50MadyE\nepP0etoHsprYXS2nK9t7pG6fmLu6uT9TABOdxMYtAdxHTXx9L8Dj00PTy+NFduHd\nYwer4/EuuHtiUwA5gaAfRdDMKpmC+LmTaQ351HVGSx3c1UjoiWtR/7kJs7Fj3SH9\nHcenfuO3mz1ddlBsEQ6LYLu7KyZ7BY2OQM/NPjesTxKUusUBowlNO7+6tmvbz0Oz\nqTTvIPZzaK0xYKzWzqbaidebKIP8t98wK8KXtKxl+KI2QldinmWoqYUPfHbOE1H8\nbEOarcOqaMN/Ssau+pKn8U/Grbbt9evxvmIUm1lU5ypyA7/sGTRVYR18Q18aqfLK\n1w4it47klq96wSXqofXJ\n=eFzT\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIB4qi3LbCZhthevvStO9J4NgOo5rAh7YblmlgD9Mf0YQCP/wEAWxEknxGuav\nMA30Bod20iQI8SDARLMmPatuOwQzuVkeT0Po3en3YOAYcDeZtDUfSNNi/AjxBFxl\n3O7wCJpPzrW1e9ALAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQM2O2nnSdZxS7D77tG/F6HQjwEGlY1EkS2a0J\nHix2EqH1VYEI8QRcZdzu8AgqT94G3XrzHgCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEHCYvQOykfEnCmaQm//GTCAI\n8SDt6rc1T0YHzTwItS5uGDEGwkRPDYdf2OexuloI8J0MdwjxBFxl3O7wCArYeawN\nlGSnAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmfwEP7jfK3Gu2DT4Z+bk2MwAesI8QRcZdzu8AgRlE3JLte2ygCD\n3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 47b93feefde9e86e2be87eee2c1347abae45cd1b\nparent 3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc\nparent eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66\nauthor MarcoFalke <falke.marco@gmail.com> 1550179561 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550179563 -0500\n\nMerge #15411: travis: Combine --disable-bip70 into existing job\n\neeeee58bc9 travis: Combine --disable-bip70 into existing job (MarcoFalke)\n\nPull request description:\n\n  We already have too many jobs, so instead of creating a separate job for the `--disable-bip70` configue option, combine it into an existing job\n\nTree-SHA512: 9e2fae73d90cb55b588c545bc118a14eba064f17fffd9b302c3fdbb8715e2319db03eac92ae51b3c16481f28a004a1c964dab75ca80a213e87574da8f73e3207\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/642bd7bbe747399d9e08a9b76a4a97f0e875c487",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/642bd7bbe747399d9e08a9b76a4a97f0e875c487",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/642bd7bbe747399d9e08a9b76a4a97f0e875c487/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3facd9fdc4dd3a41ee668a2540ccf47751ce6cbc"
      },
      {
        "sha": "eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeee58bc9a52ad3bba348e9dd0a2b19f4ddaf66"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 2,
      "deletions": 11
    },
    "files": [
      {
        "sha": "54c386dbb0d69c2ddf6cbb48b3f07907fdc7c2b8",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/642bd7bbe747399d9e08a9b76a4a97f0e875c487/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/642bd7bbe747399d9e08a9b76a4a97f0e875c487/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=642bd7bbe747399d9e08a9b76a4a97f0e875c487",
        "patch": "@@ -85,12 +85,12 @@ jobs:\n         BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n \n     - stage: test\n-      name: '32-bit + dash  [GOAL: install]'\n+      name: '32-bit + dash  [GOAL: install]  [GUI: no BIP70]'\n       env: >-\n         HOST=i686-pc-linux-gnu\n         PACKAGES=\"g++-multilib python3-zmq\"\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n+        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --disable-bip70 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n         CONFIG_SHELL=\"/bin/dash\"\n \n     - stage: test\n@@ -132,15 +132,6 @@ jobs:\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n \n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [no BIP70]'\n-      env: >-\n-        HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n-        NO_DEPENDS=1\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --disable-bip70 --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n-\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n       env: >-"
      }
    ]
  },
  {
    "sha": "31f7c6dd21528f793ce61912d30c2a85079e1d7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWY3YzZkZDIxNTI4Zjc5M2NlNjE5MTJkMzBjMmE4NTA3OWUxZDdh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T21:32:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T21:32:26Z"
      },
      "message": "Merge #15295: fuzz: Add test/fuzz/test_runner.py and run it in travis\n\nfa535af92c fuzz: test_runner: Better error message when built with afl (MarcoFalke)\nfa7ca8ef58 qa: Add test/fuzz/test_runner.py (MarcoFalke)\n\nPull request description:\n\n  Can be run with `./test/fuzz/test_runner.py` after building as described in `doc/fuzzing.md`\n\nTree-SHA512: f6a3cd8165ec2de4b363be4fd0a936b4a60829cce923f93fe5d6a046b1bbd64c959cdf790440bf70c0e13b0bb1b956a746a24c6fd92bddeab15b837ed50ffad2",
      "tree": {
        "sha": "82f7629ee4e17ba3a29128ec2039bf7cb62a97b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82f7629ee4e17ba3a29128ec2039bf7cb62a97b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31f7c6dd21528f793ce61912d30c2a85079e1d7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZd5qAAoJENLqSFDnUosl3hwP/itp0fBdW7JVuYg5/pnsyL+6\nlbxfHWeW3g6Yi4bkU/+T93Tkxh0XV+Dv4CC/NsikmqJ6nmkvwzB3wtwUYz2n8MvJ\nVh0X09pa/1axROjxpvMByMKMp3t7d42OFIEmcwaUhUL+do4uMUmLs0Tp84ZDJikU\nRokp4xCbSkPzrvgrTi4JUCna3MsYkuAcjcV4nhuT2dcy1erzwOQDaTmzP8r0xg2H\nZpYj5+UDptU7ciySL2ykj8Y9HQLax3vbwapQqJGq5BFTp3QczJrTjlNsohd5kc50\nesoIA264YHl0eHMv61ax/MmNHmgIBCE1UVBnSSmz/ODqtKV80zNn0jwM5Yst1AaB\nbLwIFBvxzM8fvZJaoJRn5ei/ER60BUkFXNuujpjQiV9T4TbMss2PoI0OxUUv1QTE\n2kpFrY0bWJslFRJslUBPOpcDbWV9M/yCAd2mx0KJqmHmfvGynAOnrsKOkz8QcwK9\naNnl+jQ27HuPVWHbAtjuFxfG/9rh73JWn58mdWTfV2T4Rm4639iCubu47SpcJc+f\nn58OEJFHkQSHfmTSTlziGz9vGhzlcP0iGRYCndpqzcVsLtpGKoNmymmwPZhG7aGT\ntprv/SdH3RXGgu4gnZz/5WP4cUNQcQ7m7Rii7p05IgarGbrsLlSDHVfJK35oMIW4\n7qYOmK9UgbYWhdhnHFmt\n=LjTD\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICCIj4v7SAeA+5IJ1trs04+1FzN7nfesm4tVuTmew8V4CP/wEBSfdhSBDWtj\ntd1BGjeuaeUI8BCp7Pa6BuxhyTihMhZIBtfOCPEEXGXebfAIbyklE9ff26oAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BAmgthEnAq1Na2nateT8UCnCPEEXGXebPAI5GJpQf1KzDEAg9/jDS75DI4uLWh0\ndHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEIFL\ndJi/B/s6RwIx63yOMS0I8QRcZd5s8Agbd0U6OzvUCACD3+MNLvkMjiwraHR0cHM6\nLy9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ8jkvM2hOExZc\nS+cNKqGPHgjxBFxl3mzwCJeRXNJjx7ZbAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 82f7629ee4e17ba3a29128ec2039bf7cb62a97b4\nparent 642bd7bbe747399d9e08a9b76a4a97f0e875c487\nparent fa535af92c179b0ffb9280e0b2dc5acfeb80964a\nauthor MarcoFalke <falke.marco@gmail.com> 1550179936 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550179946 -0500\n\nMerge #15295: fuzz: Add test/fuzz/test_runner.py and run it in travis\n\nfa535af92c fuzz: test_runner: Better error message when built with afl (MarcoFalke)\nfa7ca8ef58 qa: Add test/fuzz/test_runner.py (MarcoFalke)\n\nPull request description:\n\n  Can be run with `./test/fuzz/test_runner.py` after building as described in `doc/fuzzing.md`\n\nTree-SHA512: f6a3cd8165ec2de4b363be4fd0a936b4a60829cce923f93fe5d6a046b1bbd64c959cdf790440bf70c0e13b0bb1b956a746a24c6fd92bddeab15b837ed50ffad2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31f7c6dd21528f793ce61912d30c2a85079e1d7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31f7c6dd21528f793ce61912d30c2a85079e1d7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31f7c6dd21528f793ce61912d30c2a85079e1d7a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "642bd7bbe747399d9e08a9b76a4a97f0e875c487",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/642bd7bbe747399d9e08a9b76a4a97f0e875c487",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/642bd7bbe747399d9e08a9b76a4a97f0e875c487"
      },
      {
        "sha": "fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa535af92c179b0ffb9280e0b2dc5acfeb80964a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa535af92c179b0ffb9280e0b2dc5acfeb80964a"
      }
    ],
    "stats": {
      "total": 231,
      "additions": 204,
      "deletions": 27
    },
    "files": [
      {
        "sha": "0ede31b4a64640de1fbf9e9dd45092b4efb39ef0",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f7c6dd21528f793ce61912d30c2a85079e1d7a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f7c6dd21528f793ce61912d30c2a85079e1d7a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "patch": "@@ -15,6 +15,7 @@ env:\n     - MAKEJOBS=-j3\n     - RUN_UNIT_TESTS=true\n     - RUN_FUNCTIONAL_TESTS=true\n+    - RUN_FUZZ_TESTS=false\n     - DOCKER_NAME_TAG=ubuntu:18.04\n     - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n@@ -100,7 +101,7 @@ jobs:\n         PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev\"\n         DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-fuzz --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n+        BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [trusty]  [no functional tests, no depends, only system libs]'\n@@ -132,6 +133,18 @@ jobs:\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n \n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: fuzzer,address]'\n+      env: >-\n+        HOST=x86_64-unknown-linux-gnu\n+        PACKAGES=\"clang llvm python3 libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\"\n+        NO_DEPENDS=1\n+        RUN_UNIT_TESTS=false\n+        RUN_FUNCTIONAL_TESTS=false\n+        RUN_FUZZ_TESTS=true\n+        GOAL=\"install\"\n+        BITCOIN_CONFIG=\"--disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\"\n+\n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n       env: >-"
      },
      {
        "sha": "8055bbdd19de1837814d0df4fa29191b6f6e1e07",
        "filename": ".travis/test_04_install.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f7c6dd21528f793ce61912d30c2a85079e1d7a/.travis/test_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f7c6dd21528f793ce61912d30c2a85079e1d7a/.travis/test_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_04_install.sh?ref=31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "patch": "@@ -7,6 +7,11 @@\n export LC_ALL=C.UTF-8\n \n travis_retry docker pull \"$DOCKER_NAME_TAG\"\n+\n+export DIR_FUZZ_IN=${TRAVIS_BUILD_DIR}/qa-assets\n+git clone https://github.com/bitcoin-core/qa-assets ${DIR_FUZZ_IN}\n+export DIR_FUZZ_IN=${DIR_FUZZ_IN}/fuzz_seed_corpus/\n+\n mkdir -p \"${TRAVIS_BUILD_DIR}/sanitizer-output/\"\n export ASAN_OPTIONS=\"\"\n export LSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/lsan\""
      },
      {
        "sha": "e13abfd52f303fba09a61726d38859baad6d59d1",
        "filename": ".travis/test_06_script_b.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f7c6dd21528f793ce61912d30c2a85079e1d7a/.travis/test_06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f7c6dd21528f793ce61912d30c2a85079e1d7a/.travis/test_06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_06_script_b.sh?ref=31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "patch": "@@ -19,3 +19,9 @@ if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n   DOCKER_EXEC test/functional/test_runner.py --ci --combinedlogslen=4000 --coverage --quiet --failfast\n   END_FOLD\n fi\n+\n+if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n+  BEGIN_FOLD fuzz-tests\n+  DOCKER_EXEC test/fuzz/test_runner.py -l DEBUG ${DIR_FUZZ_IN}\n+  END_FOLD\n+fi"
      },
      {
        "sha": "85674f819ada5e44cd2b8e61bb94de4c838e9900",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f7c6dd21528f793ce61912d30c2a85079e1d7a/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f7c6dd21528f793ce61912d30c2a85079e1d7a/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "patch": "@@ -225,7 +225,11 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(DIST_SHARE) test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+EXTRA_DIST = $(DIST_SHARE) $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+\n+EXTRA_DIST += \\\n+    test/functional \\\n+    test/fuzz\n \n EXTRA_DIST += \\\n     test/util/bitcoin-util-test.py \\"
      },
      {
        "sha": "f9221dde5bd9703cc6e1d536b874b55089800af4",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 33,
        "deletions": 24,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f7c6dd21528f793ce61912d30c2a85079e1d7a/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f7c6dd21528f793ce61912d30c2a85079e1d7a/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "patch": "@@ -5,6 +5,29 @@ A special test harness in `src/test/fuzz/` is provided for each fuzz target to\n provide an easy entry point for fuzzers and the like. In this document we'll\n describe how to use it with AFL and libFuzzer.\n \n+## Preparing fuzzing\n+\n+AFL needs an input directory with examples, and an output directory where it\n+will place examples that it found. These can be anywhere in the file system,\n+we'll define environment variables to make it easy to reference them.\n+\n+libFuzzer will use the input directory as output directory.\n+\n+Extract the example seeds (or other starting inputs) into the inputs\n+directory before starting fuzzing.\n+\n+```\n+git clone https://github.com/bitcoin-core/qa-assets\n+export DIR_FUZZ_IN=$PWD/qa-assets/fuzz_seed_corpus\n+```\n+\n+Only for AFL:\n+\n+```\n+mkdir outputs\n+export AFLOUT=$PWD/outputs\n+```\n+\n ## AFL\n \n ### Building AFL\n@@ -23,7 +46,7 @@ export AFLPATH=$PWD\n To build Bitcoin Core using AFL instrumentation (this assumes that the\n `AFLPATH` was set as above):\n ```\n-./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n+./configure --disable-ccache --disable-shared --enable-tests --enable-fuzz --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\n export AFL_HARDEN=1\n cd src/\n make\n@@ -39,31 +62,14 @@ binary will be instrumented in such a way that the AFL\n features \"persistent mode\" and \"deferred forkserver\" can be used. See\n https://github.com/mcarpenter/afl/tree/master/llvm_mode for details.\n \n-### Preparing fuzzing\n-\n-AFL needs an input directory with examples, and an output directory where it\n-will place examples that it found. These can be anywhere in the file system,\n-we'll define environment variables to make it easy to reference them.\n-\n-```\n-mkdir inputs\n-AFLIN=$PWD/inputs\n-mkdir outputs\n-AFLOUT=$PWD/outputs\n-```\n-\n-Example inputs are available from:\n-\n-- https://download.visucore.com/bitcoin/bitcoin_fuzzy_in.tar.xz\n-- http://strateman.ninja/fuzzing.tar.xz\n-\n-Extract these (or other starting inputs) into the `inputs` directory before starting fuzzing.\n-\n ### Fuzzing\n \n To start the actual fuzzing use:\n+\n ```\n-$AFLPATH/afl-fuzz -i ${AFLIN} -o ${AFLOUT} -m52 -- test/fuzz/fuzz_target_foo\n+export FUZZ_TARGET=fuzz_target_foo  # Pick a fuzz_target\n+mkdir ${AFLOUT}/${FUZZ_TARGET}\n+$AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- test/fuzz/${FUZZ_TARGET}\n ```\n \n You may have to change a few kernel parameters to test optimally - `afl-fuzz`\n@@ -74,10 +80,10 @@ will print an error and suggestion if so.\n A recent version of `clang`, the address sanitizer and libFuzzer is needed (all\n found in the `compiler-rt` runtime libraries package).\n \n-To build the `test/test_bitcoin_fuzzy` executable run\n+To build all fuzz targets with libFuzzer, run\n \n ```\n-./configure --disable-ccache --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n+./configure --disable-ccache --disable-wallet --disable-bench --with-utils=no --with-daemon=no --with-libs=no --with-gui=no --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\n make\n ```\n \n@@ -86,3 +92,6 @@ interchangeably between libFuzzer and AFL.\n \n See https://llvm.org/docs/LibFuzzer.html#running on how to run the libFuzzer\n instrumented executable.\n+\n+Alternatively run the script in `./test/fuzz/test_runner.py` and provide it\n+with the `${DIR_FUZZ_IN}` created earlier."
      },
      {
        "sha": "f40a205a73c54f243fd2b110096a7549b6c284cd",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f7c6dd21528f793ce61912d30c2a85079e1d7a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f7c6dd21528f793ce61912d30c2a85079e1d7a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "patch": "@@ -2,7 +2,6 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-bin_PROGRAMS += test/test_bitcoin\n \n FUZZ_TARGETS = \\\n   test/fuzz/address_deserialize \\\n@@ -28,6 +27,8 @@ FUZZ_TARGETS = \\\n \n if ENABLE_FUZZ\n noinst_PROGRAMS += $(FUZZ_TARGETS:=)\n+else\n+bin_PROGRAMS += test/test_bitcoin\n endif\n \n TEST_SRCDIR = test"
      },
      {
        "sha": "6b7ef7065921b62b0cb06a3e14343e99a0b7816e",
        "filename": "test/config.ini.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f7c6dd21528f793ce61912d30c2a85079e1d7a/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f7c6dd21528f793ce61912d30c2a85079e1d7a/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "patch": "@@ -16,4 +16,5 @@ RPCAUTH=@abs_top_srcdir@/share/rpcauth/rpcauth.py\n @ENABLE_WALLET_TRUE@ENABLE_WALLET=true\n @BUILD_BITCOIN_CLI_TRUE@ENABLE_CLI=true\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n+@ENABLE_FUZZ_TRUE@ENABLE_FUZZ=true\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true"
      },
      {
        "sha": "1869f717539a09dca0a6d5803e4f8fbdaa01cadc",
        "filename": "test/fuzz/test_runner.py",
        "status": "added",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f7c6dd21528f793ce61912d30c2a85079e1d7a/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f7c6dd21528f793ce61912d30c2a85079e1d7a/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "patch": "@@ -0,0 +1,138 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Run fuzz test targets.\n+\"\"\"\n+\n+import argparse\n+import configparser\n+import os\n+import sys\n+import subprocess\n+import logging\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n+    parser.add_argument(\n+        \"-l\",\n+        \"--loglevel\",\n+        dest=\"loglevel\",\n+        default=\"INFO\",\n+        help=\"log events at this level and higher to the console. Can be set to DEBUG, INFO, WARNING, ERROR or CRITICAL. Passing --loglevel DEBUG will output all logs to console.\",\n+    )\n+    parser.add_argument(\n+        '--export_coverage',\n+        action='store_true',\n+        help='If true, export coverage information to files in the seed corpus',\n+    )\n+    parser.add_argument(\n+        'seed_dir',\n+        help='The seed corpus to run on (must contain subfolders for each fuzz target).',\n+    )\n+    parser.add_argument(\n+        'target',\n+        nargs='*',\n+        help='The target(s) to run. Default is to run all targets.',\n+    )\n+\n+    args = parser.parse_args()\n+\n+    # Set up logging\n+    logging.basicConfig(\n+        format='%(message)s',\n+        level=int(args.loglevel) if args.loglevel.isdigit() else args.loglevel.upper(),\n+    )\n+\n+    # Read config generated by configure.\n+    config = configparser.ConfigParser()\n+    configfile = os.path.abspath(os.path.dirname(__file__)) + \"/../config.ini\"\n+    config.read_file(open(configfile, encoding=\"utf8\"))\n+\n+    if not config[\"components\"].getboolean(\"ENABLE_FUZZ\"):\n+        logging.error(\"Must have fuzz targets built\")\n+        sys.exit(1)\n+\n+    # Build list of tests\n+    test_list_all = parse_test_list(makefile=os.path.join(config[\"environment\"][\"SRCDIR\"], 'src', 'Makefile.test.include'))\n+\n+    if not test_list_all:\n+        logging.error(\"No fuzz targets found\")\n+        sys.exit(1)\n+\n+    logging.info(\"Fuzz targets found: {}\".format(test_list_all))\n+\n+    args.target = args.target or test_list_all  # By default run all\n+    test_list_error = list(set(args.target).difference(set(test_list_all)))\n+    if test_list_error:\n+        logging.error(\"Unknown fuzz targets selected: {}\".format(test_list_error))\n+    test_list_selection = list(set(test_list_all).intersection(set(args.target)))\n+    if not test_list_selection:\n+        logging.error(\"No fuzz targets selected\")\n+    logging.info(\"Fuzz targets selected: {}\".format(test_list_selection))\n+\n+    try:\n+        help_output = subprocess.run(\n+            args=[\n+                os.path.join(config[\"environment\"][\"BUILDDIR\"], 'src', 'test', 'fuzz', test_list_selection[0]),\n+                '-help=1',\n+            ],\n+            timeout=1,\n+            check=True,\n+            stderr=subprocess.PIPE,\n+            universal_newlines=True,\n+        ).stderr\n+        if \"libFuzzer\" not in help_output:\n+            logging.error(\"Must be built with libFuzzer\")\n+            sys.exit(1)\n+    except subprocess.TimeoutExpired:\n+        logging.error(\"subprocess timed out: Currently only libFuzzer is supported\")\n+        sys.exit(1)\n+\n+    run_once(\n+        corpus=args.seed_dir,\n+        test_list=test_list_selection,\n+        build_dir=config[\"environment\"][\"BUILDDIR\"],\n+        export_coverage=args.export_coverage,\n+    )\n+\n+\n+def run_once(*, corpus, test_list, build_dir, export_coverage):\n+    for t in test_list:\n+        args = [\n+            os.path.join(build_dir, 'src', 'test', 'fuzz', t),\n+            '-runs=1',\n+            os.path.join(corpus, t),\n+        ]\n+        logging.debug('Run {} with args {}'.format(t, args))\n+        output = subprocess.run(args, check=True, stderr=subprocess.PIPE, universal_newlines=True).stderr\n+        logging.debug('Output: {}'.format(output))\n+        if not export_coverage:\n+            continue\n+        for l in output.splitlines():\n+            if 'INITED' in l:\n+                with open(os.path.join(corpus, t + '_coverage'), 'w', encoding='utf-8') as cov_file:\n+                    cov_file.write(l)\n+                    break\n+\n+\n+def parse_test_list(makefile):\n+    with open(makefile, encoding='utf-8') as makefile_test:\n+        test_list_all = []\n+        read_targets = False\n+        for line in makefile_test.readlines():\n+            line = line.strip().replace('test/fuzz/', '').replace(' \\\\', '')\n+            if read_targets:\n+                if not line:\n+                    break\n+                test_list_all.append(line)\n+                continue\n+\n+            if line == 'FUZZ_TARGETS =':\n+                read_targets = True\n+    return test_list_all\n+\n+\n+if __name__ == '__main__':\n+    main()"
      }
    ]
  },
  {
    "sha": "33480c6366583736ceb641d077733b867730e941",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzQ4MGM2MzY2NTgzNzM2Y2ViNjQxZDA3NzczM2I4Njc3MzBlOTQx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T21:42:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-14T21:42:23Z"
      },
      "message": "Merge #15285: build: Prefer Python 3.4 even if newer versions are present on the system\n\n0890339fb3 build: prefer python3.4 even if newer versions are present on the system (Sjors Provoost)\n\nPull request description:\n\n  Python 3.4 is this mimimum supported version according to [doc/dependencies.md](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md)\n\n  Systems with [PyEnv](https://github.com/pyenv/pyenv) ensure (via [.python-version](https://github.com/bitcoin/bitcoin/blob/master/.python-version)) that Python 3.4 is used\n  for the functional tests. However `make check` calls `bitcoin-util-test.py`\n  using the Python command found by `configure.ac`, which looks system wide.\n\n  On systems with multiple versions of Python this would cause `make check`\n  to fail, as it tries to call a version of Python that PyEnv blocks.\n\n  This is solved by preferring python3.4 in `configure.ac`.\n\n  I missed this in #14884, so ideally this should be tagged 0.18\n\nTree-SHA512: b7487081a1ee7c2cb672a2e4bc1943ec8d23825fb941e567cb00fb123e6d59b1d8b7ddbf97d48aca770b9ddb9eacbfe73d8ac8cb1e1cdc34587ee1cee9929840",
      "tree": {
        "sha": "f1288b0f65552589d056007b1e7aeab23ad7ffb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1288b0f65552589d056007b1e7aeab23ad7ffb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33480c6366583736ceb641d077733b867730e941",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZeC/AAoJENLqSFDnUoslaCsQALPsOD1H8O5h/5ykH2QLDagT\nF3v0DFH3KZ79GF+aTfoWQXFJUkWe3wLV47TQQNb3HcSEtfoUtT7NsTr8XsKaaMxK\nL4xPolnicuSxK9Z/owp9Ho3U9hV8ew+uQ29SY1ur6kaEDtCizrzh7jqd99JTIZs0\nx15nZTbmoBGZKeGl6pyuGFucS/MIS95KBDkeeiiYb2p0TBd32ej4N8/ylia7qfRr\ntPTTPn+ZwQJUxrnRNy5cV1MaDJx8IKpOzaQ7soO78+rzpylj6PupwWXkQaXYm+Gg\np2g745ER1UegZhXGk0Z6OUytrKLvEZckO3Zfc3DoTWrLdKdexS4NKYWogBljKRNW\nc1MENMb/e0M7sszcknnXcgotET+J4QzgTEd8hSlhvrm7c89jkWA80NushxGTHGza\nB1JVIj407hj3PWhyMVXQvB1u6gJr6OSPffty34wmrsndBshhJeNUGdhBasizJO20\nrfyg2X+FpGEc0bkq694jVZH+lQhtlJ+6mi3riHvU93gDOqe/ZMV8dV5IFFT10gWy\nl3Qg7I18ga075oRXP4VsQCDqdgeszcC1Ge8VTcd9E5h46a7a4OQT864+odu5czRJ\nc1zpYNXzcSXFvK7MprJoBPOa06Wmw21rgmNqc7eK7FugrR7n0mBBqvO1OkCFzSUD\ng9yVjQmhjFePnlK/Boib\n=2KTd\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMIOV/Qxd9TgsbuDKQDXaQx6FOQBJaOAg/DPdO8xvg/+CP/wEAjyNyP2EHRD\nO5Miic319/II8QRcZeDC8AiLD2seJEif9gCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQEV2NSVRwzPVLU06+\nrptOOgjxIOVAJzS/JDRa6L/mNd5jVxfUTB19crvGtR+dqZGsUx1kCPEEXGXgwvAI\nxkEO9mxme0AAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmf/8BAyJn+cMb7q1q7P1MZekxqeCPEEXGXgwfAI7sCb8Afh\nWrEAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23w\nEGjOUXsT30xm04trUvUnA38I8BB9YP2OO3JCV5NizQhoWuwzCPEEXGXgwvAIEjsi\nTewJrvoAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5\nd2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f1288b0f65552589d056007b1e7aeab23ad7ffb8\nparent 31f7c6dd21528f793ce61912d30c2a85079e1d7a\nparent 0890339fb337de7690d501a5436657a9d996e5a7\nauthor MarcoFalke <falke.marco@gmail.com> 1550180526 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550180543 -0500\n\nMerge #15285: build: Prefer Python 3.4 even if newer versions are present on the system\n\n0890339fb3 build: prefer python3.4 even if newer versions are present on the system (Sjors Provoost)\n\nPull request description:\n\n  Python 3.4 is this mimimum supported version according to [doc/dependencies.md](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md)\n\n  Systems with [PyEnv](https://github.com/pyenv/pyenv) ensure (via [.python-version](https://github.com/bitcoin/bitcoin/blob/master/.python-version)) that Python 3.4 is used\n  for the functional tests. However `make check` calls `bitcoin-util-test.py`\n  using the Python command found by `configure.ac`, which looks system wide.\n\n  On systems with multiple versions of Python this would cause `make check`\n  to fail, as it tries to call a version of Python that PyEnv blocks.\n\n  This is solved by preferring python3.4 in `configure.ac`.\n\n  I missed this in #14884, so ideally this should be tagged 0.18\n\nTree-SHA512: b7487081a1ee7c2cb672a2e4bc1943ec8d23825fb941e567cb00fb123e6d59b1d8b7ddbf97d48aca770b9ddb9eacbfe73d8ac8cb1e1cdc34587ee1cee9929840\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33480c6366583736ceb641d077733b867730e941",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33480c6366583736ceb641d077733b867730e941",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33480c6366583736ceb641d077733b867730e941/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31f7c6dd21528f793ce61912d30c2a85079e1d7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31f7c6dd21528f793ce61912d30c2a85079e1d7a"
      },
      {
        "sha": "0890339fb337de7690d501a5436657a9d996e5a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0890339fb337de7690d501a5436657a9d996e5a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0890339fb337de7690d501a5436657a9d996e5a7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dec6d4fac3384420eb601930188839bff26dff74",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33480c6366583736ceb641d077733b867730e941/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33480c6366583736ceb641d077733b867730e941/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=33480c6366583736ceb641d077733b867730e941",
        "patch": "@@ -85,8 +85,8 @@ AC_PATH_TOOL(RANLIB, ranlib)\n AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n AC_PATH_PROG(LCOV, lcov)\n-dnl Python 3.x is supported from 3.4 on (see https://github.com/bitcoin/bitcoin/issues/7893)\n-AC_PATH_PROGS([PYTHON], [python3.7 python3.6 python3.5 python3.4 python3 python])\n+dnl Python 3.4 is specified in .python-version and should be used if available, see doc/dependencies.md\n+AC_PATH_PROGS([PYTHON], [python3.4 python3.5 python3.6 python3.7 python3 python])\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)"
      }
    ]
  },
  {
    "sha": "eab63bc264a35cf21738e8535773e3d36524c3fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWI2M2JjMjY0YTM1Y2YyMTczOGU4NTM1NzczZTNkMzY1MjRjM2Zl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:37Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Store key origin info in key metadata\n\nStore the master key fingerprint and derivation path in the\nkey metadata. hdKeypath is kept to indicate the seed and for\nbackwards compatibility, but all key derivation path output\nuses the key origin info instead of hdKeypath.",
      "tree": {
        "sha": "557800411c6e5918e1768b0c215cb1fe68df54f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/557800411c6e5918e1768b0c215cb1fe68df54f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eab63bc264a35cf21738e8535773e3d36524c3fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eab63bc264a35cf21738e8535773e3d36524c3fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eab63bc264a35cf21738e8535773e3d36524c3fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eab63bc264a35cf21738e8535773e3d36524c3fe/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/345bff6013e0d1a7eb0a08a071723b27f0460b77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/345bff6013e0d1a7eb0a08a071723b27f0460b77"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 100,
      "deletions": 18
    },
    "files": [
      {
        "sha": "3e9a3b38c66fd4e20c158d944853f37afdd7ae5f",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -22,13 +22,27 @@ struct CMutableTransaction;\n \n struct KeyOriginInfo\n {\n-    unsigned char fingerprint[4];\n+    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path\n     std::vector<uint32_t> path;\n \n     friend bool operator==(const KeyOriginInfo& a, const KeyOriginInfo& b)\n     {\n         return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n     }\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n+    {\n+        READWRITE(fingerprint);\n+        READWRITE(path);\n+    }\n+\n+    void clear()\n+    {\n+        memset(fingerprint, 0, 4);\n+        path.clear();\n+    }\n };\n \n /** An interface to be implemented by keystores that support signing. */"
      },
      {
        "sha": "8ed912ed1ed1940a684b27ab7dfc510e0fa13c33",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -13,6 +13,7 @@\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <validation.h>\n@@ -850,7 +851,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             } else {\n                 file << \"change=1\";\n             }\n-            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwallet->mapKeyMetadata[keyid].hdKeypath.size() > 0 ? \" hdkeypath=\"+pwallet->mapKeyMetadata[keyid].hdKeypath : \"\"));\n+            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwallet->mapKeyMetadata[keyid].has_key_origin ? \" hdkeypath=\"+WriteHDKeypath(pwallet->mapKeyMetadata[keyid].key_origin.path) : \"\"));\n         }\n     }\n     file << \"\\n\";"
      },
      {
        "sha": "b5df70d5606c0583ee8763845eefae1f36b475a5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -3659,6 +3659,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n+            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingperint of the master key.\\n\"\n             \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n@@ -3721,9 +3722,10 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     }\n     if (meta) {\n         ret.pushKV(\"timestamp\", meta->nCreateTime);\n-        if (!meta->hdKeypath.empty()) {\n-            ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+        if (meta->has_key_origin) {\n+            ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n             ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n+            ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint, meta->key_origin.fingerprint + 4));\n         }\n     }\n "
      },
      {
        "sha": "399490ea9f0a02149a2594df65125a1711de9afc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 11,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -256,16 +256,25 @@ void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey\n         if (internal) {\n             chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             hdChain.nInternalChainCounter++;\n         }\n         else {\n             chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             hdChain.nExternalChainCounter++;\n         }\n     } while (HaveKey(childKey.key.GetPubKey().GetID()));\n     secret = childKey.key;\n     metadata.hd_seed_id = hdChain.seed_id;\n+    CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+    std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n+    metadata.has_key_origin = true;\n     // update the chain model in the database\n     if (!batch.WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n@@ -355,6 +364,41 @@ bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey,\n     return WalletBatch(*database).WriteKeyMetadata(meta, pubkey, overwrite);\n }\n \n+void CWallet::UpgradeKeyMetadata()\n+{\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n@@ -453,8 +497,11 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_key\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(_vMasterKey, accept_no_keys))\n+            if (CCryptoKeyStore::Unlock(_vMasterKey, accept_no_keys)) {\n+                // Now that we've unlocked, upgrade the key metadata\n+                UpgradeKeyMetadata();\n                 return true;\n+            }\n         }\n     }\n     return false;\n@@ -1414,6 +1461,7 @@ CPubKey CWallet::DeriveNewSeed(const CKey& key)\n \n     // set the hd keypath to \"s\" -> Seed, refers the seed to itself\n     metadata.hdKeypath     = \"s\";\n+    metadata.has_key_origin = false;\n     metadata.hd_seed_id = seed.GetID();\n \n     {\n@@ -4494,16 +4542,9 @@ bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n             meta = it->second;\n         }\n     }\n-    if (!meta.hdKeypath.empty()) {\n-        if (!ParseHDKeypath(meta.hdKeypath, info.path)) return false;\n-        // Get the proper master key id\n-        CKey key;\n-        GetKey(meta.hd_seed_id, key);\n-        CExtKey masterKey;\n-        masterKey.SetSeed(key.begin(), key.size());\n-        // Compute identifier\n-        CKeyID masterid = masterKey.key.GetPubKey().GetID();\n-        std::copy(masterid.begin(), masterid.begin() + 4, info.fingerprint);\n+    if (meta.has_key_origin) {\n+        std::copy(meta.key_origin.fingerprint, meta.key_origin.fingerprint + 4, info.fingerprint);\n+        info.path = meta.key_origin.path;\n     } else { // Single pubkeys get the master fingerprint of themselves\n         std::copy(keyID.begin(), keyID.begin() + 4, info.fingerprint);\n     }"
      },
      {
        "sha": "ad6d72afb699b276d66cc17815fa4f99ef9bbfef",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -135,6 +135,9 @@ enum WalletFlags : uint64_t {\n     // wallet flags in the upper section (> 1 << 31) will lead to not opening the wallet if flag is unknown\n     // unknown wallet flags in the lower section <= (1 << 31) will be tolerated\n \n+    // Indicates that the metadata has already been upgraded to contain key origins\n+    WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),\n+\n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n \n@@ -151,7 +154,7 @@ enum WalletFlags : uint64_t {\n     WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n };\n \n-static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET;\n+static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_KEY_ORIGIN_METADATA;\n \n /** A key pool entry */\n class CKeyPool\n@@ -868,6 +871,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Load metadata (used by LoadWallet)\n     void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      },
      {
        "sha": "2783f83fd6070aa186c1e82ae87b3fefed5f298c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -534,6 +534,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     if (wss.fAnyUnordered)\n         result = pwallet->ReorderTransactions();\n \n+    // Upgrade all of the wallet keymetadata to have the hd master key id\n+    // This operation is not atomic, but if it fails, updated entries are still backwards compatible with older software\n+    try {\n+        pwallet->UpgradeKeyMetadata();\n+    } catch (...) {\n+        result = DBErrors::CORRUPT;\n+    }\n+\n     return result;\n }\n "
      },
      {
        "sha": "0532a55ff583cbc7f9af5926321def7470bee71e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eab63bc264a35cf21738e8535773e3d36524c3fe/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=eab63bc264a35cf21738e8535773e3d36524c3fe",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <amount.h>\n #include <primitives/transaction.h>\n+#include <script/sign.h>\n #include <wallet/db.h>\n #include <key.h>\n \n@@ -93,11 +94,14 @@ class CKeyMetadata\n public:\n     static const int VERSION_BASIC=1;\n     static const int VERSION_WITH_HDDATA=10;\n-    static const int CURRENT_VERSION=VERSION_WITH_HDDATA;\n+    static const int VERSION_WITH_KEY_ORIGIN = 12;\n+    static const int CURRENT_VERSION=VERSION_WITH_KEY_ORIGIN;\n     int nVersion;\n     int64_t nCreateTime; // 0 means unknown\n-    std::string hdKeypath; //optional HD/bip32 keypath\n+    std::string hdKeypath; //optional HD/bip32 keypath. Still used to determine whether a key is a seed. Also kept for backwards compatibility\n     CKeyID hd_seed_id; //id of the HD seed used to derive this key\n+    KeyOriginInfo key_origin; // Key origin info with path and fingerprint\n+    bool has_key_origin = false; //< Whether the key_origin is useful\n \n     CKeyMetadata()\n     {\n@@ -120,6 +124,11 @@ class CKeyMetadata\n             READWRITE(hdKeypath);\n             READWRITE(hd_seed_id);\n         }\n+        if (this->nVersion >= VERSION_WITH_KEY_ORIGIN)\n+        {\n+            READWRITE(key_origin);\n+            READWRITE(has_key_origin);\n+        }\n     }\n \n     void SetNull()\n@@ -128,6 +137,8 @@ class CKeyMetadata\n         nCreateTime = 0;\n         hdKeypath.clear();\n         hd_seed_id.SetNull();\n+        key_origin.clear();\n+        has_key_origin = false;\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "3d235dff5df106070e41e3a99cf9fb847a27e14a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDIzNWRmZjVkZjEwNjA3MGU0MWUzYTk5Y2Y5ZmI4NDdhMjdlMTRh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Implement a function to add KeyOriginInfo to a wallet",
      "tree": {
        "sha": "d9484067ce57ec5b8b33c86daf5d105e932c7a27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9484067ce57ec5b8b33c86daf5d105e932c7a27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d235dff5df106070e41e3a99cf9fb847a27e14a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d235dff5df106070e41e3a99cf9fb847a27e14a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d235dff5df106070e41e3a99cf9fb847a27e14a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d235dff5df106070e41e3a99cf9fb847a27e14a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eab63bc264a35cf21738e8535773e3d36524c3fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eab63bc264a35cf21738e8535773e3d36524c3fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eab63bc264a35cf21738e8535773e3d36524c3fe"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4df4e0981e4994e4838babfd8ca7f172d442b7f2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d235dff5df106070e41e3a99cf9fb847a27e14a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d235dff5df106070e41e3a99cf9fb847a27e14a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3d235dff5df106070e41e3a99cf9fb847a27e14a",
        "patch": "@@ -4550,3 +4550,13 @@ bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n     }\n     return true;\n }\n+\n+bool CWallet::AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info)\n+{\n+    LOCK(cs_wallet);\n+    std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n+    mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n+    mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n+    mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n+    return WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n+}"
      },
      {
        "sha": "3c5e475bd91f59e1327abcb14e038765bda0e8b7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d235dff5df106070e41e3a99cf9fb847a27e14a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d235dff5df106070e41e3a99cf9fb847a27e14a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3d235dff5df106070e41e3a99cf9fb847a27e14a",
        "patch": "@@ -1219,6 +1219,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "02d6586d7a0f1a0886010e733760ce59cf0935c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmQ2NTg2ZDdhMGYxYTA4ODYwMTBlNzMzNzYwY2U1OWNmMDkzNWMz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Import KeyOriginData when importing descriptors",
      "tree": {
        "sha": "671c976b1b5070346667a3af67b26602fee0a9af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/671c976b1b5070346667a3af67b26602fee0a9af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02d6586d7a0f1a0886010e733760ce59cf0935c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d6586d7a0f1a0886010e733760ce59cf0935c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02d6586d7a0f1a0886010e733760ce59cf0935c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d6586d7a0f1a0886010e733760ce59cf0935c3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d235dff5df106070e41e3a99cf9fb847a27e14a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d235dff5df106070e41e3a99cf9fb847a27e14a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d235dff5df106070e41e3a99cf9fb847a27e14a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5ceba397041520a0f1263ee5ef613dc659b56908",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d6586d7a0f1a0886010e733760ce59cf0935c3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d6586d7a0f1a0886010e733760ce59cf0935c3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=02d6586d7a0f1a0886010e733760ce59cf0935c3",
        "patch": "@@ -888,6 +888,7 @@ struct ImportData\n     // Output data\n     std::set<CScript> import_scripts;\n     std::map<CKeyID, bool> used_keys; //!< Import these private keys if available (the value indicates whether if the key is required for solvability)\n+    std::map<CKeyID, KeyOriginInfo> key_origins;\n };\n \n enum class ScriptContext\n@@ -1158,7 +1159,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n     }\n \n     std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n-\n+    import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     for (size_t i = 0; i < priv_keys.size(); ++i) {\n         const auto& str = priv_keys[i].get_str();\n         CKey key = DecodeSecret(str);\n@@ -1261,6 +1262,11 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n+            const auto& key_orig_it = import_data.key_origins.find(id);\n+            if (key_orig_it != import_data.key_origins.end()) {\n+                pwallet->AddKeyOrigin(pubkey, key_orig_it->second);\n+            }\n+            pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n         }\n \n         for (const CScript& script : script_pub_keys) {"
      }
    ]
  },
  {
    "sha": "4c75a69f36a7630342e68b12999115e6b6b1e1e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Yzc1YTY5ZjM2YTc2MzAzNDJlNjhiMTI5OTkxMTVlNmI2YjFlMWUw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:23:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Test importing descriptors with key origin information",
      "tree": {
        "sha": "9c962e7c35ae025d6534368ad8df5e527c348db6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c962e7c35ae025d6534368ad8df5e527c348db6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c75a69f36a7630342e68b12999115e6b6b1e1e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c75a69f36a7630342e68b12999115e6b6b1e1e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c75a69f36a7630342e68b12999115e6b6b1e1e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c75a69f36a7630342e68b12999115e6b6b1e1e0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02d6586d7a0f1a0886010e733760ce59cf0935c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d6586d7a0f1a0886010e733760ce59cf0935c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d6586d7a0f1a0886010e733760ce59cf0935c3"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 65,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ee59ef0966244ac5870ee8b81712a968a31d614b",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c75a69f36a7630342e68b12999115e6b6b1e1e0/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c75a69f36a7630342e68b12999115e6b6b1e1e0/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=4c75a69f36a7630342e68b12999115e6b6b1e1e0",
        "patch": "@@ -626,5 +626,70 @@ def run_test(self):\n                      iswatchonly=False)\n \n \n+        # Import pubkeys with key origin info\n+        self.log.info(\"Addresses should have hd keypath and master key id after import with key origin\")\n+        pub_addr = self.nodes[1].getnewaddress()\n+        pub_addr = self.nodes[1].getnewaddress()\n+        info = self.nodes[1].getaddressinfo(pub_addr)\n+        pub = info['pubkey']\n+        pub_keypath = info['hdkeypath']\n+        pub_fpr = info['hdmasterfingerprint']\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'desc' : \"wpkh([\" + pub_fpr + pub_keypath[1:] +\"]\" + pub + \")\",\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        pub_import_info = self.nodes[0].getaddressinfo(pub_addr)\n+        assert_equal(pub_import_info['hdmasterfingerprint'], pub_fpr)\n+        assert_equal(pub_import_info['pubkey'], pub)\n+        assert_equal(pub_import_info['hdkeypath'], pub_keypath)\n+\n+        # Import privkeys with key origin info\n+        priv_addr = self.nodes[1].getnewaddress()\n+        info = self.nodes[1].getaddressinfo(priv_addr)\n+        priv = self.nodes[1].dumpprivkey(priv_addr)\n+        priv_keypath = info['hdkeypath']\n+        priv_fpr = info['hdmasterfingerprint']\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'desc' : \"wpkh([\" + priv_fpr + priv_keypath[1:] + \"]\" + priv + \")\",\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        priv_import_info = self.nodes[0].getaddressinfo(priv_addr)\n+        assert_equal(priv_import_info['hdmasterfingerprint'], priv_fpr)\n+        assert_equal(priv_import_info['hdkeypath'], priv_keypath)\n+\n+        # Make sure the key origin info are still there after a restart\n+        self.stop_nodes()\n+        self.start_nodes()\n+        import_info = self.nodes[0].getaddressinfo(pub_addr)\n+        assert_equal(import_info['hdmasterfingerprint'], pub_fpr)\n+        assert_equal(import_info['hdkeypath'], pub_keypath)\n+        import_info = self.nodes[0].getaddressinfo(priv_addr)\n+        assert_equal(import_info['hdmasterfingerprint'], priv_fpr)\n+        assert_equal(import_info['hdkeypath'], priv_keypath)\n+\n+        # Check legacy import does not import key origin info\n+        self.log.info(\"Legacy imports don't have key origin info\")\n+        pub_addr = self.nodes[1].getnewaddress()\n+        info = self.nodes[1].getaddressinfo(pub_addr)\n+        pub = info['pubkey']\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'scriptPubKey': {'address': pub_addr},\n+                'pubkeys': [pub],\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        pub_import_info = self.nodes[0].getaddressinfo(pub_addr)\n+        assert_equal(pub_import_info['pubkey'], pub)\n+        assert 'hdmasterfingerprint' not in pub_import_info\n+        assert 'hdkeypath' not in pub_import_info\n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      }
    ]
  },
  {
    "sha": "cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjM1MTFiOWQ1ZjNkOGE4NmUwOTBlYmVkNWE0YWVhZjc1ODQzMGI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-13T21:07:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T22:58:25Z"
      },
      "message": "Add release notes for importing key origin info change",
      "tree": {
        "sha": "981278e3ab253e29a95999601254917ff5c7d5e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/981278e3ab253e29a95999601254917ff5c7d5e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c75a69f36a7630342e68b12999115e6b6b1e1e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c75a69f36a7630342e68b12999115e6b6b1e1e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c75a69f36a7630342e68b12999115e6b6b1e1e0"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4797a95bdb8cd9cda7f853ce405980ce359f9720",
        "filename": "doc/release-notes-14021.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8/doc/release-notes-14021.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8/doc/release-notes-14021.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14021.md?ref=cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
        "patch": "@@ -0,0 +1,11 @@\n+Miscellaneous RPC Changes\n+-------------------------\n+- Descriptors with key origin information imported through `importmulti` will have their key origin information stored in the wallet for use with creating PSBTs.\n+- If `bip32derivs` of both `walletprocesspsbt` and `walletcreatefundedpsbt` is set to true but the key metadata for a public key has not been updated yet, then that key will have a derivation path as if it were just an independent key (i.e. no derivation path and its master fingerprint is itself)\n+\n+Miscellaneous Wallet changes\n+----------------------------\n+\n+- The key metadata will need to be upgraded the first time that the HD seed is available.\n+For unencrypted wallets this will occur on wallet loading.\n+For encrypted wallets this will occur the first time the wallet is unlocked."
      }
    ]
  },
  {
    "sha": "8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDBlYzc0ODAxZjdiMTg1MDg3ZDFiNmRiYjgyYmRkNmZiZDhkY2M1",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-14T23:10:52Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-14T23:11:28Z"
      },
      "message": "Merge #14021: Import key origin data through descriptors in importmulti\n\ncb3511b9d Add release notes for importing key origin info change (Andrew Chow)\n4c75a69f3 Test importing descriptors with key origin information (Andrew Chow)\n02d6586d7 Import KeyOriginData when importing descriptors (Andrew Chow)\n3d235dff5 Implement a function to add KeyOriginInfo to a wallet (Andrew Chow)\neab63bc26 Store key origin info in key metadata (Andrew Chow)\n345bff601 Remove hdmasterkeyid (Andrew Chow)\nbac8c676a Add a method to CWallet to write just CKeyMetadata (Andrew Chow)\ne7652d3f6 Add WriteHDKeypath function and move *HDKeypath to util/bip32.{h,cpp} (Andrew Chow)\nc45415f73 Refactor keymetadata writing to a separate method (Andrew Chow)\n\nPull request description:\n\n  This PR allows for key origin data as defined by the descriptors document to be imported to the wallet when importing a descriptor using `importmulti`. This allows the `walletprocesspsbt` to include the BIP 32 derivation paths for keys that it is watching that are from a different HD wallet.\n\n  In order to make this easier to use, a new field `hdmasterkeyfingerprint` has been added to `getaddressinfo`. Additionally I have removed `hdmasterkeyid` as was planned. I think that this API change is fine since it was going to be removed in 0.18 anyways. `CKeyMetadata` has also been extended to store key origin info to facilitate this.\n\nTree-SHA512: 9c7794f3c793da57e23c5abbdc3d58779ee9dea3d53168bb86c0643a4ad5a11a446264961e2f772f35eea645048cb60954ed58050002caee4e43cd9f51215097",
      "tree": {
        "sha": "29ff5489b7260281e1a3caeed80238e77a30c40a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29ff5489b7260281e1a3caeed80238e77a30c40a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAlxl9aAACgkQ0wARbhyH\nWj0NzRAAl4qpS7NJyhWCjefpfbJkl1zMpUIvQEQuq8/rimW6bK//xKgbLkHY8Q8O\npj+asebEHaMMYDN6v4KfRV+aKFYfH74D9FjQWhr5w2w3r6jyHIBdmJeNWbIz6+C+\ngiD/2YObo3ThaJ7EVbZpFlUKqFRie60sIhhpUyf5laxo43cegwWSgIZLrJ5C/cRx\nY9q62Lnvym9D0N7DibC/S2S4QPDDHtOaFlPQ/C7+895KDUS9EF+in0qXCGy+OR2T\nNdqPSL4yGGKcOmjGTY+CAiffALo6VqF0kb7JgtWyGHG8hBIIxMJmJsTBbGBeMfXu\nd8xGDDDhneJ5x2oC3pYbjx2y17SGVUzI4tl3q8is5Y6CIM5fcb4XHZQ9AjBAGTuS\niJpLC0/A6lmbjtIA5r5PfFECqQmwKxSKissf9lQf/8mk5N2Toy0P30xvhtV6jwPO\neP+8UZ2Mvfa5CZ2UhwNP3WL7rpPdtd1Yon2I3CY3P8+mwWy9/thVLWOpYP1Ro4zz\nntBJgIw7tECJNpQs8yeoY9kZVxuxFf9+FCxAK4vrC5xckmZ644BO5dDcqcS7INz+\nnH40mDiHpdzn1xXhok0fLebp8HKiQQTjThZnRjr6QgESIfM7X6R2mGTwDrAx7nG5\ngVuRGcxpcMKKO9cbciK760lGdOQr0CoU8UQFnjeU2ooaaO87a0A=\n=QSCq\n-----END PGP SIGNATURE-----",
        "payload": "tree 29ff5489b7260281e1a3caeed80238e77a30c40a\nparent 33480c6366583736ceb641d077733b867730e941\nparent cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8\nauthor MeshCollider <dobsonsa68@gmail.com> 1550185852 +1300\ncommitter MeshCollider <dobsonsa68@gmail.com> 1550185888 +1300\n\nMerge #14021: Import key origin data through descriptors in importmulti\n\ncb3511b9d Add release notes for importing key origin info change (Andrew Chow)\n4c75a69f3 Test importing descriptors with key origin information (Andrew Chow)\n02d6586d7 Import KeyOriginData when importing descriptors (Andrew Chow)\n3d235dff5 Implement a function to add KeyOriginInfo to a wallet (Andrew Chow)\neab63bc26 Store key origin info in key metadata (Andrew Chow)\n345bff601 Remove hdmasterkeyid (Andrew Chow)\nbac8c676a Add a method to CWallet to write just CKeyMetadata (Andrew Chow)\ne7652d3f6 Add WriteHDKeypath function and move *HDKeypath to util/bip32.{h,cpp} (Andrew Chow)\nc45415f73 Refactor keymetadata writing to a separate method (Andrew Chow)\n\nPull request description:\n\n  This PR allows for key origin data as defined by the descriptors document to be imported to the wallet when importing a descriptor using `importmulti`. This allows the `walletprocesspsbt` to include the BIP 32 derivation paths for keys that it is watching that are from a different HD wallet.\n\n  In order to make this easier to use, a new field `hdmasterkeyfingerprint` has been added to `getaddressinfo`. Additionally I have removed `hdmasterkeyid` as was planned. I think that this API change is fine since it was going to be removed in 0.18 anyways. `CKeyMetadata` has also been extended to store key origin info to facilitate this.\n\nTree-SHA512: 9c7794f3c793da57e23c5abbdc3d58779ee9dea3d53168bb86c0643a4ad5a11a446264961e2f772f35eea645048cb60954ed58050002caee4e43cd9f51215097\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33480c6366583736ceb641d077733b867730e941",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33480c6366583736ceb641d077733b867730e941",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33480c6366583736ceb641d077733b867730e941"
      },
      {
        "sha": "cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb3511b9d5f3d8a86e090ebed5a4aeaf758430b8"
      }
    ],
    "stats": {
      "total": 394,
      "additions": 307,
      "deletions": 87
    },
    "files": [
      {
        "sha": "4797a95bdb8cd9cda7f853ce405980ce359f9720",
        "filename": "doc/release-notes-14021.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/doc/release-notes-14021.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/doc/release-notes-14021.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14021.md?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -0,0 +1,11 @@\n+Miscellaneous RPC Changes\n+-------------------------\n+- Descriptors with key origin information imported through `importmulti` will have their key origin information stored in the wallet for use with creating PSBTs.\n+- If `bip32derivs` of both `walletprocesspsbt` and `walletcreatefundedpsbt` is set to true but the key metadata for a public key has not been updated yet, then that key will have a derivation path as if it were just an independent key (i.e. no derivation path and its master fingerprint is itself)\n+\n+Miscellaneous Wallet changes\n+----------------------------\n+\n+- The key metadata will need to be upgraded the first time that the HD seed is available.\n+For unencrypted wallets this will occur on wallet loading.\n+For encrypted wallets this will occur the first time the wallet is unlocked."
      },
      {
        "sha": "e3f5734c0b8b6e1f72b8c726d9371f6ae82774eb",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -196,6 +196,7 @@ BITCOIN_CORE_H = \\\n   txmempool.h \\\n   ui_interface.h \\\n   undo.h \\\n+  util/bip32.h \\\n   util/bytevectorhash.h \\\n   util/system.h \\\n   util/memory.h \\\n@@ -456,6 +457,7 @@ libbitcoin_util_a_SOURCES = \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\\n+  util/bip32.cpp \\\n   util/bytevectorhash.cpp \\\n   util/system.cpp \\\n   util/moneystr.cpp \\"
      },
      {
        "sha": "4d8a1b87fc5e6bab1767214db7f5f0b1c95c4ed6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -26,6 +26,7 @@\n #include <script/sign.h>\n #include <script/standard.h>\n #include <uint256.h>\n+#include <util/bip32.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <validationinterface.h>"
      },
      {
        "sha": "532a8028a2895049fd5610ae4d16d4dee9f816ed",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -10,6 +10,7 @@\n #include <script/standard.h>\n \n #include <span.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n \n@@ -25,16 +26,6 @@ namespace {\n \n typedef std::vector<uint32_t> KeyPath;\n \n-std::string FormatKeyPath(const KeyPath& path)\n-{\n-    std::string ret;\n-    for (auto i : path) {\n-        ret += strprintf(\"/%i\", (i << 1) >> 1);\n-        if (i >> 31) ret += '\\'';\n-    }\n-    return ret;\n-}\n-\n /** Interface for public key objects in descriptors. */\n struct PubkeyProvider\n {\n@@ -63,7 +54,7 @@ class OriginPubkeyProvider final : public PubkeyProvider\n \n     std::string OriginString() const\n     {\n-        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatKeyPath(m_origin.path);\n+        return HexStr(std::begin(m_origin.fingerprint), std::end(m_origin.fingerprint)) + FormatHDKeypath(m_origin.path);\n     }\n \n public:\n@@ -184,7 +175,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n     std::string ToString() const override\n     {\n-        std::string ret = EncodeExtPubKey(m_extkey) + FormatKeyPath(m_path);\n+        std::string ret = EncodeExtPubKey(m_extkey) + FormatHDKeypath(m_path);\n         if (IsRange()) {\n             ret += \"/*\";\n             if (m_derive == DeriveType::HARDENED) ret += '\\'';\n@@ -195,7 +186,7 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     {\n         CExtKey key;\n         if (!GetExtKey(arg, key)) return false;\n-        out = EncodeExtKey(key) + FormatKeyPath(m_path);\n+        out = EncodeExtKey(key) + FormatHDKeypath(m_path);\n         if (IsRange()) {\n             out += \"/*\";\n             if (m_derive == DeriveType::HARDENED) out += '\\'';"
      },
      {
        "sha": "3e9a3b38c66fd4e20c158d944853f37afdd7ae5f",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -22,13 +22,27 @@ struct CMutableTransaction;\n \n struct KeyOriginInfo\n {\n-    unsigned char fingerprint[4];\n+    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path\n     std::vector<uint32_t> path;\n \n     friend bool operator==(const KeyOriginInfo& a, const KeyOriginInfo& b)\n     {\n         return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n     }\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n+    {\n+        READWRITE(fingerprint);\n+        READWRITE(path);\n+    }\n+\n+    void clear()\n+    {\n+        memset(fingerprint, 0, 4);\n+        path.clear();\n+    }\n };\n \n /** An interface to be implemented by keystores that support signing. */"
      },
      {
        "sha": "6f176dd5ec30defcfcf4360d2f89b285d2a6d23e",
        "filename": "src/util/bip32.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/util/bip32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/util/bip32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.cpp?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <sstream>\n+#include <stdio.h>\n+#include <tinyformat.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+\n+\n+bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)\n+{\n+    std::stringstream ss(keypath_str);\n+    std::string item;\n+    bool first = true;\n+    while (std::getline(ss, item, '/')) {\n+        if (item.compare(\"m\") == 0) {\n+            if (first) {\n+                first = false;\n+                continue;\n+            }\n+            return false;\n+        }\n+        // Finds whether it is hardened\n+        uint32_t path = 0;\n+        size_t pos = item.find(\"'\");\n+        if (pos != std::string::npos) {\n+            // The hardened tick can only be in the last index of the string\n+            if (pos != item.size() - 1) {\n+                return false;\n+            }\n+            path |= 0x80000000;\n+            item = item.substr(0, item.size() - 1); // Drop the last character which is the hardened tick\n+        }\n+\n+        // Ensure this is only numbers\n+        if (item.find_first_not_of( \"0123456789\" ) != std::string::npos) {\n+            return false;\n+        }\n+        uint32_t number;\n+        if (!ParseUInt32(item, &number)) {\n+            return false;\n+        }\n+        path |= number;\n+\n+        keypath.push_back(path);\n+        first = false;\n+    }\n+    return true;\n+}\n+\n+std::string FormatHDKeypath(const std::vector<uint32_t>& path)\n+{\n+    std::string ret;\n+    for (auto i : path) {\n+        ret += strprintf(\"/%i\", (i << 1) >> 1);\n+        if (i >> 31) ret += '\\'';\n+    }\n+    return ret;\n+}\n+\n+std::string WriteHDKeypath(const std::vector<uint32_t>& keypath)\n+{\n+    return \"m\" + FormatHDKeypath(keypath);\n+}"
      },
      {
        "sha": "7e58b79f38ab73f9c4613fc0c25f15a154c6b7ad",
        "filename": "src/util/bip32.h",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/util/bip32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/util/bip32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.h?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_BIP32_H\n+#define BITCOIN_UTIL_BIP32_H\n+\n+#include <attributes.h>\n+#include <string>\n+#include <vector>\n+\n+/** Parse an HD keypaths like \"m/7/0'/2000\". */\n+NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n+\n+/** Write HD keypaths as strings */\n+std::string WriteHDKeypath(const std::vector<uint32_t>& keypath);\n+std::string FormatHDKeypath(const std::vector<uint32_t>& path);\n+\n+#endif // BITCOIN_UTIL_BIP32_H"
      },
      {
        "sha": "0acbb4f117fafaf0b0a99f196348f6032aec5282",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -546,47 +546,6 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n     return true;\n }\n \n-bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath)\n-{\n-    std::stringstream ss(keypath_str);\n-    std::string item;\n-    bool first = true;\n-    while (std::getline(ss, item, '/')) {\n-        if (item.compare(\"m\") == 0) {\n-            if (first) {\n-                first = false;\n-                continue;\n-            }\n-            return false;\n-        }\n-        // Finds whether it is hardened\n-        uint32_t path = 0;\n-        size_t pos = item.find(\"'\");\n-        if (pos != std::string::npos) {\n-            // The hardened tick can only be in the last index of the string\n-            if (pos != item.size() - 1) {\n-                return false;\n-            }\n-            path |= 0x80000000;\n-            item = item.substr(0, item.size() - 1); // Drop the last character which is the hardened tick\n-        }\n-\n-        // Ensure this is only numbers\n-        if (item.find_first_not_of( \"0123456789\" ) != std::string::npos) {\n-            return false;\n-        }\n-        uint32_t number;\n-        if (!ParseUInt32(item, &number)) {\n-            return false;\n-        }\n-        path |= number;\n-\n-        keypath.push_back(path);\n-        first = false;\n-    }\n-    return true;\n-}\n-\n void Downcase(std::string& str)\n {\n     std::transform(str.begin(), str.end(), str.begin(), [](char c){return ToLower(c);});"
      },
      {
        "sha": "cf770440941cbd528fa131194a0631c1d5148368",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -197,9 +197,6 @@ bool ConvertBits(const O& outfn, I it, I end) {\n     return true;\n }\n \n-/** Parse an HD keypaths like \"m/7/0'/2000\". */\n-NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n-\n /**\n  * Converts the given character to its lowercase equivalent.\n  * This function is locale independent. It only converts uppercase"
      },
      {
        "sha": "5ceba397041520a0f1263ee5ef613dc659b56908",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -13,6 +13,7 @@\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <validation.h>\n@@ -850,7 +851,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             } else {\n                 file << \"change=1\";\n             }\n-            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwallet->mapKeyMetadata[keyid].hdKeypath.size() > 0 ? \" hdkeypath=\"+pwallet->mapKeyMetadata[keyid].hdKeypath : \"\"));\n+            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwallet->mapKeyMetadata[keyid].has_key_origin ? \" hdkeypath=\"+WriteHDKeypath(pwallet->mapKeyMetadata[keyid].key_origin.path) : \"\"));\n         }\n     }\n     file << \"\\n\";\n@@ -887,6 +888,7 @@ struct ImportData\n     // Output data\n     std::set<CScript> import_scripts;\n     std::map<CKeyID, bool> used_keys; //!< Import these private keys if available (the value indicates whether if the key is required for solvability)\n+    std::map<CKeyID, KeyOriginInfo> key_origins;\n };\n \n enum class ScriptContext\n@@ -1157,7 +1159,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n     }\n \n     std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n-\n+    import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     for (size_t i = 0; i < priv_keys.size(); ++i) {\n         const auto& str = priv_keys[i].get_str();\n         CKey key = DecodeSecret(str);\n@@ -1260,6 +1262,11 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n+            const auto& key_orig_it = import_data.key_origins.find(id);\n+            if (key_orig_it != import_data.key_origins.end()) {\n+                pwallet->AddKeyOrigin(pubkey, key_orig_it->second);\n+            }\n+            pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n         }\n \n         for (const CScript& script : script_pub_keys) {"
      },
      {
        "sha": "9b303cf2398009fc4979c1151e78671cd995ecaf",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -27,6 +27,7 @@\n #include <script/sign.h>\n #include <shutdown.h>\n #include <timedata.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n #include <wallet/coincontrol.h>\n@@ -2418,7 +2419,6 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"unlocked_until\\\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"hdseedid\\\": \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n-            \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"       (string, optional) alias for hdseedid retained for backwards-compatibility. Will be removed in V0.18.\\n\"\n             \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n             \"}\\n\"\n                 },\n@@ -2456,7 +2456,6 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFeePerK()));\n     if (!seed_id.IsNull()) {\n         obj.pushKV(\"hdseedid\", seed_id.GetHex());\n-        obj.pushKV(\"hdmasterkeyid\", seed_id.GetHex());\n     }\n     obj.pushKV(\"private_keys_enabled\", !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     return obj;\n@@ -3684,7 +3683,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"      (string, optional) The Hash160 of the HD seed\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) alias for hdseedid maintained for backwards compatibility. Will be removed in V0.18.\\n\"\n+            \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingperint of the master key.\\n\"\n             \"  \\\"labels\\\"                      (object) Array of labels associated with the address.\\n\"\n             \"    [\\n\"\n             \"      { (json object of label data)\\n\"\n@@ -3747,10 +3746,10 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     }\n     if (meta) {\n         ret.pushKV(\"timestamp\", meta->nCreateTime);\n-        if (!meta->hdKeypath.empty()) {\n-            ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+        if (meta->has_key_origin) {\n+            ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n             ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n-            ret.pushKV(\"hdmasterkeyid\", meta->hd_seed_id.GetHex());\n+            ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint, meta->key_origin.fingerprint + 4));\n         }\n     }\n "
      },
      {
        "sha": "2a3149de465595532d7c0188bbb8c86eb887d5c9",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <key_io.h>\n #include <script/sign.h>\n+#include <util/bip32.h>\n #include <util/strencodings.h>\n #include <wallet/psbtwallet.h>\n #include <wallet/rpcwallet.h>"
      },
      {
        "sha": "4df4e0981e4994e4838babfd8ca7f172d442b7f2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 11,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -27,6 +27,7 @@\n #include <shutdown.h>\n #include <timedata.h>\n #include <txmempool.h>\n+#include <util/bip32.h>\n #include <util/moneystr.h>\n #include <wallet/fees.h>\n \n@@ -255,16 +256,25 @@ void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey\n         if (internal) {\n             chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             hdChain.nInternalChainCounter++;\n         }\n         else {\n             chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             hdChain.nExternalChainCounter++;\n         }\n     } while (HaveKey(childKey.key.GetPubKey().GetID()));\n     secret = childKey.key;\n     metadata.hd_seed_id = hdChain.seed_id;\n+    CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+    std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n+    metadata.has_key_origin = true;\n     // update the chain model in the database\n     if (!batch.WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n@@ -348,6 +358,47 @@ void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata\n     m_script_metadata[script_id] = meta;\n }\n \n+// Writes a keymetadata for a public key. overwrite specifies whether to overwrite an existing metadata for that key if there exists one.\n+bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n+{\n+    return WalletBatch(*database).WriteKeyMetadata(meta, pubkey, overwrite);\n+}\n+\n+void CWallet::UpgradeKeyMetadata()\n+{\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n@@ -446,8 +497,11 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool accept_no_key\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(_vMasterKey, accept_no_keys))\n+            if (CCryptoKeyStore::Unlock(_vMasterKey, accept_no_keys)) {\n+                // Now that we've unlocked, upgrade the key metadata\n+                UpgradeKeyMetadata();\n                 return true;\n+            }\n         }\n     }\n     return false;\n@@ -1407,6 +1461,7 @@ CPubKey CWallet::DeriveNewSeed(const CKey& key)\n \n     // set the hd keypath to \"s\" -> Seed, refers the seed to itself\n     metadata.hdKeypath     = \"s\";\n+    metadata.has_key_origin = false;\n     metadata.hd_seed_id = seed.GetID();\n \n     {\n@@ -4487,18 +4542,21 @@ bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n             meta = it->second;\n         }\n     }\n-    if (!meta.hdKeypath.empty()) {\n-        if (!ParseHDKeypath(meta.hdKeypath, info.path)) return false;\n-        // Get the proper master key id\n-        CKey key;\n-        GetKey(meta.hd_seed_id, key);\n-        CExtKey masterKey;\n-        masterKey.SetSeed(key.begin(), key.size());\n-        // Compute identifier\n-        CKeyID masterid = masterKey.key.GetPubKey().GetID();\n-        std::copy(masterid.begin(), masterid.begin() + 4, info.fingerprint);\n+    if (meta.has_key_origin) {\n+        std::copy(meta.key_origin.fingerprint, meta.key_origin.fingerprint + 4, info.fingerprint);\n+        info.path = meta.key_origin.path;\n     } else { // Single pubkeys get the master fingerprint of themselves\n         std::copy(keyID.begin(), keyID.begin() + 4, info.fingerprint);\n     }\n     return true;\n }\n+\n+bool CWallet::AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info)\n+{\n+    LOCK(cs_wallet);\n+    std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n+    mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n+    mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n+    mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n+    return WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n+}"
      },
      {
        "sha": "3c5e475bd91f59e1327abcb14e038765bda0e8b7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -135,6 +135,9 @@ enum WalletFlags : uint64_t {\n     // wallet flags in the upper section (> 1 << 31) will lead to not opening the wallet if flag is unknown\n     // unknown wallet flags in the lower section <= (1 << 31) will be tolerated\n \n+    // Indicates that the metadata has already been upgraded to contain key origins\n+    WALLET_FLAG_KEY_ORIGIN_METADATA = (1ULL << 1),\n+\n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n \n@@ -151,7 +154,7 @@ enum WalletFlags : uint64_t {\n     WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n };\n \n-static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET;\n+static constexpr uint64_t g_known_wallet_flags = WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET | WALLET_FLAG_KEY_ORIGIN_METADATA;\n \n /** A key pool entry */\n class CKeyPool\n@@ -776,6 +779,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     // Map from Script ID to key metadata (for watch-only keys).\n     std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_wallet);\n \n+    bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, bool overwrite);\n+\n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID = 0;\n@@ -866,6 +871,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     //! Load metadata (used by LoadWallet)\n     void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    void UpgradeKeyMetadata() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -1212,6 +1219,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOrigin(const CPubKey& pubkey, const KeyOriginInfo& info);\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "2783f83fd6070aa186c1e82ae87b3fefed5f298c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -57,9 +57,14 @@ bool WalletBatch::EraseTx(uint256 hash)\n     return EraseIC(std::make_pair(std::string(\"tx\"), hash));\n }\n \n+bool WalletBatch::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite)\n+{\n+    return WriteIC(std::make_pair(std::string(\"keymeta\"), pubkey), meta, overwrite);\n+}\n+\n bool WalletBatch::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"keymeta\"), vchPubKey), keyMeta, false)) {\n+    if (!WriteKeyMetadata(keyMeta, vchPubKey, false)) {\n         return false;\n     }\n \n@@ -76,7 +81,7 @@ bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n                                 const std::vector<unsigned char>& vchCryptedSecret,\n                                 const CKeyMetadata &keyMeta)\n {\n-    if (!WriteIC(std::make_pair(std::string(\"keymeta\"), vchPubKey), keyMeta)) {\n+    if (!WriteKeyMetadata(keyMeta, vchPubKey, true)) {\n         return false;\n     }\n \n@@ -529,6 +534,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     if (wss.fAnyUnordered)\n         result = pwallet->ReorderTransactions();\n \n+    // Upgrade all of the wallet keymetadata to have the hd master key id\n+    // This operation is not atomic, but if it fails, updated entries are still backwards compatible with older software\n+    try {\n+        pwallet->UpgradeKeyMetadata();\n+    } catch (...) {\n+        result = DBErrors::CORRUPT;\n+    }\n+\n     return result;\n }\n "
      },
      {
        "sha": "0532a55ff583cbc7f9af5926321def7470bee71e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <amount.h>\n #include <primitives/transaction.h>\n+#include <script/sign.h>\n #include <wallet/db.h>\n #include <key.h>\n \n@@ -93,11 +94,14 @@ class CKeyMetadata\n public:\n     static const int VERSION_BASIC=1;\n     static const int VERSION_WITH_HDDATA=10;\n-    static const int CURRENT_VERSION=VERSION_WITH_HDDATA;\n+    static const int VERSION_WITH_KEY_ORIGIN = 12;\n+    static const int CURRENT_VERSION=VERSION_WITH_KEY_ORIGIN;\n     int nVersion;\n     int64_t nCreateTime; // 0 means unknown\n-    std::string hdKeypath; //optional HD/bip32 keypath\n+    std::string hdKeypath; //optional HD/bip32 keypath. Still used to determine whether a key is a seed. Also kept for backwards compatibility\n     CKeyID hd_seed_id; //id of the HD seed used to derive this key\n+    KeyOriginInfo key_origin; // Key origin info with path and fingerprint\n+    bool has_key_origin = false; //< Whether the key_origin is useful\n \n     CKeyMetadata()\n     {\n@@ -120,6 +124,11 @@ class CKeyMetadata\n             READWRITE(hdKeypath);\n             READWRITE(hd_seed_id);\n         }\n+        if (this->nVersion >= VERSION_WITH_KEY_ORIGIN)\n+        {\n+            READWRITE(key_origin);\n+            READWRITE(has_key_origin);\n+        }\n     }\n \n     void SetNull()\n@@ -128,6 +137,8 @@ class CKeyMetadata\n         nCreateTime = 0;\n         hdKeypath.clear();\n         hd_seed_id.SetNull();\n+        key_origin.clear();\n+        has_key_origin = false;\n     }\n };\n \n@@ -177,6 +188,7 @@ class WalletBatch\n     bool WriteTx(const CWalletTx& wtx);\n     bool EraseTx(uint256 hash);\n \n+    bool WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey, const bool overwrite);\n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n     bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n     bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);"
      },
      {
        "sha": "61245e5104e8184712adefa8a59bd89486183c61",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -27,7 +27,6 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         # Make sure we use hd, keep masterkeyid\n         masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n-        assert_equal(masterkeyid, self.nodes[1].getwalletinfo()['hdmasterkeyid'])\n         assert_equal(len(masterkeyid), 40)\n \n         # create an internal key\n@@ -53,7 +52,6 @@ def run_test(self):\n             hd_info = self.nodes[1].getaddressinfo(hd_add)\n             assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdseedid\"], masterkeyid)\n-            assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n             self.nodes[0].generate(1)\n         self.nodes[0].sendtoaddress(non_hd_add, 1)\n@@ -83,7 +81,6 @@ def run_test(self):\n             hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info_2[\"hdseedid\"], masterkeyid)\n-            assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()"
      },
      {
        "sha": "ee59ef0966244ac5870ee8b81712a968a31d614b",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -626,5 +626,70 @@ def run_test(self):\n                      iswatchonly=False)\n \n \n+        # Import pubkeys with key origin info\n+        self.log.info(\"Addresses should have hd keypath and master key id after import with key origin\")\n+        pub_addr = self.nodes[1].getnewaddress()\n+        pub_addr = self.nodes[1].getnewaddress()\n+        info = self.nodes[1].getaddressinfo(pub_addr)\n+        pub = info['pubkey']\n+        pub_keypath = info['hdkeypath']\n+        pub_fpr = info['hdmasterfingerprint']\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'desc' : \"wpkh([\" + pub_fpr + pub_keypath[1:] +\"]\" + pub + \")\",\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        pub_import_info = self.nodes[0].getaddressinfo(pub_addr)\n+        assert_equal(pub_import_info['hdmasterfingerprint'], pub_fpr)\n+        assert_equal(pub_import_info['pubkey'], pub)\n+        assert_equal(pub_import_info['hdkeypath'], pub_keypath)\n+\n+        # Import privkeys with key origin info\n+        priv_addr = self.nodes[1].getnewaddress()\n+        info = self.nodes[1].getaddressinfo(priv_addr)\n+        priv = self.nodes[1].dumpprivkey(priv_addr)\n+        priv_keypath = info['hdkeypath']\n+        priv_fpr = info['hdmasterfingerprint']\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'desc' : \"wpkh([\" + priv_fpr + priv_keypath[1:] + \"]\" + priv + \")\",\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        priv_import_info = self.nodes[0].getaddressinfo(priv_addr)\n+        assert_equal(priv_import_info['hdmasterfingerprint'], priv_fpr)\n+        assert_equal(priv_import_info['hdkeypath'], priv_keypath)\n+\n+        # Make sure the key origin info are still there after a restart\n+        self.stop_nodes()\n+        self.start_nodes()\n+        import_info = self.nodes[0].getaddressinfo(pub_addr)\n+        assert_equal(import_info['hdmasterfingerprint'], pub_fpr)\n+        assert_equal(import_info['hdkeypath'], pub_keypath)\n+        import_info = self.nodes[0].getaddressinfo(priv_addr)\n+        assert_equal(import_info['hdmasterfingerprint'], priv_fpr)\n+        assert_equal(import_info['hdkeypath'], priv_keypath)\n+\n+        # Check legacy import does not import key origin info\n+        self.log.info(\"Legacy imports don't have key origin info\")\n+        pub_addr = self.nodes[1].getnewaddress()\n+        info = self.nodes[1].getaddressinfo(pub_addr)\n+        pub = info['pubkey']\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'scriptPubKey': {'address': pub_addr},\n+                'pubkeys': [pub],\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        pub_import_info = self.nodes[0].getaddressinfo(pub_addr)\n+        assert_equal(pub_import_info['pubkey'], pub)\n+        assert 'hdmasterfingerprint' not in pub_import_info\n+        assert 'hdkeypath' not in pub_import_info\n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      },
      {
        "sha": "11161962680841c00f4066b323352a896926f8ab",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "patch": "@@ -21,7 +21,6 @@ def run_test(self):\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n-        assert_equal(wallet_info_old['hdseedid'], wallet_info_old['hdmasterkeyid'])\n         assert(addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid'])\n \n         # Encrypt wallet and wait to terminate\n@@ -30,7 +29,6 @@ def run_test(self):\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n-        assert_equal(wallet_info['hdseedid'], wallet_info['hdmasterkeyid'])\n         assert(addr_before_encrypting_data['hdseedid'] != wallet_info['hdseedid'])\n         assert(addr_data['hdseedid'] == wallet_info['hdseedid'])\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)"
      }
    ]
  },
  {
    "sha": "99cccb900beb4a32c0ad31a7d8b7d1461339f677",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWNjY2I5MDBiZWI0YTMyYzBhZDMxYTdkOGI3ZDE0NjEzMzlmNjc3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:43:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:14:00Z"
      },
      "message": "Add a method to add a pubkey to the keypool\n\nIntroduces AddKeypoolPubkey in order to add a pubkey to the keypool",
      "tree": {
        "sha": "fa851e6dfdc33e905d5c1838e36dcb8b2647f689",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa851e6dfdc33e905d5c1838e36dcb8b2647f689"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99cccb900beb4a32c0ad31a7d8b7d1461339f677",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99cccb900beb4a32c0ad31a7d8b7d1461339f677",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99cccb900beb4a32c0ad31a7d8b7d1461339f677",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99cccb900beb4a32c0ad31a7d8b7d1461339f677/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 26,
      "deletions": 13
    },
    "files": [
      {
        "sha": "186c136eebad3ebb76e1dd710dbdaba08b0f65a9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 13,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99cccb900beb4a32c0ad31a7d8b7d1461339f677/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99cccb900beb4a32c0ad31a7d8b7d1461339f677/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=99cccb900beb4a32c0ad31a7d8b7d1461339f677",
        "patch": "@@ -3443,20 +3443,8 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n                 internal = true;\n             }\n \n-            assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n-            int64_t index = ++m_max_keypool_index;\n-\n             CPubKey pubkey(GenerateNewKey(batch, internal));\n-            if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n-                throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n-            }\n-\n-            if (internal) {\n-                setInternalKeyPool.insert(index);\n-            } else {\n-                setExternalKeyPool.insert(index);\n-            }\n-            m_pool_key_to_index[pubkey.GetID()] = index;\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n         }\n         if (missingInternal + missingExternal > 0) {\n             WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n@@ -3466,6 +3454,29 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return true;\n }\n \n+void CWallet::AddKeypoolPubkey(const CPubKey& pubkey, const bool internal)\n+{\n+    WalletBatch batch(*database);\n+    AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+void CWallet::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)\n+{\n+    LOCK(cs_wallet);\n+    assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n+    int64_t index = ++m_max_keypool_index;\n+    if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n+        throw std::runtime_error(std::string(__func__) + \": writing imported pubkey failed\");\n+    }\n+    if (internal) {\n+        setInternalKeyPool.insert(index);\n+    } else {\n+        setExternalKeyPool.insert(index);\n+    }\n+    m_pool_key_to_index[pubkey.GetID()] = index;\n+}\n+\n bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n {\n     nIndex = -1;"
      },
      {
        "sha": "2a5d6caaf8c000c0f3bc079e513a93a6616cf767",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99cccb900beb4a32c0ad31a7d8b7d1461339f677/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99cccb900beb4a32c0ad31a7d8b7d1461339f677/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=99cccb900beb4a32c0ad31a7d8b7d1461339f677",
        "patch": "@@ -1001,6 +1001,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n+    void AddKeypoolPubkey(const CPubKey& pubkey, const bool internal);\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n \n     /**\n      * Reserves a key from the keypool and sets nIndex to its index"
      }
    ]
  },
  {
    "sha": "9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjgxZmQxOWFjN2ZmOWYzNGNjMzJjYzIyMWYwNTdkOWMzY2Q3MjE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:44:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:14:00Z"
      },
      "message": "Fetch keys from keypool when private keys are disabled\n\nWhen private keys are disabled, still fetch keys from the keypool\nif the keypool has keys. Those keys come from importing them and\nadding them to the keypool.",
      "tree": {
        "sha": "d3cec592ffcc4e8991ff4962c2536b910f021859",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3cec592ffcc4e8991ff4962c2536b910f021859"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99cccb900beb4a32c0ad31a7d8b7d1461339f677",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99cccb900beb4a32c0ad31a7d8b7d1461339f677",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99cccb900beb4a32c0ad31a7d8b7d1461339f677"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 16,
      "deletions": 25
    },
    "files": [
      {
        "sha": "22ea59273859dc581a59dd342ff0e69c7f22b1a8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "patch": "@@ -173,18 +173,12 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    // Belt and suspenders check for disabled private keys\n-    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n-    }\n-\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->CanGetAddresses()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n     }\n \n-\n     // Parse the label first so we don't generate a key if there's an error\n     std::string label;\n     if (!request.params[0].isNull())\n@@ -240,11 +234,6 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    // Belt and suspenders check for disabled private keys\n-    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n-    }\n-\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->CanGetAddresses(true)) {\n@@ -2447,7 +2436,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n     obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n     CKeyID seed_id = pwallet->GetHDChain().seed_id;\n-    if (!seed_id.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n+    if (pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n         obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {"
      },
      {
        "sha": "d174e308f0ffb30c3ed7130d2bf12acbb74e0d02",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "patch": "@@ -2833,8 +2833,8 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 //  post-backup change.\n \n                 // Reserve a new key pair from key pool\n-                if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-                    strFailReason = _(\"Can't generate a change-address key. Private keys are disabled for this wallet.\");\n+                if (!CanGetAddresses(true)) {\n+                    strFailReason = _(\"Can't generate a change-address key. No keys in the internal keypool and can't generate any keys.\");\n                     return false;\n                 }\n                 CPubKey vchPubKey;\n@@ -3487,7 +3487,8 @@ bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         if (!IsLocked())\n             TopUpKeyPool();\n \n-        bool fReturningInternal = IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT) && fRequestedInternal;\n+        bool fReturningInternal = fRequestedInternal;\n+        fReturningInternal &= (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n         bool use_split_keypool = set_pre_split_keypool.empty();\n         std::set<int64_t>& setKeyPool = use_split_keypool ? (fReturningInternal ? setInternalKeyPool : setExternalKeyPool) : set_pre_split_keypool;\n \n@@ -3504,7 +3505,8 @@ bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         if (!batch.ReadPool(nIndex, keypool)) {\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         }\n-        if (!HaveKey(keypool.vchPubKey.GetID())) {\n+        CPubKey pk;\n+        if (!GetPubKey(keypool.vchPubKey.GetID(), pk)) {\n             throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         }\n         // If the key was pre-split keypool, we don't care about what type it is\n@@ -3558,7 +3560,7 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n     {\n         LOCK(cs_wallet);\n         int64_t nIndex;\n-        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             if (IsLocked()) return false;\n             WalletBatch batch(*database);\n             result = GenerateNewKey(batch, internal);"
      },
      {
        "sha": "7ec72b86491ff566f4061b280b6c2d6ca03d6790",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "patch": "@@ -31,8 +31,8 @@ def run_test(self):\n         self.log.info(\"Test disableprivatekeys creation.\")\n         self.nodes[0].createwallet(wallet_name='w1', disable_private_keys=True)\n         w1 = node.get_wallet_rpc('w1')\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w1.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w1.getrawchangeaddress)\n         w1.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n \n         self.log.info('Test that private keys cannot be imported')\n@@ -48,8 +48,8 @@ def run_test(self):\n         self.log.info(\"Test blank creation with private keys disabled.\")\n         self.nodes[0].createwallet(wallet_name='w2', disable_private_keys=True, blank=True)\n         w2 = node.get_wallet_rpc('w2')\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w2.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w2.getrawchangeaddress)\n         w2.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n \n         self.log.info(\"Test blank creation with private keys enabled.\")\n@@ -89,12 +89,12 @@ def run_test(self):\n         self.nodes[0].createwallet(wallet_name='w5', disable_private_keys=True, blank=True)\n         w5 = node.get_wallet_rpc('w5')\n         assert_equal(w5.getwalletinfo()['keypoolsize'], 0)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getrawchangeaddress)\n         # Encrypt the wallet\n         w5.encryptwallet('pass')\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getrawchangeaddress)\n \n if __name__ == '__main__':\n     CreateWalletTest().main()"
      }
    ]
  },
  {
    "sha": "513719c5f860a5758411331d5ced0bb50c5c5054",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTM3MTljNWY4NjBhNTc1ODQxMTMzMWQ1Y2VkMGJiNTBjNWM1MDU0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:47:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:14:42Z"
      },
      "message": "Add option to importmulti add an imported pubkey to the keypool\n\nAdds a new option to importmulti where the pubkeys specified in the import\nobject can be added to the keypool. This only works if the wallet has\nprivate keys disabled.",
      "tree": {
        "sha": "e7d8784a77a4d60e296f8df11b6424946175d17d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7d8784a77a4d60e296f8df11b6424946175d17d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/513719c5f860a5758411331d5ced0bb50c5c5054",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513719c5f860a5758411331d5ced0bb50c5c5054",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/513719c5f860a5758411331d5ced0bb50c5c5054",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513719c5f860a5758411331d5ced0bb50c5c5054/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "30555886f7d9de36f7a407914fc4c67352068994",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/513719c5f860a5758411331d5ced0bb50c5c5054/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/513719c5f860a5758411331d5ced0bb50c5c5054/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=513719c5f860a5758411331d5ced0bb50c5c5054",
        "patch": "@@ -1207,6 +1207,12 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n         }\n         const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+        const bool add_keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+        // Add to keypool only works with privkeys disabled\n+        if (add_keypool && !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Keys can only be imported to the keypool when private keys are disabled\");\n+        }\n \n         ImportData import_data;\n         std::map<CKeyID, CPubKey> pubkey_map;\n@@ -1267,6 +1273,11 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 pwallet->AddKeyOrigin(pubkey, key_orig_it->second);\n             }\n             pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n+\n+            // Add to keypool only works with pubkeys\n+            if (add_keypool) {\n+                pwallet->AddKeypoolPubkey(pubkey, internal);\n+            }\n         }\n \n         for (const CScript& script : script_pub_keys) {"
      }
    ]
  },
  {
    "sha": "9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTE1NTFiOWNlZGEwMDU2ZmNiYzc4YmY1ODI3YmZmMWJmYzVkNTFi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T15:14:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:33:29Z"
      },
      "message": "Test pubkey import to keypool",
      "tree": {
        "sha": "a26d3fc44d077fffef04c41c89bddd82b90b5afe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a26d3fc44d077fffef04c41c89bddd82b90b5afe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "513719c5f860a5758411331d5ced0bb50c5c5054",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513719c5f860a5758411331d5ced0bb50c5c5054",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/513719c5f860a5758411331d5ced0bb50c5c5054"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 87,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3f77c5e5fda0432b616cf44e966ee6b6c13300ae",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 87,
        "deletions": 1,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
        "patch": "@@ -625,7 +625,6 @@ def run_test(self):\n                      ismine=False,\n                      iswatchonly=False)\n \n-\n         # Import pubkeys with key origin info\n         self.log.info(\"Addresses should have hd keypath and master key id after import with key origin\")\n         pub_addr = self.nodes[1].getnewaddress()\n@@ -691,5 +690,92 @@ def run_test(self):\n         assert 'hdmasterfingerprint' not in pub_import_info\n         assert 'hdkeypath' not in pub_import_info\n \n+        # Import some public keys to the keypool of a no privkey wallet\n+        self.log.info(\"Adding pubkey to keypool of disableprivkey wallet\")\n+        self.nodes[1].createwallet(wallet_name=\"noprivkeys\", disable_private_keys=True)\n+        wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")\n+\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh(' + pub1 + ')',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                'desc': 'wpkh(' + pub2 + ')',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        assert result[1]['success']\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 2)\n+        newaddr1 = wrpc.getnewaddress()\n+        assert_equal(addr1, newaddr1)\n+        newaddr2 = wrpc.getnewaddress()\n+        assert_equal(addr2, newaddr2)\n+\n+        # Import some public keys to the internal keypool of a no privkey wallet\n+        self.log.info(\"Adding pubkey to internal keypool of disableprivkey wallet\")\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh(' + pub1 + ')',\n+                'keypool': True,\n+                'internal': True,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                'desc': 'wpkh(' + pub2 + ')',\n+                'keypool': True,\n+                'internal': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        assert result[1]['success']\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize_hd_internal\"], 2)\n+        newaddr1 = wrpc.getrawchangeaddress()\n+        assert_equal(addr1, newaddr1)\n+        newaddr2 = wrpc.getrawchangeaddress()\n+        assert_equal(addr2, newaddr2)\n+\n+        # Import a multisig and make sure the keys don't go into the keypool\n+        self.log.info('Imported scripts with pubkeys shoud not have their pubkeys go into the keypool')\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wsh(multi(2,' + pub1 + ',' + pub2 + '))',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 0)\n+\n+        # Cannot import those pubkeys to keypool of wallet with privkeys\n+        self.log.info(\"Pubkeys cannot be added to the keypool of a wallet with private keys\")\n+        wrpc = self.nodes[1].get_wallet_rpc(\"\")\n+        assert wrpc.getwalletinfo()['private_keys_enabled']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh(' + pub1 + ')',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], \"Keys can only be imported to the keypool when private keys are disabled\")\n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      }
    ]
  },
  {
    "sha": "f4b00b70e811d3772589ab3c64d7658f4dbdab69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGIwMGI3MGU4MTFkMzc3MjU4OWFiM2M2NGQ3NjU4ZjRkYmRhYjY5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-12-16T19:08:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:34:03Z"
      },
      "message": "Import public keys in order\n\nDo public key imports in the order that they are specified in the import\nor in the descriptor range.",
      "tree": {
        "sha": "81a3f474331aff4d7bbf1c65567582e92f3fc069",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a3f474331aff4d7bbf1c65567582e92f3fc069"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4b00b70e811d3772589ab3c64d7658f4dbdab69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b00b70e811d3772589ab3c64d7658f4dbdab69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b00b70e811d3772589ab3c64d7658f4dbdab69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b00b70e811d3772589ab3c64d7658f4dbdab69/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 62,
      "deletions": 29
    },
    "files": [
      {
        "sha": "930274f8a177a954e327d11a52dfc13f8bcca488",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 29,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b00b70e811d3772589ab3c64d7658f4dbdab69/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b00b70e811d3772589ab3c64d7658f4dbdab69/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f4b00b70e811d3772589ab3c64d7658f4dbdab69",
        "patch": "@@ -967,7 +967,7 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n     }\n }\n \n-static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data)\n+static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n {\n     UniValue warnings(UniValue::VARR);\n \n@@ -1038,6 +1038,7 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" is not a valid public key\");\n         }\n         pubkey_map.emplace(pubkey.GetID(), pubkey);\n+        ordered_pubkeys.push_back(pubkey.GetID());\n     }\n     for (size_t i = 0; i < keys.size(); ++i) {\n         const auto& str = keys[i].get_str();\n@@ -1110,7 +1111,7 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n     return warnings;\n }\n \n-static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data)\n+static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n {\n     UniValue warnings(UniValue::VARR);\n \n@@ -1144,22 +1145,25 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n \n     const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n \n-    FlatSigningProvider out_keys;\n-\n     // Expand all descriptors to get public keys and scripts.\n     // TODO: get private keys from descriptors too\n     for (int i = range_start; i <= range_end; ++i) {\n+        FlatSigningProvider out_keys;\n         std::vector<CScript> scripts_temp;\n         parsed_desc->Expand(i, keys, scripts_temp, out_keys);\n         std::copy(scripts_temp.begin(), scripts_temp.end(), std::inserter(script_pub_keys, script_pub_keys.end()));\n-    }\n+        for (const auto& key_pair : out_keys.pubkeys) {\n+            ordered_pubkeys.push_back(key_pair.first);\n+        }\n \n-    for (const auto& x : out_keys.scripts) {\n-        import_data.import_scripts.emplace(x.second);\n+        for (const auto& x : out_keys.scripts) {\n+            import_data.import_scripts.emplace(x.second);\n+        }\n+\n+        std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n+        import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     }\n \n-    std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n-    import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     for (size_t i = 0; i < priv_keys.size(); ++i) {\n         const auto& str = priv_keys[i].get_str();\n         CKey key = DecodeSecret(str);\n@@ -1218,14 +1222,15 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         std::map<CKeyID, CPubKey> pubkey_map;\n         std::map<CKeyID, CKey> privkey_map;\n         std::set<CScript> script_pub_keys;\n+        std::vector<CKeyID> ordered_pubkeys;\n         bool have_solving_data;\n \n         if (data.exists(\"scriptPubKey\") && data.exists(\"desc\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Both a descriptor and a scriptPubKey should not be provided.\");\n         } else if (data.exists(\"scriptPubKey\")) {\n-            warnings = ProcessImportLegacy(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data);\n+            warnings = ProcessImportLegacy(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data, ordered_pubkeys);\n         } else if (data.exists(\"desc\")) {\n-            warnings = ProcessImportDescriptor(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data);\n+            warnings = ProcessImportDescriptor(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data, ordered_pubkeys);\n         } else {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Either a descriptor or scriptPubKey must be provided.\");\n         }\n@@ -1247,25 +1252,28 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         for (const auto& entry : import_data.import_scripts) {\n             if (!pwallet->HaveCScript(CScriptID(entry)) && !pwallet->AddCScript(entry)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n+             }\n+         }\n+         for (const auto& entry : privkey_map) {\n+             const CKey& key = entry.second;\n+             CPubKey pubkey = key.GetPubKey();\n+             const CKeyID& id = entry.first;\n+             assert(key.VerifyPubKey(pubkey));\n+             pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n+             // If the private key is not present in the wallet, insert it.\n+             if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKey(key, pubkey)) {\n+                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+             }\n+             pwallet->UpdateTimeFirstKey(timestamp);\n+         }\n+        for (const CKeyID& id : ordered_pubkeys) {\n+            auto entry = pubkey_map.find(id);\n+            if (entry == pubkey_map.end()) {\n+                continue;\n             }\n-        }\n-        for (const auto& entry : privkey_map) {\n-            const CKey& key = entry.second;\n-            CPubKey pubkey = key.GetPubKey();\n-            const CKeyID& id = entry.first;\n-            assert(key.VerifyPubKey(pubkey));\n-            pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n-            // If the private key is not present in the wallet, insert it.\n-            if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKey(key, pubkey)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-            }\n-            pwallet->UpdateTimeFirstKey(timestamp);\n-        }\n-        for (const auto& entry : pubkey_map) {\n-            const CPubKey& pubkey = entry.second;\n-            const CKeyID& id = entry.first;\n-            CPubKey temp;\n-            if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n+             const CPubKey& pubkey = entry->second;\n+             CPubKey temp;\n+             if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n             const auto& key_orig_it = import_data.key_origins.find(id);"
      },
      {
        "sha": "46e3ab77c85dd2f5c61abdb4c52ae60a38521fd9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b00b70e811d3772589ab3c64d7658f4dbdab69/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b00b70e811d3772589ab3c64d7658f4dbdab69/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=f4b00b70e811d3772589ab3c64d7658f4dbdab69",
        "patch": "@@ -777,5 +777,30 @@ def run_test(self):\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], \"Keys can only be imported to the keypool when private keys are disabled\")\n \n+        # Make sure ranged imports import keys in order\n+        self.log.info('Key ranges should be imported in order')\n+        wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 0)\n+        assert_equal(wrpc.getwalletinfo()[\"private_keys_enabled\"], False)\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh([80002067/0h/0h]' + xpub + '/*)',\n+                'keypool': True,\n+                'timestamp': 'now',\n+                'range' : {'start': 0, 'end': 4}\n+            }]\n+        )\n+        for i in range(0, 5):\n+            addr = wrpc.getnewaddress('', 'bech32')\n+            assert_equal(addr, addresses[i])\n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      }
    ]
  },
  {
    "sha": "c576979b78b541bf3b4a7cbeee989b55d268e3e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTc2OTc5Yjc4YjU0MWJmM2I0YTdjYmVlZTk4OWI1NWQyNjhlM2Ux",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-14T23:51:38Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-14T23:51:54Z"
      },
      "message": "Merge #14075: Import watch only pubkeys to the keypool if private keys are disabled\n\nf4b00b70e Import public keys in order (Andrew Chow)\n9e1551b9c Test pubkey import to keypool (Andrew Chow)\n513719c5f Add option to importmulti add an imported pubkey to the keypool (Andrew Chow)\n9b81fd19a Fetch keys from keypool when private keys are disabled (Andrew Chow)\n99cccb900 Add a method to add a pubkey to the keypool (Andrew Chow)\n\nPull request description:\n\n  If the wallet has private keys disabled, allow importing public keys into the keypool. A `keypool` option has been added to `importmulti` in order to signal that the keys should be added to the keypool.\n\nTree-SHA512: e88ea7bf726c13031aa739389a0c2662e6b22a4f9a4dc45b042418c692a950d98f170e0db80eb59e9c9063cda8765eaa85b2927d1790b9625744f7a87bad5fc8",
      "tree": {
        "sha": "81a3f474331aff4d7bbf1c65567582e92f3fc069",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a3f474331aff4d7bbf1c65567582e92f3fc069"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c576979b78b541bf3b4a7cbeee989b55d268e3e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAlxl/xoACgkQ0wARbhyH\nWj2loQ/9E/3CEaTFrG9P4RolCi5eNOuP+oiO8GoxoJE9o+W7J1MOwJeOKAA1UW2a\ngLZzExoD8fQskv5bEegu6hPtlzbSbG4nVbUFLcM+31fitMHfxyUizG87ZyXYoQjw\n5pQ4dhKTzqY4ZLCEDmvtQMwVhrX756WTionDgBDj3H9Or0rUhv5VuXKGU/VGivuE\n5Y1upV1laOf52TNQjjwMb+nOihAcOr3uYfeqCpjf+msRabJm+AoQRNVtDUVYcFzb\nMGf4PpMZ8ygaBd84f/uK6/ZCjgrzXJI+liI+pRZkXeVbrE6r1Yy2s1miL7FZ0H5l\n9fQ2Q/J1FgxZx3JlwlmgnUKUN5yKbZOZYmU3a+qfHJx9OKn3/DC8M94kEsJp5v7h\ntGBLj+l2BGfQZhwKHHBl9hLYzCzg1Ia6gBlc2b3wUD26Hvr8trg2TDwWZfNUUKba\nEncl8JTOjqh1KoMhOsH2iOaK0RvrrgaxYJa8M4aU+kshfIkB5a/BA6NR7iXMErOZ\n6+9lwtk8WcIVT+NCI7lsGDLNVPEHrRYADdVpoKwy0yFUtqKiHKR065/ocSE/yNZt\nDZn2Cof4/mbNaexHW18X8urELEI4wZuBMz5tVpf7BoAzkzCMnpnHUugHtBHb/jap\nO1A2UYDJLUtfMR4bkooFQeL/J4QvnURfSqJI061TcZOpY8l3R3c=\n=t659\n-----END PGP SIGNATURE-----",
        "payload": "tree 81a3f474331aff4d7bbf1c65567582e92f3fc069\nparent 8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5\nparent f4b00b70e811d3772589ab3c64d7658f4dbdab69\nauthor MeshCollider <dobsonsa68@gmail.com> 1550188298 +1300\ncommitter MeshCollider <dobsonsa68@gmail.com> 1550188314 +1300\n\nMerge #14075: Import watch only pubkeys to the keypool if private keys are disabled\n\nf4b00b70e Import public keys in order (Andrew Chow)\n9e1551b9c Test pubkey import to keypool (Andrew Chow)\n513719c5f Add option to importmulti add an imported pubkey to the keypool (Andrew Chow)\n9b81fd19a Fetch keys from keypool when private keys are disabled (Andrew Chow)\n99cccb900 Add a method to add a pubkey to the keypool (Andrew Chow)\n\nPull request description:\n\n  If the wallet has private keys disabled, allow importing public keys into the keypool. A `keypool` option has been added to `importmulti` in order to signal that the keys should be added to the keypool.\n\nTree-SHA512: e88ea7bf726c13031aa739389a0c2662e6b22a4f9a4dc45b042418c692a950d98f170e0db80eb59e9c9063cda8765eaa85b2927d1790b9625744f7a87bad5fc8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c576979b78b541bf3b4a7cbeee989b55d268e3e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c576979b78b541bf3b4a7cbeee989b55d268e3e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c576979b78b541bf3b4a7cbeee989b55d268e3e1/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5"
      },
      {
        "sha": "f4b00b70e811d3772589ab3c64d7658f4dbdab69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b00b70e811d3772589ab3c64d7658f4dbdab69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b00b70e811d3772589ab3c64d7658f4dbdab69"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 202,
      "deletions": 68
    },
    "files": [
      {
        "sha": "930274f8a177a954e327d11a52dfc13f8bcca488",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 29,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c576979b78b541bf3b4a7cbeee989b55d268e3e1/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c576979b78b541bf3b4a7cbeee989b55d268e3e1/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "patch": "@@ -967,7 +967,7 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n     }\n }\n \n-static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data)\n+static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n {\n     UniValue warnings(UniValue::VARR);\n \n@@ -1038,6 +1038,7 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" is not a valid public key\");\n         }\n         pubkey_map.emplace(pubkey.GetID(), pubkey);\n+        ordered_pubkeys.push_back(pubkey.GetID());\n     }\n     for (size_t i = 0; i < keys.size(); ++i) {\n         const auto& str = keys[i].get_str();\n@@ -1110,7 +1111,7 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n     return warnings;\n }\n \n-static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data)\n+static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n {\n     UniValue warnings(UniValue::VARR);\n \n@@ -1144,22 +1145,25 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n \n     const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n \n-    FlatSigningProvider out_keys;\n-\n     // Expand all descriptors to get public keys and scripts.\n     // TODO: get private keys from descriptors too\n     for (int i = range_start; i <= range_end; ++i) {\n+        FlatSigningProvider out_keys;\n         std::vector<CScript> scripts_temp;\n         parsed_desc->Expand(i, keys, scripts_temp, out_keys);\n         std::copy(scripts_temp.begin(), scripts_temp.end(), std::inserter(script_pub_keys, script_pub_keys.end()));\n-    }\n+        for (const auto& key_pair : out_keys.pubkeys) {\n+            ordered_pubkeys.push_back(key_pair.first);\n+        }\n+\n+        for (const auto& x : out_keys.scripts) {\n+            import_data.import_scripts.emplace(x.second);\n+        }\n \n-    for (const auto& x : out_keys.scripts) {\n-        import_data.import_scripts.emplace(x.second);\n+        std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n+        import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     }\n \n-    std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n-    import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     for (size_t i = 0; i < priv_keys.size(); ++i) {\n         const auto& str = priv_keys[i].get_str();\n         CKey key = DecodeSecret(str);\n@@ -1207,19 +1211,26 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n         }\n         const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+        const bool add_keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+        // Add to keypool only works with privkeys disabled\n+        if (add_keypool && !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Keys can only be imported to the keypool when private keys are disabled\");\n+        }\n \n         ImportData import_data;\n         std::map<CKeyID, CPubKey> pubkey_map;\n         std::map<CKeyID, CKey> privkey_map;\n         std::set<CScript> script_pub_keys;\n+        std::vector<CKeyID> ordered_pubkeys;\n         bool have_solving_data;\n \n         if (data.exists(\"scriptPubKey\") && data.exists(\"desc\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Both a descriptor and a scriptPubKey should not be provided.\");\n         } else if (data.exists(\"scriptPubKey\")) {\n-            warnings = ProcessImportLegacy(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data);\n+            warnings = ProcessImportLegacy(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data, ordered_pubkeys);\n         } else if (data.exists(\"desc\")) {\n-            warnings = ProcessImportDescriptor(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data);\n+            warnings = ProcessImportDescriptor(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data, ordered_pubkeys);\n         } else {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Either a descriptor or scriptPubKey must be provided.\");\n         }\n@@ -1241,32 +1252,40 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         for (const auto& entry : import_data.import_scripts) {\n             if (!pwallet->HaveCScript(CScriptID(entry)) && !pwallet->AddCScript(entry)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n+             }\n+         }\n+         for (const auto& entry : privkey_map) {\n+             const CKey& key = entry.second;\n+             CPubKey pubkey = key.GetPubKey();\n+             const CKeyID& id = entry.first;\n+             assert(key.VerifyPubKey(pubkey));\n+             pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n+             // If the private key is not present in the wallet, insert it.\n+             if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKey(key, pubkey)) {\n+                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+             }\n+             pwallet->UpdateTimeFirstKey(timestamp);\n+         }\n+        for (const CKeyID& id : ordered_pubkeys) {\n+            auto entry = pubkey_map.find(id);\n+            if (entry == pubkey_map.end()) {\n+                continue;\n             }\n-        }\n-        for (const auto& entry : privkey_map) {\n-            const CKey& key = entry.second;\n-            CPubKey pubkey = key.GetPubKey();\n-            const CKeyID& id = entry.first;\n-            assert(key.VerifyPubKey(pubkey));\n-            pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n-            // If the private key is not present in the wallet, insert it.\n-            if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKey(key, pubkey)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-            }\n-            pwallet->UpdateTimeFirstKey(timestamp);\n-        }\n-        for (const auto& entry : pubkey_map) {\n-            const CPubKey& pubkey = entry.second;\n-            const CKeyID& id = entry.first;\n-            CPubKey temp;\n-            if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n+             const CPubKey& pubkey = entry->second;\n+             CPubKey temp;\n+             if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n             const auto& key_orig_it = import_data.key_origins.find(id);\n             if (key_orig_it != import_data.key_origins.end()) {\n                 pwallet->AddKeyOrigin(pubkey, key_orig_it->second);\n             }\n             pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n+\n+            // Add to keypool only works with pubkeys\n+            if (add_keypool) {\n+                pwallet->AddKeypoolPubkey(pubkey, internal);\n+            }\n         }\n \n         for (const CScript& script : script_pub_keys) {"
      },
      {
        "sha": "22ea59273859dc581a59dd342ff0e69c7f22b1a8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c576979b78b541bf3b4a7cbeee989b55d268e3e1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c576979b78b541bf3b4a7cbeee989b55d268e3e1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "patch": "@@ -173,18 +173,12 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    // Belt and suspenders check for disabled private keys\n-    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n-    }\n-\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->CanGetAddresses()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n     }\n \n-\n     // Parse the label first so we don't generate a key if there's an error\n     std::string label;\n     if (!request.params[0].isNull())\n@@ -240,11 +234,6 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    // Belt and suspenders check for disabled private keys\n-    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n-    }\n-\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->CanGetAddresses(true)) {\n@@ -2447,7 +2436,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n     obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n     CKeyID seed_id = pwallet->GetHDChain().seed_id;\n-    if (!seed_id.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n+    if (pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n         obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {"
      },
      {
        "sha": "d174e308f0ffb30c3ed7130d2bf12acbb74e0d02",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 18,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c576979b78b541bf3b4a7cbeee989b55d268e3e1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c576979b78b541bf3b4a7cbeee989b55d268e3e1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "patch": "@@ -2833,8 +2833,8 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 //  post-backup change.\n \n                 // Reserve a new key pair from key pool\n-                if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-                    strFailReason = _(\"Can't generate a change-address key. Private keys are disabled for this wallet.\");\n+                if (!CanGetAddresses(true)) {\n+                    strFailReason = _(\"Can't generate a change-address key. No keys in the internal keypool and can't generate any keys.\");\n                     return false;\n                 }\n                 CPubKey vchPubKey;\n@@ -3443,20 +3443,8 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n                 internal = true;\n             }\n \n-            assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n-            int64_t index = ++m_max_keypool_index;\n-\n             CPubKey pubkey(GenerateNewKey(batch, internal));\n-            if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n-                throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n-            }\n-\n-            if (internal) {\n-                setInternalKeyPool.insert(index);\n-            } else {\n-                setExternalKeyPool.insert(index);\n-            }\n-            m_pool_key_to_index[pubkey.GetID()] = index;\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n         }\n         if (missingInternal + missingExternal > 0) {\n             WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n@@ -3466,6 +3454,29 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return true;\n }\n \n+void CWallet::AddKeypoolPubkey(const CPubKey& pubkey, const bool internal)\n+{\n+    WalletBatch batch(*database);\n+    AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+void CWallet::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)\n+{\n+    LOCK(cs_wallet);\n+    assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n+    int64_t index = ++m_max_keypool_index;\n+    if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n+        throw std::runtime_error(std::string(__func__) + \": writing imported pubkey failed\");\n+    }\n+    if (internal) {\n+        setInternalKeyPool.insert(index);\n+    } else {\n+        setExternalKeyPool.insert(index);\n+    }\n+    m_pool_key_to_index[pubkey.GetID()] = index;\n+}\n+\n bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n {\n     nIndex = -1;\n@@ -3476,7 +3487,8 @@ bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         if (!IsLocked())\n             TopUpKeyPool();\n \n-        bool fReturningInternal = IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT) && fRequestedInternal;\n+        bool fReturningInternal = fRequestedInternal;\n+        fReturningInternal &= (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n         bool use_split_keypool = set_pre_split_keypool.empty();\n         std::set<int64_t>& setKeyPool = use_split_keypool ? (fReturningInternal ? setInternalKeyPool : setExternalKeyPool) : set_pre_split_keypool;\n \n@@ -3493,7 +3505,8 @@ bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         if (!batch.ReadPool(nIndex, keypool)) {\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         }\n-        if (!HaveKey(keypool.vchPubKey.GetID())) {\n+        CPubKey pk;\n+        if (!GetPubKey(keypool.vchPubKey.GetID(), pk)) {\n             throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         }\n         // If the key was pre-split keypool, we don't care about what type it is\n@@ -3547,7 +3560,7 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n     {\n         LOCK(cs_wallet);\n         int64_t nIndex;\n-        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             if (IsLocked()) return false;\n             WalletBatch batch(*database);\n             result = GenerateNewKey(batch, internal);"
      },
      {
        "sha": "2a5d6caaf8c000c0f3bc079e513a93a6616cf767",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c576979b78b541bf3b4a7cbeee989b55d268e3e1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c576979b78b541bf3b4a7cbeee989b55d268e3e1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "patch": "@@ -1001,6 +1001,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n+    void AddKeypoolPubkey(const CPubKey& pubkey, const bool internal);\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n \n     /**\n      * Reserves a key from the keypool and sets nIndex to its index"
      },
      {
        "sha": "7ec72b86491ff566f4061b280b6c2d6ca03d6790",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c576979b78b541bf3b4a7cbeee989b55d268e3e1/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c576979b78b541bf3b4a7cbeee989b55d268e3e1/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "patch": "@@ -31,8 +31,8 @@ def run_test(self):\n         self.log.info(\"Test disableprivatekeys creation.\")\n         self.nodes[0].createwallet(wallet_name='w1', disable_private_keys=True)\n         w1 = node.get_wallet_rpc('w1')\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w1.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w1.getrawchangeaddress)\n         w1.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n \n         self.log.info('Test that private keys cannot be imported')\n@@ -48,8 +48,8 @@ def run_test(self):\n         self.log.info(\"Test blank creation with private keys disabled.\")\n         self.nodes[0].createwallet(wallet_name='w2', disable_private_keys=True, blank=True)\n         w2 = node.get_wallet_rpc('w2')\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w2.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w2.getrawchangeaddress)\n         w2.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n \n         self.log.info(\"Test blank creation with private keys enabled.\")\n@@ -89,12 +89,12 @@ def run_test(self):\n         self.nodes[0].createwallet(wallet_name='w5', disable_private_keys=True, blank=True)\n         w5 = node.get_wallet_rpc('w5')\n         assert_equal(w5.getwalletinfo()['keypoolsize'], 0)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getrawchangeaddress)\n         # Encrypt the wallet\n         w5.encryptwallet('pass')\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getrawchangeaddress)\n \n if __name__ == '__main__':\n     CreateWalletTest().main()"
      },
      {
        "sha": "46e3ab77c85dd2f5c61abdb4c52ae60a38521fd9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 112,
        "deletions": 1,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c576979b78b541bf3b4a7cbeee989b55d268e3e1/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c576979b78b541bf3b4a7cbeee989b55d268e3e1/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "patch": "@@ -625,7 +625,6 @@ def run_test(self):\n                      ismine=False,\n                      iswatchonly=False)\n \n-\n         # Import pubkeys with key origin info\n         self.log.info(\"Addresses should have hd keypath and master key id after import with key origin\")\n         pub_addr = self.nodes[1].getnewaddress()\n@@ -691,5 +690,117 @@ def run_test(self):\n         assert 'hdmasterfingerprint' not in pub_import_info\n         assert 'hdkeypath' not in pub_import_info\n \n+        # Import some public keys to the keypool of a no privkey wallet\n+        self.log.info(\"Adding pubkey to keypool of disableprivkey wallet\")\n+        self.nodes[1].createwallet(wallet_name=\"noprivkeys\", disable_private_keys=True)\n+        wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")\n+\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh(' + pub1 + ')',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                'desc': 'wpkh(' + pub2 + ')',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        assert result[1]['success']\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 2)\n+        newaddr1 = wrpc.getnewaddress()\n+        assert_equal(addr1, newaddr1)\n+        newaddr2 = wrpc.getnewaddress()\n+        assert_equal(addr2, newaddr2)\n+\n+        # Import some public keys to the internal keypool of a no privkey wallet\n+        self.log.info(\"Adding pubkey to internal keypool of disableprivkey wallet\")\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh(' + pub1 + ')',\n+                'keypool': True,\n+                'internal': True,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                'desc': 'wpkh(' + pub2 + ')',\n+                'keypool': True,\n+                'internal': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        assert result[1]['success']\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize_hd_internal\"], 2)\n+        newaddr1 = wrpc.getrawchangeaddress()\n+        assert_equal(addr1, newaddr1)\n+        newaddr2 = wrpc.getrawchangeaddress()\n+        assert_equal(addr2, newaddr2)\n+\n+        # Import a multisig and make sure the keys don't go into the keypool\n+        self.log.info('Imported scripts with pubkeys shoud not have their pubkeys go into the keypool')\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wsh(multi(2,' + pub1 + ',' + pub2 + '))',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 0)\n+\n+        # Cannot import those pubkeys to keypool of wallet with privkeys\n+        self.log.info(\"Pubkeys cannot be added to the keypool of a wallet with private keys\")\n+        wrpc = self.nodes[1].get_wallet_rpc(\"\")\n+        assert wrpc.getwalletinfo()['private_keys_enabled']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh(' + pub1 + ')',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], \"Keys can only be imported to the keypool when private keys are disabled\")\n+\n+        # Make sure ranged imports import keys in order\n+        self.log.info('Key ranges should be imported in order')\n+        wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 0)\n+        assert_equal(wrpc.getwalletinfo()[\"private_keys_enabled\"], False)\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh([80002067/0h/0h]' + xpub + '/*)',\n+                'keypool': True,\n+                'timestamp': 'now',\n+                'range' : {'start': 0, 'end': 4}\n+            }]\n+        )\n+        for i in range(0, 5):\n+            addr = wrpc.getnewaddress('', 'bech32')\n+            assert_equal(addr, addresses[i])\n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      }
    ]
  },
  {
    "sha": "43206239a8fab767849129368560afc4ac901047",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzIwNjIzOWE4ZmFiNzY3ODQ5MTI5MzY4NTYwYWZjNGFjOTAxMDQ3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-01-30T20:53:11Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-15T08:38:07Z"
      },
      "message": "tests: Add script checking for deterministic line coverage",
      "tree": {
        "sha": "c9c478414117aa6e8655ed306695ae52a1ea08cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9c478414117aa6e8655ed306695ae52a1ea08cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43206239a8fab767849129368560afc4ac901047",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43206239a8fab767849129368560afc4ac901047",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43206239a8fab767849129368560afc4ac901047",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43206239a8fab767849129368560afc4ac901047/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1933e38c1a08d479130d11d9fc08bc7c73a82575",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1933e38c1a08d479130d11d9fc08bc7c73a82575"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 151,
      "deletions": 0
    },
    "files": [
      {
        "sha": "16d03e1fffc749fc29afebc181e3561012bd1517",
        "filename": "contrib/devtools/test_deterministic_coverage.sh",
        "status": "added",
        "additions": 151,
        "deletions": 0,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43206239a8fab767849129368560afc4ac901047/contrib/devtools/test_deterministic_coverage.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43206239a8fab767849129368560afc4ac901047/contrib/devtools/test_deterministic_coverage.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test_deterministic_coverage.sh?ref=43206239a8fab767849129368560afc4ac901047",
        "patch": "@@ -0,0 +1,151 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Test for deterministic coverage across unit test runs.\n+\n+export LC_ALL=C\n+\n+# Use GCOV_EXECUTABLE=\"gcov\" if compiling with gcc.\n+# Use GCOV_EXECUTABLE=\"llvm-cov gcov\" if compiling with clang.\n+GCOV_EXECUTABLE=\"gcov\"\n+\n+# Disable tests known to cause non-deterministic behaviour and document the source or point of non-determinism.\n+NON_DETERMINISTIC_TESTS=(\n+    \"coinselector_tests/knapsack_solver_test\"                 # coinselector_tests.cpp: if (equal_sets(setCoinsRet, setCoinsRet2))\n+    \"denialofservice_tests/DoS_mapOrphans\"                    # denialofservice_tests.cpp: it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    \"fs_tests/fsbridge_fstream\"                               # deterministic test failure?\n+    \"miner_tests/CreateNewBlock_validity\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"scheduler_tests/manythreads\"                             # scheduler.cpp: CScheduler::serviceQueue()\n+    \"scheduler_tests/singlethreadedscheduler_ordered\"         # scheduler.cpp: CScheduler::serviceQueue()\n+    \"tx_validationcache_tests/checkinputs_test\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"tx_validationcache_tests/tx_mempool_block_doublespend\"   # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txindex_tests/txindex_initial_sync\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txvalidation_tests/tx_mempool_reject_coinbase\"           # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"validation_block_tests/processnewblock_signals_ordering\" # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/coin_mark_dirty_immature_credit\"            # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/dummy_input_size_test\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importmulti_rescan\"                         # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importwallet_rescan\"                        # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/ListCoins\"                                  # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/scan_for_wallet_transactions\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/wallet_disableprivkeys\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+)\n+\n+TEST_BITCOIN_BINARY=\"src/test/test_bitcoin\"\n+\n+print_usage() {\n+    echo \"Usage: $0 [custom test filter (default: all but known non-deterministic tests)] [number of test runs (default: 2)]\"\n+}\n+\n+N_TEST_RUNS=2\n+BOOST_TEST_RUN_FILTERS=\"\"\n+if [[ $# != 0 ]]; then\n+    if [[ $1 == \"--help\" ]]; then\n+        print_usage\n+        exit\n+    fi\n+    PARSED_ARGUMENTS=0\n+    if [[ $1 =~ [a-z] ]]; then\n+        BOOST_TEST_RUN_FILTERS=$1\n+        PARSED_ARGUMENTS=$((PARSED_ARGUMENTS + 1))\n+        shift\n+    fi\n+    if [[ $1 =~ ^[0-9]+$ ]]; then\n+        N_TEST_RUNS=$1\n+        PARSED_ARGUMENTS=$((PARSED_ARGUMENTS + 1))\n+        shift\n+    fi\n+    if [[ ${PARSED_ARGUMENTS} == 0 || $# -gt 2 || ${N_TEST_RUNS} -lt 2 ]]; then\n+        print_usage\n+        exit\n+    fi\n+fi\n+if [[ ${BOOST_TEST_RUN_FILTERS} == \"\" ]]; then\n+    BOOST_TEST_RUN_FILTERS=\"$(IFS=\":\"; echo \"!${NON_DETERMINISTIC_TESTS[*]}\" | sed 's/:/:!/g')\"\n+else\n+    echo \"Using Boost test filter: ${BOOST_TEST_RUN_FILTERS}\"\n+    echo\n+fi\n+\n+if ! command -v gcov > /dev/null; then\n+    echo \"Error: gcov not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if ! command -v gcovr > /dev/null; then\n+    echo \"Error: gcovr not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if [[ ! -e ${TEST_BITCOIN_BINARY} ]]; then\n+    echo \"Error: Executable ${TEST_BITCOIN_BINARY} not found. Run \\\"./configure --enable-lcov\\\" and compile.\"\n+    exit 1\n+fi\n+\n+get_file_suffix_count() {\n+    find src/ -type f -name \"*.$1\" | wc -l\n+}\n+\n+if [[ $(get_file_suffix_count gcno) == 0 ]]; then\n+    echo \"Error: Could not find any *.gcno files. The *.gcno files are generated by the compiler. Run \\\"./configure --enable-lcov\\\" and re-compile.\"\n+    exit 1\n+fi\n+\n+get_covr_filename() {\n+    echo \"gcovr.run-$1.txt\"\n+}\n+\n+TEST_RUN_ID=0\n+while [[ ${TEST_RUN_ID} -lt ${N_TEST_RUNS} ]]; do\n+    TEST_RUN_ID=$((TEST_RUN_ID + 1))\n+    echo \"[$(date +\"%Y-%m-%d %H:%M:%S\")] Measuring coverage, run #${TEST_RUN_ID} of ${N_TEST_RUNS}\"\n+    find src/ -type f -name \"*.gcda\" -exec rm {} \\;\n+    if [[ $(get_file_suffix_count gcda) != 0 ]]; then\n+        echo \"Error: Stale *.gcda files found. Exiting.\"\n+        exit 1\n+    fi\n+    TEST_OUTPUT_TEMPFILE=$(mktemp)\n+    if ! BOOST_TEST_RUN_FILTERS=\"${BOOST_TEST_RUN_FILTERS}\" ${TEST_BITCOIN_BINARY} > \"${TEST_OUTPUT_TEMPFILE}\" 2>&1; then\n+        cat \"${TEST_OUTPUT_TEMPFILE}\"\n+        rm \"${TEST_OUTPUT_TEMPFILE}\"\n+        exit 1\n+    fi\n+    rm \"${TEST_OUTPUT_TEMPFILE}\"\n+    if [[ $(get_file_suffix_count gcda) == 0 ]]; then\n+        echo \"Error: Running the test suite did not create any *.gcda files. The gcda files are generated when the instrumented test programs are executed. Run \\\"./configure --enable-lcov\\\" and re-compile.\"\n+        exit 1\n+    fi\n+    GCOVR_TEMPFILE=$(mktemp)\n+    if ! gcovr --gcov-executable \"${GCOV_EXECUTABLE}\" -r src/ > \"${GCOVR_TEMPFILE}\"; then\n+        echo \"Error: gcovr failed. Output written to ${GCOVR_TEMPFILE}. Exiting.\"\n+        exit 1\n+    fi\n+    GCOVR_FILENAME=$(get_covr_filename ${TEST_RUN_ID})\n+    mv \"${GCOVR_TEMPFILE}\" \"${GCOVR_FILENAME}\"\n+    if grep -E \"^TOTAL *0 *0 \" \"${GCOVR_FILENAME}\"; then\n+        echo \"Error: Spurious gcovr output. Make sure the correct GCOV_EXECUTABLE variable is set in $0 (\\\"gcov\\\" for gcc, \\\"llvm-cov gcov\\\" for clang).\"\n+        exit 1\n+    fi\n+    if [[ ${TEST_RUN_ID} != 1 ]]; then\n+        COVERAGE_DIFF=$(diff -u \"$(get_covr_filename 1)\" \"${GCOVR_FILENAME}\")\n+        if [[ ${COVERAGE_DIFF} != \"\" ]]; then\n+            echo\n+            echo \"The line coverage is non-deterministic between runs. Exiting.\"\n+            echo\n+            echo \"The test suite must be deterministic in the sense that the set of lines executed at least\"\n+            echo \"once must be identical between runs. This is a necessary condition for meaningful\"\n+            echo \"coverage measuring.\"\n+            echo\n+            echo \"${COVERAGE_DIFF}\"\n+            exit 1\n+        fi\n+        rm \"${GCOVR_FILENAME}\"\n+    fi\n+done\n+\n+echo\n+echo \"Coverage test passed: Deterministic coverage across ${N_TEST_RUNS} runs.\"\n+exit"
      }
    ]
  },
  {
    "sha": "543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDNlZjdkNjI2MTc3YTVjYzRlMGY1YzdmMDFiY2EwOTQ2NzgyZDFj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-15T09:41:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-15T09:41:52Z"
      },
      "message": "tests: Add missing cs_main locks required when accessing pcoinsdbview, pcoinsTip or pblocktree",
      "tree": {
        "sha": "555da7db84222843ae03bfaa8f2667dd848ce71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/555da7db84222843ae03bfaa8f2667dd848ce71e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c576979b78b541bf3b4a7cbeee989b55d268e3e1"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cd4543c012ee9021c954d4293ad2a2ad319638f2",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
        "patch": "@@ -73,10 +73,12 @@ static void AssembleBlock(benchmark::State& state)\n     boost::thread_group thread_group;\n     CScheduler scheduler;\n     {\n+        LOCK(cs_main);\n         ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n         ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n         ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n-\n+    }\n+    {\n         const CChainParams& chainparams = Params();\n         thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);"
      },
      {
        "sha": "1f6840d81315e9364b227b5fb96e1c4063133e3a",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
        "patch": "@@ -37,10 +37,12 @@ static void DuplicateInputs(benchmark::State& state)\n     CScheduler scheduler;\n     const CChainParams& chainparams = Params();\n     {\n+        LOCK(cs_main);\n         ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n         ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n         ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n-\n+    }\n+    {\n         thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n         LoadGenesisBlock(chainparams);"
      },
      {
        "sha": "4d04aae7e929884f7a2a1368b18c3f8178c42935",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
        "patch": "@@ -102,7 +102,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // should fail.\n // Capture this interaction with the upgraded_nop argument: set it when evaluating\n // any script flag that is implemented as an upgraded NOP code.\n-static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache)\n+static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     PrecomputedTransactionData txdata(tx);\n     // If we add many more flags, this loop can get too expensive, but we can\n@@ -219,11 +219,10 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     CBlock block;\n \n     block = CreateAndProcessBlock({spend_tx}, p2pk_scriptPubKey);\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     BOOST_CHECK(pcoinsTip->GetBestBlock() == block.GetHash());\n \n-    LOCK(cs_main);\n-\n     // Test P2SH: construct a transaction that is valid without P2SH, and\n     // then test validity with P2SH.\n     {"
      }
    ]
  },
  {
    "sha": "901baf2c9ef31e68137d5bd8eb5a2b689a71f818",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDFiYWYyYzllZjMxZTY4MTM3ZDViZDhlYjVhMmI2ODlhNzFmODE4",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-02-15T11:54:59Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-02-15T11:54:59Z"
      },
      "message": "doc: update FreeBSD build guide for 12.0",
      "tree": {
        "sha": "b4fafdbf1d4a2ffbeee97ee20a1e8ab063daee66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4fafdbf1d4a2ffbeee97ee20a1e8ab063daee66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/901baf2c9ef31e68137d5bd8eb5a2b689a71f818",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlxmqJQACgkQLuufXMCV\nJsEsWg//buL6KajtpiFnOENllJSxh2GhF+uHl80JETAfEPJRQZdP1jivvoLihGHg\nvR3+L7NIn+Vhry5JU7PYAsVLUVETV9/4LtpgHpfypSWJvShxA8dDxjEWGst6I9Pw\n2162i2aXTkNBq7gnBMjqNEFXzphG6B1Udxy/2k0b6nGlmXKDg1kqpJtZjKOEEg21\n72eTyKy/ZNSZvRNFqHOvzKR1hY2tV1BZjFv1pQVjRgMzzPnGh2T4eZQ98ycsdXAc\nakigZa8KGxgtVg1NRvmcY5IIQQv9AzHUeNzTBCgiLBGxgCvHn4Art/OhV67Ts8DM\nL/KOD4H9Mhn+BKydnZbjpBrNFkQ4nSzAruldjRsZUekpu6x8fQhrrFFNd5ufXZps\nLDGEnAbitxedldt3iQXDeLr2JBAryH4+wg4k8ZZdSwC6Mo8vzxsWZJ5Ma91S9Weu\ni9Bloi98rdiRDHzy1rA37CeZTNzTmQYMSS8xArqDIQyqLeklUYSCbZLCL8sEb8Eo\nbUUwvwQhR+MMsRj/g8vGwYeXqweHP0pzEW0eCw4cxVRdUQKTdOxrFXtSgQ4+T/Hs\ndeqi3046A3m+HOwL1pcRJ8XRfTNbG4YTV6kkGJ6UdH/+einsrTISqcihbrZAjyxq\nZHSoR84FhEW42VeohrzkQIMakfGiFfjog8elnqdKrkKhm+Q0IDc=\n=LwQR\n-----END PGP SIGNATURE-----",
        "payload": "tree b4fafdbf1d4a2ffbeee97ee20a1e8ab063daee66\nparent c576979b78b541bf3b4a7cbeee989b55d268e3e1\nauthor fanquake <fanquake@gmail.com> 1550231699 +0800\ncommitter fanquake <fanquake@gmail.com> 1550231699 +0800\n\ndoc: update FreeBSD build guide for 12.0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/901baf2c9ef31e68137d5bd8eb5a2b689a71f818",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/901baf2c9ef31e68137d5bd8eb5a2b689a71f818",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/901baf2c9ef31e68137d5bd8eb5a2b689a71f818/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c576979b78b541bf3b4a7cbeee989b55d268e3e1"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 26,
      "deletions": 30
    },
    "files": [
      {
        "sha": "d22b6e838342b6859661f8ad6bbd0d6816d36095",
        "filename": "doc/build-freebsd.md",
        "status": "modified",
        "additions": 26,
        "deletions": 30,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/901baf2c9ef31e68137d5bd8eb5a2b689a71f818/doc/build-freebsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/901baf2c9ef31e68137d5bd8eb5a2b689a71f818/doc/build-freebsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-freebsd.md?ref=901baf2c9ef31e68137d5bd8eb5a2b689a71f818",
        "patch": "@@ -1,6 +1,6 @@\n FreeBSD build guide\n ======================\n-(updated for FreeBSD 11.1)\n+(updated for FreeBSD 12.0)\n \n This guide describes how to build bitcoind and command-line utilities on FreeBSD.\n \n@@ -10,55 +10,51 @@ This guide does not contain instructions for building the GUI.\n \n You will need the following dependencies, which can be installed as root via pkg:\n \n-```\n+```shell\n pkg install autoconf automake boost-libs git gmake libevent libtool openssl pkgconf\n+\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n In order to run the test suite (recommended), you will need to have Python 3 installed:\n \n-```\n+```shell\n pkg install python3\n ```\n \n-For the wallet (optional):\n-```\n-./contrib/install_db4.sh `pwd`\n-export BDB_PREFIX=\"$PWD/db4\"\n-```\n-\n See [dependencies.md](dependencies.md) for a complete overview.\n \n-Download the source code:\n-```\n-git clone https://github.com/bitcoin/bitcoin\n+### Building BerkeleyDB\n+\n+BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n+`--disable-wallet` to `./configure` and skip to the next section.\n+\n+```shell\n+./contrib/install_db4.sh `pwd`\n+export BDB_PREFIX=\"$PWD/db4\"\n ```\n \n ## Building Bitcoin Core\n \n **Important**: Use `gmake` (the non-GNU `make` will exit with an error):\n \n-```\n+With wallet:\n+```shell\n ./autogen.sh\n-\n-./configure                  # to build with wallet OR\n-./configure --disable-wallet # to build without wallet\n+./configure --with-gui=no \\\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n-followed by either:\n-\n-```\n-gmake\n+Without wallet:\n+```shell\n+./autogen.sh\n+./configure --with-gui=no --disable-wallet\n ```\n \n-to build without testing, or\n+followed by:\n \n+```shell\n+gmake # use -jX here for parallelism\n+gmake check # Run tests if Python 3 is available\n ```\n-gmake check\n-```\n-\n-to also run the test suite (recommended, if Python 3 is installed).\n-\n-*Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement).\n-It is not suitable for debugging a multi-threaded C++ program, not even for getting backtraces. Please install the package `gdb` and\n-use the versioned gdb command (e.g. `gdb7111`).\n-"
      }
    ]
  },
  {
    "sha": "4d2767c2287eb961910880dca33dbd3d64dd38e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDI3NjdjMjI4N2ViOTYxOTEwODgwZGNhMzNkYmQzZDY0ZGQzOGUx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T12:16:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T12:16:18Z"
      },
      "message": "Merge #15413: tests: Add missing cs_main locks required when accessing pcoinsdbview, pcoinsTip or pblocktree\n\n543ef7d626 tests: Add missing cs_main locks required when accessing pcoinsdbview, pcoinsTip or pblocktree (practicalswift)\n\nPull request description:\n\n  Add missing `cs_main` locks required when accessing `pcoinsdbview`, `pcoinsTip` or `pblocktree`.\n\n  This is a subset of #15192: split up requested by MarcoFalke in https://github.com/bitcoin/bitcoin/pull/15192#issuecomment-462827372.\n\n  The end goal is to get the corresponding `GUARDED_BY(...)`:s in (see #15192).\n\nTree-SHA512: 0eb1987dba1a2f1faf0910c421f6d90a20b8a253486eb3301d5bca66d128b19120664e3a8580bdce7b428df817284faf94243250bf561f91d2d31a52d134aa67",
      "tree": {
        "sha": "555da7db84222843ae03bfaa8f2667dd848ce71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/555da7db84222843ae03bfaa8f2667dd848ce71e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d2767c2287eb961910880dca33dbd3d64dd38e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZq2SAAoJENLqSFDnUosl+3MP/2xI0N9rDjxdO5ux4PCSU9iB\nlPYLZC0Wbu7Z7bwweaigEJQOpd20YNkKrwVZ2ejXOJry6ZqL5TCH04VRyyAnqYG2\n30vHmlEZck1VpZL5VmkhM9qsA4ujqCb6jvk/HDPAPhEuEo43GvJenpjpXV5tUskc\n54SrV8BmT1K+KjnQxfsuQgerJuFEgA5ZsrROxHCyy8AgVStWOFV+O7GrBFSs1XCY\nUPOh3TVT7hqVVMra5P+ZvuUp/iBmKsmcoQ0YNyoL/Q36WF4eWPRLOjYSZHsDDDwz\nfgx6KuJ3gv5voKxC6ib5bOgcDQxypcp1BIKIXRDj1OpflqVz+hdSjqoPWn8FvmXd\nymg13Q1N2592GTpYqWXt8NJq/aSxNXP/PDPhSCUTMbGElnMmwxW78Z71YyP5byFZ\n0qZHpM+yoC36uLpQL2WduGJ63ljQt9RC406FW/rDRvDlpSis18PnycKDHzqwm7Pw\nZ4CjmsIF4OkJNmun0kqfQjownFzfJgWr0ZL8md39YlQacRserTGyoJQYFDe5E1ww\nu1TD6t5G5plq5neJtLFsTXxn5KdYzrFHGSMtGWOmY+9g5AxixLKPrxMyxLUDVVTC\nYYwNoGknozqtqnZ6EVc4LWDaveagAkAoM6/3ISD5vYSBWPmn01eGpNd6u4zBTKkd\nbP+6p9m/XoQ95R21Y0U8\n=idnC\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIH5Re0CHEHEsoumWaJNSG7qfhKyAU7e7SJhHpbnf69lCCP/wEA3l3dURjnSi\n5S+VsL/8y1YI8BDqHKqHTdJTXrKvz2EKQJcRCPAgsqN4mH67zxVBY41yOS91Eyw9\n0K9PaL/BhYAtErryZJUI8QRcZq2V8AjZqZxrQ6AlhACD3+MNLvkMjikoaHR0cHM6\nLy9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEB8kJ3udP+muZ0D2\nEiipX/wI8SDpLrEcGvNuKxjLpoMMkqtIySfkyQ9tCs/qZmluWEbSLQjwIE8W/2n8\nmdr15qRH+JueSZn2Or3yhqynPjEOa8wwQsHuCPEEXGatlPAIBbOWaADrgsIAg9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmf/8BBEOl+rVYYplNcx0+C5WMo6CPEEXGatlfAIB8tgSuqGZX0Ag9/jDS75DI4j\nImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wEEmRfTY3cSz1d3y8\nCkSh2JMI8CCIKzO72sKGgnIVz3C6Tmq3Q2x88EvNMFoJ38+wSM+h4AjxBFxmrZXw\nCFSd7oX8ZWwyAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5v\ncGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 555da7db84222843ae03bfaa8f2667dd848ce71e\nparent c576979b78b541bf3b4a7cbeee989b55d268e3e1\nparent 543ef7d626177a5cc4e0f5c7f01bca0946782d1c\nauthor MarcoFalke <falke.marco@gmail.com> 1550232970 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550232978 -0500\n\nMerge #15413: tests: Add missing cs_main locks required when accessing pcoinsdbview, pcoinsTip or pblocktree\n\n543ef7d626 tests: Add missing cs_main locks required when accessing pcoinsdbview, pcoinsTip or pblocktree (practicalswift)\n\nPull request description:\n\n  Add missing `cs_main` locks required when accessing `pcoinsdbview`, `pcoinsTip` or `pblocktree`.\n\n  This is a subset of #15192: split up requested by MarcoFalke in https://github.com/bitcoin/bitcoin/pull/15192#issuecomment-462827372.\n\n  The end goal is to get the corresponding `GUARDED_BY(...)`:s in (see #15192).\n\nTree-SHA512: 0eb1987dba1a2f1faf0910c421f6d90a20b8a253486eb3301d5bca66d128b19120664e3a8580bdce7b428df817284faf94243250bf561f91d2d31a52d134aa67\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2767c2287eb961910880dca33dbd3d64dd38e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d2767c2287eb961910880dca33dbd3d64dd38e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2767c2287eb961910880dca33dbd3d64dd38e1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c576979b78b541bf3b4a7cbeee989b55d268e3e1"
      },
      {
        "sha": "543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/543ef7d626177a5cc4e0f5c7f01bca0946782d1c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cd4543c012ee9021c954d4293ad2a2ad319638f2",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d2767c2287eb961910880dca33dbd3d64dd38e1/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d2767c2287eb961910880dca33dbd3d64dd38e1/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=4d2767c2287eb961910880dca33dbd3d64dd38e1",
        "patch": "@@ -73,10 +73,12 @@ static void AssembleBlock(benchmark::State& state)\n     boost::thread_group thread_group;\n     CScheduler scheduler;\n     {\n+        LOCK(cs_main);\n         ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n         ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n         ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n-\n+    }\n+    {\n         const CChainParams& chainparams = Params();\n         thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);"
      },
      {
        "sha": "1f6840d81315e9364b227b5fb96e1c4063133e3a",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d2767c2287eb961910880dca33dbd3d64dd38e1/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d2767c2287eb961910880dca33dbd3d64dd38e1/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=4d2767c2287eb961910880dca33dbd3d64dd38e1",
        "patch": "@@ -37,10 +37,12 @@ static void DuplicateInputs(benchmark::State& state)\n     CScheduler scheduler;\n     const CChainParams& chainparams = Params();\n     {\n+        LOCK(cs_main);\n         ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n         ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n         ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n-\n+    }\n+    {\n         thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n         LoadGenesisBlock(chainparams);"
      },
      {
        "sha": "4d04aae7e929884f7a2a1368b18c3f8178c42935",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d2767c2287eb961910880dca33dbd3d64dd38e1/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d2767c2287eb961910880dca33dbd3d64dd38e1/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=4d2767c2287eb961910880dca33dbd3d64dd38e1",
        "patch": "@@ -102,7 +102,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // should fail.\n // Capture this interaction with the upgraded_nop argument: set it when evaluating\n // any script flag that is implemented as an upgraded NOP code.\n-static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache)\n+static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     PrecomputedTransactionData txdata(tx);\n     // If we add many more flags, this loop can get too expensive, but we can\n@@ -219,11 +219,10 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     CBlock block;\n \n     block = CreateAndProcessBlock({spend_tx}, p2pk_scriptPubKey);\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     BOOST_CHECK(pcoinsTip->GetBestBlock() == block.GetHash());\n \n-    LOCK(cs_main);\n-\n     // Test P2SH: construct a transaction that is valid without P2SH, and\n     // then test validity with P2SH.\n     {"
      }
    ]
  },
  {
    "sha": "bf3677a6bb48cd4fc963d274748f304a46d9ccd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjM2NzdhNmJiNDhjZDRmYzk2M2QyNzQ3NDhmMzA0YTQ2ZDljY2Q1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T12:18:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T12:18:49Z"
      },
      "message": "Merge #15405: [build] AppVeyor: clean cache when build configuration changes\n\n88a91e2c9d [build] AppVeyor: clean cache when build configuration changes (Sjors Provoost)\n\nPull request description:\n\n  AppVeyor builds started starting failing on master after I cleaned the cache in #15382. In addition, it appeared that a new dependency (boost-process) wasn't getting added in that PR without at least cleaning the vcpkg cache.\n\nTree-SHA512: 1ad87bf6ca866cc20db04682cdf7572b59d22a7eaf346f390fc476c5e28bc5422733277fd765e5c9fd2ea88107b52fccd13f1f7e55493f567c4c4a1c16d7cb3a",
      "tree": {
        "sha": "5d61f6f98e2b153dc54e473942563f19f7f3c6d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d61f6f98e2b153dc54e473942563f19f7f3c6d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf3677a6bb48cd4fc963d274748f304a46d9ccd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZq4pAAoJENLqSFDnUosltvQQAIw8xK920G8P9YWsfelazGxg\n51m+6qBUHaVhF8xmTfxNuAp7/DntRB9s01eTf1FlJ0IvVhRn/QIUsvhE2fQjh4Vz\n4hAOpanr/ZzlmH8LFDeu3BC2twhf9fk0VOi8TqMM7ymnikKeq1qIhz9Fkj5zbBQV\n09B6VbzOBuVaZEcLRCDjeaW/luJXEBq1c77NzmDL/q2VT2P0IoNH/gijpk7/BHhU\nZRgRN+bOJH4g213RCivz/MPJOxnxY5sUPiZuEVN4oZKBgQPLppy9LfmyhhL5scUu\nao5geIbGEZwn8vHi40/Fw/6UxxUIzclGh5GiArupH7HssR5iaCiZIS3xAEUtqAFn\nrwWj5m/TVac7VGwiesie9nQlxCn2jygeKb3wBlTykClryo71io0EGhIHapBTHXBl\nF4754teJRvCjM0oNU/71Y74+a7qeSTID7kQuV+tWIQd3y3ZIENgO5Luwa0POvwzC\n17qjM8bwnTRlE9cyNXvE37WPiU0p98br2jazQIYYtEJHcmcIRjFLzoM0GgLT9n+J\n+hNv8z2/TKzCi7f9gOB2aV8WXHC6JpDdHWrTKvLYL/mcx9srk7vHeIIiSjJSjo+C\n7YJrdh/36VbEyJ2JbOxtMy7RPKFWYqMug4F+ucPJdhcNAzmmKgEv27VDO+xffnJ3\nfvWTNPgOT3cs/3GGuyWF\n=ENT6\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMkWWQmJCydy2Jaw7QUjcO9Gj+GYpCDtZkz9DGfGuod4CP/wEGjIyuPmTbqO\nvIVL+BSEO5cI8SCvNhggYZyNIWPStzK3OjqHOrLtpMD3jBpks0TZNE2v5wjwIMj4\nFby8B0AMfe1ijTUFz7ileqMCvtMqcDAx3KN1QB8qCPEEXGauK/AI46e/LnlvuCoA\ng9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ//wEICJ17PjUFJ900CZjL8+9lkI8BDXIfM33duWIh9O1iq71bHeCPEE\nXGauLPAI7YuKU6u+T8UAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFy\nLmV0ZXJuaXR5d2FsbC5jb23/8BCXiTY4VwejGlXoTfaW3RGwCPEEXGauK/AIN/j6\n1FBe+MwAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb23wEJuUC5fDkF4XA5s1z/iS10YI8CByWBatixfhVXz8EHatDqN74DxYqQTrSM8c\nSeDc0mbIwAjxBFxmrizwCLRdZs8ep6l2AIPf4w0u+QyOLCtodHRwczovL2JvYi5i\ndGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5d61f6f98e2b153dc54e473942563f19f7f3c6d8\nparent 4d2767c2287eb961910880dca33dbd3d64dd38e1\nparent 88a91e2c9d9ec1bee54d2676a74040e3f7665a2d\nauthor MarcoFalke <falke.marco@gmail.com> 1550233126 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550233129 -0500\n\nMerge #15405: [build] AppVeyor: clean cache when build configuration changes\n\n88a91e2c9d [build] AppVeyor: clean cache when build configuration changes (Sjors Provoost)\n\nPull request description:\n\n  AppVeyor builds started starting failing on master after I cleaned the cache in #15382. In addition, it appeared that a new dependency (boost-process) wasn't getting added in that PR without at least cleaning the vcpkg cache.\n\nTree-SHA512: 1ad87bf6ca866cc20db04682cdf7572b59d22a7eaf346f390fc476c5e28bc5422733277fd765e5c9fd2ea88107b52fccd13f1f7e55493f567c4c4a1c16d7cb3a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3677a6bb48cd4fc963d274748f304a46d9ccd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3677a6bb48cd4fc963d274748f304a46d9ccd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3677a6bb48cd4fc963d274748f304a46d9ccd5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d2767c2287eb961910880dca33dbd3d64dd38e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2767c2287eb961910880dca33dbd3d64dd38e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d2767c2287eb961910880dca33dbd3d64dd38e1"
      },
      {
        "sha": "88a91e2c9d9ec1bee54d2676a74040e3f7665a2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88a91e2c9d9ec1bee54d2676a74040e3f7665a2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88a91e2c9d9ec1bee54d2676a74040e3f7665a2d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d4a343e77767cbaccc96eb77fbdf014699558ef3",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3677a6bb48cd4fc963d274748f304a46d9ccd5/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3677a6bb48cd4fc963d274748f304a46d9ccd5/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=bf3677a6bb48cd4fc963d274748f304a46d9ccd5",
        "patch": "@@ -11,8 +11,8 @@ environment:\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n cache:\n-- C:\\tools\\vcpkg\\installed\n-- C:\\Users\\appveyor\\clcache\n+- C:\\tools\\vcpkg\\installed -> appveyor.yml\n+- C:\\Users\\appveyor\\clcache -> appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n install:\n - cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes."
      }
    ]
  },
  {
    "sha": "eca1273c3500497defe8de8fde817b096aa1b952",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2ExMjczYzM1MDA0OTdkZWZlOGRlOGZkZTgxN2IwOTZhYTFiOTUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T13:56:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T13:57:50Z"
      },
      "message": "Merge #15383: [rpc] mining: Omit uninitialized currentblockweight, currentblocktx\n\nfa178a6385 [rpc] mining: Omit uninitialized currentblockweight, currentblocktx (MarcoFalke)\n\nPull request description:\n\n  Previously we'd report \"0\", which could be mistaken for a valid number. E.g. the number of transactions is 0 or the block weight is 0, whatever that means.\n\nTree-SHA512: ee94ab203a329e272211b726f4c23edec4b09c650ec363b77fd59ad9264165d73064f78ebb9e11b5c2c543b73c157752410a307655560531c7d5444d203aa0ea",
      "tree": {
        "sha": "64872b60294279c46b7664157fd7e4e1d3e4f922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64872b60294279c46b7664157fd7e4e1d3e4f922"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eca1273c3500497defe8de8fde817b096aa1b952",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZsVfAAoJENLqSFDnUoslBQkQAKTpZXCSCa2VEVoKREBwCjkG\nszz3EcQQk8HvvtON+mcQDHMVOBYTcszu9WqJdb88F+KrULrIIyUq0Njekdom8gG2\naCA0k4kqHmxUZV0esp2g7RWO2rUxgbwVXqxpVr/jE/rgmfo+xObJ8nUcm9MaO+Ui\ne7PRwp3R5sv1dO6VWqiCCKlY+aJhVMCAQadgTMEYC16g5YoraUHthlUNV+Iy6hn7\nAC+j8lknMrqsYTgn9pRQ1EjxjeTomVmfg4pl3+6rzcws5veKBpG205m+DTE7NE9S\nt/nLh3ABWXTjhQhsOcFHFLSrrHXUZ3LBX0IqtRY9IFEZ+nCH8nTDRBKM2GQSXa/v\nIJKz3fIuj8f5qD2PUjYMiW6uhWHXwtUpVqI6TkGFOwUigN6qfYW2PjpDEB2J5feN\n2kbgGhb2IM09QdMBok6eQr/TPG7r/Wb/pyabVyk1+GQpvLNgscbrLpSYJmExPlxk\nY5e3gdhNrEIjlRk1/2ORMJXH6hUlJZWEi0uiXBQ9CgZyGYiJjunlfaSd0w/Rl2hF\n7ooVb6dX4q6y2ywRcaQ6FVP8Y9K/+IPioXMke2iB7UTGDmP6vyYrOGgyw622/h++\n1uoFsnD/9G+L8wjf7pyDuElvRkd+mu8GndzCpr4GYJuP///miOvcUZ0lXwRzJ9eV\nHUjaLnS35bvquKr+oXSS\n=WVwM\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBsmPpWCSh1Z16MXfx2ExNURKM4t71kYKL3fzBT265YMCP/wEDV+wc5X/GPe\n8pyab3k5nC4I8QRcZsVh8AiiXW+YRhEkkwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEIU2+R8SBVozHB+YXQi3ffkI8QRcZsVg\n8Ai39GKwFyy8rACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEK2R4A1snuHYzWgWoddFQIsI8SDMyV9RzQXvYHrw\na/2iBTb+mRTWOlSsoTb1yW/x8ivjBQjwEIwhd9+LPJ+CHGZ8o9Ylz1QI8QRcZsVi\n8AgKaIZKJ3B9kgCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRl\ncm5pdHl3YWxsLmNvbfAQyyzpb7SQLXHpsvwWKdLXDwjxBFxmxWHwCDAsiBjK4o4X\nAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 64872b60294279c46b7664157fd7e4e1d3e4f922\nparent bf3677a6bb48cd4fc963d274748f304a46d9ccd5\nparent fa178a6385bf300499fb18940051fc4142fb5b6b\nauthor MarcoFalke <falke.marco@gmail.com> 1550239003 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550239070 -0500\n\nMerge #15383: [rpc] mining: Omit uninitialized currentblockweight, currentblocktx\n\nfa178a6385 [rpc] mining: Omit uninitialized currentblockweight, currentblocktx (MarcoFalke)\n\nPull request description:\n\n  Previously we'd report \"0\", which could be mistaken for a valid number. E.g. the number of transactions is 0 or the block weight is 0, whatever that means.\n\nTree-SHA512: ee94ab203a329e272211b726f4c23edec4b09c650ec363b77fd59ad9264165d73064f78ebb9e11b5c2c543b73c157752410a307655560531c7d5444d203aa0ea\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca1273c3500497defe8de8fde817b096aa1b952",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eca1273c3500497defe8de8fde817b096aa1b952",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca1273c3500497defe8de8fde817b096aa1b952/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf3677a6bb48cd4fc963d274748f304a46d9ccd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3677a6bb48cd4fc963d274748f304a46d9ccd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3677a6bb48cd4fc963d274748f304a46d9ccd5"
      },
      {
        "sha": "fa178a6385bf300499fb18940051fc4142fb5b6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa178a6385bf300499fb18940051fc4142fb5b6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa178a6385bf300499fb18940051fc4142fb5b6b"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 62,
      "deletions": 39
    },
    "files": [
      {
        "sha": "a6408cf1e6b73fb6c713be2bbfae9164315f527c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca1273c3500497defe8de8fde817b096aa1b952/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca1273c3500497defe8de8fde817b096aa1b952/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=eca1273c3500497defe8de8fde817b096aa1b952",
        "patch": "@@ -263,6 +263,9 @@ in the Low-level Changes section below.\n \n - See the [Mining](#mining) section for changes to `getblocktemplate`.\n \n+- The `getmininginfo` RPC now omits `currentblockweight` and `currentblocktx`\n+  when a block was never assembled via RPC on this node.\n+\n - The `getrawtransaction` RPC & REST endpoints no longer check the\n   unspent UTXO set for a transaction. The remaining behaviors are as\n   follows: 1. If a blockhash is provided, check the corresponding block."
      },
      {
        "sha": "80a2f8f018073a7bf6f81009feb364850141178e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca1273c3500497defe8de8fde817b096aa1b952/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca1273c3500497defe8de8fde817b096aa1b952/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=eca1273c3500497defe8de8fde817b096aa1b952",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,8 +10,8 @@\n #include <chainparams.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n-#include <consensus/tx_verify.h>\n #include <consensus/merkle.h>\n+#include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <hash.h>\n #include <net.h>\n@@ -21,22 +21,14 @@\n #include <primitives/transaction.h>\n #include <script/standard.h>\n #include <timedata.h>\n-#include <util/system.h>\n #include <util/moneystr.h>\n+#include <util/system.h>\n #include <validationinterface.h>\n \n #include <algorithm>\n #include <queue>\n #include <utility>\n \n-// Unconfirmed transactions in the memory pool often depend on other\n-// transactions in the memory pool. When we select transactions from the\n-// pool, we select by highest fee rate of a transaction combined with all\n-// its ancestors.\n-\n-uint64_t nLastBlockTx = 0;\n-uint64_t nLastBlockWeight = 0;\n-\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     int64_t nOldTime = pblock->nTime;\n@@ -95,6 +87,9 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n+Optional<int64_t> BlockAssembler::m_last_block_num_txs{nullopt};\n+Optional<int64_t> BlockAssembler::m_last_block_weight{nullopt};\n+\n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     int64_t nTimeStart = GetTimeMicros();\n@@ -147,8 +142,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     int64_t nTime1 = GetTimeMicros();\n \n-    nLastBlockTx = nBlockTx;\n-    nLastBlockWeight = nBlockWeight;\n+    m_last_block_num_txs = nBlockTx;\n+    m_last_block_weight = nBlockWeight;\n \n     // Create coinbase transaction.\n     CMutableTransaction coinbaseTx;"
      },
      {
        "sha": "7c4c455072ed660fdf04cf6231876e5ac0f619af",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca1273c3500497defe8de8fde817b096aa1b952/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca1273c3500497defe8de8fde817b096aa1b952/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=eca1273c3500497defe8de8fde817b096aa1b952",
        "patch": "@@ -1,17 +1,19 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n+#include <optional.h>\n #include <primitives/block.h>\n #include <txmempool.h>\n #include <validation.h>\n \n-#include <stdint.h>\n #include <memory>\n+#include <stdint.h>\n+\n #include <boost/multi_index_container.hpp>\n #include <boost/multi_index/ordered_index.hpp>\n \n@@ -159,6 +161,9 @@ class BlockAssembler\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n \n+    static Optional<int64_t> m_last_block_num_txs;\n+    static Optional<int64_t> m_last_block_weight;\n+\n private:\n     // utility functions\n     /** Clear the block's state and prepare for assembling a new block */"
      },
      {
        "sha": "6625a03bbd9c51d0c35952916aa32581d5d7df40",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca1273c3500497defe8de8fde817b096aa1b952/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca1273c3500497defe8de8fde817b096aa1b952/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=eca1273c3500497defe8de8fde817b096aa1b952",
        "patch": "@@ -187,36 +187,36 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n \n static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0) {\n         throw std::runtime_error(\n             RPCHelpMan{\"getmininginfo\",\n                 \"\\nReturns a json object containing mining-related information.\",\n                 {},\n                 RPCResult{\n-            \"{\\n\"\n-            \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n-            \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n-            \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n-            \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n-            \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n-            \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n-            \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-            \"}\\n\"\n+                    \"{\\n\"\n+                    \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n+                    \"  \\\"currentblockweight\\\": nnn, (numeric, optional) The block weight of the last assembled block (only present if a block was ever assembled)\\n\"\n+                    \"  \\\"currentblocktx\\\": nnn,     (numeric, optional) The number of block transactions of the last assembled block (only present if a block was ever assembled)\\n\"\n+                    \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n+                    \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n+                    \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n+                    \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n+                    \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n+                    \"}\\n\"\n                 },\n                 RPCExamples{\n                     HelpExampleCli(\"getmininginfo\", \"\")\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n                 },\n             }.ToString());\n-\n+    }\n \n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"blocks\",           (int)chainActive.Height());\n-    obj.pushKV(\"currentblockweight\", (uint64_t)nLastBlockWeight);\n-    obj.pushKV(\"currentblocktx\",   (uint64_t)nLastBlockTx);\n+    if (BlockAssembler::m_last_block_weight) obj.pushKV(\"currentblockweight\", *BlockAssembler::m_last_block_weight);\n+    if (BlockAssembler::m_last_block_num_txs) obj.pushKV(\"currentblocktx\", *BlockAssembler::m_last_block_num_txs);\n     obj.pushKV(\"difficulty\",       (double)GetDifficulty(chainActive.Tip()));\n     obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n     obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());"
      },
      {
        "sha": "1975846b69f85bf9e663f0494021a9c80232182f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca1273c3500497defe8de8fde817b096aa1b952/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca1273c3500497defe8de8fde817b096aa1b952/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=eca1273c3500497defe8de8fde817b096aa1b952",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,8 +14,8 @@\n #include <coins.h>\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n-#include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <policy/feerate.h>\n+#include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n #include <sync.h>\n #include <versionbits.h>\n@@ -152,8 +152,6 @@ extern CTxMemPool mempool;\n extern std::atomic_bool g_is_mempool_loaded;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap& mapBlockIndex GUARDED_BY(cs_main);\n-extern uint64_t nLastBlockTx;\n-extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n extern Mutex g_best_block_mutex;\n extern std::condition_variable g_best_block_cv;"
      },
      {
        "sha": "df8fe23a2efccfe4825977a4eef41e95192ad8d6",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 23,
        "deletions": 5,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca1273c3500497defe8de8fde817b096aa1b952/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca1273c3500497defe8de8fde817b096aa1b952/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=eca1273c3500497defe8de8fde817b096aa1b952",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mining RPCs\n@@ -11,7 +11,10 @@\n import copy\n from decimal import Decimal\n \n-from test_framework.blocktools import create_coinbase\n+from test_framework.blocktools import (\n+    create_coinbase,\n+    TIME_GENESIS_BLOCK,\n+)\n from test_framework.messages import (\n     CBlock,\n     CBlockHeader,\n@@ -25,9 +28,11 @@\n     assert_equal,\n     assert_raises_rpc_error,\n     bytes_to_hex_str as b2x,\n+    connect_nodes_bi,\n )\n from test_framework.script import CScriptNum\n \n+\n def assert_template(node, block, expect, rehash=True):\n     if rehash:\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -38,9 +43,22 @@ def assert_template(node, block, expect, rehash=True):\n class MiningTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n+        self.setup_clean_chain = True\n+\n+    def mine_chain(self):\n+        self.log.info('Create some old blocks')\n+        for t in range(TIME_GENESIS_BLOCK, TIME_GENESIS_BLOCK + 200 * 600, 600):\n+            self.nodes[0].setmocktime(t)\n+            self.nodes[0].generate(1)\n+        mining_info = self.nodes[0].getmininginfo()\n+        assert_equal(mining_info['blocks'], 200)\n+        assert_equal(mining_info['currentblocktx'], 0)\n+        assert_equal(mining_info['currentblockweight'], 4000)\n+        self.restart_node(0)\n+        connect_nodes_bi(self.nodes, 0, 1)\n \n     def run_test(self):\n+        self.mine_chain()\n         node = self.nodes[0]\n \n         def assert_submitblock(block, result_str_1, result_str_2=None):\n@@ -53,8 +71,8 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         mining_info = node.getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n         assert_equal(mining_info['chain'], 'regtest')\n-        assert_equal(mining_info['currentblocktx'], 0)\n-        assert_equal(mining_info['currentblockweight'], 0)\n+        assert 'currentblocktx' not in mining_info\n+        assert 'currentblockweight' not in mining_info\n         assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))\n         assert_equal(mining_info['networkhashps'], Decimal('0.003333333333333334'))\n         assert_equal(mining_info['pooledtx'], 0)"
      },
      {
        "sha": "15f4502994da9a395e2d63873d018a79754c417e",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca1273c3500497defe8de8fde817b096aa1b952/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca1273c3500497defe8de8fde817b096aa1b952/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=eca1273c3500497defe8de8fde817b096aa1b952",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Utilities for manipulating blocks and transactions.\"\"\"\n@@ -43,9 +43,13 @@\n \n MAX_BLOCK_SIGOPS = 20000\n \n+# Genesis block time (regtest)\n+TIME_GENESIS_BLOCK = 1296688602\n+\n # From BIP141\n WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n \n+\n def create_block(hashprev, coinbase, ntime=None, *, version=1):\n     \"\"\"Create a block (with regtest difficulty).\"\"\"\n     block = CBlock()"
      }
    ]
  },
  {
    "sha": "95801902b987f13c4211ccb28f0231a6ba7e1cab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTgwMTkwMmI5ODdmMTNjNDIxMWNjYjI4ZjAyMzFhNmJhN2UxY2Fi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-15T14:57:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-15T15:05:27Z"
      },
      "message": "Merge #15391: Add compile time verification of assumptions we're currently making implicitly/tacitly\n\n7cee85807c4db679003c6659d247a2fe74c2464a Add compile time verification of assumptions we're currently making implicitly/tacitly (practicalswift)\n\nPull request description:\n\n  Add compile time verification of assumptions we're currently making implicitly/tacitly.\n\n  As suggested by @sipa in https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462508012 and @MarcoFalke in https://github.com/bitcoin/bitcoin/pull/14479#issuecomment-462534878.\n\nTree-SHA512: e68fe51164dbd3eeb76aa8a7e83dfcd3b4d5a66037c0f1822bbbd189bbe3c280e03b3b10af870880ecc09b612e62fb3d9bcd6cf1e16cb7ba818c257db0712ce4",
      "tree": {
        "sha": "9a02bd4610d310d044f1e8254e6b829ec3221b3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a02bd4610d310d044f1e8254e6b829ec3221b3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95801902b987f13c4211ccb28f0231a6ba7e1cab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxm1TcACgkQHkrtYphs\n0l0+WAf+MhFxK9htqxCWb1RrWq+3RnydW2YaJ+NK3U1dw9lY7dPRosdAKYRoeBhJ\n6nSXkEsp85NhtorqKG6cZMq5uj9qXE7Ig6o5idYC0IFw6ORPgru9DgLQkVurHqND\neQwglGUEaNyclTpEhlsnL0ZL6u8eUeHFaRVuIFzNbPmhUFUnOVkvGRwjRC3yaHk7\nKTSXFycDg+M89YsRB7YS26jK6hTOl0kIK0mCdaeVcVsFk8Rde9/EmkwQV6XVf6xN\nnmvSJhF7fPeuHOBh+4ewbXo8KNJm8nnvg54i7EQ3gD27JEAiXneGoAsTGub2NyHn\na5xFKs4tEuOmxLbRu2RTENphH+hC4Q==\n=T9gG\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a02bd4610d310d044f1e8254e6b829ec3221b3d\nparent eca1273c3500497defe8de8fde817b096aa1b952\nparent 7cee85807c4db679003c6659d247a2fe74c2464a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550242627 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550243127 +0100\n\nMerge #15391: Add compile time verification of assumptions we're currently making implicitly/tacitly\n\n7cee85807c4db679003c6659d247a2fe74c2464a Add compile time verification of assumptions we're currently making implicitly/tacitly (practicalswift)\n\nPull request description:\n\n  Add compile time verification of assumptions we're currently making implicitly/tacitly.\n\n  As suggested by @sipa in https://github.com/bitcoin/bitcoin/pull/14239#issuecomment-462508012 and @MarcoFalke in https://github.com/bitcoin/bitcoin/pull/14479#issuecomment-462534878.\n\nTree-SHA512: e68fe51164dbd3eeb76aa8a7e83dfcd3b4d5a66037c0f1822bbbd189bbe3c280e03b3b10af870880ecc09b612e62fb3d9bcd6cf1e16cb7ba818c257db0712ce4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95801902b987f13c4211ccb28f0231a6ba7e1cab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95801902b987f13c4211ccb28f0231a6ba7e1cab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95801902b987f13c4211ccb28f0231a6ba7e1cab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eca1273c3500497defe8de8fde817b096aa1b952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca1273c3500497defe8de8fde817b096aa1b952",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eca1273c3500497defe8de8fde817b096aa1b952"
      },
      {
        "sha": "7cee85807c4db679003c6659d247a2fe74c2464a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cee85807c4db679003c6659d247a2fe74c2464a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cee85807c4db679003c6659d247a2fe74c2464a"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d491530ca10fb7efc33a99ee42e2f01a809ec117",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95801902b987f13c4211ccb28f0231a6ba7e1cab/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95801902b987f13c4211ccb28f0231a6ba7e1cab/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=95801902b987f13c4211ccb28f0231a6ba7e1cab",
        "patch": "@@ -118,6 +118,7 @@ BITCOIN_CORE_H = \\\n   clientversion.h \\\n   coins.h \\\n   compat.h \\\n+  compat/assumptions.h \\\n   compat/byteswap.h \\\n   compat/endian.h \\\n   compat/sanity.h \\"
      },
      {
        "sha": "820c9b93d912b33bb04775afc5455154c60244d7",
        "filename": "src/compat/assumptions.h",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95801902b987f13c4211ccb28f0231a6ba7e1cab/src/compat/assumptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95801902b987f13c4211ccb28f0231a6ba7e1cab/src/compat/assumptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/assumptions.h?ref=95801902b987f13c4211ccb28f0231a6ba7e1cab",
        "patch": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// Compile-time verification of assumptions we make.\n+\n+#ifndef BITCOIN_COMPAT_ASSUMPTIONS_H\n+#define BITCOIN_COMPAT_ASSUMPTIONS_H\n+\n+#include <limits>\n+\n+// Assumption: We assume that the macro NDEBUG is not defined.\n+// Example(s): We use assert(...) extensively with the assumption of it never\n+//             being a noop at runtime.\n+#if defined(NDEBUG)\n+# error \"Bitcoin cannot be compiled without assertions.\"\n+#endif\n+\n+// Assumption: We assume the floating-point types to fulfill the requirements of\n+//             IEC 559 (IEEE 754) standard.\n+// Example(s): Floating-point division by zero in ConnectBlock, CreateTransaction\n+//             and EstimateMedianVal.\n+static_assert(std::numeric_limits<float>::is_iec559, \"IEEE 754 float assumed\");\n+static_assert(std::numeric_limits<double>::is_iec559, \"IEEE 754 double assumed\");\n+\n+// Assumption: We assume eight bits per byte (obviously, but remember: don't\n+//             trust -- verify!).\n+// Example(s): Everywhere :-)\n+static_assert(std::numeric_limits<unsigned char>::digits == 8, \"8-bit byte assumed\");\n+\n+// Assumption: We assume floating-point widths.\n+// Example(s): Type punning in serialization code (ser_{float,double}_to_uint{32,64}).\n+static_assert(sizeof(float) == 4, \"32-bit float assumed\");\n+static_assert(sizeof(double) == 8, \"64-bit double assumed\");\n+\n+// Assumption: We assume integer widths.\n+// Example(s): GetSizeOfCompactSize and WriteCompactSize in the serialization\n+//             code.\n+static_assert(sizeof(short) == 2, \"16-bit short assumed\");\n+static_assert(sizeof(int) == 4, \"32-bit int assumed\");\n+\n+// Some important things we are NOT assuming (non-exhaustive list):\n+// * We are NOT assuming a specific value for sizeof(std::size_t).\n+// * We are NOT assuming a specific value for std::endian::native.\n+// * We are NOT assuming a specific value for std::locale(\"\").name().\n+// * We are NOT assuming a specific value for std::numeric_limits<char>::is_signed.\n+\n+#endif // BITCOIN_COMPAT_ASSUMPTIONS_H"
      },
      {
        "sha": "8867e49478f75389c487cc3e12a3fffe100707e0",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95801902b987f13c4211ccb28f0231a6ba7e1cab/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95801902b987f13c4211ccb28f0231a6ba7e1cab/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=95801902b987f13c4211ccb28f0231a6ba7e1cab",
        "patch": "@@ -16,6 +16,7 @@\n \n #include <attributes.h>\n #include <compat.h>\n+#include <compat/assumptions.h>\n #include <fs.h>\n #include <logging.h>\n #include <sync.h>"
      }
    ]
  },
  {
    "sha": "743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDNjMmY0NjFjMGU3YzU4YjFlNWM2ZGRmZWFmNGYwZmY2ZTZjYTg1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T18:14:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T18:14:24Z"
      },
      "message": "Merge #15399: fuzz: Script validation flags\n\nfab15ff70e fuzz: Script validation flags (MarcoFalke)\nfabcfa5f0c fuzz: Move deserialize tests to test/fuzz/deserialize.cpp (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 83c0cfeae0771b7ffe14e6b0eaeda06602b91f5bf4aa2f54fd4f7ef2350299679fd2d9339b02e43309bfddccc01d3aef25ce1a3d2c4f9b54f26e16e1249e05db",
      "tree": {
        "sha": "8bf80b939fa7524545d7e2c1851016f52b53b76d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bf80b939fa7524545d7e2c1851016f52b53b76d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcZwGAAAoJENLqSFDnUosl9HwQAI7ScWIzEI7dcJABCgJ3qSmL\nv8CJgfcHwovwGv9xb1gOJdTzfThLt3bNnq5+s95q+3p45u5XZW7RHT8eDAcCmVik\nm4KpD9RfmfdZGG8kkQQQ6kWD6x4Nn5YayHCkjSNYzITwyZATtL33qD2+Ll4KvFvS\npQIi9++y2X+WVpldDgTz2jB4EJz9gylSGlvckUTUcMmsgXh3edVeMYrQDZlGJUis\nO+FSf/kZGAfuJ9/kfp6FUiBc+5PNHLFvKdVCVrkS/p0XpgirNhHi0LRqSUbTbxIn\nD4c5A7fQVrDurCkOUzu16kk6tUiUNIJq501QulqPRWbT4CIGSksRSWa03ckihPnM\nOGiY6fRao12YzwEZ3Ng5YP8m9QxN9+b4hWctE+UBzooDdJSFiY8SWNTUVNJD6oSC\nsB5Hc4Rld69uECSogCGyaUyM43LlG8CZkFnB7n1rscK0n5Qzj4UAXGXF+dk7+YwP\nHauwv7eBbB2Vwu5KiD4qkIS2twJU40eEPHA58AAv5wj1jZ8TogCeidd5erghaddV\n14994LRMG8i9G8wTDB4zjsBwll63rN1r1Dqw6vGzCcNGIpg5h9MkwxXfCzKTwETB\nTF52e+5oIKLk8KTZ0CW8+/QBRNk1ex/Ojlc1F2F593cqGaM7tInttcngBNPpXdAE\nQJT6nE9CccYjiSb4Y9kp\n=o45y\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINhxRwXOe33kawry7l6/inazOM9qvjIb6iww5512ZaCECP/wECWuLKHsQ9tv\n2r7uAGv3RpcI8QRcZwGD8AiFD6+KApePQgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEJ7cmG2ZTXUs9vqkwx+VzAEI8BDiAbcN\nia/omNAfXQ/T7nXACPEEXGcBhPAI3M9/Z9NhfugAg9/jDS75DI4pKGh0dHBzOi8v\nZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BCtNyvx781h17KPf7h6\nAVwHCPEgeXnG+qW0B96np21CFsXm/ZQFNIpVOJLU+0xDvdzk0OUI8QRcZwGD8Ahy\nB6YTe7xpTACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50\naW1lc3RhbXBzLm9yZ/AQ2Eu5x0bAjQ8KFcPMKLS7SQjxBFxnAYPwCFSTEtZkfLcu\nAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 8bf80b939fa7524545d7e2c1851016f52b53b76d\nparent 95801902b987f13c4211ccb28f0231a6ba7e1cab\nparent fab15ff70e8db26942db83a9aab7ebf974e8b6b2\nauthor MarcoFalke <falke.marco@gmail.com> 1550254444 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550254464 -0500\n\nMerge #15399: fuzz: Script validation flags\n\nfab15ff70e fuzz: Script validation flags (MarcoFalke)\nfabcfa5f0c fuzz: Move deserialize tests to test/fuzz/deserialize.cpp (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 83c0cfeae0771b7ffe14e6b0eaeda06602b91f5bf4aa2f54fd4f7ef2350299679fd2d9339b02e43309bfddccc01d3aef25ce1a3d2c4f9b54f26e16e1249e05db\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95801902b987f13c4211ccb28f0231a6ba7e1cab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95801902b987f13c4211ccb28f0231a6ba7e1cab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95801902b987f13c4211ccb28f0231a6ba7e1cab"
      },
      {
        "sha": "fab15ff70e8db26942db83a9aab7ebf974e8b6b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab15ff70e8db26942db83a9aab7ebf974e8b6b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab15ff70e8db26942db83a9aab7ebf974e8b6b2"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 110,
      "deletions": 20
    },
    "files": [
      {
        "sha": "84bc326cfe5353974e7ecbfbe6722177f1f625c7",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 38,
        "deletions": 20,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
        "patch": "@@ -20,6 +20,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/inv_deserialize \\\n   test/fuzz/messageheader_deserialize \\\n   test/fuzz/netaddr_deserialize \\\n+  test/fuzz/script_flags \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/transaction_deserialize \\\n   test/fuzz/txoutcompressor_deserialize \\\n@@ -172,7 +173,7 @@ test_test_bitcoin_LDADD += $(ZMQ_LIBS)\n endif\n \n if ENABLE_FUZZ\n-test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_DESERIALIZE=1\n test_fuzz_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -189,7 +190,7 @@ test_fuzz_block_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_block_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTRANSACTION_DESERIALIZE=1\n test_fuzz_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -206,7 +207,7 @@ test_fuzz_transaction_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_transaction_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blocklocator_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blocklocator_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blocklocator_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKLOCATOR_DESERIALIZE=1\n test_fuzz_blocklocator_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blocklocator_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -223,7 +224,7 @@ test_fuzz_blocklocator_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blocklocator_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blockmerkleroot_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blockmerkleroot_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blockmerkleroot_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKMERKLEROOT=1\n test_fuzz_blockmerkleroot_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blockmerkleroot_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -240,7 +241,7 @@ test_fuzz_blockmerkleroot_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blockmerkleroot_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_addrman_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_addrman_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_addrman_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRMAN_DESERIALIZE=1\n test_fuzz_addrman_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_addrman_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -257,7 +258,7 @@ test_fuzz_addrman_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_addrman_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blockheader_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blockheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blockheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKHEADER_DESERIALIZE=1\n test_fuzz_blockheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blockheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -274,7 +275,7 @@ test_fuzz_blockheader_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blockheader_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_banentry_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_banentry_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_banentry_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBANENTRY_DESERIALIZE=1\n test_fuzz_banentry_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_banentry_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -291,7 +292,7 @@ test_fuzz_banentry_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_banentry_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_txundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXUNDO_DESERIALIZE=1\n test_fuzz_txundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_txundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -308,7 +309,7 @@ test_fuzz_txundo_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_txundo_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blockundo_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blockundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blockundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKUNDO_DESERIALIZE=1\n test_fuzz_blockundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blockundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -325,7 +326,7 @@ test_fuzz_blockundo_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blockundo_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_coins_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_coins_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_coins_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DCOINS_DESERIALIZE=1\n test_fuzz_coins_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_coins_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -342,7 +343,7 @@ test_fuzz_coins_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_coins_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_netaddr_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DNETADDR_DESERIALIZE=1\n test_fuzz_netaddr_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_netaddr_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -359,7 +360,24 @@ test_fuzz_netaddr_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_netaddr_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_script_flags_SOURCES = $(FUZZ_SUITE) test/fuzz/script_flags.cpp\n+test_fuzz_script_flags_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_flags_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_flags_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_flags_LDADD = \\\n+ $(LIBUNIVALUE) \\\n+ $(LIBBITCOIN_SERVER) \\\n+ $(LIBBITCOIN_COMMON) \\\n+ $(LIBBITCOIN_UTIL) \\\n+ $(LIBBITCOIN_CONSENSUS) \\\n+ $(LIBBITCOIN_CRYPTO) \\\n+ $(LIBBITCOIN_CRYPTO_SSE41) \\\n+ $(LIBBITCOIN_CRYPTO_AVX2) \\\n+ $(LIBBITCOIN_CRYPTO_SHANI) \\\n+ $(LIBSECP256K1)\n+test_fuzz_script_flags_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n+\n+test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_service_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -376,7 +394,7 @@ test_fuzz_service_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_service_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_messageheader_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_messageheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_messageheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGEHEADER_DESERIALIZE=1\n test_fuzz_messageheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_messageheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -393,7 +411,7 @@ test_fuzz_messageheader_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_messageheader_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_address_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_address_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_address_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRESS_DESERIALIZE=1\n test_fuzz_address_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -410,7 +428,7 @@ test_fuzz_address_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_address_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_inv_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DINV_DESERIALIZE=1\n test_fuzz_inv_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_inv_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -427,7 +445,7 @@ test_fuzz_inv_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_inv_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_bloomfilter_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_bloomfilter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_bloomfilter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOOMFILTER_DESERIALIZE=1\n test_fuzz_bloomfilter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_bloomfilter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -444,7 +462,7 @@ test_fuzz_bloomfilter_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_bloomfilter_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_diskblockindex_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_diskblockindex_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_diskblockindex_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DDISKBLOCKINDEX_DESERIALIZE=1\n test_fuzz_diskblockindex_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_diskblockindex_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -461,7 +479,7 @@ test_fuzz_diskblockindex_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_diskblockindex_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_txoutcompressor_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -478,7 +496,7 @@ test_fuzz_txoutcompressor_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_txoutcompressor_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blocktransactions_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blocktransactions_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blocktransactions_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONS_DESERIALIZE=1\n test_fuzz_blocktransactions_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blocktransactions_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -495,7 +513,7 @@ test_fuzz_blocktransactions_deserialize_LDADD = \\\n  $(LIBSECP256K1)\n test_fuzz_blocktransactions_deserialize_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n \n-test_fuzz_blocktransactionsrequest_deserialize_SOURCES = $(FUZZ_SUITE) test/test_bitcoin_fuzzy.cpp\n+test_fuzz_blocktransactionsrequest_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_blocktransactionsrequest_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONSREQUEST_DESERIALIZE=1\n test_fuzz_blocktransactionsrequest_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_blocktransactionsrequest_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "859fba0bdc19dfb0024bd16e02091c4419d753ed",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
        "previous_filename": "src/test/test_bitcoin_fuzzy.cpp"
      },
      {
        "sha": "2c0bfa360c7ee814b3488c714827f01330f77008",
        "filename": "src/test/fuzz/script_flags.cpp",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85/src/test/fuzz/script_flags.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85/src/test/fuzz/script_flags.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_flags.cpp?ref=743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
        "patch": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <streams.h>\n+#include <version.h>\n+\n+#include <test/fuzz/fuzz.h>\n+\n+/** Flags that are not forbidden by an assert */\n+static bool IsValidFlagCombination(unsigned flags);\n+\n+void test_one_input(std::vector<uint8_t> buffer)\n+{\n+    CDataStream ds(buffer, SER_NETWORK, INIT_PROTO_VERSION);\n+    try {\n+        int nVersion;\n+        ds >> nVersion;\n+        ds.SetVersion(nVersion);\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+\n+    try {\n+        const CTransaction tx(deserialize, ds);\n+        const PrecomputedTransactionData txdata(tx);\n+\n+        unsigned int verify_flags;\n+        ds >> verify_flags;\n+\n+        if (!IsValidFlagCombination(verify_flags)) return;\n+\n+        unsigned int fuzzed_flags;\n+        ds >> fuzzed_flags;\n+\n+        for (unsigned i = 0; i < tx.vin.size(); ++i) {\n+            CTxOut prevout;\n+            ds >> prevout;\n+\n+            const TransactionSignatureChecker checker{&tx, i, prevout.nValue, txdata};\n+\n+            ScriptError serror;\n+            const bool ret = VerifyScript(tx.vin.at(i).scriptSig, prevout.scriptPubKey, &tx.vin.at(i).scriptWitness, verify_flags, checker, &serror);\n+            assert(ret == (serror == SCRIPT_ERR_OK));\n+\n+            // Verify that removing flags from a passing test or adding flags to a failing test does not change the result\n+            if (ret) {\n+                verify_flags &= ~fuzzed_flags;\n+            } else {\n+                verify_flags |= fuzzed_flags;\n+            }\n+            if (!IsValidFlagCombination(verify_flags)) return;\n+\n+            ScriptError serror_fuzzed;\n+            const bool ret_fuzzed = VerifyScript(tx.vin.at(i).scriptSig, prevout.scriptPubKey, &tx.vin.at(i).scriptWitness, verify_flags, checker, &serror_fuzzed);\n+            assert(ret_fuzzed == (serror_fuzzed == SCRIPT_ERR_OK));\n+\n+            assert(ret_fuzzed == ret);\n+        }\n+    } catch (const std::ios_base::failure&) {\n+        return;\n+    }\n+}\n+\n+static bool IsValidFlagCombination(unsigned flags)\n+{\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK && ~flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) return false;\n+    if (flags & SCRIPT_VERIFY_WITNESS && ~flags & SCRIPT_VERIFY_P2SH) return false;\n+    return true;\n+}"
      }
    ]
  },
  {
    "sha": "7344a7b9984b99882e136efc8ad48fb31740df93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzQ0YTdiOTk4NGI5OTg4MmUxMzZlZmM4YWQ0OGZiMzE3NDBkZjkz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-21T00:08:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "message": "Implement utxoupdatepsbt RPC and tests",
      "tree": {
        "sha": "a3f3914903f06d765ca78ed072a875bd9081da9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3f3914903f06d765ca78ed072a875bd9081da9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7344a7b9984b99882e136efc8ad48fb31740df93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7344a7b9984b99882e136efc8ad48fb31740df93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7344a7b9984b99882e136efc8ad48fb31740df93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7344a7b9984b99882e136efc8ad48fb31740df93/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b1c7a9d6aefcf5c6022dde6956aec6cbc7f205"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 93,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2adfd0c0fc5fcad19975ad653f8cb6a98a535603",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7344a7b9984b99882e136efc8ad48fb31740df93/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7344a7b9984b99882e136efc8ad48fb31740df93/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7344a7b9984b99882e136efc8ad48fb31740df93",
        "patch": "@@ -1691,6 +1691,70 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                            actor (function)            argNames\n@@ -1709,6 +1773,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"finalizepsbt\",                 &finalizepsbt,              {\"psbt\", \"extract\"} },\n     { \"rawtransactions\",    \"createpsbt\",                   &createpsbt,                {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n+    { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\"} },\n \n     { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },"
      },
      {
        "sha": "28507267ce57038ff95f8f9693cbe3d283385f11",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 28,
        "deletions": 1,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7344a7b9984b99882e136efc8ad48fb31740df93/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7344a7b9984b99882e136efc8ad48fb31740df93/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=7344a7b9984b99882e136efc8ad48fb31740df93",
        "patch": "@@ -20,7 +20,7 @@ def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[], [\"-txindex\"], [\"-txindex\"]]\n+        self.extra_args = [[\"-txindex\"], [\"-txindex\"], [\"-txindex\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -296,5 +296,32 @@ def run_test(self):\n         # Test decoding error: invalid base64\n         assert_raises_rpc_error(-22, \"TX decode failed invalid base64\", self.nodes[0].decodepsbt, \";definitely not base64;\")\n \n+        # Send to all types of addresses\n+        addr1 = self.nodes[1].getnewaddress(\"\", \"bech32\")\n+        txid1 = self.nodes[0].sendtoaddress(addr1, 11)\n+        vout1 = find_output(self.nodes[0], txid1, 11)\n+        addr2 = self.nodes[1].getnewaddress(\"\", \"legacy\")\n+        txid2 = self.nodes[0].sendtoaddress(addr2, 11)\n+        vout2 = find_output(self.nodes[0], txid2, 11)\n+        addr3 = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid3 = self.nodes[0].sendtoaddress(addr3, 11)\n+        vout3 = find_output(self.nodes[0], txid3, 11)\n+        self.sync_all()\n+\n+        # Update a PSBT with UTXOs from the node\n+        # Bech32 inputs should be filled with witness UTXO. Other inputs should not be filled because they are non-witness\n+        psbt = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1},{\"txid\":txid2, \"vout\":vout2},{\"txid\":txid3, \"vout\":vout3}], {self.nodes[0].getnewaddress():32.999})\n+        decoded = self.nodes[1].decodepsbt(psbt)\n+        assert \"witness_utxo\" not in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+        updated = self.nodes[1].utxoupdatepsbt(psbt)\n+        decoded = self.nodes[1].decodepsbt(updated)\n+        assert \"witness_utxo\" in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+\n+\n+\n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "08f749c9147a5f3fdbbd880e0974b97084429002",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGY3NDljOTE0N2E1ZjNmZGJiZDg4MGUwOTc0Yjk3MDg0NDI5MDAy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-21T01:24:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "message": "Implement joinpsbts RPC and tests\n\nAdds a joinpsbts RPC which combines multiple distinct PSBTs into\none PSBT.",
      "tree": {
        "sha": "b54ee7d58a907acbe39af79fd2e8d226a2b520fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b54ee7d58a907acbe39af79fd2e8d226a2b520fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08f749c9147a5f3fdbbd880e0974b97084429002",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08f749c9147a5f3fdbbd880e0974b97084429002",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08f749c9147a5f3fdbbd880e0974b97084429002",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08f749c9147a5f3fdbbd880e0974b97084429002/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7344a7b9984b99882e136efc8ad48fb31740df93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7344a7b9984b99882e136efc8ad48fb31740df93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7344a7b9984b99882e136efc8ad48fb31740df93"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 115,
      "deletions": 0
    },
    "files": [
      {
        "sha": "424b92cfb5c2e56e43eff18175c4cdbac9cbf233",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -42,6 +42,26 @@ bool PartiallySignedTransaction::IsSane() const\n     return true;\n }\n \n+bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)\n+{\n+    if (std::find(tx->vin.begin(), tx->vin.end(), txin) != tx->vin.end()) {\n+        return false;\n+    }\n+    tx->vin.push_back(txin);\n+    psbtin.partial_sigs.clear();\n+    psbtin.final_script_sig.clear();\n+    psbtin.final_script_witness.SetNull();\n+    inputs.push_back(psbtin);\n+    return true;\n+}\n+\n+bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput& psbtout)\n+{\n+    tx->vout.push_back(txout);\n+    outputs.push_back(psbtout);\n+    return true;\n+}\n+\n bool PSBTInput::IsNull() const\n {\n     return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();"
      },
      {
        "sha": "982fb803d59f83b4c4720689432af4ca955a3da0",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -389,6 +389,8 @@ struct PartiallySignedTransaction\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n     NODISCARD bool Merge(const PartiallySignedTransaction& psbt);\n     bool IsSane() const;\n+    bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n+    bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);"
      },
      {
        "sha": "1cdc9f87a769de188acc46d20c96960775487ba8",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -112,6 +112,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createpsbt\", 2, \"locktime\" },\n     { \"createpsbt\", 3, \"replaceable\" },\n     { \"combinepsbt\", 0, \"txs\"},\n+    { \"joinpsbts\", 0, \"txs\"},\n     { \"finalizepsbt\", 1, \"extract\"},\n     { \"converttopsbt\", 1, \"permitsigdata\"},\n     { \"converttopsbt\", 2, \"iswitness\"},"
      },
      {
        "sha": "866158e003d46413bc162462890f3064c88ef6bf",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -1755,6 +1755,80 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                    }}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                            actor (function)            argNames\n@@ -1774,6 +1848,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"createpsbt\",                   &createpsbt,                {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n     { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\"} },\n+    { \"rawtransactions\",    \"joinpsbts\",                    &joinpsbts,                 {\"txs\"} },\n \n     { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },"
      },
      {
        "sha": "f1538b34a8aff2f0ab69a03a8316a5727ea76e3b",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08f749c9147a5f3fdbbd880e0974b97084429002/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08f749c9147a5f3fdbbd880e0974b97084429002/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=08f749c9147a5f3fdbbd880e0974b97084429002",
        "patch": "@@ -321,6 +321,23 @@ def run_test(self):\n         assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n         assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n \n+        # Two PSBTs with a common input should not be joinable\n+        psbt1 = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1}], {self.nodes[0].getnewaddress():Decimal('10.999')})\n+        assert_raises_rpc_error(-8, \"exists in multiple PSBTs\", self.nodes[1].joinpsbts, [psbt1, updated])\n+\n+        # Join two distinct PSBTs\n+        addr4 = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid4 = self.nodes[0].sendtoaddress(addr4, 5)\n+        vout4 = find_output(self.nodes[0], txid4, 5)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+        psbt2 = self.nodes[1].createpsbt([{\"txid\":txid4, \"vout\":vout4}], {self.nodes[0].getnewaddress():Decimal('4.999')})\n+        psbt2 = self.nodes[1].walletprocesspsbt(psbt2)['psbt']\n+        psbt2_decoded = self.nodes[0].decodepsbt(psbt2)\n+        assert \"final_scriptwitness\" in psbt2_decoded['inputs'][0] and \"final_scriptSig\" in psbt2_decoded['inputs'][0]\n+        joined = self.nodes[0].joinpsbts([psbt, psbt2])\n+        joined_decoded = self.nodes[0].decodepsbt(joined)\n+        assert len(joined_decoded['inputs']) == 4 and len(joined_decoded['outputs']) == 2 and \"final_scriptwitness\" not in joined_decoded['inputs'][3] and \"final_scriptSig\" not in joined_decoded['inputs'][3]\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "cb40b3abd4514361a024a1e7a1a281da9261261b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjQwYjNhYmQ0NTE0MzYxYTAyNGExZTdhMWEyODFkYTkyNjEyNjFi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-01T00:57:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "message": "Figure out what is missing during signing\n\nWhen signing an input, figure out what was requested for but was unable\nto be found and store it in a SignatureData.\n\nReturn this information in SignPSBTInput.",
      "tree": {
        "sha": "0bfab83a9b752625a3ee28022318a96a7df5c0a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bfab83a9b752625a3ee28022318a96a7df5c0a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb40b3abd4514361a024a1e7a1a281da9261261b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb40b3abd4514361a024a1e7a1a281da9261261b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb40b3abd4514361a024a1e7a1a281da9261261b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb40b3abd4514361a024a1e7a1a281da9261261b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08f749c9147a5f3fdbbd880e0974b97084429002",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08f749c9147a5f3fdbbd880e0974b97084429002",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08f749c9147a5f3fdbbd880e0974b97084429002"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 34,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0734edcf8e9669d11ceeffc62d726b4535da5b53",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb40b3abd4514361a024a1e7a1a281da9261261b/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb40b3abd4514361a024a1e7a1a281da9261261b/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=cb40b3abd4514361a024a1e7a1a281da9261261b",
        "patch": "@@ -191,13 +191,12 @@ void PSBTOutput::Merge(const PSBTOutput& output)\n     if (redeem_script.empty() && !output.redeem_script.empty()) redeem_script = output.redeem_script;\n     if (witness_script.empty() && !output.witness_script.empty()) witness_script = output.witness_script;\n }\n-\n bool PSBTInputSigned(PSBTInput& input)\n {\n     return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash)\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, SignatureData* out_sigdata, bool use_dummy)\n {\n     PSBTInput& input = psbt.inputs.at(index);\n     const CMutableTransaction& tx = *psbt.tx;\n@@ -237,9 +236,14 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n         return false;\n     }\n \n-    MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n     sigdata.witness = false;\n-    bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    bool sig_complete;\n+    if (use_dummy) {\n+        sig_complete = ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, utxo.scriptPubKey, sigdata);\n+    } else {\n+        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+        sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    }\n     // Verify that a witness signature was produced in case one was required.\n     if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n@@ -250,6 +254,14 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n         input.non_witness_utxo = nullptr;\n     }\n \n+    // Fill in the missing info\n+    if (out_sigdata) {\n+        out_sigdata->missing_pubkeys = sigdata.missing_pubkeys;\n+        out_sigdata->missing_sigs = sigdata.missing_sigs;\n+        out_sigdata->missing_redeem_script = sigdata.missing_redeem_script;\n+        out_sigdata->missing_witness_script = sigdata.missing_witness_script;\n+    }\n+\n     return sig_complete;\n }\n "
      },
      {
        "sha": "cc4882c5800226e655897e16fc9dd92b99de6bed",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb40b3abd4514361a024a1e7a1a281da9261261b/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb40b3abd4514361a024a1e7a1a281da9261261b/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=cb40b3abd4514361a024a1e7a1a281da9261261b",
        "patch": "@@ -544,7 +544,7 @@ struct PartiallySignedTransaction\n bool PSBTInputSigned(PSBTInput& input);\n \n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL);\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool use_dummy = false);\n \n /**\n  * Finalizes a PSBT if possible, combining partial signatures."
      },
      {
        "sha": "320956d0c4c6bba943b4d0441e63852e8e1fa4e1",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb40b3abd4514361a024a1e7a1a281da9261261b/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb40b3abd4514361a024a1e7a1a281da9261261b/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=cb40b3abd4514361a024a1e7a1a281da9261261b",
        "patch": "@@ -83,6 +83,8 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n         assert(i.second);\n         return true;\n     }\n+    // Could not make signature or signature not found, add keyid to missing\n+    sigdata.missing_sigs.push_back(keyid);\n     return false;\n }\n \n@@ -116,17 +118,24 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     case TX_PUBKEYHASH: {\n         CKeyID keyID = CKeyID(uint160(vSolutions[0]));\n         CPubKey pubkey;\n-        if (!GetPubKey(provider, sigdata, keyID, pubkey)) return false;\n+        if (!GetPubKey(provider, sigdata, keyID, pubkey)) {\n+            // Pubkey could not be found, add to missing\n+            sigdata.missing_pubkeys.push_back(keyID);\n+            return false;\n+        }\n         if (!CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) return false;\n         ret.push_back(std::move(sig));\n         ret.push_back(ToByteVector(pubkey));\n         return true;\n     }\n     case TX_SCRIPTHASH:\n-        if (GetCScript(provider, sigdata, uint160(vSolutions[0]), scriptRet)) {\n+        h160 = uint160(vSolutions[0]);\n+        if (GetCScript(provider, sigdata, h160, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n+        // Could not find redeemScript, add to missing\n+        sigdata.missing_redeem_script = h160;\n         return false;\n \n     case TX_MULTISIG: {\n@@ -154,6 +163,8 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n+        // Could not find witnessScript, add to missing\n+        sigdata.missing_witness_script = uint256(vSolutions[0]);\n         return false;\n \n     default:"
      },
      {
        "sha": "e229c375c762f30450c240e1f3bdd318c6e26f3e",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb40b3abd4514361a024a1e7a1a281da9261261b/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb40b3abd4514361a024a1e7a1a281da9261261b/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=cb40b3abd4514361a024a1e7a1a281da9261261b",
        "patch": "@@ -117,6 +117,10 @@ struct SignatureData {\n     CScriptWitness scriptWitness; ///< The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.\n     std::map<CKeyID, SigPair> signatures; ///< BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> misc_pubkeys;\n+    std::vector<CKeyID> missing_pubkeys; ///< KeyIDs of pubkeys which could not be found\n+    std::vector<CKeyID> missing_sigs; ///< KeyIDs of pubkeys for signatures which could not be found\n+    uint160 missing_redeem_script; ///< ScriptID of the missing redeemScript (if any)\n+    uint256 missing_witness_script; ///< SHA256 of the missing witnessScript (if any)\n \n     SignatureData() {}\n     explicit SignatureData(const CScript& script) : scriptSig(script) {}"
      }
    ]
  },
  {
    "sha": "77542cf2a5f8abb97dd46f782c1b0199cc062033",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzU0MmNmMmE1ZjhhYmI5N2RkNDZmNzgyYzFiMDE5OWNjMDYyMDMz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-01T00:56:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T05:04:27Z"
      },
      "message": "Move PSBT UTXO fetching to a separate method",
      "tree": {
        "sha": "9afe02a12ae92cb9594d46f3d3e682f26c26551c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9afe02a12ae92cb9594d46f3d3e682f26c26551c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77542cf2a5f8abb97dd46f782c1b0199cc062033",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb40b3abd4514361a024a1e7a1a281da9261261b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb40b3abd4514361a024a1e7a1a281da9261261b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb40b3abd4514361a024a1e7a1a281da9261261b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "32fb459decfc60f75765a28f07a95ef68b9f588b",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77542cf2a5f8abb97dd46f782c1b0199cc062033/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77542cf2a5f8abb97dd46f782c1b0199cc062033/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=77542cf2a5f8abb97dd46f782c1b0199cc062033",
        "patch": "@@ -62,6 +62,20 @@ bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput\n     return true;\n }\n \n+bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index) const\n+{\n+    PSBTInput input = inputs[input_index];\n+    int prevout_index = tx->vin[input_index].prevout.n;\n+    if (input.non_witness_utxo) {\n+        utxo = input.non_witness_utxo->vout[prevout_index];\n+    } else if (!input.witness_utxo.IsNull()) {\n+        utxo = input.witness_utxo;\n+    } else {\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool PSBTInput::IsNull() const\n {\n     return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();"
      },
      {
        "sha": "27b0aedd055e184866da898ac0e3696801480596",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77542cf2a5f8abb97dd46f782c1b0199cc062033/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77542cf2a5f8abb97dd46f782c1b0199cc062033/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=77542cf2a5f8abb97dd46f782c1b0199cc062033",
        "patch": "@@ -394,6 +394,14 @@ struct PartiallySignedTransaction\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n+    /**\n+     * Finds the UTXO for a given input index\n+     *\n+     * @param[out] utxo The UTXO of the input if found\n+     * @param[in] input_index Index of the input to retrieve the UTXO of\n+     * @return Whether the UTXO for the specified input was found\n+     */\n+    bool GetInputUTXO(CTxOut& utxo, int input_index) const;\n \n     template <typename Stream>\n     inline void Serialize(Stream& s) const {"
      }
    ]
  },
  {
    "sha": "3b40bff9880e9ae2817136b7d14989afccfc1937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjQwYmZmOTg4MGU5YWUyODE3MTM2YjdkMTQ5ODlhZmNjZmMxOTM3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-07T02:08:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-16T06:36:05Z"
      },
      "message": "Descriptor checksum",
      "tree": {
        "sha": "65325ad0dbdda14e32704dfff400196aa13d04b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65325ad0dbdda14e32704dfff400196aa13d04b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b40bff9880e9ae2817136b7d14989afccfc1937",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b40bff9880e9ae2817136b7d14989afccfc1937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b40bff9880e9ae2817136b7d14989afccfc1937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b40bff9880e9ae2817136b7d14989afccfc1937/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85"
      }
    ],
    "stats": {
      "total": 271,
      "additions": 251,
      "deletions": 20
    },
    "files": [
      {
        "sha": "43448d7222e29898178a638ff340dd6117447e66",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 141,
        "deletions": 3,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b40bff9880e9ae2817136b7d14989afccfc1937/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b40bff9880e9ae2817136b7d14989afccfc1937/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=3b40bff9880e9ae2817136b7d14989afccfc1937",
        "patch": "@@ -20,6 +20,125 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the\n+// following properties:\n+// * Mistakes in a descriptor string are measured in \"symbol errors\". The higher\n+//   the number of symbol errors, the harder it is to detect:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n+//     another in that set always counts as 1 symbol error.\n+//     * Note that hex encoded keys are covered by these characters. Xprvs and\n+//       xpubs use other characters too, but already have their own checksum\n+//       mechanism.\n+//     * Function names like \"multi()\" use other characters, but mistakes in\n+//       these would generally result in an unparseable descriptor.\n+//   * A case error always counts as 1 symbol error.\n+//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";\n+\n+    /** The character set for the checksum itself (same as bech32). */\n+    static std::string CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+    uint64_t c = 1;\n+    int cls = 0;\n+    int clscount = 0;\n+    for (auto ch : span) {\n+        auto pos = INPUT_CHARSET.find(ch);\n+        if (pos == std::string::npos) return \"\";\n+        c = PolyMod(c, pos & 31); // Emit a symbol for the position inside the group, for every character.\n+        cls = cls * 3 + (pos >> 5); // Accumulate the group numbers\n+        if (++clscount == 3) {\n+            // Emit an extra symbol representing the group numbers, for every 3 characters.\n+            c = PolyMod(c, cls);\n+            cls = 0;\n+            clscount = 0;\n+        }\n+    }\n+    if (clscount > 0) c = PolyMod(c, cls);\n+    for (int j = 0; j < 8; ++j) c = PolyMod(c, 0); // Shift further to determine the checksum.\n+    c ^= 1; // Prevent appending zeroes from not affecting the checksum.\n+\n+    std::string ret(8, ' ');\n+    for (int j = 0; j < 8; ++j) ret[j] = CHECKSUM_CHARSET[(c >> (5 * (7 - j))) & 31];\n+    return ret;\n+}\n+\n+std::string AddChecksum(const std::string& str) { return str + \"#\" + DescriptorChecksum(MakeSpan(str)); }\n+\n ////////////////////////////////////////////////////////////////////////////\n // Internal representation                                                //\n ////////////////////////////////////////////////////////////////////////////\n@@ -273,10 +392,15 @@ class DescriptorImpl : public Descriptor\n     {\n         std::string ret;\n         ToStringHelper(nullptr, ret, false);\n-        return ret;\n+        return AddChecksum(ret);\n     }\n \n-    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override final { return ToStringHelper(&arg, out, true); }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override final\n+    {\n+        bool ret = ToStringHelper(&arg, out, true);\n+        out = AddChecksum(out);\n+        return ret;\n+    }\n \n     bool ExpandHelper(int pos, const SigningProvider& arg, Span<const unsigned char>* cache_read, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache_write) const\n     {\n@@ -751,11 +875,25 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n     return MakeUnique<RawDescriptor>(script);\n }\n \n+\n } // namespace\n \n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out)\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());\n+\n+    // Checksum checks\n+    auto check_split = Split(sp, '#');\n+    if (check_split.size() > 2) return nullptr; // Multiple '#' symbols\n+    if (check_split.size() == 1 && require_checksum) return nullptr; // Missing checksum\n+    if (check_split.size() == 2) {\n+        if (check_split[1].size() != 8) return nullptr; // Unexpected length for checksum\n+        auto checksum = DescriptorChecksum(check_split[0]);\n+        if (checksum.empty()) return nullptr; // Invalid characters in payload\n+        if (!std::equal(checksum.begin(), checksum.end(), check_split[1].begin())) return nullptr; // Checksum mismatch\n+    }\n+    sp = check_split[0];\n+\n     auto ret = ParseScript(sp, ParseScriptContext::TOP, out);\n     if (sp.size() == 0 && ret) return std::unique_ptr<Descriptor>(std::move(ret));\n     return nullptr;"
      },
      {
        "sha": "907a102284c54af4bc9f0ffcfae7bbf6080e7c52",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b40bff9880e9ae2817136b7d14989afccfc1937/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b40bff9880e9ae2817136b7d14989afccfc1937/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=3b40bff9880e9ae2817136b7d14989afccfc1937",
        "patch": "@@ -62,8 +62,15 @@ struct Descriptor {\n     virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n };\n \n-/** Parse a descriptor string. Included private keys are put in out. Returns nullptr if parsing fails. */\n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out);\n+/** Parse a descriptor string. Included private keys are put in out.\n+ *\n+ * If the descriptor has a checksum, it must be valid. If require_checksum\n+ * is set, the checksum is mandatory - otherwise it is optional.\n+ *\n+ * If a parse error occurs, or the checksum is missing/invalid, or anything\n+ * else is wrong, nullptr is returned.\n+ */\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum = false);\n \n /** Find a descriptor for the specified script, using information from provider where possible.\n  *"
      },
      {
        "sha": "ff2b8d4fc93431e8ec26972c12eb123d18352cde",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 6,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b40bff9880e9ae2817136b7d14989afccfc1937/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b40bff9880e9ae2817136b7d14989afccfc1937/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=3b40bff9880e9ae2817136b7d14989afccfc1937",
        "patch": "@@ -18,8 +18,8 @@ void CheckUnparsable(const std::string& prv, const std::string& pub)\n     FlatSigningProvider keys_priv, keys_pub;\n     auto parse_priv = Parse(prv, keys_priv);\n     auto parse_pub = Parse(pub, keys_pub);\n-    BOOST_CHECK(!parse_priv);\n-    BOOST_CHECK(!parse_pub);\n+    BOOST_CHECK_MESSAGE(!parse_priv, prv);\n+    BOOST_CHECK_MESSAGE(!parse_pub, pub);\n }\n \n constexpr int DEFAULT = 0;\n@@ -28,13 +28,26 @@ constexpr int HARDENED = 2; // Derivation needs access to private keys\n constexpr int UNSOLVABLE = 4; // This descriptor is not expected to be solvable\n constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)\n \n+/** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */\n+bool EqualDescriptor(std::string a, std::string b)\n+{\n+    bool a_check = (a.size() > 9 && a[a.size() - 9] == '#');\n+    bool b_check = (b.size() > 9 && b[b.size() - 9] == '#');\n+    if (a_check != b_check) {\n+        if (a_check) a = a.substr(0, a.size() - 9);\n+        if (b_check) b = b.substr(0, b.size() - 9);\n+    }\n+    return a == b;\n+}\n+\n std::string MaybeUseHInsteadOfApostrophy(std::string ret)\n {\n     if (InsecureRandBool()) {\n         while (true) {\n             auto it = ret.find(\"'\");\n             if (it != std::string::npos) {\n                 ret[it] = 'h';\n+                if (ret.size() > 9 && ret[ret.size() - 9] == '#') ret = ret.substr(0, ret.size() - 9); // Changing apostrophe to h breaks the checksum\n             } else {\n                 break;\n             }\n@@ -63,16 +76,16 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n     // Check that both versions serialize back to the public version.\n     std::string pub1 = parse_priv->ToString();\n     std::string pub2 = parse_pub->ToString();\n-    BOOST_CHECK_EQUAL(pub, pub1);\n-    BOOST_CHECK_EQUAL(pub, pub2);\n+    BOOST_CHECK(EqualDescriptor(pub, pub1));\n+    BOOST_CHECK(EqualDescriptor(pub, pub2));\n \n     // Check that both can be serialized with private key back to the private version, but not without private key.\n     std::string prv1;\n     BOOST_CHECK(parse_priv->ToPrivateString(keys_priv, prv1));\n-    BOOST_CHECK_EQUAL(prv, prv1);\n+    BOOST_CHECK(EqualDescriptor(prv, prv1));\n     BOOST_CHECK(!parse_priv->ToPrivateString(keys_pub, prv1));\n     BOOST_CHECK(parse_pub->ToPrivateString(keys_priv, prv1));\n-    BOOST_CHECK_EQUAL(prv, prv1);\n+    BOOST_CHECK(EqualDescriptor(prv, prv1));\n     BOOST_CHECK(!parse_pub->ToPrivateString(keys_pub, prv1));\n \n     // Check whether IsRange on both returns the expected result\n@@ -210,6 +223,15 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     CheckUnparsable(\"wsh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2SH inside P2WSH\n     CheckUnparsable(\"sh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2SH inside P2SH\n     CheckUnparsable(\"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2WSH inside P2WSH\n+\n+    // Checksums\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#\"); // Empty checksum\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfyq\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5tq\"); // Too long checksum\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxf\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5\"); // Too short checksum\n+    CheckUnparsable(\"sh(multi(3,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(3,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\"); // Error in payload\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggssrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjq09x4t\"); // Error in checksum\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "29074c6af3f0bdc8134b06432778af2d458dccc6",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b40bff9880e9ae2817136b7d14989afccfc1937/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b40bff9880e9ae2817136b7d14989afccfc1937/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=3b40bff9880e9ae2817136b7d14989afccfc1937",
        "patch": "@@ -97,9 +97,9 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n \n         # Test the reported descriptors for a few matches\n-        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/*)\", \"range\": 1499}])), [\"pkh([0c5f9a1e/0'/0'/0]026dbd8b2315f296d36e6b6920b1579ca75569464875c7ebe869b536a7d9503c8c)\", \"pkh([0c5f9a1e/0'/0'/1]033e6f25d76c00bedb3a8993c7d5739ee806397f0529b1b31dda31ef890f19a60c)\"])\n-        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"])), [\"pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)\"])\n-        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])), ['pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)', 'pkh([0c5f9a1e/1/1/1500]03832901c250025da2aebae2bfb38d5c703a57ab66ad477f9c578bfbcd78abca6f)', 'pkh([0c5f9a1e/1/1/1]030d820fc9e8211c4169be8530efbc632775d8286167afd178caaf1089b77daba7)'])\n+        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/*)\", \"range\": 1499}])), [\"pkh([0c5f9a1e/0'/0'/0]026dbd8b2315f296d36e6b6920b1579ca75569464875c7ebe869b536a7d9503c8c)#dzxw429x\", \"pkh([0c5f9a1e/0'/0'/1]033e6f25d76c00bedb3a8993c7d5739ee806397f0529b1b31dda31ef890f19a60c)#43rvceed\"])\n+        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"])), [\"pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)#cxmct4w8\"])\n+        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])), ['pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)#cxmct4w8', 'pkh([0c5f9a1e/1/1/1500]03832901c250025da2aebae2bfb38d5c703a57ab66ad477f9c578bfbcd78abca6f)#vchwd07g', 'pkh([0c5f9a1e/1/1/1]030d820fc9e8211c4169be8530efbc632775d8286167afd178caaf1089b77daba7)#z2t3ypsa'])\n \n if __name__ == '__main__':\n     ScantxoutsetTest().main()"
      },
      {
        "sha": "29482ce01e17cf96c219f424349fcbb814013a45",
        "filename": "test/functional/test_framework/descriptors.py",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b40bff9880e9ae2817136b7d14989afccfc1937/test/functional/test_framework/descriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b40bff9880e9ae2817136b7d14989afccfc1937/test/functional/test_framework/descriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/descriptors.py?ref=3b40bff9880e9ae2817136b7d14989afccfc1937",
        "patch": "@@ -0,0 +1,55 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Utility functions related to output descriptors\"\"\"\n+\n+INPUT_CHARSET = \"0123456789()[],'/*abcdefgh@:$%{}IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \"\n+CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n+GENERATOR = [0xf5dee51989, 0xa9fdca3312, 0x1bab10e32d, 0x3706b1677a, 0x644d626ffd]\n+\n+def descsum_polymod(symbols):\n+    \"\"\"Internal function that computes the descriptor checksum.\"\"\"\n+    chk = 1\n+    for value in symbols:\n+        top = chk >> 35\n+        chk = (chk & 0x7ffffffff) << 5 ^ value\n+        for i in range(5):\n+            chk ^= GENERATOR[i] if ((top >> i) & 1) else 0\n+    return chk\n+\n+def descsum_expand(s):\n+    \"\"\"Internal function that does the character to symbol expansion\"\"\"\n+    groups = []\n+    symbols = []\n+    for c in s:\n+        if not c in INPUT_CHARSET:\n+            return None\n+        v = INPUT_CHARSET.find(c)\n+        symbols.append(v & 31)\n+        groups.append(v >> 5)\n+        if len(groups) == 3:\n+            symbols.append(groups[0] * 9 + groups[1] * 3 + groups[2])\n+            groups = []\n+    if len(groups) == 1:\n+        symbols.append(groups[0])\n+    elif len(groups) == 2:\n+        symbols.append(groups[0] * 3 + groups[1])\n+    return symbols\n+\n+def descsum_create(s):\n+    \"\"\"Add a checksum to a descriptor without\"\"\"\n+    symbols = descsum_expand(s) + [0, 0, 0, 0, 0, 0, 0, 0]\n+    checksum = descsum_polymod(symbols) ^ 1\n+    return s + '#' + ''.join(CHECKSUM_CHARSET[(checksum >> (5 * (7 - i))) & 31] for i in range(8))\n+\n+def descsum_check(s, require=True):\n+    \"\"\"Verify that the checksum is correct in a descriptor\"\"\"\n+    if not '#' in s:\n+        return not require\n+    if s[-9] != '#':\n+        return False\n+    if not all(x in CHECKSUM_CHARSET for x in s[-8:]):\n+        return False\n+    symbols = descsum_expand(s[:-9]) + [CHECKSUM_CHARSET.find(x) for x in s[-8:]]\n+    return descsum_polymod(symbols) == 1"
      },
      {
        "sha": "027229111e092a3ce6f3ef75c565d91cfcb96d83",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b40bff9880e9ae2817136b7d14989afccfc1937/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b40bff9880e9ae2817136b7d14989afccfc1937/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=3b40bff9880e9ae2817136b7d14989afccfc1937",
        "patch": "@@ -54,6 +54,10 @@\n import itertools\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import (\n+    descsum_create,\n+    descsum_check,\n+)\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n@@ -167,24 +171,29 @@ def test_desc(self, node, address, multisig, typ, utxo):\n             assert_equal(deriv['path'][0], 'm')\n             key_descs[deriv['pubkey']] = '[' + deriv['master_fingerprint'] + deriv['path'][1:] + ']' + deriv['pubkey']\n \n+        # Verify the descriptor checksum against the Python implementation\n+        assert(descsum_check(info['desc']))\n+        # Verify that stripping the checksum and recreating it using Python roundtrips\n+        assert(info['desc'] == descsum_create(info['desc'][:-9]))\n+\n         if not multisig and typ == 'legacy':\n             # P2PKH\n-            assert_equal(info['desc'], \"pkh(%s)\" % key_descs[info['pubkey']])\n+            assert_equal(info['desc'], descsum_create(\"pkh(%s)\" % key_descs[info['pubkey']]))\n         elif not multisig and typ == 'p2sh-segwit':\n             # P2SH-P2WPKH\n-            assert_equal(info['desc'], \"sh(wpkh(%s))\" % key_descs[info['pubkey']])\n+            assert_equal(info['desc'], descsum_create(\"sh(wpkh(%s))\" % key_descs[info['pubkey']]))\n         elif not multisig and typ == 'bech32':\n             # P2WPKH\n-            assert_equal(info['desc'], \"wpkh(%s)\" % key_descs[info['pubkey']])\n+            assert_equal(info['desc'], descsum_create(\"wpkh(%s)\" % key_descs[info['pubkey']]))\n         elif typ == 'legacy':\n             # P2SH-multisig\n-            assert_equal(info['desc'], \"sh(multi(2,%s,%s))\" % (key_descs[info['pubkeys'][0]], key_descs[info['pubkeys'][1]]))\n+            assert_equal(info['desc'], descsum_create(\"sh(multi(2,%s,%s))\" % (key_descs[info['pubkeys'][0]], key_descs[info['pubkeys'][1]])))\n         elif typ == 'p2sh-segwit':\n             # P2SH-P2WSH-multisig\n-            assert_equal(info['desc'], \"sh(wsh(multi(2,%s,%s)))\" % (key_descs[info['embedded']['pubkeys'][0]], key_descs[info['embedded']['pubkeys'][1]]))\n+            assert_equal(info['desc'], descsum_create(\"sh(wsh(multi(2,%s,%s)))\" % (key_descs[info['embedded']['pubkeys'][0]], key_descs[info['embedded']['pubkeys'][1]])))\n         elif typ == 'bech32':\n             # P2WSH-multisig\n-            assert_equal(info['desc'], \"wsh(multi(2,%s,%s))\" % (key_descs[info['pubkeys'][0]], key_descs[info['pubkeys'][1]]))\n+            assert_equal(info['desc'], descsum_create(\"wsh(multi(2,%s,%s))\" % (key_descs[info['pubkeys'][0]], key_descs[info['pubkeys'][1]])))\n         else:\n             # Unknown type\n             assert(False)"
      }
    ]
  },
  {
    "sha": "b52cb6368869c9f6dd2cd8f309b3000de514d439",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTJjYjYzNjg4NjljOWY2ZGQyY2Q4ZjMwOWIzMDAwZGU1MTRkNDM5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-07T23:09:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-16T06:36:05Z"
      },
      "message": "Add getdescriptorinfo to compute checksum",
      "tree": {
        "sha": "0279131129fc6effa9b55d08a2e5c71eb1be1694",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0279131129fc6effa9b55d08a2e5c71eb1be1694"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b52cb6368869c9f6dd2cd8f309b3000de514d439",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b52cb6368869c9f6dd2cd8f309b3000de514d439",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b52cb6368869c9f6dd2cd8f309b3000de514d439",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b52cb6368869c9f6dd2cd8f309b3000de514d439/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b40bff9880e9ae2817136b7d14989afccfc1937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b40bff9880e9ae2817136b7d14989afccfc1937",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b40bff9880e9ae2817136b7d14989afccfc1937"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bfb86aa12b8ff6452853243885d2a3d4a5757510",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b52cb6368869c9f6dd2cd8f309b3000de514d439/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b52cb6368869c9f6dd2cd8f309b3000de514d439/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b52cb6368869c9f6dd2cd8f309b3000de514d439",
        "patch": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n+            },\n+            RPCResult{\n+            \"{\\n\"\n+            \"  \\\"descriptor\\\" : \\\"desc\\\",         (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n+            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n+            \"  \\\"hasprivatekeys\\\" : true|false, (boolean) Whether the input descriptor contained at least one private key\\n\"\n+            \"}\\n\"\n+            },\n+            RPCExamples{\n+                \"Analyse a descriptor\\n\" +\n+                HelpExampleCli(\"getdescriptorinfo\", \"\\\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\\\"\")\n+            }}.ToString()\n+        );\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(request.params[0].get_str(), provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"descriptor\", desc->ToString());\n+    result.pushKV(\"isrange\", desc->IsRange());\n+    result.pushKV(\"issolvable\", desc->IsSolvable());\n+    result.pushKV(\"hasprivatekeys\", provider.keys.size() > 0);\n+    return result;\n+}\n+\n UniValue deriveaddresses(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.empty() || request.params.size() > 3) {\n@@ -564,6 +604,7 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} },\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n     { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"begin\", \"end\"} },\n+    { \"util\",               \"getdescriptorinfo\",      &getdescriptorinfo,      {\"descriptor\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n "
      },
      {
        "sha": "380dd9c0ade0199254ab7fa5659f700521b5b936",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b52cb6368869c9f6dd2cd8f309b3000de514d439/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b52cb6368869c9f6dd2cd8f309b3000de514d439/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=b52cb6368869c9f6dd2cd8f309b3000de514d439",
        "patch": "@@ -175,6 +175,8 @@ def test_desc(self, node, address, multisig, typ, utxo):\n         assert(descsum_check(info['desc']))\n         # Verify that stripping the checksum and recreating it using Python roundtrips\n         assert(info['desc'] == descsum_create(info['desc'][:-9]))\n+        # Verify that stripping the checksum and feeding it to getdescriptorinfo roundtrips\n+        assert(info['desc'] == self.nodes[0].getdescriptorinfo(info['desc'][:-9])['descriptor'])\n \n         if not multisig and typ == 'legacy':\n             # P2PKH"
      }
    ]
  },
  {
    "sha": "be62903c417293f6217e124669e62fd2172a18f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTYyOTAzYzQxNzI5M2Y2MjE3ZTEyNDY2OWU2MmZkMjE3MmExOGYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-13T02:56:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-16T06:36:05Z"
      },
      "message": "Make descriptor checksums mandatory in deriveaddresses and importmulti",
      "tree": {
        "sha": "c2d6f7b222060e5a466fe933d18fd07f8ea4083b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2d6f7b222060e5a466fe933d18fd07f8ea4083b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be62903c417293f6217e124669e62fd2172a18f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be62903c417293f6217e124669e62fd2172a18f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be62903c417293f6217e124669e62fd2172a18f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be62903c417293f6217e124669e62fd2172a18f1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b52cb6368869c9f6dd2cd8f309b3000de514d439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b52cb6368869c9f6dd2cd8f309b3000de514d439",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b52cb6368869c9f6dd2cd8f309b3000de514d439"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 45,
      "deletions": 31
    },
    "files": [
      {
        "sha": "999a307e2b2e1b8c8ef2cbd492f7f49ff6753e35",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be62903c417293f6217e124669e62fd2172a18f1/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be62903c417293f6217e124669e62fd2172a18f1/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=be62903c417293f6217e124669e62fd2172a18f1",
        "patch": "@@ -207,7 +207,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             },\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n-                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\")\n+                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\\\" 0 2\")\n             }}.ToString()\n         );\n     }\n@@ -233,7 +233,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     }\n \n     FlatSigningProvider provider;\n-    auto desc = Parse(desc_str, provider);\n+    auto desc = Parse(desc_str, provider, /* require_checksum = */ true);\n     if (!desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n     }"
      },
      {
        "sha": "66a52c1270bfb06b97764b423a829df42e665511",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be62903c417293f6217e124669e62fd2172a18f1/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be62903c417293f6217e124669e62fd2172a18f1/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=be62903c417293f6217e124669e62fd2172a18f1",
        "patch": "@@ -1117,7 +1117,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n \n     const std::string& descriptor = data[\"desc\"].get_str();\n     FlatSigningProvider keys;\n-    auto parsed_desc = Parse(descriptor, keys);\n+    auto parsed_desc = Parse(descriptor, keys, /* require_checksum = */ true);\n     if (!parsed_desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Descriptor is invalid\");\n     }"
      },
      {
        "sha": "c8b58cfc74c8a73338fc491372979e5208ef00fa",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be62903c417293f6217e124669e62fd2172a18f1/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be62903c417293f6217e124669e62fd2172a18f1/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=be62903c417293f6217e124669e62fd2172a18f1",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the deriveaddresses rpc call.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class DeriveaddressesTest(BitcoinTestFramework):\n@@ -14,36 +15,37 @@ def set_test_params(self):\n     def run_test(self):\n         assert_raises_rpc_error(-5, \"Invalid descriptor\", self.nodes[0].deriveaddresses, \"a\")\n \n-        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)#t6wfjs64\"\n         address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n-\n         assert_equal(self.nodes[0].deriveaddresses(descriptor), [address])\n \n-        descriptor_pubkey = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)\"\n-        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n+        descriptor = descriptor[:-9]\n+        assert_raises_rpc_error(-5, \"Invalid descriptor\", self.nodes[0].deriveaddresses, descriptor)\n \n+        descriptor_pubkey = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)#s9ga3alw\"\n+        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n         assert_equal(self.nodes[0].deriveaddresses(descriptor_pubkey), [address])\n \n-        ranged_descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"\n+        ranged_descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)#kft60nuy\"\n         assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 0, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n \n-        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\", 0, 2)\n+        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"), 0, 2)\n \n-        assert_raises_rpc_error(-8, \"Range must be specified for a ranged descriptor\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\")\n+        assert_raises_rpc_error(-8, \"Range must be specified for a ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"))\n \n-        assert_raises_rpc_error(-8, \"Missing range end parameter\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", 0)\n+        assert_raises_rpc_error(-8, \"Missing range end parameter\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 0)\n \n-        assert_raises_rpc_error(-8, \"Range end should be equal to or greater than begin\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", 2, 0)\n+        assert_raises_rpc_error(-8, \"Range end should be equal to or greater than begin\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 2, 0)\n \n-        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", -1, 0)\n+        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), -1, 0)\n \n-        combo_descriptor = \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        combo_descriptor = descsum_create(\"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\")\n         assert_equal(self.nodes[0].deriveaddresses(combo_descriptor), [\"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", \"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", address, \"2NDvEwGfpEqJWfybzpKPHF2XH3jwoQV3D7x\"])\n \n-        hardened_without_privkey_descriptor = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1'/1/0)\"\n+        hardened_without_privkey_descriptor = descsum_create(\"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1'/1/0)\")\n         assert_raises_rpc_error(-5, \"Cannot derive script without private keys\", self.nodes[0].deriveaddresses, hardened_without_privkey_descriptor)\n \n-        bare_multisig_descriptor = \"multi(1, tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0, tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1)\"\n+        bare_multisig_descriptor = descsum_create(\"multi(1,tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0,tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1)\")\n         assert_raises_rpc_error(-5, \"Descriptor does not have a corresponding address\", self.nodes[0].deriveaddresses, bare_multisig_descriptor)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "8e25aa7337aa4277bcf21331fd2cd04e88b1401b",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 27,
        "deletions": 15,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be62903c417293f6217e124669e62fd2172a18f1/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be62903c417293f6217e124669e62fd2172a18f1/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=be62903c417293f6217e124669e62fd2172a18f1",
        "patch": "@@ -20,6 +20,7 @@\n     OP_NOP,\n )\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n@@ -545,11 +546,22 @@ def run_test(self):\n \n         # Test importing of a P2SH-P2WPKH address via descriptor + private key\n         key = get_key(self.nodes[0])\n-        self.log.info(\"Should import a p2sh-p2wpkh address from descriptor and private key\")\n+        self.log.info(\"Should not import a p2sh-p2wpkh address from descriptor without checksum and private key\")\n         self.test_importmulti({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n                                \"timestamp\": \"now\",\n                                \"label\": \"Descriptor import test\",\n                                \"keys\": [key.privkey]},\n+                              success=False,\n+                              error_code=-5,\n+                              error_message=\"Descriptor is invalid\")\n+\n+        # Test importing of a P2SH-P2WPKH address via descriptor + private key\n+        key = get_key(self.nodes[0])\n+        self.log.info(\"Should import a p2sh-p2wpkh address from descriptor and private key\")\n+        self.test_importmulti({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"label\": \"Descriptor import test\",\n+                               \"keys\": [key.privkey]},\n                               success=True)\n         test_address(self.nodes[1],\n                      key.p2sh_p2wpkh_addr,\n@@ -562,15 +574,15 @@ def run_test(self):\n         addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n         desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n         self.log.info(\"Ranged descriptor import should fail without a specified range\")\n-        self.test_importmulti({\"desc\": desc,\n+        self.test_importmulti({\"desc\": descsum_create(desc),\n                                \"timestamp\": \"now\"},\n                               success=False,\n                               error_code=-8,\n                               error_message='Descriptor is ranged, please specify the range')\n \n         # Test importing of a ranged descriptor without keys\n         self.log.info(\"Should import the ranged descriptor with specified range as solvable\")\n-        self.test_importmulti({\"desc\": desc,\n+        self.test_importmulti({\"desc\": descsum_create(desc),\n                                \"timestamp\": \"now\",\n                                \"range\": {\"end\": 1}},\n                               success=True,\n@@ -583,7 +595,7 @@ def run_test(self):\n         # Test importing of a P2PKH address via descriptor\n         key = get_key(self.nodes[0])\n         self.log.info(\"Should import a p2pkh address from descriptor\")\n-        self.test_importmulti({\"desc\": \"pkh(\" + key.pubkey + \")\",\n+        self.test_importmulti({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n                                \"timestamp\": \"now\",\n                                \"label\": \"Descriptor import test\"},\n                               True,\n@@ -597,7 +609,7 @@ def run_test(self):\n         # Test import fails if both desc and scriptPubKey are provided\n         key = get_key(self.nodes[0])\n         self.log.info(\"Import should fail if both scriptPubKey and desc are provided\")\n-        self.test_importmulti({\"desc\": \"pkh(\" + key.pubkey + \")\",\n+        self.test_importmulti({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n                                \"scriptPubKey\": {\"address\": key.p2pkh_addr},\n                                \"timestamp\": \"now\"},\n                               success=False,\n@@ -616,7 +628,7 @@ def run_test(self):\n         key1 = get_key(self.nodes[0])\n         key2 = get_key(self.nodes[0])\n         self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n-        self.test_importmulti({\"desc\": \"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\",\n+        self.test_importmulti({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n                                \"timestamp\": \"now\"},\n                               success=True)\n         self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n@@ -635,7 +647,7 @@ def run_test(self):\n         pub_fpr = info['hdmasterfingerprint']\n         result = self.nodes[0].importmulti(\n             [{\n-                'desc' : \"wpkh([\" + pub_fpr + pub_keypath[1:] +\"]\" + pub + \")\",\n+                'desc' : descsum_create(\"wpkh([\" + pub_fpr + pub_keypath[1:] +\"]\" + pub + \")\"),\n                 \"timestamp\": \"now\",\n             }]\n         )\n@@ -653,7 +665,7 @@ def run_test(self):\n         priv_fpr = info['hdmasterfingerprint']\n         result = self.nodes[0].importmulti(\n             [{\n-                'desc' : \"wpkh([\" + priv_fpr + priv_keypath[1:] + \"]\" + priv + \")\",\n+                'desc' : descsum_create(\"wpkh([\" + priv_fpr + priv_keypath[1:] + \"]\" + priv + \")\"),\n                 \"timestamp\": \"now\",\n             }]\n         )\n@@ -701,12 +713,12 @@ def run_test(self):\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wpkh(' + pub1 + ')',\n+                'desc': descsum_create('wpkh(' + pub1 + ')'),\n                 'keypool': True,\n                 \"timestamp\": \"now\",\n             },\n             {\n-                'desc': 'wpkh(' + pub2 + ')',\n+                'desc': descsum_create('wpkh(' + pub2 + ')'),\n                 'keypool': True,\n                 \"timestamp\": \"now\",\n             }]\n@@ -727,13 +739,13 @@ def run_test(self):\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wpkh(' + pub1 + ')',\n+                'desc': descsum_create('wpkh(' + pub1 + ')'),\n                 'keypool': True,\n                 'internal': True,\n                 \"timestamp\": \"now\",\n             },\n             {\n-                'desc': 'wpkh(' + pub2 + ')',\n+                'desc': descsum_create('wpkh(' + pub2 + ')'),\n                 'keypool': True,\n                 'internal': True,\n                 \"timestamp\": \"now\",\n@@ -755,7 +767,7 @@ def run_test(self):\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wsh(multi(2,' + pub1 + ',' + pub2 + '))',\n+                'desc': descsum_create('wsh(multi(2,' + pub1 + ',' + pub2 + '))'),\n                 'keypool': True,\n                 \"timestamp\": \"now\",\n             }]\n@@ -769,7 +781,7 @@ def run_test(self):\n         assert wrpc.getwalletinfo()['private_keys_enabled']\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wpkh(' + pub1 + ')',\n+                'desc': descsum_create('wpkh(' + pub1 + ')'),\n                 'keypool': True,\n                 \"timestamp\": \"now\",\n             }]\n@@ -792,7 +804,7 @@ def run_test(self):\n         ]\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wpkh([80002067/0h/0h]' + xpub + '/*)',\n+                'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n                 'keypool': True,\n                 'timestamp': 'now',\n                 'range' : {'start': 0, 'end': 4}"
      }
    ]
  },
  {
    "sha": "fd637be8d21a606e98c037b40b268c4a1fae2244",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDYzN2JlOGQyMWE2MDZlOThjMDM3YjQwYjI2OGM0YTFmYWUyMjQ0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-08T20:03:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-16T06:36:05Z"
      },
      "message": "Add checksums to descriptors.md",
      "tree": {
        "sha": "98328da74a98bd351fd526e3c04a78335432e5b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98328da74a98bd351fd526e3c04a78335432e5b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd637be8d21a606e98c037b40b268c4a1fae2244",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd637be8d21a606e98c037b40b268c4a1fae2244",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd637be8d21a606e98c037b40b268c4a1fae2244",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd637be8d21a606e98c037b40b268c4a1fae2244/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be62903c417293f6217e124669e62fd2172a18f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be62903c417293f6217e124669e62fd2172a18f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be62903c417293f6217e124669e62fd2172a18f1"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5dbcd95e1d0e89dfb38522cfbaaf6f2fdb16bf01",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd637be8d21a606e98c037b40b268c4a1fae2244/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd637be8d21a606e98c037b40b268c4a1fae2244/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=fd637be8d21a606e98c037b40b268c4a1fae2244",
        "patch": "@@ -39,7 +39,7 @@ Output descriptors currently support:\n \n ## Reference\n \n-Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+Descriptors consist of several types of expressions. The top level expression is either a `SCRIPT`, or `SCRIPT#CHECKSUM` where `CHECKSUM` is an 8-character alphanumeric descriptor checksum.\n \n `SCRIPT` expressions:\n - `sh(SCRIPT)` (top level only): P2SH embed the argument.\n@@ -169,3 +169,20 @@ existing Bitcoin Core wallets, a convenience function `combo` is\n provided, which takes as input a public key, and describes a set of P2PK,\n P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n uncompressed, the set only includes P2PK and P2PKH scripts.\n+\n+### Checksums\n+\n+Descriptors can optionally be suffixed with a checksum to protect against\n+typos or copy-paste errors.\n+\n+These checksums consist of 8 alphanumeric characters. As long as errors are\n+restricted to substituting characters in `0123456789()[],'/*abcdefgh@:$%{}`\n+for others in that set and changes in letter case, up to 4 errors will always\n+be detected in descriptors up to 501 characters, and up to 3 errors in longer\n+ones. For larger numbers of errors, or other types of errors, there is a\n+roughly 1 in a trillion chance of not detecting the errors.\n+\n+All RPCs in Bitcoin Core will include the checksum in their output. Only\n+certain RPCs require checksums on input, including `deriveaddress` and\n+`importmulti`. The checksum for a descriptor without one can be computed\n+using the `getdescriptorinfo` RPC."
      }
    ]
  },
  {
    "sha": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDA3MjllZjRiZjFiNmM2ZGExZWM3OTVlNDQxZDJjZTU2YTlhNThi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-01T00:58:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-16T16:51:02Z"
      },
      "message": "Implement analyzepsbt RPC and tests",
      "tree": {
        "sha": "f7984f7df6df66f36b45a8d9a0fc52b5edd10963",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7984f7df6df66f36b45a8d9a0fc52b5edd10963"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77542cf2a5f8abb97dd46f782c1b0199cc062033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77542cf2a5f8abb97dd46f782c1b0199cc062033",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77542cf2a5f8abb97dd46f782c1b0199cc062033"
      }
    ],
    "stats": {
      "total": 224,
      "additions": 223,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ac412074045b85cfd3808ab1a07a8158d059de6e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 198,
        "deletions": 0,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
        "patch": "@@ -7,6 +7,7 @@\n #include <coins.h>\n #include <compat/byteswap.h>\n #include <consensus/validation.h>\n+#include <consensus/tx_verify.h>\n #include <core_io.h>\n #include <index/txindex.h>\n #include <init.h>\n@@ -30,6 +31,8 @@\n #include <validation.h>\n #include <validationinterface.h>\n \n+\n+#include <numeric>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -1829,6 +1832,200 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"{\\n\"\n+                \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                \"    {\\n\"\n+                \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"signatures\\\" : [          (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                \"      }\\n\"\n+                \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                \"    }\\n\"\n+                \"    ,...\\n\"\n+                \"  ]\\n\"\n+                \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                \"}\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = true;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (!utxo.IsNull() && !PSBTInputSigned(input)) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            SignatureData outdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!outdata.missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!outdata.missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(outdata.missing_redeem_script));\n+                }\n+                if (!outdata.missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(outdata.missing_witness_script));\n+                }\n+                if (!outdata.missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (outdata.missing_pubkeys.empty() && outdata.missing_redeem_script.IsNull() && outdata.missing_witness_script.IsNull() && !outdata.missing_sigs.empty()) {\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    only_missing_sigs = false;\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else if (!utxo.IsNull()){\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        only_missing_sigs = false;\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = std::accumulate(psbtx.tx->vout.begin(), psbtx.tx->vout.end(), 0,\n+            [](int a, const CTxOut& b) {\n+                return a += b.nValue;\n+            }\n+        );\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+\n+        // Estimate the size\n+        CMutableTransaction mtx(*psbtx.tx);\n+        CCoinsView view_dummy;\n+        CCoinsViewCache view(&view_dummy);\n+        bool success = true;\n+\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs[i];\n+            if (SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true)) {\n+                mtx.vin[i].scriptSig = input.final_script_sig;\n+                mtx.vin[i].scriptWitness = input.final_script_witness;\n+\n+                Coin newcoin;\n+                if (!psbtx.GetInputUTXO(newcoin.out, i)) {\n+                    success = false;\n+                    break;\n+                }\n+                newcoin.nHeight = 1;\n+                view.AddCoin(psbtx.tx->vin[i].prevout, std::move(newcoin), true);\n+            } else {\n+                success = false;\n+                break;\n+            }\n+        }\n+\n+        if (success) {\n+            CTransaction ctx = CTransaction(mtx);\n+            size_t size = GetVirtualTransactionSize(ctx, GetTransactionSigOpCost(ctx, view, STANDARD_SCRIPT_VERIFY_FLAGS));\n+            result.pushKV(\"estimated_vsize\", (int)size);\n+            // Estimate fee rate\n+            CFeeRate feerate(fee, size);\n+            result.pushKV(\"estimated_feerate\", feerate.ToString());\n+        }\n+        result.pushKV(\"fee\", ValueFromAmount(fee));\n+\n+        if (only_missing_sigs) {\n+            result.pushKV(\"next\", \"signer\");\n+        } else if (only_missing_final) {\n+            result.pushKV(\"next\", \"finalizer\");\n+        } else if (all_final) {\n+            result.pushKV(\"next\", \"extractor\");\n+        } else {\n+            result.pushKV(\"next\", \"updater\");\n+        }\n+    } else {\n+        result.pushKV(\"next\", \"updater\");\n+    }\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                            actor (function)            argNames\n@@ -1849,6 +2046,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n     { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\"} },\n     { \"rawtransactions\",    \"joinpsbts\",                    &joinpsbts,                 {\"txs\"} },\n+    { \"rawtransactions\",    \"analyzepsbt\",                  &analyzepsbt,               {\"psbt\"} },\n \n     { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },"
      },
      {
        "sha": "9a79a7ee4373ce89a413502ad50de1f9631fc335",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
        "patch": "@@ -5,8 +5,9 @@\n \"\"\"Test the Partially Signed Transaction RPCs.\n \"\"\"\n \n+from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, find_output, disconnect_nodes, connect_nodes_bi, sync_blocks\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, disconnect_nodes, find_output, sync_blocks\n \n import json\n import os\n@@ -339,6 +340,29 @@ def run_test(self):\n         joined_decoded = self.nodes[0].decodepsbt(joined)\n         assert len(joined_decoded['inputs']) == 4 and len(joined_decoded['outputs']) == 2 and \"final_scriptwitness\" not in joined_decoded['inputs'][3] and \"final_scriptSig\" not in joined_decoded['inputs'][3]\n \n+        # Newly created PSBT needs UTXOs and updating\n+        addr = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid = self.nodes[0].sendtoaddress(addr, 7)\n+        addrinfo = self.nodes[1].getaddressinfo(addr)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+        vout = find_output(self.nodes[0], txid, 7)\n+        psbt = self.nodes[1].createpsbt([{\"txid\":txid, \"vout\":vout}], {self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\"):Decimal('6.999')})\n+        analyzed = self.nodes[0].analyzepsbt(psbt)\n+        assert not analyzed['inputs'][0]['has_utxo'] and not analyzed['inputs'][0]['is_final'] and analyzed['inputs'][0]['next'] == 'updater' and analyzed['next'] == 'updater'\n+\n+        # After update with wallet, only needs signing\n+        updated = self.nodes[1].walletprocesspsbt(psbt, False, 'ALL', True)['psbt']\n+        analyzed = self.nodes[0].analyzepsbt(updated)\n+        assert analyzed['inputs'][0]['has_utxo'] and not analyzed['inputs'][0]['is_final'] and analyzed['inputs'][0]['next'] == 'signer' and analyzed['next'] == 'signer' and analyzed['inputs'][0]['missing']['signatures'][0] == addrinfo['embedded']['witness_program']\n+\n+        # Check fee and size things\n+        assert analyzed['fee'] == Decimal('0.001') and analyzed['estimated_vsize'] == 134 and analyzed['estimated_feerate'] == '0.00746268 BTC/kB'\n+\n+        # After signing and finalizing, needs extracting\n+        signed = self.nodes[1].walletprocesspsbt(updated)['psbt']\n+        analyzed = self.nodes[0].analyzepsbt(signed)\n+        assert analyzed['inputs'][0]['has_utxo'] and analyzed['inputs'][0]['is_final'] and analyzed['next'] == 'extractor'\n \n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "f9d50e83e290efd1147aad576b82bd9599fc6467",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWQ1MGU4M2UyOTBlZmQxMTQ3YWFkNTc2YjgyYmQ5NTk5ZmM2NDY3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-16T17:58:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-16T17:58:26Z"
      },
      "message": "Merge #15410: test: txindex: interrupt threadGroup before calling destructor\n\nfab6b07c16 test: txindex: interrupt threadGroup before calling destructor (MarcoFalke)\n\nPull request description:\n\n  Fixes the data races with the tread sanitizer such as\n\n  * https://travis-ci.org/MarcoFalke/bitcoin/jobs/492330554\n  * https://github.com/bitcoin/bitcoin/pull/15402#discussion_r256676622\n  * ...\n\nTree-SHA512: 40608c70d92a1dd68efc1d41eecc8e2fb7738508e21f91f0ad353adcceed60fa624f15bf72a5b69a9444157b261183abbe9fc4cc5dd8aebc1c49506b239e8e88",
      "tree": {
        "sha": "c363c8c2c25531c6ff327f512ed64651f2df86e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c363c8c2c25531c6ff327f512ed64651f2df86e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9d50e83e290efd1147aad576b82bd9599fc6467",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcaE9CAAoJENLqSFDnUosl4pwP/1X4WWCIKBpPI3T5UtIOyB2d\n9y8BB0skK/mG2ZcTjxA9ZD3eoFhtNE4QO2yQOFLgjCEnR0JOcHtSIECGlc2/dQU6\n3d6IAVrVDZ2SiaelPNEfSWitnq0GNhnRWnEUT1mPzfWtN1a5Sbzw9RH6XDO4IOFV\nCopvzzmqdCEPrJXhH6dVjQDVr5eR8aJuf5O/9SeqDoy27fImGDApW9pnBboSyXG1\nQ/XKFJxIe6ffYOhP7o1eqTMoTEVEd0clc9q+D1gBCqjUe4foGFueoI/Jt4yRXSWI\nVQjKdqPv5+YtlyLmOlgS3tO4ego9uCnrrJ1c7OLwVaz0C1RzDa0cnTS9JNQK6RUK\nGTSS9ooyPfGLmwI8rbIL0XmxXh9+INCOyUycD9vJn/ZEoGekeyx8ZN1XLZDpS0Na\nZM/DKwiGsMPRRv8x1muFZbYz3dehnW2ICWLKVZchj/CrT8rQWAgbWhvVtLrGN2Ag\nvuUI6lzBpXSVuuZexEvIZzXNTH+vXgiS+lZONU+ydkL9Mq9qmwBZsRTlzAze16WP\nS3Bec0T4gbuyVmMSlSOdski6jT4ZKaK68YpfgHQIT4SXndZ4/7CtJZl8B3b0HLJB\ndsqsqR/dmm+Tgx0NBN7MpcEE5jH7yk759CLEkU6o1jqPM0ZL7UaQzvr/X3MSzyM1\ng+OTl5SOkb1NPx2wejco\n=sILJ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJV2H9I2NDz2cz2jjdYcdF9ERALuU4m3kCNwbOXXj0klCP/wEA31/5Vgd3Wu\nS1OpOduNRyQI8QRcaE9E8Aga4X2TORdv5ACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEEqLRU53Id4MJ3xke+PeszYI8BDWoeCH\nAk1BKvPDlHpY1DHsCPEEXGhPRfAI9O2MvQOw0D4Ag9/jDS75DI4pKGh0dHBzOi8v\nZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BC7JvRvMbB8YCuupsuU\n21fyCPEEXGhPRfAI7UdsrvAlxYYAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5j\nYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEOJnXyjUxddK4xWbor7CuRMI8QRc\naE9E8Aj/fG7oH+qiCQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c363c8c2c25531c6ff327f512ed64651f2df86e1\nparent 743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85\nparent fab6b07c16768543bcb6a2ce3a76bd31762a1fab\nauthor MarcoFalke <falke.marco@gmail.com> 1550339902 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550339906 -0500\n\nMerge #15410: test: txindex: interrupt threadGroup before calling destructor\n\nfab6b07c16 test: txindex: interrupt threadGroup before calling destructor (MarcoFalke)\n\nPull request description:\n\n  Fixes the data races with the tread sanitizer such as\n\n  * https://travis-ci.org/MarcoFalke/bitcoin/jobs/492330554\n  * https://github.com/bitcoin/bitcoin/pull/15402#discussion_r256676622\n  * ...\n\nTree-SHA512: 40608c70d92a1dd68efc1d41eecc8e2fb7738508e21f91f0ad353adcceed60fa624f15bf72a5b69a9444157b261183abbe9fc4cc5dd8aebc1c49506b239e8e88\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9d50e83e290efd1147aad576b82bd9599fc6467",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9d50e83e290efd1147aad576b82bd9599fc6467",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9d50e83e290efd1147aad576b82bd9599fc6467/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85"
      },
      {
        "sha": "fab6b07c16768543bcb6a2ce3a76bd31762a1fab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab6b07c16768543bcb6a2ce3a76bd31762a1fab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab6b07c16768543bcb6a2ce3a76bd31762a1fab"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d667c26c3c536b4dffcb6f93452cf4916db72abc",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9d50e83e290efd1147aad576b82bd9599fc6467/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9d50e83e290efd1147aad576b82bd9599fc6467/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=f9d50e83e290efd1147aad576b82bd9599fc6467",
        "patch": "@@ -69,7 +69,13 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n         }\n     }\n \n-    txindex.Stop(); // Stop thread before calling destructor\n+    // shutdown sequence (c.f. Shutdown() in init.cpp)\n+    txindex.Stop();\n+\n+    threadGroup.interrupt_all();\n+    threadGroup.join_all();\n+\n+    // Rest of shutdown sequence and destructors happen in ~TestingSetup()\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWI5MjljODEzZmYzZDdkOTNiZjRlMzE2NGIzNGUxMGVlYjYzODAx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-16T19:31:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-16T19:45:03Z"
      },
      "message": "Merge #13932: Additional utility RPCs for PSBT\n\n540729ef4bf1b6c6da1ec795e441d2ce56a9a58b Implement analyzepsbt RPC and tests (Andrew Chow)\n77542cf2a5f8abb97dd46f782c1b0199cc062033 Move PSBT UTXO fetching to a separate method (Andrew Chow)\ncb40b3abd4514361a024a1e7a1a281da9261261b Figure out what is missing during signing (Andrew Chow)\n08f749c9147a5f3fdbbd880e0974b97084429002 Implement joinpsbts RPC and tests (Andrew Chow)\n7344a7b9984b99882e136efc8ad48fb31740df93 Implement utxoupdatepsbt RPC and tests (Andrew Chow)\n\nPull request description:\n\n  This PR adds 3 new utility RPCs for interacting with PSBTs.\n\n  `utxoupdatepsbt` updates a PSBT with UTXO information from the node. It only works with witness UTXOs because full transactions (as would be needed for non-witness UTXOs) are not available unless txindex is enabled.\n\n  `joinpsbts` joins the inputs from multiple distinct PSBTs into one PSBT. e.g. if PSBT 1 has inputs 1 and 2, and PSBT 2 has inputs 3 and 4, `joinpsbts` would create a new PSBT with inputs 1, 2, 3, and 4.\n\n  `analyzepsbt` analyzes a PSBT and determines the current state of it and all of its inputs, and the next step that needs to be done.\n\nTree-SHA512: 3c1fa302201abca76a8901d0c2be7b4ccbce334d989533c215f8b3e50e22f2f018ce6209544b26789f58f5980a253c0655111e1e20d47d5656e0414c64891a5c",
      "tree": {
        "sha": "23e8fe95c2815c71054af988de16d749c1ca4085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23e8fe95c2815c71054af988de16d749c1ca4085"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxoaD8ACgkQHkrtYphs\n0l03Qwf+L9YLcQgzrNhUHFUm6SZ5fQFdcMa//ih/PzapiR61tPwEZfKVMdv8/2g3\n9S1JgvTml5DB2obWyLfTkAhXdSvzpLH142F7PnX9jT61fEQxuHH/0rvfWqs/bfF2\n/rlQu2isA895Zz5Tsb5TFSKDPtmV+spl8p1Bi6fPKRojRELatkqAoQyACI3g64qW\nCje8ww6oaAIR1c+3q41q6lt4RAgLJ/zVkXa79sQwYlvicf50Awx0WzpcI2QibMRs\n78yvk06n5hSyuy8hoc1hRGqUKLBx9djOOXkSm98OU8jKuIV/e2pY6j+Q/3DZ/N/X\nPxNDr6fFXW/DuS9zVFcxaAq1XoXAeQ==\n=Ir2s\n-----END PGP SIGNATURE-----",
        "payload": "tree 23e8fe95c2815c71054af988de16d749c1ca4085\nparent f9d50e83e290efd1147aad576b82bd9599fc6467\nparent 540729ef4bf1b6c6da1ec795e441d2ce56a9a58b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550345465 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550346303 +0100\n\nMerge #13932: Additional utility RPCs for PSBT\n\n540729ef4bf1b6c6da1ec795e441d2ce56a9a58b Implement analyzepsbt RPC and tests (Andrew Chow)\n77542cf2a5f8abb97dd46f782c1b0199cc062033 Move PSBT UTXO fetching to a separate method (Andrew Chow)\ncb40b3abd4514361a024a1e7a1a281da9261261b Figure out what is missing during signing (Andrew Chow)\n08f749c9147a5f3fdbbd880e0974b97084429002 Implement joinpsbts RPC and tests (Andrew Chow)\n7344a7b9984b99882e136efc8ad48fb31740df93 Implement utxoupdatepsbt RPC and tests (Andrew Chow)\n\nPull request description:\n\n  This PR adds 3 new utility RPCs for interacting with PSBTs.\n\n  `utxoupdatepsbt` updates a PSBT with UTXO information from the node. It only works with witness UTXOs because full transactions (as would be needed for non-witness UTXOs) are not available unless txindex is enabled.\n\n  `joinpsbts` joins the inputs from multiple distinct PSBTs into one PSBT. e.g. if PSBT 1 has inputs 1 and 2, and PSBT 2 has inputs 3 and 4, `joinpsbts` would create a new PSBT with inputs 1, 2, 3, and 4.\n\n  `analyzepsbt` analyzes a PSBT and determines the current state of it and all of its inputs, and the next step that needs to be done.\n\nTree-SHA512: 3c1fa302201abca76a8901d0c2be7b4ccbce334d989533c215f8b3e50e22f2f018ce6209544b26789f58f5980a253c0655111e1e20d47d5656e0414c64891a5c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9d50e83e290efd1147aad576b82bd9599fc6467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9d50e83e290efd1147aad576b82bd9599fc6467",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9d50e83e290efd1147aad576b82bd9599fc6467"
      },
      {
        "sha": "540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/540729ef4bf1b6c6da1ec795e441d2ce56a9a58b"
      }
    ],
    "stats": {
      "total": 496,
      "additions": 487,
      "deletions": 9
    },
    "files": [
      {
        "sha": "32fb459decfc60f75765a28f07a95ef68b9f588b",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 4,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
        "patch": "@@ -42,6 +42,40 @@ bool PartiallySignedTransaction::IsSane() const\n     return true;\n }\n \n+bool PartiallySignedTransaction::AddInput(const CTxIn& txin, PSBTInput& psbtin)\n+{\n+    if (std::find(tx->vin.begin(), tx->vin.end(), txin) != tx->vin.end()) {\n+        return false;\n+    }\n+    tx->vin.push_back(txin);\n+    psbtin.partial_sigs.clear();\n+    psbtin.final_script_sig.clear();\n+    psbtin.final_script_witness.SetNull();\n+    inputs.push_back(psbtin);\n+    return true;\n+}\n+\n+bool PartiallySignedTransaction::AddOutput(const CTxOut& txout, const PSBTOutput& psbtout)\n+{\n+    tx->vout.push_back(txout);\n+    outputs.push_back(psbtout);\n+    return true;\n+}\n+\n+bool PartiallySignedTransaction::GetInputUTXO(CTxOut& utxo, int input_index) const\n+{\n+    PSBTInput input = inputs[input_index];\n+    int prevout_index = tx->vin[input_index].prevout.n;\n+    if (input.non_witness_utxo) {\n+        utxo = input.non_witness_utxo->vout[prevout_index];\n+    } else if (!input.witness_utxo.IsNull()) {\n+        utxo = input.witness_utxo;\n+    } else {\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool PSBTInput::IsNull() const\n {\n     return !non_witness_utxo && witness_utxo.IsNull() && partial_sigs.empty() && unknown.empty() && hd_keypaths.empty() && redeem_script.empty() && witness_script.empty();\n@@ -171,13 +205,12 @@ void PSBTOutput::Merge(const PSBTOutput& output)\n     if (redeem_script.empty() && !output.redeem_script.empty()) redeem_script = output.redeem_script;\n     if (witness_script.empty() && !output.witness_script.empty()) witness_script = output.witness_script;\n }\n-\n bool PSBTInputSigned(PSBTInput& input)\n {\n     return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash)\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, SignatureData* out_sigdata, bool use_dummy)\n {\n     PSBTInput& input = psbt.inputs.at(index);\n     const CMutableTransaction& tx = *psbt.tx;\n@@ -217,9 +250,14 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n         return false;\n     }\n \n-    MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n     sigdata.witness = false;\n-    bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    bool sig_complete;\n+    if (use_dummy) {\n+        sig_complete = ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, utxo.scriptPubKey, sigdata);\n+    } else {\n+        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+        sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    }\n     // Verify that a witness signature was produced in case one was required.\n     if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n@@ -230,6 +268,14 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n         input.non_witness_utxo = nullptr;\n     }\n \n+    // Fill in the missing info\n+    if (out_sigdata) {\n+        out_sigdata->missing_pubkeys = sigdata.missing_pubkeys;\n+        out_sigdata->missing_sigs = sigdata.missing_sigs;\n+        out_sigdata->missing_redeem_script = sigdata.missing_redeem_script;\n+        out_sigdata->missing_witness_script = sigdata.missing_witness_script;\n+    }\n+\n     return sig_complete;\n }\n "
      },
      {
        "sha": "27b0aedd055e184866da898ac0e3696801480596",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
        "patch": "@@ -389,9 +389,19 @@ struct PartiallySignedTransaction\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n     NODISCARD bool Merge(const PartiallySignedTransaction& psbt);\n     bool IsSane() const;\n+    bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n+    bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n     explicit PartiallySignedTransaction(const CMutableTransaction& tx);\n+    /**\n+     * Finds the UTXO for a given input index\n+     *\n+     * @param[out] utxo The UTXO of the input if found\n+     * @param[in] input_index Index of the input to retrieve the UTXO of\n+     * @return Whether the UTXO for the specified input was found\n+     */\n+    bool GetInputUTXO(CTxOut& utxo, int input_index) const;\n \n     template <typename Stream>\n     inline void Serialize(Stream& s) const {\n@@ -542,7 +552,7 @@ struct PartiallySignedTransaction\n bool PSBTInputSigned(PSBTInput& input);\n \n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL);\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool use_dummy = false);\n \n /**\n  * Finalizes a PSBT if possible, combining partial signatures."
      },
      {
        "sha": "1cdc9f87a769de188acc46d20c96960775487ba8",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
        "patch": "@@ -112,6 +112,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createpsbt\", 2, \"locktime\" },\n     { \"createpsbt\", 3, \"replaceable\" },\n     { \"combinepsbt\", 0, \"txs\"},\n+    { \"joinpsbts\", 0, \"txs\"},\n     { \"finalizepsbt\", 1, \"extract\"},\n     { \"converttopsbt\", 1, \"permitsigdata\"},\n     { \"converttopsbt\", 2, \"iswitness\"},"
      },
      {
        "sha": "38e2dc237e460dd6c3efef92d3d5ba47034ef168",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 338,
        "deletions": 0,
        "changes": 338,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
        "patch": "@@ -7,6 +7,7 @@\n #include <coins.h>\n #include <compat/byteswap.h>\n #include <consensus/validation.h>\n+#include <consensus/tx_verify.h>\n #include <core_io.h>\n #include <index/txindex.h>\n #include <init.h>\n@@ -31,6 +32,8 @@\n #include <validation.h>\n #include <validationinterface.h>\n \n+\n+#include <numeric>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -1703,6 +1706,338 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n }\n \n+UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"utxoupdatepsbt\",\n+            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+\n+    // Unserialize the transactions\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Fetch previous transactions (inputs):\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(&viewDummy);\n+    {\n+        LOCK2(cs_main, mempool.cs);\n+        CCoinsViewCache &viewChain = *pcoinsTip;\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n+        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n+\n+        for (const CTxIn& txin : psbtx.tx->vin) {\n+            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.\n+        }\n+\n+        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n+    }\n+\n+    // Fill the inputs\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (input.non_witness_utxo || !input.witness_utxo.IsNull()) {\n+            continue;\n+        }\n+\n+        const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n+\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n+        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+            input.witness_utxo = coin.out;\n+        }\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue joinpsbts(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"joinpsbts\",\n+            \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n+            \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n+            {\n+                {\"txs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"A json array of base64 strings of partially signed transactions\",\n+                    {\n+                        {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                    }}\n+            },\n+            RPCResult {\n+                \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR}, true);\n+\n+    // Unserialize the transactions\n+    std::vector<PartiallySignedTransaction> psbtxs;\n+    UniValue txs = request.params[0].get_array();\n+\n+    if (txs.size() <= 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"At least two PSBTs are required to join PSBTs.\");\n+    }\n+\n+    int32_t best_version = 1;\n+    uint32_t best_locktime = 0xffffffff;\n+    for (unsigned int i = 0; i < txs.size(); ++i) {\n+        PartiallySignedTransaction psbtx;\n+        std::string error;\n+        if (!DecodeBase64PSBT(psbtx, txs[i].get_str(), error)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+        }\n+        psbtxs.push_back(psbtx);\n+        // Choose the highest version number\n+        if (psbtx.tx->nVersion > best_version) {\n+            best_version = psbtx.tx->nVersion;\n+        }\n+        // Choose the lowest lock time\n+        if (psbtx.tx->nLockTime < best_locktime) {\n+            best_locktime = psbtx.tx->nLockTime;\n+        }\n+    }\n+\n+    // Create a blank psbt where everything will be added\n+    PartiallySignedTransaction merged_psbt;\n+    merged_psbt.tx = CMutableTransaction();\n+    merged_psbt.tx->nVersion = best_version;\n+    merged_psbt.tx->nLockTime = best_locktime;\n+\n+    // Merge\n+    for (auto& psbt : psbtxs) {\n+        for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n+            if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+            }\n+        }\n+        for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n+            merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n+        }\n+        merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n+    }\n+\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << merged_psbt;\n+    return EncodeBase64((unsigned char*)ssTx.data(), ssTx.size());\n+}\n+\n+UniValue analyzepsbt(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"analyzepsbt\",\n+            \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n+            {\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+            },\n+            RPCResult {\n+                \"{\\n\"\n+                \"  \\\"inputs\\\" : [                      (array of json objects)\\n\"\n+                \"    {\\n\"\n+                \"      \\\"has_utxo\\\" : true|false     (boolean) Whether a UTXO is provided\\n\"\n+                \"      \\\"is_final\\\" : true|false     (boolean) Whether the input is finalized\\n\"\n+                \"      \\\"missing\\\" : {               (json object, optional) Things that are missing that are required to complete this input\\n\"\n+                \"        \\\"pubkeys\\\" : [             (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose BIP 32 derivation path is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"signatures\\\" : [          (array)\\n\"\n+                \"          \\\"keyid\\\"                 (string) Public key ID, hash160 of the public key, of a public key whose signature is missing\\n\"\n+                \"        ]\\n\"\n+                \"        \\\"redeemscript\\\" : \\\"hash\\\"   (string) Hash160 of the redeemScript that is missing\\n\"\n+                \"        \\\"witnessscript\\\" : \\\"hash\\\"  (string) SHA256 of the witnessScript that is missing\\n\"\n+                \"      }\\n\"\n+                \"      \\\"next\\\" : \\\"role\\\"           (string) Role of the next person that this input needs to go to\\n\"\n+                \"    }\\n\"\n+                \"    ,...\\n\"\n+                \"  ]\\n\"\n+                \"  \\\"estimated_vsize\\\" : vsize       (numeric) Estimated vsize of the final signed transaction\\n\"\n+                \"  \\\"estimated_feerate\\\" : feerate   (numeric, optional) Estimated feerate of the final signed transaction. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"fee\\\" : fee                     (numeric, optional) The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled.\\n\"\n+                \"  \\\"next\\\" : \\\"role\\\"                 (string) Role of the next person that this psbt needs to go to\\n\"\n+                \"}\\n\"\n+            },\n+            RPCExamples {\n+                HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n+            }}.ToString());\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Go through each input and build status\n+    UniValue result(UniValue::VOBJ);\n+    UniValue inputs_result(UniValue::VARR);\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = true;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        UniValue input_univ(UniValue::VOBJ);\n+        UniValue missing(UniValue::VOBJ);\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_univ.pushKV(\"has_utxo\", true);\n+        } else {\n+            input_univ.pushKV(\"has_utxo\", false);\n+            input_univ.pushKV(\"is_final\", false);\n+            input_univ.pushKV(\"next\", \"updater\");\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (!utxo.IsNull() && !PSBTInputSigned(input)) {\n+            input_univ.pushKV(\"is_final\", false);\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            SignatureData outdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n+\n+            // Things are missing\n+            if (!complete) {\n+                if (!outdata.missing_pubkeys.empty()) {\n+                    // Missing pubkeys\n+                    UniValue missing_pubkeys_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_pubkeys) {\n+                        missing_pubkeys_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"pubkeys\", missing_pubkeys_univ);\n+                }\n+                if (!outdata.missing_redeem_script.IsNull()) {\n+                    // Missing redeemScript\n+                    missing.pushKV(\"redeemscript\", HexStr(outdata.missing_redeem_script));\n+                }\n+                if (!outdata.missing_witness_script.IsNull()) {\n+                    // Missing witnessScript\n+                    missing.pushKV(\"witnessscript\", HexStr(outdata.missing_witness_script));\n+                }\n+                if (!outdata.missing_sigs.empty()) {\n+                    // Missing sigs\n+                    UniValue missing_sigs_univ(UniValue::VARR);\n+                    for (const CKeyID& pubkey : outdata.missing_sigs) {\n+                        missing_sigs_univ.push_back(HexStr(pubkey));\n+                    }\n+                    missing.pushKV(\"signatures\", missing_sigs_univ);\n+                }\n+                input_univ.pushKV(\"missing\", missing);\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (outdata.missing_pubkeys.empty() && outdata.missing_redeem_script.IsNull() && outdata.missing_witness_script.IsNull() && !outdata.missing_sigs.empty()) {\n+                    input_univ.pushKV(\"next\", \"signer\");\n+                } else {\n+                    only_missing_sigs = false;\n+                    input_univ.pushKV(\"next\", \"updater\");\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_univ.pushKV(\"next\", \"finalizer\");\n+            }\n+        } else if (!utxo.IsNull()){\n+            input_univ.pushKV(\"is_final\", true);\n+        }\n+        inputs_result.push_back(input_univ);\n+    }\n+    result.pushKV(\"inputs\", inputs_result);\n+\n+    if (all_final) {\n+        only_missing_sigs = false;\n+        result.pushKV(\"next\", \"extractor\");\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = std::accumulate(psbtx.tx->vout.begin(), psbtx.tx->vout.end(), 0,\n+            [](int a, const CTxOut& b) {\n+                return a += b.nValue;\n+            }\n+        );\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+\n+        // Estimate the size\n+        CMutableTransaction mtx(*psbtx.tx);\n+        CCoinsView view_dummy;\n+        CCoinsViewCache view(&view_dummy);\n+        bool success = true;\n+\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs[i];\n+            if (SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true)) {\n+                mtx.vin[i].scriptSig = input.final_script_sig;\n+                mtx.vin[i].scriptWitness = input.final_script_witness;\n+\n+                Coin newcoin;\n+                if (!psbtx.GetInputUTXO(newcoin.out, i)) {\n+                    success = false;\n+                    break;\n+                }\n+                newcoin.nHeight = 1;\n+                view.AddCoin(psbtx.tx->vin[i].prevout, std::move(newcoin), true);\n+            } else {\n+                success = false;\n+                break;\n+            }\n+        }\n+\n+        if (success) {\n+            CTransaction ctx = CTransaction(mtx);\n+            size_t size = GetVirtualTransactionSize(ctx, GetTransactionSigOpCost(ctx, view, STANDARD_SCRIPT_VERIFY_FLAGS));\n+            result.pushKV(\"estimated_vsize\", (int)size);\n+            // Estimate fee rate\n+            CFeeRate feerate(fee, size);\n+            result.pushKV(\"estimated_feerate\", feerate.ToString());\n+        }\n+        result.pushKV(\"fee\", ValueFromAmount(fee));\n+\n+        if (only_missing_sigs) {\n+            result.pushKV(\"next\", \"signer\");\n+        } else if (only_missing_final) {\n+            result.pushKV(\"next\", \"finalizer\");\n+        } else if (all_final) {\n+            result.pushKV(\"next\", \"extractor\");\n+        } else {\n+            result.pushKV(\"next\", \"updater\");\n+        }\n+    } else {\n+        result.pushKV(\"next\", \"updater\");\n+    }\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                            actor (function)            argNames\n@@ -1721,6 +2056,9 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"finalizepsbt\",                 &finalizepsbt,              {\"psbt\", \"extract\"} },\n     { \"rawtransactions\",    \"createpsbt\",                   &createpsbt,                {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n     { \"rawtransactions\",    \"converttopsbt\",                &converttopsbt,             {\"hexstring\",\"permitsigdata\",\"iswitness\"} },\n+    { \"rawtransactions\",    \"utxoupdatepsbt\",               &utxoupdatepsbt,            {\"psbt\"} },\n+    { \"rawtransactions\",    \"joinpsbts\",                    &joinpsbts,                 {\"txs\"} },\n+    { \"rawtransactions\",    \"analyzepsbt\",                  &analyzepsbt,               {\"psbt\"} },\n \n     { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },"
      },
      {
        "sha": "320956d0c4c6bba943b4d0441e63852e8e1fa4e1",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
        "patch": "@@ -83,6 +83,8 @@ static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdat\n         assert(i.second);\n         return true;\n     }\n+    // Could not make signature or signature not found, add keyid to missing\n+    sigdata.missing_sigs.push_back(keyid);\n     return false;\n }\n \n@@ -116,17 +118,24 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     case TX_PUBKEYHASH: {\n         CKeyID keyID = CKeyID(uint160(vSolutions[0]));\n         CPubKey pubkey;\n-        if (!GetPubKey(provider, sigdata, keyID, pubkey)) return false;\n+        if (!GetPubKey(provider, sigdata, keyID, pubkey)) {\n+            // Pubkey could not be found, add to missing\n+            sigdata.missing_pubkeys.push_back(keyID);\n+            return false;\n+        }\n         if (!CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) return false;\n         ret.push_back(std::move(sig));\n         ret.push_back(ToByteVector(pubkey));\n         return true;\n     }\n     case TX_SCRIPTHASH:\n-        if (GetCScript(provider, sigdata, uint160(vSolutions[0]), scriptRet)) {\n+        h160 = uint160(vSolutions[0]);\n+        if (GetCScript(provider, sigdata, h160, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n+        // Could not find redeemScript, add to missing\n+        sigdata.missing_redeem_script = h160;\n         return false;\n \n     case TX_MULTISIG: {\n@@ -154,6 +163,8 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n+        // Could not find witnessScript, add to missing\n+        sigdata.missing_witness_script = uint256(vSolutions[0]);\n         return false;\n \n     default:"
      },
      {
        "sha": "491fb54c453f58439292c9627f9b4aff39499674",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
        "patch": "@@ -131,6 +131,10 @@ struct SignatureData {\n     CScriptWitness scriptWitness; ///< The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.\n     std::map<CKeyID, SigPair> signatures; ///< BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.\n     std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>> misc_pubkeys;\n+    std::vector<CKeyID> missing_pubkeys; ///< KeyIDs of pubkeys which could not be found\n+    std::vector<CKeyID> missing_sigs; ///< KeyIDs of pubkeys for signatures which could not be found\n+    uint160 missing_redeem_script; ///< ScriptID of the missing redeemScript (if any)\n+    uint256 missing_witness_script; ///< SHA256 of the missing witnessScript (if any)\n \n     SignatureData() {}\n     explicit SignatureData(const CScript& script) : scriptSig(script) {}"
      },
      {
        "sha": "9a79a7ee4373ce89a413502ad50de1f9631fc335",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 70,
        "deletions": 2,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5b929c813ff3d7d93bf4e3164b34e10eeb63801/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
        "patch": "@@ -5,8 +5,9 @@\n \"\"\"Test the Partially Signed Transaction RPCs.\n \"\"\"\n \n+from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, find_output, disconnect_nodes, connect_nodes_bi, sync_blocks\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, disconnect_nodes, find_output, sync_blocks\n \n import json\n import os\n@@ -20,7 +21,7 @@ def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[], [\"-txindex\"], [\"-txindex\"]]\n+        self.extra_args = [[\"-txindex\"], [\"-txindex\"], [\"-txindex\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -296,5 +297,72 @@ def run_test(self):\n         # Test decoding error: invalid base64\n         assert_raises_rpc_error(-22, \"TX decode failed invalid base64\", self.nodes[0].decodepsbt, \";definitely not base64;\")\n \n+        # Send to all types of addresses\n+        addr1 = self.nodes[1].getnewaddress(\"\", \"bech32\")\n+        txid1 = self.nodes[0].sendtoaddress(addr1, 11)\n+        vout1 = find_output(self.nodes[0], txid1, 11)\n+        addr2 = self.nodes[1].getnewaddress(\"\", \"legacy\")\n+        txid2 = self.nodes[0].sendtoaddress(addr2, 11)\n+        vout2 = find_output(self.nodes[0], txid2, 11)\n+        addr3 = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid3 = self.nodes[0].sendtoaddress(addr3, 11)\n+        vout3 = find_output(self.nodes[0], txid3, 11)\n+        self.sync_all()\n+\n+        # Update a PSBT with UTXOs from the node\n+        # Bech32 inputs should be filled with witness UTXO. Other inputs should not be filled because they are non-witness\n+        psbt = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1},{\"txid\":txid2, \"vout\":vout2},{\"txid\":txid3, \"vout\":vout3}], {self.nodes[0].getnewaddress():32.999})\n+        decoded = self.nodes[1].decodepsbt(psbt)\n+        assert \"witness_utxo\" not in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+        updated = self.nodes[1].utxoupdatepsbt(psbt)\n+        decoded = self.nodes[1].decodepsbt(updated)\n+        assert \"witness_utxo\" in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n+        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n+        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+\n+        # Two PSBTs with a common input should not be joinable\n+        psbt1 = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1}], {self.nodes[0].getnewaddress():Decimal('10.999')})\n+        assert_raises_rpc_error(-8, \"exists in multiple PSBTs\", self.nodes[1].joinpsbts, [psbt1, updated])\n+\n+        # Join two distinct PSBTs\n+        addr4 = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid4 = self.nodes[0].sendtoaddress(addr4, 5)\n+        vout4 = find_output(self.nodes[0], txid4, 5)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+        psbt2 = self.nodes[1].createpsbt([{\"txid\":txid4, \"vout\":vout4}], {self.nodes[0].getnewaddress():Decimal('4.999')})\n+        psbt2 = self.nodes[1].walletprocesspsbt(psbt2)['psbt']\n+        psbt2_decoded = self.nodes[0].decodepsbt(psbt2)\n+        assert \"final_scriptwitness\" in psbt2_decoded['inputs'][0] and \"final_scriptSig\" in psbt2_decoded['inputs'][0]\n+        joined = self.nodes[0].joinpsbts([psbt, psbt2])\n+        joined_decoded = self.nodes[0].decodepsbt(joined)\n+        assert len(joined_decoded['inputs']) == 4 and len(joined_decoded['outputs']) == 2 and \"final_scriptwitness\" not in joined_decoded['inputs'][3] and \"final_scriptSig\" not in joined_decoded['inputs'][3]\n+\n+        # Newly created PSBT needs UTXOs and updating\n+        addr = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+        txid = self.nodes[0].sendtoaddress(addr, 7)\n+        addrinfo = self.nodes[1].getaddressinfo(addr)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+        vout = find_output(self.nodes[0], txid, 7)\n+        psbt = self.nodes[1].createpsbt([{\"txid\":txid, \"vout\":vout}], {self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\"):Decimal('6.999')})\n+        analyzed = self.nodes[0].analyzepsbt(psbt)\n+        assert not analyzed['inputs'][0]['has_utxo'] and not analyzed['inputs'][0]['is_final'] and analyzed['inputs'][0]['next'] == 'updater' and analyzed['next'] == 'updater'\n+\n+        # After update with wallet, only needs signing\n+        updated = self.nodes[1].walletprocesspsbt(psbt, False, 'ALL', True)['psbt']\n+        analyzed = self.nodes[0].analyzepsbt(updated)\n+        assert analyzed['inputs'][0]['has_utxo'] and not analyzed['inputs'][0]['is_final'] and analyzed['inputs'][0]['next'] == 'signer' and analyzed['next'] == 'signer' and analyzed['inputs'][0]['missing']['signatures'][0] == addrinfo['embedded']['witness_program']\n+\n+        # Check fee and size things\n+        assert analyzed['fee'] == Decimal('0.001') and analyzed['estimated_vsize'] == 134 and analyzed['estimated_feerate'] == '0.00746268 BTC/kB'\n+\n+        # After signing and finalizing, needs extracting\n+        signed = self.nodes[1].walletprocesspsbt(updated)['psbt']\n+        analyzed = self.nodes[0].analyzepsbt(signed)\n+        assert analyzed['inputs'][0]['has_utxo'] and analyzed['inputs'][0]['is_final'] and analyzed['next'] == 'extractor'\n+\n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "f60d029a2a768b082e75ed98c92429e56f58974d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjBkMDI5YTJhNzY4YjA4MmU3NWVkOThjOTI0MjllNTZmNTg5NzRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-16T20:05:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-16T20:39:32Z"
      },
      "message": "Merge #15368: Descriptor checksums\n\nfd637be8d21a606e98c037b40b268c4a1fae2244 Add checksums to descriptors.md (Pieter Wuille)\nbe62903c417293f6217e124669e62fd2172a18f1 Make descriptor checksums mandatory in deriveaddresses and importmulti (Pieter Wuille)\nb52cb6368869c9f6dd2cd8f309b3000de514d439 Add getdescriptorinfo to compute checksum (Pieter Wuille)\n3b40bff9880e9ae2817136b7d14989afccfc1937 Descriptor checksum (Pieter Wuille)\n\nPull request description:\n\n  This adds support for a descriptor-specific 8-character checksum.\n\n  Descriptors may optionally be suffixed with a `#` plus these 8 checksum characters. Any descriptor that contains a `#` at the end must be followed by a valid checksum. If the `#` is missing entirely, it is valid without checksum.\n\n  All RPCs are updated to report descriptors that include the checksum. On input, they are optional except in `deriveaddress` and `importmulti`, which require descriptors which include a checksum.\n\n  A new RPC is also added to analyse descriptors (`getdescriptorinfo`), which can be used to compute the checksum for a descriptor without.\n\nTree-SHA512: a8294b09155eb6c67fbc178b5e2d3fbc0e9bec8b6de57a13f8835550d51c2cb32a428b3c9a188ded42b454d594e9305edbd4797906b755de77a8f33c79165f6b",
      "tree": {
        "sha": "13ea371c289352c96f5f762aa4d50f0fcb6ced92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13ea371c289352c96f5f762aa4d50f0fcb6ced92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f60d029a2a768b082e75ed98c92429e56f58974d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxodQQACgkQHkrtYphs\n0l1xoQf/Zr9Fw7dafVnU3I9IYQbJ8YQ+/6ZanOHXTmjWvkdA458nWwux+lzCkowh\nUmEGDGFLy6/oUMCC7I0zKucZv3bpZRA6DUbnNgu+Og/EnC4FmaXzC9lp8v8vaP/D\nIyQuaXwxBWyhwKJ6jyBvh7o1PcUIy9mTF9t6P32ORIyxX+1gxdcC21JZU++AaOSj\ntAIvz4f4wQABab+3zd6Lmg5+I2mPtbvyUIyFOraQGPgNl0+z66WYlTKZMsTTglBI\ngQMwxkS09MY2RqkxuYqIz6NJx65kB//N3n3JIhWL22LfqTda7WiK3TFxFmBjes07\noa2hVqxr2o2cpuRz2kURjbOlMjT8QQ==\n=mNbg\n-----END PGP SIGNATURE-----",
        "payload": "tree 13ea371c289352c96f5f762aa4d50f0fcb6ced92\nparent d5b929c813ff3d7d93bf4e3164b34e10eeb63801\nparent fd637be8d21a606e98c037b40b268c4a1fae2244\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550347538 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550349572 +0100\n\nMerge #15368: Descriptor checksums\n\nfd637be8d21a606e98c037b40b268c4a1fae2244 Add checksums to descriptors.md (Pieter Wuille)\nbe62903c417293f6217e124669e62fd2172a18f1 Make descriptor checksums mandatory in deriveaddresses and importmulti (Pieter Wuille)\nb52cb6368869c9f6dd2cd8f309b3000de514d439 Add getdescriptorinfo to compute checksum (Pieter Wuille)\n3b40bff9880e9ae2817136b7d14989afccfc1937 Descriptor checksum (Pieter Wuille)\n\nPull request description:\n\n  This adds support for a descriptor-specific 8-character checksum.\n\n  Descriptors may optionally be suffixed with a `#` plus these 8 checksum characters. Any descriptor that contains a `#` at the end must be followed by a valid checksum. If the `#` is missing entirely, it is valid without checksum.\n\n  All RPCs are updated to report descriptors that include the checksum. On input, they are optional except in `deriveaddress` and `importmulti`, which require descriptors which include a checksum.\n\n  A new RPC is also added to analyse descriptors (`getdescriptorinfo`), which can be used to compute the checksum for a descriptor without.\n\nTree-SHA512: a8294b09155eb6c67fbc178b5e2d3fbc0e9bec8b6de57a13f8835550d51c2cb32a428b3c9a188ded42b454d594e9305edbd4797906b755de77a8f33c79165f6b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60d029a2a768b082e75ed98c92429e56f58974d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f60d029a2a768b082e75ed98c92429e56f58974d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60d029a2a768b082e75ed98c92429e56f58974d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b929c813ff3d7d93bf4e3164b34e10eeb63801",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5b929c813ff3d7d93bf4e3164b34e10eeb63801"
      },
      {
        "sha": "fd637be8d21a606e98c037b40b268c4a1fae2244",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd637be8d21a606e98c037b40b268c4a1fae2244",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd637be8d21a606e98c037b40b268c4a1fae2244"
      }
    ],
    "stats": {
      "total": 409,
      "additions": 357,
      "deletions": 52
    },
    "files": [
      {
        "sha": "5dbcd95e1d0e89dfb38522cfbaaf6f2fdb16bf01",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -39,7 +39,7 @@ Output descriptors currently support:\n \n ## Reference\n \n-Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+Descriptors consist of several types of expressions. The top level expression is either a `SCRIPT`, or `SCRIPT#CHECKSUM` where `CHECKSUM` is an 8-character alphanumeric descriptor checksum.\n \n `SCRIPT` expressions:\n - `sh(SCRIPT)` (top level only): P2SH embed the argument.\n@@ -169,3 +169,20 @@ existing Bitcoin Core wallets, a convenience function `combo` is\n provided, which takes as input a public key, and describes a set of P2PK,\n P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n uncompressed, the set only includes P2PK and P2PKH scripts.\n+\n+### Checksums\n+\n+Descriptors can optionally be suffixed with a checksum to protect against\n+typos or copy-paste errors.\n+\n+These checksums consist of 8 alphanumeric characters. As long as errors are\n+restricted to substituting characters in `0123456789()[],'/*abcdefgh@:$%{}`\n+for others in that set and changes in letter case, up to 4 errors will always\n+be detected in descriptors up to 501 characters, and up to 3 errors in longer\n+ones. For larger numbers of errors, or other types of errors, there is a\n+roughly 1 in a trillion chance of not detecting the errors.\n+\n+All RPCs in Bitcoin Core will include the checksum in their output. Only\n+certain RPCs require checksums on input, including `deriveaddress` and\n+`importmulti`. The checksum for a descriptor without one can be computed\n+using the `getdescriptorinfo` RPC."
      },
      {
        "sha": "999a307e2b2e1b8c8ef2cbd492f7f49ff6753e35",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 2,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -143,6 +143,46 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getdescriptorinfo\",\n+            {\"\\nAnalyses a descriptor.\\n\"},\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n+            },\n+            RPCResult{\n+            \"{\\n\"\n+            \"  \\\"descriptor\\\" : \\\"desc\\\",         (string) The descriptor in canonical form, without private keys\\n\"\n+            \"  \\\"isrange\\\" : true|false,        (boolean) Whether the descriptor is ranged\\n\"\n+            \"  \\\"issolvable\\\" : true|false,     (boolean) Whether the descriptor is solvable\\n\"\n+            \"  \\\"hasprivatekeys\\\" : true|false, (boolean) Whether the input descriptor contained at least one private key\\n\"\n+            \"}\\n\"\n+            },\n+            RPCExamples{\n+                \"Analyse a descriptor\\n\" +\n+                HelpExampleCli(\"getdescriptorinfo\", \"\\\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\\\"\")\n+            }}.ToString()\n+        );\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(request.params[0].get_str(), provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"descriptor\", desc->ToString());\n+    result.pushKV(\"isrange\", desc->IsRange());\n+    result.pushKV(\"issolvable\", desc->IsSolvable());\n+    result.pushKV(\"hasprivatekeys\", provider.keys.size() > 0);\n+    return result;\n+}\n+\n UniValue deriveaddresses(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.empty() || request.params.size() > 3) {\n@@ -167,7 +207,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             },\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n-                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\")\n+                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\\\" 0 2\")\n             }}.ToString()\n         );\n     }\n@@ -193,7 +233,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     }\n \n     FlatSigningProvider provider;\n-    auto desc = Parse(desc_str, provider);\n+    auto desc = Parse(desc_str, provider, /* require_checksum = */ true);\n     if (!desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n     }\n@@ -564,6 +604,7 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} },\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n     { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"begin\", \"end\"} },\n+    { \"util\",               \"getdescriptorinfo\",      &getdescriptorinfo,      {\"descriptor\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n "
      },
      {
        "sha": "43448d7222e29898178a638ff340dd6117447e66",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 141,
        "deletions": 3,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -20,6 +20,125 @@\n \n namespace {\n \n+////////////////////////////////////////////////////////////////////////////\n+// Checksum                                                               //\n+////////////////////////////////////////////////////////////////////////////\n+\n+// This section implements a checksum algorithm for descriptors with the\n+// following properties:\n+// * Mistakes in a descriptor string are measured in \"symbol errors\". The higher\n+//   the number of symbol errors, the harder it is to detect:\n+//   * An error substituting a character from 0123456789()[],'/*abcdefgh@:$%{} for\n+//     another in that set always counts as 1 symbol error.\n+//     * Note that hex encoded keys are covered by these characters. Xprvs and\n+//       xpubs use other characters too, but already have their own checksum\n+//       mechanism.\n+//     * Function names like \"multi()\" use other characters, but mistakes in\n+//       these would generally result in an unparseable descriptor.\n+//   * A case error always counts as 1 symbol error.\n+//   * Any other 1 character substitution error counts as 1 or 2 symbol errors.\n+// * Any 1 symbol error is always detected.\n+// * Any 2 or 3 symbol error in a descriptor of up to 49154 characters is always detected.\n+// * Any 4 symbol error in a descriptor of up to 507 characters is always detected.\n+// * Any 5 symbol error in a descriptor of up to 77 characters is always detected.\n+// * Is optimized to minimize the chance a 5 symbol error in a descriptor up to 387 characters is undetected\n+// * Random errors have a chance of 1 in 2**40 of being undetected.\n+//\n+// These properties are achieved by expanding every group of 3 (non checksum) characters into\n+// 4 GF(32) symbols, over which a cyclic code is defined.\n+\n+/*\n+ * Interprets c as 8 groups of 5 bits which are the coefficients of a degree 8 polynomial over GF(32),\n+ * multiplies that polynomial by x, computes its remainder modulo a generator, and adds the constant term val.\n+ *\n+ * This generator is G(x) = x^8 + {30}x^7 + {23}x^6 + {15}x^5 + {14}x^4 + {10}x^3 + {6}x^2 + {12}x + {9}.\n+ * It is chosen to define an cyclic error detecting code which is selected by:\n+ * - Starting from all BCH codes over GF(32) of degree 8 and below, which by construction guarantee detecting\n+ *   3 errors in windows up to 19000 symbols.\n+ * - Taking all those generators, and for degree 7 ones, extend them to degree 8 by adding all degree-1 factors.\n+ * - Selecting just the set of generators that guarantee detecting 4 errors in a window of length 512.\n+ * - Selecting one of those with best worst-case behavior for 5 errors in windows of length up to 512.\n+ *\n+ * The generator and the constants to implement it can be verified using this Sage code:\n+ *   B = GF(2) # Binary field\n+ *   BP.<b> = B[] # Polynomials over the binary field\n+ *   F_mod = b**5 + b**3 + 1\n+ *   F.<f> = GF(32, modulus=F_mod, repr='int') # GF(32) definition\n+ *   FP.<x> = F[] # Polynomials over GF(32)\n+ *   E_mod = x**3 + x + F.fetch_int(8)\n+ *   E.<e> = F.extension(E_mod) # Extension field definition\n+ *   alpha = e**2743 # Choice of an element in extension field\n+ *   for p in divisors(E.order() - 1): # Verify alpha has order 32767.\n+ *       assert((alpha**p == 1) == (p % 32767 == 0))\n+ *   G = lcm([(alpha**i).minpoly() for i in [1056,1057,1058]] + [x + 1])\n+ *   print(G) # Print out the generator\n+ *   for i in [1,2,4,8,16]: # Print out {1,2,4,8,16}*(G mod x^8), packed in hex integers.\n+ *       v = 0\n+ *       for coef in reversed((F.fetch_int(i)*(G % x**8)).coefficients(sparse=True)):\n+ *           v = v*32 + coef.integer_representation()\n+ *       print(\"0x%x\" % v)\n+ */\n+uint64_t PolyMod(uint64_t c, int val)\n+{\n+    uint8_t c0 = c >> 35;\n+    c = ((c & 0x7ffffffff) << 5) ^ val;\n+    if (c0 & 1) c ^= 0xf5dee51989;\n+    if (c0 & 2) c ^= 0xa9fdca3312;\n+    if (c0 & 4) c ^= 0x1bab10e32d;\n+    if (c0 & 8) c ^= 0x3706b1677a;\n+    if (c0 & 16) c ^= 0x644d626ffd;\n+    return c;\n+}\n+\n+std::string DescriptorChecksum(const Span<const char>& span)\n+{\n+    /** A character set designed such that:\n+     *  - The most common 'unprotected' descriptor characters (hex, keypaths) are in the first group of 32.\n+     *  - Case errors cause an offset that's a multiple of 32.\n+     *  - As many alphabetic characters are in the same group (while following the above restrictions).\n+     *\n+     * If p(x) gives the position of a character c in this character set, every group of 3 characters\n+     * (a,b,c) is encoded as the 4 symbols (p(a) & 31, p(b) & 31, p(c) & 31, (p(a) / 32) + 3 * (p(b) / 32) + 9 * (p(c) / 32).\n+     * This means that changes that only affect the lower 5 bits of the position, or only the higher 2 bits, will just\n+     * affect a single symbol.\n+     *\n+     * As a result, within-group-of-32 errors count as 1 symbol, as do cross-group errors that don't affect\n+     * the position within the groups.\n+     */\n+    static std::string INPUT_CHARSET =\n+        \"0123456789()[],'/*abcdefgh@:$%{}\"\n+        \"IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~\"\n+        \"ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \";\n+\n+    /** The character set for the checksum itself (same as bech32). */\n+    static std::string CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n+\n+    uint64_t c = 1;\n+    int cls = 0;\n+    int clscount = 0;\n+    for (auto ch : span) {\n+        auto pos = INPUT_CHARSET.find(ch);\n+        if (pos == std::string::npos) return \"\";\n+        c = PolyMod(c, pos & 31); // Emit a symbol for the position inside the group, for every character.\n+        cls = cls * 3 + (pos >> 5); // Accumulate the group numbers\n+        if (++clscount == 3) {\n+            // Emit an extra symbol representing the group numbers, for every 3 characters.\n+            c = PolyMod(c, cls);\n+            cls = 0;\n+            clscount = 0;\n+        }\n+    }\n+    if (clscount > 0) c = PolyMod(c, cls);\n+    for (int j = 0; j < 8; ++j) c = PolyMod(c, 0); // Shift further to determine the checksum.\n+    c ^= 1; // Prevent appending zeroes from not affecting the checksum.\n+\n+    std::string ret(8, ' ');\n+    for (int j = 0; j < 8; ++j) ret[j] = CHECKSUM_CHARSET[(c >> (5 * (7 - j))) & 31];\n+    return ret;\n+}\n+\n+std::string AddChecksum(const std::string& str) { return str + \"#\" + DescriptorChecksum(MakeSpan(str)); }\n+\n ////////////////////////////////////////////////////////////////////////////\n // Internal representation                                                //\n ////////////////////////////////////////////////////////////////////////////\n@@ -273,10 +392,15 @@ class DescriptorImpl : public Descriptor\n     {\n         std::string ret;\n         ToStringHelper(nullptr, ret, false);\n-        return ret;\n+        return AddChecksum(ret);\n     }\n \n-    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override final { return ToStringHelper(&arg, out, true); }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override final\n+    {\n+        bool ret = ToStringHelper(&arg, out, true);\n+        out = AddChecksum(out);\n+        return ret;\n+    }\n \n     bool ExpandHelper(int pos, const SigningProvider& arg, Span<const unsigned char>* cache_read, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache_write) const\n     {\n@@ -751,11 +875,25 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n     return MakeUnique<RawDescriptor>(script);\n }\n \n+\n } // namespace\n \n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out)\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());\n+\n+    // Checksum checks\n+    auto check_split = Split(sp, '#');\n+    if (check_split.size() > 2) return nullptr; // Multiple '#' symbols\n+    if (check_split.size() == 1 && require_checksum) return nullptr; // Missing checksum\n+    if (check_split.size() == 2) {\n+        if (check_split[1].size() != 8) return nullptr; // Unexpected length for checksum\n+        auto checksum = DescriptorChecksum(check_split[0]);\n+        if (checksum.empty()) return nullptr; // Invalid characters in payload\n+        if (!std::equal(checksum.begin(), checksum.end(), check_split[1].begin())) return nullptr; // Checksum mismatch\n+    }\n+    sp = check_split[0];\n+\n     auto ret = ParseScript(sp, ParseScriptContext::TOP, out);\n     if (sp.size() == 0 && ret) return std::unique_ptr<Descriptor>(std::move(ret));\n     return nullptr;"
      },
      {
        "sha": "907a102284c54af4bc9f0ffcfae7bbf6080e7c52",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -62,8 +62,15 @@ struct Descriptor {\n     virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n };\n \n-/** Parse a descriptor string. Included private keys are put in out. Returns nullptr if parsing fails. */\n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out);\n+/** Parse a descriptor string. Included private keys are put in out.\n+ *\n+ * If the descriptor has a checksum, it must be valid. If require_checksum\n+ * is set, the checksum is mandatory - otherwise it is optional.\n+ *\n+ * If a parse error occurs, or the checksum is missing/invalid, or anything\n+ * else is wrong, nullptr is returned.\n+ */\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum = false);\n \n /** Find a descriptor for the specified script, using information from provider where possible.\n  *"
      },
      {
        "sha": "ff2b8d4fc93431e8ec26972c12eb123d18352cde",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 6,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -18,8 +18,8 @@ void CheckUnparsable(const std::string& prv, const std::string& pub)\n     FlatSigningProvider keys_priv, keys_pub;\n     auto parse_priv = Parse(prv, keys_priv);\n     auto parse_pub = Parse(pub, keys_pub);\n-    BOOST_CHECK(!parse_priv);\n-    BOOST_CHECK(!parse_pub);\n+    BOOST_CHECK_MESSAGE(!parse_priv, prv);\n+    BOOST_CHECK_MESSAGE(!parse_pub, pub);\n }\n \n constexpr int DEFAULT = 0;\n@@ -28,13 +28,26 @@ constexpr int HARDENED = 2; // Derivation needs access to private keys\n constexpr int UNSOLVABLE = 4; // This descriptor is not expected to be solvable\n constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)\n \n+/** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */\n+bool EqualDescriptor(std::string a, std::string b)\n+{\n+    bool a_check = (a.size() > 9 && a[a.size() - 9] == '#');\n+    bool b_check = (b.size() > 9 && b[b.size() - 9] == '#');\n+    if (a_check != b_check) {\n+        if (a_check) a = a.substr(0, a.size() - 9);\n+        if (b_check) b = b.substr(0, b.size() - 9);\n+    }\n+    return a == b;\n+}\n+\n std::string MaybeUseHInsteadOfApostrophy(std::string ret)\n {\n     if (InsecureRandBool()) {\n         while (true) {\n             auto it = ret.find(\"'\");\n             if (it != std::string::npos) {\n                 ret[it] = 'h';\n+                if (ret.size() > 9 && ret[ret.size() - 9] == '#') ret = ret.substr(0, ret.size() - 9); // Changing apostrophe to h breaks the checksum\n             } else {\n                 break;\n             }\n@@ -63,16 +76,16 @@ void Check(const std::string& prv, const std::string& pub, int flags, const std:\n     // Check that both versions serialize back to the public version.\n     std::string pub1 = parse_priv->ToString();\n     std::string pub2 = parse_pub->ToString();\n-    BOOST_CHECK_EQUAL(pub, pub1);\n-    BOOST_CHECK_EQUAL(pub, pub2);\n+    BOOST_CHECK(EqualDescriptor(pub, pub1));\n+    BOOST_CHECK(EqualDescriptor(pub, pub2));\n \n     // Check that both can be serialized with private key back to the private version, but not without private key.\n     std::string prv1;\n     BOOST_CHECK(parse_priv->ToPrivateString(keys_priv, prv1));\n-    BOOST_CHECK_EQUAL(prv, prv1);\n+    BOOST_CHECK(EqualDescriptor(prv, prv1));\n     BOOST_CHECK(!parse_priv->ToPrivateString(keys_pub, prv1));\n     BOOST_CHECK(parse_pub->ToPrivateString(keys_priv, prv1));\n-    BOOST_CHECK_EQUAL(prv, prv1);\n+    BOOST_CHECK(EqualDescriptor(prv, prv1));\n     BOOST_CHECK(!parse_pub->ToPrivateString(keys_pub, prv1));\n \n     // Check whether IsRange on both returns the expected result\n@@ -210,6 +223,15 @@ BOOST_AUTO_TEST_CASE(descriptor_test)\n     CheckUnparsable(\"wsh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2SH inside P2WSH\n     CheckUnparsable(\"sh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2SH inside P2SH\n     CheckUnparsable(\"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2WSH inside P2WSH\n+\n+    // Checksums\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    Check(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}}, {{0x8000006FUL,222},{0}});\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#\"); // Empty checksum\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfyq\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5tq\"); // Too long checksum\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxf\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5\"); // Too short checksum\n+    CheckUnparsable(\"sh(multi(3,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy\", \"sh(multi(3,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t\"); // Error in payload\n+    CheckUnparsable(\"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggssrxfy\", \"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjq09x4t\"); // Error in checksum\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "66a52c1270bfb06b97764b423a829df42e665511",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -1117,7 +1117,7 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n \n     const std::string& descriptor = data[\"desc\"].get_str();\n     FlatSigningProvider keys;\n-    auto parsed_desc = Parse(descriptor, keys);\n+    auto parsed_desc = Parse(descriptor, keys, /* require_checksum = */ true);\n     if (!parsed_desc) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Descriptor is invalid\");\n     }"
      },
      {
        "sha": "c8b58cfc74c8a73338fc491372979e5208ef00fa",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the deriveaddresses rpc call.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class DeriveaddressesTest(BitcoinTestFramework):\n@@ -14,36 +15,37 @@ def set_test_params(self):\n     def run_test(self):\n         assert_raises_rpc_error(-5, \"Invalid descriptor\", self.nodes[0].deriveaddresses, \"a\")\n \n-        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)#t6wfjs64\"\n         address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n-\n         assert_equal(self.nodes[0].deriveaddresses(descriptor), [address])\n \n-        descriptor_pubkey = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)\"\n-        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n+        descriptor = descriptor[:-9]\n+        assert_raises_rpc_error(-5, \"Invalid descriptor\", self.nodes[0].deriveaddresses, descriptor)\n \n+        descriptor_pubkey = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)#s9ga3alw\"\n+        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n         assert_equal(self.nodes[0].deriveaddresses(descriptor_pubkey), [address])\n \n-        ranged_descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"\n+        ranged_descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)#kft60nuy\"\n         assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 0, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n \n-        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\", 0, 2)\n+        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"), 0, 2)\n \n-        assert_raises_rpc_error(-8, \"Range must be specified for a ranged descriptor\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\")\n+        assert_raises_rpc_error(-8, \"Range must be specified for a ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"))\n \n-        assert_raises_rpc_error(-8, \"Missing range end parameter\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", 0)\n+        assert_raises_rpc_error(-8, \"Missing range end parameter\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 0)\n \n-        assert_raises_rpc_error(-8, \"Range end should be equal to or greater than begin\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", 2, 0)\n+        assert_raises_rpc_error(-8, \"Range end should be equal to or greater than begin\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 2, 0)\n \n-        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", -1, 0)\n+        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), -1, 0)\n \n-        combo_descriptor = \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        combo_descriptor = descsum_create(\"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\")\n         assert_equal(self.nodes[0].deriveaddresses(combo_descriptor), [\"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", \"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", address, \"2NDvEwGfpEqJWfybzpKPHF2XH3jwoQV3D7x\"])\n \n-        hardened_without_privkey_descriptor = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1'/1/0)\"\n+        hardened_without_privkey_descriptor = descsum_create(\"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1'/1/0)\")\n         assert_raises_rpc_error(-5, \"Cannot derive script without private keys\", self.nodes[0].deriveaddresses, hardened_without_privkey_descriptor)\n \n-        bare_multisig_descriptor = \"multi(1, tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0, tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1)\"\n+        bare_multisig_descriptor = descsum_create(\"multi(1,tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0,tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1)\")\n         assert_raises_rpc_error(-5, \"Descriptor does not have a corresponding address\", self.nodes[0].deriveaddresses, bare_multisig_descriptor)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "29074c6af3f0bdc8134b06432778af2d458dccc6",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -97,9 +97,9 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n \n         # Test the reported descriptors for a few matches\n-        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/*)\", \"range\": 1499}])), [\"pkh([0c5f9a1e/0'/0'/0]026dbd8b2315f296d36e6b6920b1579ca75569464875c7ebe869b536a7d9503c8c)\", \"pkh([0c5f9a1e/0'/0'/1]033e6f25d76c00bedb3a8993c7d5739ee806397f0529b1b31dda31ef890f19a60c)\"])\n-        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"])), [\"pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)\"])\n-        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])), ['pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)', 'pkh([0c5f9a1e/1/1/1500]03832901c250025da2aebae2bfb38d5c703a57ab66ad477f9c578bfbcd78abca6f)', 'pkh([0c5f9a1e/1/1/1]030d820fc9e8211c4169be8530efbc632775d8286167afd178caaf1089b77daba7)'])\n+        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/*)\", \"range\": 1499}])), [\"pkh([0c5f9a1e/0'/0'/0]026dbd8b2315f296d36e6b6920b1579ca75569464875c7ebe869b536a7d9503c8c)#dzxw429x\", \"pkh([0c5f9a1e/0'/0'/1]033e6f25d76c00bedb3a8993c7d5739ee806397f0529b1b31dda31ef890f19a60c)#43rvceed\"])\n+        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"])), [\"pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)#cxmct4w8\"])\n+        assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])), ['pkh([0c5f9a1e/1/1/0]03e1c5b6e650966971d7e71ef2674f80222752740fc1dfd63bbbd220d2da9bd0fb)#cxmct4w8', 'pkh([0c5f9a1e/1/1/1500]03832901c250025da2aebae2bfb38d5c703a57ab66ad477f9c578bfbcd78abca6f)#vchwd07g', 'pkh([0c5f9a1e/1/1/1]030d820fc9e8211c4169be8530efbc632775d8286167afd178caaf1089b77daba7)#z2t3ypsa'])\n \n if __name__ == '__main__':\n     ScantxoutsetTest().main()"
      },
      {
        "sha": "29482ce01e17cf96c219f424349fcbb814013a45",
        "filename": "test/functional/test_framework/descriptors.py",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/test_framework/descriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/test_framework/descriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/descriptors.py?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -0,0 +1,55 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 Pieter Wuille\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Utility functions related to output descriptors\"\"\"\n+\n+INPUT_CHARSET = \"0123456789()[],'/*abcdefgh@:$%{}IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \"\n+CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n+GENERATOR = [0xf5dee51989, 0xa9fdca3312, 0x1bab10e32d, 0x3706b1677a, 0x644d626ffd]\n+\n+def descsum_polymod(symbols):\n+    \"\"\"Internal function that computes the descriptor checksum.\"\"\"\n+    chk = 1\n+    for value in symbols:\n+        top = chk >> 35\n+        chk = (chk & 0x7ffffffff) << 5 ^ value\n+        for i in range(5):\n+            chk ^= GENERATOR[i] if ((top >> i) & 1) else 0\n+    return chk\n+\n+def descsum_expand(s):\n+    \"\"\"Internal function that does the character to symbol expansion\"\"\"\n+    groups = []\n+    symbols = []\n+    for c in s:\n+        if not c in INPUT_CHARSET:\n+            return None\n+        v = INPUT_CHARSET.find(c)\n+        symbols.append(v & 31)\n+        groups.append(v >> 5)\n+        if len(groups) == 3:\n+            symbols.append(groups[0] * 9 + groups[1] * 3 + groups[2])\n+            groups = []\n+    if len(groups) == 1:\n+        symbols.append(groups[0])\n+    elif len(groups) == 2:\n+        symbols.append(groups[0] * 3 + groups[1])\n+    return symbols\n+\n+def descsum_create(s):\n+    \"\"\"Add a checksum to a descriptor without\"\"\"\n+    symbols = descsum_expand(s) + [0, 0, 0, 0, 0, 0, 0, 0]\n+    checksum = descsum_polymod(symbols) ^ 1\n+    return s + '#' + ''.join(CHECKSUM_CHARSET[(checksum >> (5 * (7 - i))) & 31] for i in range(8))\n+\n+def descsum_check(s, require=True):\n+    \"\"\"Verify that the checksum is correct in a descriptor\"\"\"\n+    if not '#' in s:\n+        return not require\n+    if s[-9] != '#':\n+        return False\n+    if not all(x in CHECKSUM_CHARSET for x in s[-8:]):\n+        return False\n+    symbols = descsum_expand(s[:-9]) + [CHECKSUM_CHARSET.find(x) for x in s[-8:]]\n+    return descsum_polymod(symbols) == 1"
      },
      {
        "sha": "380dd9c0ade0199254ab7fa5659f700521b5b936",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -54,6 +54,10 @@\n import itertools\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import (\n+    descsum_create,\n+    descsum_check,\n+)\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n@@ -167,24 +171,31 @@ def test_desc(self, node, address, multisig, typ, utxo):\n             assert_equal(deriv['path'][0], 'm')\n             key_descs[deriv['pubkey']] = '[' + deriv['master_fingerprint'] + deriv['path'][1:] + ']' + deriv['pubkey']\n \n+        # Verify the descriptor checksum against the Python implementation\n+        assert(descsum_check(info['desc']))\n+        # Verify that stripping the checksum and recreating it using Python roundtrips\n+        assert(info['desc'] == descsum_create(info['desc'][:-9]))\n+        # Verify that stripping the checksum and feeding it to getdescriptorinfo roundtrips\n+        assert(info['desc'] == self.nodes[0].getdescriptorinfo(info['desc'][:-9])['descriptor'])\n+\n         if not multisig and typ == 'legacy':\n             # P2PKH\n-            assert_equal(info['desc'], \"pkh(%s)\" % key_descs[info['pubkey']])\n+            assert_equal(info['desc'], descsum_create(\"pkh(%s)\" % key_descs[info['pubkey']]))\n         elif not multisig and typ == 'p2sh-segwit':\n             # P2SH-P2WPKH\n-            assert_equal(info['desc'], \"sh(wpkh(%s))\" % key_descs[info['pubkey']])\n+            assert_equal(info['desc'], descsum_create(\"sh(wpkh(%s))\" % key_descs[info['pubkey']]))\n         elif not multisig and typ == 'bech32':\n             # P2WPKH\n-            assert_equal(info['desc'], \"wpkh(%s)\" % key_descs[info['pubkey']])\n+            assert_equal(info['desc'], descsum_create(\"wpkh(%s)\" % key_descs[info['pubkey']]))\n         elif typ == 'legacy':\n             # P2SH-multisig\n-            assert_equal(info['desc'], \"sh(multi(2,%s,%s))\" % (key_descs[info['pubkeys'][0]], key_descs[info['pubkeys'][1]]))\n+            assert_equal(info['desc'], descsum_create(\"sh(multi(2,%s,%s))\" % (key_descs[info['pubkeys'][0]], key_descs[info['pubkeys'][1]])))\n         elif typ == 'p2sh-segwit':\n             # P2SH-P2WSH-multisig\n-            assert_equal(info['desc'], \"sh(wsh(multi(2,%s,%s)))\" % (key_descs[info['embedded']['pubkeys'][0]], key_descs[info['embedded']['pubkeys'][1]]))\n+            assert_equal(info['desc'], descsum_create(\"sh(wsh(multi(2,%s,%s)))\" % (key_descs[info['embedded']['pubkeys'][0]], key_descs[info['embedded']['pubkeys'][1]])))\n         elif typ == 'bech32':\n             # P2WSH-multisig\n-            assert_equal(info['desc'], \"wsh(multi(2,%s,%s))\" % (key_descs[info['pubkeys'][0]], key_descs[info['pubkeys'][1]]))\n+            assert_equal(info['desc'], descsum_create(\"wsh(multi(2,%s,%s))\" % (key_descs[info['pubkeys'][0]], key_descs[info['pubkeys'][1]])))\n         else:\n             # Unknown type\n             assert(False)"
      },
      {
        "sha": "8e25aa7337aa4277bcf21331fd2cd04e88b1401b",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 27,
        "deletions": 15,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60d029a2a768b082e75ed98c92429e56f58974d/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=f60d029a2a768b082e75ed98c92429e56f58974d",
        "patch": "@@ -20,6 +20,7 @@\n     OP_NOP,\n )\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n@@ -545,11 +546,22 @@ def run_test(self):\n \n         # Test importing of a P2SH-P2WPKH address via descriptor + private key\n         key = get_key(self.nodes[0])\n-        self.log.info(\"Should import a p2sh-p2wpkh address from descriptor and private key\")\n+        self.log.info(\"Should not import a p2sh-p2wpkh address from descriptor without checksum and private key\")\n         self.test_importmulti({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n                                \"timestamp\": \"now\",\n                                \"label\": \"Descriptor import test\",\n                                \"keys\": [key.privkey]},\n+                              success=False,\n+                              error_code=-5,\n+                              error_message=\"Descriptor is invalid\")\n+\n+        # Test importing of a P2SH-P2WPKH address via descriptor + private key\n+        key = get_key(self.nodes[0])\n+        self.log.info(\"Should import a p2sh-p2wpkh address from descriptor and private key\")\n+        self.test_importmulti({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"label\": \"Descriptor import test\",\n+                               \"keys\": [key.privkey]},\n                               success=True)\n         test_address(self.nodes[1],\n                      key.p2sh_p2wpkh_addr,\n@@ -562,15 +574,15 @@ def run_test(self):\n         addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n         desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n         self.log.info(\"Ranged descriptor import should fail without a specified range\")\n-        self.test_importmulti({\"desc\": desc,\n+        self.test_importmulti({\"desc\": descsum_create(desc),\n                                \"timestamp\": \"now\"},\n                               success=False,\n                               error_code=-8,\n                               error_message='Descriptor is ranged, please specify the range')\n \n         # Test importing of a ranged descriptor without keys\n         self.log.info(\"Should import the ranged descriptor with specified range as solvable\")\n-        self.test_importmulti({\"desc\": desc,\n+        self.test_importmulti({\"desc\": descsum_create(desc),\n                                \"timestamp\": \"now\",\n                                \"range\": {\"end\": 1}},\n                               success=True,\n@@ -583,7 +595,7 @@ def run_test(self):\n         # Test importing of a P2PKH address via descriptor\n         key = get_key(self.nodes[0])\n         self.log.info(\"Should import a p2pkh address from descriptor\")\n-        self.test_importmulti({\"desc\": \"pkh(\" + key.pubkey + \")\",\n+        self.test_importmulti({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n                                \"timestamp\": \"now\",\n                                \"label\": \"Descriptor import test\"},\n                               True,\n@@ -597,7 +609,7 @@ def run_test(self):\n         # Test import fails if both desc and scriptPubKey are provided\n         key = get_key(self.nodes[0])\n         self.log.info(\"Import should fail if both scriptPubKey and desc are provided\")\n-        self.test_importmulti({\"desc\": \"pkh(\" + key.pubkey + \")\",\n+        self.test_importmulti({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n                                \"scriptPubKey\": {\"address\": key.p2pkh_addr},\n                                \"timestamp\": \"now\"},\n                               success=False,\n@@ -616,7 +628,7 @@ def run_test(self):\n         key1 = get_key(self.nodes[0])\n         key2 = get_key(self.nodes[0])\n         self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n-        self.test_importmulti({\"desc\": \"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\",\n+        self.test_importmulti({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n                                \"timestamp\": \"now\"},\n                               success=True)\n         self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n@@ -635,7 +647,7 @@ def run_test(self):\n         pub_fpr = info['hdmasterfingerprint']\n         result = self.nodes[0].importmulti(\n             [{\n-                'desc' : \"wpkh([\" + pub_fpr + pub_keypath[1:] +\"]\" + pub + \")\",\n+                'desc' : descsum_create(\"wpkh([\" + pub_fpr + pub_keypath[1:] +\"]\" + pub + \")\"),\n                 \"timestamp\": \"now\",\n             }]\n         )\n@@ -653,7 +665,7 @@ def run_test(self):\n         priv_fpr = info['hdmasterfingerprint']\n         result = self.nodes[0].importmulti(\n             [{\n-                'desc' : \"wpkh([\" + priv_fpr + priv_keypath[1:] + \"]\" + priv + \")\",\n+                'desc' : descsum_create(\"wpkh([\" + priv_fpr + priv_keypath[1:] + \"]\" + priv + \")\"),\n                 \"timestamp\": \"now\",\n             }]\n         )\n@@ -701,12 +713,12 @@ def run_test(self):\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wpkh(' + pub1 + ')',\n+                'desc': descsum_create('wpkh(' + pub1 + ')'),\n                 'keypool': True,\n                 \"timestamp\": \"now\",\n             },\n             {\n-                'desc': 'wpkh(' + pub2 + ')',\n+                'desc': descsum_create('wpkh(' + pub2 + ')'),\n                 'keypool': True,\n                 \"timestamp\": \"now\",\n             }]\n@@ -727,13 +739,13 @@ def run_test(self):\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wpkh(' + pub1 + ')',\n+                'desc': descsum_create('wpkh(' + pub1 + ')'),\n                 'keypool': True,\n                 'internal': True,\n                 \"timestamp\": \"now\",\n             },\n             {\n-                'desc': 'wpkh(' + pub2 + ')',\n+                'desc': descsum_create('wpkh(' + pub2 + ')'),\n                 'keypool': True,\n                 'internal': True,\n                 \"timestamp\": \"now\",\n@@ -755,7 +767,7 @@ def run_test(self):\n         pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wsh(multi(2,' + pub1 + ',' + pub2 + '))',\n+                'desc': descsum_create('wsh(multi(2,' + pub1 + ',' + pub2 + '))'),\n                 'keypool': True,\n                 \"timestamp\": \"now\",\n             }]\n@@ -769,7 +781,7 @@ def run_test(self):\n         assert wrpc.getwalletinfo()['private_keys_enabled']\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wpkh(' + pub1 + ')',\n+                'desc': descsum_create('wpkh(' + pub1 + ')'),\n                 'keypool': True,\n                 \"timestamp\": \"now\",\n             }]\n@@ -792,7 +804,7 @@ def run_test(self):\n         ]\n         result = wrpc.importmulti(\n             [{\n-                'desc': 'wpkh([80002067/0h/0h]' + xpub + '/*)',\n+                'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n                 'keypool': True,\n                 'timestamp': 'now',\n                 'range' : {'start': 0, 'end': 4}"
      }
    ]
  },
  {
    "sha": "d3661a3fd247e8fb3911e2f7256025de8b163aeb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzY2MWEzZmQyNDdlOGZiMzkxMWUyZjcyNTYwMjVkZThiMTYzYWVi",
    "commit": {
      "author": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2019-02-16T21:27:28Z"
      },
      "committer": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2019-02-16T21:27:28Z"
      },
      "message": "[Doc] add missing newline to witnessScript in listunspent help",
      "tree": {
        "sha": "af0b66bd99710796b2bcdd207fdcb53d813485ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af0b66bd99710796b2bcdd207fdcb53d813485ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3661a3fd247e8fb3911e2f7256025de8b163aeb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEgxUkqkMp0LnoXjCr2dtBqWwiadMFAlxogGEACgkQ2dtBqWwi\nadPulBAAmdmjtYsnlpaWbgGsfqZwjYqX26rzO1+vuHbihUBEkCYlcEcyK56nMaAv\nLpNtBe2/Im0YRVcUK6CIo1lz9PrwTkWyombDeDa1dv3Wv8S6UQ/6ObfSpC8J4DUy\n6Te6u/bn5Y1mUYTOFOJhBqUHYrWgIFtSopCUZG3zRr4ur+aABskaWrSJHZCnAxFK\nu6bL7k8Jq+/SARclb82IFhtNpwetaguMJc1IDIEC4g4D2sXrmosTq8ocBOiOUJG1\ng6jquVjV29lehqQo90ZqSGGmOeq2o4BYTnqpqcBdEHYicJdkr07HGl4Dq68bGaac\ncaCXz9IdtUvjleEjxesT8ybk4QpCj4RWkmP9YnY8myi28lCEL0DsxKbJXHXpEdyP\njQfjkk2TUopt6Pk5iT4jf8NgoYAwn2wvAzTw9REuv5T7EnqiN15LUa6DfLLctT62\n9TugSel9Nc4qucXdo5e1M/jULP86hkL7hzoS3ETfz60xOD7mqoEHyzAszsbt5l5o\nOYP6AJh9uWCojQYwZYHGKJbta5Du1lDqtPW3ZmU/t8/qf8UBxLtvBOejbNL5sWLv\nKb7g83WvUwaIwaYdgUDqH7lgx5L0hWE+9rExwIelFDTfxOf+PX7vaS0W06MYUE1y\n4GJ8lKnC4qCk4zzfTaIMf9IHu/JQU+khg8MKUtnZoLQWXqWxkBg=\n=nWIF\n-----END PGP SIGNATURE-----",
        "payload": "tree af0b66bd99710796b2bcdd207fdcb53d813485ee\nparent f60d029a2a768b082e75ed98c92429e56f58974d\nauthor David A. Harding <dave@dtrt.org> 1550352448 -0500\ncommitter David A. Harding <dave@dtrt.org> 1550352448 -0500\n\n[Doc] add missing newline to witnessScript in listunspent help\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3661a3fd247e8fb3911e2f7256025de8b163aeb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3661a3fd247e8fb3911e2f7256025de8b163aeb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3661a3fd247e8fb3911e2f7256025de8b163aeb/comments",
    "author": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60d029a2a768b082e75ed98c92429e56f58974d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60d029a2a768b082e75ed98c92429e56f58974d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60d029a2a768b082e75ed98c92429e56f58974d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "37fc88dfd5152afd3a2f7c32af476576bb083516",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3661a3fd247e8fb3911e2f7256025de8b163aeb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3661a3fd247e8fb3911e2f7256025de8b163aeb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d3661a3fd247e8fb3911e2f7256025de8b163aeb",
        "patch": "@@ -2758,7 +2758,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n-            \"    \\\"redeemScript\\\" : \\\"script\\\" (string) The redeemScript if scriptPubKey is P2SH\"\n+            \"    \\\"redeemScript\\\" : \\\"script\\\" (string) The redeemScript if scriptPubKey is P2SH\\n\"\n             \"    \\\"witnessScript\\\" : \\\"script\\\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n             \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\""
      }
    ]
  },
  {
    "sha": "a607c9ae4c2730fca5ce340c400c95c87e498a7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjA3YzlhZTRjMjczMGZjYTVjZTM0MGM0MDBjOTVjODdlNDk4YTdj",
    "commit": {
      "author": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2019-02-16T21:58:41Z"
      },
      "committer": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2019-02-16T21:59:55Z"
      },
      "message": "[Doc] importmulti: add missing description of keypool option",
      "tree": {
        "sha": "437a7dfe310efa3d9b41d96e4e4ed486caaaf352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/437a7dfe310efa3d9b41d96e4e4ed486caaaf352"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a607c9ae4c2730fca5ce340c400c95c87e498a7c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEgxUkqkMp0LnoXjCr2dtBqWwiadMFAlxoh9wACgkQ2dtBqWwi\nadMA4A/+LnkzAsGM3TTwBbMuB5c3mRUCAQ1RzfeLVWX8YuRgANvtyybUgiGghVDD\njTqYqlYQbeBGMs5fgiuggN6b0IUqmRGaA/cvpDKz6ZpD6iAsfsCWXqufxpj2Lk+m\nZRNaUOXpyzJzQAT/1qac7RQbrVUUsfC922rtLN7arnQEx/pperh8HWsV8Y9vGMLI\nAzX+QmkKiRB2bulvrQJCvIBsIb/E/rybMaW9F0AnH0WJQHaifK2z8wqWGHbRIn0H\nf8SK6daydqF6fHhnyC6cfZE4dmCCXFZ3HztrcGAEUDydYZKwZK/e0AxbsLDfPyjI\nx1NAyPw96JYlOOXAPMZe+F1v4w4vMKigXR+rkmLqK4k4iHp/PE3QcSgmwaQh9iPF\nnLB+ds6XRAmZhufy3RDILvdFtYJ0jyZA4mr61RiMIFA5nnPVb/MxcFuMso2G8sIk\nrohLh+waOxGS7YRINlkNGptkW1PMAaZBJ9VP+WohXZVYwJ6y37XzpwuMZ8DXEl0n\nOvopqjoWxbxy4KGMgrOK2L+STsBRM5QFlSg4XBqy/d0Ha627WlnbDTl6zs6fwub0\npa6Rs7PqY+Hgj3f+OVBlllvdTdrawrFlyEb8TDK5otqrnUu+XV8dNNE1nz7deYgP\nuXSGlndJISAZwhdh9ovKIfPewQKqnUWyjs9hOdlN2IWt1FT+jgs=\n=8LZx\n-----END PGP SIGNATURE-----",
        "payload": "tree 437a7dfe310efa3d9b41d96e4e4ed486caaaf352\nparent f60d029a2a768b082e75ed98c92429e56f58974d\nauthor David A. Harding <dave@dtrt.org> 1550354321 -0500\ncommitter David A. Harding <dave@dtrt.org> 1550354395 -0500\n\n[Doc] importmulti: add missing description of keypool option\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a607c9ae4c2730fca5ce340c400c95c87e498a7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a607c9ae4c2730fca5ce340c400c95c87e498a7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a607c9ae4c2730fca5ce340c400c95c87e498a7c/comments",
    "author": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60d029a2a768b082e75ed98c92429e56f58974d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60d029a2a768b082e75ed98c92429e56f58974d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60d029a2a768b082e75ed98c92429e56f58974d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f38202a2b81f8a38966a0f981771ae99bcd40c0c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a607c9ae4c2730fca5ce340c400c95c87e498a7c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a607c9ae4c2730fca5ce340c400c95c87e498a7c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a607c9ae4c2730fca5ce340c400c95c87e498a7c",
        "patch": "@@ -1382,6 +1382,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                     {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n                                     {\"watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n                                     {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                    {\"keypool\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether imported public keys should be added to the keypool for when users request new addresses. Only allowed when wallet private keys are disabled\"},\n                                 },\n                             },\n                         },"
      }
    ]
  },
  {
    "sha": "e9c190044df820445c1b66028b3dd82bf1cf67ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWMxOTAwNDRkZjgyMDQ0NWMxYjY2MDI4YjNkZDgyYmYxY2Y2N2Fk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-17T01:41:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-17T01:42:06Z"
      },
      "message": "Merge #15398: msvc: add rapidcheck property tests\n\nd067e81dcf574b6504813bbf742cd5af057e8e9b msvc: add rapid check property tests (Chun Kuan Lee)\n\nPull request description:\n\n  This PR add the property tests into the binaries built by MSVC.\n\n  And another trivial change is that I reordered the appveyor package list.\n\nTree-SHA512: 25d66db464beb7b512cc1f88d8557d6a047000a97d78f49884bb91a65ec142e0458039c919f51bf73413359fcf3e63e1ea4d76586b862f1c140d2ca05ee8b23d",
      "tree": {
        "sha": "1b85e183496268f83e3366efe49d9edfe4a3e734",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b85e183496268f83e3366efe49d9edfe4a3e734"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9c190044df820445c1b66028b3dd82bf1cf67ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxou+4ACgkQHkrtYphs\n0l2t+Af9HkxAvUe2Kuc+0Hx1saozuIverlxtjzxGZks0jLffQXB6VNgUPWFKU/WM\n10geDy/clzp3rLXNKIHqb+c/LysYq6ulA8qkzKeMcib6ODmnxLhD+EaSs5SMYRhf\n0uGBqTwfWQ466xH/i6IwyJ9QG0EguaIVbvZzk2BioGhshYOKvaSvM9trZ297x+Lw\nffm9dG8h9lWYoJj1qR2J1thbr8tG/Nq/Sv6J+ANprdwmYFGj1UCk+KLMyDg1VTEw\na1BgSROkN3mvyVD6FXnvB8K3dZPaAd0bGfq2oxTPXnO4tzqmzQaIJlEGJ28azF7W\nQFOvyZLC4HuCR6XyXZQ9cMItHDCruw==\n=JKGT\n-----END PGP SIGNATURE-----",
        "payload": "tree 1b85e183496268f83e3366efe49d9edfe4a3e734\nparent f60d029a2a768b082e75ed98c92429e56f58974d\nparent d067e81dcf574b6504813bbf742cd5af057e8e9b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550367707 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550367726 +0100\n\nMerge #15398: msvc: add rapidcheck property tests\n\nd067e81dcf574b6504813bbf742cd5af057e8e9b msvc: add rapid check property tests (Chun Kuan Lee)\n\nPull request description:\n\n  This PR add the property tests into the binaries built by MSVC.\n\n  And another trivial change is that I reordered the appveyor package list.\n\nTree-SHA512: 25d66db464beb7b512cc1f88d8557d6a047000a97d78f49884bb91a65ec142e0458039c919f51bf73413359fcf3e63e1ea4d76586b862f1c140d2ca05ee8b23d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9c190044df820445c1b66028b3dd82bf1cf67ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9c190044df820445c1b66028b3dd82bf1cf67ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9c190044df820445c1b66028b3dd82bf1cf67ad/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60d029a2a768b082e75ed98c92429e56f58974d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60d029a2a768b082e75ed98c92429e56f58974d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60d029a2a768b082e75ed98c92429e56f58974d"
      },
      {
        "sha": "d067e81dcf574b6504813bbf742cd5af057e8e9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d067e81dcf574b6504813bbf742cd5af057e8e9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d067e81dcf574b6504813bbf742cd5af057e8e9b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bb7c8ab4cb110d446560b9a71986534a5af7224d",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9c190044df820445c1b66028b3dd82bf1cf67ad/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9c190044df820445c1b66028b3dd82bf1cf67ad/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=e9c190044df820445c1b66028b3dd82bf1cf67ad",
        "patch": "@@ -7,7 +7,7 @@ clone_depth: 5\n environment:\n   APPVEYOR_SAVE_CACHE_ON_ERROR: true\n   CLCACHE_SERVER: 1\n-  PACKAGES: boost-filesystem boost-signals2 boost-test libevent openssl zeromq berkeleydb\n+  PACKAGES: berkeleydb boost-filesystem boost-signals2 boost-test libevent openssl rapidcheck zeromq\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n cache:"
      },
      {
        "sha": "03db97c647326dd514f1d7e1b7679be65cf34315",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9c190044df820445c1b66028b3dd82bf1cf67ad/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9c190044df820445c1b66028b3dd82bf1cf67ad/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=e9c190044df820445c1b66028b3dd82bf1cf67ad",
        "patch": "@@ -21,6 +21,8 @@\n   </ItemGroup>\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\test\\*_tests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\*_properties.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\gen\\*_gen.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_tests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\test\\test_bitcoin.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\test\\test_bitcoin_main.cpp\" />"
      }
    ]
  },
  {
    "sha": "2d0337992d8146fa9f6dc9470d73890fdcd67f20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDAzMzc5OTJkODE0NmZhOWY2ZGM5NDcwZDczODkwZmRjZDY3ZjIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-17T01:43:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-17T01:43:57Z"
      },
      "message": "Merge #15426: [Doc] importmulti: add missing description of keypool option\n\na607c9ae4c2730fca5ce340c400c95c87e498a7c [Doc] importmulti: add missing description of keypool option (David A. Harding)\n\nPull request description:\n\n  Option was added in #14075 but not documented there.\n\n  CC: @achow101\n\nTree-SHA512: dcb6421fa1be3d733d7a00c1b57ffd591fe76c02d1c479e729089c118bec52f53bd7ebdb5454b3b1c7603ab189e91682a688b673a7f6b04fa8610c4249711217",
      "tree": {
        "sha": "62ffe2369fc21036df83f04f3411509fe073b4da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62ffe2369fc21036df83f04f3411509fe073b4da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d0337992d8146fa9f6dc9470d73890fdcd67f20",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxovF0ACgkQHkrtYphs\n0l1IBAgAnGXirNdkr3a64LYDcif4tdMiWGkKyznYLnsBKW6yuHKmnArfZr4IPQm+\nhfm74JOprv4Fy9nuWWIeosJPXkUEaw6UX95zraOSyoKV8QnpIB8vnV60La8GHlPX\nlEcokM4bgkeoJyMoFbkgbUEg7zN2FLp/WLF9Pf5ThK+/d5H/aL49rNn7GjLOdt50\nPzlYHkAYT6rBmqsiEVjEXyUU3tGVirE58T7dLBdc0rK9d6ThHMvEltaSL4etOXF1\n2rHQj2d7+ulC2PRgAdaXdT75FRa4MbhFP9Wc0hhz3/JtGe4iPgpr6ywOODgz0vA5\nvbdAHity7wNgNhJlzQq6miImIV9Ihw==\n=z2Kd\n-----END PGP SIGNATURE-----",
        "payload": "tree 62ffe2369fc21036df83f04f3411509fe073b4da\nparent e9c190044df820445c1b66028b3dd82bf1cf67ad\nparent a607c9ae4c2730fca5ce340c400c95c87e498a7c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550367825 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550367837 +0100\n\nMerge #15426: [Doc] importmulti: add missing description of keypool option\n\na607c9ae4c2730fca5ce340c400c95c87e498a7c [Doc] importmulti: add missing description of keypool option (David A. Harding)\n\nPull request description:\n\n  Option was added in #14075 but not documented there.\n\n  CC: @achow101\n\nTree-SHA512: dcb6421fa1be3d733d7a00c1b57ffd591fe76c02d1c479e729089c118bec52f53bd7ebdb5454b3b1c7603ab189e91682a688b673a7f6b04fa8610c4249711217\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d0337992d8146fa9f6dc9470d73890fdcd67f20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d0337992d8146fa9f6dc9470d73890fdcd67f20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d0337992d8146fa9f6dc9470d73890fdcd67f20/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9c190044df820445c1b66028b3dd82bf1cf67ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9c190044df820445c1b66028b3dd82bf1cf67ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9c190044df820445c1b66028b3dd82bf1cf67ad"
      },
      {
        "sha": "a607c9ae4c2730fca5ce340c400c95c87e498a7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a607c9ae4c2730fca5ce340c400c95c87e498a7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a607c9ae4c2730fca5ce340c400c95c87e498a7c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f38202a2b81f8a38966a0f981771ae99bcd40c0c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d0337992d8146fa9f6dc9470d73890fdcd67f20/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d0337992d8146fa9f6dc9470d73890fdcd67f20/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=2d0337992d8146fa9f6dc9470d73890fdcd67f20",
        "patch": "@@ -1382,6 +1382,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                     {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n                                     {\"watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n                                     {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                    {\"keypool\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether imported public keys should be added to the keypool for when users request new addresses. Only allowed when wallet private keys are disabled\"},\n                                 },\n                             },\n                         },"
      }
    ]
  },
  {
    "sha": "4064d048d61c0f2398f7bc183d216e69a27d169f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDY0ZDA0OGQ2MWMwZjIzOThmN2JjMTgzZDIxNmU2OWEyN2QxNjlm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-17T01:44:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-17T01:46:59Z"
      },
      "message": "Merge #15425: [Doc] add missing newline to listunspent help for witnessScript\n\nd3661a3fd247e8fb3911e2f7256025de8b163aeb [Doc] add missing newline to witnessScript in listunspent help (David A. Harding)\n\nPull request description:\n\nTree-SHA512: 85bb9c693bac36da0239eb6a1f42c2173d0170d5ff3d4c2fcd8897cfab233ef8c8ebc1eb5591e3dc89d091fde221d77c872f14a1eec201fee4dc83ba788390c3",
      "tree": {
        "sha": "e3971954bfe109b7a227fe2da5e06c4f6585ed18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3971954bfe109b7a227fe2da5e06c4f6585ed18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4064d048d61c0f2398f7bc183d216e69a27d169f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxovRMACgkQHkrtYphs\n0l1c0QgAsPENq/b/mraHBOQJJ3bp8uQc/pOm8dUJbB4ChUorjgcY/EK0Eg4JZpOW\nBoezBinT1iQ9d2ZooyiqVabNAG7504O3Ht7z+mhAvk3nJEDrZsQsz4WkGgUFPGVc\nn5qB+X1lRQomT9PmV9RnsAq9qhMcjWZwkjIpYJKcUeDrLB08qPGdt/jXX1+870WF\ncuYPoU/u+j6cPWNrQConyZ3QRbGrHhPGWXnmgDolUS+/pX1/ogQHHiieQ4nFgeEf\nBdORV+E7ox9QwmMJm319F7O8Ii+mvYq5onM89qDm8+HOGPNPdaCg14K0HKebUxY4\ngWY6OeKLUyyvg/5mbM1IV/75ShphKA==\n=1txY\n-----END PGP SIGNATURE-----",
        "payload": "tree e3971954bfe109b7a227fe2da5e06c4f6585ed18\nparent 2d0337992d8146fa9f6dc9470d73890fdcd67f20\nparent d3661a3fd247e8fb3911e2f7256025de8b163aeb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550367873 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550368019 +0100\n\nMerge #15425: [Doc] add missing newline to listunspent help for witnessScript\n\nd3661a3fd247e8fb3911e2f7256025de8b163aeb [Doc] add missing newline to witnessScript in listunspent help (David A. Harding)\n\nPull request description:\n\nTree-SHA512: 85bb9c693bac36da0239eb6a1f42c2173d0170d5ff3d4c2fcd8897cfab233ef8c8ebc1eb5591e3dc89d091fde221d77c872f14a1eec201fee4dc83ba788390c3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4064d048d61c0f2398f7bc183d216e69a27d169f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4064d048d61c0f2398f7bc183d216e69a27d169f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4064d048d61c0f2398f7bc183d216e69a27d169f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d0337992d8146fa9f6dc9470d73890fdcd67f20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d0337992d8146fa9f6dc9470d73890fdcd67f20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d0337992d8146fa9f6dc9470d73890fdcd67f20"
      },
      {
        "sha": "d3661a3fd247e8fb3911e2f7256025de8b163aeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3661a3fd247e8fb3911e2f7256025de8b163aeb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3661a3fd247e8fb3911e2f7256025de8b163aeb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "37fc88dfd5152afd3a2f7c32af476576bb083516",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4064d048d61c0f2398f7bc183d216e69a27d169f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4064d048d61c0f2398f7bc183d216e69a27d169f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4064d048d61c0f2398f7bc183d216e69a27d169f",
        "patch": "@@ -2758,7 +2758,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n-            \"    \\\"redeemScript\\\" : \\\"script\\\" (string) The redeemScript if scriptPubKey is P2SH\"\n+            \"    \\\"redeemScript\\\" : \\\"script\\\" (string) The redeemScript if scriptPubKey is P2SH\\n\"\n             \"    \\\"witnessScript\\\" : \\\"script\\\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n             \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\""
      }
    ]
  },
  {
    "sha": "a083f75ba79d465f15fddba7b00ca02e31bb3d40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDgzZjc1YmE3OWQ0NjVmMTVmZGRiYTdiMDBjYTAyZTMxYmIzZDQw",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2019-02-17T03:38:08Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2019-02-17T03:38:08Z"
      },
      "message": "Update assumevalid, minimumchainwork, and getchaintxstats to height 563378.\n\nm_assumed_blockchain_size/m_assumed_chain_state_size were still accurate.",
      "tree": {
        "sha": "316c720ad8c87094492c0a0c47469d0cd282e275",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/316c720ad8c87094492c0a0c47469d0cd282e275"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a083f75ba79d465f15fddba7b00ca02e31bb3d40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a083f75ba79d465f15fddba7b00ca02e31bb3d40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a083f75ba79d465f15fddba7b00ca02e31bb3d40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a083f75ba79d465f15fddba7b00ca02e31bb3d40/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4064d048d61c0f2398f7bc183d216e69a27d169f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4064d048d61c0f2398f7bc183d216e69a27d169f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4064d048d61c0f2398f7bc183d216e69a27d169f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b8e0ea23dd5a452fca66110f3c93f2945872d6df",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a083f75ba79d465f15fddba7b00ca02e31bb3d40/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a083f75ba79d465f15fddba7b00ca02e31bb3d40/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a083f75ba79d465f15fddba7b00ca02e31bb3d40",
        "patch": "@@ -91,10 +91,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000028822fef1c230963535a90d\");\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000051dc8b82f450202ecb3d471\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\"); //534292\n+        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000f1c54590ee18d15ec70e68c8cd4cfbadb1b4f11697eee\"); //563378\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -162,10 +162,10 @@ class CMainParams : public CChainParams {\n         };\n \n         chainTxData = ChainTxData{\n-            // Data from rpc: getchaintxstats 4096 0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\n-            /* nTime    */ 1532884444,\n-            /* nTxCount */ 331282217,\n-            /* dTxRate  */ 2.4\n+            // Data from rpc: getchaintxstats 4096 0000000000000000000f1c54590ee18d15ec70e68c8cd4cfbadb1b4f11697eee\n+            /* nTime    */ 1550374134,\n+            /* nTxCount */ 383732546,\n+            /* dTxRate  */ 3.685496590998308\n         };\n \n         /* disable fallback fee on mainnet */"
      }
    ]
  },
  {
    "sha": "8a1f0a38d4a7cef544001e86c569bde747db2ecb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTFmMGEzOGQ0YTdjZWY1NDQwMDFlODZjNTY5YmRlNzQ3ZGIyZWNi",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-17T10:08:44Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-17T10:26:11Z"
      },
      "message": "scripted-diff: Remove NDEBUG pre-define\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/NDEBUG;//g' $(git grep --name-only 'NDEBUG;' build_msvc)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "d0e9fb6d48f4ba348f7e5711062bb4ee9090958e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0e9fb6d48f4ba348f7e5711062bb4ee9090958e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a1f0a38d4a7cef544001e86c569bde747db2ecb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a1f0a38d4a7cef544001e86c569bde747db2ecb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a1f0a38d4a7cef544001e86c569bde747db2ecb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a1f0a38d4a7cef544001e86c569bde747db2ecb/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4064d048d61c0f2398f7bc183d216e69a27d169f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4064d048d61c0f2398f7bc183d216e69a27d169f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4064d048d61c0f2398f7bc183d216e69a27d169f"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 34,
      "deletions": 34
    },
    "files": [
      {
        "sha": "6c82b1e7ded66cf5536710f54215a31a7bb00d55",
        "filename": "build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -111,7 +111,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -163,7 +163,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "c52dfdb28c6483715bf8b7f5c96f6b6f41d5ecd0",
        "filename": "build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -114,7 +114,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -166,7 +166,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "a83529c782110b347e9ad5d41df5cf6c70eff4e4",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -132,7 +132,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -184,7 +184,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "9a42f141c93a20da33e9ef37ba2ccd0154cb77b0",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -113,7 +113,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -136,7 +136,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "1b24acd8ced7b6238e4113e9aac6f37f838c14d3",
        "filename": "build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -97,7 +97,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -146,7 +146,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "459e81eb0cfae824d77a258ca5b0d93bfd413d7c",
        "filename": "build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -127,7 +127,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n@@ -149,7 +149,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>"
      },
      {
        "sha": "ad183d4904616d697e60a8106edf7e9feabc89e0",
        "filename": "build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -119,7 +119,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -138,7 +138,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "73ba90aa8828790848288c54e9252b9c1e9ceda0",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -873,7 +873,7 @@\n       <Optimization>Disabled</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>false</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -922,7 +922,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "855c9353fc8915ffa6c02beb8330307f8103e6ca",
        "filename": "build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -132,7 +132,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -156,7 +156,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "b19f1e2396ade8bdd11ba21c283d2b2614b6ac51",
        "filename": "build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -129,7 +129,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -149,7 +149,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "2e32c257624e2747e1734fcadc963dec616d79c4",
        "filename": "build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -129,7 +129,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -149,7 +149,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "7aba987cd1e5d75f36a946f5f1c4fbf91d6c5127",
        "filename": "build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -129,7 +129,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -149,7 +149,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "32ea070a0584a7504fd133f44aed357b33c987c4",
        "filename": "build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -160,7 +160,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n@@ -181,7 +181,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>"
      },
      {
        "sha": "545508001e9682c2f34742955eb6de60a774f8b8",
        "filename": "build_msvc/libleveldb/libleveldb.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libleveldb/libleveldb.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libleveldb/libleveldb.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libleveldb/libleveldb.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -162,7 +162,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -181,7 +181,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "b4c9ec28ee6b78fb5b1f48f38e527da8be37f8f4",
        "filename": "build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1/libsecp256k1.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -122,7 +122,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -141,7 +141,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "c3799b6408c97a25e3e2dbf903f531766e708007",
        "filename": "build_msvc/libunivalue/libunivalue.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libunivalue/libunivalue.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/libunivalue/libunivalue.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libunivalue/libunivalue.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -125,7 +125,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -144,7 +144,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "a5d666c114f4d0de086b11b6e883a920a02232af",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a1f0a38d4a7cef544001e86c569bde747db2ecb/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "patch": "@@ -89,7 +89,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n     </ClCompile>\n     <Link>\n@@ -132,7 +132,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n     </ClCompile>\n     <Link>"
      }
    ]
  },
  {
    "sha": "3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWM1NmJlYTBkN2IzNmJlZjJiNmM3MDk1ZWNkN2Q5ZmI0M2EzNjMx",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-17T10:11:17Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-17T10:26:49Z"
      },
      "message": "appveyor: Remove unused NDEBUG removal",
      "tree": {
        "sha": "e6d988ce7c49e1b5360a531a3323dfb0fcd91661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6d988ce7c49e1b5360a531a3323dfb0fcd91661"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a1f0a38d4a7cef544001e86c569bde747db2ecb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a1f0a38d4a7cef544001e86c569bde747db2ecb"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cb6a9200609ea284b05ec039cadb863c8ee01fdb",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631",
        "patch": "@@ -28,7 +28,6 @@ before_build:\n            ${content} = (Get-Content ${files}[${i}]);\n            ${content} = ${content}.Replace(\"</RuntimeLibrary>\", \"</RuntimeLibrary><DebugInformationFormat>None</DebugInformationFormat>\");\n            ${content} = ${content}.Replace(\"<WholeProgramOptimization>true\", \"<WholeProgramOptimization>false\");\n-           ${content} = ${content}.Replace(\"NDEBUG;\", \"\");\n            Set-Content ${files}[${i}] ${content};\n        }\n - ps:  Start-Process clcache-server"
      }
    ]
  },
  {
    "sha": "b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzJjNzg3ZGM4Zjc3ZGZlZWFiMzc3NGU5ZDg0ZjAzYTA2NmZmMzJl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-17T17:48:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-17T17:49:00Z"
      },
      "message": "Merge #15431: msvc: scripted-diff: Remove NDEBUG pre-define in project file\n\n3ec56bea0d appveyor: Remove unused NDEBUG removal (Chun Kuan Lee)\n8a1f0a38d4 scripted-diff: Remove NDEBUG pre-define (Chun Kuan Lee)\n\nPull request description:\n\n  Follow #15391\n\nTree-SHA512: f264418cbc69b5f083469ed9005a6d592d4268f2b7da967e571ce30195de73b09a9e14c8610a5b6b0f056847d82a4bc7c2fbe56498307093aab4dd42903e6137",
      "tree": {
        "sha": "e6d988ce7c49e1b5360a531a3323dfb0fcd91661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6d988ce7c49e1b5360a531a3323dfb0fcd91661"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcaZ6MAAoJENLqSFDnUoslv44P/jJe6CPYyrM4NRQM4sfSe0MN\nOYLe05to982WsQ5RJB+Ne3LZI4873322SFogdi3m3tSUZwTXqvQdIKmO17vxEkI1\nUgNAW28ettLZf6NeJbqoS4evtYyiahq4NBcZPVSY2lc5MwrahEwhZcaaOaUwbwKO\nYzAHicTSiOvhCWxMDMNGnCu+CatrEKm71f5c4SaQeeIYF/ldKxlV7BqGaTuu0IyV\nIK0KCXtIqzTMQ7xCs9yWRQCYbVwvnREtvKdzWUCAhdiePnsM3EvKheAy48LfgUSV\nknD/3NE7LfAD1tTlxcOHsfQE1zgFWyNnXVNYYKSP0k2Xa8e2C4LsAVouWpwew+Wv\nXFQ11DTT/X9TJ7ZqbbamD0qaptK/NcOtXo14XBJooCCJOInDx4X8fKp7NINZnM3e\nzAty+xHfSjE2grqCfOHSRXIJv12lQYmca4Ay0BbrsjR/BDCZaAaCpnFJ70KnLcDC\noUNfwU6sA93lPjQxPyeWLG5wl4zJH2CeP4q5UwyB8X8ORbuLT+ZCHSJMrEWZDk2H\nL6qOYuohqRpfXReD5jDVOa+bqQe2opEFWZkS7k5gVngu9GgJs2E4d7PUe+i2Jvcm\nVM7+0039Az/gOa7o0zFTTjPyxc4lLy+biXR7oqF1wBUluJVmPZH0q6jn5bfo8opW\nPn6GW43QADZZQpWjLAHG\n=gBMd\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIIB2smQqblHTAXDKzKLrZfYcNG4P+oD2R2Yv/DabCSF9CP/wEKE6ZLmoqfao\n5mKp+73NyOsI8QRcaZ6P8Ai2FfoI/s7D9wCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wELPIV7P1KNzH55YmWAoe\nTJII8QRcaZ6P8AhufOC8LoT1XACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQwblzyW8O1LJyJxjg+UyVaQjw\nEDz34YcbANe7a/Wwqyc56HYI8QRcaZ6P8Ag4UuoDTppFLQCD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQzGhzMtNWOSbH\na2GA4TXJ+AjxBFxpno7wCOTq4f+igumzAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e6d988ce7c49e1b5360a531a3323dfb0fcd91661\nparent 4064d048d61c0f2398f7bc183d216e69a27d169f\nparent 3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631\nauthor MarcoFalke <falke.marco@gmail.com> 1550425719 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550425740 -0500\n\nMerge #15431: msvc: scripted-diff: Remove NDEBUG pre-define in project file\n\n3ec56bea0d appveyor: Remove unused NDEBUG removal (Chun Kuan Lee)\n8a1f0a38d4 scripted-diff: Remove NDEBUG pre-define (Chun Kuan Lee)\n\nPull request description:\n\n  Follow #15391\n\nTree-SHA512: f264418cbc69b5f083469ed9005a6d592d4268f2b7da967e571ce30195de73b09a9e14c8610a5b6b0f056847d82a4bc7c2fbe56498307093aab4dd42903e6137\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4064d048d61c0f2398f7bc183d216e69a27d169f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4064d048d61c0f2398f7bc183d216e69a27d169f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4064d048d61c0f2398f7bc183d216e69a27d169f"
      },
      {
        "sha": "3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec56bea0d7b36bef2b6c7095ecd7d9fb43a3631"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 34,
      "deletions": 35
    },
    "files": [
      {
        "sha": "cb6a9200609ea284b05ec039cadb863c8ee01fdb",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -28,7 +28,6 @@ before_build:\n            ${content} = (Get-Content ${files}[${i}]);\n            ${content} = ${content}.Replace(\"</RuntimeLibrary>\", \"</RuntimeLibrary><DebugInformationFormat>None</DebugInformationFormat>\");\n            ${content} = ${content}.Replace(\"<WholeProgramOptimization>true\", \"<WholeProgramOptimization>false\");\n-           ${content} = ${content}.Replace(\"NDEBUG;\", \"\");\n            Set-Content ${files}[${i}] ${content};\n        }\n - ps:  Start-Process clcache-server"
      },
      {
        "sha": "6c82b1e7ded66cf5536710f54215a31a7bb00d55",
        "filename": "build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -111,7 +111,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -163,7 +163,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "c52dfdb28c6483715bf8b7f5c96f6b6f41d5ecd0",
        "filename": "build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -114,7 +114,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -166,7 +166,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "a83529c782110b347e9ad5d41df5cf6c70eff4e4",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -132,7 +132,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -184,7 +184,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "9a42f141c93a20da33e9ef37ba2ccd0154cb77b0",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -113,7 +113,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -136,7 +136,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "1b24acd8ced7b6238e4113e9aac6f37f838c14d3",
        "filename": "build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -97,7 +97,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -146,7 +146,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "459e81eb0cfae824d77a258ca5b0d93bfd413d7c",
        "filename": "build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -127,7 +127,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n@@ -149,7 +149,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>"
      },
      {
        "sha": "ad183d4904616d697e60a8106edf7e9feabc89e0",
        "filename": "build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -119,7 +119,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -138,7 +138,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "73ba90aa8828790848288c54e9252b9c1e9ceda0",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -873,7 +873,7 @@\n       <Optimization>Disabled</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>false</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -922,7 +922,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "855c9353fc8915ffa6c02beb8330307f8103e6ca",
        "filename": "build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -132,7 +132,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -156,7 +156,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "b19f1e2396ade8bdd11ba21c283d2b2614b6ac51",
        "filename": "build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -129,7 +129,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -149,7 +149,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "2e32c257624e2747e1734fcadc963dec616d79c4",
        "filename": "build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -129,7 +129,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -149,7 +149,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "7aba987cd1e5d75f36a946f5f1c4fbf91d6c5127",
        "filename": "build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -129,7 +129,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -149,7 +149,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "32ea070a0584a7504fd133f44aed357b33c987c4",
        "filename": "build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -160,7 +160,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n@@ -181,7 +181,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>"
      },
      {
        "sha": "545508001e9682c2f34742955eb6de60a774f8b8",
        "filename": "build_msvc/libleveldb/libleveldb.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libleveldb/libleveldb.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libleveldb/libleveldb.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libleveldb/libleveldb.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -162,7 +162,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -181,7 +181,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CRT_NONSTDC_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;NOMINMAX;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "b4c9ec28ee6b78fb5b1f48f38e527da8be37f8f4",
        "filename": "build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1/libsecp256k1.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -122,7 +122,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -141,7 +141,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "c3799b6408c97a25e3e2dbf903f531766e708007",
        "filename": "build_msvc/libunivalue/libunivalue.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libunivalue/libunivalue.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/libunivalue/libunivalue.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libunivalue/libunivalue.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -125,7 +125,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -144,7 +144,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "a5d666c114f4d0de086b11b6e883a920a02232af",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72c787dc8f77dfeeab3774e9d84f03a066ff32e/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "patch": "@@ -89,7 +89,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n     </ClCompile>\n     <Link>\n@@ -132,7 +132,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n     </ClCompile>\n     <Link>"
      }
    ]
  },
  {
    "sha": "0bedcbafdfaa0e980ad91c0ba4b9039575017f0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmVkY2JhZmRmYWEwZTk4MGFkOTFjMGJhNGI5MDM5NTc1MDE3ZjBl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-18T03:28:04Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-02-18T05:32:58Z"
      },
      "message": "Use a single wallet batch for UpgradeKeyMetadata",
      "tree": {
        "sha": "f31090773e75bb5c046e0c229bece22bc472a4bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f31090773e75bb5c046e0c229bece22bc472a4bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bedcbafdfaa0e980ad91c0ba4b9039575017f0e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlxqQ4wACgkQHrd2uwPH\nki00QA/9HjLkV/Mr+6GgPtbfAri2mDpdCd+375opkh2sQWHAGYVHay0lotjJWxr3\nLC7/12JPmi5QRqBSQ3U1SDUVGpUlTaPZu/8vCEkiYEFOo5Hq5AMA0Q/jeytE9due\nx2+DwASr52k8UXzh9+5H7xdhkcWNZVDFfqzMnLOnGXe5ftj3UFHfhpe/KkAuvNLv\nwkX88McB4DppQ/BEEtuKyMudls1HyDy02HhXey26gsYNVvph0m3reVxZc6jEvCDH\nbzP0I9H9hW6s+7+JLnHQ0ihzV28yMupjQJxIWDau9wb+duPsZFudXyH7gsrUc1GS\nOMPzKhtEq0GXJrXASbCAxGsd7L2jGou0lhcvw1ZIfhg5LSLnpG5xCBIBNAKUXkqV\nNxuY1arQ3Zc799uOEf7rBhvivrErItHzRbK8EgnroKTFpn7/JTysmmlcudKxITS5\n7K8nyosy+Rj5sfxHd0//64eLeDC5mkgEFHeQXT4JoP7ZSUneqXMeqKqzJqB1Z1Ru\n8PfYf55V+Msc/QFrrVjf/xSDwLsdgimsGI/5d+RZodJymuyIbZ2b13pTM/ib9FGU\nBHW2iMNOgI92kFLxx3y5AZnMkHeXFWH6sH/QVlKdbhIBId+WasfkzR6x96DapseL\nniIzPemgSbylhkE96UVW8SMTbrnktqCcZEON4iD0t1+gtzMewHU=\n=ynOo\n-----END PGP SIGNATURE-----",
        "payload": "tree f31090773e75bb5c046e0c229bece22bc472a4bd\nparent b72c787dc8f77dfeeab3774e9d84f03a066ff32e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1550460484 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1550467978 -1000\n\nUse a single wallet batch for UpgradeKeyMetadata\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bedcbafdfaa0e980ad91c0ba4b9039575017f0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bedcbafdfaa0e980ad91c0ba4b9039575017f0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bedcbafdfaa0e980ad91c0ba4b9039575017f0e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b72c787dc8f77dfeeab3774e9d84f03a066ff32e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "388422bec84d39302592c14bbaf5e6bdf9f699cd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bedcbafdfaa0e980ad91c0ba4b9039575017f0e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bedcbafdfaa0e980ad91c0ba4b9039575017f0e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0bedcbafdfaa0e980ad91c0ba4b9039575017f0e",
        "patch": "@@ -371,6 +371,8 @@ void CWallet::UpgradeKeyMetadata()\n         return;\n     }\n \n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*database);\n+    size_t cnt = 0;\n     for (auto& meta_pair : mapKeyMetadata) {\n         CKeyMetadata& meta = meta_pair.second;\n         if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n@@ -392,10 +394,15 @@ void CWallet::UpgradeKeyMetadata()\n             // Write meta to wallet\n             CPubKey pubkey;\n             if (GetPubKey(meta_pair.first, pubkey)) {\n-                WriteKeyMetadata(meta, pubkey, true);\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+                if (++cnt % 1000 == 0) {\n+                    // avoid creating overlarge in-memory batches in case the wallet contains large amounts of keys\n+                    batch.reset(new WalletBatch(*database));\n+                }\n             }\n         }\n     }\n+    batch.reset(); //write before setting the flag\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n "
      }
    ]
  },
  {
    "sha": "8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTRiNGY2ODNhMGIzNDJjZWMyNGNkNTFiMWU5ODQzMzAzNGVhMmVh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-02-14T03:22:40Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-02-18T05:42:08Z"
      },
      "message": "Address test todos by removing -txindex to nodes.\nOriginally added when updating getrawtransaction to stop searching unspent utxos.",
      "tree": {
        "sha": "918975cc59f7a57016ce61d6343c21c5168a0f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/918975cc59f7a57016ce61d6343c21c5168a0f59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b72c787dc8f77dfeeab3774e9d84f03a066ff32e"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 42,
      "deletions": 53
    },
    "files": [
      {
        "sha": "02a665008be30aed966a9ed4870379ac670fdc4b",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -20,7 +20,8 @@ Supported API\n \n Given a transaction hash: returns a transaction in binary, hex-encoded binary, or JSON formats.\n \n-For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n+By default, this endpoint will only search the mempool.\n+To query for a confirmed transaction, enable the transaction index via \"txindex=1\" command line / configuration option.\n \n #### Blocks\n `GET /rest/block/<BLOCK-HASH>.<bin|hex|json>`"
      },
      {
        "sha": "658a8cd75eb08abbcd37aa3325dd3695c2db3fe3",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -38,31 +38,29 @@ def find_spendable_utxo(node, min_value):\n \n     raise AssertionError(\"Unspent output equal or higher than %s not found\" % min_value)\n \n+txs_mined = {} # txindex from txid to blockhash\n+\n class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [\n             [\n                 \"-rpcserialversion=0\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=4\",\n                 \"-rpcserialversion=1\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=536870915\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n         ]\n \n@@ -157,10 +155,10 @@ def run_test(self):\n \n         self.log.info(\"Verify previous witness txs skipped for mining can now be mined\")\n         assert_equal(len(self.nodes[2].getrawmempool()), 4)\n-        block = self.nodes[2].generate(1)  # block 432 (first block with new rules; 432 = 144 * 3)\n+        blockhash = self.nodes[2].generate(1)[0]  # block 432 (first block with new rules; 432 = 144 * 3)\n         sync_blocks(self.nodes)\n         assert_equal(len(self.nodes[2].getrawmempool()), 0)\n-        segwit_tx_list = self.nodes[2].getblock(block[0])[\"tx\"]\n+        segwit_tx_list = self.nodes[2].getblock(blockhash)[\"tx\"]\n         assert_equal(len(segwit_tx_list), 5)\n \n         self.log.info(\"Verify default node can't accept txs with missing witness\")\n@@ -174,15 +172,16 @@ def run_test(self):\n         self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n \n         self.log.info(\"Verify block and transaction serialization rpcs return differing serializations depending on rpc serialization flag\")\n-        assert(self.nodes[2].getblock(block[0], False) != self.nodes[0].getblock(block[0], False))\n-        assert(self.nodes[1].getblock(block[0], False) == self.nodes[2].getblock(block[0], False))\n-        for i in range(len(segwit_tx_list)):\n-            tx = FromHex(CTransaction(), self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[2].getrawtransaction(segwit_tx_list[i]) != self.nodes[0].getrawtransaction(segwit_tx_list[i]))\n-            assert(self.nodes[1].getrawtransaction(segwit_tx_list[i], 0) == self.nodes[2].getrawtransaction(segwit_tx_list[i]))\n-            assert(self.nodes[0].getrawtransaction(segwit_tx_list[i]) != self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[1].getrawtransaction(segwit_tx_list[i]) == self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[0].getrawtransaction(segwit_tx_list[i]) == bytes_to_hex_str(tx.serialize_without_witness()))\n+        assert(self.nodes[2].getblock(blockhash, False) != self.nodes[0].getblock(blockhash, False))\n+        assert(self.nodes[1].getblock(blockhash, False) == self.nodes[2].getblock(blockhash, False))\n+\n+        for tx_id in segwit_tx_list:\n+            tx = FromHex(CTransaction(), self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            assert(self.nodes[2].getrawtransaction(tx_id, False, blockhash) != self.nodes[0].getrawtransaction(tx_id, False, blockhash))\n+            assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].getrawtransaction(tx_id, False, blockhash))\n+            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) != self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) == bytes_to_hex_str(tx.serialize_without_witness()))\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n         self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n@@ -538,7 +537,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         tx.rehash()\n         signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n-        self.nodes[0].generate(1)\n+        txs_mined[txid] = self.nodes[0].generate(1)[0]\n         sync_blocks(self.nodes)\n         watchcount = 0\n         spendcount = 0\n@@ -581,7 +580,7 @@ def create_and_mine_tx_from_txids(self, txids, success=True):\n         tx = CTransaction()\n         for i in txids:\n             txtmp = CTransaction()\n-            txraw = self.nodes[0].getrawtransaction(i)\n+            txraw = self.nodes[0].getrawtransaction(i, 0, txs_mined[i])\n             f = BytesIO(hex_str_to_bytes(txraw))\n             txtmp.deserialize(f)\n             for j in range(len(txtmp.vout)):"
      },
      {
        "sha": "f33040242c92cc0e8321447d32cde1b4f8316a21",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 15,
        "deletions": 20,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -43,8 +43,7 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-rest\", \"-txindex\"], []]\n+        self.extra_args = [[\"-rest\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -91,25 +90,32 @@ def run_test(self):\n \n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        self.nodes[1].generatetoaddress(1, not_related_address)\n-        self.sync_all()\n-        bb_hash = self.nodes[0].getbestblockhash()\n \n-        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n-\n-        self.log.info(\"Load the transaction using the /tx URI\")\n+        self.log.info(\"Test the /tx URI\")\n \n         json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        assert_equal(json_obj['txid'], txid)\n+\n+        # Check hex format response\n+        hex_response = self.test_rest_request(\"/tx/{}\".format(txid), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n+                                     json_obj['size']*2)\n+\n         spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n         n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n         spending = (txid, n)\n \n         self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n-        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        self.nodes[1].generatetoaddress(1, not_related_address)\n+        self.sync_all()\n+        bb_hash = self.nodes[0].getbestblockhash()\n+\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n \n         # Check chainTip response\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n         # Make sure there is one utxo\n@@ -274,17 +280,6 @@ def run_test(self):\n         json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n \n-        self.log.info(\"Test the /tx URI\")\n-\n-        tx_hash = block_json_obj['tx'][0]['txid']\n-        json_obj = self.test_rest_request(\"/tx/{}\".format(tx_hash))\n-        assert_equal(json_obj['txid'], tx_hash)\n-\n-        # Check hex format response\n-        hex_response = self.test_rest_request(\"/tx/{}\".format(tx_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n-        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n-                                     json_obj['size']*2)\n-\n         self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n \n         # Make 3 tx and mine them on node 1"
      },
      {
        "sha": "e9098e4f5aef1869118ea00d2d7a4eb3fe191ba0",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -20,8 +20,6 @@ class PSBTTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n-       # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-txindex\"], [\"-txindex\"], [\"-txindex\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -161,11 +159,11 @@ def run_test(self):\n         node1_addr = self.nodes[1].getnewaddress()\n         node2_addr = self.nodes[2].getnewaddress()\n         txid1 = self.nodes[0].sendtoaddress(node1_addr, 13)\n-        txid2 =self.nodes[0].sendtoaddress(node2_addr, 13)\n-        self.nodes[0].generate(6)\n+        txid2 = self.nodes[0].sendtoaddress(node2_addr, 13)\n+        blockhash = self.nodes[0].generate(6)[0]\n         self.sync_all()\n-        vout1 = find_output(self.nodes[1], txid1, 13)\n-        vout2 = find_output(self.nodes[2], txid2, 13)\n+        vout1 = find_output(self.nodes[1], txid1, 13, blockhash=blockhash)\n+        vout2 = find_output(self.nodes[2], txid2, 13, blockhash=blockhash)\n \n         # Create a psbt spending outputs from nodes 1 and 2\n         psbt_orig = self.nodes[0].createpsbt([{\"txid\":txid1,  \"vout\":vout1}, {\"txid\":txid2, \"vout\":vout2}], {self.nodes[0].getnewaddress():25.999})\n@@ -344,9 +342,9 @@ def run_test(self):\n         addr = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n         txid = self.nodes[0].sendtoaddress(addr, 7)\n         addrinfo = self.nodes[1].getaddressinfo(addr)\n-        self.nodes[0].generate(6)\n+        blockhash = self.nodes[0].generate(6)[0]\n         self.sync_all()\n-        vout = find_output(self.nodes[0], txid, 7)\n+        vout = find_output(self.nodes[0], txid, 7, blockhash=blockhash)\n         psbt = self.nodes[1].createpsbt([{\"txid\":txid, \"vout\":vout}], {self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\"):Decimal('6.999')})\n         analyzed = self.nodes[0].analyzepsbt(psbt)\n         assert not analyzed['inputs'][0]['has_utxo'] and not analyzed['inputs'][0]['is_final'] and analyzed['inputs'][0]['next'] == 'updater' and analyzed['next'] == 'updater'"
      },
      {
        "sha": "c793cf00de82c81c13f59eae13eecea394eff4a3",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -42,7 +42,6 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [[\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"]]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "fef99824127a29869de2a2cd3dfa12942079e471",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -410,12 +410,12 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n # Transaction/Block functions\n #############################\n \n-def find_output(node, txid, amount):\n+def find_output(node, txid, amount, *, blockhash=None):\n     \"\"\"\n     Return index to output of txid with value amount\n     Raises exception if there is none.\n     \"\"\"\n-    txdata = node.getrawtransaction(txid, 1)\n+    txdata = node.getrawtransaction(txid, 1, blockhash)\n     for i in range(len(txdata[\"vout\"])):\n         if txdata[\"vout\"][i][\"value\"] == amount:\n             return i"
      },
      {
        "sha": "b0b151d2d61b14a41c0f17bc5493573fc03a004a",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -26,8 +26,7 @@\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-minrelaytxfee=0.00001\", \"-txindex\"], []]\n+        self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "a5df763eb0411acdaf97d9afcdbbebf4b298d181",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e4b4f683a0b342cec24cd51b1e98433034ea2ea/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "patch": "@@ -24,8 +24,6 @@ class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[], [], [\"-txindex\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "f5a623eb66c81d9d7b11206d574430af0127546d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWE2MjNlYjY2YzgxZDlkN2IxMTIwNmQ1NzQ0MzBhZjAxMjc1NDZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-18T09:47:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-18T09:53:25Z"
      },
      "message": "Merge #15429: Update assumevalid, minimumchainwork, and getchaintxstats to height 563378\n\na083f75ba79d465f15fddba7b00ca02e31bb3d40 Update assumevalid, minimumchainwork, and getchaintxstats to height 563378. (Gregory Maxwell)\n\nPull request description:\n\n  m_assumed_blockchain_size/m_assumed_chain_state_size were still accurate.\n\nTree-SHA512: 9b08a5d6023c0e24ab3d8c43c0978181eb853f15c4db9bc69e72efc94c89600780bc73d9f46dbaf5241d28b135546dd30e7abd50a89096b5fd3f7252308491cc",
      "tree": {
        "sha": "2e80915817cdf5f2a515ea3f2d94aa4a3efca805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e80915817cdf5f2a515ea3f2d94aa4a3efca805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5a623eb66c81d9d7b11206d574430af0127546d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxqgJUACgkQHkrtYphs\n0l1L9Af8CrE4rZvkq35tlbqAxsuCnaU6sCio6USzelIkSY1tr5nUlt1UP7Na0gc3\nfdGbXqF7MXFALnYIskxHFP/0YTKxvWfKL45oGHRMVzoF+Tpd7qT9xQwHq2cbKqMm\n0lkLkR5urWvzaXMtXB1+3t/h5iT91hdXI2anSiosd4e+RkkoY2vzpKwLiH1JV9kO\nKFodADHXKdGazYXSaNPBXotOwWxP391fazRIyG+AV722ig1pR1uUQ+3HCfX3VykQ\nOv2oPNYBEIhRpBO1+uN4OkP1pJFFbg0V1JsnGiGiEWXYCTIMq/8O5g0tKj1D2g51\n0tIhzvbD3YNRmiv/XFTIpGLMkuLdbw==\n=UfRt\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e80915817cdf5f2a515ea3f2d94aa4a3efca805\nparent b72c787dc8f77dfeeab3774e9d84f03a066ff32e\nparent a083f75ba79d465f15fddba7b00ca02e31bb3d40\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550483227 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550483605 +0100\n\nMerge #15429: Update assumevalid, minimumchainwork, and getchaintxstats to height 563378\n\na083f75ba79d465f15fddba7b00ca02e31bb3d40 Update assumevalid, minimumchainwork, and getchaintxstats to height 563378. (Gregory Maxwell)\n\nPull request description:\n\n  m_assumed_blockchain_size/m_assumed_chain_state_size were still accurate.\n\nTree-SHA512: 9b08a5d6023c0e24ab3d8c43c0978181eb853f15c4db9bc69e72efc94c89600780bc73d9f46dbaf5241d28b135546dd30e7abd50a89096b5fd3f7252308491cc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a623eb66c81d9d7b11206d574430af0127546d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a623eb66c81d9d7b11206d574430af0127546d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a623eb66c81d9d7b11206d574430af0127546d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72c787dc8f77dfeeab3774e9d84f03a066ff32e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b72c787dc8f77dfeeab3774e9d84f03a066ff32e"
      },
      {
        "sha": "a083f75ba79d465f15fddba7b00ca02e31bb3d40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a083f75ba79d465f15fddba7b00ca02e31bb3d40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a083f75ba79d465f15fddba7b00ca02e31bb3d40"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b8e0ea23dd5a452fca66110f3c93f2945872d6df",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a623eb66c81d9d7b11206d574430af0127546d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a623eb66c81d9d7b11206d574430af0127546d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f5a623eb66c81d9d7b11206d574430af0127546d",
        "patch": "@@ -91,10 +91,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000028822fef1c230963535a90d\");\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000051dc8b82f450202ecb3d471\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\"); //534292\n+        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000f1c54590ee18d15ec70e68c8cd4cfbadb1b4f11697eee\"); //563378\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -162,10 +162,10 @@ class CMainParams : public CChainParams {\n         };\n \n         chainTxData = ChainTxData{\n-            // Data from rpc: getchaintxstats 4096 0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\n-            /* nTime    */ 1532884444,\n-            /* nTxCount */ 331282217,\n-            /* dTxRate  */ 2.4\n+            // Data from rpc: getchaintxstats 4096 0000000000000000000f1c54590ee18d15ec70e68c8cd4cfbadb1b4f11697eee\n+            /* nTime    */ 1550374134,\n+            /* nTxCount */ 383732546,\n+            /* dTxRate  */ 3.685496590998308\n         };\n \n         /* disable fallback fee on mainnet */"
      }
    ]
  },
  {
    "sha": "29e82e460e19818b420e7169ac8ed5248d6d0af9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWU4MmU0NjBlMTk4MThiNDIwZTcxNjlhYzhlZDUyNDhkNmQwYWY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-18T09:55:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-18T09:56:55Z"
      },
      "message": "Merge #15250: Use RdSeed when available, and reduce RdRand load\n\n1435fabc19d2143187efb493cbe23225eaf851ae Use RdSeed when available, and reduce RdRand load (Pieter Wuille)\n\nPull request description:\n\n  This introduces support for autodetecting and using the RdSeed instruction on x86/x86_64 systems.\n\n  In addition:\n  * In SeedFast, only 64 bits of entropy are generated through RdRand (256 was relatively slow).\n  * In SeedStartup, 256 bits of entropy are generated, using RdSeed (preferably) or RdRand (otherwise).\n\nTree-SHA512: fb7d3e22e93e14592f4b07282aa79d7c3cc4e9debdd9978580b8d2562bbad345e289bf3f80de2c50c9b50b8bac2aa9b838f9f272f7f8d43f1efc0913aa8acce3",
      "tree": {
        "sha": "ef6feeda051f7af62767a503ce6753ddbde05a86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef6feeda051f7af62767a503ce6753ddbde05a86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29e82e460e19818b420e7169ac8ed5248d6d0af9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxqgWcACgkQHkrtYphs\n0l3ghgf/YFPRvhF1O8m3GFAEWheQZSwOF7j4/x6LfXJ5EMYHTUF7jM+7iImfFOtm\nOykOeS1ct7vi/tal0xA//FPeDSId06uksNCMczz8PFpqFvDVI2SlhSCsUiOEyDdS\n712GzBmRNn/k04Ctvz+BQ7yicBk0ILaC3lPMRPiaC3Ziz2Yot5a+//CCMgjucM1B\nfA5WVDll8pnPh16akLJMSktRYryuH2XXLuR5agngJ9oEt34y+uRaWIF2jRrxvhA4\nwMyIusawADwV43yuno2mNn0NoNVMBsgxF3pUAJ7dflxQICIwe5Gen5EHffqkKPib\njnpWlcOFVN7mG+TDYFHfUz1kW2O6gQ==\n=fxJR\n-----END PGP SIGNATURE-----",
        "payload": "tree ef6feeda051f7af62767a503ce6753ddbde05a86\nparent f5a623eb66c81d9d7b11206d574430af0127546d\nparent 1435fabc19d2143187efb493cbe23225eaf851ae\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550483734 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550483815 +0100\n\nMerge #15250: Use RdSeed when available, and reduce RdRand load\n\n1435fabc19d2143187efb493cbe23225eaf851ae Use RdSeed when available, and reduce RdRand load (Pieter Wuille)\n\nPull request description:\n\n  This introduces support for autodetecting and using the RdSeed instruction on x86/x86_64 systems.\n\n  In addition:\n  * In SeedFast, only 64 bits of entropy are generated through RdRand (256 was relatively slow).\n  * In SeedStartup, 256 bits of entropy are generated, using RdSeed (preferably) or RdRand (otherwise).\n\nTree-SHA512: fb7d3e22e93e14592f4b07282aa79d7c3cc4e9debdd9978580b8d2562bbad345e289bf3f80de2c50c9b50b8bac2aa9b838f9f272f7f8d43f1efc0913aa8acce3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e82e460e19818b420e7169ac8ed5248d6d0af9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29e82e460e19818b420e7169ac8ed5248d6d0af9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e82e460e19818b420e7169ac8ed5248d6d0af9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5a623eb66c81d9d7b11206d574430af0127546d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a623eb66c81d9d7b11206d574430af0127546d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a623eb66c81d9d7b11206d574430af0127546d"
      },
      {
        "sha": "1435fabc19d2143187efb493cbe23225eaf851ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1435fabc19d2143187efb493cbe23225eaf851ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1435fabc19d2143187efb493cbe23225eaf851ae"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 136,
      "deletions": 39
    },
    "files": [
      {
        "sha": "1aa78a903423a9df5f4e89ac9796d22c94d468a6",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 134,
        "deletions": 38,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29e82e460e19818b420e7169ac8ed5248d6d0af9/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29e82e460e19818b420e7169ac8ed5248d6d0af9/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=29e82e460e19818b420e7169ac8ed5248d6d0af9",
        "patch": "@@ -78,25 +78,119 @@ static inline int64_t GetPerformanceCounter() noexcept\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static bool rdrand_supported = false;\n+static bool g_rdrand_supported = false;\n+static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static constexpr uint32_t CPUID_F7_EBX_RDSEED = 0x00040000;\n+#ifdef bit_RDRND\n+static_assert(CPUID_F1_ECX_RDRAND == bit_RDRND, \"Unexpected value for bit_RDRND\");\n+#endif\n+#ifdef bit_RDSEED\n+static_assert(CPUID_F7_EBX_RDSEED == bit_RDSEED, \"Unexpected value for bit_RDSEED\");\n+#endif\n+static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+    // We can't use __get_cpuid as it doesn't support subleafs.\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+    __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n static void InitHardwareRand()\n {\n     uint32_t eax, ebx, ecx, edx;\n-    if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        rdrand_supported = true;\n+    GetCPUID(1, 0, eax, ebx, ecx, edx);\n+    if (ecx & CPUID_F1_ECX_RDRAND) {\n+        g_rdrand_supported = true;\n+    }\n+    GetCPUID(7, 0, eax, ebx, ecx, edx);\n+    if (ebx & CPUID_F7_EBX_RDSEED) {\n+        g_rdseed_supported = true;\n     }\n }\n \n static void ReportHardwareRand()\n {\n-    if (rdrand_supported) {\n-        // This must be done in a separate function, as HWRandInit() may be indirectly called\n-        // from global constructors, before logging is initialized.\n+    // This must be done in a separate function, as HWRandInit() may be indirectly called\n+    // from global constructors, before logging is initialized.\n+    if (g_rdseed_supported) {\n+        LogPrintf(\"Using RdSeed as additional entropy source\\n\");\n+    }\n+    if (g_rdrand_supported) {\n         LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n     }\n }\n \n+/** Read 64 bits of entropy using rdrand.\n+ *\n+ * Must only be called when RdRand is supported.\n+ */\n+static uint64_t GetRdRand() noexcept\n+{\n+    // RdRand may very rarely fail. Invoke it up to 10 times in a loop to reduce this risk.\n+#ifdef __i386__\n+    uint8_t ok;\n+    uint32_t r1, r2;\n+    for (int i = 0; i < 10; ++i) {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0; setc %1\" : \"=a\"(r1), \"=q\"(ok) :: \"cc\"); // rdrand %eax\n+        if (ok) break;\n+    }\n+    for (int i = 0; i < 10; ++i) {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0; setc %1\" : \"=a\"(r2), \"=q\"(ok) :: \"cc\"); // rdrand %eax\n+        if (ok) break;\n+    }\n+    return (((uint64_t)r2) << 32) | r1;\n+#elif defined(__x86_64__) || defined(__amd64__)\n+    uint8_t ok;\n+    uint64_t r1;\n+    for (int i = 0; i < 10; ++i) {\n+        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0; setc %1\" : \"=a\"(r1), \"=q\"(ok) :: \"cc\"); // rdrand %rax\n+        if (ok) break;\n+    }\n+    return r1;\n+#else\n+#error \"RdRand is only supported on x86 and x86_64\"\n+#endif\n+}\n+\n+/** Read 64 bits of entropy using rdseed.\n+ *\n+ * Must only be called when RdSeed is supported.\n+ */\n+static uint64_t GetRdSeed() noexcept\n+{\n+    // RdSeed may fail when the HW RNG is overloaded. Loop indefinitely until enough entropy is gathered,\n+    // but pause after every failure.\n+#ifdef __i386__\n+    uint8_t ok;\n+    uint32_t r1, r2;\n+    do {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf8; setc %1\" : \"=a\"(r1), \"=q\"(ok) :: \"cc\"); // rdseed %eax\n+        if (ok) break;\n+        __asm__ volatile (\"pause\");\n+    } while(true);\n+    do {\n+        __asm__ volatile (\".byte 0x0f, 0xc7, 0xf8; setc %1\" : \"=a\"(r2), \"=q\"(ok) :: \"cc\"); // rdseed %eax\n+        if (ok) break;\n+        __asm__ volatile (\"pause\");\n+    } while(true);\n+    return (((uint64_t)r2) << 32) | r1;\n+#elif defined(__x86_64__) || defined(__amd64__)\n+    uint8_t ok;\n+    uint64_t r1;\n+    do {\n+        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf8; setc %1\" : \"=a\"(r1), \"=q\"(ok) :: \"cc\"); // rdseed %rax\n+        if (ok) break;\n+        __asm__ volatile (\"pause\");\n+    } while(true);\n+    return r1;\n+#else\n+#error \"RdSeed is only supported on x86 and x86_64\"\n+#endif\n+}\n+\n #else\n /* Access to other hardware random number generators could be added here later,\n  * assuming it is sufficiently fast (in the order of a few hundred CPU cycles).\n@@ -107,40 +201,40 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) noexcept {\n+/** Add 64 bits of entropy gathered from hardware to hasher. Do nothing if not supported. */\n+static void SeedHardwareFast(CSHA512& hasher) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    if (rdrand_supported) {\n-        uint8_t ok;\n-        // Not all assemblers support the rdrand instruction, write it in hex.\n-#ifdef __i386__\n-        for (int iter = 0; iter < 4; ++iter) {\n-            uint32_t r1, r2;\n-            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n-                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n-                              \"setc %2\" :\n-                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n-            if (!ok) return false;\n-            WriteLE32(ent32 + 8 * iter, r1);\n-            WriteLE32(ent32 + 8 * iter + 4, r2);\n-        }\n-#else\n-        uint64_t r1, r2, r3, r4;\n-        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n-                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n-                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n-                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n-                          \"setc %4\" :\n-                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n-        if (!ok) return false;\n-        WriteLE64(ent32, r1);\n-        WriteLE64(ent32 + 8, r2);\n-        WriteLE64(ent32 + 16, r3);\n-        WriteLE64(ent32 + 24, r4);\n+    if (g_rdrand_supported) {\n+        uint64_t out = GetRdRand();\n+        hasher.Write((const unsigned char*)&out, sizeof(out));\n+        return;\n+    }\n #endif\n-        return true;\n+}\n+\n+/** Add 256 bits of entropy gathered from hardware to hasher. Do nothing if not supported. */\n+static void SeedHardwareSlow(CSHA512& hasher) noexcept {\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    // When we want 256 bits of entropy, prefer RdSeed over RdRand, as it's\n+    // guaranteed to produce independent randomness on every call.\n+    if (g_rdseed_supported) {\n+        for (int i = 0; i < 4; ++i) {\n+            uint64_t out = GetRdSeed();\n+            hasher.Write((const unsigned char*)&out, sizeof(out));\n+        }\n+        return;\n+    }\n+    // When falling back to RdRand, XOR the result of 1024 results.\n+    // This guarantees a reseeding occurs between each.\n+    if (g_rdrand_supported) {\n+        for (int i = 0; i < 4; ++i) {\n+            uint64_t out = 0;\n+            for (int j = 0; j < 1024; ++j) out ^= GetRdRand();\n+            hasher.Write((const unsigned char*)&out, sizeof(out));\n+        }\n+        return;\n     }\n #endif\n-    return false;\n }\n \n static void RandAddSeedPerfmon(CSHA512& hasher)\n@@ -407,8 +501,7 @@ static void SeedFast(CSHA512& hasher) noexcept\n     hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n     // Hardware randomness is very fast when available; use it always.\n-    bool have_hw_rand = GetHardwareRand(buffer);\n-    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n+    SeedHardwareFast(hasher);\n \n     // High-precision timestamp\n     SeedTimestamp(hasher);\n@@ -460,6 +553,9 @@ static void SeedStartup(CSHA512& hasher) noexcept\n     RAND_screen();\n #endif\n \n+    // Gather 256 bits of hardware randomness, if available\n+    SeedHardwareSlow(hasher);\n+\n     // Everything that the 'slow' seeder includes.\n     SeedSlow(hasher);\n "
      },
      {
        "sha": "1c035f87bae1468b1fe7a757f65fdd81f7be254e",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29e82e460e19818b420e7169ac8ed5248d6d0af9/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29e82e460e19818b420e7169ac8ed5248d6d0af9/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=29e82e460e19818b420e7169ac8ed5248d6d0af9",
        "patch": "@@ -24,7 +24,7 @@\n  *   perform 'fast' seeding, consisting of mixing in:\n  *   - A stack pointer (indirectly committing to calling thread and call stack)\n  *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n- *   - Hardware RNG (rdrand) when available.\n+ *   - 64 bits from the hardware RNG (rdrand) when available.\n  *   These entropy sources are very fast, and only designed to protect against situations\n  *   where a VM state restore/copy results in multiple systems with the same randomness.\n  *   FastRandomContext on the other hand does not protect against this once created, but\n@@ -48,6 +48,7 @@\n  *\n  * On first use of the RNG (regardless of what function is called first), all entropy\n  * sources used in the 'slow' seeder are included, but also:\n+ * - 256 bits from the hardware RNG (rdseed or rdrand) when available.\n  * - (On Windows) Performance monitoring data from the OS.\n  * - (On Windows) Through OpenSSL, the screen contents.\n  *"
      }
    ]
  },
  {
    "sha": "39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWUyMGZjNTRmZjFiNTdkNmUwNDZmYzEyMTVlMmMyZjdmODlhOTdl",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-02-18T11:11:41Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-02-18T11:11:41Z"
      },
      "message": "Add missing #include.\n\nbd0dbe8763fc3029cf96531c9ccaba280b939445 introduced a dependency of\nrpc/util.h on RPCErrorCode, defined in rpc/protocol.h.  The latter file\nis only included from rpc/util.cpp, though.  This commit fixes the\nmissing include, by moving the #include of rpc/protocol.h to\nrpc/util.h.",
      "tree": {
        "sha": "9f7ce8b52f7acf14b6bdb739100cad7010d46445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f7ce8b52f7acf14b6bdb739100cad7010d46445"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29e82e460e19818b420e7169ac8ed5248d6d0af9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e82e460e19818b420e7169ac8ed5248d6d0af9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29e82e460e19818b420e7169ac8ed5248d6d0af9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1eec916abfdba3a4d5bf6f4fe4b93fccdbbd8fd8",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e",
        "patch": "@@ -5,7 +5,6 @@\n #include <key_io.h>\n #include <keystore.h>\n #include <policy/fees.h>\n-#include <rpc/protocol.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>"
      },
      {
        "sha": "a83ae98b7e776f6ad31ae624bdd131d5faa30947",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <node/transaction.h>\n #include <pubkey.h>\n+#include <rpc/protocol.h>\n #include <script/standard.h>\n #include <univalue.h>\n "
      }
    ]
  },
  {
    "sha": "6ba3f1fdfd884c55c933446913cbbcee2bd8651f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmEzZjFmZGZkODg0YzU1YzkzMzQ0NjkxM2NiYmNlZTJiZDg2NTFm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-18T14:16:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-18T14:16:35Z"
      },
      "message": "Merge #15397: Remove manual byte editing in wallet_tx_clone func test\n\n6aaa0abc12 Remove manual byte editing in wallet_tx_clone func test (Gregory Sanders)\n\nPull request description:\n\n  Adapted from @stevenroose\n\nTree-SHA512: 87f251579e347f870bd30fc57b0c130f00914a3dc78799826384eb049b91d49f2525d55899bf525997e23cc976ca7d10e6b56b23f7358acec307368d48a6f6f1",
      "tree": {
        "sha": "59ffeaf12b5bfbde04b10a02429917118d27cbf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59ffeaf12b5bfbde04b10a02429917118d27cbf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ba3f1fdfd884c55c933446913cbbcee2bd8651f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcar5EAAoJENLqSFDnUosl+78P/jB59QgeHexJfBcusGY8RHzD\nwI/St2dQRoJz2jjJNaz6MJZ4tVYywaBo4dCZaku7vyQuKXhgz8NSwuTTyJEcL1JB\n7Ba8LdF8MVDNsJve/E6QsoGBJAUmXqtO5JnvDhDIO8ISu0dHxXCuZLIS6PY3rE4h\nd2vKYIyl1ZKiG6pNYMaAwgFV0HRCH8Vi2XtFvv4oBN+SPYI+h2JrBbe6EfJ5mjpe\nT7RYbW2u/UJw1yMXjErVHO5hQ5AogSaOb1idOuh/Sk0cK9Fhb57Hag6GpGShjg8O\nDszzcsurIO5/CqztXHPQUPth19Orp3tDKniA0Trib9tXtxdSO55zXVI58g3sH5A8\nYg4A22RlxrgY8YCcxdefk5ChBYnT7p/upTtcoMvQI1XT+Lizlt00/sqoUmkHtCql\nsBfF8dxWAGSr6WNX78Fsqn2brchS9offrfLokbs7hCFF/H7sb2mCTZoovsuru2xC\nLk+mrSygbcWQNU12FiLYN9BPooV6np+TVDGZB/ZKXQmZimtQgFT8vBqORiEINLak\n9H7PHM+AgKPNVbLNSoEIVJe0uEQNkHR1/bOttmIjvHM4IY+CYWMlkvnp+n8nvuDm\n3olzirQ/NcdY83HNTPKUctq/aPgLfDSMXDLZzxToyAQF7RJuC3t7QM4Ef1hMGlhY\nysgFTP77fs8Spil9gEaC\n=Opo5\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILF4rt0U5/smfNiUj42BVqVfbVPgx8R1RQJ6B8sxbJOzCP/wEBERJklTZrZY\nQeL2xoBZSJQI8BA9svPo8UMiNnfiV37DKea1CPEEXGq+R/AIcUqcyl3WVF4Ag9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BDzpWU1yq7Eleg+0fn3GEQhCPEEXGq+RvAI0Es+AKRsWQAAg9/jDS75DI4jImh0\ndHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23/8BD0WsP2O92wLCIfA24k\nj4FwCPEEXGq+R/AIkelaeS54VM0Ag9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRj\nLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ/GaeSs53t+o15bgsYql62wjx\nBFxqvkbwCJJE6XnvrX1IAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 59ffeaf12b5bfbde04b10a02429917118d27cbf4\nparent 29e82e460e19818b420e7169ac8ed5248d6d0af9\nparent 6aaa0abc1241ad26f5895760701e77c9c8e93924\nauthor MarcoFalke <falke.marco@gmail.com> 1550499393 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550499395 -0500\n\nMerge #15397: Remove manual byte editing in wallet_tx_clone func test\n\n6aaa0abc12 Remove manual byte editing in wallet_tx_clone func test (Gregory Sanders)\n\nPull request description:\n\n  Adapted from @stevenroose\n\nTree-SHA512: 87f251579e347f870bd30fc57b0c130f00914a3dc78799826384eb049b91d49f2525d55899bf525997e23cc976ca7d10e6b56b23f7358acec307368d48a6f6f1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba3f1fdfd884c55c933446913cbbcee2bd8651f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba3f1fdfd884c55c933446913cbbcee2bd8651f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba3f1fdfd884c55c933446913cbbcee2bd8651f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29e82e460e19818b420e7169ac8ed5248d6d0af9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e82e460e19818b420e7169ac8ed5248d6d0af9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29e82e460e19818b420e7169ac8ed5248d6d0af9"
      },
      {
        "sha": "6aaa0abc1241ad26f5895760701e77c9c8e93924",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aaa0abc1241ad26f5895760701e77c9c8e93924",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6aaa0abc1241ad26f5895760701e77c9c8e93924"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "2f927502ff7859dcd1514961c64b9d7e5c12ac06",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba3f1fdfd884c55c933446913cbbcee2bd8651f/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba3f1fdfd884c55c933446913cbbcee2bd8651f/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=6ba3f1fdfd884c55c933446913cbbcee2bd8651f",
        "patch": "@@ -4,13 +4,15 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet accounts properly when there are cloned transactions with malleated scriptsigs.\"\"\"\n \n+import io\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     connect_nodes,\n     disconnect_nodes,\n     sync_blocks,\n )\n+from test_framework.messages import CTransaction, COIN\n \n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -72,19 +74,14 @@ def run_test(self):\n         clone_raw = self.nodes[0].createrawtransaction(clone_inputs, clone_outputs, clone_locktime)\n \n         # createrawtransaction randomizes the order of its outputs, so swap them if necessary.\n-        # output 0 is at version+#inputs+input+sigstub+sequence+#outputs\n-        # 40 BTC serialized is 00286bee00000000\n-        pos0 = 2 * (4 + 1 + 36 + 1 + 4 + 1)\n-        hex40 = \"00286bee00000000\"\n-        output_len = 16 + 2 + 2 * int(\"0x\" + clone_raw[pos0 + 16:pos0 + 16 + 2], 0)\n-        if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_raw[pos0:pos0 + 16] != hex40 or rawtx1[\"vout\"][0][\"value\"] != 40 and clone_raw[pos0:pos0 + 16] == hex40):\n-            output0 = clone_raw[pos0:pos0 + output_len]\n-            output1 = clone_raw[pos0 + output_len:pos0 + 2 * output_len]\n-            clone_raw = clone_raw[:pos0] + output1 + output0 + clone_raw[pos0 + 2 * output_len:]\n+        clone_tx = CTransaction()\n+        clone_tx.deserialize(io.BytesIO(bytes.fromhex(clone_raw)))\n+        if (rawtx1[\"vout\"][0][\"value\"] == 40 and clone_tx.vout[0].nValue != 40*COIN or rawtx1[\"vout\"][0][\"value\"] != 40 and clone_tx.vout[0].nValue == 40*COIN):\n+            (clone_tx.vout[0], clone_tx.vout[1]) = (clone_tx.vout[1], clone_tx.vout[0])\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_raw, None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_tx.serialize().hex(), None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      }
    ]
  },
  {
    "sha": "f78cd3dd5115cb80a4a2afe335046f172845a4d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzhjZDNkZDUxMTVjYjgwYTRhMmFmZTMzNTA0NmYxNzI4NDVhNGQy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-18T15:32:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-18T15:32:52Z"
      },
      "message": "Merge #15348: doc: Add separate productivity notes document\n\n5b76c314d6 doc: Add separate productivity notes document (Carl Dong)\n\nPull request description:\n\n  Many developers have their own tools and tricks to be more productive\n  during their cycles, so let's document the best ones so that everyone\n  can benefit from them.\n\nTree-SHA512: b4989e7a815e972a9a646f448fb6c08bd896b4bce77fd7fb22a71a7602971d4cbe34f88183f503f5b851d002784d9e91b87df5348c661eeb9cefa69c52e0de2b",
      "tree": {
        "sha": "738f078e4d486dbc14720ddc863eb506730ff797",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/738f078e4d486dbc14720ddc863eb506730ff797"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f78cd3dd5115cb80a4a2afe335046f172845a4d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcatAkAAoJENLqSFDnUosllNoP/1zBg3ib5p9NPH+l7oIMRiig\ns+zXk+Dg1iZJCl3rkIkpO3VdwsrkzHaiE0MxyqnzSJmezC9aZokoYbGfQR1p0ojZ\nrcrBU/D6PuZ2QTNhIg7bTbNzyp9RlQTYKQILFEj6XeXh6uhMChEb5jVLvWczf56B\nnIDFKZGw5UTp9yL4QLGpqmWJWtu8XfLrzoEa1E4RiaS0MUhxImpQCgyZuUj57nht\nbhuzFpAmOURJq5rhEnCmX2VoX1Qbg6xv6wiQR0AsKX4DtlhcRNWCgfaiZZKjEKRd\nbAyDAOxnx8Tm3Kd7wnbKm63qWkRQka/ZOcLbcj3eeLEq/JnBqzBlUOh+fyiymtCZ\nLanH989k0fpVfBW2jX2C7fm9c1VuYIMU8E4qntmSJiRhrYBgTqLjak5byGrj7Q9m\nzlYebIBKZ20A0iCMqAKgakck7tuR2p8MkKvNWSqNtPVf8sXcDj6rP+uevgBZMkeB\nqmVbF1EdzABhKOoN6AfsHpNl9KMas49AYurV9tohqmDWa38YEJWs857AyUiVbYO7\noD+mUAVGyZE267H4Czi3SRGa3RQicOxWWReBN7gYYHHAbns7pFogAJvMlwXWnvH0\nczsrYZx/bqJjbDlyds4RIwIfh3cK62Umv2orrXFPQ9Pn86bcTwCemYvjQYZGXY7w\nb0Om7g9YRrDE7oU0Fooo\n=cK79\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIP/t5iugSUYShTQzoVZRLu83797dyPQnt0dSGXtIFWEjCP/wEFhX2LQtG2fJ\nrY9bJnuLGhkI8QRcatAm8AjFYOoRbTAagQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEGJRUaT2kVJsHie19bGJXpoI8QRcatAm\n8AjcP5Qzru19oACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEGOGJcnUbXflmDi3m3b/EB0I8QRcatAm8AhzBK0K\ns8EuuQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BD8+vL4pkUDcBuDa7ra6KXDCPAQkjqMAUcMljel84nNoK1n\npQjwIMXARgO4QcZTPXVHfNsdFSkFt7+zWWB5EJsZ4jQLqXVCCPEEXGrQJ/AIJmHg\nTCc5KjwAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5\nd2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 738f078e4d486dbc14720ddc863eb506730ff797\nparent 6ba3f1fdfd884c55c933446913cbbcee2bd8651f\nparent 5b76c314d60842bb18c739cb8d69c912cfffec4d\nauthor MarcoFalke <falke.marco@gmail.com> 1550503946 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550503972 -0500\n\nMerge #15348: doc: Add separate productivity notes document\n\n5b76c314d6 doc: Add separate productivity notes document (Carl Dong)\n\nPull request description:\n\n  Many developers have their own tools and tricks to be more productive\n  during their cycles, so let's document the best ones so that everyone\n  can benefit from them.\n\nTree-SHA512: b4989e7a815e972a9a646f448fb6c08bd896b4bce77fd7fb22a71a7602971d4cbe34f88183f503f5b851d002784d9e91b87df5348c661eeb9cefa69c52e0de2b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f78cd3dd5115cb80a4a2afe335046f172845a4d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f78cd3dd5115cb80a4a2afe335046f172845a4d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f78cd3dd5115cb80a4a2afe335046f172845a4d2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ba3f1fdfd884c55c933446913cbbcee2bd8651f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba3f1fdfd884c55c933446913cbbcee2bd8651f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba3f1fdfd884c55c933446913cbbcee2bd8651f"
      },
      {
        "sha": "5b76c314d60842bb18c739cb8d69c912cfffec4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b76c314d60842bb18c739cb8d69c912cfffec4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b76c314d60842bb18c739cb8d69c912cfffec4d"
      }
    ],
    "stats": {
      "total": 210,
      "additions": 162,
      "deletions": 48
    },
    "files": [
      {
        "sha": "8876ffdd7286a81cd9ea341ac39ae77b06f95144",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78cd3dd5115cb80a4a2afe335046f172845a4d2/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78cd3dd5115cb80a4a2afe335046f172845a4d2/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=f78cd3dd5115cb80a4a2afe335046f172845a4d2",
        "patch": "@@ -51,6 +51,7 @@ Development\n The Bitcoin repo's [root README](/README.md) contains relevant information on the development process and automated testing.\n \n - [Developer Notes](developer-notes.md)\n+- [Productivity Notes](productivity.md)\n - [Release Notes](release-notes.md)\n - [Release Process](release-process.md)\n - [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)"
      },
      {
        "sha": "f765346cd8560f7e230e1e0969a07474bd6df2ae",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 48,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78cd3dd5115cb80a4a2afe335046f172845a4d2/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78cd3dd5115cb80a4a2afe335046f172845a4d2/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=f78cd3dd5115cb80a4a2afe335046f172845a4d2",
        "patch": "@@ -844,54 +844,6 @@ would be to revert the upstream fix before applying the updates to Bitcoin's\n copy of LevelDB. In general you should be wary of any upstream changes affecting\n what data is returned from LevelDB queries.\n \n-Git and GitHub tips\n----------------------\n-\n-- For resolving merge/rebase conflicts, it can be useful to enable diff3 style using\n-  `git config merge.conflictstyle diff3`. Instead of\n-\n-        <<<\n-        yours\n-        ===\n-        theirs\n-        >>>\n-\n-  you will see\n-\n-        <<<\n-        yours\n-        |||\n-        original\n-        ===\n-        theirs\n-        >>>\n-\n-  This may make it much clearer what caused the conflict. In this style, you can often just look\n-  at what changed between *original* and *theirs*, and mechanically apply that to *yours* (or the other way around).\n-\n-- When reviewing patches which change indentation in C++ files, use `git diff -w` and `git show -w`. This makes\n-  the diff algorithm ignore whitespace changes. This feature is also available on github.com, by adding `?w=1`\n-  at the end of any URL which shows a diff.\n-\n-- When reviewing patches that change symbol names in many places, use `git diff --word-diff`. This will instead\n-  of showing the patch as deleted/added *lines*, show deleted/added *words*.\n-\n-- When reviewing patches that move code around, try using\n-  `git diff --patience commit~:old/file.cpp commit:new/file/name.cpp`, and ignoring everything except the\n-  moved body of code which should show up as neither `+` or `-` lines. In case it was not a pure move, this may\n-  even work when combined with the `-w` or `--word-diff` options described above.\n-\n-- When looking at other's pull requests, it may make sense to add the following section to your `.git/config`\n-  file:\n-\n-        [remote \"upstream-pull\"]\n-                fetch = +refs/pull/*:refs/remotes/upstream-pull/*\n-                url = git@github.com:bitcoin/bitcoin.git\n-\n-  This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n-  or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n-  `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n-\n Scripted diffs\n --------------\n "
      },
      {
        "sha": "862017290d9dd839802eac3f7249a0e7cc3d0c1e",
        "filename": "doc/productivity.md",
        "status": "added",
        "additions": 161,
        "deletions": 0,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f78cd3dd5115cb80a4a2afe335046f172845a4d2/doc/productivity.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f78cd3dd5115cb80a4a2afe335046f172845a4d2/doc/productivity.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/productivity.md?ref=f78cd3dd5115cb80a4a2afe335046f172845a4d2",
        "patch": "@@ -0,0 +1,161 @@\n+Productivity Notes\n+==================\n+\n+Table of Contents\n+-----------------\n+\n+* [General](#general)\n+   * [Cache compilations with `ccache`](#cache-compilations-with-ccache)\n+   * [Disable features with `./configure`](#disable-features-with-configure)\n+   * [Make use of your threads with `make -j`](#make-use-of-your-threads-with-make--j)\n+   * [Multiple working directories with `git worktrees`](#multiple-working-directories-with-git-worktrees)\n+* [Writing code](#writing-code)\n+   * [Format C/C++/Protobuf diffs with `clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy)\n+   * [Format Python diffs with `yapf-diff.py`](#format-python-diffs-with-yapf-diffpy)\n+* [Rebasing/Merging code](#rebasingmerging-code)\n+   * [More conflict context with `merge.conflictstyle diff3`](#more-conflict-context-with-mergeconflictstyle-diff3)\n+* [Reviewing code](#reviewing-code)\n+   * [Reduce mental load with `git diff` options](#reduce-mental-load-with-git-diff-options)\n+   * [Reference PRs easily with `refspec`s](#reference-prs-easily-with-refspecs)\n+   * [Diff the diffs with `git range-diff`](#diff-the-diffs-with-git-range-diff)\n+\n+General\n+------\n+\n+### Cache compilations with `ccache`\n+\n+The easiest way to faster compile times is to cache compiles. `ccache` is a way to do so, from its description at the time of writing:\n+\n+> ccache is a compiler cache. It speeds up recompilation by caching the result of previous compilations and detecting when the same compilation is being done again. Supported languages are C, C++, Objective-C and Objective-C++.\n+\n+Install `ccache` through your distribution's package manager, and run `./configure` with your normal flags to pick it up.\n+\n+To use ccache for all your C/C++ projects, follow the symlinks method [here](https://ccache.samba.org/manual/latest.html#_run_modes) to set it up.\n+\n+### Disable features with `./configure`\n+\n+After running `./autogen.sh`, which generates the `./configure` file, use `./configure --help` to identify features that you can disable to save on compilation time. A few common flags:\n+\n+```sh\n+--without-miniupnpc\n+--disable-bench\n+--disable-wallet\n+--without-gui\n+```\n+\n+### Make use of your threads with `make -j`\n+\n+If you have multiple threads on your machine, you can tell `make` to utilize all of them with:\n+\n+```sh\n+make -j\"$(($(nproc)+1))\"\n+```\n+\n+### Multiple working directories with `git worktrees`\n+\n+If you work with multiple branches or multiple copies of the repository, you should try `git worktrees`.\n+\n+To create a new branch that lives under a new working directory without disrupting your current working directory (useful for creating pull requests):\n+```sh\n+git worktree add -b my-shiny-new-branch ../living-at-my-new-working-directory based-on-my-crufty-old-commit-ish\n+```\n+\n+To simply check out a commit-ish under a new working directory without disrupting your current working directory (useful for reviewing pull requests):\n+```sh\n+git worktree add --checkout ../where-my-checkout-commit-ish-will-live my-checkout-commit-ish\n+```\n+\n+-----\n+\n+This synergizes well with [`ccache`](#cache-compilations-with-ccache) as objects resulting from unchanged code will most likely hit the cache and won't need to be recompiled.\n+\n+You can also set up [upstream refspecs](#reference-prs-easily-with-refspecs) to refer to pull requests easier in the above `git worktree` commands.\n+\n+Writing code\n+------------\n+\n+### Format C/C++/Protobuf diffs with `clang-format-diff.py`\n+\n+See [contrib/devtools/README.md](contrib/devtools/README.md#clang-format-diff.py).\n+\n+### Format Python diffs with `yapf-diff.py`\n+\n+Usage is exactly the same as [`clang-format-diff.py`](#format-ccprotobuf-diffs-with-clang-format-diffpy). You can get it [here](https://github.com/MarcoFalke/yapf-diff).\n+\n+Rebasing/Merging code\n+-------------\n+\n+### More conflict context with `merge.conflictstyle diff3`\n+\n+For resolving merge/rebase conflicts, it can be useful to enable diff3 style using `git config merge.conflictstyle diff3`. Instead of\n+\n+```diff\n+<<<\n+yours\n+===\n+theirs\n+>>>\n+```\n+\n+  you will see\n+\n+```diff\n+<<<\n+yours\n+|||\n+original\n+===\n+theirs\n+>>>\n+```\n+\n+This may make it much clearer what caused the conflict. In this style, you can often just look at what changed between *original* and *theirs*, and mechanically apply that to *yours* (or the other way around).\n+\n+Reviewing code\n+--------------\n+\n+### Reduce mental load with `git diff` options\n+\n+When reviewing patches which change indentation in C++ files, use `git diff -w` and `git show -w`. This makes the diff algorithm ignore whitespace changes. This feature is also available on github.com, by adding `?w=1` at the end of any URL which shows a diff.\n+\n+When reviewing patches that change symbol names in many places, use `git diff --word-diff`. This will instead of showing the patch as deleted/added *lines*, show deleted/added *words*.\n+\n+When reviewing patches that move code around, try using `git diff --patience commit~:old/file.cpp commit:new/file/name.cpp`, and ignoring everything except the moved body of code which should show up as neither `+` or `-` lines. In case it was not a pure move, this may even work when combined with the `-w` or `--word-diff` options described above. `--color-moved=dimmed-zebra` will also dim the coloring of moved hunks in the diff on compatible terminals.\n+\n+### Reference PRs easily with `refspec`s\n+\n+When looking at other's pull requests, it may make sense to add the following section to your `.git/config` file:\n+\n+```\n+[remote \"upstream-pull\"]\n+        fetch = +refs/pull/*:refs/remotes/upstream-pull/*\n+        url = git@github.com:bitcoin/bitcoin.git\n+```\n+\n+This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all` or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`, `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+### Diff the diffs with `git range-diff`\n+\n+It is very common for contributors to rebase their pull requests, or make changes to commits (perhaps in response to review) that are not at the head of their branch. This poses a problem for reviewers as when the contributor force pushes, the reviewer is no longer sure that his previous reviews of commits are still valid (as the commit hashes can now be different even though the diff is semantically the same). `git range-diff` can help solve this problem by diffing the diffs.\n+\n+For example, to identify the differences between your previously reviewed diffs P1-5, and the new diffs P1-2,N3-4 as illustrated below:\n+```\n+       P1--P2--P3--P4--P5   <-- previously-reviewed-head\n+      /\n+...--m   <-- master\n+      \\\n+       P1--P2--N3--N4--N5   <-- new-head (with P3 slightly modified)\n+```\n+\n+You can do:\n+```sh\n+git range-diff master previously-reviewed-head new-head\n+```\n+\n+Note that `git range-diff` also work for rebases.\n+\n+-----\n+\n+`git range-diff` also accepts normal `git diff` options, see [Reduce mental load with `git diff` options](#reduce-mental-load-with-git-diff-options) for useful `git diff` options.\n+\n+You can also set up [upstream refspecs](#reference-prs-easily-with-refspecs) to refer to pull requests easier in the above `git range-diff` commands."
      }
    ]
  },
  {
    "sha": "904308dca3ff50afb704597c0a65d226dd40f635",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDQzMDhkY2EzZmY1MGFmYjcwNDU5N2MwYTY1ZDIyNmRkNDBmNjM1",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-18T20:38:53Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-02-18T20:39:06Z"
      },
      "message": "Merge #15433: Use a single wallet batch for UpgradeKeyMetadata\n\n0bedcbafd Use a single wallet batch for UpgradeKeyMetadata (Jonas Schnelli)\n\nPull request description:\n\n  Opening wallets (the first time) after #14021 took on my end around 30 seconds due to the keymetadata migration (tested on regtest).\n\n  Using a single wallet batch reduces the required time for the migration down to <1s on my system for a default 2k keypool wallet.\n\nTree-SHA512: f68739e452d382f5294186f47511b94884a1a0868688dd3179034a7e091a67f93bc9dd45cdfc9fa6b1fe90362772b719278012f2f56b752b803c87db8597a7b0",
      "tree": {
        "sha": "a352af4e537bf94ce0ba4bc84a840a059e726f47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a352af4e537bf94ce0ba4bc84a840a059e726f47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/904308dca3ff50afb704597c0a65d226dd40f635",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAlxrF+sACgkQ0wARbhyH\nWj2WSA//XATR/Unb48yWMn883MUBHObosJAYUAki4hFMPuaTgMECd9IiaLklJpjH\n8vwCh+HActLZ/AS1+JD+p5OSkUbwEoIQFJiYhsy+eKFKLhE0Z/N6KDLRMVVfnRUD\nVK7tqIa0H34gLsztmvcdimhVD/xMAugLZV/H0o5qqdUWY8oS1aP+pG00dQE8aam0\nsN/Q1X+UQEwWhNhEfdBPbPMMCr78QAc96jeYWzIQqdi0f7Yh79hqD1ztmQNDU6e8\nwfcRwjwWdG8ZhylHa2L/OLClH4r7cRIbM9kU45cVsNXlPKEEEysLk8WQShwpqyAp\nK7N/NN3VwiaQX/1j+8GYPXi9zRFK79Qjkw/Z0QauUbYNlYxZWRiBz4UuG1ytQzGj\nWHz0APbOG81sMrlY2uDi14YmYWxsilb2z5UBijFF/rxL0X7q3VMiH4tJYAxcYkwY\nRPbJS06s08WMVIUPi4sn5SFrvOBr1Wx60wSZHoOlKhb2HhNFlzeqtGqzBNVnDBkh\nxbCggwnpLaHWuvCgBeRYXJc+6Gwtr/RHm3LZbqZURXilr3sNDIOyBG7nxYBZbZ6y\nWwuZC9y7N5yYAHHUHZFU2w7yupO0v0nhFGclbwmC4nJe1OcbGitVZzItUc3JOJF5\n82wpkL+wZwK3bG/6YtrpYAM/SLC3EfsVqMes5vvLaBtvFES+xQ8=\n=sHgI\n-----END PGP SIGNATURE-----",
        "payload": "tree a352af4e537bf94ce0ba4bc84a840a059e726f47\nparent f78cd3dd5115cb80a4a2afe335046f172845a4d2\nparent 0bedcbafdfaa0e980ad91c0ba4b9039575017f0e\nauthor MeshCollider <dobsonsa68@gmail.com> 1550522333 +1300\ncommitter MeshCollider <dobsonsa68@gmail.com> 1550522346 +1300\n\nMerge #15433: Use a single wallet batch for UpgradeKeyMetadata\n\n0bedcbafd Use a single wallet batch for UpgradeKeyMetadata (Jonas Schnelli)\n\nPull request description:\n\n  Opening wallets (the first time) after #14021 took on my end around 30 seconds due to the keymetadata migration (tested on regtest).\n\n  Using a single wallet batch reduces the required time for the migration down to <1s on my system for a default 2k keypool wallet.\n\nTree-SHA512: f68739e452d382f5294186f47511b94884a1a0868688dd3179034a7e091a67f93bc9dd45cdfc9fa6b1fe90362772b719278012f2f56b752b803c87db8597a7b0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/904308dca3ff50afb704597c0a65d226dd40f635",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/904308dca3ff50afb704597c0a65d226dd40f635",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/904308dca3ff50afb704597c0a65d226dd40f635/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f78cd3dd5115cb80a4a2afe335046f172845a4d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f78cd3dd5115cb80a4a2afe335046f172845a4d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f78cd3dd5115cb80a4a2afe335046f172845a4d2"
      },
      {
        "sha": "0bedcbafdfaa0e980ad91c0ba4b9039575017f0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bedcbafdfaa0e980ad91c0ba4b9039575017f0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bedcbafdfaa0e980ad91c0ba4b9039575017f0e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "388422bec84d39302592c14bbaf5e6bdf9f699cd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/904308dca3ff50afb704597c0a65d226dd40f635/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/904308dca3ff50afb704597c0a65d226dd40f635/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=904308dca3ff50afb704597c0a65d226dd40f635",
        "patch": "@@ -371,6 +371,8 @@ void CWallet::UpgradeKeyMetadata()\n         return;\n     }\n \n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*database);\n+    size_t cnt = 0;\n     for (auto& meta_pair : mapKeyMetadata) {\n         CKeyMetadata& meta = meta_pair.second;\n         if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n@@ -392,10 +394,15 @@ void CWallet::UpgradeKeyMetadata()\n             // Write meta to wallet\n             CPubKey pubkey;\n             if (GetPubKey(meta_pair.first, pubkey)) {\n-                WriteKeyMetadata(meta, pubkey, true);\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+                if (++cnt % 1000 == 0) {\n+                    // avoid creating overlarge in-memory batches in case the wallet contains large amounts of keys\n+                    batch.reset(new WalletBatch(*database));\n+                }\n             }\n         }\n     }\n+    batch.reset(); //write before setting the flag\n     SetWalletFlag(WALLET_FLAG_KEY_ORIGIN_METADATA);\n }\n "
      }
    ]
  },
  {
    "sha": "1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTdiYTg0ZTExOTRhZWViM2MyZmM5ZDc5MzM3YTg0NTg2YjgzNGZk",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2019-02-04T03:53:19Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2019-02-19T01:49:19Z"
      },
      "message": "Fix lack of warning of unrecognized section names\n\n1. Fix lack of warning by collecting all section names by moving\n   m_config_sections.clear() to ArgsManager::ReadConfigFiles().\n2. Add info(file name, line number) to warning message.\n3. Add a test code to confirm this situation.\n3. Do clear() in ReadConfigString().",
      "tree": {
        "sha": "806c355c4d3c01bfa2d6192007f221f206d3082a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/806c355c4d3c01bfa2d6192007f221f206d3082a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "904308dca3ff50afb704597c0a65d226dd40f635",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/904308dca3ff50afb704597c0a65d226dd40f635",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/904308dca3ff50afb704597c0a65d226dd40f635"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 36,
      "deletions": 24
    },
    "files": [
      {
        "sha": "f85a0da37e8e00685649d15d51cd5e87e504fe82",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -815,7 +815,7 @@ void InitParameterInteraction()\n \n     // Warn if unrecognized section name are present in the config file.\n     for (const auto& section : gArgs.GetUnrecognizedSections()) {\n-        InitWarning(strprintf(_(\"Section [%s] is not recognized.\"), section));\n+        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\"), section.m_file, section.m_line, section.m_name));\n     }\n }\n "
      },
      {
        "sha": "e17ae7103b3402591429a869d93eafa1a903dd4a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -180,9 +180,10 @@ struct TestArgsManager : public ArgsManager\n         {\n             LOCK(cs_args);\n             m_config_args.clear();\n+            m_config_sections.clear();\n         }\n         std::string error;\n-        BOOST_REQUIRE(ReadConfigStream(streamConfig, error));\n+        BOOST_REQUIRE(ReadConfigStream(streamConfig, \"\", error));\n     }\n     void SetNetworkOnlyArg(const std::string arg)\n     {"
      },
      {
        "sha": "9e02a227cb1e41997cb5137ad1a97ee3e09b220f",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -354,23 +354,19 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     return unsuitables;\n }\n \n-\n-const std::set<std::string> ArgsManager::GetUnrecognizedSections() const\n+const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const\n {\n     // Section names to be recognized in the config file.\n     static const std::set<std::string> available_sections{\n         CBaseChainParams::REGTEST,\n         CBaseChainParams::TESTNET,\n         CBaseChainParams::MAIN\n     };\n-    std::set<std::string> diff;\n \n     LOCK(cs_args);\n-    std::set_difference(\n-        m_config_sections.begin(), m_config_sections.end(),\n-        available_sections.begin(), available_sections.end(),\n-        std::inserter(diff, diff.end()));\n-    return diff;\n+    std::list<SectionInfo> unrecognized = m_config_sections;\n+    unrecognized.remove_if([](const SectionInfo& appeared){ return available_sections.find(appeared.m_name) != available_sections.end(); });\n+    return unrecognized;\n }\n \n void ArgsManager::SelectConfigNetwork(const std::string& network)\n@@ -794,7 +790,7 @@ static std::string TrimString(const std::string& str, const std::string& pattern\n     return str.substr(front, end - front + 1);\n }\n \n-static bool GetConfigOptions(std::istream& stream, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::set<std::string>& sections)\n+static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)\n {\n     std::string str, prefix;\n     std::string::size_type pos;\n@@ -810,7 +806,7 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n         if (!str.empty()) {\n             if (*str.begin() == '[' && *str.rbegin() == ']') {\n                 const std::string section = str.substr(1, str.size() - 2);\n-                sections.insert(section);\n+                sections.emplace_back(SectionInfo{section, filepath, linenr});\n                 prefix = section + '.';\n             } else if (*str.begin() == '-') {\n                 error = strprintf(\"parse error on line %i: %s, options in configuration file must be specified without leading -\", linenr, str);\n@@ -823,8 +819,8 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n                     return false;\n                 }\n                 options.emplace_back(name, value);\n-                if ((pos = name.rfind('.')) != std::string::npos) {\n-                    sections.insert(name.substr(0, pos));\n+                if ((pos = name.rfind('.')) != std::string::npos && prefix.length() <= pos) {\n+                    sections.emplace_back(SectionInfo{name.substr(0, pos), filepath, linenr});\n                 }\n             } else {\n                 error = strprintf(\"parse error on line %i: %s\", linenr, str);\n@@ -839,12 +835,11 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n     return true;\n }\n \n-bool ArgsManager::ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys)\n+bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys)\n {\n     LOCK(cs_args);\n     std::vector<std::pair<std::string, std::string>> options;\n-    m_config_sections.clear();\n-    if (!GetConfigOptions(stream, error, options, m_config_sections)) {\n+    if (!GetConfigOptions(stream, filepath, error, options, m_config_sections)) {\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n@@ -875,14 +870,15 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n     {\n         LOCK(cs_args);\n         m_config_args.clear();\n+        m_config_sections.clear();\n     }\n \n     const std::string confPath = GetArg(\"-conf\", BITCOIN_CONF_FILENAME);\n     fsbridge::ifstream stream(GetConfigFile(confPath));\n \n     // ok to not have a config file\n     if (stream.good()) {\n-        if (!ReadConfigStream(stream, error, ignore_invalid_keys)) {\n+        if (!ReadConfigStream(stream, confPath, error, ignore_invalid_keys)) {\n             return false;\n         }\n         // if there is an -includeconf in the override args, but it is empty, that means the user\n@@ -913,7 +909,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             for (const std::string& to_include : includeconf) {\n                 fsbridge::ifstream include_config(GetConfigFile(to_include));\n                 if (include_config.good()) {\n-                    if (!ReadConfigStream(include_config, error, ignore_invalid_keys)) {\n+                    if (!ReadConfigStream(include_config, to_include, error, ignore_invalid_keys)) {\n                         return false;\n                     }\n                     LogPrintf(\"Included configuration file %s\\n\", to_include.c_str());"
      },
      {
        "sha": "cb66c470a659e29e0ea123aa3228647bede9d11a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -132,6 +132,13 @@ enum class OptionsCategory {\n     HIDDEN // Always the last option to avoid printing these in the help\n };\n \n+struct SectionInfo\n+{\n+    std::string m_name;\n+    std::string m_file;\n+    int m_line;\n+};\n+\n class ArgsManager\n {\n protected:\n@@ -152,9 +159,9 @@ class ArgsManager\n     std::string m_network GUARDED_BY(cs_args);\n     std::set<std::string> m_network_only_args GUARDED_BY(cs_args);\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n-    std::set<std::string> m_config_sections GUARDED_BY(cs_args);\n+    std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n-    NODISCARD bool ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys = false);\n+    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n public:\n     ArgsManager();\n@@ -178,7 +185,7 @@ class ArgsManager\n     /**\n      * Log warnings for unrecognized section names in the config file.\n      */\n-    const std::set<std::string> GetUnrecognizedSections() const;\n+    const std::list<SectionInfo> GetUnrecognizedSections() const;\n \n     /**\n      * Return a vector of strings of the given argument"
      },
      {
        "sha": "460e664c48894ced3c8998b98c725767e33ee0fd",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "patch": "@@ -41,13 +41,21 @@ def test_config_file_parser(self):\n             conf.write('server=1\\nrpcuser=someuser\\n[main]\\nrpcpassword=some#pass')\n         self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 4, using # in rpcpassword can be ambiguous and should be avoided')\n \n+        inc_conf_file2_path = os.path.join(self.nodes[0].datadir, 'include2.conf')\n+        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+            conf.write('includeconf={}\\n'.format(inc_conf_file2_path))\n+\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n-            conf.write('testnot.datadir=1\\n[testnet]\\n')\n+            conf.write('testnot.datadir=1\\n')\n+        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n+            conf.write('[testnet]\\n')\n         self.restart_node(0)\n-        self.nodes[0].stop_node(expected_stderr='Warning: Section [testnet] is not recognized.' + os.linesep + 'Warning: Section [testnot] is not recognized.')\n+        self.nodes[0].stop_node(expected_stderr='Warning: ' + inc_conf_file_path + ':1 Section [testnot] is not recognized.' + os.linesep + 'Warning: ' + inc_conf_file2_path + ':1 Section [testnet] is not recognized.')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('')  # clear\n+        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n+            conf.write('')  # clear\n \n     def run_test(self):\n         self.stop_node(0)"
      }
    ]
  },
  {
    "sha": "1a062b85f0f445d786c658a4f3687c07011810dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTA2MmI4NWYwZjQ0NWQ3ODZjNjU4YTRmMzY4N2MwNzAxMTgxMGRj",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2019-02-19T06:03:46Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2019-02-19T07:38:44Z"
      },
      "message": "tests: remove byte.hex() to keep compatibility\n\nUse test_framework.util.bytes_to_hex_str() instead of bytes.hex() that\nnew in Python 3.5, to support minimum version of Python(test).",
      "tree": {
        "sha": "af1614c6939975a9c0ad68d090fd6443f0c41cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af1614c6939975a9c0ad68d090fd6443f0c41cec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a062b85f0f445d786c658a4f3687c07011810dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a062b85f0f445d786c658a4f3687c07011810dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a062b85f0f445d786c658a4f3687c07011810dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a062b85f0f445d786c658a4f3687c07011810dc/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "904308dca3ff50afb704597c0a65d226dd40f635",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/904308dca3ff50afb704597c0a65d226dd40f635",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/904308dca3ff50afb704597c0a65d226dd40f635"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d0bef48cb600ed25970be4381511dae1368ff1d9",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a062b85f0f445d786c658a4f3687c07011810dc/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a062b85f0f445d786c658a4f3687c07011810dc/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=1a062b85f0f445d786c658a4f3687c07011810dc",
        "patch": "@@ -184,7 +184,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         self.log.info('submitheader tests')\n         assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='xx' * BLOCK_HEADER_SIZE))\n         assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='ff' * (BLOCK_HEADER_SIZE-2)))\n-        assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata=super(CBlock, bad_block).serialize().hex()))\n+        assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata=b2x(super(CBlock, bad_block).serialize())))\n \n         block.nTime += 1\n         block.solve()"
      },
      {
        "sha": "a0a35bf43dec92af4f090061a734f3d6125f1c23",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a062b85f0f445d786c658a4f3687c07011810dc/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a062b85f0f445d786c658a4f3687c07011810dc/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=1a062b85f0f445d786c658a4f3687c07011810dc",
        "patch": "@@ -8,6 +8,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    bytes_to_hex_str as b2x,\n     connect_nodes,\n     disconnect_nodes,\n     sync_blocks,\n@@ -81,7 +82,7 @@ def run_test(self):\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_tx.serialize().hex(), None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(b2x(clone_tx.serialize()), None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      }
    ]
  },
  {
    "sha": "e3e1a5631e2456bb40844862ef35c07c1d1c47b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2UxYTU2MzFlMjQ1NmJiNDA4NDQ4NjJlZjM1YzA3YzFkMWM0N2Iw",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-19T07:53:51Z"
      },
      "message": "[test] functional: set cwd of nodes to tmpdir",
      "tree": {
        "sha": "8a5bde4c685d0d89f4d37b090c79c2600349e37f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a5bde4c685d0d89f4d37b090c79c2600349e37f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3e1a5631e2456bb40844862ef35c07c1d1c47b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxrthUACgkQV/+b28ww\nEAlONRAAkszOcKxI6md5HZ7B3Y0Kj3G/uCD6RKCJo9LTOGsYOCAsHWSccRQuhgM5\nPPamRx1zqxmdoHzvglNknQVE5m8MCXcMXzRIZ66uQWOe7ZJib0QSLdSrNPngirWR\nlIjnCMc2oMunDIeDFMS0FI+7Knp0OKWS27Os4uC5mPRVzDkqwe8nlHZpeV4/Pd7A\nssOmx+w3lCWp3n/nsEXRqM86Ntz3hYEeMJzGFr/GkjFSQFn+XkLK4WOlvbF9DhlE\n/u2U/Pv0asmOGloA4kaX/Yt0+cBvitCu9axX3ZBXsqa8AoEkwmPlRa5cSKkk3TQO\n7V4vPLrUeSosIC+NunnMLCYBoNFRSY5zoOVTK5vPshNrkRguwWe5g2mGeljnsNXA\nJaBSn480yycV8EutqEMB+FZBEyUy+MZLihsf9j3jQnRo8Y5gVHv/icehFory91KG\nxUupgINP+CWiur2btwT3Lud9JVrRgUQ7JPPgdOPe4A05v2FpyFdrwrGiM3F0eJCJ\nFhuLnVUMcA3RAR19tPXKQxoo0KxNFqQ/HqAteJp0aXwwN/vJ8R0PiMlv7Peltudb\njoXfWuo0BMcDjMQjrenO44979bKUFfUgANV7Rk1Z3AFVSgcFq0LIEWw3CQFDrD64\nD7urFWOgVrqE0NTmjUDSCZVlg/aGSdigQFhjXCW4tPCZVpbr17E=\n=DgVG\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a5bde4c685d0d89f4d37b090c79c2600349e37f\nparent c576979b78b541bf3b4a7cbeee989b55d268e3e1\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1550562831 +0100\n\n[test] functional: set cwd of nodes to tmpdir\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e1a5631e2456bb40844862ef35c07c1d1c47b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3e1a5631e2456bb40844862ef35c07c1d1c47b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e1a5631e2456bb40844862ef35c07c1d1c47b0/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c576979b78b541bf3b4a7cbeee989b55d268e3e1"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "869b36673e755371321b92985a11f789767cf106",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e1a5631e2456bb40844862ef35c07c1d1c47b0/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e1a5631e2456bb40844862ef35c07c1d1c47b0/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=e3e1a5631e2456bb40844862ef35c07c1d1c47b0",
        "patch": "@@ -318,6 +318,7 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n                 bitcoin_cli=self.options.bitcoincli,\n                 mocktime=self.mocktime,\n                 coverage_dir=self.options.coveragedir,\n+                cwd=self.options.tmpdir,\n                 extra_conf=extra_confs[i],\n                 extra_args=extra_args[i],\n                 use_cli=self.options.usecli,\n@@ -469,6 +470,7 @@ def _initialize_chain(self):\n                     bitcoin_cli=self.options.bitcoincli,\n                     mocktime=self.mocktime,\n                     coverage_dir=None,\n+                    cwd=self.options.tmpdir,\n                 ))\n                 self.nodes[i].args = args\n                 self.start_node(i)"
      },
      {
        "sha": "352774914d884dc1c51e617ac15e613dcd18a380",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e1a5631e2456bb40844862ef35c07c1d1c47b0/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e1a5631e2456bb40844862ef35c07c1d1c47b0/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=e3e1a5631e2456bb40844862ef35c07c1d1c47b0",
        "patch": "@@ -61,7 +61,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -76,6 +76,7 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n         self.rpc_timeout = timewait\n         self.binary = bitcoind\n         self.coverage_dir = coverage_dir\n+        self.cwd = cwd\n         if extra_conf is not None:\n             append_config(datadir, extra_conf)\n         # Most callers will just need to add extra args to the standard list below.\n@@ -171,7 +172,7 @@ def __getattr__(self, name):\n             assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\n             return getattr(self.rpc, name)\n \n-    def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n+    def start(self, extra_args=None, *, cwd=None, stdout=None, stderr=None, **kwargs):\n         \"\"\"Start the node.\"\"\"\n         if extra_args is None:\n             extra_args = self.extra_args\n@@ -184,6 +185,9 @@ def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n         self.stderr = stderr\n         self.stdout = stdout\n \n+        if cwd is None:\n+            cwd = self.cwd\n+\n         # Delete any existing cookie file -- if such a file exists (eg due to\n         # unclean shutdown), it will get overwritten anyway by bitcoind, and\n         # potentially interfere with our attempt to authenticate\n@@ -192,7 +196,7 @@ def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n         # add environment variable LIBC_FATAL_STDERR_=1 so that libc errors are written to stderr and not the terminal\n         subp_env = dict(os.environ, LIBC_FATAL_STDERR_=\"1\")\n \n-        self.process = subprocess.Popen(self.args + extra_args, env=subp_env, stdout=stdout, stderr=stderr, **kwargs)\n+        self.process = subprocess.Popen(self.args + extra_args, env=subp_env, stdout=stdout, stderr=stderr, cwd=cwd, **kwargs)\n \n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")"
      }
    ]
  },
  {
    "sha": "3e4fd407538160daf4267a784d308e8368177edc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTRmZDQwNzUzODE2MGRhZjQyNjdhNzg0ZDMwOGU4MzY4MTc3ZWRj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-19T15:12:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-19T15:12:28Z"
      },
      "message": "Merge #15415: [test] functional: allow custom cwd, use tmpdir as default\n\ne3e1a5631e [test] functional: set cwd of nodes to tmpdir (Sjors Provoost)\n\nPull request description:\n\n  Any process launched by bitcoind will have `self.datadir` as its `cwd`.\n\nTree-SHA512: 0b311643bb96c7dc2f693774620173243b3add40bf373284695af2f0071823b23485289fd2ffe152b7f63e0bfe989b16720077cfc2ce33905f9b8e7f2630f3c0",
      "tree": {
        "sha": "f3a434db47cbd84c408a9c5392b75955dd70396c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3a434db47cbd84c408a9c5392b75955dd70396c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e4fd407538160daf4267a784d308e8368177edc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcbBzcAAoJENLqSFDnUoslFCAP/iNVrLdRmQvKrnD3dTeIMTMD\n09EOXTSvXUSnBkQuuraSwwxVQ/wvu0ro7KqWhCEekm1Ozdx7im2PO8vve0pQ3UV+\nEYL5iSxJO4t4pZHRo44wWIppx6ubipvYl9boGkgPEsY++CDrahghXT3scrNWBDek\n2he9w2GsULxj6D2l7YwlUNBx8slEPRu+yKxnpePp+svJT/fJqfszzFEV9868qHKX\n+pQ8TRmYHEjmAVmhd66rYupESyg6DFMh4pLCa6pJ5h6etZNutNTBgxbAcVflM9ym\nZuwoCqVM8r8p3CUgK20kzKJK2jGGgU75vNpVrnn8txATNq9yL/nHyIy2tK7L10KG\nCijg/H5K3YgSZyczLsMXE695pcfwargQtyvTzBtnN7zi/A5b0nbmGtj9OxGp41ty\nd4qda4QwX0imB9VsQ5Sq1wIAvbuHgz7jV7y6I38g4CspScEo2R1NIpei3iyLnuvU\n7BBGBxHfqB3yh4YmlpxDLF0X6q1HD7ja6N0oEs9wvpnnKMdyx30r5i3k8jvmCsYF\nkHG3TTYY2nBl9F3mKEtf599W7Akvq7vBKqtRVl8hKi1CFA5lfyEw4KiqDRXqLA6m\nOImJFxuEbNOFOK0t9VDmdy90tJpz65DvQcNeVY/7isyhzxNJoc2GaJkGLolfqAl2\nxu+KDDymJt6PKA9Lm/IB\n=RSQk\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHtLam3n1qtp2U3CTsPTqyHQoCeGF+st9LzK1Z8+RoCACP/wEB3cOOJGMtEW\nlf67LIA74FcI8QRcbBzf8AhfTVp/4/9n0ACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEDKwy6yEXJD82mxz8Sby\neGAI8QRcbBzf8Ah87BEA+xUQkwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEG2hnbrUYYl8dqMqWGEWiLYI8BD1fBBMyiZy4sgn\nUU6vBRhTCPEEXGwc3/AIkgo+azRigU0Ag9/jDS75DI4pKGh0dHBzOi8vZmlubmV5\nLmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wEM60x5J7j9WdSS/hRAAY7CQI8SAG\nZ7jthfbh1YiJY2LtaBcjGusvF1shqUcvyGfNynwPpAjxBFxsHN7wCECuW1J9p5rn\nAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f3a434db47cbd84c408a9c5392b75955dd70396c\nparent 904308dca3ff50afb704597c0a65d226dd40f635\nparent e3e1a5631e2456bb40844862ef35c07c1d1c47b0\nauthor MarcoFalke <falke.marco@gmail.com> 1550589127 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550589148 -0500\n\nMerge #15415: [test] functional: allow custom cwd, use tmpdir as default\n\ne3e1a5631e [test] functional: set cwd of nodes to tmpdir (Sjors Provoost)\n\nPull request description:\n\n  Any process launched by bitcoind will have `self.datadir` as its `cwd`.\n\nTree-SHA512: 0b311643bb96c7dc2f693774620173243b3add40bf373284695af2f0071823b23485289fd2ffe152b7f63e0bfe989b16720077cfc2ce33905f9b8e7f2630f3c0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4fd407538160daf4267a784d308e8368177edc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4fd407538160daf4267a784d308e8368177edc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4fd407538160daf4267a784d308e8368177edc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "904308dca3ff50afb704597c0a65d226dd40f635",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/904308dca3ff50afb704597c0a65d226dd40f635",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/904308dca3ff50afb704597c0a65d226dd40f635"
      },
      {
        "sha": "e3e1a5631e2456bb40844862ef35c07c1d1c47b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e1a5631e2456bb40844862ef35c07c1d1c47b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3e1a5631e2456bb40844862ef35c07c1d1c47b0"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "869b36673e755371321b92985a11f789767cf106",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e4fd407538160daf4267a784d308e8368177edc/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e4fd407538160daf4267a784d308e8368177edc/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=3e4fd407538160daf4267a784d308e8368177edc",
        "patch": "@@ -318,6 +318,7 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n                 bitcoin_cli=self.options.bitcoincli,\n                 mocktime=self.mocktime,\n                 coverage_dir=self.options.coveragedir,\n+                cwd=self.options.tmpdir,\n                 extra_conf=extra_confs[i],\n                 extra_args=extra_args[i],\n                 use_cli=self.options.usecli,\n@@ -469,6 +470,7 @@ def _initialize_chain(self):\n                     bitcoin_cli=self.options.bitcoincli,\n                     mocktime=self.mocktime,\n                     coverage_dir=None,\n+                    cwd=self.options.tmpdir,\n                 ))\n                 self.nodes[i].args = args\n                 self.start_node(i)"
      },
      {
        "sha": "352774914d884dc1c51e617ac15e613dcd18a380",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e4fd407538160daf4267a784d308e8368177edc/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e4fd407538160daf4267a784d308e8368177edc/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=3e4fd407538160daf4267a784d308e8368177edc",
        "patch": "@@ -61,7 +61,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -76,6 +76,7 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n         self.rpc_timeout = timewait\n         self.binary = bitcoind\n         self.coverage_dir = coverage_dir\n+        self.cwd = cwd\n         if extra_conf is not None:\n             append_config(datadir, extra_conf)\n         # Most callers will just need to add extra args to the standard list below.\n@@ -171,7 +172,7 @@ def __getattr__(self, name):\n             assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\n             return getattr(self.rpc, name)\n \n-    def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n+    def start(self, extra_args=None, *, cwd=None, stdout=None, stderr=None, **kwargs):\n         \"\"\"Start the node.\"\"\"\n         if extra_args is None:\n             extra_args = self.extra_args\n@@ -184,6 +185,9 @@ def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n         self.stderr = stderr\n         self.stdout = stdout\n \n+        if cwd is None:\n+            cwd = self.cwd\n+\n         # Delete any existing cookie file -- if such a file exists (eg due to\n         # unclean shutdown), it will get overwritten anyway by bitcoind, and\n         # potentially interfere with our attempt to authenticate\n@@ -192,7 +196,7 @@ def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n         # add environment variable LIBC_FATAL_STDERR_=1 so that libc errors are written to stderr and not the terminal\n         subp_env = dict(os.environ, LIBC_FATAL_STDERR_=\"1\")\n \n-        self.process = subprocess.Popen(self.args + extra_args, env=subp_env, stdout=stdout, stderr=stderr, **kwargs)\n+        self.process = subprocess.Popen(self.args + extra_args, env=subp_env, stdout=stdout, stderr=stderr, cwd=cwd, **kwargs)\n \n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")"
      }
    ]
  },
  {
    "sha": "38429c4b622887f2c1db15a7826215477ca6868c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODQyOWM0YjYyMjg4N2YyYzFkYjE1YTc4MjYyMTU0NzdjYTY4Njhj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-19T15:30:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-19T15:31:20Z"
      },
      "message": "Merge #15404: [test] Remove -txindex to start nodes\n\n8e4b4f683a0b342cec24cd51b1e98433034ea2ea Address test todos by removing -txindex to nodes. Originally added when updating getrawtransaction to stop searching unspent utxos. (Amiti Uttarwar)\n\nPull request description:\n\n  Original todos added when removing getrawtransaction default behavior of searching unspent utxos.\n\nTree-SHA512: d080953c3b0d2e5dca2265a15966dc25985a614c9cc86271ecd6276178ce428c85e262c24df92501695c32fed7beec0339b989f03cce91b57fb2efba201b7809",
      "tree": {
        "sha": "ab273db5a3afd702e145892f0191475c0286207f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab273db5a3afd702e145892f0191475c0286207f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38429c4b622887f2c1db15a7826215477ca6868c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxsIUgACgkQHkrtYphs\n0l1nDQgAiBObjw95AGiBqL2Agg04N+ToD8VIDfhDfObg0saLrMj59i1O8qWqrC/X\n2oPQRmzJwZJIPTn+ATmR3i2PWrYPMnVtoTb5BvD9PgV1DtlZExPHPuVZSlYm7Jcn\n+PG2Esknw1pQRoMPf7ZaqiwnT6VEUHUuAEEDDC4cbTZfBzdSopLEfBNFO8em/eMV\nQCpODlQ7oUuCLK3fKwVnxDvRsoN9VCMgOfzaOrnj3KwD2Z0HacAK58I5HqP6sf5K\n/yi3nqumK7MjEWhGsY+8IsSSP63EB3+BunDpEpZoV5f5VMKSi8jVWkGa0S923IzM\nJkzFQHeHM/RJLJUFB6mJlQ0QN1piGA==\n=P+oS\n-----END PGP SIGNATURE-----",
        "payload": "tree ab273db5a3afd702e145892f0191475c0286207f\nparent 3e4fd407538160daf4267a784d308e8368177edc\nparent 8e4b4f683a0b342cec24cd51b1e98433034ea2ea\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550590236 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550590280 +0100\n\nMerge #15404: [test] Remove -txindex to start nodes\n\n8e4b4f683a0b342cec24cd51b1e98433034ea2ea Address test todos by removing -txindex to nodes. Originally added when updating getrawtransaction to stop searching unspent utxos. (Amiti Uttarwar)\n\nPull request description:\n\n  Original todos added when removing getrawtransaction default behavior of searching unspent utxos.\n\nTree-SHA512: d080953c3b0d2e5dca2265a15966dc25985a614c9cc86271ecd6276178ce428c85e262c24df92501695c32fed7beec0339b989f03cce91b57fb2efba201b7809\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38429c4b622887f2c1db15a7826215477ca6868c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38429c4b622887f2c1db15a7826215477ca6868c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38429c4b622887f2c1db15a7826215477ca6868c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4fd407538160daf4267a784d308e8368177edc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4fd407538160daf4267a784d308e8368177edc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4fd407538160daf4267a784d308e8368177edc"
      },
      {
        "sha": "8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4b4f683a0b342cec24cd51b1e98433034ea2ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4b4f683a0b342cec24cd51b1e98433034ea2ea"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 42,
      "deletions": 53
    },
    "files": [
      {
        "sha": "02a665008be30aed966a9ed4870379ac670fdc4b",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38429c4b622887f2c1db15a7826215477ca6868c/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38429c4b622887f2c1db15a7826215477ca6868c/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=38429c4b622887f2c1db15a7826215477ca6868c",
        "patch": "@@ -20,7 +20,8 @@ Supported API\n \n Given a transaction hash: returns a transaction in binary, hex-encoded binary, or JSON formats.\n \n-For full TX query capability, one must enable the transaction index via \"txindex=1\" command line / configuration option.\n+By default, this endpoint will only search the mempool.\n+To query for a confirmed transaction, enable the transaction index via \"txindex=1\" command line / configuration option.\n \n #### Blocks\n `GET /rest/block/<BLOCK-HASH>.<bin|hex|json>`"
      },
      {
        "sha": "658a8cd75eb08abbcd37aa3325dd3695c2db3fe3",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=38429c4b622887f2c1db15a7826215477ca6868c",
        "patch": "@@ -38,31 +38,29 @@ def find_spendable_utxo(node, min_value):\n \n     raise AssertionError(\"Unspent output equal or higher than %s not found\" % min_value)\n \n+txs_mined = {} # txindex from txid to blockhash\n+\n class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [\n             [\n                 \"-rpcserialversion=0\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=4\",\n                 \"-rpcserialversion=1\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=536870915\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n         ]\n \n@@ -157,10 +155,10 @@ def run_test(self):\n \n         self.log.info(\"Verify previous witness txs skipped for mining can now be mined\")\n         assert_equal(len(self.nodes[2].getrawmempool()), 4)\n-        block = self.nodes[2].generate(1)  # block 432 (first block with new rules; 432 = 144 * 3)\n+        blockhash = self.nodes[2].generate(1)[0]  # block 432 (first block with new rules; 432 = 144 * 3)\n         sync_blocks(self.nodes)\n         assert_equal(len(self.nodes[2].getrawmempool()), 0)\n-        segwit_tx_list = self.nodes[2].getblock(block[0])[\"tx\"]\n+        segwit_tx_list = self.nodes[2].getblock(blockhash)[\"tx\"]\n         assert_equal(len(segwit_tx_list), 5)\n \n         self.log.info(\"Verify default node can't accept txs with missing witness\")\n@@ -174,15 +172,16 @@ def run_test(self):\n         self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n \n         self.log.info(\"Verify block and transaction serialization rpcs return differing serializations depending on rpc serialization flag\")\n-        assert(self.nodes[2].getblock(block[0], False) != self.nodes[0].getblock(block[0], False))\n-        assert(self.nodes[1].getblock(block[0], False) == self.nodes[2].getblock(block[0], False))\n-        for i in range(len(segwit_tx_list)):\n-            tx = FromHex(CTransaction(), self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[2].getrawtransaction(segwit_tx_list[i]) != self.nodes[0].getrawtransaction(segwit_tx_list[i]))\n-            assert(self.nodes[1].getrawtransaction(segwit_tx_list[i], 0) == self.nodes[2].getrawtransaction(segwit_tx_list[i]))\n-            assert(self.nodes[0].getrawtransaction(segwit_tx_list[i]) != self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[1].getrawtransaction(segwit_tx_list[i]) == self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[0].getrawtransaction(segwit_tx_list[i]) == bytes_to_hex_str(tx.serialize_without_witness()))\n+        assert(self.nodes[2].getblock(blockhash, False) != self.nodes[0].getblock(blockhash, False))\n+        assert(self.nodes[1].getblock(blockhash, False) == self.nodes[2].getblock(blockhash, False))\n+\n+        for tx_id in segwit_tx_list:\n+            tx = FromHex(CTransaction(), self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            assert(self.nodes[2].getrawtransaction(tx_id, False, blockhash) != self.nodes[0].getrawtransaction(tx_id, False, blockhash))\n+            assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].getrawtransaction(tx_id, False, blockhash))\n+            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) != self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].gettransaction(tx_id)[\"hex\"])\n+            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) == bytes_to_hex_str(tx.serialize_without_witness()))\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n         self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n@@ -538,7 +537,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         tx.rehash()\n         signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n-        self.nodes[0].generate(1)\n+        txs_mined[txid] = self.nodes[0].generate(1)[0]\n         sync_blocks(self.nodes)\n         watchcount = 0\n         spendcount = 0\n@@ -581,7 +580,7 @@ def create_and_mine_tx_from_txids(self, txids, success=True):\n         tx = CTransaction()\n         for i in txids:\n             txtmp = CTransaction()\n-            txraw = self.nodes[0].getrawtransaction(i)\n+            txraw = self.nodes[0].getrawtransaction(i, 0, txs_mined[i])\n             f = BytesIO(hex_str_to_bytes(txraw))\n             txtmp.deserialize(f)\n             for j in range(len(txtmp.vout)):"
      },
      {
        "sha": "f33040242c92cc0e8321447d32cde1b4f8316a21",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 15,
        "deletions": 20,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=38429c4b622887f2c1db15a7826215477ca6868c",
        "patch": "@@ -43,8 +43,7 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-rest\", \"-txindex\"], []]\n+        self.extra_args = [[\"-rest\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -91,25 +90,32 @@ def run_test(self):\n \n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        self.nodes[1].generatetoaddress(1, not_related_address)\n-        self.sync_all()\n-        bb_hash = self.nodes[0].getbestblockhash()\n \n-        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n-\n-        self.log.info(\"Load the transaction using the /tx URI\")\n+        self.log.info(\"Test the /tx URI\")\n \n         json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        assert_equal(json_obj['txid'], txid)\n+\n+        # Check hex format response\n+        hex_response = self.test_rest_request(\"/tx/{}\".format(txid), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n+                                     json_obj['size']*2)\n+\n         spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n         n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n         spending = (txid, n)\n \n         self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n-        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        self.nodes[1].generatetoaddress(1, not_related_address)\n+        self.sync_all()\n+        bb_hash = self.nodes[0].getbestblockhash()\n+\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n \n         # Check chainTip response\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n         # Make sure there is one utxo\n@@ -274,17 +280,6 @@ def run_test(self):\n         json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n \n-        self.log.info(\"Test the /tx URI\")\n-\n-        tx_hash = block_json_obj['tx'][0]['txid']\n-        json_obj = self.test_rest_request(\"/tx/{}\".format(tx_hash))\n-        assert_equal(json_obj['txid'], tx_hash)\n-\n-        # Check hex format response\n-        hex_response = self.test_rest_request(\"/tx/{}\".format(tx_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n-        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n-                                     json_obj['size']*2)\n-\n         self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n \n         # Make 3 tx and mine them on node 1"
      },
      {
        "sha": "e9098e4f5aef1869118ea00d2d7a4eb3fe191ba0",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=38429c4b622887f2c1db15a7826215477ca6868c",
        "patch": "@@ -20,8 +20,6 @@ class PSBTTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n-       # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-txindex\"], [\"-txindex\"], [\"-txindex\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -161,11 +159,11 @@ def run_test(self):\n         node1_addr = self.nodes[1].getnewaddress()\n         node2_addr = self.nodes[2].getnewaddress()\n         txid1 = self.nodes[0].sendtoaddress(node1_addr, 13)\n-        txid2 =self.nodes[0].sendtoaddress(node2_addr, 13)\n-        self.nodes[0].generate(6)\n+        txid2 = self.nodes[0].sendtoaddress(node2_addr, 13)\n+        blockhash = self.nodes[0].generate(6)[0]\n         self.sync_all()\n-        vout1 = find_output(self.nodes[1], txid1, 13)\n-        vout2 = find_output(self.nodes[2], txid2, 13)\n+        vout1 = find_output(self.nodes[1], txid1, 13, blockhash=blockhash)\n+        vout2 = find_output(self.nodes[2], txid2, 13, blockhash=blockhash)\n \n         # Create a psbt spending outputs from nodes 1 and 2\n         psbt_orig = self.nodes[0].createpsbt([{\"txid\":txid1,  \"vout\":vout1}, {\"txid\":txid2, \"vout\":vout2}], {self.nodes[0].getnewaddress():25.999})\n@@ -344,9 +342,9 @@ def run_test(self):\n         addr = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n         txid = self.nodes[0].sendtoaddress(addr, 7)\n         addrinfo = self.nodes[1].getaddressinfo(addr)\n-        self.nodes[0].generate(6)\n+        blockhash = self.nodes[0].generate(6)[0]\n         self.sync_all()\n-        vout = find_output(self.nodes[0], txid, 7)\n+        vout = find_output(self.nodes[0], txid, 7, blockhash=blockhash)\n         psbt = self.nodes[1].createpsbt([{\"txid\":txid, \"vout\":vout}], {self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\"):Decimal('6.999')})\n         analyzed = self.nodes[0].analyzepsbt(psbt)\n         assert not analyzed['inputs'][0]['has_utxo'] and not analyzed['inputs'][0]['is_final'] and analyzed['inputs'][0]['next'] == 'updater' and analyzed['next'] == 'updater'"
      },
      {
        "sha": "c793cf00de82c81c13f59eae13eecea394eff4a3",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=38429c4b622887f2c1db15a7826215477ca6868c",
        "patch": "@@ -42,7 +42,6 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [[\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"]]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "fef99824127a29869de2a2cd3dfa12942079e471",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=38429c4b622887f2c1db15a7826215477ca6868c",
        "patch": "@@ -410,12 +410,12 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n # Transaction/Block functions\n #############################\n \n-def find_output(node, txid, amount):\n+def find_output(node, txid, amount, *, blockhash=None):\n     \"\"\"\n     Return index to output of txid with value amount\n     Raises exception if there is none.\n     \"\"\"\n-    txdata = node.getrawtransaction(txid, 1)\n+    txdata = node.getrawtransaction(txid, 1, blockhash)\n     for i in range(len(txdata[\"vout\"])):\n         if txdata[\"vout\"][i][\"value\"] == amount:\n             return i"
      },
      {
        "sha": "b0b151d2d61b14a41c0f17bc5493573fc03a004a",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=38429c4b622887f2c1db15a7826215477ca6868c",
        "patch": "@@ -26,8 +26,7 @@\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-minrelaytxfee=0.00001\", \"-txindex\"], []]\n+        self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "a5df763eb0411acdaf97d9afcdbbebf4b298d181",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38429c4b622887f2c1db15a7826215477ca6868c/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=38429c4b622887f2c1db15a7826215477ca6868c",
        "patch": "@@ -24,8 +24,6 @@ class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[], [], [\"-txindex\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "fab0d858027844f602e9e6103a66d97fdacc13ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIwZDg1ODAyNzg0NGY2MDJlOWU2MTAzYTY2ZDk3ZmRhY2MxM2Fi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T16:18:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-19T15:43:58Z"
      },
      "message": "qa: Remove mocktime unless required",
      "tree": {
        "sha": "d92bf57df1843428f606559c1a6c4167b26948c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d92bf57df1843428f606559c1a6c4167b26948c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab0d858027844f602e9e6103a66d97fdacc13ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcbCQ+AAoJEM4rdWl+aaVIqCoMAJ4OwqAgUf/swBT2Rvli6ksg\nqgL8zJoy8AG3vk+58H19vKw0aoc7aigiW33aYRiV0oA5J81IiAeFrJwbbySc3o1Y\nuCCsmPlWgikyO3v+OoXQRJGJ91r9uoEoJlg6Ff3/MRZHd1LoahOUZhF3QhGjzRId\nKTmz/2R63EMg908+A+q1W867FmHN3dx8ESmFecLFeSeHnmnw+CTcDQDINwIMkmDw\n1gszwNG1igoeSpYvfMCgumSZAbl+a5VjceV+Pss6Ll0QY6fAtLp1JMLjiwPcpYAb\ni9cN0R4Pp4ZY9WSprdNdL8pLIKjuH+FPJ02nprNdXoD9ko5MX+hoBN8f5+hxB7LH\nd84oeBH3AgZ6xUejxh16UiYJau9qavzDhpZrzqVWFdcnqG6gf1OqBrQhdgKkFgrY\n/ZFRL4XC/IFmc4hjJJnpcvlnapHC5FllHo3vr0zlS27DlKuL18d8XFkUf2crPDwE\nrpu46i171V281IA+1buOpO6ivoOAWPmhh36f/JvnwQ==\n=YHgy\n-----END PGP SIGNATURE-----",
        "payload": "tree d92bf57df1843428f606559c1a6c4167b26948c8\nparent 3e4fd407538160daf4267a784d308e8368177edc\nauthor MarcoFalke <falke.marco@gmail.com> 1549901916 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550591038 -0500\n\nqa: Remove mocktime unless required\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0d858027844f602e9e6103a66d97fdacc13ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0d858027844f602e9e6103a66d97fdacc13ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0d858027844f602e9e6103a66d97fdacc13ab/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4fd407538160daf4267a784d308e8368177edc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4fd407538160daf4267a784d308e8368177edc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4fd407538160daf4267a784d308e8368177edc"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 24,
      "deletions": 22
    },
    "files": [
      {
        "sha": "af150a09af20812abfea94fb17532392243b7cdc",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=fab0d858027844f602e9e6103a66d97fdacc13ab",
        "patch": "@@ -35,6 +35,7 @@\n from test_framework.blocktools import (\n     create_block,\n     create_coinbase,\n+    TIME_GENESIS_BLOCK,\n )\n from test_framework.messages import (\n     msg_block,\n@@ -46,9 +47,11 @@\n \n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.setup_clean_chain = True\n         self.num_nodes = 1\n \n     def run_test(self):\n+        self.mine_chain()\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n \n         self._test_getblockchaininfo()\n@@ -61,6 +64,15 @@ def run_test(self):\n         self._test_waitforblockheight()\n         assert self.nodes[0].verifychain(4, 0)\n \n+    def mine_chain(self):\n+        self.log.info('Create some old blocks')\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        for t in range(TIME_GENESIS_BLOCK, TIME_GENESIS_BLOCK + 200 * 600, 600):\n+            # ten-minute steps from genesis block time\n+            self.nodes[0].setmocktime(t)\n+            self.nodes[0].generatetoaddress(1, address)\n+        assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n+\n     def _test_getblockchaininfo(self):\n         self.log.info(\"Test getblockchaininfo\")\n "
      },
      {
        "sha": "49c15112b388eb980788d4ee2b4d2e9960619cd5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fab0d858027844f602e9e6103a66d97fdacc13ab",
        "patch": "@@ -29,11 +29,11 @@\n     get_datadir_path,\n     initialize_datadir,\n     p2p_port,\n-    set_node_times,\n     sync_blocks,\n     sync_mempools,\n )\n \n+\n class TestStatus(Enum):\n     PASSED = 1\n     FAILED = 2\n@@ -94,7 +94,6 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.network_thread = None\n-        self.mocktime = 0\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n         self.supports_cli = False\n         self.bind_to_localhost_only = True\n@@ -316,7 +315,6 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n                 timewait=self.rpc_timeout,\n                 bitcoind=binary[i],\n                 bitcoin_cli=self.options.bitcoincli,\n-                mocktime=self.mocktime,\n                 coverage_dir=self.options.coveragedir,\n                 cwd=self.options.tmpdir,\n                 extra_conf=extra_confs[i],\n@@ -468,7 +466,6 @@ def _initialize_chain(self):\n                     timewait=self.rpc_timeout,\n                     bitcoind=self.options.bitcoind,\n                     bitcoin_cli=self.options.bitcoincli,\n-                    mocktime=self.mocktime,\n                     coverage_dir=None,\n                     cwd=self.options.tmpdir,\n                 ))\n@@ -479,32 +476,18 @@ def _initialize_chain(self):\n             for node in self.nodes:\n                 node.wait_for_rpc_connection()\n \n-            # For backward compatibility of the python scripts with previous\n-            # versions of the cache, set mocktime to Jan 1,\n-            # 2014 + (201 * 10 * 60)\"\"\"\n-            self.mocktime = 1388534400 + (201 * 10 * 60)\n-\n             # Create a 200-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n-            # Note: To preserve compatibility with older versions of\n-            # initialize_chain, only 4 nodes will generate coins.\n-            #\n-            # blocks are created with timestamps 10 minutes apart\n-            # starting from 2010 minutes in the past\n-            block_time = self.mocktime - (201 * 10 * 60)\n             for i in range(2):\n                 for peer in range(4):\n                     for j in range(25):\n-                        set_node_times(self.nodes, block_time)\n                         self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n-                        block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n \n             # Shut them down, and clean up cache directories:\n             self.stop_nodes()\n             self.nodes = []\n-            self.mocktime = 0\n \n             def cache_path(n, *paths):\n                 return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)"
      },
      {
        "sha": "37fd2a8744cf7cd50c87be3a4b25b9dc86e164de",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fab0d858027844f602e9e6103a66d97fdacc13ab",
        "patch": "@@ -61,7 +61,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -90,8 +90,7 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n             \"-debug\",\n             \"-debugexclude=libevent\",\n             \"-debugexclude=leveldb\",\n-            \"-mocktime=\" + str(mocktime),\n-            \"-uacomment=testnode%d\" % i\n+            \"-uacomment=testnode%d\" % i,\n         ]\n \n         self.cli = TestNodeCLI(bitcoin_cli, self.datadir)"
      },
      {
        "sha": "7b749235e200e63f9791b68b58387955807bb67c",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=fab0d858027844f602e9e6103a66d97fdacc13ab",
        "patch": "@@ -7,17 +7,25 @@\n from test_framework.util import (\n     assert_equal,\n )\n+from test_framework.blocktools import (\n+    TIME_GENESIS_BLOCK,\n+)\n \n \n class CreateTxWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.setup_clean_chain = False\n+        self.setup_clean_chain = True\n         self.num_nodes = 1\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n+        self.log.info('Create some old blocks')\n+        self.nodes[0].setmocktime(TIME_GENESIS_BLOCK)\n+        self.nodes[0].generate(200)\n+        self.nodes[0].setmocktime(0)\n+\n         self.log.info('Check that we have some (old) blocks and that anti-fee-sniping is disabled')\n         assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)"
      }
    ]
  },
  {
    "sha": "1111aecbb58d6e37d430d477ac43f52811fd97d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTExYWVjYmI1OGQ2ZTM3ZDQzMGQ0NzdhYzQzZjUyODExZmQ5N2Q5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T18:56:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-19T19:22:13Z"
      },
      "message": "qa: Always refresh stale cache to be out of ibd",
      "tree": {
        "sha": "2ab2e86f5155279ca30701ca1eb03b510bcf347f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ab2e86f5155279ca30701ca1eb03b510bcf347f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1111aecbb58d6e37d430d477ac43f52811fd97d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcbFdlAAoJEM4rdWl+aaVIAnUL/it0qwQgPqsBpkmgT+26RzTq\nmf7loJ7KUAuK6mURHcjUgo2Vibo3110nyhVjAPn3ekCjsn247P+dxR5W74DbIvSu\nzJrAGqaDXRXMOZNMBs3raQxVroh9/Cx82cwBMNhe66gculhB+pJtt8ZV14/X7Ew6\nQbekkeB++UifwZtC1pnRWQLLpFKFLUaeFMlvIXw0knNSbumc2SaAXhS/1OzmpMWp\n2evJocCWiGnZAqCXECpWaDT/Bu2uo4iwr+Zbv23VYwWM0nJzSq58YQGxE5WPyqGi\nMl9N1jmeC7zMQHQ7o5gXkokLAzpnXMqiLVojmVKMAWwJ6q3JwjsJ3F2ss2AmjNj3\n+wIybffzgfuBGr/+GApvCxh94IA85R2iEBW30SmzNXstKkpETFfVomn+ebmsC2HD\n8k/bNnwdqRt/MlgTul4vhuHeylBOoFohdohs3wjOP9oicgWlQAibBo4bc+Be9POo\nBY+BH9BS7eg8Epvo+jUiQvIGyxr7vu3zArWbFbF6Gw==\n=88Ay\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ab2e86f5155279ca30701ca1eb03b510bcf347f\nparent fab0d858027844f602e9e6103a66d97fdacc13ab\nauthor MarcoFalke <falke.marco@gmail.com> 1549911379 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550604133 -0500\n\nqa: Always refresh stale cache to be out of ibd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111aecbb58d6e37d430d477ac43f52811fd97d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1111aecbb58d6e37d430d477ac43f52811fd97d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111aecbb58d6e37d430d477ac43f52811fd97d9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab0d858027844f602e9e6103a66d97fdacc13ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0d858027844f602e9e6103a66d97fdacc13ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0d858027844f602e9e6103a66d97fdacc13ab"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 25,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5453f0be3b938173393930aa2b611283de443141",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "patch": "@@ -41,9 +41,11 @@\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n+\n class ProxyTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.setup_clean_chain = True\n \n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n@@ -198,4 +200,3 @@ def networks_dict(d):\n \n if __name__ == '__main__':\n     ProxyTest().main()\n-"
      },
      {
        "sha": "efe720b9b10494a54809b4b9468e0b2ab64152fc",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "patch": "@@ -29,7 +29,6 @@\n     assert_raises_rpc_error,\n     bytes_to_hex_str,\n     hex_str_to_bytes,\n-    wait_until,\n )\n \n \n@@ -38,7 +37,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\n             '-txindex',\n-            '-reindex',  # Need reindex for txindex\n             '-acceptnonstdtxn=0',  # Try to mimic main-net\n         ]] * self.num_nodes\n \n@@ -56,7 +54,7 @@ def run_test(self):\n \n         self.log.info('Start with empty mempool, and 200 blocks')\n         self.mempool_size = 0\n-        wait_until(lambda: node.getblockcount() == 200)\n+        assert_equal(node.getblockcount(), 200)\n         assert_equal(node.getmempoolinfo()['size'], self.mempool_size)\n         coins = node.listunspent()\n "
      },
      {
        "sha": "24e1a21a281b8b9b69f4b32b449ffc9c0dfdf73f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "patch": "@@ -274,6 +274,17 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n         self.import_deterministic_coinbase_privkeys()\n+        if not self.setup_clean_chain:\n+            for n in self.nodes:\n+                assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n+            self.log.debug('Generate a block with current time to finalize the cache and assert we are out of IBD')\n+            block_hash = self.nodes[0].generate(1)[0]\n+            block = self.nodes[0].getblock(blockhash=block_hash, verbosity=0)\n+            for n in self.nodes:\n+                n.submitblock(block)\n+                chain_info = n.getblockchaininfo()\n+                assert_equal(chain_info[\"blocks\"], 200)\n+                assert_equal(chain_info[\"initialblockdownload\"], False)\n \n     def import_deterministic_coinbase_privkeys(self):\n         for n in self.nodes:\n@@ -433,7 +444,7 @@ def _start_logging(self):\n     def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n-        Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n+        Create a cache of a 199-block-long chain (with wallet) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n         assert self.num_nodes <= MAX_NODES\n@@ -476,15 +487,24 @@ def _initialize_chain(self):\n             for node in self.nodes:\n                 node.wait_for_rpc_connection()\n \n-            # Create a 200-block-long chain; each of the 4 first nodes\n+            # Create a 199-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n+            # The 4th node gets only 24 immature blocks so that the very last\n+            # block in the cache does not age too much (have an old tip age).\n+            # This is needed so that we are out of IBD when the test starts,\n+            # see the tip age check in IsInitialBlockDownload().\n             for i in range(2):\n                 for peer in range(4):\n                     for j in range(25):\n+                        if i == 1 and peer == 3 and j == 24:\n+                            break\n                         self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n \n+            for n in self.nodes:\n+                assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n+\n             # Shut them down, and clean up cache directories:\n             self.stop_nodes()\n             self.nodes = []"
      }
    ]
  },
  {
    "sha": "fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI1MjEwZDYyNjZkNTBhNmMyYmZkNmQ5NjA2MmJhY2IyYWUzOTNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T15:15:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-19T19:22:15Z"
      },
      "message": "qa: Fix wallet_txn_doublespend issue",
      "tree": {
        "sha": "26c7e632a78db9c7cb277cfccd16b19c35167072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26c7e632a78db9c7cb277cfccd16b19c35167072"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcbFdnAAoJEM4rdWl+aaVIgZUL/imgwRlPed2wVxqU3VMjCwkq\nk3Erxvum/twVcsEtiSXwAR3jLEv0kWrBz0rdOHjgCUP4sCDdnP86InS/2HTGSRyo\nXeXfEosakepRFl7ddUacEAnulnsmf1xIBFEHjFL4ss0jB4HQsMXhS4RGsQqvVqOf\ny671wKV1xwMMEZki01hwg6mXP/J2elAY38BoDB6sy9r+Xw465uoCMt7VC2aRXJ2V\n9Uh9s532TWJVQK7tLS5q7m1AU++D88LzWCxwbcJ/1D64YOTW0sKWnYDKayvAlnpK\nrTFrUlFAUuDgjzJ5i/KITtaqQ0TGzEFyCCz4bYQF2vvuqhPKGmDCywKoV1YYbbTx\nRy9AwYosVjuuC+k6st/VimCPCF2inaNRhHBUZv8PaKQjvgcHYDXihVVHcz16w889\nhGfrFRQPhIwejffFwUnlOoF7ml/DT3V+wT+xYt92DfIiV8ZtSS0b6xI+D47AEzyc\n/Q8D9Z36Dr18X6UehrQicRNwdJduMnalcTRs81TZAw==\n=ruVx\n-----END PGP SIGNATURE-----",
        "payload": "tree 26c7e632a78db9c7cb277cfccd16b19c35167072\nparent 1111aecbb58d6e37d430d477ac43f52811fd97d9\nauthor MarcoFalke <falke.marco@gmail.com> 1550243728 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550604135 -0500\n\nqa: Fix wallet_txn_doublespend issue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1111aecbb58d6e37d430d477ac43f52811fd97d9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f042adb7aa25c264d94006560ffae6326898d785",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
        "patch": "@@ -41,7 +41,6 @@\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n-\n class ProxyTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4"
      },
      {
        "sha": "9050e212474559af093ea4eed118dca25b0165a3",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
        "patch": "@@ -34,6 +34,14 @@ def setup_network(self):\n     def run_test(self):\n         # All nodes should start with 1,250 BTC:\n         starting_balance = 1250\n+\n+        # All nodes should be out of IBD.\n+        # If the nodes are not all out of IBD, that can interfere with\n+        # blockchain sync later in the test when nodes are connected, due to\n+        # timing issues.\n+        for n in self.nodes:\n+            assert n.getblockchaininfo()[\"initialblockdownload\"] == False\n+\n         for i in range(4):\n             assert_equal(self.nodes[i].getbalance(), starting_balance)\n             self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!"
      }
    ]
  },
  {
    "sha": "f9775a865597b3cc926ba3375fa692516c7415be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTc3NWE4NjU1OTdiM2NjOTI2YmEzMzc1ZmE2OTI1MTZjNzQxNWJl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-20T14:18:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-20T14:18:41Z"
      },
      "message": "Merge #15439: tests: remove byte.hex() to keep compatibility\n\n1a062b85f0 tests: remove byte.hex() to keep compatibility (Akio Nakamura)\n\nPull request description:\n\n  Use ```test_framework.util.bytes_to_hex_str()``` instead of ```bytes.hex()``` that new in Python 3.5 to support minimum version of Python(test).\n\n  ```test/functional/test_framework/wallet_util.py``` is also reported to have '\\.hex()' in #15397,\n  but it does not matter because it calls CScript.hex() defined in wallet_util.py.\n\nTree-SHA512: 1019212e965f0848d235fab4da11959dffa42e8adfcd41216c10795cfc63c804b5deb5a3317f25d29940b9dcf088ab76fe3fa80d2679dc19f5f482dc5bde3283",
      "tree": {
        "sha": "0b7d078fb4be9e8ee3e2cb718da0fd622072834d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b7d078fb4be9e8ee3e2cb718da0fd622072834d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9775a865597b3cc926ba3375fa692516c7415be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcbWHCAAoJENLqSFDnUosl+6MQAJxcHdrDJv28YspkPs8wDEuo\n0uP7CJ/EyZJ8zEdpIRnPeqxoNFwXUOBtaYGBP5MCp17hrAozw0VGVMVJ1Y11i1n5\nyJp73hAla3VytlYLCCgSHuyheNRotlQYuEXM6SwfgfdFIIrCOgNLsz4p8Jxqx/HI\npF5cYjvzDP3zLCCKJs0k29wOoAVGj2UtZzzTn6DDhDizjGT2kr2VMPLLJDGlAiat\nZq+LjTPskP5KrOb1gJyE/pXTLpEOT2V1+dulTM2sLll93AR/I+nxmC1RXJMYFJVD\nQsHD4LaB43WfE36VtCM8NuaCV18GDGR9TIsDqzvbpDEqWkZNf1n0s7dkI/sdcH2C\nJeTtHlupn+WtoyaaLmewkpCH5pFa3H5y3yyut3nxGBzpeJd8MjD4LLA9VV963r77\np6q433CV9r7z7Cpq/d+Wu9y554vwQr8+XFdYKa8tqBbTrC5V2TVHeVE6J/GE85Q8\nGyBd55UXNxZ6Xfz6JSMfF4RO0sklDatZ89Nu7Y+ZjVBfb2TdVe0hzssSAOt8sz/x\nxD0G63Sal8lwtOqfN2xfaAsKxyjwCFYS+js5Gwq/bYUabKa97oPS7DuxrhtjMlYy\nfXqpb6NFhLaUqj/w8Y1XUMgdaueKymzI+fGB7c6Nw8Ytz4sAAHW5skENWq+1SDVW\n2IEZykz0Y7/t/0GImk98\n=3c60\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGi9wlF2ZKpvoHxLIXLRIjgwQxohCyYSQam9gGzgOxOGCP/wEAiUcuJiumrd\nq22kZGWRUHEI8QRcbWHE8Ahdvuv1gjvC3gCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEMuaH7GihoCmDJ6s0HvzFiwI8QRcbWHE\n8AgsWLYMBEHb6QCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEOPbk74rZ6gxbesk6d9VfXEI8QRcbWHE8AhvBxVo\n1XJB2wCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BD0Gh4Y96QrVQUy9gKvsKSWCPAQH8Wj8hlxfQYg2vqr6Zjl\nDAjxBFxtYcXwCEbcUzB4xJhBAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0b7d078fb4be9e8ee3e2cb718da0fd622072834d\nparent 38429c4b622887f2c1db15a7826215477ca6868c\nparent 1a062b85f0f445d786c658a4f3687c07011810dc\nauthor MarcoFalke <falke.marco@gmail.com> 1550672308 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550672321 -0500\n\nMerge #15439: tests: remove byte.hex() to keep compatibility\n\n1a062b85f0 tests: remove byte.hex() to keep compatibility (Akio Nakamura)\n\nPull request description:\n\n  Use ```test_framework.util.bytes_to_hex_str()``` instead of ```bytes.hex()``` that new in Python 3.5 to support minimum version of Python(test).\n\n  ```test/functional/test_framework/wallet_util.py``` is also reported to have '\\.hex()' in #15397,\n  but it does not matter because it calls CScript.hex() defined in wallet_util.py.\n\nTree-SHA512: 1019212e965f0848d235fab4da11959dffa42e8adfcd41216c10795cfc63c804b5deb5a3317f25d29940b9dcf088ab76fe3fa80d2679dc19f5f482dc5bde3283\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9775a865597b3cc926ba3375fa692516c7415be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9775a865597b3cc926ba3375fa692516c7415be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9775a865597b3cc926ba3375fa692516c7415be/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38429c4b622887f2c1db15a7826215477ca6868c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38429c4b622887f2c1db15a7826215477ca6868c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38429c4b622887f2c1db15a7826215477ca6868c"
      },
      {
        "sha": "1a062b85f0f445d786c658a4f3687c07011810dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a062b85f0f445d786c658a4f3687c07011810dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a062b85f0f445d786c658a4f3687c07011810dc"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d0bef48cb600ed25970be4381511dae1368ff1d9",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9775a865597b3cc926ba3375fa692516c7415be/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9775a865597b3cc926ba3375fa692516c7415be/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=f9775a865597b3cc926ba3375fa692516c7415be",
        "patch": "@@ -184,7 +184,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         self.log.info('submitheader tests')\n         assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='xx' * BLOCK_HEADER_SIZE))\n         assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='ff' * (BLOCK_HEADER_SIZE-2)))\n-        assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata=super(CBlock, bad_block).serialize().hex()))\n+        assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata=b2x(super(CBlock, bad_block).serialize())))\n \n         block.nTime += 1\n         block.solve()"
      },
      {
        "sha": "a0a35bf43dec92af4f090061a734f3d6125f1c23",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9775a865597b3cc926ba3375fa692516c7415be/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9775a865597b3cc926ba3375fa692516c7415be/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=f9775a865597b3cc926ba3375fa692516c7415be",
        "patch": "@@ -8,6 +8,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    bytes_to_hex_str as b2x,\n     connect_nodes,\n     disconnect_nodes,\n     sync_blocks,\n@@ -81,7 +82,7 @@ def run_test(self):\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_tx.serialize().hex(), None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(b2x(clone_tx.serialize()), None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      }
    ]
  },
  {
    "sha": "fa05626ca7a0fe896ac554c79eaea4c36acdf861",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA1NjI2Y2E3YTBmZTg5NmFjNTU0Yzc5ZWFlYTRjMzZhY2RmODYx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T01:16:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-20T18:32:17Z"
      },
      "message": "rpc: Add RPCHelpMan::IsValidNumArgs()",
      "tree": {
        "sha": "7aa3908300e4233d608666a05ec48c232432d926",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7aa3908300e4233d608666a05ec48c232432d926"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa05626ca7a0fe896ac554c79eaea4c36acdf861",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcbZ0xAAoJEM4rdWl+aaVI7pMMAInEBBotv6pMfSpAvIHIOCDI\nqrBGX4jgOKelE5UwIiQje7fucCPjEcH7PpG03VMUS6r9U7fnYSw1vnC4PK+qrk55\nYqfkaj9X4E2jgxN1ymJXZSAdQGEvaWXtFuu1T3wj3F32HE9dhNOKew4KOE9ml4o/\nAEwGA7ncNs18cVVSb2z5+p4a4k15AnKs7Zlb+Ka+VS0bDW0BHPndt9cUlpO5x8j6\ndMZaYQ7iS2ek0UtOcgdRNRTy9knCPqo6K1jd2wKv+Bzj2Jlzb8cBF6llSuzkuLj2\nrRxkgoEH5/0oWIREPC81sxdwt5GhXTW15lMzjXzsaKyZWvHOmJHUK7I9R8AUm0Lz\n8IHvH0zj2/ljOBVwhBWmyRqfbUMfGs0Ye2ZmYDDP10IcpefnCN/SOdB4V8N2fCTY\nssbmUTIdwWPUFnSMzhSyA0VvLiPma7TPezhisEgdgxS1UcXDbHWK68E2eU1GYH9G\nXpluB6xqi79zz6B90QBJJu2pWd6KY9cYmaaEDh3BOA==\n=6e0N\n-----END PGP SIGNATURE-----",
        "payload": "tree 7aa3908300e4233d608666a05ec48c232432d926\nparent f9775a865597b3cc926ba3375fa692516c7415be\nauthor MarcoFalke <falke.marco@gmail.com> 1550020589 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550687537 -0500\n\nrpc: Add RPCHelpMan::IsValidNumArgs()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa05626ca7a0fe896ac554c79eaea4c36acdf861",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa05626ca7a0fe896ac554c79eaea4c36acdf861",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa05626ca7a0fe896ac554c79eaea4c36acdf861/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9775a865597b3cc926ba3375fa692516c7415be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9775a865597b3cc926ba3375fa692516c7415be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9775a865597b3cc926ba3375fa692516c7415be"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 28,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e37af953fadca1e8a6567af5abb980d8b96fb524",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa05626ca7a0fe896ac554c79eaea4c36acdf861/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa05626ca7a0fe896ac554c79eaea4c36acdf861/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa05626ca7a0fe896ac554c79eaea4c36acdf861",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -315,6 +315,17 @@ std::string RPCExamples::ToDescriptionString() const\n     return m_examples.empty() ? m_examples : \"\\nExamples:\\n\" + m_examples;\n }\n \n+bool RPCHelpMan::IsValidNumArgs(size_t num_args) const\n+{\n+    size_t num_required_args = 0;\n+    for (size_t n = m_args.size(); n > 0; --n) {\n+        if (!m_args.at(n - 1).IsOptional()) {\n+            num_required_args = n;\n+            break;\n+        }\n+    }\n+    return num_required_args <= num_args && num_args <= m_args.size();\n+}\n std::string RPCHelpMan::ToString() const\n {\n     std::string ret;\n@@ -323,12 +334,7 @@ std::string RPCHelpMan::ToString() const\n     ret += m_name;\n     bool was_optional{false};\n     for (const auto& arg : m_args) {\n-        bool optional;\n-        if (arg.m_fallback.which() == 1) {\n-            optional = true;\n-        } else {\n-            optional = RPCArg::Optional::NO != boost::get<RPCArg::Optional>(arg.m_fallback);\n-        }\n+        const bool optional = arg.IsOptional();\n         ret += \" \";\n         if (optional) {\n             if (!was_optional) ret += \"( \";\n@@ -370,6 +376,15 @@ std::string RPCHelpMan::ToString() const\n     return ret;\n }\n \n+bool RPCArg::IsOptional() const\n+{\n+    if (m_fallback.which() == 1) {\n+        return true;\n+    } else {\n+        return RPCArg::Optional::NO != boost::get<RPCArg::Optional>(m_fallback);\n+    }\n+}\n+\n std::string RPCArg::ToDescriptionString() const\n {\n     std::string ret;"
      },
      {
        "sha": "7b8dd5a9ecffd6ef376ac5e1c4104ed3dd721ef7",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa05626ca7a0fe896ac554c79eaea4c36acdf861/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa05626ca7a0fe896ac554c79eaea4c36acdf861/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fa05626ca7a0fe896ac554c79eaea4c36acdf861",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -53,7 +53,7 @@ struct RPCArg {\n         /** Required arg */\n         NO,\n         /**\n-         * Optinal arg that is a named argument and has a default value of\n+         * Optional arg that is a named argument and has a default value of\n          * `null`. When possible, the default value should be specified.\n          */\n         OMITTED_NAMED_ARG,\n@@ -110,6 +110,8 @@ struct RPCArg {\n         assert(type == Type::ARR || type == Type::OBJ);\n     }\n \n+    bool IsOptional() const;\n+\n     /**\n      * Return the type string of the argument.\n      * Set oneline to allow it to be overridden by a custom oneline type string (m_oneline_description).\n@@ -185,6 +187,8 @@ class RPCHelpMan\n     RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples);\n \n     std::string ToString() const;\n+    /** If the supplied number of args is neither too small nor too high */\n+    bool IsValidNumArgs(size_t num_args) const;\n \n private:\n     const std::string m_name;"
      }
    ]
  },
  {
    "sha": "fa4ce7038d444defe0b98a30097174c278054a33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRjZTcwMzhkNDQ0ZGVmZTBiOThhMzAwOTcxNzRjMjc4MDU0YTMz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-13T21:51:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-20T18:34:16Z"
      },
      "message": "rpc: Actually throw help when passed invalid number of params",
      "tree": {
        "sha": "48d5aaa962b2bf2d9d7365fd9276a3b5821fadb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48d5aaa962b2bf2d9d7365fd9276a3b5821fadb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4ce7038d444defe0b98a30097174c278054a33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcbZ2oAAoJEM4rdWl+aaVIfB4MAMfWo7LQbn1jUON/9mNHvZHj\nUZDwQ12sNQGoGeUrrventAKCWgvWcMZ8q3bCPfCktNQdIoyAYVW7eJJ+gUUwP0Xh\nDWb0uLj+Z4ZaYwmzmDcH5KuiQbYwwO6XXRXB3JYttn8MzcSKNl8WMb0UgE0MGarK\nGPVwVFA2zVRsRVf638hbIsn6WgJ9X/ECh1Qna2AOsP/XsA6KQfLHClboubE4mOSq\nfMPQp36oSQwYwUJUl2ULW+Hu1Ea2rbSAOLqB+KzvQ1+/INdsrn6IdpfYR6aonzU0\ndBeUhcMHk/f/MT1pWtQqnraiJJJmjU4jtIWpILeOns+TuApq/TC2GTuCpx7RnSua\nZv0k+OcZr4R5KjSQ9nXcwQYCCpTaTD3i/yf9bc2FINVXuWlu3HiM2AvKbw/mrcQC\n2Zj/flj7g61IN3GQxkJg3DR7zLq0HCXmEyBm5NiMbZfIIIAhnNzJuzsWMG1S+m4F\nl6KT1m0ZrZxPtaQwwaLwOqMlo1W+FSk0+xAbKHooew==\n=p86Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 48d5aaa962b2bf2d9d7365fd9276a3b5821fadb9\nparent fa05626ca7a0fe896ac554c79eaea4c36acdf861\nauthor MarcoFalke <falke.marco@gmail.com> 1550094687 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550687656 -0500\n\nrpc: Actually throw help when passed invalid number of params\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4ce7038d444defe0b98a30097174c278054a33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4ce7038d444defe0b98a30097174c278054a33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4ce7038d444defe0b98a30097174c278054a33/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa05626ca7a0fe896ac554c79eaea4c36acdf861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa05626ca7a0fe896ac554c79eaea4c36acdf861",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa05626ca7a0fe896ac554c79eaea4c36acdf861"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 18,
      "deletions": 13
    },
    "files": [
      {
        "sha": "c73a8d48cfa6d31bf74bc6baf9886448dfd4ad5b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4ce7038d444defe0b98a30097174c278054a33/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4ce7038d444defe0b98a30097174c278054a33/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa4ce7038d444defe0b98a30097174c278054a33",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1778,9 +1778,7 @@ static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t)\n \n static UniValue getblockstats(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4) {\n-        throw std::runtime_error(\n-            RPCHelpMan{\"getblockstats\",\n+    const RPCHelpMan help{\"getblockstats\",\n                 \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n                 \"It won't work for some heights with pruning.\\n\"\n                 \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\",\n@@ -1836,7 +1834,9 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n             + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n                 },\n-            }.ToString());\n+    };\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n     }\n \n     LOCK(cs_main);"
      },
      {
        "sha": "c7b3478f440c148998d3802b9292991ed1313e18",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4ce7038d444defe0b98a30097174c278054a33/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4ce7038d444defe0b98a30097174c278054a33/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa4ce7038d444defe0b98a30097174c278054a33",
        "patch": "@@ -523,13 +523,7 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n \n static UniValue setban(const JSONRPCRequest& request)\n {\n-    std::string strCommand;\n-    if (!request.params[1].isNull())\n-        strCommand = request.params[1].get_str();\n-    if (request.fHelp || request.params.size() < 2 ||\n-        (strCommand != \"add\" && strCommand != \"remove\"))\n-        throw std::runtime_error(\n-            RPCHelpMan{\"setban\",\n+    const RPCHelpMan help{\"setban\",\n                 \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\",\n                 {\n                     {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n@@ -543,7 +537,13 @@ static UniValue setban(const JSONRPCRequest& request)\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n                             + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\", 86400\")\n                 },\n-            }.ToString());\n+    };\n+    std::string strCommand;\n+    if (!request.params[1].isNull())\n+        strCommand = request.params[1].get_str();\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()) || (strCommand != \"add\" && strCommand != \"remove\")) {\n+        throw std::runtime_error(help.ToString());\n+    }\n     if (!g_banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }"
      },
      {
        "sha": "feba16f1b3847bee66bbdd8d7a4c2ae9179f8dfe",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4ce7038d444defe0b98a30097174c278054a33/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4ce7038d444defe0b98a30097174c278054a33/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=fa4ce7038d444defe0b98a30097174c278054a33",
        "patch": "@@ -178,5 +178,10 @@ def run_test(self):\n         assert_raises_rpc_error(-5, 'Block not found', self.nodes[0].getblockstats,\n                                 hash_or_height='000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f')\n \n+        # Invalid number of args\n+        assert_raises_rpc_error(-1, 'getblockstats hash_or_height ( stats )', self.nodes[0].getblockstats, '00', 1, 2)\n+        assert_raises_rpc_error(-1, 'getblockstats hash_or_height ( stats )', self.nodes[0].getblockstats)\n+\n+\n if __name__ == '__main__':\n     GetblockstatsTest().main()"
      }
    ]
  },
  {
    "sha": "3e1ca1348cbd0d61143585e56eb75950c6028086",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTFjYTEzNDhjYmQwZDYxMTQzNTg1ZTU2ZWI3NTk1MGM2MDI4MDg2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-21T08:06:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-21T08:23:10Z"
      },
      "message": "Merge #15278: Improve PID file error handling\n\n3782075a5fd4ad0c15a6119e8cdaf136898f679e Move all PID file stuff to init.cpp (Hennadii Stepanov)\n561e375c73a37934fe77a519762d81edf7a3325c Make PID file creating errors fatal (Hennadii Stepanov)\n745a2ace18ce857bc712d7e66c8bad7c082c07e2 Improve PID file removing errors logging (Hennadii Stepanov)\n\nPull request description:\n\n  Digging into #15240 the lack of the proper logging has been discovered.\n  Fixed by this PR.\n\n  UPDATE (inspired by @laanwj's [comment](https://github.com/bitcoin/bitcoin/pull/15278#discussion_r252641810)):\n  Not being able to create the PID file is fatal now.\n\n  Output of `bitcoind`:\n\n  ```\n  $ src/bitcoind -pid=/run/bitcoind/bitcoind.pid\n  2019-02-01T23:20:10Z Bitcoin Core version v0.17.99.0-561e375c7 (release build)\n  2019-02-01T23:20:10Z Assuming ancestors of block 0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75 have valid signatures.\n  2019-02-01T23:20:10Z Setting nMinimumChainWork=00000000000000000000000000000000000000000000007dbe94253893cbd463\n  2019-02-01T23:20:10Z Using the 'sse4(1way),sse41(4way),avx2(8way)' SHA256 implementation\n  2019-02-01T23:20:10Z Using RdRand as an additional entropy source\n  2019-02-01T23:20:11Z Error: Unable to create the PID file '/run/bitcoind/bitcoind.pid': No such file or directory\n  Error: Unable to create the PID file '/run/bitcoind/bitcoind.pid': No such file or directory\n  2019-02-01T23:20:11Z Shutdown: In progress...\n  2019-02-01T23:20:11Z Shutdown: Unable to remove PID file: File does not exist\n  2019-02-01T23:20:11Z Shutdown: done\n  ```\n\n  Output of `bitcoin-qt`:\n  ![screenshot from 2019-02-02 01-19-05](https://user-images.githubusercontent.com/32963518/52154886-9349b600-2688-11e9-8128-470f16790305.png)\n\n  **Notes for reviewers**\n  1. `CreatePidFile()` has been moved from `util/system.cpp` to `init.cpp` for the following reasons:\n  - to get the ability to use `InitError()`\n  - now `init.cpp` contains code of both creating PID file and removing it\n\n  2. Regarding 0.18 release process: this PR modifies 1 string and introduces 2 new ones.\n\nTree-SHA512: ac07d0f800e61ec759e427d0afc0ca43d67f232e977662253963afdd0a220d34b871050f58149fc9fabd427bfc8e0d3f6a6032f2a38f30ad366fc0d074b0f2b3",
      "tree": {
        "sha": "1d77b32f6ca3ef8548bbe394097fd696d0b9460b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d77b32f6ca3ef8548bbe394097fd696d0b9460b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e1ca1348cbd0d61143585e56eb75950c6028086",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxuX+4ACgkQHkrtYphs\n0l1fLwgAosOgaRLWOyfot5G7B1R1hjwskaMAgmHCo4SzmS5pDfKp9dwn+7qqcg20\nf0MU8eDqIzsph8tRnpIitZbKZxNSgtZ5XgczgMIwbEj9XT9qG1RRkHp8YmgMYxeW\nkwpzDoOfI1oWDpxsM0wIy/B1W0lNEjbtp52/9Sz14vbNyaM4fdERxv1214pWzGk2\nVT6lvsRNusBd4avJsGbDCd9vWSEh/AL9ns7rzb+0NDlsWjWMBeNViHwOz2h/KPBA\ngZZV8d1FDiytdtx7ZSHl/nRPdOnF6XGsd3D6KJgaqHp464iK8eR8Dk9Z9iEpShKr\nk0dyxR4bwYpxtYjSuKKOurrxXvOBQQ==\n=cKgO\n-----END PGP SIGNATURE-----",
        "payload": "tree 1d77b32f6ca3ef8548bbe394097fd696d0b9460b\nparent f9775a865597b3cc926ba3375fa692516c7415be\nparent 3782075a5fd4ad0c15a6119e8cdaf136898f679e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550736365 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550737390 +0100\n\nMerge #15278: Improve PID file error handling\n\n3782075a5fd4ad0c15a6119e8cdaf136898f679e Move all PID file stuff to init.cpp (Hennadii Stepanov)\n561e375c73a37934fe77a519762d81edf7a3325c Make PID file creating errors fatal (Hennadii Stepanov)\n745a2ace18ce857bc712d7e66c8bad7c082c07e2 Improve PID file removing errors logging (Hennadii Stepanov)\n\nPull request description:\n\n  Digging into #15240 the lack of the proper logging has been discovered.\n  Fixed by this PR.\n\n  UPDATE (inspired by @laanwj's [comment](https://github.com/bitcoin/bitcoin/pull/15278#discussion_r252641810)):\n  Not being able to create the PID file is fatal now.\n\n  Output of `bitcoind`:\n\n  ```\n  $ src/bitcoind -pid=/run/bitcoind/bitcoind.pid\n  2019-02-01T23:20:10Z Bitcoin Core version v0.17.99.0-561e375c7 (release build)\n  2019-02-01T23:20:10Z Assuming ancestors of block 0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75 have valid signatures.\n  2019-02-01T23:20:10Z Setting nMinimumChainWork=00000000000000000000000000000000000000000000007dbe94253893cbd463\n  2019-02-01T23:20:10Z Using the 'sse4(1way),sse41(4way),avx2(8way)' SHA256 implementation\n  2019-02-01T23:20:10Z Using RdRand as an additional entropy source\n  2019-02-01T23:20:11Z Error: Unable to create the PID file '/run/bitcoind/bitcoind.pid': No such file or directory\n  Error: Unable to create the PID file '/run/bitcoind/bitcoind.pid': No such file or directory\n  2019-02-01T23:20:11Z Shutdown: In progress...\n  2019-02-01T23:20:11Z Shutdown: Unable to remove PID file: File does not exist\n  2019-02-01T23:20:11Z Shutdown: done\n  ```\n\n  Output of `bitcoin-qt`:\n  ![screenshot from 2019-02-02 01-19-05](https://user-images.githubusercontent.com/32963518/52154886-9349b600-2688-11e9-8128-470f16790305.png)\n\n  **Notes for reviewers**\n  1. `CreatePidFile()` has been moved from `util/system.cpp` to `init.cpp` for the following reasons:\n  - to get the ability to use `InitError()`\n  - now `init.cpp` contains code of both creating PID file and removing it\n\n  2. Regarding 0.18 release process: this PR modifies 1 string and introduces 2 new ones.\n\nTree-SHA512: ac07d0f800e61ec759e427d0afc0ca43d67f232e977662253963afdd0a220d34b871050f58149fc9fabd427bfc8e0d3f6a6032f2a38f30ad366fc0d074b0f2b3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e1ca1348cbd0d61143585e56eb75950c6028086",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e1ca1348cbd0d61143585e56eb75950c6028086",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e1ca1348cbd0d61143585e56eb75950c6028086/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9775a865597b3cc926ba3375fa692516c7415be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9775a865597b3cc926ba3375fa692516c7415be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9775a865597b3cc926ba3375fa692516c7415be"
      },
      {
        "sha": "3782075a5fd4ad0c15a6119e8cdaf136898f679e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3782075a5fd4ad0c15a6119e8cdaf136898f679e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3782075a5fd4ad0c15a6119e8cdaf136898f679e"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 35,
      "deletions": 27
    },
    "files": [
      {
        "sha": "caab4a5674d8654f26662af783793fd91374e859",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 3,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e1ca1348cbd0d61143585e56eb75950c6028086/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e1ca1348cbd0d61143585e56eb75950c6028086/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3e1ca1348cbd0d61143585e56eb75950c6028086",
        "patch": "@@ -53,6 +53,8 @@\n #include <stdio.h>\n \n #ifndef WIN32\n+#include <attributes.h>\n+#include <cerrno>\n #include <signal.h>\n #include <sys/stat.h>\n #endif\n@@ -92,6 +94,30 @@ std::unique_ptr<BanMan> g_banman;\n \n static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n \n+/**\n+ * The PID file facilities.\n+ */\n+#ifndef WIN32\n+static const char* BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n+\n+static fs::path GetPidFile()\n+{\n+    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n+}\n+\n+NODISCARD static bool CreatePidFile()\n+{\n+    FILE* file = fsbridge::fopen(GetPidFile(), \"w\");\n+    if (file) {\n+        fprintf(file, \"%d\\n\", getpid());\n+        fclose(file);\n+        return true;\n+    } else {\n+        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n+    }\n+}\n+#endif\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Shutdown\n@@ -262,9 +288,11 @@ void Shutdown(InitInterfaces& interfaces)\n \n #ifndef WIN32\n     try {\n-        fs::remove(GetPidFile());\n+        if (!fs::remove(GetPidFile())) {\n+            LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\n+        }\n     } catch (const fs::filesystem_error& e) {\n-        LogPrintf(\"%s: Unable to remove pidfile: %s\\n\", __func__, e.what());\n+        LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, e.what());\n     }\n #endif\n     interfaces.chain_clients.clear();\n@@ -1201,7 +1229,10 @@ bool AppInitMain(InitInterfaces& interfaces)\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n #ifndef WIN32\n-    CreatePidFile(GetPidFile(), getpid());\n+    if (!CreatePidFile()) {\n+        // Detailed error printed inside CreatePidFile().\n+        return false;\n+    }\n #endif\n     if (LogInstance().m_print_to_file) {\n         if (gArgs.GetBoolArg(\"-shrinkdebugfile\", LogInstance().DefaultShrinkDebugFile())) {"
      },
      {
        "sha": "6e82de743af78f0195bc7cf67650ee486fd545ca",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e1ca1348cbd0d61143585e56eb75950c6028086/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e1ca1348cbd0d61143585e56eb75950c6028086/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=3e1ca1348cbd0d61143585e56eb75950c6028086",
        "patch": "@@ -74,7 +74,6 @@\n const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n-const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n@@ -965,23 +964,6 @@ std::string ArgsManager::GetChainName() const\n     return CBaseChainParams::MAIN;\n }\n \n-#ifndef WIN32\n-fs::path GetPidFile()\n-{\n-    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n-}\n-\n-void CreatePidFile(const fs::path &path, pid_t pid)\n-{\n-    FILE* file = fsbridge::fopen(path, \"w\");\n-    if (file)\n-    {\n-        fprintf(file, \"%d\\n\", pid);\n-        fclose(file);\n-    }\n-}\n-#endif\n-\n bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32"
      },
      {
        "sha": "69ae11d1eddc5eb300af149d5e0995a9f39c99fb",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e1ca1348cbd0d61143585e56eb75950c6028086/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e1ca1348cbd0d61143585e56eb75950c6028086/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=3e1ca1348cbd0d61143585e56eb75950c6028086",
        "patch": "@@ -40,7 +40,6 @@\n int64_t GetStartupTime();\n \n extern const char * const BITCOIN_CONF_FILENAME;\n-extern const char * const BITCOIN_PID_FILENAME;\n \n /** Translate a message to the native language of the user. */\n const extern std::function<std::string(const char*)> G_TRANSLATION_FUN;\n@@ -86,10 +85,6 @@ const fs::path &GetBlocksDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n fs::path GetConfigFile(const std::string& confPath);\n-#ifndef WIN32\n-fs::path GetPidFile();\n-void CreatePidFile(const fs::path &path, pid_t pid);\n-#endif\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif"
      },
      {
        "sha": "2b6c78c2c841b7cab90ce11b831ea1051118029e",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e1ca1348cbd0d61143585e56eb75950c6028086/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e1ca1348cbd0d61143585e56eb75950c6028086/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=3e1ca1348cbd0d61143585e56eb75950c6028086",
        "patch": "@@ -8,6 +8,7 @@ KNOWN_VIOLATIONS=(\n     \"src/dbwrapper.cpp:.*vsnprintf\"\n     \"src/httprpc.cpp.*trim\"\n     \"src/init.cpp:.*atoi\"\n+    \"src/init.cpp:.*fprintf\"\n     \"src/qt/rpcconsole.cpp:.*atoi\"\n     \"src/rest.cpp:.*strtol\"\n     \"src/test/dbwrapper_tests.cpp:.*snprintf\"\n@@ -18,7 +19,6 @@ KNOWN_VIOLATIONS=(\n     \"src/util/strencodings.cpp:.*strtoul\"\n     \"src/util/strencodings.h:.*atoi\"\n     \"src/util/system.cpp:.*atoi\"\n-    \"src/util/system.cpp:.*fprintf\"\n )\n \n REGEXP_IGNORE_EXTERNAL_DEPENDENCIES=\"^src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\""
      }
    ]
  },
  {
    "sha": "4d126f289c7d457d217065d69acd1de8712b165a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDEyNmYyODljN2Q0NTdkMjE3MDY1ZDY5YWNkMWRlODcxMmIxNjVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-21T08:44:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-21T08:44:24Z"
      },
      "message": "Merge #15416: doc: update FreeBSD build guide for 12.0\n\n901baf2c9ef31e68137d5bd8eb5a2b689a71f818 doc: update FreeBSD build guide for 12.0 (fanquake)\n\nPull request description:\n\n  Updated the build guide for FreeBSD 12.0 (also bought more inline with the other `BSD` guides.\n\n  As of FreeBSD 12.0, an ancient GDB is [no longer installed by default](https://www.freebsd.org/releases/12.0R/relnotes.html). Instead, a modern version is available from [`devel/gdb`](https://www.freshports.org/devel/gdb), which is currently version 8.2.x. A recent `LLDB` is also available.\n\nTree-SHA512: c9034348362c2c3d20ee26f6fd66bc447b448dcee767fc9e40131dce26fb54d059fe3b0577c5984931069580d5326eaa0ccf97389458edd3dba02b5ca62f2236",
      "tree": {
        "sha": "1cac2d85e0875dc95012795959a03bd8ba6cc850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cac2d85e0875dc95012795959a03bd8ba6cc850"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d126f289c7d457d217065d69acd1de8712b165a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxuZOgACgkQHkrtYphs\n0l1f4wgAikcTYAtJbB3jiRlLneT7hRw8kJT4M28rk7wLCsRHOoEs5TJ5WnGtz/5O\nFI05vl47wsc+Ta1lQK4SgyJlmy8O6C1IY/47KhcM6vKe7NDfh2e/mzDULraXs2w4\nVcs9TLUq4q7d/RqtJH5wUR5P5Y7KFqXIDomX8dvt4lSlCQE0pWxtTtlgGDjACUXv\nPRYOwsrtjotu1MgW9feJhayNAxXespVaEBh5hjAbLnbohzgwrTqImZApNjk2xUcZ\nDFVZNH5a53uMRuthBirLiV3mO0+1Gi0tMZJefgMPPZ4WFTkaHfstdpwKQB4wwDJD\nvuh3sZG5XuKVT6mHFNik9bjip2Roug==\n=VuH3\n-----END PGP SIGNATURE-----",
        "payload": "tree 1cac2d85e0875dc95012795959a03bd8ba6cc850\nparent 3e1ca1348cbd0d61143585e56eb75950c6028086\nparent 901baf2c9ef31e68137d5bd8eb5a2b689a71f818\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550738659 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550738664 +0100\n\nMerge #15416: doc: update FreeBSD build guide for 12.0\n\n901baf2c9ef31e68137d5bd8eb5a2b689a71f818 doc: update FreeBSD build guide for 12.0 (fanquake)\n\nPull request description:\n\n  Updated the build guide for FreeBSD 12.0 (also bought more inline with the other `BSD` guides.\n\n  As of FreeBSD 12.0, an ancient GDB is [no longer installed by default](https://www.freebsd.org/releases/12.0R/relnotes.html). Instead, a modern version is available from [`devel/gdb`](https://www.freshports.org/devel/gdb), which is currently version 8.2.x. A recent `LLDB` is also available.\n\nTree-SHA512: c9034348362c2c3d20ee26f6fd66bc447b448dcee767fc9e40131dce26fb54d059fe3b0577c5984931069580d5326eaa0ccf97389458edd3dba02b5ca62f2236\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d126f289c7d457d217065d69acd1de8712b165a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d126f289c7d457d217065d69acd1de8712b165a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d126f289c7d457d217065d69acd1de8712b165a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e1ca1348cbd0d61143585e56eb75950c6028086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e1ca1348cbd0d61143585e56eb75950c6028086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e1ca1348cbd0d61143585e56eb75950c6028086"
      },
      {
        "sha": "901baf2c9ef31e68137d5bd8eb5a2b689a71f818",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/901baf2c9ef31e68137d5bd8eb5a2b689a71f818",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/901baf2c9ef31e68137d5bd8eb5a2b689a71f818"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 26,
      "deletions": 30
    },
    "files": [
      {
        "sha": "d22b6e838342b6859661f8ad6bbd0d6816d36095",
        "filename": "doc/build-freebsd.md",
        "status": "modified",
        "additions": 26,
        "deletions": 30,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d126f289c7d457d217065d69acd1de8712b165a/doc/build-freebsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d126f289c7d457d217065d69acd1de8712b165a/doc/build-freebsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-freebsd.md?ref=4d126f289c7d457d217065d69acd1de8712b165a",
        "patch": "@@ -1,6 +1,6 @@\n FreeBSD build guide\n ======================\n-(updated for FreeBSD 11.1)\n+(updated for FreeBSD 12.0)\n \n This guide describes how to build bitcoind and command-line utilities on FreeBSD.\n \n@@ -10,55 +10,51 @@ This guide does not contain instructions for building the GUI.\n \n You will need the following dependencies, which can be installed as root via pkg:\n \n-```\n+```shell\n pkg install autoconf automake boost-libs git gmake libevent libtool openssl pkgconf\n+\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n In order to run the test suite (recommended), you will need to have Python 3 installed:\n \n-```\n+```shell\n pkg install python3\n ```\n \n-For the wallet (optional):\n-```\n-./contrib/install_db4.sh `pwd`\n-export BDB_PREFIX=\"$PWD/db4\"\n-```\n-\n See [dependencies.md](dependencies.md) for a complete overview.\n \n-Download the source code:\n-```\n-git clone https://github.com/bitcoin/bitcoin\n+### Building BerkeleyDB\n+\n+BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n+`--disable-wallet` to `./configure` and skip to the next section.\n+\n+```shell\n+./contrib/install_db4.sh `pwd`\n+export BDB_PREFIX=\"$PWD/db4\"\n ```\n \n ## Building Bitcoin Core\n \n **Important**: Use `gmake` (the non-GNU `make` will exit with an error):\n \n-```\n+With wallet:\n+```shell\n ./autogen.sh\n-\n-./configure                  # to build with wallet OR\n-./configure --disable-wallet # to build without wallet\n+./configure --with-gui=no \\\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n-followed by either:\n-\n-```\n-gmake\n+Without wallet:\n+```shell\n+./autogen.sh\n+./configure --with-gui=no --disable-wallet\n ```\n \n-to build without testing, or\n+followed by:\n \n+```shell\n+gmake # use -jX here for parallelism\n+gmake check # Run tests if Python 3 is available\n ```\n-gmake check\n-```\n-\n-to also run the test suite (recommended, if Python 3 is installed).\n-\n-*Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement).\n-It is not suitable for debugging a multi-threaded C++ program, not even for getting backtraces. Please install the package `gdb` and\n-use the versioned gdb command (e.g. `gdb7111`).\n-"
      }
    ]
  },
  {
    "sha": "b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODUzNzQ2ZDRhOGE4YWMwZDNmNTM1NTM4ZTJhYzRlM2NjMTRlMWM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-21T08:56:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-21T08:59:15Z"
      },
      "message": "Merge #15222: docs: Add info about factors that affect dependency list\n\n55e05a82cdc347400e4e6f8df2b0aba690b835ea Added some factors that affect the dependency list (Martin Erlandsson)\n\nPull request description:\n\n  To simplify build instructions, the librsvg formula should be moved to the main `brew install ...` command, in my opinion.\n  It is not a big problem to install a single extra formula, and it will only be unused for some users.\n\n  An additional reason for this change is that I would like to add a comment (in a future PR) about making sure you have the latest version of all deps (in the case of preexisting formulae). That comment can be authored more clearly if this simplification PR is merged.\n\nTree-SHA512: e63284a4e0584f071a920f6b8ac46694de38e7b1df1e0dc2b00262c1487a2f2851fae721e8f4907a4aad0335f287e881974df6f9d05fe9b26f0ba71033dce145",
      "tree": {
        "sha": "3ab0fd0eed200bf4a8cc956a008e3f4bab0dab5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ab0fd0eed200bf4a8cc956a008e3f4bab0dab5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxuaGMACgkQHkrtYphs\n0l1H8Af9EU4cklun2zpC+GQUudBWEkASG2e1jF6S//zWKAJNbBDCpDMzkUOHzzCM\nHUMlciH8wQKOFvSQD0t2VtRejSJoveygIFr1UkxZSBIZvgpArp7SLeiOS2K99+ny\nGBaVwdrc0L8Mu0E28jHnFEFm9pSvADSodN+uBadrd9ZipmKzKFoOCZh33/l31EBM\nULX0srApxy2x0j3z4bRNSFJfzAXK3LnmJ1vJScvTumqlP/2I+z4vYSBPJqckEzr3\nLP+13eQWAWXoO2LU8zygzH67MUvV+1iiOqLzRxO/a7jmWTCDi9MKKrgjNXYu8OwE\nduEBeW6KMRjmKabwxp+WgbH8nPAUjg==\n=CLyN\n-----END PGP SIGNATURE-----",
        "payload": "tree 3ab0fd0eed200bf4a8cc956a008e3f4bab0dab5a\nparent 4d126f289c7d457d217065d69acd1de8712b165a\nparent 55e05a82cdc347400e4e6f8df2b0aba690b835ea\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550739393 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550739555 +0100\n\nMerge #15222: docs: Add info about factors that affect dependency list\n\n55e05a82cdc347400e4e6f8df2b0aba690b835ea Added some factors that affect the dependency list (Martin Erlandsson)\n\nPull request description:\n\n  To simplify build instructions, the librsvg formula should be moved to the main `brew install ...` command, in my opinion.\n  It is not a big problem to install a single extra formula, and it will only be unused for some users.\n\n  An additional reason for this change is that I would like to add a comment (in a future PR) about making sure you have the latest version of all deps (in the case of preexisting formulae). That comment can be authored more clearly if this simplification PR is merged.\n\nTree-SHA512: e63284a4e0584f071a920f6b8ac46694de38e7b1df1e0dc2b00262c1487a2f2851fae721e8f4907a4aad0335f287e881974df6f9d05fe9b26f0ba71033dce145\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d126f289c7d457d217065d69acd1de8712b165a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d126f289c7d457d217065d69acd1de8712b165a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d126f289c7d457d217065d69acd1de8712b165a"
      },
      {
        "sha": "55e05a82cdc347400e4e6f8df2b0aba690b835ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55e05a82cdc347400e4e6f8df2b0aba690b835ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55e05a82cdc347400e4e6f8df2b0aba690b835ea"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e4be63772cc9a668b582ec2abd3c3530467ea2d4",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7",
        "patch": "@@ -17,6 +17,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libjpeg |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L65) |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L64) |\n+| libsrvg | |  |  |  |  |\n | MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L66) |\n@@ -28,3 +29,18 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L86) (Linux only) |\n | ZeroMQ | [4.3.1](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n | zlib | [1.2.11](https://zlib.net/) |  |  |  | No |\n+\n+Controlling dependencies\n+------------------------\n+Some dependencies are not needed in all configurations. The following are some factors that affect the dependency list.\n+\n+#### Options passed to `./configure`\n+* MiniUPnPc is not needed with  `--with-miniupnpc=no`.\n+* Berkeley DB is not needed with `--disable-wallet`.\n+* protobuf is not needed with `--disable-bip70`.\n+* Qt is not needed with `--without-gui`.\n+* If the qrencode dependency is absent, QR support won't be added. To force an error when that happens, pass `--with-qrencode`.\n+* ZeroMQ is needed only with the `--with-zmq` option.\n+\n+#### Other\n+* librsvg is only needed if you need to run `make deploy` on (cross-compliation to) macOS.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "53b310390cc72a034911a8d6236b472a22c62227",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2IzMTAzOTBjYzcyYTAzNDkxMWE4ZDYyMzZiNDcyYTIyYzYyMjI3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-21T15:26:29Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-21T16:19:29Z"
      },
      "message": "refactor: Drop redundant wallet reference",
      "tree": {
        "sha": "a69101753e2f0d64580ac8fef2a38dacac1bb7f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a69101753e2f0d64580ac8fef2a38dacac1bb7f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53b310390cc72a034911a8d6236b472a22c62227",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b310390cc72a034911a8d6236b472a22c62227",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53b310390cc72a034911a8d6236b472a22c62227",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b310390cc72a034911a8d6236b472a22c62227/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9775a865597b3cc926ba3375fa692516c7415be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9775a865597b3cc926ba3375fa692516c7415be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9775a865597b3cc926ba3375fa692516c7415be"
      }
    ],
    "stats": {
      "total": 255,
      "additions": 127,
      "deletions": 128
    },
    "files": [
      {
        "sha": "0dac75834e09a2029ef1d2d5acf171addbe8306d",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 128,
        "changes": 255,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b310390cc72a034911a8d6236b472a22c62227/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b310390cc72a034911a8d6236b472a22c62227/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=53b310390cc72a034911a8d6236b472a22c62227",
        "patch": "@@ -135,55 +135,55 @@ WalletTxOut MakeWalletTxOut(interfaces::Chain::Lock& locked_chain,\n class WalletImpl : public Wallet\n {\n public:\n-    explicit WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_shared_wallet(wallet), m_wallet(*wallet.get()) {}\n+    explicit WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_wallet(wallet) {}\n \n     bool encryptWallet(const SecureString& wallet_passphrase) override\n     {\n-        return m_wallet.EncryptWallet(wallet_passphrase);\n+        return m_wallet->EncryptWallet(wallet_passphrase);\n     }\n-    bool isCrypted() override { return m_wallet.IsCrypted(); }\n-    bool lock() override { return m_wallet.Lock(); }\n-    bool unlock(const SecureString& wallet_passphrase) override { return m_wallet.Unlock(wallet_passphrase); }\n-    bool isLocked() override { return m_wallet.IsLocked(); }\n+    bool isCrypted() override { return m_wallet->IsCrypted(); }\n+    bool lock() override { return m_wallet->Lock(); }\n+    bool unlock(const SecureString& wallet_passphrase) override { return m_wallet->Unlock(wallet_passphrase); }\n+    bool isLocked() override { return m_wallet->IsLocked(); }\n     bool changeWalletPassphrase(const SecureString& old_wallet_passphrase,\n         const SecureString& new_wallet_passphrase) override\n     {\n-        return m_wallet.ChangeWalletPassphrase(old_wallet_passphrase, new_wallet_passphrase);\n+        return m_wallet->ChangeWalletPassphrase(old_wallet_passphrase, new_wallet_passphrase);\n     }\n-    void abortRescan() override { m_wallet.AbortRescan(); }\n-    bool backupWallet(const std::string& filename) override { return m_wallet.BackupWallet(filename); }\n-    std::string getWalletName() override { return m_wallet.GetName(); }\n+    void abortRescan() override { m_wallet->AbortRescan(); }\n+    bool backupWallet(const std::string& filename) override { return m_wallet->BackupWallet(filename); }\n+    std::string getWalletName() override { return m_wallet->GetName(); }\n     bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n     {\n-        return m_wallet.GetKeyFromPool(pub_key, internal);\n+        return m_wallet->GetKeyFromPool(pub_key, internal);\n     }\n-    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet.GetPubKey(address, pub_key); }\n-    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet.GetKey(address, key); }\n-    bool isSpendable(const CTxDestination& dest) override { return IsMine(m_wallet, dest) & ISMINE_SPENDABLE; }\n-    bool haveWatchOnly() override { return m_wallet.HaveWatchOnly(); };\n+    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet->GetPubKey(address, pub_key); }\n+    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet->GetKey(address, key); }\n+    bool isSpendable(const CTxDestination& dest) override { return IsMine(*m_wallet, dest) & ISMINE_SPENDABLE; }\n+    bool haveWatchOnly() override { return m_wallet->HaveWatchOnly(); };\n     bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) override\n     {\n-        return m_wallet.SetAddressBook(dest, name, purpose);\n+        return m_wallet->SetAddressBook(dest, name, purpose);\n     }\n     bool delAddressBook(const CTxDestination& dest) override\n     {\n-        return m_wallet.DelAddressBook(dest);\n+        return m_wallet->DelAddressBook(dest);\n     }\n     bool getAddress(const CTxDestination& dest,\n         std::string* name,\n         isminetype* is_mine,\n         std::string* purpose) override\n     {\n-        LOCK(m_wallet.cs_wallet);\n-        auto it = m_wallet.mapAddressBook.find(dest);\n-        if (it == m_wallet.mapAddressBook.end()) {\n+        LOCK(m_wallet->cs_wallet);\n+        auto it = m_wallet->mapAddressBook.find(dest);\n+        if (it == m_wallet->mapAddressBook.end()) {\n             return false;\n         }\n         if (name) {\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(m_wallet, dest);\n+            *is_mine = IsMine(*m_wallet, dest);\n         }\n         if (purpose) {\n             *purpose = it->second.purpose;\n@@ -192,52 +192,52 @@ class WalletImpl : public Wallet\n     }\n     std::vector<WalletAddress> getAddresses() override\n     {\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK(m_wallet->cs_wallet);\n         std::vector<WalletAddress> result;\n-        for (const auto& item : m_wallet.mapAddressBook) {\n-            result.emplace_back(item.first, IsMine(m_wallet, item.first), item.second.name, item.second.purpose);\n+        for (const auto& item : m_wallet->mapAddressBook) {\n+            result.emplace_back(item.first, IsMine(*m_wallet, item.first), item.second.name, item.second.purpose);\n         }\n         return result;\n     }\n-    void learnRelatedScripts(const CPubKey& key, OutputType type) override { m_wallet.LearnRelatedScripts(key, type); }\n+    void learnRelatedScripts(const CPubKey& key, OutputType type) override { m_wallet->LearnRelatedScripts(key, type); }\n     bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n     {\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.AddDestData(dest, key, value);\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->AddDestData(dest, key, value);\n     }\n     bool eraseDestData(const CTxDestination& dest, const std::string& key) override\n     {\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.EraseDestData(dest, key);\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->EraseDestData(dest, key);\n     }\n     std::vector<std::string> getDestValues(const std::string& prefix) override\n     {\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.GetDestValues(prefix);\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->GetDestValues(prefix);\n     }\n     void lockCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.LockCoin(output);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->LockCoin(output);\n     }\n     void unlockCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.UnlockCoin(output);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->UnlockCoin(output);\n     }\n     bool isLockedCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.IsLockedCoin(output.hash, output.n);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->IsLockedCoin(output.hash, output.n);\n     }\n     void listLockedCoins(std::vector<COutPoint>& outputs) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.ListLockedCoins(outputs);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->ListLockedCoins(outputs);\n     }\n     std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n         const CCoinControl& coin_control,\n@@ -246,25 +246,25 @@ class WalletImpl : public Wallet\n         CAmount& fee,\n         std::string& fail_reason) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        auto pending = MakeUnique<PendingWalletTxImpl>(m_wallet);\n-        if (!m_wallet.CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_key, fee, change_pos,\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        auto pending = MakeUnique<PendingWalletTxImpl>(*m_wallet);\n+        if (!m_wallet->CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_key, fee, change_pos,\n                 fail_reason, coin_control, sign)) {\n             return {};\n         }\n         return std::move(pending);\n     }\n-    bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet.TransactionCanBeAbandoned(txid); }\n+    bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet->TransactionCanBeAbandoned(txid); }\n     bool abandonTransaction(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.AbandonTransaction(*locked_chain, txid);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->AbandonTransaction(*locked_chain, txid);\n     }\n     bool transactionCanBeBumped(const uint256& txid) override\n     {\n-        return feebumper::TransactionCanBeBumped(&m_wallet, txid);\n+        return feebumper::TransactionCanBeBumped(m_wallet.get(), txid);\n     }\n     bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n@@ -274,46 +274,46 @@ class WalletImpl : public Wallet\n         CAmount& new_fee,\n         CMutableTransaction& mtx) override\n     {\n-        return feebumper::CreateTransaction(&m_wallet, txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n+        return feebumper::CreateTransaction(m_wallet.get(), txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n                feebumper::Result::OK;\n     }\n-    bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(&m_wallet, mtx); }\n+    bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(m_wallet.get(), mtx); }\n     bool commitBumpTransaction(const uint256& txid,\n         CMutableTransaction&& mtx,\n         std::vector<std::string>& errors,\n         uint256& bumped_txid) override\n     {\n-        return feebumper::CommitTransaction(&m_wallet, txid, std::move(mtx), errors, bumped_txid) ==\n+        return feebumper::CommitTransaction(m_wallet.get(), txid, std::move(mtx), errors, bumped_txid) ==\n                feebumper::Result::OK;\n     }\n     CTransactionRef getTx(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        auto mi = m_wallet.mapWallet.find(txid);\n-        if (mi != m_wallet.mapWallet.end()) {\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        auto mi = m_wallet->mapWallet.find(txid);\n+        if (mi != m_wallet->mapWallet.end()) {\n             return mi->second.tx;\n         }\n         return {};\n     }\n     WalletTx getWalletTx(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        auto mi = m_wallet.mapWallet.find(txid);\n-        if (mi != m_wallet.mapWallet.end()) {\n-            return MakeWalletTx(*locked_chain, m_wallet, mi->second);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        auto mi = m_wallet->mapWallet.find(txid);\n+        if (mi != m_wallet->mapWallet.end()) {\n+            return MakeWalletTx(*locked_chain, *m_wallet, mi->second);\n         }\n         return {};\n     }\n     std::vector<WalletTx> getWalletTxs() override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n         std::vector<WalletTx> result;\n-        result.reserve(m_wallet.mapWallet.size());\n-        for (const auto& entry : m_wallet.mapWallet) {\n-            result.emplace_back(MakeWalletTx(*locked_chain, m_wallet, entry.second));\n+        result.reserve(m_wallet->mapWallet.size());\n+        for (const auto& entry : m_wallet->mapWallet) {\n+            result.emplace_back(MakeWalletTx(*locked_chain, *m_wallet, entry.second));\n         }\n         return result;\n     }\n@@ -322,16 +322,16 @@ class WalletImpl : public Wallet\n         int& num_blocks,\n         int64_t& block_time) override\n     {\n-        auto locked_chain = m_wallet.chain().lock(true /* try_lock */);\n+        auto locked_chain = m_wallet->chain().lock(true /* try_lock */);\n         if (!locked_chain) {\n             return false;\n         }\n-        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        TRY_LOCK(m_wallet->cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n             return false;\n         }\n-        auto mi = m_wallet.mapWallet.find(txid);\n-        if (mi == m_wallet.mapWallet.end()) {\n+        auto mi = m_wallet->mapWallet.find(txid);\n+        if (mi == m_wallet->mapWallet.end()) {\n             return false;\n         }\n         if (Optional<int> height = locked_chain->getHeight()) {\n@@ -350,162 +350,161 @@ class WalletImpl : public Wallet\n         bool& in_mempool,\n         int& num_blocks) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        auto mi = m_wallet.mapWallet.find(txid);\n-        if (mi != m_wallet.mapWallet.end()) {\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        auto mi = m_wallet->mapWallet.find(txid);\n+        if (mi != m_wallet->mapWallet.end()) {\n             num_blocks = locked_chain->getHeight().get_value_or(-1);\n             in_mempool = mi->second.InMempool();\n             order_form = mi->second.vOrderForm;\n             tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n-            return MakeWalletTx(*locked_chain, m_wallet, mi->second);\n+            return MakeWalletTx(*locked_chain, *m_wallet, mi->second);\n         }\n         return {};\n     }\n     WalletBalances getBalances() override\n     {\n         WalletBalances result;\n-        result.balance = m_wallet.GetBalance();\n-        result.unconfirmed_balance = m_wallet.GetUnconfirmedBalance();\n-        result.immature_balance = m_wallet.GetImmatureBalance();\n-        result.have_watch_only = m_wallet.HaveWatchOnly();\n+        result.balance = m_wallet->GetBalance();\n+        result.unconfirmed_balance = m_wallet->GetUnconfirmedBalance();\n+        result.immature_balance = m_wallet->GetImmatureBalance();\n+        result.have_watch_only = m_wallet->HaveWatchOnly();\n         if (result.have_watch_only) {\n-            result.watch_only_balance = m_wallet.GetBalance(ISMINE_WATCH_ONLY);\n-            result.unconfirmed_watch_only_balance = m_wallet.GetUnconfirmedWatchOnlyBalance();\n-            result.immature_watch_only_balance = m_wallet.GetImmatureWatchOnlyBalance();\n+            result.watch_only_balance = m_wallet->GetBalance(ISMINE_WATCH_ONLY);\n+            result.unconfirmed_watch_only_balance = m_wallet->GetUnconfirmedWatchOnlyBalance();\n+            result.immature_watch_only_balance = m_wallet->GetImmatureWatchOnlyBalance();\n         }\n         return result;\n     }\n     bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n     {\n-        auto locked_chain = m_wallet.chain().lock(true /* try_lock */);\n+        auto locked_chain = m_wallet->chain().lock(true /* try_lock */);\n         if (!locked_chain) return false;\n-        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        TRY_LOCK(m_wallet->cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n             return false;\n         }\n         balances = getBalances();\n         num_blocks = locked_chain->getHeight().get_value_or(-1);\n         return true;\n     }\n-    CAmount getBalance() override { return m_wallet.GetBalance(); }\n+    CAmount getBalance() override { return m_wallet->GetBalance(); }\n     CAmount getAvailableBalance(const CCoinControl& coin_control) override\n     {\n-        return m_wallet.GetAvailableBalance(&coin_control);\n+        return m_wallet->GetAvailableBalance(&coin_control);\n     }\n     isminetype txinIsMine(const CTxIn& txin) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.IsMine(txin);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->IsMine(txin);\n     }\n     isminetype txoutIsMine(const CTxOut& txout) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.IsMine(txout);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->IsMine(txout);\n     }\n     CAmount getDebit(const CTxIn& txin, isminefilter filter) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.GetDebit(txin, filter);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->GetDebit(txin, filter);\n     }\n     CAmount getCredit(const CTxOut& txout, isminefilter filter) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.GetCredit(txout, filter);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->GetCredit(txout, filter);\n     }\n     CoinsList listCoins() override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n         CoinsList result;\n-        for (const auto& entry : m_wallet.ListCoins(*locked_chain)) {\n+        for (const auto& entry : m_wallet->ListCoins(*locked_chain)) {\n             auto& group = result[entry.first];\n             for (const auto& coin : entry.second) {\n                 group.emplace_back(COutPoint(coin.tx->GetHash(), coin.i),\n-                    MakeWalletTxOut(*locked_chain, m_wallet, *coin.tx, coin.i, coin.nDepth));\n+                    MakeWalletTxOut(*locked_chain, *m_wallet, *coin.tx, coin.i, coin.nDepth));\n             }\n         }\n         return result;\n     }\n     std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n         std::vector<WalletTxOut> result;\n         result.reserve(outputs.size());\n         for (const auto& output : outputs) {\n             result.emplace_back();\n-            auto it = m_wallet.mapWallet.find(output.hash);\n-            if (it != m_wallet.mapWallet.end()) {\n+            auto it = m_wallet->mapWallet.find(output.hash);\n+            if (it != m_wallet->mapWallet.end()) {\n                 int depth = it->second.GetDepthInMainChain(*locked_chain);\n                 if (depth >= 0) {\n-                    result.back() = MakeWalletTxOut(*locked_chain, m_wallet, it->second, output.n, depth);\n+                    result.back() = MakeWalletTxOut(*locked_chain, *m_wallet, it->second, output.n, depth);\n                 }\n             }\n         }\n         return result;\n     }\n-    CAmount getRequiredFee(unsigned int tx_bytes) override { return GetRequiredFee(m_wallet, tx_bytes); }\n+    CAmount getRequiredFee(unsigned int tx_bytes) override { return GetRequiredFee(*m_wallet, tx_bytes); }\n     CAmount getMinimumFee(unsigned int tx_bytes,\n         const CCoinControl& coin_control,\n         int* returned_target,\n         FeeReason* reason) override\n     {\n         FeeCalculation fee_calc;\n         CAmount result;\n-        result = GetMinimumFee(m_wallet, tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc);\n+        result = GetMinimumFee(*m_wallet, tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc);\n         if (returned_target) *returned_target = fee_calc.returnedTarget;\n         if (reason) *reason = fee_calc.reason;\n         return result;\n     }\n-    unsigned int getConfirmTarget() override { return m_wallet.m_confirm_target; }\n-    bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n-    bool canGetAddresses() override { return m_wallet.CanGetAddresses(); }\n-    bool IsWalletFlagSet(uint64_t flag) override { return m_wallet.IsWalletFlagSet(flag); }\n-    OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n-    OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }\n+    unsigned int getConfirmTarget() override { return m_wallet->m_confirm_target; }\n+    bool hdEnabled() override { return m_wallet->IsHDEnabled(); }\n+    bool canGetAddresses() override { return m_wallet->CanGetAddresses(); }\n+    bool IsWalletFlagSet(uint64_t flag) override { return m_wallet->IsWalletFlagSet(flag); }\n+    OutputType getDefaultAddressType() override { return m_wallet->m_default_address_type; }\n+    OutputType getDefaultChangeType() override { return m_wallet->m_default_change_type; }\n     void remove() override\n     {\n-        RemoveWallet(m_shared_wallet);\n+        RemoveWallet(m_wallet);\n     }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyUnload.connect(fn));\n+        return MakeHandler(m_wallet->NotifyUnload.connect(fn));\n     }\n     std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) override\n     {\n-        return MakeHandler(m_wallet.ShowProgress.connect(fn));\n+        return MakeHandler(m_wallet->ShowProgress.connect(fn));\n     }\n     std::unique_ptr<Handler> handleStatusChanged(StatusChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyStatusChanged.connect([fn](CCryptoKeyStore*) { fn(); }));\n+        return MakeHandler(m_wallet->NotifyStatusChanged.connect([fn](CCryptoKeyStore*) { fn(); }));\n     }\n     std::unique_ptr<Handler> handleAddressBookChanged(AddressBookChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyAddressBookChanged.connect(\n+        return MakeHandler(m_wallet->NotifyAddressBookChanged.connect(\n             [fn](CWallet*, const CTxDestination& address, const std::string& label, bool is_mine,\n                 const std::string& purpose, ChangeType status) { fn(address, label, is_mine, purpose, status); }));\n     }\n     std::unique_ptr<Handler> handleTransactionChanged(TransactionChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyTransactionChanged.connect(\n+        return MakeHandler(m_wallet->NotifyTransactionChanged.connect(\n             [fn](CWallet*, const uint256& txid, ChangeType status) { fn(txid, status); }));\n     }\n     std::unique_ptr<Handler> handleWatchOnlyChanged(WatchOnlyChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyWatchonlyChanged.connect(fn));\n+        return MakeHandler(m_wallet->NotifyWatchonlyChanged.connect(fn));\n     }\n     std::unique_ptr<Handler> handleCanGetAddressesChanged(CanGetAddressesChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyCanGetAddressesChanged.connect(fn));\n+        return MakeHandler(m_wallet->NotifyCanGetAddressesChanged.connect(fn));\n     }\n \n-    std::shared_ptr<CWallet> m_shared_wallet;\n-    CWallet& m_wallet;\n+    std::shared_ptr<CWallet> m_wallet;\n };\n \n class WalletClientImpl : public ChainClient"
      }
    ]
  },
  {
    "sha": "a83aedca1889709feb8e6b2d2d18340151220338",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODNhZWRjYTE4ODk3MDlmZWI4ZTZiMmQyZDE4MzQwMTUxMjIwMzM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-21T17:57:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-21T17:57:21Z"
      },
      "message": "Merge #13676: Explain that mempool memory is added to -dbcache\n\n7cb1a1401d2dcc82d2c7ca7ee1d3067dc4ada5e8 Explain that unused mempool memory is added to -dbcache (Sjors Provoost)\n\nPull request description:\n\n  Since `-maxmempool` is 450 MB by default it's quite possible for a user to accidentally OOM a low\n  memory device if they increase `-dbcache` beyond the default.\n\n  <img width=\"563\" alt=\"schermafbeelding 2018-09-06 om 17 02 40\" src=\"https://user-images.githubusercontent.com/10217/45166219-c9c4f700-b1f6-11e8-9ee5-14b8b3a9830b.png\">\n\nTree-SHA512: 44c7419d0b06c14aee5d2c02a41e5da488bcb40a5f65ba24554a45707b222f1e4b03d42486dfef9336d917ac2990eef2b1aec287a75b3ef1ccca0e88ac86a0c0",
      "tree": {
        "sha": "425aad516ae10923015c18662fe87f9b1210dd39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/425aad516ae10923015c18662fe87f9b1210dd39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a83aedca1889709feb8e6b2d2d18340151220338",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxu5oEACgkQHkrtYphs\n0l2C2AgAzYFO3kh93mgb0Qw+RCoONLfCbHt0SnBzLIMM4V3af/GQx4ethgqysKlf\nhTtXORFxv4iGHY7Ra0j/vl14dm1TMfj8eieU/9mCwCBTVdaJft0Qpgw+kJNp5Xk5\nqphgTj3p4E/MijJADvGcnwAuZaa48EtAJI+Mwo4y4USrvWCD571dk1Xs0H64J3Iu\n3t6RXpyykzM9PoUWMvLjp1SoCKJviT+RRCUvfXIYNMcJaoWN9FTTL87FrD4WMSfK\nmy/ZDrgB/xQ9fTRUVz51OsvUDRN1c3M1tZb7DvGb4jQvqHbUSQiUeIw0TCbDvXxn\nXsdLemPwmsNLPWdV99CVQXQvTEyXxQ==\n=JEKA\n-----END PGP SIGNATURE-----",
        "payload": "tree 425aad516ae10923015c18662fe87f9b1210dd39\nparent b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7\nparent 7cb1a1401d2dcc82d2c7ca7ee1d3067dc4ada5e8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550771821 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550771841 +0100\n\nMerge #13676: Explain that mempool memory is added to -dbcache\n\n7cb1a1401d2dcc82d2c7ca7ee1d3067dc4ada5e8 Explain that unused mempool memory is added to -dbcache (Sjors Provoost)\n\nPull request description:\n\n  Since `-maxmempool` is 450 MB by default it's quite possible for a user to accidentally OOM a low\n  memory device if they increase `-dbcache` beyond the default.\n\n  <img width=\"563\" alt=\"schermafbeelding 2018-09-06 om 17 02 40\" src=\"https://user-images.githubusercontent.com/10217/45166219-c9c4f700-b1f6-11e8-9ee5-14b8b3a9830b.png\">\n\nTree-SHA512: 44c7419d0b06c14aee5d2c02a41e5da488bcb40a5f65ba24554a45707b222f1e4b03d42486dfef9336d917ac2990eef2b1aec287a75b3ef1ccca0e88ac86a0c0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a83aedca1889709feb8e6b2d2d18340151220338",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a83aedca1889709feb8e6b2d2d18340151220338",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a83aedca1889709feb8e6b2d2d18340151220338/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7"
      },
      {
        "sha": "7cb1a1401d2dcc82d2c7ca7ee1d3067dc4ada5e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cb1a1401d2dcc82d2c7ca7ee1d3067dc4ada5e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cb1a1401d2dcc82d2c7ca7ee1d3067dc4ada5e8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8b831a726f59cd7a6867fe4e7e9d6ea8ff2cc256",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a83aedca1889709feb8e6b2d2d18340151220338/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a83aedca1889709feb8e6b2d2d18340151220338/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a83aedca1889709feb8e6b2d2d18340151220338",
        "patch": "@@ -380,7 +380,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Set database cache size in MiB (%d to %d, default: %d)\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);"
      }
    ]
  },
  {
    "sha": "a094b543324267e6d956bb0df2ede990b90118cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDk0YjU0MzMyNDI2N2U2ZDk1NmJiMGRmMmVkZTk5MGI5MDExOGNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-22T12:28:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-22T12:34:53Z"
      },
      "message": "Merge #15273: docs: Slight tweak to the verify-commits script directions\n\na786c3b30639a63ded5b3b81c393d56336d34dce Slight tweak to the verify-commits script directions (Douglas Roark)\n\nPull request description:\n\n  Clarify that GnuPG may be used on both Linux and macOS to obtain the keys required to verify the commits.\n\nTree-SHA512: cec556370f03e00bbd6f585d26b360ca236cf55cb5c0996f6d950d8a98f77c92cc02f1719c8f9b9dc9eac6900eb341a13b50a012752832f39095b7e84046f2cd",
      "tree": {
        "sha": "2a0de5bb4e1f800d6b5c23dc84ffddce8163580f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a0de5bb4e1f800d6b5c23dc84ffddce8163580f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a094b543324267e6d956bb0df2ede990b90118cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxv7G0ACgkQHkrtYphs\n0l11qggAgRbrnaobCpalM3gCB463ga40uHbBI4UBuRvEPLlkovICOYSKvtCQti63\nwRiY33/KS4V8J7JapLEQd/X+UAazTJIKqeimsA+gU5I8HbjLw3NxAropMKmu1Uyl\nfPdUFgx0fzBWAxSZYLCKyIVs59cVhzlf0ErmR1H14/+gGKa6YpccE+aTW+6nI70n\nFxNoQYwhjXy3UPUwz3VjcnRvHHUDWHdnvpLh9dpcw5bcCw1MEq6wBbp7SFfxvGvQ\n3+mato/pPw3pYD6l0G+vR0Xlz8oi3C7i7zrnK+ry6FJDHtfmWgxnUTSVCWaCVrRW\nyFpk6e7XM11F370mKIumGOBSc5CrUw==\n=AbfO\n-----END PGP SIGNATURE-----",
        "payload": "tree 2a0de5bb4e1f800d6b5c23dc84ffddce8163580f\nparent a83aedca1889709feb8e6b2d2d18340151220338\nparent a786c3b30639a63ded5b3b81c393d56336d34dce\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1550838499 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1550838893 +0100\n\nMerge #15273: docs: Slight tweak to the verify-commits script directions\n\na786c3b30639a63ded5b3b81c393d56336d34dce Slight tweak to the verify-commits script directions (Douglas Roark)\n\nPull request description:\n\n  Clarify that GnuPG may be used on both Linux and macOS to obtain the keys required to verify the commits.\n\nTree-SHA512: cec556370f03e00bbd6f585d26b360ca236cf55cb5c0996f6d950d8a98f77c92cc02f1719c8f9b9dc9eac6900eb341a13b50a012752832f39095b7e84046f2cd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a094b543324267e6d956bb0df2ede990b90118cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a094b543324267e6d956bb0df2ede990b90118cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a094b543324267e6d956bb0df2ede990b90118cb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a83aedca1889709feb8e6b2d2d18340151220338",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a83aedca1889709feb8e6b2d2d18340151220338",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a83aedca1889709feb8e6b2d2d18340151220338"
      },
      {
        "sha": "a786c3b30639a63ded5b3b81c393d56336d34dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a786c3b30639a63ded5b3b81c393d56336d34dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a786c3b30639a63ded5b3b81c393d56336d34dce"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1215962a1671768b71fd14555d11c7fa29d1e758",
        "filename": "contrib/verify-commits/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a094b543324267e6d956bb0df2ede990b90118cb/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a094b543324267e6d956bb0df2ede990b90118cb/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=a094b543324267e6d956bb0df2ede990b90118cb",
        "patch": "@@ -37,7 +37,8 @@ Configuration files\n \n Import trusted keys\n -------------------\n-In order to check the commit signatures you must add the trusted PGP keys to your machine. This can be done in Linux by running\n+In order to check the commit signatures, you must add the trusted PGP keys to your machine. [GnuPG](https://gnupg.org/) may be used to import the trusted keys by running the following command:\n+\n ```sh\n gpg --recv-keys $(<contrib/verify-commits/trusted-keys)\n ```"
      }
    ]
  },
  {
    "sha": "77fcf252f65e7005da13784333147439fd432af6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2ZjZjI1MmY2NWU3MDA1ZGExMzc4NDMzMzE0NzQzOWZkNDMyYWY2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-22T15:43:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-22T15:44:02Z"
      },
      "message": "Merge #15458: refactor: Drop redundant wallet reference\n\n53b310390c refactor: Drop redundant wallet reference (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Removes the redudant wallet reference from `WalletImpl`.\n\n  ```cpp\n  // before:\n  std::shared_ptr<CWallet> m_shared_wallet;\n  CWallet& m_wallet;\n\n  // after\n  std::shared_ptr<CWallet> m_wallet;\n  ```\n\nTree-SHA512: c78c5a75a59df20b1684f746305c5b3505f73adfd84f00fd800da61ca07c6a37a992fedea3da390afd9564dc6b6a022d183a38995124783ad62c0cc7610be92b",
      "tree": {
        "sha": "e498c01c40aa0dac352ea6917f92106a813943da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e498c01c40aa0dac352ea6917f92106a813943da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77fcf252f65e7005da13784333147439fd432af6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJccBjCAAoJENLqSFDnUoslQ0sP/2u9VWGas4RoG+rvgFZQOjYb\nknq9UnOCHdzFTRHX70hUWALO3o/1WXZZkmnFJNmpPU96AHjb8Y0Mzm701OV6mN5B\n4IFDi05GnM2gu4qnc0KFpWCyMVrp5sgPCgiTyXjU5NpPn1WZebEXY2AtLRIHPJa/\nIzxcIrivtwY/6EJ2S0RxRGtZ7ypeEO7hTBG+Wcb/7UdkGs05Ndplk3qNHApgAP2c\nt3RC6jbprhsAGTqW/XRS3i8jZMAikujjH4RsXxfhc4fZKffEy+boMZkEdtn4RG+s\ncpVb5Hmse8328t4gUeLvlO0MrOnsnAe8faN7LPHTObCKeialcE9zw1MFj6tGWmpv\ny96j0sxNitmnaFb7+JbWTheHbcs///chwtJnIUpRN4z5qlltDfflpq6XWC7/MOlK\nWGSBMjySzIYWHNt++9Zj4X9s3Ib8vJ+7Q+A04ifBHPImiNwh7/4+7lmd1K0oBW+7\n4+zuGs8Bz/TbUEEqPP+R1C9zAgI4QdCbIB87YBfK+8MNggeNfUaq/76AMasTcgST\nD1RCk2v53BB1dcwAdSxcFFmcvatj3DOi3UiC4ljKZo0K2HYjkNRy2/u6rJv+pYNg\n/uyD/2B6PR9Zj5bnacBocNTfEzTm1sDcjSk9j+a2gwJZKpcqMJyA+h6ULnWnjbtk\nDp0c+VgTtLYJ3hwgDBkE\n=f2to\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIP7YoYHmP2d14VeCYhN/bUQIafNJScK25iwPeylDfwLeCP/wEESXZhDGdoyZ\n+cBmkn11mVkI8QRccBjF8AjhINaCJT7+IgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEKVnZ6S1X9nrxtPO4B0D\nJXII8BD+5XxmpR0+BUXZqblgEZ4XCPEEXHAYxfAIxlNoiCvx0RQAg9/jDS75DI4p\nKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BC/C+eK\nei2srKUutySXc/BoCPEEXHAYxPAIEXWDxrFylkkAg9/jDS75DI4jImh0dHBzOi8v\nYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wEMBW8WGIhS+df7yiY6E4zu8I8QRc\ncBjE8AgWKaud756AmgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e498c01c40aa0dac352ea6917f92106a813943da\nparent a094b543324267e6d956bb0df2ede990b90118cb\nparent 53b310390cc72a034911a8d6236b472a22c62227\nauthor MarcoFalke <falke.marco@gmail.com> 1550850235 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550850242 -0500\n\nMerge #15458: refactor: Drop redundant wallet reference\n\n53b310390c refactor: Drop redundant wallet reference (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Removes the redudant wallet reference from `WalletImpl`.\n\n  ```cpp\n  // before:\n  std::shared_ptr<CWallet> m_shared_wallet;\n  CWallet& m_wallet;\n\n  // after\n  std::shared_ptr<CWallet> m_wallet;\n  ```\n\nTree-SHA512: c78c5a75a59df20b1684f746305c5b3505f73adfd84f00fd800da61ca07c6a37a992fedea3da390afd9564dc6b6a022d183a38995124783ad62c0cc7610be92b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77fcf252f65e7005da13784333147439fd432af6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77fcf252f65e7005da13784333147439fd432af6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77fcf252f65e7005da13784333147439fd432af6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a094b543324267e6d956bb0df2ede990b90118cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a094b543324267e6d956bb0df2ede990b90118cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a094b543324267e6d956bb0df2ede990b90118cb"
      },
      {
        "sha": "53b310390cc72a034911a8d6236b472a22c62227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b310390cc72a034911a8d6236b472a22c62227",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53b310390cc72a034911a8d6236b472a22c62227"
      }
    ],
    "stats": {
      "total": 255,
      "additions": 127,
      "deletions": 128
    },
    "files": [
      {
        "sha": "0dac75834e09a2029ef1d2d5acf171addbe8306d",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 128,
        "changes": 255,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77fcf252f65e7005da13784333147439fd432af6/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77fcf252f65e7005da13784333147439fd432af6/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=77fcf252f65e7005da13784333147439fd432af6",
        "patch": "@@ -135,55 +135,55 @@ WalletTxOut MakeWalletTxOut(interfaces::Chain::Lock& locked_chain,\n class WalletImpl : public Wallet\n {\n public:\n-    explicit WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_shared_wallet(wallet), m_wallet(*wallet.get()) {}\n+    explicit WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_wallet(wallet) {}\n \n     bool encryptWallet(const SecureString& wallet_passphrase) override\n     {\n-        return m_wallet.EncryptWallet(wallet_passphrase);\n+        return m_wallet->EncryptWallet(wallet_passphrase);\n     }\n-    bool isCrypted() override { return m_wallet.IsCrypted(); }\n-    bool lock() override { return m_wallet.Lock(); }\n-    bool unlock(const SecureString& wallet_passphrase) override { return m_wallet.Unlock(wallet_passphrase); }\n-    bool isLocked() override { return m_wallet.IsLocked(); }\n+    bool isCrypted() override { return m_wallet->IsCrypted(); }\n+    bool lock() override { return m_wallet->Lock(); }\n+    bool unlock(const SecureString& wallet_passphrase) override { return m_wallet->Unlock(wallet_passphrase); }\n+    bool isLocked() override { return m_wallet->IsLocked(); }\n     bool changeWalletPassphrase(const SecureString& old_wallet_passphrase,\n         const SecureString& new_wallet_passphrase) override\n     {\n-        return m_wallet.ChangeWalletPassphrase(old_wallet_passphrase, new_wallet_passphrase);\n+        return m_wallet->ChangeWalletPassphrase(old_wallet_passphrase, new_wallet_passphrase);\n     }\n-    void abortRescan() override { m_wallet.AbortRescan(); }\n-    bool backupWallet(const std::string& filename) override { return m_wallet.BackupWallet(filename); }\n-    std::string getWalletName() override { return m_wallet.GetName(); }\n+    void abortRescan() override { m_wallet->AbortRescan(); }\n+    bool backupWallet(const std::string& filename) override { return m_wallet->BackupWallet(filename); }\n+    std::string getWalletName() override { return m_wallet->GetName(); }\n     bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n     {\n-        return m_wallet.GetKeyFromPool(pub_key, internal);\n+        return m_wallet->GetKeyFromPool(pub_key, internal);\n     }\n-    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet.GetPubKey(address, pub_key); }\n-    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet.GetKey(address, key); }\n-    bool isSpendable(const CTxDestination& dest) override { return IsMine(m_wallet, dest) & ISMINE_SPENDABLE; }\n-    bool haveWatchOnly() override { return m_wallet.HaveWatchOnly(); };\n+    bool getPubKey(const CKeyID& address, CPubKey& pub_key) override { return m_wallet->GetPubKey(address, pub_key); }\n+    bool getPrivKey(const CKeyID& address, CKey& key) override { return m_wallet->GetKey(address, key); }\n+    bool isSpendable(const CTxDestination& dest) override { return IsMine(*m_wallet, dest) & ISMINE_SPENDABLE; }\n+    bool haveWatchOnly() override { return m_wallet->HaveWatchOnly(); };\n     bool setAddressBook(const CTxDestination& dest, const std::string& name, const std::string& purpose) override\n     {\n-        return m_wallet.SetAddressBook(dest, name, purpose);\n+        return m_wallet->SetAddressBook(dest, name, purpose);\n     }\n     bool delAddressBook(const CTxDestination& dest) override\n     {\n-        return m_wallet.DelAddressBook(dest);\n+        return m_wallet->DelAddressBook(dest);\n     }\n     bool getAddress(const CTxDestination& dest,\n         std::string* name,\n         isminetype* is_mine,\n         std::string* purpose) override\n     {\n-        LOCK(m_wallet.cs_wallet);\n-        auto it = m_wallet.mapAddressBook.find(dest);\n-        if (it == m_wallet.mapAddressBook.end()) {\n+        LOCK(m_wallet->cs_wallet);\n+        auto it = m_wallet->mapAddressBook.find(dest);\n+        if (it == m_wallet->mapAddressBook.end()) {\n             return false;\n         }\n         if (name) {\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(m_wallet, dest);\n+            *is_mine = IsMine(*m_wallet, dest);\n         }\n         if (purpose) {\n             *purpose = it->second.purpose;\n@@ -192,52 +192,52 @@ class WalletImpl : public Wallet\n     }\n     std::vector<WalletAddress> getAddresses() override\n     {\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK(m_wallet->cs_wallet);\n         std::vector<WalletAddress> result;\n-        for (const auto& item : m_wallet.mapAddressBook) {\n-            result.emplace_back(item.first, IsMine(m_wallet, item.first), item.second.name, item.second.purpose);\n+        for (const auto& item : m_wallet->mapAddressBook) {\n+            result.emplace_back(item.first, IsMine(*m_wallet, item.first), item.second.name, item.second.purpose);\n         }\n         return result;\n     }\n-    void learnRelatedScripts(const CPubKey& key, OutputType type) override { m_wallet.LearnRelatedScripts(key, type); }\n+    void learnRelatedScripts(const CPubKey& key, OutputType type) override { m_wallet->LearnRelatedScripts(key, type); }\n     bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n     {\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.AddDestData(dest, key, value);\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->AddDestData(dest, key, value);\n     }\n     bool eraseDestData(const CTxDestination& dest, const std::string& key) override\n     {\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.EraseDestData(dest, key);\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->EraseDestData(dest, key);\n     }\n     std::vector<std::string> getDestValues(const std::string& prefix) override\n     {\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.GetDestValues(prefix);\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->GetDestValues(prefix);\n     }\n     void lockCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.LockCoin(output);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->LockCoin(output);\n     }\n     void unlockCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.UnlockCoin(output);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->UnlockCoin(output);\n     }\n     bool isLockedCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.IsLockedCoin(output.hash, output.n);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->IsLockedCoin(output.hash, output.n);\n     }\n     void listLockedCoins(std::vector<COutPoint>& outputs) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.ListLockedCoins(outputs);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->ListLockedCoins(outputs);\n     }\n     std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n         const CCoinControl& coin_control,\n@@ -246,25 +246,25 @@ class WalletImpl : public Wallet\n         CAmount& fee,\n         std::string& fail_reason) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        auto pending = MakeUnique<PendingWalletTxImpl>(m_wallet);\n-        if (!m_wallet.CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_key, fee, change_pos,\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        auto pending = MakeUnique<PendingWalletTxImpl>(*m_wallet);\n+        if (!m_wallet->CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_key, fee, change_pos,\n                 fail_reason, coin_control, sign)) {\n             return {};\n         }\n         return std::move(pending);\n     }\n-    bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet.TransactionCanBeAbandoned(txid); }\n+    bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet->TransactionCanBeAbandoned(txid); }\n     bool abandonTransaction(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.AbandonTransaction(*locked_chain, txid);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->AbandonTransaction(*locked_chain, txid);\n     }\n     bool transactionCanBeBumped(const uint256& txid) override\n     {\n-        return feebumper::TransactionCanBeBumped(&m_wallet, txid);\n+        return feebumper::TransactionCanBeBumped(m_wallet.get(), txid);\n     }\n     bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n@@ -274,46 +274,46 @@ class WalletImpl : public Wallet\n         CAmount& new_fee,\n         CMutableTransaction& mtx) override\n     {\n-        return feebumper::CreateTransaction(&m_wallet, txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n+        return feebumper::CreateTransaction(m_wallet.get(), txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n                feebumper::Result::OK;\n     }\n-    bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(&m_wallet, mtx); }\n+    bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(m_wallet.get(), mtx); }\n     bool commitBumpTransaction(const uint256& txid,\n         CMutableTransaction&& mtx,\n         std::vector<std::string>& errors,\n         uint256& bumped_txid) override\n     {\n-        return feebumper::CommitTransaction(&m_wallet, txid, std::move(mtx), errors, bumped_txid) ==\n+        return feebumper::CommitTransaction(m_wallet.get(), txid, std::move(mtx), errors, bumped_txid) ==\n                feebumper::Result::OK;\n     }\n     CTransactionRef getTx(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        auto mi = m_wallet.mapWallet.find(txid);\n-        if (mi != m_wallet.mapWallet.end()) {\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        auto mi = m_wallet->mapWallet.find(txid);\n+        if (mi != m_wallet->mapWallet.end()) {\n             return mi->second.tx;\n         }\n         return {};\n     }\n     WalletTx getWalletTx(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        auto mi = m_wallet.mapWallet.find(txid);\n-        if (mi != m_wallet.mapWallet.end()) {\n-            return MakeWalletTx(*locked_chain, m_wallet, mi->second);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        auto mi = m_wallet->mapWallet.find(txid);\n+        if (mi != m_wallet->mapWallet.end()) {\n+            return MakeWalletTx(*locked_chain, *m_wallet, mi->second);\n         }\n         return {};\n     }\n     std::vector<WalletTx> getWalletTxs() override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n         std::vector<WalletTx> result;\n-        result.reserve(m_wallet.mapWallet.size());\n-        for (const auto& entry : m_wallet.mapWallet) {\n-            result.emplace_back(MakeWalletTx(*locked_chain, m_wallet, entry.second));\n+        result.reserve(m_wallet->mapWallet.size());\n+        for (const auto& entry : m_wallet->mapWallet) {\n+            result.emplace_back(MakeWalletTx(*locked_chain, *m_wallet, entry.second));\n         }\n         return result;\n     }\n@@ -322,16 +322,16 @@ class WalletImpl : public Wallet\n         int& num_blocks,\n         int64_t& block_time) override\n     {\n-        auto locked_chain = m_wallet.chain().lock(true /* try_lock */);\n+        auto locked_chain = m_wallet->chain().lock(true /* try_lock */);\n         if (!locked_chain) {\n             return false;\n         }\n-        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        TRY_LOCK(m_wallet->cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n             return false;\n         }\n-        auto mi = m_wallet.mapWallet.find(txid);\n-        if (mi == m_wallet.mapWallet.end()) {\n+        auto mi = m_wallet->mapWallet.find(txid);\n+        if (mi == m_wallet->mapWallet.end()) {\n             return false;\n         }\n         if (Optional<int> height = locked_chain->getHeight()) {\n@@ -350,162 +350,161 @@ class WalletImpl : public Wallet\n         bool& in_mempool,\n         int& num_blocks) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        auto mi = m_wallet.mapWallet.find(txid);\n-        if (mi != m_wallet.mapWallet.end()) {\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        auto mi = m_wallet->mapWallet.find(txid);\n+        if (mi != m_wallet->mapWallet.end()) {\n             num_blocks = locked_chain->getHeight().get_value_or(-1);\n             in_mempool = mi->second.InMempool();\n             order_form = mi->second.vOrderForm;\n             tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n-            return MakeWalletTx(*locked_chain, m_wallet, mi->second);\n+            return MakeWalletTx(*locked_chain, *m_wallet, mi->second);\n         }\n         return {};\n     }\n     WalletBalances getBalances() override\n     {\n         WalletBalances result;\n-        result.balance = m_wallet.GetBalance();\n-        result.unconfirmed_balance = m_wallet.GetUnconfirmedBalance();\n-        result.immature_balance = m_wallet.GetImmatureBalance();\n-        result.have_watch_only = m_wallet.HaveWatchOnly();\n+        result.balance = m_wallet->GetBalance();\n+        result.unconfirmed_balance = m_wallet->GetUnconfirmedBalance();\n+        result.immature_balance = m_wallet->GetImmatureBalance();\n+        result.have_watch_only = m_wallet->HaveWatchOnly();\n         if (result.have_watch_only) {\n-            result.watch_only_balance = m_wallet.GetBalance(ISMINE_WATCH_ONLY);\n-            result.unconfirmed_watch_only_balance = m_wallet.GetUnconfirmedWatchOnlyBalance();\n-            result.immature_watch_only_balance = m_wallet.GetImmatureWatchOnlyBalance();\n+            result.watch_only_balance = m_wallet->GetBalance(ISMINE_WATCH_ONLY);\n+            result.unconfirmed_watch_only_balance = m_wallet->GetUnconfirmedWatchOnlyBalance();\n+            result.immature_watch_only_balance = m_wallet->GetImmatureWatchOnlyBalance();\n         }\n         return result;\n     }\n     bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n     {\n-        auto locked_chain = m_wallet.chain().lock(true /* try_lock */);\n+        auto locked_chain = m_wallet->chain().lock(true /* try_lock */);\n         if (!locked_chain) return false;\n-        TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n+        TRY_LOCK(m_wallet->cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n             return false;\n         }\n         balances = getBalances();\n         num_blocks = locked_chain->getHeight().get_value_or(-1);\n         return true;\n     }\n-    CAmount getBalance() override { return m_wallet.GetBalance(); }\n+    CAmount getBalance() override { return m_wallet->GetBalance(); }\n     CAmount getAvailableBalance(const CCoinControl& coin_control) override\n     {\n-        return m_wallet.GetAvailableBalance(&coin_control);\n+        return m_wallet->GetAvailableBalance(&coin_control);\n     }\n     isminetype txinIsMine(const CTxIn& txin) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.IsMine(txin);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->IsMine(txin);\n     }\n     isminetype txoutIsMine(const CTxOut& txout) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.IsMine(txout);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->IsMine(txout);\n     }\n     CAmount getDebit(const CTxIn& txin, isminefilter filter) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.GetDebit(txin, filter);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->GetDebit(txin, filter);\n     }\n     CAmount getCredit(const CTxOut& txout, isminefilter filter) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.GetCredit(txout, filter);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->GetCredit(txout, filter);\n     }\n     CoinsList listCoins() override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n         CoinsList result;\n-        for (const auto& entry : m_wallet.ListCoins(*locked_chain)) {\n+        for (const auto& entry : m_wallet->ListCoins(*locked_chain)) {\n             auto& group = result[entry.first];\n             for (const auto& coin : entry.second) {\n                 group.emplace_back(COutPoint(coin.tx->GetHash(), coin.i),\n-                    MakeWalletTxOut(*locked_chain, m_wallet, *coin.tx, coin.i, coin.nDepth));\n+                    MakeWalletTxOut(*locked_chain, *m_wallet, *coin.tx, coin.i, coin.nDepth));\n             }\n         }\n         return result;\n     }\n     std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        auto locked_chain = m_wallet->chain().lock();\n+        LOCK(m_wallet->cs_wallet);\n         std::vector<WalletTxOut> result;\n         result.reserve(outputs.size());\n         for (const auto& output : outputs) {\n             result.emplace_back();\n-            auto it = m_wallet.mapWallet.find(output.hash);\n-            if (it != m_wallet.mapWallet.end()) {\n+            auto it = m_wallet->mapWallet.find(output.hash);\n+            if (it != m_wallet->mapWallet.end()) {\n                 int depth = it->second.GetDepthInMainChain(*locked_chain);\n                 if (depth >= 0) {\n-                    result.back() = MakeWalletTxOut(*locked_chain, m_wallet, it->second, output.n, depth);\n+                    result.back() = MakeWalletTxOut(*locked_chain, *m_wallet, it->second, output.n, depth);\n                 }\n             }\n         }\n         return result;\n     }\n-    CAmount getRequiredFee(unsigned int tx_bytes) override { return GetRequiredFee(m_wallet, tx_bytes); }\n+    CAmount getRequiredFee(unsigned int tx_bytes) override { return GetRequiredFee(*m_wallet, tx_bytes); }\n     CAmount getMinimumFee(unsigned int tx_bytes,\n         const CCoinControl& coin_control,\n         int* returned_target,\n         FeeReason* reason) override\n     {\n         FeeCalculation fee_calc;\n         CAmount result;\n-        result = GetMinimumFee(m_wallet, tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc);\n+        result = GetMinimumFee(*m_wallet, tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc);\n         if (returned_target) *returned_target = fee_calc.returnedTarget;\n         if (reason) *reason = fee_calc.reason;\n         return result;\n     }\n-    unsigned int getConfirmTarget() override { return m_wallet.m_confirm_target; }\n-    bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n-    bool canGetAddresses() override { return m_wallet.CanGetAddresses(); }\n-    bool IsWalletFlagSet(uint64_t flag) override { return m_wallet.IsWalletFlagSet(flag); }\n-    OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n-    OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }\n+    unsigned int getConfirmTarget() override { return m_wallet->m_confirm_target; }\n+    bool hdEnabled() override { return m_wallet->IsHDEnabled(); }\n+    bool canGetAddresses() override { return m_wallet->CanGetAddresses(); }\n+    bool IsWalletFlagSet(uint64_t flag) override { return m_wallet->IsWalletFlagSet(flag); }\n+    OutputType getDefaultAddressType() override { return m_wallet->m_default_address_type; }\n+    OutputType getDefaultChangeType() override { return m_wallet->m_default_change_type; }\n     void remove() override\n     {\n-        RemoveWallet(m_shared_wallet);\n+        RemoveWallet(m_wallet);\n     }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyUnload.connect(fn));\n+        return MakeHandler(m_wallet->NotifyUnload.connect(fn));\n     }\n     std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) override\n     {\n-        return MakeHandler(m_wallet.ShowProgress.connect(fn));\n+        return MakeHandler(m_wallet->ShowProgress.connect(fn));\n     }\n     std::unique_ptr<Handler> handleStatusChanged(StatusChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyStatusChanged.connect([fn](CCryptoKeyStore*) { fn(); }));\n+        return MakeHandler(m_wallet->NotifyStatusChanged.connect([fn](CCryptoKeyStore*) { fn(); }));\n     }\n     std::unique_ptr<Handler> handleAddressBookChanged(AddressBookChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyAddressBookChanged.connect(\n+        return MakeHandler(m_wallet->NotifyAddressBookChanged.connect(\n             [fn](CWallet*, const CTxDestination& address, const std::string& label, bool is_mine,\n                 const std::string& purpose, ChangeType status) { fn(address, label, is_mine, purpose, status); }));\n     }\n     std::unique_ptr<Handler> handleTransactionChanged(TransactionChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyTransactionChanged.connect(\n+        return MakeHandler(m_wallet->NotifyTransactionChanged.connect(\n             [fn](CWallet*, const uint256& txid, ChangeType status) { fn(txid, status); }));\n     }\n     std::unique_ptr<Handler> handleWatchOnlyChanged(WatchOnlyChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyWatchonlyChanged.connect(fn));\n+        return MakeHandler(m_wallet->NotifyWatchonlyChanged.connect(fn));\n     }\n     std::unique_ptr<Handler> handleCanGetAddressesChanged(CanGetAddressesChangedFn fn) override\n     {\n-        return MakeHandler(m_wallet.NotifyCanGetAddressesChanged.connect(fn));\n+        return MakeHandler(m_wallet->NotifyCanGetAddressesChanged.connect(fn));\n     }\n \n-    std::shared_ptr<CWallet> m_shared_wallet;\n-    CWallet& m_wallet;\n+    std::shared_ptr<CWallet> m_wallet;\n };\n \n class WalletClientImpl : public ChainClient"
      }
    ]
  },
  {
    "sha": "169dced9a42bd741b3265adee23e6a8d1f852227",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjlkY2VkOWE0MmJkNzQxYjMyNjVhZGVlMjNlNmE4ZDFmODUyMjI3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-22T16:09:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-22T16:13:43Z"
      },
      "message": "Merge #15408: Remove unused TransactionError constants\n\nfa9b60c842 Remove unused TransactionError constants (MarcoFalke)\n\nPull request description:\n\n  Fixup to #14978, which introduced a bunch of unused enum values, such as `UNKNOWN_ERROR`, `ERROR_COUNT` and `TRANSACTION_ERR_LAST`. None of those have a meaning in the context of an `enum class`, where the compiler can infer if all cases have been covered in a switch-case.\n\n  Also, move the global `::maxTxFee` back to the rpc caller, so it can be set on a per call basis (in the future).\n\nTree-SHA512: 7f1e2d795f1c1278ecd54ddab2b92c2a862f3c637b482d1d008208925befa1c9dd4b3c4bb1bfcbc5ca4b66a41004aaf01ea96ea95236f944250b8a6cf99ff173",
      "tree": {
        "sha": "3391e5277947cb18b62abc2b1c4b8109a5f29ebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3391e5277947cb18b62abc2b1c4b8109a5f29ebe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/169dced9a42bd741b3265adee23e6a8d1f852227",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJccB+4AAoJENLqSFDnUoslapQQALf+Icf1TVB95iNYb0jvDXYE\nbN44O5pMDThQZueeIXhHymfA3D4Jclv1DZCv7hNzVgmQe7zHZ75IZ6/3YKb0+0Ip\nqYE766Bj1W4XllXmiEDEPRwUXdJFgGkbMpNDghMFWUZe2iCbm6H7addKxeGUGai+\nYR0TRHnmAX/yAntwJbIhCh4CzdNlhWXvcL3OGdle8kRGah6oOvDhDn8tIfM6nCf3\ni41JVEpOn0fvnKI4Y0bSr64szJtEaG/XZqW4npyW6WtSDcfHNIcqp5zp0PBZjT/p\niHHmWwoTQNVso0r6zopsyjeQnddPl6die845J0OxZVg1/TmatZVgo8J6eMggORQo\neGjGj7tuhcy3siuQdgZ1wr2XQE51Ew3BAl6T5A5Pxxwepy3wzZWqReBU1rEIqSyj\n0zEOWK7mfmmNCL+C23Hy8B40FcOrK/gxxllJTFO6iihEEaAUCXF/5bellIpKix8E\nTzK6jfYoEskzszjKP2h0eQA8QnLOYjmgUXsWRDIokMM2+wAjN1Hk5QAA9lWmoQiU\nudQLHnTrxlI8sMgDaefxOuRY340uS4pKFefvmdkUaOW63MceBgSiXMl8helBENwu\nfUE+hNgDhJ+toF4cHBAiJdlnicjk9ygTrBwUTn9UcFwLVbqMa9enDZp0DaM+9faj\nxbDwaariRRKppnngNjSq\n=xaOq\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIF21D64eFLi0hV7w51dKySViAbj7sr2zyxpfkhvnMFutCP/wEBFwxTydHO3l\nxMUEqGl1L+YI8QRccB+68Ah+VKQmjAnISwCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQN6472nKC1tCtBjvU\nSpBOyAjxBFxwH7nwCAXT8nGqb+ilAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t//AQ9cbf9qMpncH7wp7IjKDVuwjwEAFsd+MJPQoE\nmeAueSvT0VsI8QRccB+68AicAB4ueMyZiACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQ+kw3t+ms7q+VSvs6Y9w08Qjx\nBFxwH7rwCBJLQ60A0WIMAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 3391e5277947cb18b62abc2b1c4b8109a5f29ebe\nparent 77fcf252f65e7005da13784333147439fd432af6\nparent fa9b60c842741dc92a33925fca5796ebaa4510bd\nauthor MarcoFalke <falke.marco@gmail.com> 1550851784 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550852023 -0500\n\nMerge #15408: Remove unused TransactionError constants\n\nfa9b60c842 Remove unused TransactionError constants (MarcoFalke)\n\nPull request description:\n\n  Fixup to #14978, which introduced a bunch of unused enum values, such as `UNKNOWN_ERROR`, `ERROR_COUNT` and `TRANSACTION_ERR_LAST`. None of those have a meaning in the context of an `enum class`, where the compiler can infer if all cases have been covered in a switch-case.\n\n  Also, move the global `::maxTxFee` back to the rpc caller, so it can be set on a per call basis (in the future).\n\nTree-SHA512: 7f1e2d795f1c1278ecd54ddab2b92c2a862f3c637b482d1d008208925befa1c9dd4b3c4bb1bfcbc5ca4b66a41004aaf01ea96ea95236f944250b8a6cf99ff173\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169dced9a42bd741b3265adee23e6a8d1f852227",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/169dced9a42bd741b3265adee23e6a8d1f852227",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169dced9a42bd741b3265adee23e6a8d1f852227/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77fcf252f65e7005da13784333147439fd432af6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77fcf252f65e7005da13784333147439fd432af6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77fcf252f65e7005da13784333147439fd432af6"
      },
      {
        "sha": "fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9b60c842741dc92a33925fca5796ebaa4510bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9b60c842741dc92a33925fca5796ebaa4510bd"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 45,
      "deletions": 70
    },
    "files": [
      {
        "sha": "7b9b4310e7a6c38587c3cb7d9ca70b2deabeba77",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 26,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169dced9a42bd741b3265adee23e6a8d1f852227/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=169dced9a42bd741b3265adee23e6a8d1f852227",
        "patch": "@@ -12,7 +12,7 @@\n \n #include <future>\n \n-const char* TransactionErrorString(const TransactionError err)\n+std::string TransactionErrorString(const TransactionError err)\n {\n     switch (err) {\n         case TransactionError::OK:\n@@ -33,22 +33,16 @@ const char* TransactionErrorString(const TransactionError err)\n             return \"PSBTs not compatible (different transactions)\";\n         case TransactionError::SIGHASH_MISMATCH:\n             return \"Specified sighash value does not match existing value\";\n-\n-        case TransactionError::UNKNOWN_ERROR:\n-        default: break;\n+        // no default case, so the compiler can warn about missing cases\n     }\n-    return \"Unknown error\";\n+    assert(false);\n }\n \n-bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, TransactionError& error, std::string& err_string, const bool allowhighfees)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, std::string& err_string, const CAmount& highfee)\n {\n     std::promise<void> promise;\n     hashTx = tx->GetHash();\n \n-    CAmount nMaxRawTxFee = maxTxFee;\n-    if (allowhighfees)\n-        nMaxRawTxFee = 0;\n-\n     { // cs_main scope\n     LOCK(cs_main);\n     CCoinsViewCache &view = *pcoinsTip;\n@@ -63,19 +57,16 @@ bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, Transaction\n         CValidationState state;\n         bool fMissingInputs;\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n+                                nullptr /* plTxnReplaced */, false /* bypass_limits */, highfee)) {\n             if (state.IsInvalid()) {\n                 err_string = FormatStateMessage(state);\n-                error = TransactionError::MEMPOOL_REJECTED;\n-                return false;\n+                return TransactionError::MEMPOOL_REJECTED;\n             } else {\n                 if (fMissingInputs) {\n-                    error = TransactionError::MISSING_INPUTS;\n-                    return false;\n+                    return TransactionError::MISSING_INPUTS;\n                 }\n                 err_string = FormatStateMessage(state);\n-                error = TransactionError::MEMPOOL_ERROR;\n-                return false;\n+                return TransactionError::MEMPOOL_ERROR;\n             }\n         } else {\n             // If wallet is enabled, ensure that the wallet has been made aware\n@@ -88,8 +79,7 @@ bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, Transaction\n             });\n         }\n     } else if (fHaveChain) {\n-        error = TransactionError::ALREADY_IN_CHAIN;\n-        return false;\n+        return TransactionError::ALREADY_IN_CHAIN;\n     } else {\n         // Make sure we don't block forever if re-sending\n         // a transaction already in mempool.\n@@ -100,16 +90,14 @@ bool BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, Transaction\n \n     promise.get_future().wait();\n \n-    if(!g_connman) {\n-        error = TransactionError::P2P_DISABLED;\n-        return false;\n+    if (!g_connman) {\n+        return TransactionError::P2P_DISABLED;\n     }\n \n     CInv inv(MSG_TX, hashTx);\n-    g_connman->ForEachNode([&inv](CNode* pnode)\n-    {\n+    g_connman->ForEachNode([&inv](CNode* pnode) {\n         pnode->PushInventory(inv);\n     });\n \n-    return true;\n-    }\n+    return TransactionError::OK;\n+}"
      },
      {
        "sha": "3457ececa4cebe37f27c0b5551866c894e1dcd93",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169dced9a42bd741b3265adee23e6a8d1f852227/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=169dced9a42bd741b3265adee23e6a8d1f852227",
        "patch": "@@ -1,17 +1,16 @@\n-// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_NODE_TRANSACTION_H\n #define BITCOIN_NODE_TRANSACTION_H\n \n+#include <attributes.h>\n #include <primitives/transaction.h>\n #include <uint256.h>\n \n enum class TransactionError {\n-    OK = 0,\n-    UNKNOWN_ERROR,\n-\n+    OK, //!< No error\n     MISSING_INPUTS,\n     ALREADY_IN_CHAIN,\n     P2P_DISABLED,\n@@ -20,24 +19,19 @@ enum class TransactionError {\n     INVALID_PSBT,\n     PSBT_MISMATCH,\n     SIGHASH_MISMATCH,\n-\n-    ERROR_COUNT\n };\n \n-#define TRANSACTION_ERR_LAST TransactionError::ERROR_COUNT\n-\n-const char* TransactionErrorString(const TransactionError error);\n+std::string TransactionErrorString(const TransactionError error);\n \n /**\n  * Broadcast a transaction\n  *\n  * @param[in]  tx the transaction to broadcast\n  * @param[out] &txid the txid of the transaction, if successfully broadcast\n- * @param[out] &error reference to UniValue to fill with error info on failure\n  * @param[out] &err_string reference to std::string to fill with error string if available\n- * @param[in]  allowhighfees whether to allow fees exceeding maxTxFee\n- * return true on success, false on error (and fills in `error`)\n+ * @param[in]  highfee Reject txs with fees higher than this (if 0, accept any fee)\n+ * return error\n  */\n-bool BroadcastTransaction(CTransactionRef tx, uint256& txid, TransactionError& error, std::string& err_string, bool allowhighfees = false);\n+NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, uint256& txid, std::string& err_string, const CAmount& highfee);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "0fb7d49d7daeb864b43add7dcafd1a5150f138dd",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169dced9a42bd741b3265adee23e6a8d1f852227/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=169dced9a42bd741b3265adee23e6a8d1f852227",
        "patch": "@@ -309,21 +309,19 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n     return true;\n }\n \n-bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs)\n+TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs)\n {\n     out = psbtxs[0]; // Copy the first one\n \n     // Merge\n     for (auto it = std::next(psbtxs.begin()); it != psbtxs.end(); ++it) {\n         if (!out.Merge(*it)) {\n-            error = TransactionError::PSBT_MISMATCH;\n-            return false;\n+            return TransactionError::PSBT_MISMATCH;\n         }\n     }\n     if (!out.IsSane()) {\n-        error = TransactionError::INVALID_PSBT;\n-        return false;\n+        return TransactionError::INVALID_PSBT;\n     }\n \n-    return true;\n+    return TransactionError::OK;\n }"
      },
      {
        "sha": "c889dad361cda57178f04287440c5dc7bd0a349a",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169dced9a42bd741b3265adee23e6a8d1f852227/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=169dced9a42bd741b3265adee23e6a8d1f852227",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -575,10 +575,9 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n  * Combines PSBTs with the same underlying transaction, resulting in a single PSBT with all partial signatures from each input.\n  *\n  * @param[out] &out   the combined PSBT, if successful\n- * @param[out] &error reference to TransactionError to fill with error info on failure\n  * @param[in]  psbtxs the PSBTs to combine\n- * @return True if we successfully combined the transactions, false if they were not compatible\n+ * @return error (OK if we successfully combined the transactions, other error if they were not compatible)\n  */\n-bool CombinePSBTs(PartiallySignedTransaction& out, TransactionError& error, const std::vector<PartiallySignedTransaction>& psbtxs);\n+NODISCARD TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n \n #endif // BITCOIN_PSBT_H"
      },
      {
        "sha": "5a714a137e10aff1404739e8dd8aa0c69735233f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169dced9a42bd741b3265adee23e6a8d1f852227/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=169dced9a42bd741b3265adee23e6a8d1f852227",
        "patch": "@@ -1065,10 +1065,11 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n     bool allowhighfees = false;\n     if (!request.params[1].isNull()) allowhighfees = request.params[1].get_bool();\n+    const CAmount highfee{allowhighfees ? 0 : ::maxTxFee};\n     uint256 txid;\n-    TransactionError err;\n     std::string err_string;\n-    if (!BroadcastTransaction(tx, txid, err, err_string, allowhighfees)) {\n+    const TransactionError err = BroadcastTransaction(tx, txid, err_string, highfee);\n+    if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }\n \n@@ -1493,8 +1494,8 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n     }\n \n     PartiallySignedTransaction merged_psbt;\n-    TransactionError error;\n-    if (!CombinePSBTs(merged_psbt, error, psbtxs)) {\n+    const TransactionError error = CombinePSBTs(merged_psbt, psbtxs);\n+    if (error != TransactionError::OK) {\n         throw JSONRPCTransactionError(error);\n     }\n "
      },
      {
        "sha": "1b17b09763460ff2b86100f3bc0bcadcf369221a",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169dced9a42bd741b3265adee23e6a8d1f852227/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=169dced9a42bd741b3265adee23e6a8d1f852227",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <wallet/psbtwallet.h>\n \n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, TransactionError& error, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n+TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs)\n {\n     LOCK(pwallet->cs_wallet);\n     // Get all of the previous transactions\n@@ -19,8 +19,7 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, Transac\n \n         // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n         if (!input.IsSane()) {\n-            error = TransactionError::INVALID_PSBT;\n-            return false;\n+            return TransactionError::INVALID_PSBT;\n         }\n \n         // If we have no utxo, grab it from the wallet.\n@@ -37,8 +36,7 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, Transac\n \n         // Get the Sighash type\n         if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            error = TransactionError::SIGHASH_MISMATCH;\n-            return false;\n+            return TransactionError::SIGHASH_MISMATCH;\n         }\n \n         complete &= SignPSBTInput(HidingSigningProvider(pwallet, !sign, !bip32derivs), psbtx, i, sighash_type);\n@@ -58,5 +56,5 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, Transac\n         psbt_out.FromSignatureData(sigdata);\n     }\n \n-    return true;\n+    return TransactionError::OK;\n }"
      },
      {
        "sha": "a24a0967d2d6bcbc5c34d3dd98d0003e9afd9fde",
        "filename": "src/wallet/psbtwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169dced9a42bd741b3265adee23e6a8d1f852227/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=169dced9a42bd741b3265adee23e6a8d1f852227",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,16 +18,14 @@\n  *\n  * @param[in]  pwallet pointer to a wallet\n  * @param[in]  &psbtx reference to PartiallySignedTransaction to fill in\n- * @param[out] &error reference to UniValue to fill with error info on failure\n  * @param[out] &complete indicates whether the PSBT is now complete\n  * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n  * @param[in]  sign whether to sign or not\n  * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n- * return true on success, false on error (and fills in `error`)\n+ * return error\n  */\n-bool FillPSBT(const CWallet* pwallet,\n+NODISCARD TransactionError FillPSBT(const CWallet* pwallet,\n               PartiallySignedTransaction& psbtx,\n-              TransactionError& error,\n               bool& complete,\n               int sighash_type = 1 /* SIGHASH_ALL */,\n               bool sign = true,"
      },
      {
        "sha": "97c6c38be11d2ae2f1a783aab51f5d0bf7334af8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169dced9a42bd741b3265adee23e6a8d1f852227/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=169dced9a42bd741b3265adee23e6a8d1f852227",
        "patch": "@@ -4007,8 +4007,8 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n     bool complete = true;\n-    TransactionError err;\n-    if (!FillPSBT(pwallet, psbtx, err, complete, nHashType, sign, bip32derivs)) {\n+    const TransactionError err = FillPSBT(pwallet, psbtx, complete, nHashType, sign, bip32derivs);\n+    if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n \n@@ -4125,8 +4125,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n     bool complete = true;\n-    TransactionError err;\n-    if (!FillPSBT(pwallet, psbtx, err, complete, 1, false, bip32derivs)) {\n+    const TransactionError err = FillPSBT(pwallet, psbtx, complete, 1, false, bip32derivs);\n+    if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }\n "
      },
      {
        "sha": "789e86e21b442c6f1266d47556ee2259b44e5736",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169dced9a42bd741b3265adee23e6a8d1f852227/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169dced9a42bd741b3265adee23e6a8d1f852227/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=169dced9a42bd741b3265adee23e6a8d1f852227",
        "patch": "@@ -62,9 +62,8 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     ssData >> psbtx;\n \n     // Fill transaction with our data\n-    TransactionError err;\n     bool complete = true;\n-    FillPSBT(&m_wallet, psbtx, err, complete, SIGHASH_ALL, false, true);\n+    BOOST_REQUIRE_EQUAL(TransactionError::OK, FillPSBT(&m_wallet, psbtx, complete, SIGHASH_ALL, false, true));\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      }
    ]
  },
  {
    "sha": "80f52a2267f44a9cae4440615df3ff989be1579c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGY1MmEyMjY3ZjQ0YTljYWU0NDQwNjE1ZGYzZmY5ODliZTE1Nzlj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T22:13:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of CheckFinalTx in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "4497a03d9034c0d81400ce97ec9d80ce146c31fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4497a03d9034c0d81400ce97ec9d80ce146c31fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80f52a2267f44a9cae4440615df3ff989be1579c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f52a2267f44a9cae4440615df3ff989be1579c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80f52a2267f44a9cae4440615df3ff989be1579c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f52a2267f44a9cae4440615df3ff989be1579c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "c7c2d4e91c3bdf0a4b9e2661ce8d3d6ebb55495b",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -8,6 +8,7 @@\n #include <chainparams.h>\n #include <primitives/block.h>\n #include <sync.h>\n+#include <threadsafety.h>\n #include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -132,6 +133,11 @@ class LockImpl : public Chain::Lock\n         }\n         return nullopt;\n     }\n+    bool checkFinalTx(const CTransaction& tx) override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        return CheckFinalTx(tx);\n+    }\n };\n \n class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>"
      },
      {
        "sha": "453938751dda76808b96c184a96754c955efbdd7",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -14,6 +14,7 @@\n \n class CBlock;\n class CScheduler;\n+class CTransaction;\n class uint256;\n struct CBlockLocator;\n \n@@ -102,6 +103,9 @@ class Chain\n         //! is guaranteed to be an ancestor of the block used to create the\n         //! locator.\n         virtual Optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n+\n+        //! Check if transaction will be final given chain height current time.\n+        virtual bool checkFinalTx(const CTransaction& tx) = 0;\n     };\n \n     //! Return Lock interface. Chain is locked when this is called, and"
      },
      {
        "sha": "e870d3d537701043f14c2a0e3fccef7c5cb13791",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -99,7 +99,7 @@ WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, co\n //! Construct wallet tx status struct.\n WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n+    LockAnnotation lock(::cs_main); // Temporary, for mapBlockIndex below. Removed in upcoming commit.\n \n     WalletTxStatus result;\n     auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n@@ -109,7 +109,7 @@ WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const C\n     result.depth_in_main_chain = wtx.GetDepthInMainChain(locked_chain);\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n-    result.is_final = CheckFinalTx(*wtx.tx);\n+    result.is_final = locked_chain.checkFinalTx(*wtx.tx);\n     result.is_trusted = wtx.IsTrusted(locked_chain);\n     result.is_abandoned = wtx.isAbandoned();\n     result.is_coinbase = wtx.IsCoinBase();"
      },
      {
        "sha": "eae0be86d327539c04bdff9bcfe5e8bfbd56aada",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -607,7 +607,6 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -630,7 +629,7 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx))\n             continue;\n \n         for (const CTxOut& txout : wtx.tx->vout)\n@@ -679,7 +678,6 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -696,7 +694,7 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx))\n             continue;\n \n         for (const CTxOut& txout : wtx.tx->vout)\n@@ -1051,8 +1049,6 @@ struct tallyitem\n \n static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n-\n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (!params[0].isNull())\n@@ -1083,7 +1079,7 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * co\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n \n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx))\n             continue;\n \n         int nDepth = wtx.GetDepthInMainChain(locked_chain);"
      },
      {
        "sha": "eb99c6cd77b322505bb208f2bcb10354b184f680",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80f52a2267f44a9cae4440615df3ff989be1579c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80f52a2267f44a9cae4440615df3ff989be1579c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=80f52a2267f44a9cae4440615df3ff989be1579c",
        "patch": "@@ -2075,10 +2075,8 @@ bool CWalletTx::InMempool() const\n \n bool CWalletTx::IsTrusted(interfaces::Chain::Lock& locked_chain) const\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n-\n     // Quick answer in most cases\n-    if (!CheckFinalTx(*tx))\n+    if (!locked_chain.checkFinalTx(*tx))\n         return false;\n     int nDepth = GetDepthInMainChain(locked_chain);\n     if (nDepth >= 1)\n@@ -2263,15 +2261,14 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n // trusted.\n CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth) const\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n     CAmount balance = 0;\n     for (const auto& entry : mapWallet) {\n         const CWalletTx& wtx = entry.second;\n         const int depth = wtx.GetDepthInMainChain(*locked_chain);\n-        if (depth < 0 || !CheckFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase(*locked_chain)) {\n+        if (depth < 0 || !locked_chain->checkFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase(*locked_chain)) {\n             continue;\n         }\n \n@@ -2325,7 +2322,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         const uint256& wtxid = entry.first;\n         const CWalletTx* pcoin = &entry.second;\n \n-        if (!CheckFinalTx(*pcoin->tx))\n+        if (!locked_chain.checkFinalTx(*pcoin->tx))\n             continue;\n \n         if (pcoin->IsImmatureCoinBase(locked_chain))"
      }
    ]
  },
  {
    "sha": "bdc6628683197945326cbdfea3f53ec0b7d1949f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGM2NjI4NjgzMTk3OTQ1MzI2Y2JkZmVhM2Y1M2VjMGI3ZDE5NDlm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:25:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of IsRBFOptIn in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "242a847bbb66dde5ca29834418f1df247b6afd74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/242a847bbb66dde5ca29834418f1df247b6afd74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdc6628683197945326cbdfea3f53ec0b7d1949f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc6628683197945326cbdfea3f53ec0b7d1949f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdc6628683197945326cbdfea3f53ec0b7d1949f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc6628683197945326cbdfea3f53ec0b7d1949f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80f52a2267f44a9cae4440615df3ff989be1579c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80f52a2267f44a9cae4440615df3ff989be1579c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80f52a2267f44a9cae4440615df3ff989be1579c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7cab303aadf9bcbaad1bd31c1bfcd528c30fc182",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "patch": "@@ -6,9 +6,11 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <policy/rbf.h>\n #include <primitives/block.h>\n #include <sync.h>\n #include <threadsafety.h>\n+#include <txmempool.h>\n #include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -183,6 +185,11 @@ class ChainImpl : public Chain\n         LOCK(cs_main);\n         return GuessVerificationProgress(Params().TxData(), LookupBlockIndex(block_hash));\n     }\n+    RBFTransactionState isRBFOptIn(const CTransaction& tx) override\n+    {\n+        LOCK(::mempool.cs);\n+        return IsRBFOptIn(tx, ::mempool);\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "486f1ea16972845f7163b61c0aeb34b92b72636c",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "patch": "@@ -5,7 +5,8 @@\n #ifndef BITCOIN_INTERFACES_CHAIN_H\n #define BITCOIN_INTERFACES_CHAIN_H\n \n-#include <optional.h>\n+#include <optional.h>               // For Optional and nullopt\n+#include <policy/rbf.h>             // For RBFTransactionState\n \n #include <memory>\n #include <stdint.h>\n@@ -131,6 +132,9 @@ class Chain\n     //! Estimate fraction of total transactions verified if blocks up to\n     //! the specified block hash are verified.\n     virtual double guessVerificationProgress(const uint256& block_hash) = 0;\n+\n+    //! Check if transaction is RBF opt in.\n+    virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "72177995350b383c525bcee4b6bf6c78b094d4db",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc6628683197945326cbdfea3f53ec0b7d1949f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "patch": "@@ -124,8 +124,7 @@ static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& lo\n     // Add opt-in RBF status\n     std::string rbfStatus = \"no\";\n     if (confirms <= 0) {\n-        LOCK(mempool.cs);\n-        RBFTransactionState rbfState = IsRBFOptIn(*wtx.tx, mempool);\n+        RBFTransactionState rbfState = chain.isRBFOptIn(*wtx.tx);\n         if (rbfState == RBFTransactionState::UNKNOWN)\n             rbfStatus = \"unknown\";\n         else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125)"
      }
    ]
  },
  {
    "sha": "291276f7f40df9fcd62e54c016953705bf0ed04a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTEyNzZmN2Y0MGRmOWZjZDYyZTU0YzAxNjk1MzcwNWJmMGVkMDRh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:29:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of GetCountWithDescendants in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "bd5e5f8280ff559fe2a8eb84538655957619136b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd5e5f8280ff559fe2a8eb84538655957619136b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/291276f7f40df9fcd62e54c016953705bf0ed04a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291276f7f40df9fcd62e54c016953705bf0ed04a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/291276f7f40df9fcd62e54c016953705bf0ed04a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291276f7f40df9fcd62e54c016953705bf0ed04a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc6628683197945326cbdfea3f53ec0b7d1949f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdc6628683197945326cbdfea3f53ec0b7d1949f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8c5921970b01503cae2781d4015d637b96ba6be3",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291276f7f40df9fcd62e54c016953705bf0ed04a/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291276f7f40df9fcd62e54c016953705bf0ed04a/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=291276f7f40df9fcd62e54c016953705bf0ed04a",
        "patch": "@@ -190,6 +190,12 @@ class ChainImpl : public Chain\n         LOCK(::mempool.cs);\n         return IsRBFOptIn(tx, ::mempool);\n     }\n+    bool hasDescendantsInMempool(const uint256& txid) override\n+    {\n+        LOCK(::mempool.cs);\n+        auto it_mp = ::mempool.mapTx.find(txid);\n+        return it_mp != ::mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1;\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "aa4f17a8ec01ec2f4054bb731d104901299ff898",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291276f7f40df9fcd62e54c016953705bf0ed04a/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291276f7f40df9fcd62e54c016953705bf0ed04a/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=291276f7f40df9fcd62e54c016953705bf0ed04a",
        "patch": "@@ -135,6 +135,9 @@ class Chain\n \n     //! Check if transaction is RBF opt in.\n     virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;\n+\n+    //! Check if transaction has descendants in mempool.\n+    virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "f4b419ca2a1f863e5fad3204d7eda13de1ca20d6",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291276f7f40df9fcd62e54c016953705bf0ed04a/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291276f7f40df9fcd62e54c016953705bf0ed04a/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=291276f7f40df9fcd62e54c016953705bf0ed04a",
        "patch": "@@ -27,9 +27,7 @@ static feebumper::Result PreconditionChecks(interfaces::Chain::Lock& locked_chai\n     }\n \n     {\n-        LOCK(mempool.cs);\n-        auto it_mp = mempool.mapTx.find(wtx.GetHash());\n-        if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n+        if (wallet->chain().hasDescendantsInMempool(wtx.GetHash())) {\n             errors.push_back(\"Transaction has descendants in the mempool\");\n             return feebumper::Result::INVALID_PARAMETER;\n         }"
      }
    ]
  },
  {
    "sha": "cd32160af0528cc746968ee0eadf4f63c98665f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDMyMTYwYWYwNTI4Y2M3NDY5NjhlZTBlYWRmNGY2M2M5ODY2NWYy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:42:27Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of GetTransactionAncestry in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "38c2df53e845cb7c3206507ca23d7a5d59a75e72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38c2df53e845cb7c3206507ca23d7a5d59a75e72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd32160af0528cc746968ee0eadf4f63c98665f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd32160af0528cc746968ee0eadf4f63c98665f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd32160af0528cc746968ee0eadf4f63c98665f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd32160af0528cc746968ee0eadf4f63c98665f2/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "291276f7f40df9fcd62e54c016953705bf0ed04a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291276f7f40df9fcd62e54c016953705bf0ed04a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/291276f7f40df9fcd62e54c016953705bf0ed04a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d7bad0543cee2e316126e847b505c4794bae47e7",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd32160af0528cc746968ee0eadf4f63c98665f2/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd32160af0528cc746968ee0eadf4f63c98665f2/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=cd32160af0528cc746968ee0eadf4f63c98665f2",
        "patch": "@@ -196,6 +196,10 @@ class ChainImpl : public Chain\n         auto it_mp = ::mempool.mapTx.find(txid);\n         return it_mp != ::mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1;\n     }\n+    void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n+    {\n+        ::mempool.GetTransactionAncestry(txid, ancestors, descendants);\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "33bbfefd9f3d6c9a8a33d11961b1729e066d054d",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd32160af0528cc746968ee0eadf4f63c98665f2/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd32160af0528cc746968ee0eadf4f63c98665f2/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=cd32160af0528cc746968ee0eadf4f63c98665f2",
        "patch": "@@ -9,6 +9,7 @@\n #include <policy/rbf.h>             // For RBFTransactionState\n \n #include <memory>\n+#include <stddef.h>\n #include <stdint.h>\n #include <string>\n #include <vector>\n@@ -138,6 +139,9 @@ class Chain\n \n     //! Check if transaction has descendants in mempool.\n     virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n+\n+    //! Calculate mempool ancestor and descendant counts for the given transaction.\n+    virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "a77b1c60f2b772bbd878ac523575bf61e42a207b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd32160af0528cc746968ee0eadf4f63c98665f2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd32160af0528cc746968ee0eadf4f63c98665f2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cd32160af0528cc746968ee0eadf4f63c98665f2",
        "patch": "@@ -4528,7 +4528,7 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n             CInputCoin input_coin = output.GetInputCoin();\n \n             size_t ancestors, descendants;\n-            mempool.GetTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+            chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n             if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n                 // Limit output groups to no more than 10 entries, to protect\n                 // against inadvertently creating a too-large transaction"
      }
    ]
  },
  {
    "sha": "1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmIwYTRhMDRlOWNkYTE5ZWQ1YWQwNDY5NGEzOWM4M2M5MWI2MDcy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:45:45Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of CalculateMemPoolAncestors in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "5b09b20818eea283c6fa782662f0fbef6ced776b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b09b20818eea283c6fa782662f0fbef6ced776b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd32160af0528cc746968ee0eadf4f63c98665f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd32160af0528cc746968ee0eadf4f63c98665f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd32160af0528cc746968ee0eadf4f63c98665f2"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c12215cd606e1dd8b45e0a33faf653aa494fb6e5",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "patch": "@@ -200,6 +200,20 @@ class ChainImpl : public Chain\n     {\n         ::mempool.GetTransactionAncestry(txid, ancestors, descendants);\n     }\n+    bool checkChainLimits(CTransactionRef tx) override\n+    {\n+        LockPoints lp;\n+        CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n+        CTxMemPool::setEntries ancestors;\n+        auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        std::string unused_error_string;\n+        LOCK(::mempool.cs);\n+        return ::mempool.CalculateMemPoolAncestors(entry, ancestors, limit_ancestor_count, limit_ancestor_size,\n+            limit_descendant_count, limit_descendant_size, unused_error_string);\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "2e0328eb25bd8587a930c329a744b1fa3dfea2a5",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "patch": "@@ -142,6 +142,9 @@ class Chain\n \n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n+\n+    //! Check chain limits.\n+    virtual bool checkChainLimits(CTransactionRef tx) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "5c95c7ec61407a0de9616b2a1ce32531f08b5a55",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "patch": "@@ -3127,16 +3127,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n     if (gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n-        LockPoints lp;\n-        CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n-        CTxMemPool::setEntries setAncestors;\n-        size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n-        size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n-        std::string errString;\n-        LOCK(::mempool.cs);\n-        if (!::mempool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n+        if (!chain().checkChainLimits(tx)) {\n             strFailReason = _(\"Transaction has too long of a mempool chain\");\n             return false;\n         }"
      }
    ]
  },
  {
    "sha": "cc02c796d3517931acc861b0f9bc50e36e1c95f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzAyYzc5NmQzNTE3OTMxYWNjODYxYjBmOWJjNTBlMzZlMWM5NWY5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T01:40:29Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of fee globals in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "adc01a513b50ceed34412f362644999de61ff561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adc01a513b50ceed34412f362644999de61ff561"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc02c796d3517931acc861b0f9bc50e36e1c95f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc02c796d3517931acc861b0f9bc50e36e1c95f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc02c796d3517931acc861b0f9bc50e36e1c95f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc02c796d3517931acc861b0f9bc50e36e1c95f9/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fb0a4a04e9cda19ed5ad04694a39c83c91b6072"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 54,
      "deletions": 36
    },
    "files": [
      {
        "sha": "f88860687923739371421627eb3fed53aa8586be",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -6,6 +6,8 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/block.h>\n #include <sync.h>\n@@ -214,6 +216,18 @@ class ChainImpl : public Chain\n         return ::mempool.CalculateMemPoolAncestors(entry, ancestors, limit_ancestor_count, limit_ancestor_size,\n             limit_descendant_count, limit_descendant_size, unused_error_string);\n     }\n+    CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc) override\n+    {\n+        return ::feeEstimator.estimateSmartFee(num_blocks, calc, conservative);\n+    }\n+    unsigned int estimateMaxBlocks() override\n+    {\n+        return ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    }\n+    CFeeRate mempoolMinFee() override\n+    {\n+        return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    }\n };\n \n } // namespace"
      },
      {
        "sha": "d0f74cb100c21f05a4770a207d0a8801fdc18014",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -19,6 +19,7 @@ class CScheduler;\n class CTransaction;\n class uint256;\n struct CBlockLocator;\n+struct FeeCalculation;\n \n namespace interfaces {\n \n@@ -145,6 +146,15 @@ class Chain\n \n     //! Check chain limits.\n     virtual bool checkChainLimits(CTransactionRef tx) = 0;\n+\n+    //! Estimate smart fee.\n+    virtual CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc = nullptr) = 0;\n+\n+    //! Fee estimator max target.\n+    virtual unsigned int estimateMaxBlocks() = 0;\n+\n+    //! Pool min fee.\n+    virtual CFeeRate mempoolMinFee() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "f3a0b416dbeebd86012de779ab9e9f22a9f0455a",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -457,7 +457,7 @@ class WalletImpl : public Wallet\n     {\n         FeeCalculation fee_calc;\n         CAmount result;\n-        result = GetMinimumFee(*m_wallet, tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc);\n+        result = GetMinimumFee(*m_wallet, tx_bytes, coin_control, &fee_calc);\n         if (returned_target) *returned_target = fee_calc.returnedTarget;\n         if (reason) *reason = fee_calc.reason;\n         return result;"
      },
      {
        "sha": "f2acb8fbf59773ff556698fb1986158b3a1f9036",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -843,7 +843,8 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n     bool conservative = true;\n     if (!request.params[1].isNull()) {\n         FeeEstimateMode fee_mode;\n@@ -915,7 +916,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n     double threshold = 0.95;\n     if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();"
      },
      {
        "sha": "fb048311de08258d3af2217f2f57e5c0404593a5",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -4,11 +4,9 @@\n \n #include <key_io.h>\n #include <keystore.h>\n-#include <policy/fees.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n-#include <validation.h>\n \n InitInterfaces* g_rpc_interfaces = nullptr;\n \n@@ -130,10 +128,9 @@ UniValue DescribeAddress(const CTxDestination& dest)\n     return boost::apply_visitor(DescribeAddressVisitor(), dest);\n }\n \n-unsigned int ParseConfirmTarget(const UniValue& value)\n+unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target)\n {\n     int target = value.get_int();\n-    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     if (target < 1 || (unsigned int)target > max_target) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n     }"
      },
      {
        "sha": "e1a5491def2d246bbffc0bfe0907c7b8249481d5",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -33,7 +33,7 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n UniValue DescribeAddress(const CTxDestination& dest);\n \n //! Parse a confirm target option and raise an RPC error if it is invalid.\n-unsigned int ParseConfirmTarget(const UniValue& value);\n+unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target);\n \n RPCErrorCode RPCErrorFromTransactionError(TransactionError terr);\n UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string = \"\");"
      },
      {
        "sha": "dd4b2fad4bee96fc03d4e08369864519e74f4de6",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -144,7 +144,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         new_fee = total_fee;\n         nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n     } else {\n-        new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, nullptr /* FeeCalculation */);\n         nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n@@ -195,7 +195,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n \n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n-    if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet, ::feeEstimator))) {\n+    if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet))) {\n         wallet->WalletLogPrintf(\"Bumping fee and discarding dust output\\n\");\n         new_fee += poutput->nValue;\n         mtx.vout.erase(mtx.vout.begin() + nOutput);"
      },
      {
        "sha": "545adaebc18c97450343fa3dd7706354c3ea3bac",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -6,7 +6,6 @@\n #include <wallet/fees.h>\n \n #include <policy/policy.h>\n-#include <txmempool.h>\n #include <util/system.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n@@ -19,9 +18,9 @@ CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes)\n }\n \n \n-CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)\n+CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, FeeCalculation* feeCalc)\n {\n-    CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, pool, estimator, feeCalc).GetFee(nTxBytes);\n+    CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, feeCalc).GetFee(nTxBytes);\n     // Always obey the maximum\n     if (fee_needed > maxTxFee) {\n         fee_needed = maxTxFee;\n@@ -35,7 +34,7 @@ CFeeRate GetRequiredFeeRate(const CWallet& wallet)\n     return std::max(wallet.m_min_fee, ::minRelayTxFee);\n }\n \n-CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)\n+CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, FeeCalculation* feeCalc)\n {\n     /* User control of how to calculate fee uses the following parameter precedence:\n        1. coin_control.m_feerate\n@@ -64,7 +63,7 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n         if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n         else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n \n-        feerate_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate);\n+        feerate_needed = wallet.chain().estimateSmartFee(target, conservative_estimate, feeCalc);\n         if (feerate_needed == CFeeRate(0)) {\n             // if we don't have enough data for estimateSmartFee, then use fallback fee\n             feerate_needed = wallet.m_fallback_fee;\n@@ -74,7 +73,7 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n             if (wallet.m_fallback_fee == CFeeRate(0)) return feerate_needed;\n         }\n         // Obey mempool min fee when using smart fee estimation\n-        CFeeRate min_mempool_feerate = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        CFeeRate min_mempool_feerate = wallet.chain().mempoolMinFee();\n         if (feerate_needed < min_mempool_feerate) {\n             feerate_needed = min_mempool_feerate;\n             if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n@@ -90,10 +89,10 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n     return feerate_needed;\n }\n \n-CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator)\n+CFeeRate GetDiscardRate(const CWallet& wallet)\n {\n-    unsigned int highest_target = estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n-    CFeeRate discard_rate = estimator.estimateSmartFee(highest_target, nullptr /* FeeCalculation */, false /* conservative */);\n+    unsigned int highest_target = wallet.chain().estimateMaxBlocks();\n+    CFeeRate discard_rate = wallet.chain().estimateSmartFee(highest_target, false /* conservative */);\n     // Don't let discard_rate be greater than longest possible fee estimate if we get a valid fee estimate\n     discard_rate = (discard_rate == CFeeRate(0)) ? wallet.m_discard_rate : std::min(discard_rate, wallet.m_discard_rate);\n     // Discard rate must be at least dustRelayFee"
      },
      {
        "sha": "434f211dc243c15be2c05e981497267eec766d99",
        "filename": "src/wallet/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.h?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -8,10 +8,8 @@\n \n #include <amount.h>\n \n-class CBlockPolicyEstimator;\n class CCoinControl;\n class CFeeRate;\n-class CTxMemPool;\n class CWallet;\n struct FeeCalculation;\n \n@@ -25,7 +23,7 @@ CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes);\n  * Estimate the minimum fee considering user set parameters\n  * and the required fee\n  */\n-CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);\n+CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, FeeCalculation* feeCalc);\n \n /**\n  * Return the minimum required feerate taking into account the\n@@ -37,11 +35,11 @@ CFeeRate GetRequiredFeeRate(const CWallet& wallet);\n  * Estimate the minimum fee rate considering user set parameters\n  * and the required fee\n  */\n-CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);\n+CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, FeeCalculation* feeCalc);\n \n /**\n  * Return the maximum feerate for discarding change.\n  */\n-CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator);\n+CFeeRate GetDiscardRate(const CWallet& wallet);\n \n #endif // BITCOIN_WALLET_FEES_H"
      },
      {
        "sha": "09e91dc58808ce712b742c0f7f6e5cfe0f6c80bc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -424,7 +424,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     if (!request.params[6].isNull()) {\n-        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6], pwallet->chain().estimateMaxBlocks());\n     }\n \n     if (!request.params[7].isNull()) {\n@@ -884,7 +884,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     }\n \n     if (!request.params[6].isNull()) {\n-        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6], pwallet->chain().estimateMaxBlocks());\n     }\n \n     if (!request.params[7].isNull()) {\n@@ -2989,7 +2989,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             if (options.exists(\"feeRate\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate\");\n             }\n-            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"]);\n+            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"], pwallet->chain().estimateMaxBlocks());\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (options.exists(\"feeRate\")) {\n@@ -3279,7 +3279,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n         } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n-            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"]);\n+            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"], pwallet->chain().estimateMaxBlocks());\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n             if (totalFee <= 0) {"
      },
      {
        "sha": "75681e2007eca3941a1c937fb2a9f74ee108f563",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -2485,10 +2485,10 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         FeeCalculation feeCalc;\n         CCoinControl temp;\n         temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, ::mempool, ::feeEstimator, &feeCalc);\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n         // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this, ::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n         // Filter by the min conf specs and add to utxo_pool and calculate effective value\n         for (OutputGroup& group : groups) {\n@@ -2858,10 +2858,10 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n \n-            CFeeRate discard_rate = GetDiscardRate(*this, ::feeEstimator);\n+            CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n \n             nFeeRet = 0;\n             bool pick_new_inputs = true;\n@@ -2994,7 +2994,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     return false;\n                 }\n \n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n                 if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n                     // eventually allow a fallback fee\n                     strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n@@ -3022,7 +3022,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     // change output. Only try this once.\n                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n                         unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, ::mempool, ::feeEstimator, nullptr);\n+                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n                         CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n                             pick_new_inputs = false;"
      },
      {
        "sha": "f215765dab5e81cdd68937de997560d08bdf23c0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc02c796d3517931acc861b0f9bc50e36e1c95f9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "patch": "@@ -100,8 +100,6 @@ class CCoinControl;\n class COutput;\n class CReserveKey;\n class CScript;\n-class CTxMemPool;\n-class CBlockPolicyEstimator;\n class CWalletTx;\n struct FeeCalculation;\n enum class FeeEstimateMode;"
      }
    ]
  },
  {
    "sha": "cc3836e8f90894432db06d9de6b20eac53d93cbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzM4MzZlOGY5MDg5NDQzMmRiMDZkOWRlNmIyMGVhYzUzZDkzY2Jl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T02:45:01Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of fPruneMode in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "25b167f26fa6a1bc1123fec1e9e8b9d5e2968faa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25b167f26fa6a1bc1123fec1e9e8b9d5e2968faa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc3836e8f90894432db06d9de6b20eac53d93cbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc3836e8f90894432db06d9de6b20eac53d93cbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc3836e8f90894432db06d9de6b20eac53d93cbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc3836e8f90894432db06d9de6b20eac53d93cbe/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc02c796d3517931acc861b0f9bc50e36e1c95f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc02c796d3517931acc861b0f9bc50e36e1c95f9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bb2af5b8ba5f2a18b4803886569eb100cd3f55b7",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "patch": "@@ -228,6 +228,7 @@ class ChainImpl : public Chain\n     {\n         return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n+    bool getPruneMode() override { return ::fPruneMode; }\n };\n \n } // namespace"
      },
      {
        "sha": "96e4f8cf0bb506e70b7c19f4c1ebb23465afeb6b",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "patch": "@@ -155,6 +155,9 @@ class Chain\n \n     //! Pool min fee.\n     virtual CFeeRate mempoolMinFee() = 0;\n+\n+    //! Check if pruning is enabled.\n+    virtual bool getPruneMode() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "046a6567a5d8ee27e49ae514669790c02a23c0af",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "patch": "@@ -157,7 +157,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (!request.params[2].isNull())\n             fRescan = request.params[2].get_bool();\n \n-        if (fRescan && fPruneMode)\n+        if (fRescan && pwallet->chain().getPruneMode())\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n         if (fRescan && !reserver.reserve()) {\n@@ -313,7 +313,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n+    if (fRescan && pwallet->chain().getPruneMode())\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     WalletRescanReserver reserver(pwallet);\n@@ -501,7 +501,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n+    if (fRescan && pwallet->chain().getPruneMode())\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     WalletRescanReserver reserver(pwallet);\n@@ -562,7 +562,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    if (fPruneMode)\n+    if (pwallet->chain().getPruneMode())\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n \n     WalletRescanReserver reserver(pwallet);"
      },
      {
        "sha": "a0718309b92791c311dbf74190391a9128d19249",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc3836e8f90894432db06d9de6b20eac53d93cbe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "patch": "@@ -4334,7 +4334,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n         //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n-        if (fPruneMode)\n+        if (chain.getPruneMode())\n         {\n             int block_height = *tip_height;\n             while (block_height > 0 && locked_chain->haveBlockOnDisk(block_height - 1) && rescan_height != block_height) {"
      }
    ]
  },
  {
    "sha": "00dfb2a440b94a24b61cafb519fb122f6a0ae176",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGRmYjJhNDQwYjk0YTI0YjYxY2FmYjUxOWZiMTIyZjZhMGFlMTc2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T02:50:07Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of g_connman in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "203e03944bd1a1975671bf2faa0f16b6cf0d22eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/203e03944bd1a1975671bf2faa0f16b6cf0d22eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00dfb2a440b94a24b61cafb519fb122f6a0ae176",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dfb2a440b94a24b61cafb519fb122f6a0ae176",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00dfb2a440b94a24b61cafb519fb122f6a0ae176",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dfb2a440b94a24b61cafb519fb122f6a0ae176/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc3836e8f90894432db06d9de6b20eac53d93cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc3836e8f90894432db06d9de6b20eac53d93cbe"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 17,
      "deletions": 6
    },
    "files": [
      {
        "sha": "650e347da3858d8de26cb7bd962373f31223ef44",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -562,16 +562,20 @@ bitcoin_wallet_LDADD = \\\n   $(LIBBITCOIN_WALLET_TOOL) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_ZMQ) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\\n-  $(LIBSECP256K1)\n+  $(LIBSECP256K1) \\\n+  $(LIBUNIVALUE)\n \n-bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS) $(ZMQ_LIBS)\n #\n \n # bitcoinconsensus library #"
      },
      {
        "sha": "829e6446436af56970eef56a3e23e4c5fe66f2c3",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -37,6 +37,8 @@ nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n@@ -57,7 +59,7 @@ if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n endif\n \n-bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)"
      },
      {
        "sha": "8493c5de70b9f96612c5410fa1aca7fda6d6eabf",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <net.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -229,6 +230,7 @@ class ChainImpl : public Chain\n         return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     bool getPruneMode() override { return ::fPruneMode; }\n+    bool p2pEnabled() override { return g_connman != nullptr; }\n };\n \n } // namespace"
      },
      {
        "sha": "44a0b1743ed66e94e03096e0d01af99a81438f3f",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -158,6 +158,9 @@ class Chain\n \n     //! Check if pruning is enabled.\n     virtual bool getPruneMode() = 0;\n+\n+    //! Check if p2p enabled.\n+    virtual bool p2pEnabled() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "6e11fe936c02ab9d9ce26c1c65512424f7cb9227",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dfb2a440b94a24b61cafb519fb122f6a0ae176/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "patch": "@@ -318,7 +318,7 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n     if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    if (pwallet->GetBroadcastTransactions() && !g_connman) {\n+    if (pwallet->GetBroadcastTransactions() && !pwallet->chain().p2pEnabled()) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n@@ -858,7 +858,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    if (pwallet->GetBroadcastTransactions() && !g_connman) {\n+    if (pwallet->GetBroadcastTransactions() && !pwallet->chain().p2pEnabled()) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n@@ -2690,7 +2690,7 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n              }.ToString()\n             );\n \n-    if (!g_connman)\n+    if (!pwallet->chain().p2pEnabled())\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     auto locked_chain = pwallet->chain().lock();"
      }
    ]
  },
  {
    "sha": "6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDZiY2M3N2MwNThmYmNmZDM5YzdlMzA1MGJiZTgyZmM4OTAyNGNm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-28T23:34:54Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of g_connman / PushInventory in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "c1c287c2912931607c545c5875029a64c65265f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1c287c2912931607c545c5875029a64c65265f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dfb2a440b94a24b61cafb519fb122f6a0ae176",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00dfb2a440b94a24b61cafb519fb122f6a0ae176"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 26,
      "deletions": 21
    },
    "files": [
      {
        "sha": "4abb1e638fa354e6bdd43d668e72582e4a1f2029",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -11,6 +11,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/block.h>\n+#include <protocol.h>\n #include <sync.h>\n #include <threadsafety.h>\n #include <txmempool.h>\n@@ -199,6 +200,11 @@ class ChainImpl : public Chain\n         auto it_mp = ::mempool.mapTx.find(txid);\n         return it_mp != ::mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1;\n     }\n+    void relayTransaction(const uint256& txid) override\n+    {\n+        CInv inv(MSG_TX, txid);\n+        g_connman->ForEachNode([&inv](CNode* node) { node->PushInventory(inv); });\n+    }\n     void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n     {\n         ::mempool.GetTransactionAncestry(txid, ancestors, descendants);"
      },
      {
        "sha": "b4a458cba6b75375a1f0749d3678835d088ac535",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -141,6 +141,9 @@ class Chain\n     //! Check if transaction has descendants in mempool.\n     virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n \n+    //! Relay transaction.\n+    virtual void relayTransaction(const uint256& txid) = 0;\n+\n     //! Calculate mempool ancestor and descendant counts for the given transaction.\n     virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n "
      },
      {
        "sha": "7abbee0912f0d2f54cf1f35f3e431e0ca7ceb933",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -56,7 +56,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n         auto locked_chain = m_wallet.chain().lock();\n         LOCK(m_wallet.cs_wallet);\n         CValidationState state;\n-        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, g_connman.get(), state)) {\n+        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, state)) {\n             reject_reason = state.GetRejectReason();\n             return false;\n         }"
      },
      {
        "sha": "a1c3a21d4b186e61b974d9fcd39036c8e98ecaca",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -245,7 +245,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n \n     CReserveKey reservekey(wallet);\n     CValidationState state;\n-    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, reservekey, g_connman.get(), state)) {\n+    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, reservekey, state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n         errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;"
      },
      {
        "sha": "8d1bd3a16962102fbfe35d0d7531aaf148c4a1bc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -340,7 +340,7 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, reservekey, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, reservekey, state)) {\n         strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n@@ -946,7 +946,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, keyChange, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, keyChange, state)) {\n         strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n@@ -2700,7 +2700,7 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\");\n     }\n \n-    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(*locked_chain, GetTime(), g_connman.get());\n+    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(*locked_chain, GetTime());\n     UniValue result(UniValue::VARR);\n     for (const uint256& txid : txids)\n     {"
      },
      {
        "sha": "af57dbf5f6dbe25ab9d24f69a4edc29ac82c1742",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -368,7 +368,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         CCoinControl dummy;\n         BOOST_CHECK(wallet->CreateTransaction(*m_locked_chain, {recipient}, tx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n-        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservekey, nullptr, state));\n+        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservekey, state));\n         CMutableTransaction blocktx;\n         {\n             LOCK(wallet->cs_wallet);"
      },
      {
        "sha": "8746fb556b6a934932ecb4e4d18a4f09200a81f1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -1890,7 +1890,7 @@ void CWallet::ReacceptWalletTransactions()\n     }\n }\n \n-bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CConnman* connman)\n+bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain)\n {\n     assert(pwallet->GetBroadcastTransactions());\n     if (!IsCoinBase() && !isAbandoned() && GetDepthInMainChain(locked_chain) == 0)\n@@ -1899,12 +1899,8 @@ bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CC\n         /* GetDepthInMainChain already catches known conflicts. */\n         if (InMempool() || AcceptToMemoryPool(locked_chain, maxTxFee, state)) {\n             pwallet->WalletLogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n-            if (connman) {\n-                CInv inv(MSG_TX, GetHash());\n-                connman->ForEachNode([&inv](CNode* pnode)\n-                {\n-                    pnode->PushInventory(inv);\n-                });\n+            if (pwallet->chain().p2pEnabled()) {\n+                pwallet->chain().relayTransaction(GetHash());\n                 return true;\n             }\n         }\n@@ -2113,7 +2109,7 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime, CConnman* connman)\n+std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime)\n {\n     std::vector<uint256> result;\n \n@@ -2132,7 +2128,7 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::\n     for (const std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n-        if (wtx.RelayWalletTransaction(locked_chain, connman))\n+        if (wtx.RelayWalletTransaction(locked_chain))\n             result.push_back(wtx.GetHash());\n     }\n     return result;\n@@ -2157,7 +2153,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n     // Rebroadcast unconfirmed txes older than 5 minutes before the last\n     // block was found:\n     auto locked_chain = chain().assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n-    std::vector<uint256> relayed = ResendWalletTransactionsBefore(*locked_chain, nBestBlockTime-5*60, connman);\n+    std::vector<uint256> relayed = ResendWalletTransactionsBefore(*locked_chain, nBestBlockTime-5*60);\n     if (!relayed.empty())\n         WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n }\n@@ -3147,7 +3143,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n+bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state)\n {\n     {\n         auto locked_chain = chain().lock();\n@@ -3188,7 +3184,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n                 WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n-                wtx.RelayWalletTransaction(*locked_chain, connman);\n+                wtx.RelayWalletTransaction(*locked_chain);\n             }\n         }\n     }"
      },
      {
        "sha": "41bb4bd8c727c095ee35f04dec6a7c03b6354b95",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "patch": "@@ -535,7 +535,7 @@ class CWalletTx : public CMerkleTx\n     int64_t GetTxTime() const;\n \n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n-    bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CConnman* connman);\n+    bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain);\n \n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n     bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state);\n@@ -944,7 +944,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n-    std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime, CConnman* connman);\n+    std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime);\n     CAmount GetBalance(const isminefilter& filter=ISMINE_SPENDABLE, const int min_depth=0) const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n@@ -969,7 +969,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n-    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n+    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state);\n \n     bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n     {"
      }
    ]
  },
  {
    "sha": "c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWU1OWE5NmE4NTYxYjZhMGJjYWJhMGVkZTJkNTNkYmFhYzExM2Iw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T02:54:31Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of GetAdjustedTime in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "6e2c080795bfea40396407131096fd04b9d5d44d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e2c080795bfea40396407131096fd04b9d5d44d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6bcc77c058fbcfd39c7e3050bbe82fc89024cf"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a654f55f5548d855ff121c7612da60566ce19ba5",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "patch": "@@ -14,6 +14,7 @@\n #include <protocol.h>\n #include <sync.h>\n #include <threadsafety.h>\n+#include <timedata.h>\n #include <txmempool.h>\n #include <uint256.h>\n #include <util/system.h>\n@@ -237,6 +238,7 @@ class ChainImpl : public Chain\n     }\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n+    int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n };\n \n } // namespace"
      },
      {
        "sha": "c5aa67d0d7618e1c0093cfc0bc44d1585e775e52",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "patch": "@@ -164,6 +164,9 @@ class Chain\n \n     //! Check if p2p enabled.\n     virtual bool p2pEnabled() = 0;\n+\n+    //! Get adjusted time.\n+    virtual int64_t getAdjustedTime() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "845210474589628605a9396a46e42a8aa5c2e233",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "patch": "@@ -940,7 +940,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     wtx.BindWallet(this);\n     bool fInsertedNew = ret.second;\n     if (fInsertedNew) {\n-        wtx.nTimeReceived = GetAdjustedTime();\n+        wtx.nTimeReceived = chain().getAdjustedTime();\n         wtx.nOrderPos = IncOrderPosNext(&batch);\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         wtx.nTimeSmart = ComputeTimeSmart(wtx);"
      }
    ]
  },
  {
    "sha": "e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmM4YmE5ZjZlNzgyZTI1NDViNzFlOWUzNGI5NjdjNjllMThjN2Yw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-29T02:59:47Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove uses of InitMessage/Warning/Error in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "b23691d11eac220ec44a617ecf9b32ce3cabb05a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b23691d11eac220ec44a617ecf9b32ce3cabb05a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5e59a96a8561b6a0bcaba0ede2d53dbaac113b0"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 56,
      "deletions": 39
    },
    "files": [
      {
        "sha": "4f60448958f3413b1fa89d99afdea93885ef5a49",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "patch": "@@ -16,6 +16,7 @@\n #include <threadsafety.h>\n #include <timedata.h>\n #include <txmempool.h>\n+#include <ui_interface.h>\n #include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -239,6 +240,9 @@ class ChainImpl : public Chain\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n+    void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n+    void initWarning(const std::string& message) override { InitWarning(message); }\n+    void initError(const std::string& message) override { InitError(message); }\n };\n \n } // namespace"
      },
      {
        "sha": "b1e3f5945261825166285d23fe8f8fbfcba4aa00",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "patch": "@@ -167,6 +167,15 @@ class Chain\n \n     //! Get adjusted time.\n     virtual int64_t getAdjustedTime() = 0;\n+\n+    //! Send init message.\n+    virtual void initMessage(const std::string& message) = 0;\n+\n+    //! Send init warning.\n+    virtual void initWarning(const std::string& message) = 0;\n+\n+    //! Send init error.\n+    virtual void initError(const std::string& message) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "7ad343c15fc873d5317151566416c8d87f67fe9e",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "patch": "@@ -138,12 +138,15 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n         if (error || !fs::exists(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            return false;\n         } else if (!fs::is_directory(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            return false;\n         // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version\n         } else if (!wallet_dir.is_absolute()) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            return false;\n         }\n         gArgs.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n     }\n@@ -164,14 +167,15 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         WalletLocation location(wallet_file);\n \n         if (!wallet_paths.insert(location.GetPath()).second) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+            chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+            return false;\n         }\n \n         std::string error_string;\n         std::string warning_string;\n         bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warning_string);\n-        if (!error_string.empty()) InitError(error_string);\n-        if (!warning_string.empty()) InitWarning(warning_string);\n+        if (!error_string.empty()) chain.initError(error_string);\n+        if (!warning_string.empty()) chain.initWarning(warning_string);\n         if (!verify_success) return false;\n     }\n "
      },
      {
        "sha": "2a1744fa6837e8354948aa6c0fe1015f7c750426",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "patch": "@@ -4087,17 +4087,17 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     std::vector<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n-        uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n+        chain.initMessage(_(\"Zapping all transactions from wallet...\"));\n \n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n             return nullptr;\n         }\n     }\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+    chain.initMessage(_(\"Loading wallet...\"));\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n@@ -4108,26 +4108,26 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n-            InitWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                         \" or address book entries might be missing or incorrect.\"),\n+            chain.initWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+                                          \" or address book entries might be missing or incorrect.\"),\n                 walletFile));\n         }\n         else if (nLoadWalletRet == DBErrors::TOO_NEW) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n         {\n-            InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n+            chain.initError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n             return nullptr;\n         }\n         else {\n-            InitError(strprintf(_(\"Error loading %s\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s\"), walletFile));\n             return nullptr;\n         }\n     }\n@@ -4146,7 +4146,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n-            InitError(_(\"Cannot downgrade wallet\"));\n+            chain.initError(_(\"Cannot downgrade wallet\"));\n             return nullptr;\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n@@ -4159,7 +4159,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n         int max_version = walletInstance->nWalletVersion;\n         if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >=FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            InitError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n+            chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n             return nullptr;\n         }\n \n@@ -4187,7 +4187,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n             if (!walletInstance->TopUpKeyPool()) {\n-                InitError(_(\"Unable to generate keys\"));\n+                chain.initError(_(\"Unable to generate keys\"));\n                 return nullptr;\n             }\n         }\n@@ -4211,42 +4211,42 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // Top up the keypool\n         if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n-            InitError(_(\"Unable to generate initial keys\"));\n+            chain.initError(_(\"Unable to generate initial keys\"));\n             return nullptr;\n         }\n \n         auto locked_chain = chain.assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n         walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n-        InitError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile));\n+        chain.initError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile));\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         LOCK(walletInstance->cs_KeyStore);\n         if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n-            InitWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n+            chain.initWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n         }\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n-        InitError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n+        chain.initError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n         return nullptr;\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n-        InitError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n+        chain.initError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n         return nullptr;\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n-            InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n+            chain.initError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n             return nullptr;\n         }\n         if (n > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n-                        _(\"This is the minimum transaction fee you pay on every transaction.\"));\n+            chain.initWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n+                              _(\"This is the minimum transaction fee you pay on every transaction.\"));\n         }\n         walletInstance->m_min_fee = CFeeRate(n);\n     }\n@@ -4255,41 +4255,41 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n-                        _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n+            chain.initWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n+                              _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         }\n         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n         walletInstance->m_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n     }\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n-                        _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n+            chain.initWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n+                              _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n         }\n         walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n     }\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n-            InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n+            chain.initError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n-                        _(\"This is the transaction fee you will pay if you send a transaction.\"));\n+            chain.initWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n+                              _(\"This is the transaction fee you will pay if you send a transaction.\"));\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < ::minRelayTxFee) {\n-            InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+            chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n                 gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n             return nullptr;\n         }\n@@ -4338,12 +4338,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             }\n \n             if (rescan_height != block_height) {\n-                InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+                chain.initError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n                 return nullptr;\n             }\n         }\n \n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        chain.initMessage(_(\"Rescanning...\"));\n         walletInstance->WalletLogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", *tip_height - rescan_height, rescan_height);\n \n         // No need to read and scan block if block was created before\n@@ -4358,7 +4358,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         {\n             WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), {} /* stop block */, reserver, true /* update */).status)) {\n-                InitError(_(\"Failed to rescan the wallet during initialization\"));\n+                chain.initError(_(\"Failed to rescan the wallet during initialization\"));\n                 return nullptr;\n             }\n         }"
      }
    ]
  },
  {
    "sha": "d02b34c8a8bd446c9620fe626b4379617f9a9639",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDJiMzRjOGE4YmQ0NDZjOTYyMGZlNjI2YjQzNzk2MTdmOWE5NjM5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-31T20:31:29Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of AcceptToMemoryPool in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "b782a9fcc3835c09f94e5a2d9d7060b46b4c9088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b782a9fcc3835c09f94e5a2d9d7060b46b4c9088"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d02b34c8a8bd446c9620fe626b4379617f9a9639",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02b34c8a8bd446c9620fe626b4379617f9a9639",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d02b34c8a8bd446c9620fe626b4379617f9a9639",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02b34c8a8bd446c9620fe626b4379617f9a9639/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2c8ba9f6e782e2545b71e9e34b967c69e18c7f0"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 26,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9f02514df3e097836126ecddecb850d337da1521",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "patch": "@@ -11,6 +11,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>\n #include <protocol.h>\n #include <sync.h>\n #include <threadsafety.h>\n@@ -146,6 +147,12 @@ class LockImpl : public Chain::Lock\n         LockAnnotation lock(::cs_main);\n         return CheckFinalTx(tx);\n     }\n+    bool submitToMemoryPool(CTransactionRef tx, CAmount absurd_fee, CValidationState& state) override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n+            false /* bypass limits */, absurd_fee);\n+    }\n };\n \n class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>\n@@ -237,6 +244,7 @@ class ChainImpl : public Chain\n     {\n         return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n+    CAmount maxTxFee() override { return ::maxTxFee; }\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }"
      },
      {
        "sha": "be486bd4fcef83a3a240157314aa61ad0fb80576",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <optional.h>               // For Optional and nullopt\n #include <policy/rbf.h>             // For RBFTransactionState\n+#include <primitives/transaction.h> // For CTransactionRef\n \n #include <memory>\n #include <stddef.h>\n@@ -16,7 +17,7 @@\n \n class CBlock;\n class CScheduler;\n-class CTransaction;\n+class CValidationState;\n class uint256;\n struct CBlockLocator;\n struct FeeCalculation;\n@@ -109,6 +110,10 @@ class Chain\n \n         //! Check if transaction will be final given chain height current time.\n         virtual bool checkFinalTx(const CTransaction& tx) = 0;\n+\n+        //! Add transaction to memory pool if the transaction fee is below the\n+        //! amount specified by absurd_fee (as a safeguard). */\n+        virtual bool submitToMemoryPool(CTransactionRef tx, CAmount absurd_fee, CValidationState& state) = 0;\n     };\n \n     //! Return Lock interface. Chain is locked when this is called, and\n@@ -159,6 +164,12 @@ class Chain\n     //! Pool min fee.\n     virtual CFeeRate mempoolMinFee() = 0;\n \n+    //! Get node max tx fee setting (-maxtxfee).\n+    //! This could be replaced by a per-wallet max fee, as proposed at\n+    //! https://github.com/bitcoin/bitcoin/issues/15355\n+    //! But for the time being, wallets call this to access the node setting.\n+    virtual CAmount maxTxFee() = 0;\n+\n     //! Check if pruning is enabled.\n     virtual bool getPruneMode() = 0;\n "
      },
      {
        "sha": "fb4bd8811fbde1bd34ce896309ba598ad5757af5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "patch": "@@ -1886,7 +1886,7 @@ void CWallet::ReacceptWalletTransactions()\n     for (const std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n         CValidationState state;\n-        wtx.AcceptToMemoryPool(*locked_chain, maxTxFee, state);\n+        wtx.AcceptToMemoryPool(*locked_chain, state);\n     }\n }\n \n@@ -1897,7 +1897,7 @@ bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain)\n     {\n         CValidationState state;\n         /* GetDepthInMainChain already catches known conflicts. */\n-        if (InMempool() || AcceptToMemoryPool(locked_chain, maxTxFee, state)) {\n+        if (InMempool() || AcceptToMemoryPool(locked_chain, state)) {\n             pwallet->WalletLogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n             if (pwallet->chain().p2pEnabled()) {\n                 pwallet->chain().relayTransaction(GetHash());\n@@ -3180,7 +3180,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtx.AcceptToMemoryPool(*locked_chain, maxTxFee, state)) {\n+            if (!wtx.AcceptToMemoryPool(*locked_chain, state)) {\n                 WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n@@ -4474,17 +4474,14 @@ bool CMerkleTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const\n     return GetBlocksToMaturity(locked_chain) > 0;\n }\n \n-bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state)\n+bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for AcceptToMemoryPool below. Removed in upcoming commit.\n-\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors\n     // because we think that this newly generated transaction's change is\n     // unavailable as we're not yet aware that it is in the mempool.\n-    bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n+    bool ret = locked_chain.submitToMemoryPool(tx, pwallet->chain().maxTxFee(), state);\n     fInMempool |= ret;\n     return ret;\n }"
      },
      {
        "sha": "3cfcf7a27d27ba5034b9660f04a81448cb1fe5d5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d02b34c8a8bd446c9620fe626b4379617f9a9639/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "patch": "@@ -538,7 +538,7 @@ class CWalletTx : public CMerkleTx\n     bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain);\n \n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state);\n+    bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state);\n \n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The annotation"
      }
    ]
  },
  {
    "sha": "318f41fb2cae0a46b4e4be49156562b8ed640f0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMThmNDFmYjJjYWUwYTQ2YjRlNGJlNDkxNTY1NjJiOGVkNjQwZjBj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-04-08T18:37:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "circular-dependencies: Avoid treating some .h/.cpp files as a unit\n\nThis avoids a bogus circular dependency error in the next commit:\n\ninterfaces/chain -> interfaces/wallet -> wallet/wallet -> interfaces/chain\n\nWhich is incorrect, because interfaces/chain.cpp depends only on the\ninterfaces/wallet.h file, not the interfaces/wallet.cpp file, and it is\nwrong to treat these as a unit. Inside the interfaces directory, .h files\ncontain abstract class definitions and .cpp files contain implementations of\nthose classes, so you don't need to link against .cpp files if you're only\nusing the abstract class definition in the .h file.\n\nAn alternative fix might be to rename all the cpp files in the interfaces\ndirectory like: chain.cpp->chain_impl.cpp, node.cpp->node_impl.cpp. But just\ngetting the linter to treat these files as independent dependencies seemed\nlike it would allow keeping code organization straightforward and avoiding\nthe need to rename things.",
      "tree": {
        "sha": "0eba3861ed4428126b2e068d79e93895375c8163",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0eba3861ed4428126b2e068d79e93895375c8163"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/318f41fb2cae0a46b4e4be49156562b8ed640f0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318f41fb2cae0a46b4e4be49156562b8ed640f0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/318f41fb2cae0a46b4e4be49156562b8ed640f0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318f41fb2cae0a46b4e4be49156562b8ed640f0c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d02b34c8a8bd446c9620fe626b4379617f9a9639",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d02b34c8a8bd446c9620fe626b4379617f9a9639"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2e4657f1dd5433ad130f06cdf4d1c64a33f75960",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/318f41fb2cae0a46b4e4be49156562b8ed640f0c/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/318f41fb2cae0a46b4e4be49156562b8ed640f0c/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=318f41fb2cae0a46b4e4be49156562b8ed640f0c",
        "patch": "@@ -8,9 +8,18 @@\n     'core_write.cpp': 'core_io.cpp',\n }\n \n+# Directories with header-based modules, where the assumption that .cpp files\n+# define functions and variables declared in corresponding .h files is\n+# incorrect.\n+HEADER_MODULE_PATHS = [\n+    'interfaces/'\n+]\n+\n def module_name(path):\n     if path in MAPPING:\n         path = MAPPING[path]\n+    if any(path.startswith(dirpath) for dirpath in HEADER_MODULE_PATHS):\n+        return path\n     if path.endswith(\".h\"):\n         return path[:-2]\n     if path.endswith(\".c\"):"
      }
    ]
  },
  {
    "sha": "1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTA2YTZmZGU0YmZkZTMxYTE2ZGU0NWU0Y2M4NGVkNWRhMDVjNWE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-04-08T18:37:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of uiInterface.LoadWallet in wallet code\n\nThis also changes the uiInterface.LoadWallet signal argument type from\nshared_ptr<CWallet> to unique_ptr<interfaces::Wallet> because CWallet is an\ninternal wallet class that shouldn't be used in non-wallet code (and also can't\nbe passed across process boundaries).\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "7d8168d42ef198f19f5f200833d22c77a6b0c86d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d8168d42ef198f19f5f200833d22c77a6b0c86d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "318f41fb2cae0a46b4e4be49156562b8ed640f0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318f41fb2cae0a46b4e4be49156562b8ed640f0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/318f41fb2cae0a46b4e4be49156562b8ed640f0c"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a2418e479356f970b6b0a052b3732cb890e7fa68",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -562,8 +562,6 @@ bitcoin_wallet_LDADD = \\\n   $(LIBBITCOIN_WALLET_TOOL) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n-  $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_UTIL) \\"
      },
      {
        "sha": "77fb416b9c6bdde3cf0bb533e108f5dd2e21b038",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -37,8 +37,6 @@ nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n-  $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\"
      },
      {
        "sha": "725b485e51e2991ad49f87a6999a61b09a401288",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <interfaces/wallet.h>\n #include <net.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -251,6 +252,7 @@ class ChainImpl : public Chain\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n     void initWarning(const std::string& message) override { InitWarning(message); }\n     void initError(const std::string& message) override { InitError(message); }\n+    void loadWallet(std::unique_ptr<Wallet> wallet) override { ::uiInterface.LoadWallet(wallet); }\n };\n \n } // namespace"
      },
      {
        "sha": "116656fef452608f3b56b57cd7bd78f78de0cff9",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -24,6 +24,8 @@ struct FeeCalculation;\n \n namespace interfaces {\n \n+class Wallet;\n+\n //! Interface for giving wallet processes access to blockchain state.\n class Chain\n {\n@@ -187,6 +189,9 @@ class Chain\n \n     //! Send init error.\n     virtual void initError(const std::string& message) = 0;\n+\n+    //! Send wallet load notification to the GUI.\n+    virtual void loadWallet(std::unique_ptr<Wallet> wallet) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "6f7dce0c24686eaa7014e16014d42facc1f39894",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -275,7 +275,7 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n     {\n-        return MakeHandler(::uiInterface.LoadWallet_connect([fn](std::shared_ptr<CWallet> wallet) { fn(MakeWallet(wallet)); }));\n+        return MakeHandler(::uiInterface.LoadWallet_connect([fn](std::unique_ptr<Wallet>& wallet) { fn(std::move(wallet)); }));\n     }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {"
      },
      {
        "sha": "16ab24686b11799c7268e9cfa70b7da51be04463",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -52,7 +52,7 @@ void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_s\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }\n-void CClientUIInterface::LoadWallet(std::shared_ptr<CWallet> wallet) { return g_ui_signals.LoadWallet(wallet); }\n+void CClientUIInterface::LoadWallet(std::unique_ptr<interfaces::Wallet>& wallet) { return g_ui_signals.LoadWallet(wallet); }\n void CClientUIInterface::ShowProgress(const std::string& title, int nProgress, bool resume_possible) { return g_ui_signals.ShowProgress(title, nProgress, resume_possible); }\n void CClientUIInterface::NotifyBlockTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyBlockTip(b, i); }\n void CClientUIInterface::NotifyHeaderTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyHeaderTip(b, i); }"
      },
      {
        "sha": "f1aebce3bb48a518fa7fe457816f0d06738f222f",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -11,14 +11,17 @@\n #include <stdint.h>\n #include <string>\n \n-class CWallet;\n class CBlockIndex;\n namespace boost {\n namespace signals2 {\n class connection;\n }\n } // namespace boost\n \n+namespace interfaces {\n+class Wallet;\n+} // namespace interfaces\n+\n /** General change type (added, updated, removed). */\n enum ChangeType\n {\n@@ -102,7 +105,7 @@ class CClientUIInterface\n     ADD_SIGNALS_DECL_WRAPPER(NotifyAlertChanged, void, );\n \n     /** A wallet has been loaded. */\n-    ADD_SIGNALS_DECL_WRAPPER(LoadWallet, void, std::shared_ptr<CWallet> wallet);\n+    ADD_SIGNALS_DECL_WRAPPER(LoadWallet, void, std::unique_ptr<interfaces::Wallet>& wallet);\n \n     /**\n      * Show progress e.g. for verifychain."
      },
      {
        "sha": "3d64adec53e64a76dd69a8140e0621d0d217009c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "patch": "@@ -12,6 +12,7 @@\n #include <consensus/validation.h>\n #include <fs.h>\n #include <interfaces/chain.h>\n+#include <interfaces/wallet.h>\n #include <key.h>\n #include <key_io.h>\n #include <keystore.h>\n@@ -4391,7 +4392,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    uiInterface.LoadWallet(walletInstance);\n+    chain.loadWallet(interfaces::MakeWallet(walletInstance));\n \n     // Register with the validation interface. It's ok to do this after rescan since we're still holding cs_main.\n     RegisterValidationInterface(walletInstance.get());"
      }
    ]
  },
  {
    "sha": "a1df1b48a80bf122efa73677ff72577ec0103a3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWRmMWI0OGE4MGJmMTIyZWZhNzM2NzdmZjcyNTc3ZWMwMTAzYTNi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-07-10T19:48:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Remove use of IsInitialBlockDownload in wallet code\n\nThis commit does not change behavior.",
      "tree": {
        "sha": "5e086560149e2d871a38d882dcc784f264b103fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e086560149e2d871a38d882dcc784f264b103fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1df1b48a80bf122efa73677ff72577ec0103a3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1df1b48a80bf122efa73677ff72577ec0103a3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1df1b48a80bf122efa73677ff72577ec0103a3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1df1b48a80bf122efa73677ff72577ec0103a3b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1106a6fde4bfde31a16de45e4cc84ed5da05c5a4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fb634e73da99e80b6f17918549351b2419611c71",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "patch": "@@ -248,6 +248,7 @@ class ChainImpl : public Chain\n     CAmount maxTxFee() override { return ::maxTxFee; }\n     bool getPruneMode() override { return ::fPruneMode; }\n     bool p2pEnabled() override { return g_connman != nullptr; }\n+    bool isInitialBlockDownload() override { return IsInitialBlockDownload(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n     void initWarning(const std::string& message) override { InitWarning(message); }"
      },
      {
        "sha": "60f8570e3666a22cc2456a13e8929d504b493646",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "patch": "@@ -178,6 +178,9 @@ class Chain\n     //! Check if p2p enabled.\n     virtual bool p2pEnabled() = 0;\n \n+    // Check if in IBD.\n+    virtual bool isInitialBlockDownload() = 0;\n+\n     //! Get adjusted time.\n     virtual int64_t getAdjustedTime() = 0;\n "
      },
      {
        "sha": "a30df9f037dad807ec71510c512e41dbd68ed722",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1df1b48a80bf122efa73677ff72577ec0103a3b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "patch": "@@ -3889,7 +3889,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             }.ToString());\n     }\n \n-    if (IsInitialBlockDownload()) {\n+    if (pwallet->chain().isInitialBlockDownload()) {\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");\n     }\n "
      }
    ]
  },
  {
    "sha": "f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2Y5YzFkZTE5ZTZkMjU0ZTBjM2EyNmNlN2EzZDhjZDU3ZmI3NjQx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-22T19:42:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Merge #15435: rpc: Add missing #include\n\n39e20fc54f Add missing #include. (Daniel Kraft)\n\nPull request description:\n\n  bd0dbe8763fc3029cf96531c9ccaba280b939445 introduced a dependency of `rpc/util.h` on `RPCErrorCode`, defined in `rpc/protocol.h`.  The latter file is only included from `rpc/util.cpp`, though.  This commit fixes the missing include, by moving the `#include` of `rpc/protocol.h` to `rpc/util.h`.\n\nTree-SHA512: 75c03cfadb28a309d6deb36feeb0ee6ce0b38e8a1176919bc611ea720feff8c42ec9ed0ac8ab74ba9c531a3b7ec9ccbed0c8692ebdf5f9fc17867b9750a1d9f6",
      "tree": {
        "sha": "409713c7af13fb66dbaead4a001f39f32d572c9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/409713c7af13fb66dbaead4a001f39f32d572c9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJccFDGAAoJENLqSFDnUosleHkP/1aOveidjSMHI+jeXWnU4z7s\nPvx+63icfs87keUygZWJ36vUAZwFWj+JkTU7PqWhLLCu2oJM9KYj8RSsoW+dGUfP\n+OA9VdnUYYLm8J+kwzCtRAob2V6jwhywTe9ud/f24TaYIZGvUjuWcUZ+cxMv1Q95\nXXCpaFVISPEGoZCzxu2/CNPN9g+xZwz2Uwcp+rR9xTfofzNZFXxMAyEHDXOpElfa\nFYgkWivUOpcp1HIf0pPQwG+u+wMvP4ZyfyYVWcy8FixQhMgAt0UYpFT15s4Uycqd\nWJ2FcLBXVojtTKyfofDGpmU599FjwtqVnPQS98lQEtZDVlzTiH2irTP5F7HNXNn+\nuM876QJZWh/j+eL4VKoT6PVMIO9TVafYUcGWZ54xvHiD8pWMDQS3rZ54ob7WwEWP\nIwt/PeBhdsmG5I9vCyWp2FsuxqDW6OD0b/FCLLY/jhJ9kLyFXiGxRpOae1zDrSmG\nL2aYxopb91x9yE8QXg1UGpthzD8ep/8NHCoyv/VQGzBeLMc8N+cT500o6MjeRdwM\nLeBSg46ug6nepu9eVr3Lza2sEWR5YxwtJ+OWqAtL3dZwtgDqNpbi49HTq8mUw/1F\nDLn3lDvt3OBioI6eIZmOJ/Xm0injJew3G2VXpfQ5mpQeUb1YePsImMaOPZJrMVe6\nkVdZVe/DpwCp3vuTdMfp\n=bq2V\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKOFSMb9ba8VFHeMdoyEXrSopptLlJ9WON6gyPshy14FCP/wEFyF0xH9nsv+\nFcaAdp4T1pYI8QRccFDJ8AhIxzRInviacgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEF+c63/GgMfGZa0mj/YWc00I8QRccFDJ\n8AhjYEN06vyKYQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEL4UcT/drjT5NeYRuTChh2oI8BDqL/ezAvXjRLnD\nn0C2reMsCPEEXHBQyfAIHAsVbR71OXgAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5\nLmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wENTt2gbO/enZyyXjYnMibwQI8QRc\ncFDJ8AjfLHLOOl/ingCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 409713c7af13fb66dbaead4a001f39f32d572c9a\nparent 169dced9a42bd741b3265adee23e6a8d1f852227\nparent 39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e\nauthor MarcoFalke <falke.marco@gmail.com> 1550864578 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550864582 -0500\n\nMerge #15435: rpc: Add missing #include\n\n39e20fc54f Add missing #include. (Daniel Kraft)\n\nPull request description:\n\n  bd0dbe8763fc3029cf96531c9ccaba280b939445 introduced a dependency of `rpc/util.h` on `RPCErrorCode`, defined in `rpc/protocol.h`.  The latter file is only included from `rpc/util.cpp`, though.  This commit fixes the missing include, by moving the `#include` of `rpc/protocol.h` to `rpc/util.h`.\n\nTree-SHA512: 75c03cfadb28a309d6deb36feeb0ee6ce0b38e8a1176919bc611ea720feff8c42ec9ed0ac8ab74ba9c531a3b7ec9ccbed0c8692ebdf5f9fc17867b9750a1d9f6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "169dced9a42bd741b3265adee23e6a8d1f852227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169dced9a42bd741b3265adee23e6a8d1f852227",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/169dced9a42bd741b3265adee23e6a8d1f852227"
      },
      {
        "sha": "39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39e20fc54ff1b57d6e046fc1215e2c2f7f89a97e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1eec916abfdba3a4d5bf6f4fe4b93fccdbbd8fd8",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "patch": "@@ -5,7 +5,6 @@\n #include <key_io.h>\n #include <keystore.h>\n #include <policy/fees.h>\n-#include <rpc/protocol.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>"
      },
      {
        "sha": "a83ae98b7e776f6ad31ae624bdd131d5faa30947",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <node/transaction.h>\n #include <pubkey.h>\n+#include <rpc/protocol.h>\n #include <script/standard.h>\n #include <univalue.h>\n "
      }
    ]
  },
  {
    "sha": "f7efd87c8fb49f82e268a95e989909d453500e2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2VmZDg3YzhmYjQ5ZjgyZTI2OGE5NWU5ODk5MDlkNDUzNTAwZTJi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-01T22:35:51Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-22T19:43:02Z"
      },
      "message": "Change brace formatting\n\nSuggested https://github.com/bitcoin/bitcoin/pull/15288#pullrequestreview-197915100",
      "tree": {
        "sha": "2299bb49eccb96210001211f8bca8031d1904ce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2299bb49eccb96210001211f8bca8031d1904ce9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7efd87c8fb49f82e268a95e989909d453500e2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7efd87c8fb49f82e268a95e989909d453500e2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7efd87c8fb49f82e268a95e989909d453500e2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7efd87c8fb49f82e268a95e989909d453500e2b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1df1b48a80bf122efa73677ff72577ec0103a3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1df1b48a80bf122efa73677ff72577ec0103a3b"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 23,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b8d5c9d0e11b75e1cb1c992a8f578ababf1e1fe1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f7efd87c8fb49f82e268a95e989909d453500e2b",
        "patch": "@@ -157,8 +157,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (!request.params[2].isNull())\n             fRescan = request.params[2].get_bool();\n \n-        if (fRescan && pwallet->chain().getPruneMode())\n+        if (fRescan && pwallet->chain().getPruneMode()) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+        }\n \n         if (fRescan && !reserver.reserve()) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n@@ -313,8 +314,9 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && pwallet->chain().getPruneMode())\n+    if (fRescan && pwallet->chain().getPruneMode()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     if (fRescan && !reserver.reserve()) {\n@@ -501,8 +503,9 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && pwallet->chain().getPruneMode())\n+    if (fRescan && pwallet->chain().getPruneMode()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     if (fRescan && !reserver.reserve()) {\n@@ -562,8 +565,9 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    if (pwallet->chain().getPruneMode())\n+    if (pwallet->chain().getPruneMode()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     if (!reserver.reserve()) {"
      },
      {
        "sha": "2e1fb50e70baca191bcb610cefb6089409e73d8f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f7efd87c8fb49f82e268a95e989909d453500e2b",
        "patch": "@@ -628,8 +628,9 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n             continue;\n+        }\n \n         for (const CTxOut& txout : wtx.tx->vout)\n             if (txout.scriptPubKey == scriptPubKey)\n@@ -693,8 +694,9 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n             continue;\n+        }\n \n         for (const CTxOut& txout : wtx.tx->vout)\n         {\n@@ -1078,8 +1080,9 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * co\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n \n-        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx)) {\n             continue;\n+        }\n \n         int nDepth = wtx.GetDepthInMainChain(locked_chain);\n         if (nDepth < nMinDepth)\n@@ -2690,8 +2693,9 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n              }.ToString()\n             );\n \n-    if (!pwallet->chain().p2pEnabled())\n+    if (!pwallet->chain().p2pEnabled()) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);"
      },
      {
        "sha": "daf99ad341e3ef195a9a2fd9a4b108f77e4c8ec6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7efd87c8fb49f82e268a95e989909d453500e2b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f7efd87c8fb49f82e268a95e989909d453500e2b",
        "patch": "@@ -2073,8 +2073,9 @@ bool CWalletTx::InMempool() const\n bool CWalletTx::IsTrusted(interfaces::Chain::Lock& locked_chain) const\n {\n     // Quick answer in most cases\n-    if (!locked_chain.checkFinalTx(*tx))\n+    if (!locked_chain.checkFinalTx(*tx)) {\n         return false;\n+    }\n     int nDepth = GetDepthInMainChain(locked_chain);\n     if (nDepth >= 1)\n         return true;\n@@ -2129,8 +2130,9 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::\n     for (const std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n-        if (wtx.RelayWalletTransaction(locked_chain))\n+        if (wtx.RelayWalletTransaction(locked_chain)) {\n             result.push_back(wtx.GetHash());\n+        }\n     }\n     return result;\n }\n@@ -2319,8 +2321,9 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         const uint256& wtxid = entry.first;\n         const CWalletTx* pcoin = &entry.second;\n \n-        if (!locked_chain.checkFinalTx(*pcoin->tx))\n+        if (!locked_chain.checkFinalTx(*pcoin->tx)) {\n             continue;\n+        }\n \n         if (pcoin->IsImmatureCoinBase(locked_chain))\n             continue;\n@@ -4331,8 +4334,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n         //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n-        if (chain.getPruneMode())\n-        {\n+        if (chain.getPruneMode()) {\n             int block_height = *tip_height;\n             while (block_height > 0 && locked_chain->haveBlockOnDisk(block_height - 1) && rescan_height != block_height) {\n                 --block_height;"
      }
    ]
  },
  {
    "sha": "62e7addb632cad77cbd5fbccbaee51c7b32505d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmU3YWRkYjYzMmNhZDc3Y2JkNWZiY2NiYWVlNTFjN2IzMjUwNWQw",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-09-01T22:18:02Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "util: Move CheckDiskSpace to util.",
      "tree": {
        "sha": "d1251329ff8b5fc6dd6c85a0fdee883d66736f0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1251329ff8b5fc6dd6c85a0fdee883d66736f0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62e7addb632cad77cbd5fbccbaee51c7b32505d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e7addb632cad77cbd5fbccbaee51c7b32505d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62e7addb632cad77cbd5fbccbaee51c7b32505d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e7addb632cad77cbd5fbccbaee51c7b32505d0/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 23,
      "deletions": 27
    },
    "files": [
      {
        "sha": "5111baddd2e3bb62f54b1adbf0e8881c2dff6c53",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -1675,11 +1675,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n     // ********************************************************* Step 11: import blocks\n \n-    if (!CheckDiskSpace(/* additional_bytes */ 0, /* blocks_dir */ false)) {\n+    if (!CheckDiskSpace(GetDataDir())) {\n         InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n         return false;\n     }\n-    if (!CheckDiskSpace(/* additional_bytes */ 0, /* blocks_dir */ true)) {\n+    if (!CheckDiskSpace(GetBlocksDir())) {\n         InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n         return false;\n     }"
      },
      {
        "sha": "3e6c2ae5d4aa491aea7fe086c18d9ec1cdadfdf5",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -135,6 +135,14 @@ bool DirIsWritable(const fs::path& directory)\n     return true;\n }\n \n+bool CheckDiskSpace(const fs::path& dir, uint64_t nAdditionalBytes)\n+{\n+    constexpr uint64_t nMinDiskSpace = 52428800; // 50 MiB\n+\n+    uint64_t nFreeBytesAvailable = fs::space(dir).available;\n+    return nFreeBytesAvailable >= nMinDiskSpace + nAdditionalBytes;\n+}\n+\n /**\n  * Interpret a string argument as a boolean.\n  *"
      },
      {
        "sha": "2a2ee9bc1dfbbbb509fd20c325d190952fe94c8c",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -72,6 +72,7 @@ bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name);\n bool DirIsWritable(const fs::path& directory);\n+bool CheckDiskSpace(const fs::path& dir, uint64_t nAdditionalBytes = 0);\n \n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks."
      },
      {
        "sha": "06e0e9929017af902c5b089eaa73978f1db98ffc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 20,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -2134,8 +2134,9 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         // Write blocks and block index to disk.\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n-            if (!CheckDiskSpace(0, true))\n-                return state.Error(\"out of disk space\");\n+            if (!CheckDiskSpace(GetBlocksDir())) {\n+                return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+            }\n             // First make sure all block and undo data is flushed to disk.\n             FlushBlockFile();\n             // Then update all block file information (which may refer to block and undo files).\n@@ -2168,8 +2169,9 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             // twice (once in the log, and once in the tables). This is already\n             // an overestimation, as most will delete an existing entry or\n             // overwrite one. Still, use a conservative safety factor of 2.\n-            if (!CheckDiskSpace(48 * 2 * 2 * pcoinsTip->GetCacheSize()))\n-                return state.Error(\"out of disk space\");\n+            if (!CheckDiskSpace(GetDataDir(), 48 * 2 * 2 * pcoinsTip->GetCacheSize())) {\n+                return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+            }\n             // Flush the chainstate (which may refer to block index entries).\n             if (!pcoinsTip->Flush())\n                 return AbortNode(state, \"Failed to write to coin database\");\n@@ -3014,7 +3016,7 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n         if (nNewChunks > nOldChunks) {\n             if (fPruneMode)\n                 fCheckForPruning = true;\n-            if (CheckDiskSpace(nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos, true)) {\n+            if (CheckDiskSpace(GetBlocksDir(), nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos)) {\n                 FILE *file = OpenBlockFile(pos);\n                 if (file) {\n                     LogPrintf(\"Pre-allocating up to position 0x%x in blk%05u.dat\\n\", nNewChunks * BLOCKFILE_CHUNK_SIZE, pos.nFile);\n@@ -3023,7 +3025,7 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n                 }\n             }\n             else\n-                return error(\"out of disk space\");\n+                return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n         }\n     }\n \n@@ -3047,16 +3049,17 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n     if (nNewChunks > nOldChunks) {\n         if (fPruneMode)\n             fCheckForPruning = true;\n-        if (CheckDiskSpace(nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos, true)) {\n+        if (CheckDiskSpace(GetBlocksDir(), nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos)) {\n             FILE *file = OpenUndoFile(pos);\n             if (file) {\n                 LogPrintf(\"Pre-allocating up to position 0x%x in rev%05u.dat\\n\", nNewChunks * UNDOFILE_CHUNK_SIZE, pos.nFile);\n                 AllocateFileRange(file, pos.nPos, nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos);\n                 fclose(file);\n             }\n         }\n-        else\n-            return state.Error(\"out of disk space\");\n+        else {\n+            return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+        }\n     }\n \n     return true;\n@@ -3763,17 +3766,6 @@ static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfte\n            nLastBlockWeCanPrune, count);\n }\n \n-bool CheckDiskSpace(uint64_t nAdditionalBytes, bool blocks_dir)\n-{\n-    uint64_t nFreeBytesAvailable = fs::space(blocks_dir ? GetBlocksDir() : GetDataDir()).available;\n-\n-    // Check for nMinDiskSpace bytes (currently 50MB)\n-    if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n-        return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n-\n-    return true;\n-}\n-\n static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n {\n     if (pos.IsNull())"
      },
      {
        "sha": "1beee7869fc2aae0b6d7bc18524f4911d8c018d1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e7addb632cad77cbd5fbccbaee51c7b32505d0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "patch": "@@ -181,9 +181,6 @@ extern arith_uint256 nMinimumChainWork;\n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n \n-/** Minimum disk space required - used in CheckDiskSpace() */\n-static const uint64_t nMinDiskSpace = 52428800;\n-\n /** Pruning-related variables and constants */\n /** True if any block files have ever been pruned. */\n extern bool fHavePruned;\n@@ -245,8 +242,6 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  */\n bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);\n \n-/** Check whether enough disk space is available for an incoming block */\n-bool CheckDiskSpace(uint64_t nAdditionalBytes = 0, bool blocks_dir = false);\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */"
      }
    ]
  },
  {
    "sha": "9183d6ef656c8f3ed406821b99827f9b5f047665",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTgzZDZlZjY1NmM4ZjNlZDQwNjgyMWI5OTgyN2Y5YjVmMDQ3NjY1",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:06:31Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "validation: Extract basic block file logic into FlatFileSeq class.",
      "tree": {
        "sha": "9357c0f274c933b4515af76f1cf62a8a89da9005",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9357c0f274c933b4515af76f1cf62a8a89da9005"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9183d6ef656c8f3ed406821b99827f9b5f047665",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9183d6ef656c8f3ed406821b99827f9b5f047665",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9183d6ef656c8f3ed406821b99827f9b5f047665",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9183d6ef656c8f3ed406821b99827f9b5f047665/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e7addb632cad77cbd5fbccbaee51c7b32505d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62e7addb632cad77cbd5fbccbaee51c7b32505d0"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 80,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2e297d3dac7dfacd15d0cd2c08405e36a9da897f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -128,6 +128,7 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n+  flatfile.h \\\n   fs.h \\\n   httprpc.h \\\n   httpserver.h \\\n@@ -247,6 +248,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   checkpoints.cpp \\\n   consensus/tx_verify.cpp \\\n+  flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   index/base.cpp \\"
      },
      {
        "sha": "c9ca9aa869209004c6e37174ae424ef949dbb9fb",
        "filename": "src/flatfile.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdexcept>\n+\n+#include <flatfile.h>\n+#include <tinyformat.h>\n+\n+FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n+    m_dir(std::move(dir)),\n+    m_prefix(prefix),\n+    m_chunk_size(chunk_size)\n+{\n+    if (chunk_size == 0) {\n+        throw std::invalid_argument(\"chunk_size must be positive\");\n+    }\n+}\n+\n+fs::path FlatFileSeq::FileName(const CDiskBlockPos& pos) const\n+{\n+    return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n+}"
      },
      {
        "sha": "9c7131d201f719e0148ea15b82bb75da5f013576",
        "filename": "src/flatfile.h",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_FLATFILE_H\n+#define BITCOIN_FLATFILE_H\n+\n+#include <chain.h>\n+#include <fs.h>\n+\n+/**\n+ * FlatFileSeq represents a sequence of numbered files storing raw data. This class facilitates\n+ * access to and efficient management of these files.\n+ */\n+class FlatFileSeq\n+{\n+private:\n+    const fs::path m_dir;\n+    const char* const m_prefix;\n+    const size_t m_chunk_size;\n+\n+public:\n+    /**\n+     * Constructor\n+     *\n+     * @param dir The base directory that all files live in.\n+     * @param prefix A short prefix given to all file names.\n+     * @param chunk_size Disk space is pre-allocated in multiples of this amount.\n+     */\n+    FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size);\n+\n+    /** Get the name of the file at the given position. */\n+    fs::path FileName(const CDiskBlockPos& pos) const;\n+};\n+\n+#endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "66c599565106a93d40ac35525b5cb15b8f3f731c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -673,7 +673,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n         int nFile = 0;\n         while (true) {\n             CDiskBlockPos pos(nFile, 0);\n-            if (!fs::exists(GetBlockPosFilename(pos, \"blk\")))\n+            if (!fs::exists(GetBlockPosFilename(pos)))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);\n             if (!file)"
      },
      {
        "sha": "3abe8b2fa1f978c88f94775e1d0518ad10831baa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -15,6 +15,7 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n+#include <flatfile.h>\n #include <hash.h>\n #include <index/txindex.h>\n #include <policy/fees.h>\n@@ -318,6 +319,8 @@ static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPr\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+static FlatFileSeq BlockFileSeq();\n+static FlatFileSeq UndoFileSeq();\n \n bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n@@ -3657,8 +3660,8 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n-        fs::remove(GetBlockPosFilename(pos, \"blk\"));\n-        fs::remove(GetBlockPosFilename(pos, \"rev\"));\n+        fs::remove(BlockFileSeq().FileName(pos));\n+        fs::remove(UndoFileSeq().FileName(pos));\n         LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n     }\n }\n@@ -3789,6 +3792,16 @@ static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fRe\n     return file;\n }\n \n+static FlatFileSeq BlockFileSeq()\n+{\n+    return FlatFileSeq(GetBlocksDir(), \"blk\", BLOCKFILE_CHUNK_SIZE);\n+}\n+\n+static FlatFileSeq UndoFileSeq()\n+{\n+    return FlatFileSeq(GetBlocksDir(), \"rev\", UNDOFILE_CHUNK_SIZE);\n+}\n+\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"blk\", fReadOnly);\n }\n@@ -3798,9 +3811,9 @@ static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"rev\", fReadOnly);\n }\n \n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos)\n {\n-    return GetBlocksDir() / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n+    return BlockFileSeq().FileName(pos);\n }\n \n CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)"
      },
      {
        "sha": "19f8e8ab7aff33f8e95e5122419e24e36ee6d66a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9183d6ef656c8f3ed406821b99827f9b5f047665/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9183d6ef656c8f3ed406821b99827f9b5f047665/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=9183d6ef656c8f3ed406821b99827f9b5f047665",
        "patch": "@@ -245,7 +245,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationS\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos);\n /** Import blocks from an external file */\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */"
      }
    ]
  },
  {
    "sha": "e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmQyYWJiOTlmZTM1M2ZmYzJmZjNiYzFmZjU3OGZhZDMxMDY1MzM1",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:14:22Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "validation: Refactor OpenDiskFile into method on FlatFileSeq.",
      "tree": {
        "sha": "d2085909eecec7d13d78cb111bc466fa4f072480",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2085909eecec7d13d78cb111bc466fa4f072480"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9183d6ef656c8f3ed406821b99827f9b5f047665",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9183d6ef656c8f3ed406821b99827f9b5f047665",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9183d6ef656c8f3ed406821b99827f9b5f047665"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 29,
      "deletions": 25
    },
    "files": [
      {
        "sha": "535f4eda910fe55363db13ec4522b0fb0835cfae",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "patch": "@@ -5,6 +5,7 @@\n #include <stdexcept>\n \n #include <flatfile.h>\n+#include <logging.h>\n #include <tinyformat.h>\n \n FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n@@ -21,3 +22,26 @@ fs::path FlatFileSeq::FileName(const CDiskBlockPos& pos) const\n {\n     return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n }\n+\n+FILE* FlatFileSeq::Open(const CDiskBlockPos& pos, bool fReadOnly)\n+{\n+    if (pos.IsNull())\n+        return nullptr;\n+    fs::path path = FileName(pos);\n+    fs::create_directories(path.parent_path());\n+    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n+    if (!file && !fReadOnly)\n+        file = fsbridge::fopen(path, \"wb+\");\n+    if (!file) {\n+        LogPrintf(\"Unable to open file %s\\n\", path.string());\n+        return nullptr;\n+    }\n+    if (pos.nPos) {\n+        if (fseek(file, pos.nPos, SEEK_SET)) {\n+            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+            fclose(file);\n+            return nullptr;\n+        }\n+    }\n+    return file;\n+}"
      },
      {
        "sha": "b1eea931400e36a8eb79077b23ffba3728e2dc79",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "patch": "@@ -31,6 +31,9 @@ class FlatFileSeq\n \n     /** Get the name of the file at the given position. */\n     fs::path FileName(const CDiskBlockPos& pos) const;\n+\n+    /** Open a handle to the file at the given position. */\n+    FILE* Open(const CDiskBlockPos& pos, bool fReadOnly = false);\n };\n \n #endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "41350635053ef2f5c47f1b8a98c036593c58d8de",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 25,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2d2abb99fe353ffc2ff3bc1ff578fad31065335/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "patch": "@@ -3769,29 +3769,6 @@ static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfte\n            nLastBlockWeCanPrune, count);\n }\n \n-static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n-{\n-    if (pos.IsNull())\n-        return nullptr;\n-    fs::path path = GetBlockPosFilename(pos, prefix);\n-    fs::create_directories(path.parent_path());\n-    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n-    if (!file && !fReadOnly)\n-        file = fsbridge::fopen(path, \"wb+\");\n-    if (!file) {\n-        LogPrintf(\"Unable to open file %s\\n\", path.string());\n-        return nullptr;\n-    }\n-    if (pos.nPos) {\n-        if (fseek(file, pos.nPos, SEEK_SET)) {\n-            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n-            fclose(file);\n-            return nullptr;\n-        }\n-    }\n-    return file;\n-}\n-\n static FlatFileSeq BlockFileSeq()\n {\n     return FlatFileSeq(GetBlocksDir(), \"blk\", BLOCKFILE_CHUNK_SIZE);\n@@ -3803,12 +3780,12 @@ static FlatFileSeq UndoFileSeq()\n }\n \n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n-    return OpenDiskFile(pos, \"blk\", fReadOnly);\n+    return BlockFileSeq().Open(pos, fReadOnly);\n }\n \n /** Open an undo file (rev?????.dat) */\n static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n-    return OpenDiskFile(pos, \"rev\", fReadOnly);\n+    return UndoFileSeq().Open(pos, fReadOnly);\n }\n \n fs::path GetBlockPosFilename(const CDiskBlockPos &pos)"
      }
    ]
  },
  {
    "sha": "992404b31ed2f8cabeed59d074552f0ae10fda94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTI0MDRiMzFlZDJmOGNhYmVlZDU5ZDA3NDU1MmYwYWUxMGZkYTk0",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:27:31Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "validation: Refactor block file pre-allocation into FlatFileSeq.",
      "tree": {
        "sha": "3213de9eb432c4ce86c87970dd2bde8905d1042d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3213de9eb432c4ce86c87970dd2bde8905d1042d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/992404b31ed2f8cabeed59d074552f0ae10fda94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992404b31ed2f8cabeed59d074552f0ae10fda94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/992404b31ed2f8cabeed59d074552f0ae10fda94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992404b31ed2f8cabeed59d074552f0ae10fda94/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2d2abb99fe353ffc2ff3bc1ff578fad31065335",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2d2abb99fe353ffc2ff3bc1ff578fad31065335"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 53,
      "deletions": 33
    },
    "files": [
      {
        "sha": "d9fd4041b77a93a878a08539f1804162f52759c3",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992404b31ed2f8cabeed59d074552f0ae10fda94/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992404b31ed2f8cabeed59d074552f0ae10fda94/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=992404b31ed2f8cabeed59d074552f0ae10fda94",
        "patch": "@@ -7,6 +7,7 @@\n #include <flatfile.h>\n #include <logging.h>\n #include <tinyformat.h>\n+#include <util/system.h>\n \n FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n     m_dir(std::move(dir)),\n@@ -45,3 +46,29 @@ FILE* FlatFileSeq::Open(const CDiskBlockPos& pos, bool fReadOnly)\n     }\n     return file;\n }\n+\n+size_t FlatFileSeq::Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space)\n+{\n+    out_of_space = false;\n+\n+    unsigned int n_old_chunks = (pos.nPos + m_chunk_size - 1) / m_chunk_size;\n+    unsigned int n_new_chunks = (pos.nPos + add_size + m_chunk_size - 1) / m_chunk_size;\n+    if (n_new_chunks > n_old_chunks) {\n+        size_t old_size = pos.nPos;\n+        size_t new_size = n_new_chunks * m_chunk_size;\n+        size_t inc_size = new_size - old_size;\n+\n+        if (CheckDiskSpace(m_dir, inc_size)) {\n+            FILE *file = Open(pos);\n+            if (file) {\n+                LogPrintf(\"Pre-allocating up to position 0x%x in %s%05u.dat\\n\", new_size, m_prefix, pos.nFile);\n+                AllocateFileRange(file, pos.nPos, inc_size);\n+                fclose(file);\n+                return inc_size;\n+            }\n+        } else {\n+            out_of_space = true;\n+        }\n+    }\n+    return 0;\n+}"
      },
      {
        "sha": "1b5d83e8e65f6cafed37efe52863a9be97fc0024",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992404b31ed2f8cabeed59d074552f0ae10fda94/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992404b31ed2f8cabeed59d074552f0ae10fda94/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=992404b31ed2f8cabeed59d074552f0ae10fda94",
        "patch": "@@ -34,6 +34,17 @@ class FlatFileSeq\n \n     /** Open a handle to the file at the given position. */\n     FILE* Open(const CDiskBlockPos& pos, bool fReadOnly = false);\n+\n+    /**\n+     * Allocate additional space in a file after the given starting position. The amount allocated\n+     * will be the minimum multiple of the sequence chunk size greater than add_size.\n+     *\n+     * @param[in] pos The starting position that bytes will be allocated after.\n+     * @param[in] add_size The minimum number of bytes to be allocated.\n+     * @param[out] out_of_space Whether the allocation failed due to insufficient disk space.\n+     * @return The number of bytes successfully allocated.\n+     */\n+    size_t Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space);\n };\n \n #endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "aca555ee0a0fb3d1ef29cb3d4087fa053a892e98",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 33,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992404b31ed2f8cabeed59d074552f0ae10fda94/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992404b31ed2f8cabeed59d074552f0ae10fda94/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=992404b31ed2f8cabeed59d074552f0ae10fda94",
        "patch": "@@ -3014,21 +3014,13 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n         vinfoBlockFile[nFile].nSize += nAddSize;\n \n     if (!fKnown) {\n-        unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n-        unsigned int nNewChunks = (vinfoBlockFile[nFile].nSize + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n-        if (nNewChunks > nOldChunks) {\n-            if (fPruneMode)\n-                fCheckForPruning = true;\n-            if (CheckDiskSpace(GetBlocksDir(), nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos)) {\n-                FILE *file = OpenBlockFile(pos);\n-                if (file) {\n-                    LogPrintf(\"Pre-allocating up to position 0x%x in blk%05u.dat\\n\", nNewChunks * BLOCKFILE_CHUNK_SIZE, pos.nFile);\n-                    AllocateFileRange(file, pos.nPos, nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos);\n-                    fclose(file);\n-                }\n-            }\n-            else\n-                return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+        bool out_of_space;\n+        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+        if (out_of_space) {\n+            return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+        }\n+        if (bytes_allocated != 0 && fPruneMode) {\n+            fCheckForPruning = true;\n         }\n     }\n \n@@ -3042,27 +3034,17 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n \n     LOCK(cs_LastBlockFile);\n \n-    unsigned int nNewSize;\n     pos.nPos = vinfoBlockFile[nFile].nUndoSize;\n-    nNewSize = vinfoBlockFile[nFile].nUndoSize += nAddSize;\n+    vinfoBlockFile[nFile].nUndoSize += nAddSize;\n     setDirtyFileInfo.insert(nFile);\n \n-    unsigned int nOldChunks = (pos.nPos + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n-    unsigned int nNewChunks = (nNewSize + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n-    if (nNewChunks > nOldChunks) {\n-        if (fPruneMode)\n-            fCheckForPruning = true;\n-        if (CheckDiskSpace(GetBlocksDir(), nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos)) {\n-            FILE *file = OpenUndoFile(pos);\n-            if (file) {\n-                LogPrintf(\"Pre-allocating up to position 0x%x in rev%05u.dat\\n\", nNewChunks * UNDOFILE_CHUNK_SIZE, pos.nFile);\n-                AllocateFileRange(file, pos.nPos, nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos);\n-                fclose(file);\n-            }\n-        }\n-        else {\n-            return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n-        }\n+    bool out_of_space;\n+    size_t bytes_allocated = UndoFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+    }\n+    if (bytes_allocated != 0 && fPruneMode) {\n+        fCheckForPruning = true;\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "e0380933e3745214331d358bda8c5e79299c84d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDM4MDkzM2UzNzQ1MjE0MzMxZDM1OGJkYThjNWU3OTI5OWM4NGQy",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T18:14:35Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "validation: Refactor file flush logic into FlatFileSeq.",
      "tree": {
        "sha": "b3dc6b1ad203e1c19b7beceae88e9b3131e4025d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3dc6b1ad203e1c19b7beceae88e9b3131e4025d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0380933e3745214331d358bda8c5e79299c84d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0380933e3745214331d358bda8c5e79299c84d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0380933e3745214331d358bda8c5e79299c84d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0380933e3745214331d358bda8c5e79299c84d2/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "992404b31ed2f8cabeed59d074552f0ae10fda94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992404b31ed2f8cabeed59d074552f0ae10fda94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/992404b31ed2f8cabeed59d074552f0ae10fda94"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 33,
      "deletions": 18
    },
    "files": [
      {
        "sha": "1cdead6bf58922ca5b2369c027ba9c4a849eb120",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0380933e3745214331d358bda8c5e79299c84d2/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0380933e3745214331d358bda8c5e79299c84d2/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=e0380933e3745214331d358bda8c5e79299c84d2",
        "patch": "@@ -72,3 +72,22 @@ size_t FlatFileSeq::Allocate(const CDiskBlockPos& pos, size_t add_size, bool& ou\n     }\n     return 0;\n }\n+\n+bool FlatFileSeq::Flush(const CDiskBlockPos& pos, bool finalize)\n+{\n+    FILE* file = Open(FlatFilePos(pos.nFile, 0)); // Avoid fseek to nPos\n+    if (!file) {\n+        return error(\"%s: failed to open file %d\", __func__, pos.nFile);\n+    }\n+    if (finalize && !TruncateFile(file, pos.nPos)) {\n+        fclose(file);\n+        return error(\"%s: failed to truncate file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file)) {\n+        fclose(file);\n+        return error(\"%s: failed to commit file %d\", __func__, pos.nFile);\n+    }\n+\n+    fclose(file);\n+    return true;\n+}"
      },
      {
        "sha": "eea41ddf84087dda2d0665da9159490065c43c48",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0380933e3745214331d358bda8c5e79299c84d2/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0380933e3745214331d358bda8c5e79299c84d2/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=e0380933e3745214331d358bda8c5e79299c84d2",
        "patch": "@@ -45,6 +45,15 @@ class FlatFileSeq\n      * @return The number of bytes successfully allocated.\n      */\n     size_t Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space);\n+\n+    /**\n+     * Commit a file to disk, and optionally truncate off extra pre-allocated bytes if final.\n+     *\n+     * @param[in] pos The first unwritten position in the file to be flushed.\n+     * @param[in] finalize True if no more data will be written to this file.\n+     * @return true on success, false on failure.\n+     */\n+    bool Flush(const CDiskBlockPos& pos, bool finalize = false);\n };\n \n #endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "98d89599f1583917ce3a6dcae8c7f2d4b9d6f337",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0380933e3745214331d358bda8c5e79299c84d2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0380933e3745214331d358bda8c5e79299c84d2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e0380933e3745214331d358bda8c5e79299c84d2",
        "patch": "@@ -1630,25 +1630,12 @@ void static FlushBlockFile(bool fFinalize = false)\n {\n     LOCK(cs_LastBlockFile);\n \n-    CDiskBlockPos posOld(nLastBlockFile, 0);\n-    bool status = true;\n-\n-    FILE *fileOld = OpenBlockFile(posOld);\n-    if (fileOld) {\n-        if (fFinalize)\n-            status &= TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nSize);\n-        status &= FileCommit(fileOld);\n-        fclose(fileOld);\n-    }\n-\n-    fileOld = OpenUndoFile(posOld);\n-    if (fileOld) {\n-        if (fFinalize)\n-            status &= TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nUndoSize);\n-        status &= FileCommit(fileOld);\n-        fclose(fileOld);\n-    }\n+    CDiskBlockPos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n+    CDiskBlockPos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n \n+    bool status = true;\n+    status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n+    status &= UndoFileSeq().Flush(undo_pos_old, fFinalize);\n     if (!status) {\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\n     }"
      }
    ]
  },
  {
    "sha": "d6d8a78f26f52fdfe43293686135e2fc6919926c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmQ4YTc4ZjI2ZjUyZmRmZTQzMjkzNjg2MTM1ZTJmYzY5MTk5MjZj",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:43:38Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "Move CDiskBlockPos from chain to flatfile.",
      "tree": {
        "sha": "88e7fdae60dcacd7cede677273556a4c69c4544f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88e7fdae60dcacd7cede677273556a4c69c4544f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6d8a78f26f52fdfe43293686135e2fc6919926c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d8a78f26f52fdfe43293686135e2fc6919926c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6d8a78f26f52fdfe43293686135e2fc6919926c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d8a78f26f52fdfe43293686135e2fc6919926c/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0380933e3745214331d358bda8c5e79299c84d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0380933e3745214331d358bda8c5e79299c84d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0380933e3745214331d358bda8c5e79299c84d2"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 49,
      "deletions": 43
    },
    "files": [
      {
        "sha": "583c46c58c045c6311c2f7e363fc6db5f7c88175",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 40,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <arith_uint256.h>\n #include <consensus/params.h>\n+#include <flatfile.h>\n #include <primitives/block.h>\n #include <tinyformat.h>\n #include <uint256.h>\n@@ -90,46 +91,6 @@ class CBlockFileInfo\n      }\n };\n \n-struct CDiskBlockPos\n-{\n-    int nFile;\n-    unsigned int nPos;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nPos));\n-    }\n-\n-    CDiskBlockPos() {\n-        SetNull();\n-    }\n-\n-    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n-        nFile = nFileIn;\n-        nPos = nPosIn;\n-    }\n-\n-    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return (a.nFile == b.nFile && a.nPos == b.nPos);\n-    }\n-\n-    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return !(a == b);\n-    }\n-\n-    void SetNull() { nFile = -1; nPos = 0; }\n-    bool IsNull() const { return (nFile == -1); }\n-\n-    std::string ToString() const\n-    {\n-        return strprintf(\"CDiskBlockPos(nFile=%i, nPos=%i)\", nFile, nPos);\n-    }\n-\n-};\n-\n enum BlockStatus: uint32_t {\n     //! Unused.\n     BLOCK_VALID_UNKNOWN      =    0,"
      },
      {
        "sha": "b1ea257da1a549756a2d066be7a26b3a3123143e",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "patch": "@@ -1,4 +1,5 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,6 +20,11 @@ FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n     }\n }\n \n+std::string CDiskBlockPos::ToString() const\n+{\n+    return strprintf(\"CDiskBlockPos(nFile=%i, nPos=%i)\", nFile, nPos);\n+}\n+\n fs::path FlatFileSeq::FileName(const CDiskBlockPos& pos) const\n {\n     return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);"
      },
      {
        "sha": "d599b8cc42a4c15ba96c0c80e79658ecbaeeb653",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 41,
        "deletions": 2,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d8a78f26f52fdfe43293686135e2fc6919926c/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "patch": "@@ -1,12 +1,51 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_FLATFILE_H\n #define BITCOIN_FLATFILE_H\n \n-#include <chain.h>\n+#include <string>\n+\n #include <fs.h>\n+#include <serialize.h>\n+\n+struct CDiskBlockPos\n+{\n+    int nFile;\n+    unsigned int nPos;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n+        READWRITE(VARINT(nPos));\n+    }\n+\n+    CDiskBlockPos() {\n+        SetNull();\n+    }\n+\n+    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n+        nFile = nFileIn;\n+        nPos = nPosIn;\n+    }\n+\n+    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+        return (a.nFile == b.nFile && a.nPos == b.nPos);\n+    }\n+\n+    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+        return !(a == b);\n+    }\n+\n+    void SetNull() { nFile = -1; nPos = 0; }\n+    bool IsNull() const { return (nFile == -1); }\n+\n+    std::string ToString() const;\n+};\n \n /**\n  * FlatFileSeq represents a sequence of numbered files storing raw data. This class facilitates"
      }
    ]
  },
  {
    "sha": "65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWE0ODllOTNkMTgxZDNjMGY3YTljZjc5ZjdjMTFmZjhjZjJiMGYw",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-06T19:46:30Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "scripted-diff: Rename CBlockDiskPos to FlatFilePos.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/CDiskBlockPos/FlatFilePos/g' $(git ls-files 'src/*.h' 'src/*.cpp')\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "dd513c7251d8524e7efd58ded79895ae38652531",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd513c7251d8524e7efd58ded79895ae38652531"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d8a78f26f52fdfe43293686135e2fc6919926c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6d8a78f26f52fdfe43293686135e2fc6919926c"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 63,
      "deletions": 63
    },
    "files": [
      {
        "sha": "2b6d2d082cb237dd82bcb2015d225e0fb5fe53fb",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -227,17 +227,17 @@ class CBlockIndex\n         nNonce         = block.nNonce;\n     }\n \n-    CDiskBlockPos GetBlockPos() const {\n-        CDiskBlockPos ret;\n+    FlatFilePos GetBlockPos() const {\n+        FlatFilePos ret;\n         if (nStatus & BLOCK_HAVE_DATA) {\n             ret.nFile = nFile;\n             ret.nPos  = nDataPos;\n         }\n         return ret;\n     }\n \n-    CDiskBlockPos GetUndoPos() const {\n-        CDiskBlockPos ret;\n+    FlatFilePos GetUndoPos() const {\n+        FlatFilePos ret;\n         if (nStatus & BLOCK_HAVE_UNDO) {\n             ret.nFile = nFile;\n             ret.nPos  = nUndoPos;"
      },
      {
        "sha": "d2e11825d588b76690137de9f131a4a59b8551ab",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -20,17 +20,17 @@ FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n     }\n }\n \n-std::string CDiskBlockPos::ToString() const\n+std::string FlatFilePos::ToString() const\n {\n-    return strprintf(\"CDiskBlockPos(nFile=%i, nPos=%i)\", nFile, nPos);\n+    return strprintf(\"FlatFilePos(nFile=%i, nPos=%i)\", nFile, nPos);\n }\n \n-fs::path FlatFileSeq::FileName(const CDiskBlockPos& pos) const\n+fs::path FlatFileSeq::FileName(const FlatFilePos& pos) const\n {\n     return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n }\n \n-FILE* FlatFileSeq::Open(const CDiskBlockPos& pos, bool fReadOnly)\n+FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool fReadOnly)\n {\n     if (pos.IsNull())\n         return nullptr;\n@@ -53,7 +53,7 @@ FILE* FlatFileSeq::Open(const CDiskBlockPos& pos, bool fReadOnly)\n     return file;\n }\n \n-size_t FlatFileSeq::Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space)\n+size_t FlatFileSeq::Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space)\n {\n     out_of_space = false;\n \n@@ -79,7 +79,7 @@ size_t FlatFileSeq::Allocate(const CDiskBlockPos& pos, size_t add_size, bool& ou\n     return 0;\n }\n \n-bool FlatFileSeq::Flush(const CDiskBlockPos& pos, bool finalize)\n+bool FlatFileSeq::Flush(const FlatFilePos& pos, bool finalize)\n {\n     FILE* file = Open(FlatFilePos(pos.nFile, 0)); // Avoid fseek to nPos\n     if (!file) {"
      },
      {
        "sha": "6051970490be4e4533bd296b6e39d33c259e379d",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -11,7 +11,7 @@\n #include <fs.h>\n #include <serialize.h>\n \n-struct CDiskBlockPos\n+struct FlatFilePos\n {\n     int nFile;\n     unsigned int nPos;\n@@ -24,20 +24,20 @@ struct CDiskBlockPos\n         READWRITE(VARINT(nPos));\n     }\n \n-    CDiskBlockPos() {\n+    FlatFilePos() {\n         SetNull();\n     }\n \n-    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n+    FlatFilePos(int nFileIn, unsigned int nPosIn) {\n         nFile = nFileIn;\n         nPos = nPosIn;\n     }\n \n-    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+    friend bool operator==(const FlatFilePos &a, const FlatFilePos &b) {\n         return (a.nFile == b.nFile && a.nPos == b.nPos);\n     }\n \n-    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+    friend bool operator!=(const FlatFilePos &a, const FlatFilePos &b) {\n         return !(a == b);\n     }\n \n@@ -69,10 +69,10 @@ class FlatFileSeq\n     FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size);\n \n     /** Get the name of the file at the given position. */\n-    fs::path FileName(const CDiskBlockPos& pos) const;\n+    fs::path FileName(const FlatFilePos& pos) const;\n \n     /** Open a handle to the file at the given position. */\n-    FILE* Open(const CDiskBlockPos& pos, bool fReadOnly = false);\n+    FILE* Open(const FlatFilePos& pos, bool fReadOnly = false);\n \n     /**\n      * Allocate additional space in a file after the given starting position. The amount allocated\n@@ -83,7 +83,7 @@ class FlatFileSeq\n      * @param[out] out_of_space Whether the allocation failed due to insufficient disk space.\n      * @return The number of bytes successfully allocated.\n      */\n-    size_t Allocate(const CDiskBlockPos& pos, size_t add_size, bool& out_of_space);\n+    size_t Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space);\n \n     /**\n      * Commit a file to disk, and optionally truncate off extra pre-allocated bytes if final.\n@@ -92,7 +92,7 @@ class FlatFileSeq\n      * @param[in] finalize True if no more data will be written to this file.\n      * @return true on success, false on failure.\n      */\n-    bool Flush(const CDiskBlockPos& pos, bool finalize = false);\n+    bool Flush(const FlatFilePos& pos, bool finalize = false);\n };\n \n #endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "7367ec7cb653e077a1765130b032696ca6c92e36",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -16,27 +16,27 @@ constexpr char DB_TXINDEX_BLOCK = 'T';\n \n std::unique_ptr<TxIndex> g_txindex;\n \n-struct CDiskTxPos : public CDiskBlockPos\n+struct CDiskTxPos : public FlatFilePos\n {\n     unsigned int nTxOffset; // after header\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CDiskBlockPos, *this);\n+        READWRITEAS(FlatFilePos, *this);\n         READWRITE(VARINT(nTxOffset));\n     }\n \n-    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n+    CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n     }\n \n     CDiskTxPos() {\n         SetNull();\n     }\n \n     void SetNull() {\n-        CDiskBlockPos::SetNull();\n+        FlatFilePos::SetNull();\n         nTxOffset = 0;\n     }\n };"
      },
      {
        "sha": "8a849d2815e3a6f81860a98fd7f9a0ee4d02622e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -672,7 +672,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     if (fReindex) {\n         int nFile = 0;\n         while (true) {\n-            CDiskBlockPos pos(nFile, 0);\n+            FlatFilePos pos(nFile, 0);\n             if (!fs::exists(GetBlockPosFilename(pos)))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);"
      },
      {
        "sha": "86775bb3917059407424a03359b8772bd602328f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -166,7 +166,7 @@ class CChainState {\n      * that it doesn't descend from an invalid block, and then add it to mapBlockIndex.\n      */\n     bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n@@ -205,7 +205,7 @@ class CChainState {\n \n     void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n \n     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -318,7 +318,7 @@ static bool FlushStateToDisk(const CChainParams& chainParams, CValidationState &\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n-static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly = false);\n static FlatFileSeq BlockFileSeq();\n static FlatFileSeq UndoFileSeq();\n \n@@ -1045,7 +1045,7 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n // CBlock and CBlockIndex\n //\n \n-static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n+static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1066,7 +1066,7 @@ static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMes\n     return true;\n }\n \n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n {\n     block.SetNull();\n \n@@ -1092,7 +1092,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n \n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n-    CDiskBlockPos blockPos;\n+    FlatFilePos blockPos;\n     {\n         LOCK(cs_main);\n         blockPos = pindex->GetBlockPos();\n@@ -1106,9 +1106,9 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n     return true;\n }\n \n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start)\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start)\n {\n-    CDiskBlockPos hpos = pos;\n+    FlatFilePos hpos = pos;\n     hpos.nPos -= 8; // Seek back 8 bytes for meta header\n     CAutoFile filein(OpenBlockFile(hpos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull()) {\n@@ -1143,7 +1143,7 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos,\n \n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)\n {\n-    CDiskBlockPos block_pos;\n+    FlatFilePos block_pos;\n     {\n         LOCK(cs_main);\n         block_pos = pindex->GetBlockPos();\n@@ -1455,7 +1455,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n \n namespace {\n \n-bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)\n+bool UndoWriteToDisk(const CBlockUndo& blockundo, FlatFilePos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1484,7 +1484,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n \n static bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n-    CDiskBlockPos pos = pindex->GetUndoPos();\n+    FlatFilePos pos = pindex->GetUndoPos();\n     if (pos.IsNull()) {\n         return error(\"%s: no undo data available\", __func__);\n     }\n@@ -1630,8 +1630,8 @@ void static FlushBlockFile(bool fFinalize = false)\n {\n     LOCK(cs_LastBlockFile);\n \n-    CDiskBlockPos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n-    CDiskBlockPos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n+    FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n+    FlatFilePos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n \n     bool status = true;\n     status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n@@ -1641,13 +1641,13 @@ void static FlushBlockFile(bool fFinalize = false)\n     }\n }\n \n-static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n+static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize);\n \n static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n {\n     // Write undo information to disk\n     if (pindex->GetUndoPos().IsNull()) {\n-        CDiskBlockPos _pos;\n+        FlatFilePos _pos;\n         if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, CLIENT_VERSION) + 40))\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n@@ -2920,7 +2920,7 @@ CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n@@ -2966,7 +2966,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     }\n }\n \n-static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n+static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -3015,7 +3015,7 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n     return true;\n }\n \n-static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize)\n+static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize)\n {\n     pos.nFile = nFile;\n \n@@ -3416,26 +3416,26 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const FlatFilePos* dbp) {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n-    CDiskBlockPos blockPos;\n+    FlatFilePos blockPos;\n     if (dbp != nullptr)\n         blockPos = *dbp;\n     if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {\n         error(\"%s: FindBlockPos failed\", __func__);\n-        return CDiskBlockPos();\n+        return FlatFilePos();\n     }\n     if (dbp == nullptr) {\n         if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {\n             AbortNode(\"Failed to write block\");\n-            return CDiskBlockPos();\n+            return FlatFilePos();\n         }\n     }\n     return blockPos;\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3497,7 +3497,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        CDiskBlockPos blockPos = SaveBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n         if (blockPos.IsNull()) {\n             state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n             return false;\n@@ -3628,7 +3628,7 @@ void PruneOneBlockFile(const int fileNumber)\n void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n-        CDiskBlockPos pos(*it, 0);\n+        FlatFilePos pos(*it, 0);\n         fs::remove(BlockFileSeq().FileName(pos));\n         fs::remove(UndoFileSeq().FileName(pos));\n         LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n@@ -3748,16 +3748,16 @@ static FlatFileSeq UndoFileSeq()\n     return FlatFileSeq(GetBlocksDir(), \"rev\", UNDOFILE_CHUNK_SIZE);\n }\n \n-FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n+FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly) {\n     return BlockFileSeq().Open(pos, fReadOnly);\n }\n \n /** Open an undo file (rev?????.dat) */\n-static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n+static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly) {\n     return UndoFileSeq().Open(pos, fReadOnly);\n }\n \n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos)\n+fs::path GetBlockPosFilename(const FlatFilePos &pos)\n {\n     return BlockFileSeq().FileName(pos);\n }\n@@ -3866,7 +3866,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_RE\n     }\n     for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)\n     {\n-        CDiskBlockPos pos(*it, 0);\n+        FlatFilePos pos(*it, 0);\n         if (CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull()) {\n             return false;\n         }\n@@ -4299,7 +4299,7 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n \n     try {\n         const CBlock& block = chainparams.GenesisBlock();\n-        CDiskBlockPos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n         if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);\n         CBlockIndex *pindex = AddToBlockIndex(block);\n@@ -4316,10 +4316,10 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return g_chainstate.LoadGenesisBlock(chainparams);\n }\n \n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos *dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n-    static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n+    static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n \n     int nLoaded = 0;\n@@ -4405,9 +4405,9 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 while (!queue.empty()) {\n                     uint256 head = queue.front();\n                     queue.pop_front();\n-                    std::pair<std::multimap<uint256, CDiskBlockPos>::iterator, std::multimap<uint256, CDiskBlockPos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n+                    std::pair<std::multimap<uint256, FlatFilePos>::iterator, std::multimap<uint256, FlatFilePos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n                     while (range.first != range.second) {\n-                        std::multimap<uint256, CDiskBlockPos>::iterator it = range.first;\n+                        std::multimap<uint256, FlatFilePos>::iterator it = range.first;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n                         if (ReadBlockFromDisk(*pblockrecursive, it->second, chainparams.GetConsensus()))\n                         {"
      },
      {
        "sha": "4ef82ee2c70702c94d85451cd64bd878703f5429",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "patch": "@@ -243,11 +243,11 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);\n \n /** Open a block file (blk?????.dat) */\n-FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos);\n+fs::path GetBlockPosFilename(const FlatFilePos &pos);\n /** Import blocks from an external file */\n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos *dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk,\n@@ -386,9 +386,9 @@ void InitScriptExecutionCache();\n \n \n /** Functions for disk access for blocks */\n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start);\n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n \n /** Functions for validating blocks and updating the block tree */"
      }
    ]
  },
  {
    "sha": "4c01e4e159db82ce4b2acce75f709cac996367d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzAxZTRlMTU5ZGI4MmNlNGIyYWNjZTc1ZjcwOWNhYzk5NjM2N2Q3",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-07T06:23:34Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "flatfile: Unit tests for FlatFileSeq methods.",
      "tree": {
        "sha": "a31cabbffb28cbb219094551409df563c1321eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a31cabbffb28cbb219094551409df563c1321eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c01e4e159db82ce4b2acce75f709cac996367d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c01e4e159db82ce4b2acce75f709cac996367d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c01e4e159db82ce4b2acce75f709cac996367d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c01e4e159db82ce4b2acce75f709cac996367d7/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 124,
      "deletions": 0
    },
    "files": [
      {
        "sha": "09fef5a1ddf5ecf7db901fca01566777d4cfe09f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c01e4e159db82ce4b2acce75f709cac996367d7/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c01e4e159db82ce4b2acce75f709cac996367d7/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=4c01e4e159db82ce4b2acce75f709cac996367d7",
        "patch": "@@ -83,6 +83,7 @@ BITCOIN_TESTS =\\\n   test/cuckoocache_tests.cpp \\\n   test/denialofservice_tests.cpp \\\n   test/descriptor_tests.cpp \\\n+  test/flatfile_tests.cpp \\\n   test/fs_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\"
      },
      {
        "sha": "079a09f8f90aabd7f73ae3821d2de2a1ae87fbf4",
        "filename": "src/test/flatfile_tests.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c01e4e159db82ce4b2acce75f709cac996367d7/src/test/flatfile_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c01e4e159db82ce4b2acce75f709cac996367d7/src/test/flatfile_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/flatfile_tests.cpp?ref=4c01e4e159db82ce4b2acce75f709cac996367d7",
        "patch": "@@ -0,0 +1,123 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <flatfile.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(flatfile_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(flatfile_filename)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+\n+    FlatFilePos pos(456, 789);\n+\n+    FlatFileSeq seq1(data_dir, \"a\", 16 * 1024);\n+    BOOST_CHECK_EQUAL(seq1.FileName(pos), data_dir / \"a00456.dat\");\n+\n+    FlatFileSeq seq2(data_dir / \"a\", \"b\", 16 * 1024);\n+    BOOST_CHECK_EQUAL(seq2.FileName(pos), data_dir / \"a\" / \"b00456.dat\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(flatfile_open)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+    FlatFileSeq seq(data_dir, \"a\", 16 * 1024);\n+\n+    std::string line1(\"A purely peer-to-peer version of electronic cash would allow online \"\n+                      \"payments to be sent directly from one party to another without going \"\n+                      \"through a financial institution.\");\n+    std::string line2(\"Digital signatures provide part of the solution, but the main benefits are \"\n+                      \"lost if a trusted third party is still required to prevent double-spending.\");\n+\n+    size_t pos1 = 0;\n+    size_t pos2 = pos1 + GetSerializeSize(line1, CLIENT_VERSION);\n+\n+    // Write first line to file.\n+    {\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos1)), SER_DISK, CLIENT_VERSION);\n+        file << LIMITED_STRING(line1, 256);\n+    }\n+\n+    // Attempt to append to file opened in read-only mode.\n+    {\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos2), true), SER_DISK, CLIENT_VERSION);\n+        BOOST_CHECK_THROW(file << LIMITED_STRING(line2, 256), std::ios_base::failure);\n+    }\n+\n+    // Append second line to file.\n+    {\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos2)), SER_DISK, CLIENT_VERSION);\n+        file << LIMITED_STRING(line2, 256);\n+    }\n+\n+    // Read text from file in read-only mode.\n+    {\n+        std::string text;\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos1), true), SER_DISK, CLIENT_VERSION);\n+\n+        file >> LIMITED_STRING(text, 256);\n+        BOOST_CHECK_EQUAL(text, line1);\n+\n+        file >> LIMITED_STRING(text, 256);\n+        BOOST_CHECK_EQUAL(text, line2);\n+    }\n+\n+    // Read text from file with position offset.\n+    {\n+        std::string text;\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos2)), SER_DISK, CLIENT_VERSION);\n+\n+        file >> LIMITED_STRING(text, 256);\n+        BOOST_CHECK_EQUAL(text, line2);\n+    }\n+\n+    // Ensure another file in the sequence has no data.\n+    {\n+        std::string text;\n+        CAutoFile file(seq.Open(FlatFilePos(1, pos2)), SER_DISK, CLIENT_VERSION);\n+        BOOST_CHECK_THROW(file >> LIMITED_STRING(text, 256), std::ios_base::failure);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(flatfile_allocate)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+    FlatFileSeq seq(data_dir, \"a\", 100);\n+\n+    bool out_of_space;\n+\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 0), 1, out_of_space), 100);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 0))), 100);\n+    BOOST_CHECK(!out_of_space);\n+\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 1, out_of_space), 0);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 100);\n+    BOOST_CHECK(!out_of_space);\n+\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 2, out_of_space), 101);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 200);\n+    BOOST_CHECK(!out_of_space);\n+}\n+\n+BOOST_AUTO_TEST_CASE(flatfile_flush)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+    FlatFileSeq seq(data_dir, \"a\", 100);\n+\n+    bool out_of_space;\n+    seq.Allocate(FlatFilePos(0, 0), 1, out_of_space);\n+\n+    // Flush without finalize should not truncate file.\n+    seq.Flush(FlatFilePos(0, 1));\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 100);\n+\n+    // Flush with finalize should truncate file.\n+    seq.Flush(FlatFilePos(0, 1), true);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 1);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "04cca330944f859b4ed68cb8da8a79f5206fd630",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGNjYTMzMDk0NGY4NTliNGVkNjhjYjhkYThhNzlmNTIwNmZkNjMw",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-01-24T19:20:57Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-02-23T01:38:45Z"
      },
      "message": "Style cleanup.",
      "tree": {
        "sha": "a0c42f2d1b123a0c73e3bf3943cbdb18393e441d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0c42f2d1b123a0c73e3bf3943cbdb18393e441d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04cca330944f859b4ed68cb8da8a79f5206fd630",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04cca330944f859b4ed68cb8da8a79f5206fd630",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04cca330944f859b4ed68cb8da8a79f5206fd630",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04cca330944f859b4ed68cb8da8a79f5206fd630/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c01e4e159db82ce4b2acce75f709cac996367d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c01e4e159db82ce4b2acce75f709cac996367d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c01e4e159db82ce4b2acce75f709cac996367d7"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 20,
      "deletions": 23
    },
    "files": [
      {
        "sha": "8a8f7b681c5209f1768d6f8e30004d87aad7d91c",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04cca330944f859b4ed68cb8da8a79f5206fd630/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04cca330944f859b4ed68cb8da8a79f5206fd630/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=04cca330944f859b4ed68cb8da8a79f5206fd630",
        "patch": "@@ -30,25 +30,24 @@ fs::path FlatFileSeq::FileName(const FlatFilePos& pos) const\n     return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n }\n \n-FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool fReadOnly)\n+FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool read_only)\n {\n-    if (pos.IsNull())\n+    if (pos.IsNull()) {\n         return nullptr;\n+    }\n     fs::path path = FileName(pos);\n     fs::create_directories(path.parent_path());\n-    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n-    if (!file && !fReadOnly)\n+    FILE* file = fsbridge::fopen(path, read_only ? \"rb\": \"rb+\");\n+    if (!file && !read_only)\n         file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {\n         LogPrintf(\"Unable to open file %s\\n\", path.string());\n         return nullptr;\n     }\n-    if (pos.nPos) {\n-        if (fseek(file, pos.nPos, SEEK_SET)) {\n-            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n-            fclose(file);\n-            return nullptr;\n-        }\n+    if (pos.nPos && fseek(file, pos.nPos, SEEK_SET)) {\n+        LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+        fclose(file);\n+        return nullptr;\n     }\n     return file;\n }"
      },
      {
        "sha": "374ceff411b49ebc5a61db77859d4aab3504f5fd",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04cca330944f859b4ed68cb8da8a79f5206fd630/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04cca330944f859b4ed68cb8da8a79f5206fd630/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=04cca330944f859b4ed68cb8da8a79f5206fd630",
        "patch": "@@ -24,14 +24,12 @@ struct FlatFilePos\n         READWRITE(VARINT(nPos));\n     }\n \n-    FlatFilePos() {\n-        SetNull();\n-    }\n+    FlatFilePos() : nFile(-1), nPos(0) {}\n \n-    FlatFilePos(int nFileIn, unsigned int nPosIn) {\n-        nFile = nFileIn;\n-        nPos = nPosIn;\n-    }\n+    FlatFilePos(int nFileIn, unsigned int nPosIn) :\n+        nFile(nFileIn),\n+        nPos(nPosIn)\n+    {}\n \n     friend bool operator==(const FlatFilePos &a, const FlatFilePos &b) {\n         return (a.nFile == b.nFile && a.nPos == b.nPos);\n@@ -72,7 +70,7 @@ class FlatFileSeq\n     fs::path FileName(const FlatFilePos& pos) const;\n \n     /** Open a handle to the file at the given position. */\n-    FILE* Open(const FlatFilePos& pos, bool fReadOnly = false);\n+    FILE* Open(const FlatFilePos& pos, bool read_only = false);\n \n     /**\n      * Allocate additional space in a file after the given starting position. The amount allocated"
      },
      {
        "sha": "1f0a097e3df15a6dd3488d4133bfc79f891056c4",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04cca330944f859b4ed68cb8da8a79f5206fd630/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04cca330944f859b4ed68cb8da8a79f5206fd630/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=04cca330944f859b4ed68cb8da8a79f5206fd630",
        "patch": "@@ -135,12 +135,12 @@ bool DirIsWritable(const fs::path& directory)\n     return true;\n }\n \n-bool CheckDiskSpace(const fs::path& dir, uint64_t nAdditionalBytes)\n+bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes)\n {\n-    constexpr uint64_t nMinDiskSpace = 52428800; // 50 MiB\n+    constexpr uint64_t min_disk_space = 52428800; // 50 MiB\n \n-    uint64_t nFreeBytesAvailable = fs::space(dir).available;\n-    return nFreeBytesAvailable >= nMinDiskSpace + nAdditionalBytes;\n+    uint64_t free_bytes_available = fs::space(dir).available;\n+    return free_bytes_available >= min_disk_space + additional_bytes;\n }\n \n /**"
      },
      {
        "sha": "bcfcaaaed0ad81681893f9d38c02b54036af07eb",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04cca330944f859b4ed68cb8da8a79f5206fd630/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04cca330944f859b4ed68cb8da8a79f5206fd630/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=04cca330944f859b4ed68cb8da8a79f5206fd630",
        "patch": "@@ -72,7 +72,7 @@ bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name);\n bool DirIsWritable(const fs::path& directory);\n-bool CheckDiskSpace(const fs::path& dir, uint64_t nAdditionalBytes = 0);\n+bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes = 0);\n \n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks."
      }
    ]
  },
  {
    "sha": "a720a983015c9ef8cc814c16a5b9ef6379695817",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzIwYTk4MzAxNWM5ZWY4Y2M4MTRjMTZhNWI5ZWY2Mzc5Njk1ODE3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-22T15:46:32Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-23T09:29:59Z"
      },
      "message": "gui: Fix async open wallet call order",
      "tree": {
        "sha": "2c6309b8d0efbee112c94afb9fc602e510ed7d92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c6309b8d0efbee112c94afb9fc602e510ed7d92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a720a983015c9ef8cc814c16a5b9ef6379695817",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a720a983015c9ef8cc814c16a5b9ef6379695817",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a720a983015c9ef8cc814c16a5b9ef6379695817",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a720a983015c9ef8cc814c16a5b9ef6379695817/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a094b543324267e6d956bb0df2ede990b90118cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a094b543324267e6d956bb0df2ede990b90118cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a094b543324267e6d956bb0df2ede990b90118cb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "abf9136eee55f77e7f372847e091635f715ee6db",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720a983015c9ef8cc814c16a5b9ef6379695817/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720a983015c9ef8cc814c16a5b9ef6379695817/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a720a983015c9ef8cc814c16a5b9ef6379695817",
        "patch": "@@ -396,6 +396,8 @@ void BitcoinGUI::createActions()\n                     connect(activity, &OpenWalletActivity::opened, this, &BitcoinGUI::setCurrentWallet);\n                     connect(activity, &OpenWalletActivity::finished, activity, &QObject::deleteLater);\n                     connect(activity, &OpenWalletActivity::finished, dialog, &QObject::deleteLater);\n+                    bool invoked = QMetaObject::invokeMethod(activity, \"open\");\n+                    assert(invoked);\n                 });\n             }\n         });"
      },
      {
        "sha": "fab86a7912f5d9cf43a19ef49659b72dd65b7bc7",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a720a983015c9ef8cc814c16a5b9ef6379695817/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a720a983015c9ef8cc814c16a5b9ef6379695817/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=a720a983015c9ef8cc814c16a5b9ef6379695817",
        "patch": "@@ -59,7 +59,6 @@ OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidge\n {\n     OpenWalletActivity* activity = new OpenWalletActivity(this, name);\n     activity->moveToThread(&m_activity_thread);\n-    QMetaObject::invokeMethod(activity, \"open\", Qt::QueuedConnection);\n     return activity;\n }\n "
      }
    ]
  },
  {
    "sha": "6ad79cbd562d04ebbcb61c774fb3389e70fedb7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWQ3OWNiZDU2MmQwNGViYmNiNjFjNzc0ZmIzMzg5ZTcwZmVkYjdj",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-23T14:25:24Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-23T15:44:28Z"
      },
      "message": "wallet: Use fsbridge::ifstream to fix Windows path issue",
      "tree": {
        "sha": "df3e967adbacd7105162fea735164fc99ee50342",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df3e967adbacd7105162fea735164fc99ee50342"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f937f64e04dbe7ffa51e4713a1154a26e86fbd60",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=6ad79cbd562d04ebbcb61c774fb3389e70fedb7c",
        "patch": "@@ -160,6 +160,7 @@ static std::string openmodeToStr(std::ios_base::openmode mode)\n void ifstream::open(const fs::path& p, std::ios_base::openmode mode)\n {\n     close();\n+    mode |= std::ios_base::in;\n     m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n     if (m_file == nullptr) {\n         return;\n@@ -183,6 +184,7 @@ void ifstream::close()\n void ofstream::open(const fs::path& p, std::ios_base::openmode mode)\n {\n     close();\n+    mode |= std::ios_base::out;\n     m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n     if (m_file == nullptr) {\n         return;"
      },
      {
        "sha": "d779251d566a71c0b4e9ea22b002e53d03d34eb5",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=6ad79cbd562d04ebbcb61c774fb3389e70fedb7c",
        "patch": "@@ -35,7 +35,7 @@ static bool IsBerkeleyBtree(const fs::path& path)\n     boost::system::error_code ec;\n     if (fs::file_size(path, ec) < 4096) return false;\n \n-    fs::ifstream file(path.string(), std::ios::binary);\n+    fsbridge::ifstream file(path, std::ios::binary);\n     if (!file.is_open()) return false;\n \n     file.seekg(12, std::ios::beg); // Magic bytes start at offset 12"
      }
    ]
  },
  {
    "sha": "1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYThhNWVkZTlmYzMzNGJkOTdiNzc0NjcwZWIzNDBiODY2NWEwYWE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-25T08:29:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-25T08:31:08Z"
      },
      "message": "Merge #15401: rpc: Actually throw help when passed invalid number of params\n\nfa4ce7038d444defe0b98a30097174c278054a33 rpc: Actually throw help when passed invalid number of params (MarcoFalke)\nfa05626ca7a0fe896ac554c79eaea4c36acdf861 rpc: Add RPCHelpMan::IsValidNumArgs() (MarcoFalke)\n\nPull request description:\n\n  Can be tested by\n\n  * running the included test against an old binary (compiled without this patch)\n  * calling `setban 1 \"add\" 3 4 5 6 7 8 9 0` in the gui\n\nTree-SHA512: aa6a25bbe6f40722913ea292252a62a4012c964eed9f4035335a2e2d13be98eb60f368e8a3251a104a26a62c08b2cb926b06e5ab1418ef1cf4abdd71d87c2919",
      "tree": {
        "sha": "c3449c48d35f665b8de6da0888e87e2b8a6e62b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3449c48d35f665b8de6da0888e87e2b8a6e62b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxzp8wACgkQHkrtYphs\n0l2ruQf/fHc7uqNvef8rsGSbKiqfBjChfufg2IrLZ5cSiuVwirGZGSnS80DPmU+P\nwwBgOm5JcLDvdNV0oo+YF+3UxUj/UTgd6bQElpWhHuPcrmltoPkfqm3VZo4HT7gS\nJICOqRRgJIgeNTMqa9EQ8T/W08AvCrCdlgZP4jOEfBHUj79Za6eDA1O9+qPl5UmQ\nzcft0iwnLqCG+wIHJIDjqC5c3W6cYl2DKLtjys3atlOrjKnZOzgYJxAp5GEXNMre\nXpCUNkZ+oA0UjQ+EIn7NPXT8a3cKrieult3NKXLhhZDksbxb4QADgNWMXdFHRgkD\n2RV1/GXBtiGaGLcC5D2UeVXc/vpjjg==\n=gcWa\n-----END PGP SIGNATURE-----",
        "payload": "tree c3449c48d35f665b8de6da0888e87e2b8a6e62b7\nparent f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641\nparent fa4ce7038d444defe0b98a30097174c278054a33\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551083390 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551083468 +0100\n\nMerge #15401: rpc: Actually throw help when passed invalid number of params\n\nfa4ce7038d444defe0b98a30097174c278054a33 rpc: Actually throw help when passed invalid number of params (MarcoFalke)\nfa05626ca7a0fe896ac554c79eaea4c36acdf861 rpc: Add RPCHelpMan::IsValidNumArgs() (MarcoFalke)\n\nPull request description:\n\n  Can be tested by\n\n  * running the included test against an old binary (compiled without this patch)\n  * calling `setban 1 \"add\" 3 4 5 6 7 8 9 0` in the gui\n\nTree-SHA512: aa6a25bbe6f40722913ea292252a62a4012c964eed9f4035335a2e2d13be98eb60f368e8a3251a104a26a62c08b2cb926b06e5ab1418ef1cf4abdd71d87c2919\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641"
      },
      {
        "sha": "fa4ce7038d444defe0b98a30097174c278054a33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4ce7038d444defe0b98a30097174c278054a33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4ce7038d444defe0b98a30097174c278054a33"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 46,
      "deletions": 22
    },
    "files": [
      {
        "sha": "c73a8d48cfa6d31bf74bc6baf9886448dfd4ad5b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1778,9 +1778,7 @@ static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t)\n \n static UniValue getblockstats(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4) {\n-        throw std::runtime_error(\n-            RPCHelpMan{\"getblockstats\",\n+    const RPCHelpMan help{\"getblockstats\",\n                 \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n                 \"It won't work for some heights with pruning.\\n\"\n                 \"It won't work without -txindex for utxo_size_inc, *fee or *feerate stats.\\n\",\n@@ -1836,7 +1834,9 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n             + HelpExampleRpc(\"getblockstats\", \"1000 '[\\\"minfeerate\\\",\\\"avgfeerate\\\"]'\")\n                 },\n-            }.ToString());\n+    };\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n     }\n \n     LOCK(cs_main);"
      },
      {
        "sha": "c7b3478f440c148998d3802b9292991ed1313e18",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
        "patch": "@@ -523,13 +523,7 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n \n static UniValue setban(const JSONRPCRequest& request)\n {\n-    std::string strCommand;\n-    if (!request.params[1].isNull())\n-        strCommand = request.params[1].get_str();\n-    if (request.fHelp || request.params.size() < 2 ||\n-        (strCommand != \"add\" && strCommand != \"remove\"))\n-        throw std::runtime_error(\n-            RPCHelpMan{\"setban\",\n+    const RPCHelpMan help{\"setban\",\n                 \"\\nAttempts to add or remove an IP/Subnet from the banned list.\\n\",\n                 {\n                     {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n@@ -543,7 +537,13 @@ static UniValue setban(const JSONRPCRequest& request)\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n                             + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\", 86400\")\n                 },\n-            }.ToString());\n+    };\n+    std::string strCommand;\n+    if (!request.params[1].isNull())\n+        strCommand = request.params[1].get_str();\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size()) || (strCommand != \"add\" && strCommand != \"remove\")) {\n+        throw std::runtime_error(help.ToString());\n+    }\n     if (!g_banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }"
      },
      {
        "sha": "86695bc1a5fc4da6bccfcb6d3a20dadd89d462f1",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 7,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -314,6 +314,17 @@ std::string RPCExamples::ToDescriptionString() const\n     return m_examples.empty() ? m_examples : \"\\nExamples:\\n\" + m_examples;\n }\n \n+bool RPCHelpMan::IsValidNumArgs(size_t num_args) const\n+{\n+    size_t num_required_args = 0;\n+    for (size_t n = m_args.size(); n > 0; --n) {\n+        if (!m_args.at(n - 1).IsOptional()) {\n+            num_required_args = n;\n+            break;\n+        }\n+    }\n+    return num_required_args <= num_args && num_args <= m_args.size();\n+}\n std::string RPCHelpMan::ToString() const\n {\n     std::string ret;\n@@ -322,12 +333,7 @@ std::string RPCHelpMan::ToString() const\n     ret += m_name;\n     bool was_optional{false};\n     for (const auto& arg : m_args) {\n-        bool optional;\n-        if (arg.m_fallback.which() == 1) {\n-            optional = true;\n-        } else {\n-            optional = RPCArg::Optional::NO != boost::get<RPCArg::Optional>(arg.m_fallback);\n-        }\n+        const bool optional = arg.IsOptional();\n         ret += \" \";\n         if (optional) {\n             if (!was_optional) ret += \"( \";\n@@ -369,6 +375,15 @@ std::string RPCHelpMan::ToString() const\n     return ret;\n }\n \n+bool RPCArg::IsOptional() const\n+{\n+    if (m_fallback.which() == 1) {\n+        return true;\n+    } else {\n+        return RPCArg::Optional::NO != boost::get<RPCArg::Optional>(m_fallback);\n+    }\n+}\n+\n std::string RPCArg::ToDescriptionString() const\n {\n     std::string ret;"
      },
      {
        "sha": "06800ad63cbd71ae22658d1b366bb8e619d06df1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -54,7 +54,7 @@ struct RPCArg {\n         /** Required arg */\n         NO,\n         /**\n-         * Optinal arg that is a named argument and has a default value of\n+         * Optional arg that is a named argument and has a default value of\n          * `null`. When possible, the default value should be specified.\n          */\n         OMITTED_NAMED_ARG,\n@@ -111,6 +111,8 @@ struct RPCArg {\n         assert(type == Type::ARR || type == Type::OBJ);\n     }\n \n+    bool IsOptional() const;\n+\n     /**\n      * Return the type string of the argument.\n      * Set oneline to allow it to be overridden by a custom oneline type string (m_oneline_description).\n@@ -186,6 +188,8 @@ class RPCHelpMan\n     RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples);\n \n     std::string ToString() const;\n+    /** If the supplied number of args is neither too small nor too high */\n+    bool IsValidNumArgs(size_t num_args) const;\n \n private:\n     const std::string m_name;"
      },
      {
        "sha": "feba16f1b3847bee66bbdd8d7a4c2ae9179f8dfe",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a8a5ede9fc334bd97b774670eb340b8665a0aa4/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
        "patch": "@@ -178,5 +178,10 @@ def run_test(self):\n         assert_raises_rpc_error(-5, 'Block not found', self.nodes[0].getblockstats,\n                                 hash_or_height='000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f')\n \n+        # Invalid number of args\n+        assert_raises_rpc_error(-1, 'getblockstats hash_or_height ( stats )', self.nodes[0].getblockstats, '00', 1, 2)\n+        assert_raises_rpc_error(-1, 'getblockstats hash_or_height ( stats )', self.nodes[0].getblockstats)\n+\n+\n if __name__ == '__main__':\n     GetblockstatsTest().main()"
      }
    ]
  },
  {
    "sha": "3f5ad622e5fe0781a70bee9e3322b23c2352e956",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjVhZDYyMmU1ZmUwNzgxYTcwYmVlOWUzMzIyYjIzYzIzNTJlOTU2",
    "commit": {
      "author": {
        "name": "riordant",
        "email": "riordant@tcd.ie",
        "date": "2019-02-25T09:00:34Z"
      },
      "committer": {
        "name": "riordant",
        "email": "riordant@tcd.ie",
        "date": "2019-02-25T09:00:34Z"
      },
      "message": "Enable PID file creation on Windows\n- Add available WIN PID function\n- Consider WIN32 in each relevant case\n- Add new preprocessor definitions to suppress warning\n- Update error message for generic OS\n\nCo-authored-by: J\u00f6rn R\u00f6der <kontakt@joernroeder.de>",
      "tree": {
        "sha": "0aa9a36a1654036ce19ac7c236d1844e90bbfe45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aa9a36a1654036ce19ac7c236d1844e90bbfe45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f5ad622e5fe0781a70bee9e3322b23c2352e956",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f5ad622e5fe0781a70bee9e3322b23c2352e956",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f5ad622e5fe0781a70bee9e3322b23c2352e956",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f5ad622e5fe0781a70bee9e3322b23c2352e956/comments",
    "author": {
      "login": "riordant",
      "id": 6988731,
      "node_id": "MDQ6VXNlcjY5ODg3MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6988731?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/riordant",
      "html_url": "https://github.com/riordant",
      "followers_url": "https://api.github.com/users/riordant/followers",
      "following_url": "https://api.github.com/users/riordant/following{/other_user}",
      "gists_url": "https://api.github.com/users/riordant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/riordant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/riordant/subscriptions",
      "organizations_url": "https://api.github.com/users/riordant/orgs",
      "repos_url": "https://api.github.com/users/riordant/repos",
      "events_url": "https://api.github.com/users/riordant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/riordant/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "riordant",
      "id": 6988731,
      "node_id": "MDQ6VXNlcjY5ODg3MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6988731?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/riordant",
      "html_url": "https://github.com/riordant",
      "followers_url": "https://api.github.com/users/riordant/followers",
      "following_url": "https://api.github.com/users/riordant/following{/other_user}",
      "gists_url": "https://api.github.com/users/riordant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/riordant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/riordant/subscriptions",
      "organizations_url": "https://api.github.com/users/riordant/orgs",
      "repos_url": "https://api.github.com/users/riordant/repos",
      "events_url": "https://api.github.com/users/riordant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/riordant/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b853746d4a8a8ac0d3f535538e2ac4e3cc14e1c7"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 9,
      "deletions": 15
    },
    "files": [
      {
        "sha": "913f3c35da99fc91c2f2e7c85e38fc757816bb0f",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f5ad622e5fe0781a70bee9e3322b23c2352e956/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f5ad622e5fe0781a70bee9e3322b23c2352e956/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=3f5ad622e5fe0781a70bee9e3322b23c2352e956",
        "patch": "@@ -89,7 +89,7 @@\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <WarningLevel>Level3</WarningLevel>\n       <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -104,7 +104,7 @@\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <WarningLevel>Level3</WarningLevel>\n       <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -122,7 +122,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -141,7 +141,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "9ba9b2803a7ac39048e39f470d87234a9628aa12",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f5ad622e5fe0781a70bee9e3322b23c2352e956/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f5ad622e5fe0781a70bee9e3322b23c2352e956/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3f5ad622e5fe0781a70bee9e3322b23c2352e956",
        "patch": "@@ -97,7 +97,6 @@ static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n /**\n  * The PID file facilities.\n  */\n-#ifndef WIN32\n static const char* BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n static fs::path GetPidFile()\n@@ -109,14 +108,17 @@ NODISCARD static bool CreatePidFile()\n {\n     FILE* file = fsbridge::fopen(GetPidFile(), \"w\");\n     if (file) {\n+#ifdef WIN32\n+        fprintf(file, \"%d\\n\", GetCurrentProcessId());\n+#else\n         fprintf(file, \"%d\\n\", getpid());\n+#endif\n         fclose(file);\n         return true;\n     } else {\n         return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n     }\n }\n-#endif\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -286,15 +288,13 @@ void Shutdown(InitInterfaces& interfaces)\n     }\n #endif\n \n-#ifndef WIN32\n     try {\n         if (!fs::remove(GetPidFile())) {\n             LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\n         }\n     } catch (const fs::filesystem_error& e) {\n-        LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, e.what());\n+        LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, fsbridge::get_filesystem_error_message(e));\n     }\n-#endif\n     interfaces.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n@@ -392,11 +392,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n-#ifndef WIN32\n     gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n-#else\n-    hidden_args.emplace_back(\"-pid\");\n-#endif\n     gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n@@ -1228,12 +1224,10 @@ bool AppInitMain(InitInterfaces& interfaces)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n-#ifndef WIN32\n     if (!CreatePidFile()) {\n         // Detailed error printed inside CreatePidFile().\n         return false;\n     }\n-#endif\n     if (LogInstance().m_print_to_file) {\n         if (gArgs.GetBoolArg(\"-shrinkdebugfile\", LogInstance().DefaultShrinkDebugFile())) {\n             // Do this first since it both loads a bunch of debug.log into memory,"
      }
    ]
  },
  {
    "sha": "b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGZjNTI1N2I3ZGMxMDZmZjIxMGQxNzAzOTdkNGNlMGUwMjRmMmMw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-25T12:12:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-25T12:20:01Z"
      },
      "message": "Merge #15456: Enable PID file creation on WIN\n\n3f5ad622e5fe0781a70bee9e3322b23c2352e956 Enable PID file creation on Windows - Add available WIN PID function - Consider WIN32 in each relevant case - Add new preprocessor definitions to suppress warning - Update error message for generic OS (riordant)\n\nPull request description:\n\n  # Introduction\n\n  As discussed with @laanwj on IRC:\n\n  - PID file creation was never enabled for Windows, as the `pid_t` filetype is not available for it. However, the WIN32 API contains the header [`Processthreadsapi.h`](https://github.com/CodeShark/x86_64-w64-mingw32/blob/master/include/processthreadsapi.h) which in turn contains the function [`GetCurrentProcessId()`](https://docs.microsoft.com/en-gb/windows/desktop/api/processthreadsapi/nf-processthreadsapi-getcurrentprocessid). ~~This function is called at a higher level by [`_getpid()`](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/getpid?view=vs-2017)~~ EDIT: `_getpid()` is not available to the MSVC compiler used in the AppVeyor build. As a result, I have changed the function call to`GetCurrentProcessId()`, which performs the same function and is available to both MinGW & MSVC.\n  This allows one to capture the PID in Windows, without any additional includes - the above function is already available.\n\n  - Within this PR, I have added a separate line that calls `GetCurrentProcessId()` in the case of a WIN compilation, and the usual `getpid()` otherwise. All code blocks processing PID file logic that avoid WIN32 have been changed to consider it. I have also updated the preprocessor definitions in `libbitcoin_server.vcxproj.in` to suppress a warning related to `std::strerror` for the MSVC build, that was causing the AppVeyor build to fail (see @fanquake comment below).\n\n  # Rationale\n  - Consistency between OS's running Bitcoin\n      - Applications which build off of `bitcoind`, such as novel front-end clients, often need access to the PID in order to control the daemon. Instead of designing some alternate way of doing this for one system, it should be consistent between all of them.\n\n  In collaboration with @joernroeder\n\nTree-SHA512: 22fcbf866e99115d12ed29716e68d200d4c118ae2f7b188b7705dc0cf5f0cd0ce5fb18f772744c6238eecd9e6d0922c615e2f0e12a7fe7c810062a79d97aa6a2",
      "tree": {
        "sha": "2bfbbbd5f5c801adf5d099837d4818dcc0f98769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bfbbbd5f5c801adf5d099837d4818dcc0f98769"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlxz3XEACgkQHkrtYphs\n0l3KkQf/QZTdD6IOmqngIY2GlLvYCwsyUR6nVWORKbeDz9pikYnBV7qXPc7DKz/h\nvl1eAxNwPxEz4tPirV5lgOLv/vVaQFHbGT3B4p+f/ON+1vlxuujPdI/Twura10/g\nKenHQy2eF1vJgiGuHGMbqbQbZExLlnq9oSvqUhESpG+KX9PsZmHq5kaec1VFLEMJ\nEF8K+aFjN2kOxT70f1Oe5f/7OGZrK63abPonZ2WqyDd4YBzua4r9dRJLQ0txcvVh\nez7QEIEtwbOZGR/2B42mPHWjccuT9Mkc5qpHzV3zs76n94aJ2Ec+k7ETw8GhLeXe\n5SoqJphC7Hw9YK0ccaMAWYOIE6YQug==\n=BfyW\n-----END PGP SIGNATURE-----",
        "payload": "tree 2bfbbbd5f5c801adf5d099837d4818dcc0f98769\nparent 1a8a5ede9fc334bd97b774670eb340b8665a0aa4\nparent 3f5ad622e5fe0781a70bee9e3322b23c2352e956\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551096764 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551097201 +0100\n\nMerge #15456: Enable PID file creation on WIN\n\n3f5ad622e5fe0781a70bee9e3322b23c2352e956 Enable PID file creation on Windows - Add available WIN PID function - Consider WIN32 in each relevant case - Add new preprocessor definitions to suppress warning - Update error message for generic OS (riordant)\n\nPull request description:\n\n  # Introduction\n\n  As discussed with @laanwj on IRC:\n\n  - PID file creation was never enabled for Windows, as the `pid_t` filetype is not available for it. However, the WIN32 API contains the header [`Processthreadsapi.h`](https://github.com/CodeShark/x86_64-w64-mingw32/blob/master/include/processthreadsapi.h) which in turn contains the function [`GetCurrentProcessId()`](https://docs.microsoft.com/en-gb/windows/desktop/api/processthreadsapi/nf-processthreadsapi-getcurrentprocessid). ~~This function is called at a higher level by [`_getpid()`](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/getpid?view=vs-2017)~~ EDIT: `_getpid()` is not available to the MSVC compiler used in the AppVeyor build. As a result, I have changed the function call to`GetCurrentProcessId()`, which performs the same function and is available to both MinGW & MSVC.\n  This allows one to capture the PID in Windows, without any additional includes - the above function is already available.\n\n  - Within this PR, I have added a separate line that calls `GetCurrentProcessId()` in the case of a WIN compilation, and the usual `getpid()` otherwise. All code blocks processing PID file logic that avoid WIN32 have been changed to consider it. I have also updated the preprocessor definitions in `libbitcoin_server.vcxproj.in` to suppress a warning related to `std::strerror` for the MSVC build, that was causing the AppVeyor build to fail (see @fanquake comment below).\n\n  # Rationale\n  - Consistency between OS's running Bitcoin\n      - Applications which build off of `bitcoind`, such as novel front-end clients, often need access to the PID in order to control the daemon. Instead of designing some alternate way of doing this for one system, it should be consistent between all of them.\n\n  In collaboration with @joernroeder\n\nTree-SHA512: 22fcbf866e99115d12ed29716e68d200d4c118ae2f7b188b7705dc0cf5f0cd0ce5fb18f772744c6238eecd9e6d0922c615e2f0e12a7fe7c810062a79d97aa6a2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4fc5257b7dc106ff210d170397d4ce0e024f2c0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a8a5ede9fc334bd97b774670eb340b8665a0aa4"
      },
      {
        "sha": "3f5ad622e5fe0781a70bee9e3322b23c2352e956",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f5ad622e5fe0781a70bee9e3322b23c2352e956",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f5ad622e5fe0781a70bee9e3322b23c2352e956"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 9,
      "deletions": 15
    },
    "files": [
      {
        "sha": "913f3c35da99fc91c2f2e7c85e38fc757816bb0f",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4fc5257b7dc106ff210d170397d4ce0e024f2c0/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4fc5257b7dc106ff210d170397d4ce0e024f2c0/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "patch": "@@ -89,7 +89,7 @@\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <WarningLevel>Level3</WarningLevel>\n       <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -104,7 +104,7 @@\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n       <WarningLevel>Level3</WarningLevel>\n       <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -122,7 +122,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -141,7 +141,7 @@\n       <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "8876b54fdef3ee044884b4f63404771f3a292da6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4fc5257b7dc106ff210d170397d4ce0e024f2c0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4fc5257b7dc106ff210d170397d4ce0e024f2c0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "patch": "@@ -97,7 +97,6 @@ static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n /**\n  * The PID file facilities.\n  */\n-#ifndef WIN32\n static const char* BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n static fs::path GetPidFile()\n@@ -109,14 +108,17 @@ NODISCARD static bool CreatePidFile()\n {\n     FILE* file = fsbridge::fopen(GetPidFile(), \"w\");\n     if (file) {\n+#ifdef WIN32\n+        fprintf(file, \"%d\\n\", GetCurrentProcessId());\n+#else\n         fprintf(file, \"%d\\n\", getpid());\n+#endif\n         fclose(file);\n         return true;\n     } else {\n         return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n     }\n }\n-#endif\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -286,15 +288,13 @@ void Shutdown(InitInterfaces& interfaces)\n     }\n #endif\n \n-#ifndef WIN32\n     try {\n         if (!fs::remove(GetPidFile())) {\n             LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\n         }\n     } catch (const fs::filesystem_error& e) {\n-        LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, e.what());\n+        LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, fsbridge::get_filesystem_error_message(e));\n     }\n-#endif\n     interfaces.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n@@ -392,11 +392,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n-#ifndef WIN32\n     gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n-#else\n-    hidden_args.emplace_back(\"-pid\");\n-#endif\n     gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n@@ -1228,12 +1224,10 @@ bool AppInitMain(InitInterfaces& interfaces)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n-#ifndef WIN32\n     if (!CreatePidFile()) {\n         // Detailed error printed inside CreatePidFile().\n         return false;\n     }\n-#endif\n     if (LogInstance().m_print_to_file) {\n         if (gArgs.GetBoolArg(\"-shrinkdebugfile\", LogInstance().DefaultShrinkDebugFile())) {\n             // Do this first since it both loads a bunch of debug.log into memory,"
      }
    ]
  },
  {
    "sha": "ef362f27733e9281062b4e65a26e5696f34692b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjM2MmYyNzczM2U5MjgxMDYyYjRlNjVhMjZlNTY5NmYzNDY5MmI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-25T09:14:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-25T14:59:02Z"
      },
      "message": "rpc/gui: Remove 'Unknown block versions being mined' warning\n\nDue to miners inserting garbage into the version numbers, the current\nversion signalling has become completely useless. This removes the\n\"unknown block versions\" warning which has the tendency to scare\nusers unnecessarily (and might get them to \"update\" to something\nbad).\n\nIt preserves the warning in the logs. Whether this is desirable can\nbe a point of discussion.",
      "tree": {
        "sha": "c369a4d6bf9feb35dad5ccc7e583d6c3cb0da69d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c369a4d6bf9feb35dad5ccc7e583d6c3cb0da69d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef362f27733e9281062b4e65a26e5696f34692b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef362f27733e9281062b4e65a26e5696f34692b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef362f27733e9281062b4e65a26e5696f34692b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef362f27733e9281062b4e65a26e5696f34692b4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a8a5ede9fc334bd97b774670eb340b8665a0aa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a8a5ede9fc334bd97b774670eb340b8665a0aa4"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 1,
      "deletions": 29
    },
    "files": [
      {
        "sha": "f3d34dca70049468d6d3b53190e343ff123b5f2a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef362f27733e9281062b4e65a26e5696f34692b4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef362f27733e9281062b4e65a26e5696f34692b4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ef362f27733e9281062b4e65a26e5696f34692b4",
        "patch": "@@ -2259,12 +2259,6 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n         }\n         if (nUpgraded > 0)\n             AppendWarning(warningMessages, strprintf(_(\"%d of last 100 blocks have unexpected version\"), nUpgraded));\n-        if (nUpgraded > 100/2)\n-        {\n-            std::string strWarning = _(\"Warning: Unknown block versions being mined! It's possible unknown rules are in effect\");\n-            // notify GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n-            DoWarning(strWarning);\n-        }\n     }\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__, /* Continued */\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,"
      },
      {
        "sha": "b98dd6d26c3a69821719cd54c830d8b62b9f7f57",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 1,
        "deletions": 17,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef362f27733e9281062b4e65a26e5696f34692b4/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef362f27733e9281062b4e65a26e5696f34692b4/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=ef362f27733e9281062b4e65a26e5696f34692b4",
        "patch": "@@ -66,23 +66,7 @@ def run_test(self):\n             txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n             assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n \n-        # Mine another 41 up-version blocks. -alertnotify should trigger on the 51st.\n-        self.log.info(\"test -alertnotify\")\n-        self.nodes[1].generatetoaddress(41, ADDRESS_BCRT1_UNSPENDABLE)\n-        self.sync_all()\n-\n-        # Give bitcoind 10 seconds to write the alert notification\n-        wait_until(lambda: len(os.listdir(self.alertnotify_dir)), timeout=10)\n-\n-        for notify_file in os.listdir(self.alertnotify_dir):\n-            os.remove(os.path.join(self.alertnotify_dir, notify_file))\n-\n-        # Mine more up-version blocks, should not get more alerts:\n-        self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_UNSPENDABLE)\n-        self.sync_all()\n-\n-        self.log.info(\"-alertnotify should not continue notifying for more unknown version blocks\")\n-        assert_equal(len(os.listdir(self.alertnotify_dir)), 0)\n+        # TODO: add test for `-alertnotify` large fork notifications\n \n if __name__ == '__main__':\n     NotificationsTest().main()"
      },
      {
        "sha": "1ced618d479f188df1010f165d00937eda36e1eb",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef362f27733e9281062b4e65a26e5696f34692b4/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef362f27733e9281062b4e65a26e5696f34692b4/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=ef362f27733e9281062b4e65a26e5696f34692b4",
        "patch": "@@ -22,7 +22,6 @@\n VB_UNKNOWN_BIT = 27       # Choose a bit unassigned to any deployment\n VB_UNKNOWN_VERSION = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n \n-WARN_UNKNOWN_RULES_MINED = \"Unknown block versions being mined! It's possible unknown rules are in effect\"\n WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n VB_PATTERN = re.compile(\"Warning: unknown new rules activated.*versionbit\")\n \n@@ -78,15 +77,10 @@ def run_test(self):\n         assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n         assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n-        self.log.info(\"Check that there is a warning if >50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n         node.generatetoaddress(VB_PERIOD - VB_THRESHOLD, node_deterministic_address)\n \n-        # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n-\n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Mine a period worth of expected blocks so the generic block-version warning\n         # is cleared. This will move the versionbit state to ACTIVE."
      }
    ]
  },
  {
    "sha": "fa2cdc9ac2672301591cafceb8ff230b95425ad0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTJjZGM5YWMyNjcyMzAxNTkxY2FmY2ViOGZmMjMwYjk1NDI1YWQw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-23T17:56:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-25T16:18:24Z"
      },
      "message": "test: Simplify create_cache",
      "tree": {
        "sha": "2ccc551e83a884f1af58435bead84018773049dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ccc551e83a884f1af58435bead84018773049dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2cdc9ac2672301591cafceb8ff230b95425ad0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcdBVQAAoJEM4rdWl+aaVIerEL/0nrqZ6U4EhHWaZPGBIS/mko\n5g9B2b7LZnno1tVXa/8+qrrtYiK6NZFzLvrqVhikqtRyftjNu2ui7/X7j+JAV98d\nCF/j2qBlWJtVdexbP9KrOTb/s9NNOUO7dhBB8fv03J9qj0k+jyiUu24gE5x4Ie1o\nVov6/wMugT4Iwy+aeth6KE9z6sHvXlWK+JvullQMqWJ9PVsrub3m2O7lR5laFDQL\nUpy1UvmBDKl4tDpUb3eabJ5bNd7d1TeIGnq3x/g5obtci8tUlAkExYfoyGrAC4rI\nXVLHUxRvu2cPPg8rc2PC0zUY3ISGljcQ1yY8ULNEeTcxDyq4XW9DAH3q2C06pc8S\nbrFfLuCZ6xH1nM1wkXlBlX3/6ryQ5h3jVEJGy4MjGrpScXDsDVtjfth+E3zuEqF9\nW1gnnde07O923Y5wy3aa+8oe7wd0KlqFfQE9VX4RcGcAJvNJuzTbGlzIHSmGXbnr\nyygmq4OuekqmesNqqUfxtP5zJrpmVLVnFy4W2+tAxA==\n=t0iD\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ccc551e83a884f1af58435bead84018773049dd\nparent fa25210d6266d50a6c2bfd6d96062bacb2ae393b\nauthor MarcoFalke <falke.marco@gmail.com> 1550944614 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551111504 -0500\n\ntest: Simplify create_cache\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cdc9ac2672301591cafceb8ff230b95425ad0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2cdc9ac2672301591cafceb8ff230b95425ad0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cdc9ac2672301591cafceb8ff230b95425ad0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa25210d6266d50a6c2bfd6d96062bacb2ae393b"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "09d7d877a7b02e6a3167e730aa22cc93ba3f18f8",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cdc9ac2672301591cafceb8ff230b95425ad0/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cdc9ac2672301591cafceb8ff230b95425ad0/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa2cdc9ac2672301591cafceb8ff230b95425ad0",
        "patch": "@@ -277,7 +277,9 @@ def setup_nodes(self):\n         if not self.setup_clean_chain:\n             for n in self.nodes:\n                 assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n-            self.log.debug('Generate a block with current time to finalize the cache and assert we are out of IBD')\n+            # To ensure that all nodes are out of IBD, the most recent block\n+            # must have a timestamp not too old (see IsInitialBlockDownload()).\n+            self.log.debug('Generate a block with current time')\n             block_hash = self.nodes[0].generate(1)[0]\n             block = self.nodes[0].getblock(blockhash=block_hash, verbosity=0)\n             for n in self.nodes:\n@@ -493,14 +495,9 @@ def _initialize_chain(self):\n             # block in the cache does not age too much (have an old tip age).\n             # This is needed so that we are out of IBD when the test starts,\n             # see the tip age check in IsInitialBlockDownload().\n-            for i in range(2):\n-                for peer in range(4):\n-                    for j in range(25):\n-                        if i == 1 and peer == 3 and j == 24:\n-                            break\n-                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n-                    # Must sync before next peer starts generating blocks\n-                    sync_blocks(self.nodes)\n+            for i in range(8):\n+                self.nodes[0].generatetoaddress(25 if i != 7 else 24, self.nodes[i % 4].get_deterministic_priv_key().address)\n+            sync_blocks(self.nodes)\n \n             for n in self.nodes:\n                 assert_equal(n.getblockchaininfo()[\"blocks\"], 199)"
      }
    ]
  },
  {
    "sha": "8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjQ3MGVjYzUzNGQ0OWNiNWY3MDQ1ZWE5NTY0NDgxYWNkM2UyYjRi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-25T16:44:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-25T16:44:21Z"
      },
      "message": "Merge #15419: qa: Always refresh cache to be out of ibd\n\nfa2cdc9ac2 test: Simplify create_cache (MarcoFalke)\nfa25210d62 qa: Fix wallet_txn_doublespend issue (MarcoFalke)\n1111aecbb5 qa: Always refresh stale cache to be out of ibd (MarcoFalke)\nfab0d85802 qa: Remove mocktime unless required (MarcoFalke)\n\nPull request description:\n\n  When starting a test, we are always in IBD because the timestamps on cached blocks are in the past. Usually, we solve that by generating a block at the beginning of the test.\n\n  That is clumsy and might even lead to other problems such as #15360 and https://github.com/bitcoin/bitcoin/issues/14446#issuecomment-461926598\n\n  So fix that by getting rid of mocktime and always refreshing the last block of the cache when starting the test framework.\n\n  Should fix #14446\n\nTree-SHA512: 6af09800f9c86131349a103af617a54551f5f3f3260d38e14e3f30fdd3d91a0feb0100c56cbb12eae4aeac5571ae4b530b16345cbb831d2670237b53351a22c1",
      "tree": {
        "sha": "a9995cf47daaf1180c6bef10932753222b328c9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9995cf47daaf1180c6bef10932753222b328c9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcdBtlAAoJENLqSFDnUoslxfEP/AoLrcesgSBuHumb9Y3DfUax\ndncXjidamNhupu1BTdNgEhFOmQ+sYqqWJbjHpFeye940KeHShuP7ZYy5NuWropxH\nOCBa/f/DK6zDYlRCQbjI9StGlRyg86/wfemy/I1y2Ko2IGcx8B78tzHpRXQQSpkA\nN7jllCSb1EwLJiXnjfqd7EbXoRdLjkqV3RbOfrWuPZv5ZAs0R9podYyjx1wwQQ0p\ndS/r7OLXCC8cKylqu7t705iMwJAY2T7TwakVYKP9ANvia1WKgh9mfBmjUY2ljE0E\noeeBB0wPUp9wHVcsyIlTGB3yP6hLoIEhowWQLl61/Zt/qJHZTJ6A+kLP4DsH4WVw\naxnjJTuxHJ50hfn4nSxaxa9muxg1DCh9mKPhV1f6AJbatbt2x49k5t318iO2sF3f\nlTkxBIEG54bTSozQPNv8HyNOSTARVax9hkELqIMzrugvwlT5KvXkUzeAsQfMQezl\nBzYKwL7G3HtWIgZPpoZaJBDpD6Q3F7q7SD7ZvwbhnVmwwCNPb8lenOdBhe6dkGuT\nqScb1yw+X+oPS6PMcueAx7pBszTKYanlokpMEriVXPS45gJKqG0zpCYhYqXYf1FH\n/vpSjbQebir9qCQjfecCs6nFqoXhetmdAOYEAlNBJVrDzYP5c8ymAXWtp08vGDSs\nvIvLv8MYnzdmoABVA48l\n=lz50\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHSL88exAm9K2CPoU3wBwcRARpDV6SOsYfn2wSPQ8p2qCP/wEAF1wJ9Kv4/W\n3WJbcXuIb0cI8QRcdBto8Agi57w/nQi7rwCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQOKFLSNAG8aWZMZPY\nqrndYQjwEHh9uFotByxPeTUj2y3mNM0I8QRcdBto8Ah1rrQti6Q8fACD3+MNLvkM\njikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEG5H\nCi9OhRc7xZZpSomJMGAI8QRcdBto8Aj4nM26ENhWbQCD3+MNLvkMjiMiaHR0cHM6\nLy9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbfAQh1iaNJuE78xvolWThHijQAjw\nICeccoRMwKmty7bVnZsMom67VSekgdIwfirVtN35gFNDCPAgZ7U6mnuf0OJJg0nc\nAhDo0F2ZMTAc5CyLSgTMsqUvUN4I8CCCuJjhOLp4q9hoO+YGJyqT68M3kYZQC1kR\nO4RJyUxL8QjxBFx0G2jwCF9X1rE8VzJCAIPf4w0u+QyOLCtodHRwczovL2JvYi5i\ndGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a9995cf47daaf1180c6bef10932753222b328c9f\nparent b4fc5257b7dc106ff210d170397d4ce0e024f2c0\nparent fa2cdc9ac2672301591cafceb8ff230b95425ad0\nauthor MarcoFalke <falke.marco@gmail.com> 1551113058 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551113061 -0500\n\nMerge #15419: qa: Always refresh cache to be out of ibd\n\nfa2cdc9ac2 test: Simplify create_cache (MarcoFalke)\nfa25210d62 qa: Fix wallet_txn_doublespend issue (MarcoFalke)\n1111aecbb5 qa: Always refresh stale cache to be out of ibd (MarcoFalke)\nfab0d85802 qa: Remove mocktime unless required (MarcoFalke)\n\nPull request description:\n\n  When starting a test, we are always in IBD because the timestamps on cached blocks are in the past. Usually, we solve that by generating a block at the beginning of the test.\n\n  That is clumsy and might even lead to other problems such as #15360 and https://github.com/bitcoin/bitcoin/issues/14446#issuecomment-461926598\n\n  So fix that by getting rid of mocktime and always refreshing the last block of the cache when starting the test framework.\n\n  Should fix #14446\n\nTree-SHA512: 6af09800f9c86131349a103af617a54551f5f3f3260d38e14e3f30fdd3d91a0feb0100c56cbb12eae4aeac5571ae4b530b16345cbb831d2670237b53351a22c1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4fc5257b7dc106ff210d170397d4ce0e024f2c0"
      },
      {
        "sha": "fa2cdc9ac2672301591cafceb8ff230b95425ad0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cdc9ac2672301591cafceb8ff230b95425ad0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2cdc9ac2672301591cafceb8ff230b95425ad0"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 59,
      "deletions": 34
    },
    "files": [
      {
        "sha": "f042adb7aa25c264d94006560ffae6326898d785",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "patch": "@@ -44,6 +44,7 @@\n class ProxyTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.setup_clean_chain = True\n \n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n@@ -198,4 +199,3 @@ def networks_dict(d):\n \n if __name__ == '__main__':\n     ProxyTest().main()\n-"
      },
      {
        "sha": "efe720b9b10494a54809b4b9468e0b2ab64152fc",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "patch": "@@ -29,7 +29,6 @@\n     assert_raises_rpc_error,\n     bytes_to_hex_str,\n     hex_str_to_bytes,\n-    wait_until,\n )\n \n \n@@ -38,7 +37,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\n             '-txindex',\n-            '-reindex',  # Need reindex for txindex\n             '-acceptnonstdtxn=0',  # Try to mimic main-net\n         ]] * self.num_nodes\n \n@@ -56,7 +54,7 @@ def run_test(self):\n \n         self.log.info('Start with empty mempool, and 200 blocks')\n         self.mempool_size = 0\n-        wait_until(lambda: node.getblockcount() == 200)\n+        assert_equal(node.getblockcount(), 200)\n         assert_equal(node.getmempoolinfo()['size'], self.mempool_size)\n         coins = node.listunspent()\n "
      },
      {
        "sha": "af150a09af20812abfea94fb17532392243b7cdc",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "patch": "@@ -35,6 +35,7 @@\n from test_framework.blocktools import (\n     create_block,\n     create_coinbase,\n+    TIME_GENESIS_BLOCK,\n )\n from test_framework.messages import (\n     msg_block,\n@@ -46,9 +47,11 @@\n \n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.setup_clean_chain = True\n         self.num_nodes = 1\n \n     def run_test(self):\n+        self.mine_chain()\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n \n         self._test_getblockchaininfo()\n@@ -61,6 +64,15 @@ def run_test(self):\n         self._test_waitforblockheight()\n         assert self.nodes[0].verifychain(4, 0)\n \n+    def mine_chain(self):\n+        self.log.info('Create some old blocks')\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        for t in range(TIME_GENESIS_BLOCK, TIME_GENESIS_BLOCK + 200 * 600, 600):\n+            # ten-minute steps from genesis block time\n+            self.nodes[0].setmocktime(t)\n+            self.nodes[0].generatetoaddress(1, address)\n+        assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n+\n     def _test_getblockchaininfo(self):\n         self.log.info(\"Test getblockchaininfo\")\n "
      },
      {
        "sha": "09d7d877a7b02e6a3167e730aa22cc93ba3f18f8",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "patch": "@@ -29,11 +29,11 @@\n     get_datadir_path,\n     initialize_datadir,\n     p2p_port,\n-    set_node_times,\n     sync_blocks,\n     sync_mempools,\n )\n \n+\n class TestStatus(Enum):\n     PASSED = 1\n     FAILED = 2\n@@ -94,7 +94,6 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.network_thread = None\n-        self.mocktime = 0\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n         self.supports_cli = False\n         self.bind_to_localhost_only = True\n@@ -275,6 +274,19 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n         self.import_deterministic_coinbase_privkeys()\n+        if not self.setup_clean_chain:\n+            for n in self.nodes:\n+                assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n+            # To ensure that all nodes are out of IBD, the most recent block\n+            # must have a timestamp not too old (see IsInitialBlockDownload()).\n+            self.log.debug('Generate a block with current time')\n+            block_hash = self.nodes[0].generate(1)[0]\n+            block = self.nodes[0].getblock(blockhash=block_hash, verbosity=0)\n+            for n in self.nodes:\n+                n.submitblock(block)\n+                chain_info = n.getblockchaininfo()\n+                assert_equal(chain_info[\"blocks\"], 200)\n+                assert_equal(chain_info[\"initialblockdownload\"], False)\n \n     def import_deterministic_coinbase_privkeys(self):\n         for n in self.nodes:\n@@ -316,7 +328,6 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n                 timewait=self.rpc_timeout,\n                 bitcoind=binary[i],\n                 bitcoin_cli=self.options.bitcoincli,\n-                mocktime=self.mocktime,\n                 coverage_dir=self.options.coveragedir,\n                 cwd=self.options.tmpdir,\n                 extra_conf=extra_confs[i],\n@@ -435,7 +446,7 @@ def _start_logging(self):\n     def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n-        Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n+        Create a cache of a 199-block-long chain (with wallet) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n         assert self.num_nodes <= MAX_NODES\n@@ -468,7 +479,6 @@ def _initialize_chain(self):\n                     timewait=self.rpc_timeout,\n                     bitcoind=self.options.bitcoind,\n                     bitcoin_cli=self.options.bitcoincli,\n-                    mocktime=self.mocktime,\n                     coverage_dir=None,\n                     cwd=self.options.tmpdir,\n                 ))\n@@ -479,32 +489,22 @@ def _initialize_chain(self):\n             for node in self.nodes:\n                 node.wait_for_rpc_connection()\n \n-            # For backward compatibility of the python scripts with previous\n-            # versions of the cache, set mocktime to Jan 1,\n-            # 2014 + (201 * 10 * 60)\"\"\"\n-            self.mocktime = 1388534400 + (201 * 10 * 60)\n-\n-            # Create a 200-block-long chain; each of the 4 first nodes\n+            # Create a 199-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n-            # Note: To preserve compatibility with older versions of\n-            # initialize_chain, only 4 nodes will generate coins.\n-            #\n-            # blocks are created with timestamps 10 minutes apart\n-            # starting from 2010 minutes in the past\n-            block_time = self.mocktime - (201 * 10 * 60)\n-            for i in range(2):\n-                for peer in range(4):\n-                    for j in range(25):\n-                        set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n-                        block_time += 10 * 60\n-                    # Must sync before next peer starts generating blocks\n-                    sync_blocks(self.nodes)\n+            # The 4th node gets only 24 immature blocks so that the very last\n+            # block in the cache does not age too much (have an old tip age).\n+            # This is needed so that we are out of IBD when the test starts,\n+            # see the tip age check in IsInitialBlockDownload().\n+            for i in range(8):\n+                self.nodes[0].generatetoaddress(25 if i != 7 else 24, self.nodes[i % 4].get_deterministic_priv_key().address)\n+            sync_blocks(self.nodes)\n+\n+            for n in self.nodes:\n+                assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n \n             # Shut them down, and clean up cache directories:\n             self.stop_nodes()\n             self.nodes = []\n-            self.mocktime = 0\n \n             def cache_path(n, *paths):\n                 return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)"
      },
      {
        "sha": "37fd2a8744cf7cd50c87be3a4b25b9dc86e164de",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "patch": "@@ -61,7 +61,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -90,8 +90,7 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n             \"-debug\",\n             \"-debugexclude=libevent\",\n             \"-debugexclude=leveldb\",\n-            \"-mocktime=\" + str(mocktime),\n-            \"-uacomment=testnode%d\" % i\n+            \"-uacomment=testnode%d\" % i,\n         ]\n \n         self.cli = TestNodeCLI(bitcoin_cli, self.datadir)"
      },
      {
        "sha": "7b749235e200e63f9791b68b58387955807bb67c",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "patch": "@@ -7,17 +7,25 @@\n from test_framework.util import (\n     assert_equal,\n )\n+from test_framework.blocktools import (\n+    TIME_GENESIS_BLOCK,\n+)\n \n \n class CreateTxWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.setup_clean_chain = False\n+        self.setup_clean_chain = True\n         self.num_nodes = 1\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n+        self.log.info('Create some old blocks')\n+        self.nodes[0].setmocktime(TIME_GENESIS_BLOCK)\n+        self.nodes[0].generate(200)\n+        self.nodes[0].setmocktime(0)\n+\n         self.log.info('Check that we have some (old) blocks and that anti-fee-sniping is disabled')\n         assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)"
      },
      {
        "sha": "9050e212474559af093ea4eed118dca25b0165a3",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f470ecc534d49cb5f7045ea9564481acd3e2b4b/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "patch": "@@ -34,6 +34,14 @@ def setup_network(self):\n     def run_test(self):\n         # All nodes should start with 1,250 BTC:\n         starting_balance = 1250\n+\n+        # All nodes should be out of IBD.\n+        # If the nodes are not all out of IBD, that can interfere with\n+        # blockchain sync later in the test when nodes are connected, due to\n+        # timing issues.\n+        for n in self.nodes:\n+            assert n.getblockchaininfo()[\"initialblockdownload\"] == False\n+\n         for i in range(4):\n             assert_equal(self.nodes[i].getbalance(), starting_balance)\n             self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!"
      }
    ]
  },
  {
    "sha": "fa9ff8fe212ae40a1ef4980455bf916bc044fee2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTlmZjhmZTIxMmFlNDBhMWVmNDk4MDQ1NWJmOTE2YmMwNDRmZWUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-26T04:49:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-26T04:45:48Z"
      },
      "message": "doc: Remove misleading hint in getrawtransaction",
      "tree": {
        "sha": "3b597375c943b285288d3e9a6a682ee6c92be1f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b597375c943b285288d3e9a6a682ee6c92be1f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9ff8fe212ae40a1ef4980455bf916bc044fee2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcdMR8AAoJEM4rdWl+aaVI3+MMALOkFDheYl5XMj8G/jiI4Fun\nxAFScUqc999o66sMf/gJHYifDdNYFvGM92IKT2DWzWrdo2zXoDFDOesaY75bSCbh\nXo//gy5VNxcA1OfXMZ354iBsDazW2vpFGcjErYJj2+JfHmbCAPxwZyqYMjztLvRZ\nyhELEQFUfyob1k7RV2zJH3jXZRiSL+K5GO4zsbqDv1rOYyawXas5SH7jygBUrteD\nH9w/arehm5gq1ozYPo5hISPQ6FvXJJUkjDnfgWhyVtvguEjRbz69odjuQGpmRZYP\nf1RTSH0jvT8LJG+RNVsipTegOKl2BakwyjtGAzEBXZlJfo5CLJ20u6RElP5nLMYy\nSySK6idWxI6vlSwUeHu+0QE0xr4gvpATo2dSFeqWFygPlHxO1BRMhHXBGTua4eIq\nHgFoQVcQmB8r209ArCAurULjynDOUslqc80tPe/wdfoKJiOk1hN3A6lBGB3Ya7v0\nvpQEzHCvSzBoM4bxGSo3t0USjX7cdXmTgfl0R1zskQ==\n=sLOP\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b597375c943b285288d3e9a6a682ee6c92be1f7\nparent b4fc5257b7dc106ff210d170397d4ce0e024f2c0\nauthor MarcoFalke <falke.marco@gmail.com> 1551156560 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551156348 -0500\n\ndoc: Remove misleading hint in getrawtransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9ff8fe212ae40a1ef4980455bf916bc044fee2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9ff8fe212ae40a1ef4980455bf916bc044fee2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9ff8fe212ae40a1ef4980455bf916bc044fee2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4fc5257b7dc106ff210d170397d4ce0e024f2c0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f5543f63f6bad8a1495cd0ca9d8e13fda2e78834",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9ff8fe212ae40a1ef4980455bf916bc044fee2/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9ff8fe212ae40a1ef4980455bf916bc044fee2/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa9ff8fe212ae40a1ef4980455bf916bc044fee2",
        "patch": "@@ -79,8 +79,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 \"will return the transaction if it is in the mempool, or if -txindex is enabled and the transaction\\n\"\n                 \"is in a block in the blockchain.\\n\"\n \n-                \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\"\n-                \"Or use gettransaction for wallet transactions.\\n\"\n+                \"\\nHint: Use gettransaction for wallet transactions.\\n\"\n \n                 \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n                 \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\","
      }
    ]
  },
  {
    "sha": "9999879f56c88ca2837f5d18e6688917ba96e9e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTk5ODc5ZjU2Yzg4Y2EyODM3ZjVkMThlNjY4ODkxN2JhOTZlOWUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-25T19:54:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-26T04:47:36Z"
      },
      "message": "refactor: Use RPCHelpMan::IsValidNumArgs in getrawtransaction",
      "tree": {
        "sha": "f2284c5ba4f9e9ece6e000ae18d28d187fe6f38f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2284c5ba4f9e9ece6e000ae18d28d187fe6f38f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9999879f56c88ca2837f5d18e6688917ba96e9e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcdMToAAoJEM4rdWl+aaVIj9MMAKh/9fyA2nZzuZthwKQGbI8H\nOKJMQqxrZ2MSZ/2SFdhZdaanWX2fChO/jsCQrsr4Ll765m5WEblIaE1VsYgNu/8a\nsSvKtLjlQrvFWqwgh9ZD4P9daVh3jvYrHpA7AuMBLuT51TCPT0o1FArTo7hyTndI\nSTreLZUMdrE/29a58DcDOtJCaFXAomZlXRxBlL8AMPUaBcbfDYs2/EHwlyNuRrA4\n9E/yrwXSYs/+kFTPAC7rnlM/hjaD5IgeEJKC+ebp/DqbLQFSMTGwPSWrjtnwIU90\n1jAOHPhgtT3mAxQp2RzvZJu8QwRTw8wlN8p8RCltZpY+/+d24/LdFSvvNawk6Q2c\nuziBTqM8xqEWuYz80Sw9Cy7uXA1iHzM2xaKMfKgObNldsntI/huoioIz8zLtHfF2\nJZkysW9DPUDVWxwsHaCx3mTLrvEGnweY8UPTlJixoNtyCrdYD+EcygmC/bF5JnuI\nwK1TRn9/F3R592JIESTcXFiEkQytNYr+weRCSOP28g==\n=HlNr\n-----END PGP SIGNATURE-----",
        "payload": "tree f2284c5ba4f9e9ece6e000ae18d28d187fe6f38f\nparent fa9ff8fe212ae40a1ef4980455bf916bc044fee2\nauthor MarcoFalke <falke.marco@gmail.com> 1551124462 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551156456 -0500\n\nrefactor: Use RPCHelpMan::IsValidNumArgs in getrawtransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9999879f56c88ca2837f5d18e6688917ba96e9e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9999879f56c88ca2837f5d18e6688917ba96e9e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9999879f56c88ca2837f5d18e6688917ba96e9e2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa9ff8fe212ae40a1ef4980455bf916bc044fee2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9ff8fe212ae40a1ef4980455bf916bc044fee2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9ff8fe212ae40a1ef4980455bf916bc044fee2"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d19afaa8a1dd8a58c53c672c8db67145ba4a922d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9999879f56c88ca2837f5d18e6688917ba96e9e2/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9999879f56c88ca2837f5d18e6688917ba96e9e2/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9999879f56c88ca2837f5d18e6688917ba96e9e2",
        "patch": "@@ -6,8 +6,8 @@\n #include <chain.h>\n #include <coins.h>\n #include <compat/byteswap.h>\n-#include <consensus/validation.h>\n #include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n #include <core_io.h>\n #include <index/txindex.h>\n #include <init.h>\n@@ -67,9 +67,7 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n \n static UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            RPCHelpMan{\n+    const RPCHelpMan help{\n                 \"getrawtransaction\",\n                 \"\\nReturn the raw transaction data.\\n\"\n \n@@ -147,7 +145,11 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n                 },\n-            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");"
      }
    ]
  },
  {
    "sha": "d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODhmN2Y4NzY0YjFmOTNlMzk5MmM3MTRmNjI0NDZiNmVkNWNmZDFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-26T14:20:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-26T14:20:39Z"
      },
      "message": "Merge #15471: rpc/gui: Remove 'Unknown block versions being mined' warning\n\nef362f2773 rpc/gui: Remove 'Unknown block versions being mined' warning (Wladimir J. van der Laan)\n\nPull request description:\n\n  Due to miners inserting garbage into the version numbers causing false positives, the current version signalling has become completely useless. This removes the \"unknown block versions\" warning which has the tendency to scare users unnecessarily (and might get them to \"update\" to something bad).\n\n  It preserves the warning in the logs. Whether this is desirable can be a point of discussion.\n\nTree-SHA512: 51407ccd24a571462465d9c7180f0f28307c50b82a03284abe783e181d8ab7e0638dbb710698d883f28de8a609db70763e39be2470d956e67c833da0768e43e9",
      "tree": {
        "sha": "cf49994956aedb56a4994640a14de14fff0fb4d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf49994956aedb56a4994640a14de14fff0fb4d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcdUs3AAoJENLqSFDnUosls5wQALK9FNTmRcnTpNwWf49tsCLa\nfIcLqyuW1JccGzvr1JAG5jlAOXK8bCjeXYv5fRnGrkT17qpyL9FY8yh0MdCHeCqo\nmTlzIc+YVIGE2TXb8Uv1nxLMdT8tksH4iY/WqVxr8I03uQDlGqyLjVA2tqAXyHx2\n3IXTutbn1Q0yZsma/pq7fYagFvmqvdouZuyYd5B2uVFWif8TWP7hBvZNlQYxbPFd\nduPvEN/TPYCC7IIAz0u067MHVnCUuJicLh0AWXe2lLk8zjSBS7dKprqNLv3Huw3D\nWcyw3LCinqxzW7l+KxGB9vjftJX+LmW4lizxrLW/yTrt9nwbKYhWodmhUGjnpFow\n9YKkPAtsg3N6jsQ60klC4F2GvhWlarFdMTqDuFGpVISPLA83PlaulVTWGWc7ULBQ\n3U/Ue4kaRLB3kRmT50HZaU+kQXmshAGKcEAhuuH0YFTc3IkEwKmkgpjKoIgYv/7Q\nAMqVi9NWOTQSZIm3D8PRbVYASDuJ3WxufAoSisirzAVd77BT3wKFptXTbNr3obq+\ngfPK4YA7oAD3EgQW9o1FprzGxjbtnVETepOe/Rc5lNLeDWh2zj+KisZSy7fZnbFK\nGvmCAYntHb8lSPykKzrAM+zMd/AhZUd5E5H7+3wDb4IzawLdd9WBVFgXtTnZm1mG\nPbjRDLPbWrHJY7h45UP5\n=r457\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHraW5YrjQbPIAsZJf+TdcxPyA0oqqbqqsAMxi47vPRjCP/wEBqayt6ebR74\nNFO6mFtbrtkI8QRcdUs68AhMSEfjL4tdqgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wECMVKaw7rF5icyXQFsR8CVwI8CCS9DJs\nVpVtI4ieR1Cr05o3mSgOuuaGFoSRakqbpTc6uQjxBFx1SzrwCBNu+yKfgSMLAIPf\n4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BA3nM3jUA1M4PAPNCQJf1vHCPAgfANByctN1lDXcnGU7sUvU/60gqEN\nBWfI0qW07j4ulacI8QRcdUs68Aj9UWnplIwecwCD3+MNLvkMjiwraHR0cHM6Ly9i\nb2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQfYAQbgtOCzK9ffeH\nblcvyQjwEKCaicFc02Er0e2y4spF6ZII8CD3sd9ZgCPKNsc3RWEEWM8qCR9+ntZd\nlOyoJLzC2CJ0jgjxBFx1SzrwCKxKFqCkwn+UAIPf4w0u+QyOKShodHRwczovL2Zp\nbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree cf49994956aedb56a4994640a14de14fff0fb4d8\nparent 8f470ecc534d49cb5f7045ea9564481acd3e2b4b\nparent ef362f27733e9281062b4e65a26e5696f34692b4\nauthor MarcoFalke <falke.marco@gmail.com> 1551190825 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551190839 -0500\n\nMerge #15471: rpc/gui: Remove 'Unknown block versions being mined' warning\n\nef362f2773 rpc/gui: Remove 'Unknown block versions being mined' warning (Wladimir J. van der Laan)\n\nPull request description:\n\n  Due to miners inserting garbage into the version numbers causing false positives, the current version signalling has become completely useless. This removes the \"unknown block versions\" warning which has the tendency to scare users unnecessarily (and might get them to \"update\" to something bad).\n\n  It preserves the warning in the logs. Whether this is desirable can be a point of discussion.\n\nTree-SHA512: 51407ccd24a571462465d9c7180f0f28307c50b82a03284abe783e181d8ab7e0638dbb710698d883f28de8a609db70763e39be2470d956e67c833da0768e43e9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f470ecc534d49cb5f7045ea9564481acd3e2b4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f470ecc534d49cb5f7045ea9564481acd3e2b4b"
      },
      {
        "sha": "ef362f27733e9281062b4e65a26e5696f34692b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef362f27733e9281062b4e65a26e5696f34692b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef362f27733e9281062b4e65a26e5696f34692b4"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 1,
      "deletions": 29
    },
    "files": [
      {
        "sha": "f3d34dca70049468d6d3b53190e343ff123b5f2a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
        "patch": "@@ -2259,12 +2259,6 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n         }\n         if (nUpgraded > 0)\n             AppendWarning(warningMessages, strprintf(_(\"%d of last 100 blocks have unexpected version\"), nUpgraded));\n-        if (nUpgraded > 100/2)\n-        {\n-            std::string strWarning = _(\"Warning: Unknown block versions being mined! It's possible unknown rules are in effect\");\n-            // notify GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n-            DoWarning(strWarning);\n-        }\n     }\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__, /* Continued */\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,"
      },
      {
        "sha": "b98dd6d26c3a69821719cd54c830d8b62b9f7f57",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 1,
        "deletions": 17,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
        "patch": "@@ -66,23 +66,7 @@ def run_test(self):\n             txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n             assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n \n-        # Mine another 41 up-version blocks. -alertnotify should trigger on the 51st.\n-        self.log.info(\"test -alertnotify\")\n-        self.nodes[1].generatetoaddress(41, ADDRESS_BCRT1_UNSPENDABLE)\n-        self.sync_all()\n-\n-        # Give bitcoind 10 seconds to write the alert notification\n-        wait_until(lambda: len(os.listdir(self.alertnotify_dir)), timeout=10)\n-\n-        for notify_file in os.listdir(self.alertnotify_dir):\n-            os.remove(os.path.join(self.alertnotify_dir, notify_file))\n-\n-        # Mine more up-version blocks, should not get more alerts:\n-        self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_UNSPENDABLE)\n-        self.sync_all()\n-\n-        self.log.info(\"-alertnotify should not continue notifying for more unknown version blocks\")\n-        assert_equal(len(os.listdir(self.alertnotify_dir)), 0)\n+        # TODO: add test for `-alertnotify` large fork notifications\n \n if __name__ == '__main__':\n     NotificationsTest().main()"
      },
      {
        "sha": "1ced618d479f188df1010f165d00937eda36e1eb",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
        "patch": "@@ -22,7 +22,6 @@\n VB_UNKNOWN_BIT = 27       # Choose a bit unassigned to any deployment\n VB_UNKNOWN_VERSION = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n \n-WARN_UNKNOWN_RULES_MINED = \"Unknown block versions being mined! It's possible unknown rules are in effect\"\n WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n VB_PATTERN = re.compile(\"Warning: unknown new rules activated.*versionbit\")\n \n@@ -78,15 +77,10 @@ def run_test(self):\n         assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n         assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n-        self.log.info(\"Check that there is a warning if >50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n         node.generatetoaddress(VB_PERIOD - VB_THRESHOLD, node_deterministic_address)\n \n-        # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n-\n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Mine a period worth of expected blocks so the generic block-version warning\n         # is cleared. This will move the versionbit state to ACTIVE."
      }
    ]
  },
  {
    "sha": "2fa85ebd1c2d7579ea005300e9101fbb48805c2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmE4NWViZDFjMmQ3NTc5ZWEwMDUzMDBlOTEwMWZiYjQ4ODA1YzJm",
    "commit": {
      "author": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-01-31T19:45:27Z"
      },
      "committer": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-02-26T20:08:36Z"
      },
      "message": "add rpc_misc.py, mv test getmemoryinfo, add test mallocinfo",
      "tree": {
        "sha": "109c285901da6ac7b666bd80ecb6757c66601fda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/109c285901da6ac7b666bd80ecb6757c66601fda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fa85ebd1c2d7579ea005300e9101fbb48805c2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa85ebd1c2d7579ea005300e9101fbb48805c2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa85ebd1c2d7579ea005300e9101fbb48805c2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa85ebd1c2d7579ea005300e9101fbb48805c2f/comments",
    "author": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b6673d3826128a9f58fd5417aaf4c2f4169c6aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b6673d3826128a9f58fd5417aaf4c2f4169c6aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b6673d3826128a9f58fd5417aaf4c2f4169c6aa"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 49,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ab216bc467c71914e7bca8b2d45b38b7b2244c5b",
        "filename": "test/functional/rpc_misc.py",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa85ebd1c2d7579ea005300e9101fbb48805c2f/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa85ebd1c2d7579ea005300e9101fbb48805c2f/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=2fa85ebd1c2d7579ea005300e9101fbb48805c2f",
        "patch": "@@ -0,0 +1,48 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPC misc output.\"\"\"\n+import xml.etree.ElementTree as ET\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+)\n+\n+from test_framework.authproxy import JSONRPCException\n+\n+\n+class RpcMiscTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"test getmemoryinfo\")\n+        memory = node.getmemoryinfo()['locked']\n+        assert_greater_than(memory['used'], 0)\n+        assert_greater_than(memory['free'], 0)\n+        assert_greater_than(memory['total'], 0)\n+        assert_greater_than(memory['locked'], 0)\n+        assert_greater_than(memory['chunks_used'], 0)\n+        assert_greater_than(memory['chunks_free'], 0)\n+        assert_equal(memory['used'] + memory['free'], memory['total'])\n+\n+        self.log.info(\"test mallocinfo\")\n+        try:\n+            mallocinfo = node.getmemoryinfo(mode=\"mallocinfo\")\n+            self.log.info('getmemoryinfo(mode=\"mallocinfo\") call succeeded')\n+            tree = ET.fromstring(mallocinfo)\n+            assert_equal(tree.tag, 'malloc')\n+        except JSONRPCException:\n+            self.log.info('getmemoryinfo(mode=\"mallocinfo\") not available')\n+            assert_raises_rpc_error(-8, 'mallocinfo is only available when compiled with glibc 2.10+', node.getmemoryinfo, mode=\"mallocinfo\")\n+\n+        assert_raises_rpc_error(-8, \"unknown mode foobar\", node.getmemoryinfo, mode=\"foobar\")\n+\n+if __name__ == '__main__':\n+    RpcMiscTest().main()"
      },
      {
        "sha": "057fd175b70aa52fe2f15827e8b4c6fcda2d342c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa85ebd1c2d7579ea005300e9101fbb48805c2f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa85ebd1c2d7579ea005300e9101fbb48805c2f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2fa85ebd1c2d7579ea005300e9101fbb48805c2f",
        "patch": "@@ -112,6 +112,7 @@\n     'wallet_txn_clone.py',\n     'wallet_txn_clone.py --segwit',\n     'rpc_getchaintips.py',\n+    'rpc_misc.py',\n     'interface_rest.py',\n     'mempool_spend_coinbase.py',\n     'mempool_reorg.py',"
      },
      {
        "sha": "10b51ecdacc4eaf0714a5be87cee5fd50b3d4a7d",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa85ebd1c2d7579ea005300e9101fbb48805c2f/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa85ebd1c2d7579ea005300e9101fbb48805c2f/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=2fa85ebd1c2d7579ea005300e9101fbb48805c2f",
        "patch": "@@ -11,7 +11,6 @@\n     assert_array_result,\n     assert_equal,\n     assert_fee_amount,\n-    assert_greater_than,\n     assert_raises_rpc_error,\n     connect_nodes_bi,\n     sync_blocks,\n@@ -85,13 +84,8 @@ def run_test(self):\n         assert_equal(txout['value'], 50)\n \n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n-        # Locked memory should increase to sign transactions\n-        self.log.info(\"test getmemoryinfo\")\n-        memory_before = self.nodes[0].getmemoryinfo()\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         mempool_txid = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n-        memory_after = self.nodes[0].getmemoryinfo()\n-        assert_greater_than(memory_after['locked']['used'], memory_before['locked']['used'])\n \n         self.log.info(\"test gettxout (second part)\")\n         # utxo spent in mempool should be visible if you exclude mempool"
      }
    ]
  },
  {
    "sha": "fa45123f66f42efc32bebae39bd1296908aaabdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ1MTIzZjY2ZjQyZWZjMzJiZWJhZTM5YmQxMjk2OTA4YWFhYmRj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-25T20:08:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-26T23:24:37Z"
      },
      "message": "test: Add .style.yapf",
      "tree": {
        "sha": "7f7c7254c59fd6a59959539544e5a4dac67aa127",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f7c7254c59fd6a59959539544e5a4dac67aa127"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa45123f66f42efc32bebae39bd1296908aaabdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcdcq1AAoJEM4rdWl+aaVI6ccMAJHlANcziOuXJ9PidLx3DKWK\nJxF65E+OqXTD05t28tGorp7mmqSQVxbuQdbs5a26N69P2lCDEYsX/m4u/fQ9PsIh\np5uTJbQ0lYE0vd/NgDb1rrGUnVwQCIA6vWagyc+psMZxnN7LW51Bgmx9/nJem8UV\n1dcSnDoUEpqqSG/OeKsOsL4q1+7MeJLK4PK7SzHfJ2ThmseyPeVvESyVNAukpLA0\nDtehITyaVnQx8RLg9y1HlrIPpwmkiSlYQnBUiEaebVMNJdNVzTX1Gv5V6wzuYUrl\nRwIhJHfsPQz/SG1gtrTot8hQesB6AReh6Bwly4llAMr82a/EtDgMzoNO4M5BV4wy\nU7YAunM+DngMXSE2NkGO49wHvJ7sV6ywpcEFhLyLhrbmPi1gLBokV3HQ+wKLtmtD\nvg3fKS4emDNAKQSnmRiiFpTS7wEA6kYGfhIqbUXSk12lp4Ut2VBet+jPgiUuCY2W\nvK9k/OGuor51/W6YnOAjOwLhcQ5p0RkCuVR6CH7eLw==\n=nTqp\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f7c7254c59fd6a59959539544e5a4dac67aa127\nparent b4fc5257b7dc106ff210d170397d4ce0e024f2c0\nauthor MarcoFalke <falke.marco@gmail.com> 1551125336 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551223477 -0500\n\ntest: Add .style.yapf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa45123f66f42efc32bebae39bd1296908aaabdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa45123f66f42efc32bebae39bd1296908aaabdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa45123f66f42efc32bebae39bd1296908aaabdc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4fc5257b7dc106ff210d170397d4ce0e024f2c0"
      }
    ],
    "stats": {
      "total": 261,
      "additions": 261,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe6227baf66b7c25de1195d9242a14b365f2be14",
        "filename": ".style.yapf",
        "status": "added",
        "additions": 261,
        "deletions": 0,
        "changes": 261,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa45123f66f42efc32bebae39bd1296908aaabdc/.style.yapf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa45123f66f42efc32bebae39bd1296908aaabdc/.style.yapf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.style.yapf?ref=fa45123f66f42efc32bebae39bd1296908aaabdc",
        "patch": "@@ -0,0 +1,261 @@\n+[style]\n+# Align closing bracket with visual indentation.\n+align_closing_bracket_with_visual_indent=True\n+\n+# Allow dictionary keys to exist on multiple lines. For example:\n+#\n+#   x = {\n+#       ('this is the first element of a tuple',\n+#        'this is the second element of a tuple'):\n+#            value,\n+#   }\n+allow_multiline_dictionary_keys=False\n+\n+# Allow lambdas to be formatted on more than one line.\n+allow_multiline_lambdas=False\n+\n+# Allow splits before the dictionary value.\n+allow_split_before_dict_value=True\n+\n+# Number of blank lines surrounding top-level function and class\n+# definitions.\n+blank_lines_around_top_level_definition=2\n+\n+# Insert a blank line before a class-level docstring.\n+blank_line_before_class_docstring=False\n+\n+# Insert a blank line before a module docstring.\n+blank_line_before_module_docstring=False\n+\n+# Insert a blank line before a 'def' or 'class' immediately nested\n+# within another 'def' or 'class'. For example:\n+#\n+#   class Foo:\n+#                      # <------ this blank line\n+#     def method():\n+#       ...\n+blank_line_before_nested_class_or_def=False\n+\n+# Do not split consecutive brackets. Only relevant when\n+# dedent_closing_brackets is set. For example:\n+#\n+#    call_func_that_takes_a_dict(\n+#        {\n+#            'key1': 'value1',\n+#            'key2': 'value2',\n+#        }\n+#    )\n+#\n+# would reformat to:\n+#\n+#    call_func_that_takes_a_dict({\n+#        'key1': 'value1',\n+#        'key2': 'value2',\n+#    })\n+coalesce_brackets=False\n+\n+# The column limit.\n+column_limit=79\n+\n+# The style for continuation alignment. Possible values are:\n+#\n+# - SPACE: Use spaces for continuation alignment. This is default behavior.\n+# - FIXED: Use fixed number (CONTINUATION_INDENT_WIDTH) of columns\n+#   (ie: CONTINUATION_INDENT_WIDTH/INDENT_WIDTH tabs) for continuation\n+#   alignment.\n+# - LESS: Slightly left if cannot vertically align continuation lines with\n+#   indent characters.\n+# - VALIGN-RIGHT: Vertically align continuation lines with indent\n+#   characters. Slightly right (one more indent character) if cannot\n+#   vertically align continuation lines with indent characters.\n+#\n+# For options FIXED, and VALIGN-RIGHT are only available when USE_TABS is\n+# enabled.\n+continuation_align_style=SPACE\n+\n+# Indent width used for line continuations.\n+continuation_indent_width=4\n+\n+# Put closing brackets on a separate line, dedented, if the bracketed\n+# expression can't fit in a single line. Applies to all kinds of brackets,\n+# including function definitions and calls. For example:\n+#\n+#   config = {\n+#       'key1': 'value1',\n+#       'key2': 'value2',\n+#   }        # <--- this bracket is dedented and on a separate line\n+#\n+#   time_series = self.remote_client.query_entity_counters(\n+#       entity='dev3246.region1',\n+#       key='dns.query_latency_tcp',\n+#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n+#       start_ts=now()-timedelta(days=3),\n+#       end_ts=now(),\n+#   )        # <--- this bracket is dedented and on a separate line\n+dedent_closing_brackets=False\n+\n+# Disable the heuristic which places each list element on a separate line\n+# if the list is comma-terminated.\n+disable_ending_comma_heuristic=False\n+\n+# Place each dictionary entry onto its own line.\n+each_dict_entry_on_separate_line=True\n+\n+# The regex for an i18n comment. The presence of this comment stops\n+# reformatting of that line, because the comments are required to be\n+# next to the string they translate.\n+i18n_comment=\n+\n+# The i18n function call names. The presence of this function stops\n+# reformattting on that line, because the string it has cannot be moved\n+# away from the i18n comment.\n+i18n_function_call=\n+\n+# Indent the dictionary value if it cannot fit on the same line as the\n+# dictionary key. For example:\n+#\n+#   config = {\n+#       'key1':\n+#           'value1',\n+#       'key2': value1 +\n+#               value2,\n+#   }\n+indent_dictionary_value=False\n+\n+# The number of columns to use for indentation.\n+indent_width=4\n+\n+# Join short lines into one line. E.g., single line 'if' statements.\n+join_multiple_lines=True\n+\n+# Do not include spaces around selected binary operators. For example:\n+#\n+#   1 + 2 * 3 - 4 / 5\n+#\n+# will be formatted as follows when configured with \"*,/\":\n+#\n+#   1 + 2*3 - 4/5\n+#\n+no_spaces_around_selected_binary_operators=\n+\n+# Use spaces around default or named assigns.\n+spaces_around_default_or_named_assign=False\n+\n+# Use spaces around the power operator.\n+spaces_around_power_operator=False\n+\n+# The number of spaces required before a trailing comment.\n+spaces_before_comment=2\n+\n+# Insert a space between the ending comma and closing bracket of a list,\n+# etc.\n+space_between_ending_comma_and_closing_bracket=True\n+\n+# Split before arguments\n+split_all_comma_separated_values=False\n+\n+# Split before arguments if the argument list is terminated by a\n+# comma.\n+split_arguments_when_comma_terminated=False\n+\n+# Set to True to prefer splitting before '&', '|' or '^' rather than\n+# after.\n+split_before_bitwise_operator=True\n+\n+# Split before the closing bracket if a list or dict literal doesn't fit on\n+# a single line.\n+split_before_closing_bracket=True\n+\n+# Split before a dictionary or set generator (comp_for). For example, note\n+# the split before the 'for':\n+#\n+#   foo = {\n+#       variable: 'Hello world, have a nice day!'\n+#       for variable in bar if variable != 42\n+#   }\n+split_before_dict_set_generator=True\n+\n+# Split before the '.' if we need to split a longer expression:\n+#\n+#   foo = ('This is a really long string: {}, {}, {}, {}'.format(a, b, c, d))\n+#\n+# would reformat to something like:\n+#\n+#   foo = ('This is a really long string: {}, {}, {}, {}'\n+#          .format(a, b, c, d))\n+split_before_dot=False\n+\n+# Split after the opening paren which surrounds an expression if it doesn't\n+# fit on a single line.\n+split_before_expression_after_opening_paren=False\n+\n+# If an argument / parameter list is going to be split, then split before\n+# the first argument.\n+split_before_first_argument=False\n+\n+# Set to True to prefer splitting before 'and' or 'or' rather than\n+# after.\n+split_before_logical_operator=True\n+\n+# Split named assignments onto individual lines.\n+split_before_named_assigns=True\n+\n+# Set to True to split list comprehensions and generators that have\n+# non-trivial expressions and multiple clauses before each of these\n+# clauses. For example:\n+#\n+#   result = [\n+#       a_long_var + 100 for a_long_var in xrange(1000)\n+#       if a_long_var % 10]\n+#\n+# would reformat to something like:\n+#\n+#   result = [\n+#       a_long_var + 100\n+#       for a_long_var in xrange(1000)\n+#       if a_long_var % 10]\n+split_complex_comprehension=False\n+\n+# The penalty for splitting right after the opening bracket.\n+split_penalty_after_opening_bracket=30\n+\n+# The penalty for splitting the line after a unary operator.\n+split_penalty_after_unary_operator=10000\n+\n+# The penalty for splitting right before an if expression.\n+split_penalty_before_if_expr=0\n+\n+# The penalty of splitting the line around the '&', '|', and '^'\n+# operators.\n+split_penalty_bitwise_operator=300\n+\n+# The penalty for splitting a list comprehension or generator\n+# expression.\n+split_penalty_comprehension=80\n+\n+# The penalty for characters over the column limit.\n+split_penalty_excess_character=7000\n+\n+# The penalty incurred by adding a line split to the unwrapped line. The\n+# more line splits added the higher the penalty.\n+split_penalty_for_added_line_split=30\n+\n+# The penalty of splitting a list of \"import as\" names. For example:\n+#\n+#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n+#                                                             long_argument_2,\n+#                                                             long_argument_3)\n+#\n+# would reformat to something like:\n+#\n+#   from a_very_long_or_indented_module_name_yada_yad import (\n+#       long_argument_1, long_argument_2, long_argument_3)\n+split_penalty_import_names=0\n+\n+# The penalty of splitting the line around the 'and' and 'or'\n+# operators.\n+split_penalty_logical_operator=300\n+\n+# Use the Tab character for indentation.\n+use_tabs=False\n+"
      }
    ]
  },
  {
    "sha": "fa466cbc5016aa8dff40e63a273a077f76c1cdcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ2NmNiYzUwMTZhYThkZmY0MGU2M2EyNzNhMDc3Zjc2YzFjZGNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-27T00:03:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-27T00:52:44Z"
      },
      "message": "doc: Update release process for snap package",
      "tree": {
        "sha": "aeac189c7c81562ca9e641f5e5ff857a3190c645",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aeac189c7c81562ca9e641f5e5ff857a3190c645"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa466cbc5016aa8dff40e63a273a077f76c1cdcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcdd9cAAoJEM4rdWl+aaVIYVoMAKLBw3ZjhVXUk1a2uMCZrbyJ\nEw5bSqgQViidx0EGCqs1lHj9lv60XwpyZe2m0fNJqZgIMAsRooocFXpmmRvuQlPn\nTrTnXCMV7OTdO57Z6jOstNvlEd9xWG8tL5xD078z7bt31pk30tqHP8lbYgGaszvn\nAXyiUsgNQX8MgZgvkCnCXV6gMatvFI0e15NOzvSfO9VKXTpBQZhYxnUZqHisdSSI\nLTlGPdeot4KO4CBqqRWMQnEPDVn3SrU+erbOgCs04XwMVfvbc0HKrCxN0oV8Xlt7\noOUdXpjmy5/hX8mCH/OICCmUlBwvzcI3xCVZWUWvGhkPlej5IJCgP+YZd9fTdlRQ\ntaBUMJHBpmkPMscNSiSfhXIJNDSg+Ciur+FOm5s8X1PDsV/fI/pV8/M2Ipl8MEu3\ni3tZ96Wm8R3a2zwNZqHwAzPVlxQxvC59wc6A2IjztZdnnWgYpxdkz7xC5uYe0PQp\nl+0WV/qV2Fk0CvOgJ1EOFEih5p3Nvp3FDFXFQVe1Ow==\n=n36P\n-----END PGP SIGNATURE-----",
        "payload": "tree aeac189c7c81562ca9e641f5e5ff857a3190c645\nparent b4fc5257b7dc106ff210d170397d4ce0e024f2c0\nauthor MarcoFalke <falke.marco@gmail.com> 1551225815 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551228764 -0500\n\ndoc: Update release process for snap package\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa466cbc5016aa8dff40e63a273a077f76c1cdcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa466cbc5016aa8dff40e63a273a077f76c1cdcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa466cbc5016aa8dff40e63a273a077f76c1cdcb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4fc5257b7dc106ff210d170397d4ce0e024f2c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4fc5257b7dc106ff210d170397d4ce0e024f2c0"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 34,
      "deletions": 10
    },
    "files": [
      {
        "sha": "eb1f5ad222fca0857eb16be127b4adb5bb78bae5",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa466cbc5016aa8dff40e63a273a077f76c1cdcb/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa466cbc5016aa8dff40e63a273a077f76c1cdcb/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=fa466cbc5016aa8dff40e63a273a077f76c1cdcb",
        "patch": "@@ -291,24 +291,48 @@ bitcoin.org (see below for bitcoin.org update instructions).\n   - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n     as update the OS download links. Ping @saivann/@harding (saivann/harding on Freenode) in case anything goes wrong\n \n-- Announce the release:\n-\n-  - bitcoin-dev and bitcoin-core-dev mailing list\n-\n-  - Bitcoin Core announcements list https://bitcoincore.org/en/list/announcements/join/\n+- Update other repositories and websites for new version\n \n   - bitcoincore.org blog post\n \n   - bitcoincore.org RPC documentation update\n \n-  - Update title of #bitcoin on Freenode IRC\n+  - Update packaging repo\n \n-  - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out itself\n+      - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n+\n+      - Create a new branch for the major release \"0.xx\" (used to build the snap package)\n+\n+      - Notify MarcoFalke so that he can start building the snap package\n+\n+        - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging (Click \"Import Now\" to fetch the branch)\n+        - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging/+ref/0.xx (Click \"Create snap package\")\n+        - Name it \"bitcoin-core-snap-0.xx\"\n+        - Leave owner and series as-is\n+        - Select architectures that are compiled via gitian\n+        - Leave \"automatically build when branch changes\" unticked\n+        - Tick \"automatically upload to store\"\n+        - Put \"bitcoin-core\" in the registered store package name field\n+        - Tick the \"edge\" box\n+        - Put \"0.xx\" in the track field\n+        - Click \"create snap package\"\n+        - Click \"Request builds\" for every new release on this branch (after updating the snapcraft.yml in the branch to reflect the latest gitian results)\n+        - Promote release on https://snapcraft.io/bitcoin-core/releases if it passes sanity checks\n \n-  - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n+  - This repo\n \n-  - Archive release notes for the new version to `doc/release-notes/` (branch `master` and branch of the release)\n+      - Archive release notes for the new version to `doc/release-notes/` (branch `master` and branch of the release)\n \n-  - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new) with a link to the archived release notes.\n+      - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new) with a link to the archived release notes.\n+\n+- Announce the release:\n+\n+  - bitcoin-dev and bitcoin-core-dev mailing list\n+\n+  - Bitcoin Core announcements list https://bitcoincore.org/en/list/announcements/join/\n+\n+  - Update title of #bitcoin on Freenode IRC\n+\n+  - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out itself\n \n   - Celebrate"
      }
    ]
  },
  {
    "sha": "6f43ed4c5a3a7dde59eb291e22a09903289401d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjQzZWQ0YzVhM2E3ZGRlNTllYjI5MWUyMmEwOTkwMzI4OTQwMWQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-27T10:28:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-27T11:00:19Z"
      },
      "message": "Merge #15462: gui: Fix async open wallet call order\n\na720a983015c9ef8cc814c16a5b9ef6379695817 gui: Fix async open wallet call order (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Fixes #15455. Must call `OpenWalletActivity::open` asynchronously only after all connections are made to the `OpenWalletActivity` instance, otherwise signals can be missed.\n\nTree-SHA512: 4e5fdbd09d2ca017ed07a1813c2707c09f96275f1498779804e322e0a4dbd7dcff0c2e9cd6ec18463cd427b88b192a8d02373de9edc2b03ba5e4b8484b264417",
      "tree": {
        "sha": "c99167de7ea2c57449fc75b1dca2585a6d14497c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c99167de7ea2c57449fc75b1dca2585a6d14497c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f43ed4c5a3a7dde59eb291e22a09903289401d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlx2bcMACgkQHkrtYphs\n0l0tTAf+Pwd9h/aBMEp3W31Sk5Y9z4MzcCkzy/enHXR4a1ANSsTaLLS17UHbZu0V\nSsY0q7Y1w09ZtdixL/Ko5gukdOsunsPhT5HPq9nLQTXFsvc+MQUHOqI6YKGTjbxT\nlAR2XRNzMPkF4Nf/wLkDOvfb1vW717baNN0gRyqmHYpe7KqYEx4hnbi+UnY1mEnD\nm7XRjPVRzt1yXE4gEM+jYY2bY2JUBwZTQmIz6VxCSo3KFNLl8S6jsmwrBBxyo1In\nHRgY3sm6pZckWYR80vNnO1+dSjjSJVPXkX94tK7dngVcrvnUC7mg0QTV0id9od1a\nH8tfwy8SZsGdl864KRopZAa/zBeonw==\n=8LX+\n-----END PGP SIGNATURE-----",
        "payload": "tree c99167de7ea2c57449fc75b1dca2585a6d14497c\nparent d88f7f8764b1f93e3992c714f62446b6ed5cfd1e\nparent a720a983015c9ef8cc814c16a5b9ef6379695817\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551263311 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551265219 +0100\n\nMerge #15462: gui: Fix async open wallet call order\n\na720a983015c9ef8cc814c16a5b9ef6379695817 gui: Fix async open wallet call order (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Fixes #15455. Must call `OpenWalletActivity::open` asynchronously only after all connections are made to the `OpenWalletActivity` instance, otherwise signals can be missed.\n\nTree-SHA512: 4e5fdbd09d2ca017ed07a1813c2707c09f96275f1498779804e322e0a4dbd7dcff0c2e9cd6ec18463cd427b88b192a8d02373de9edc2b03ba5e4b8484b264417\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f43ed4c5a3a7dde59eb291e22a09903289401d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f43ed4c5a3a7dde59eb291e22a09903289401d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f43ed4c5a3a7dde59eb291e22a09903289401d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e"
      },
      {
        "sha": "a720a983015c9ef8cc814c16a5b9ef6379695817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a720a983015c9ef8cc814c16a5b9ef6379695817",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a720a983015c9ef8cc814c16a5b9ef6379695817"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "abf9136eee55f77e7f372847e091635f715ee6db",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f43ed4c5a3a7dde59eb291e22a09903289401d3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f43ed4c5a3a7dde59eb291e22a09903289401d3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=6f43ed4c5a3a7dde59eb291e22a09903289401d3",
        "patch": "@@ -396,6 +396,8 @@ void BitcoinGUI::createActions()\n                     connect(activity, &OpenWalletActivity::opened, this, &BitcoinGUI::setCurrentWallet);\n                     connect(activity, &OpenWalletActivity::finished, activity, &QObject::deleteLater);\n                     connect(activity, &OpenWalletActivity::finished, dialog, &QObject::deleteLater);\n+                    bool invoked = QMetaObject::invokeMethod(activity, \"open\");\n+                    assert(invoked);\n                 });\n             }\n         });"
      },
      {
        "sha": "fab86a7912f5d9cf43a19ef49659b72dd65b7bc7",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f43ed4c5a3a7dde59eb291e22a09903289401d3/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f43ed4c5a3a7dde59eb291e22a09903289401d3/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=6f43ed4c5a3a7dde59eb291e22a09903289401d3",
        "patch": "@@ -59,7 +59,6 @@ OpenWalletActivity* WalletController::openWallet(const std::string& name, QWidge\n {\n     OpenWalletActivity* activity = new OpenWalletActivity(this, name);\n     activity->moveToThread(&m_activity_thread);\n-    QMetaObject::invokeMethod(activity, \"open\", Qt::QueuedConnection);\n     return activity;\n }\n "
      }
    ]
  },
  {
    "sha": "a4f9c024c6502c8f073ac59cba124b508daea3cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGY5YzAyNGM2NTAyYzhmMDczYWM1OWNiYTEyNGI1MDhkYWVhM2Nm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-27T11:04:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-27T11:05:58Z"
      },
      "message": "Merge #15468: wallet: Use fsbridge::ifstream to fix Windows path issue\n\n6ad79cbd562d04ebbcb61c774fb3389e70fedb7c wallet: Use fsbridge::ifstream to fix Windows path issue (Chun Kuan Lee)\n\nPull request description:\n\n  Fix #15460\n\nTree-SHA512: 1dab04184608543d49c86cbcfb679d63d35cb7bf3bde2e2d9ddf25ec8977de42b7131db5e81a305f3452858079dbcf68f6ad4624c89575d3d7e5b550687fc6ad",
      "tree": {
        "sha": "8aed00344be0d230f88c8494f542f03b5fd462ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8aed00344be0d230f88c8494f542f03b5fd462ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4f9c024c6502c8f073ac59cba124b508daea3cf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlx2bxYACgkQHkrtYphs\n0l3yJwgAzZybCNZUvEAuaPhT2YX2ivxW3NZtaXlZNiS6vZ3pfwvbrumDrk11YtRM\nZmk1AssxTTWwXUL+ugOPCwyvL+RCHOYvkv3Zx7xKc2gQwR+MDzgYP6wJ5W+Nd0Rd\n9GarcejyK658EDhx75jBDWX3cCuCuZ9SA6uBRS6iQMQgz8rvE0b0j0Y/SnXfp58V\nOLXJ35Adyt/TL3c5ZgB41aAwg03xnWSC5te8pTPNnGD/VMXtrpzvdOIGsDKz9NC7\nuPjbJdmEfSyEG05TehoSevIg7s2PSTVJjnW5cGi2HJp+8WQybcYxSYOfPhjPiFf0\nd9iVvQ81xN3uawYxvq/qUuN4RaFLXQ==\n=jfUb\n-----END PGP SIGNATURE-----",
        "payload": "tree 8aed00344be0d230f88c8494f542f03b5fd462ab\nparent 6f43ed4c5a3a7dde59eb291e22a09903289401d3\nparent 6ad79cbd562d04ebbcb61c774fb3389e70fedb7c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551265466 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551265558 +0100\n\nMerge #15468: wallet: Use fsbridge::ifstream to fix Windows path issue\n\n6ad79cbd562d04ebbcb61c774fb3389e70fedb7c wallet: Use fsbridge::ifstream to fix Windows path issue (Chun Kuan Lee)\n\nPull request description:\n\n  Fix #15460\n\nTree-SHA512: 1dab04184608543d49c86cbcfb679d63d35cb7bf3bde2e2d9ddf25ec8977de42b7131db5e81a305f3452858079dbcf68f6ad4624c89575d3d7e5b550687fc6ad\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f9c024c6502c8f073ac59cba124b508daea3cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f9c024c6502c8f073ac59cba124b508daea3cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f9c024c6502c8f073ac59cba124b508daea3cf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f43ed4c5a3a7dde59eb291e22a09903289401d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f43ed4c5a3a7dde59eb291e22a09903289401d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f43ed4c5a3a7dde59eb291e22a09903289401d3"
      },
      {
        "sha": "6ad79cbd562d04ebbcb61c774fb3389e70fedb7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad79cbd562d04ebbcb61c774fb3389e70fedb7c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f937f64e04dbe7ffa51e4713a1154a26e86fbd60",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4f9c024c6502c8f073ac59cba124b508daea3cf/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4f9c024c6502c8f073ac59cba124b508daea3cf/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=a4f9c024c6502c8f073ac59cba124b508daea3cf",
        "patch": "@@ -160,6 +160,7 @@ static std::string openmodeToStr(std::ios_base::openmode mode)\n void ifstream::open(const fs::path& p, std::ios_base::openmode mode)\n {\n     close();\n+    mode |= std::ios_base::in;\n     m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n     if (m_file == nullptr) {\n         return;\n@@ -183,6 +184,7 @@ void ifstream::close()\n void ofstream::open(const fs::path& p, std::ios_base::openmode mode)\n {\n     close();\n+    mode |= std::ios_base::out;\n     m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n     if (m_file == nullptr) {\n         return;"
      },
      {
        "sha": "d779251d566a71c0b4e9ea22b002e53d03d34eb5",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4f9c024c6502c8f073ac59cba124b508daea3cf/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4f9c024c6502c8f073ac59cba124b508daea3cf/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=a4f9c024c6502c8f073ac59cba124b508daea3cf",
        "patch": "@@ -35,7 +35,7 @@ static bool IsBerkeleyBtree(const fs::path& path)\n     boost::system::error_code ec;\n     if (fs::file_size(path, ec) < 4096) return false;\n \n-    fs::ifstream file(path.string(), std::ios::binary);\n+    fsbridge::ifstream file(path, std::ios::binary);\n     if (!file.is_open()) return false;\n \n     file.seekg(12, std::ios::beg); // Magic bytes start at offset 12"
      }
    ]
  },
  {
    "sha": "a0d4e79b4dbbfda027054c991705313fcf04135c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGQ0ZTc5YjRkYmJmZGEwMjcwNTRjOTkxNzA1MzEzZmNmMDQxMzVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-27T11:21:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-27T11:25:37Z"
      },
      "message": "Merge #15477: doc: Remove misleading hint in getrawtransaction\n\n9999879f56c88ca2837f5d18e6688917ba96e9e2 refactor: Use RPCHelpMan::IsValidNumArgs in getrawtransaction (MarcoFalke)\nfa9ff8fe212ae40a1ef4980455bf916bc044fee2 doc: Remove misleading hint in getrawtransaction (MarcoFalke)\n\nPull request description:\n\n  For 0.18.0\n\n  I asked this line to be added in #15159, which was wrong because getmempoolentry does not return the raw transaction hex.\n\nTree-SHA512: 7ac85500c8192314347b7283cd369196bb959c124863642b6c1ce73d5662b1cbe4f42ded9c374dac6657458ab70b01810caf1235dd1d2b404bf376ebf09efa69",
      "tree": {
        "sha": "54a257b712b6dac0c6803bd72d8416f3782f92ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54a257b712b6dac0c6803bd72d8416f3782f92ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0d4e79b4dbbfda027054c991705313fcf04135c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlx2c7EACgkQHkrtYphs\n0l3WzAf+PjTuWLS03TGMxPUr81myvYorzUrdZE54WUsmk2lBXlNyQMkplGgQ6rVc\nNYqKkXHWTb5UNZ8SjatX6NXUZKoMBo+g73LS9crJ4mD45fFATTGQiiU6352/FFCS\n60B2kGgwz1vhcrjhQ+r9YXrc2jeVxvQMc0r6Hmwj1XcjOQXqPQE7nS58msBxnYoe\nyz6ksomnT71LfnQsSIY8XIpeeC+HBD+s3kZd1cu8WKtl8N/ONrDMMio8op/4dCei\nsVRFz9qklHEuUiSYuQ5piqnSaJOdTIeKWxy5B0efyCPUbPHtWZc6xUtiAfaxaVBG\nyo/8bXEFJlYGn51DpRs+J79ZvbVvaA==\n=ooYC\n-----END PGP SIGNATURE-----",
        "payload": "tree 54a257b712b6dac0c6803bd72d8416f3782f92ed\nparent a4f9c024c6502c8f073ac59cba124b508daea3cf\nparent 9999879f56c88ca2837f5d18e6688917ba96e9e2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551266478 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551266737 +0100\n\nMerge #15477: doc: Remove misleading hint in getrawtransaction\n\n9999879f56c88ca2837f5d18e6688917ba96e9e2 refactor: Use RPCHelpMan::IsValidNumArgs in getrawtransaction (MarcoFalke)\nfa9ff8fe212ae40a1ef4980455bf916bc044fee2 doc: Remove misleading hint in getrawtransaction (MarcoFalke)\n\nPull request description:\n\n  For 0.18.0\n\n  I asked this line to be added in #15159, which was wrong because getmempoolentry does not return the raw transaction hex.\n\nTree-SHA512: 7ac85500c8192314347b7283cd369196bb959c124863642b6c1ce73d5662b1cbe4f42ded9c374dac6657458ab70b01810caf1235dd1d2b404bf376ebf09efa69\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d4e79b4dbbfda027054c991705313fcf04135c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0d4e79b4dbbfda027054c991705313fcf04135c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d4e79b4dbbfda027054c991705313fcf04135c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4f9c024c6502c8f073ac59cba124b508daea3cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f9c024c6502c8f073ac59cba124b508daea3cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f9c024c6502c8f073ac59cba124b508daea3cf"
      },
      {
        "sha": "9999879f56c88ca2837f5d18e6688917ba96e9e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9999879f56c88ca2837f5d18e6688917ba96e9e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9999879f56c88ca2837f5d18e6688917ba96e9e2"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d19afaa8a1dd8a58c53c672c8db67145ba4a922d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d4e79b4dbbfda027054c991705313fcf04135c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d4e79b4dbbfda027054c991705313fcf04135c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a0d4e79b4dbbfda027054c991705313fcf04135c",
        "patch": "@@ -6,8 +6,8 @@\n #include <chain.h>\n #include <coins.h>\n #include <compat/byteswap.h>\n-#include <consensus/validation.h>\n #include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n #include <core_io.h>\n #include <index/txindex.h>\n #include <init.h>\n@@ -67,9 +67,7 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n \n static UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            RPCHelpMan{\n+    const RPCHelpMan help{\n                 \"getrawtransaction\",\n                 \"\\nReturn the raw transaction data.\\n\"\n \n@@ -79,8 +77,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                 \"will return the transaction if it is in the mempool, or if -txindex is enabled and the transaction\\n\"\n                 \"is in a block in the blockchain.\\n\"\n \n-                \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\"\n-                \"Or use gettransaction for wallet transactions.\\n\"\n+                \"\\nHint: Use gettransaction for wallet transactions.\\n\"\n \n                 \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n                 \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\",\n@@ -148,7 +145,11 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n                 },\n-            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");"
      }
    ]
  },
  {
    "sha": "8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmIzZTRjNDg3NTAwYTU4MGUzZTE4NzkxYjFmNGU3ZGNkZDM1NDQy",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-27T09:32:12Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-27T16:41:01Z"
      },
      "message": "[rpc] remove deprecated generate method",
      "tree": {
        "sha": "efd7cdad481f0a988c7f4570b07325c377b35947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efd7cdad481f0a988c7f4570b07325c377b35947"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlx2vZ4ACgkQV/+b28ww\nEAkmOw//Um+nR5ZeqyJrP5I+mr0kiZZAb8InfMAQLTSc1vhj0bn8EoS2JM+zQdmP\nfl9RaXaJ5iGWOgKfxV2SRU57p4Mbm04pDPErrhr6iFd+PvhgfqQN2FoIF3qgO6pa\nRo+oQNBUURNJ4EpeylDs6jH8RI2CpzJtWIAiipSzluQIJ/AgqFbu0ZgFSQakFmJ3\nJ3vcRk0v2ZVCFcpke+FinsiPcm52hM+BR+Xu4jZely8Pdjc7ZILi84ZJqXpySU4T\ncKLz54+4oOIYPrSdrY/29+oZNzarW7VLgmyB5IFz8Wf0jeqb0SrZMSp2sajedqez\n2PAq7lyo+Xow3sKLFZjk0hN2p3MGIdIN8A8haFSHWRzDMbiXDJfWc+f93HKgqW4E\nqZVwoZd1cA9hc2GFG6/zYg3zeNCDxvsHfiaiwLsAXDvHl0RL+Rg3/04WMRwlg0UP\nWO6t5O/XudCg5UM+EVqNl7uExl/00wbGSwGuNLQWzs5E8Axd0F4Zy+MJ0W62UpRE\nOH5uCprtsAinx2tKcFw1GTGGRVnoPCbTYFrhveKPgvC+3FoGkIUHcguJtqEB8nyF\nsYHeoLW+5UYqLkmrY2jnB8SdxQ/n0fA1GccF/SOLhMR2YHoSRvupAmMKuNyAnXUY\n6nElg5ydMrc4G3DTr+0hlLxyV3cdHdjeTl6Ugvvzyaem3K799PQ=\n=rtm0\n-----END PGP SIGNATURE-----",
        "payload": "tree efd7cdad481f0a988c7f4570b07325c377b35947\nparent d88f7f8764b1f93e3992c714f62446b6ed5cfd1e\nauthor Sjors Provoost <sjors@sprovoost.nl> 1551259932 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1551285661 +0100\n\n[rpc] remove deprecated generate method\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bb3e4c487500a580e3e18791b1f4e7dcdd35442/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d88f7f8764b1f93e3992c714f62446b6ed5cfd1e"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 21,
      "deletions": 73
    },
    "files": [
      {
        "sha": "1149eb0dbcc76c11f2aa0da1a7c9a3365fcfb5a3",
        "filename": "doc/release-notes-15492.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bb3e4c487500a580e3e18791b1f4e7dcdd35442/doc/release-notes-15492.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bb3e4c487500a580e3e18791b1f4e7dcdd35442/doc/release-notes-15492.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15492.md?ref=8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
        "patch": "@@ -0,0 +1,11 @@\n+Deprecated or removed RPCs\n+--------------------------\n+- The wallet's `generate` RPC method was deprecated in v0.18 and has now\n+  been fully removed.  This RPC is only used for\n+  testing, but its implementation reached across multiple subsystems\n+  (wallet and mining), so it has been removed to simplify the\n+  wallet-node interface.  Projects that are using `generate` for testing\n+  purposes should transition to using the `generatetoaddress` RPC, which\n+  does not require or use the wallet component. Calling\n+  `generatetoaddress` with an address returned by the `getnewaddress`\n+  RPC gives the same functionality as the old `generate` RPC."
      },
      {
        "sha": "55f4229624c2825b5c1b7dd05a6e46defbd70f14",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bb3e4c487500a580e3e18791b1f4e7dcdd35442/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bb3e4c487500a580e3e18791b1f4e7dcdd35442/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
        "patch": "@@ -28,8 +28,6 @@ class CRPCConvertParam\n static const CRPCConvertParam vRPCConvertParams[] =\n {\n     { \"setmocktime\", 0, \"timestamp\" },\n-    { \"generate\", 0, \"nblocks\" },\n-    { \"generate\", 1, \"maxtries\" },\n     { \"generatetoaddress\", 0, \"nblocks\" },\n     { \"generatetoaddress\", 2, \"maxtries\" },\n     { \"getnetworkhashps\", 0, \"nblocks\" },"
      },
      {
        "sha": "47790fbf923d3cce7eafa9822eb64b6f2d396322",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 58,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bb3e4c487500a580e3e18791b1f4e7dcdd35442/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bb3e4c487500a580e3e18791b1f4e7dcdd35442/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
        "patch": "@@ -19,7 +19,6 @@\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n-#include <rpc/mining.h>\n #include <rpc/rawtransaction.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -3358,62 +3357,6 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue generate(const JSONRPCRequest& request)\n-{\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n-            RPCHelpMan{\"generate\",\n-                \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\",\n-                {\n-                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n-                },\n-                RPCResult{\n-            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n-                },\n-                RPCExamples{\n-            \"\\nGenerate 11 blocks\\n\"\n-            + HelpExampleCli(\"generate\", \"11\")\n-                },\n-            }.ToString());\n-    }\n-\n-    if (!IsDeprecatedRPCEnabled(\"generate\")) {\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"The wallet generate rpc method is deprecated and will be fully removed in v0.19. \"\n-            \"To use generate in v0.18, restart bitcoind with -deprecatedrpc=generate.\\n\"\n-            \"Clients should transition to using the node rpc method generatetoaddress\\n\");\n-    }\n-\n-    int num_generate = request.params[0].get_int();\n-    uint64_t max_tries = 1000000;\n-    if (!request.params[1].isNull()) {\n-        max_tries = request.params[1].get_int();\n-    }\n-\n-    std::shared_ptr<CReserveScript> coinbase_script;\n-    pwallet->GetScriptForMining(coinbase_script);\n-\n-    // If the keypool is exhausted, no script is returned at all.  Catch this.\n-    if (!coinbase_script) {\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n-    }\n-\n-    //throw an error if no script was provided\n-    if (coinbase_script->reserveScript.empty()) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available\");\n-    }\n-\n-    return generateBlocks(coinbase_script, num_generate, max_tries, true);\n-}\n-\n UniValue rescanblockchain(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -4156,7 +4099,6 @@ UniValue importmulti(const JSONRPCRequest& request);\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n-    { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n     { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n     { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n     { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },"
      },
      {
        "sha": "530f457ae7b3f9a0bd9ca57be84c491c792ed2ee",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bb3e4c487500a580e3e18791b1f4e7dcdd35442/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bb3e4c487500a580e3e18791b1f4e7dcdd35442/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
        "patch": "@@ -4,29 +4,26 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_rpc_error\n+# from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=generate\"]]\n-\n-    def skip_test_if_missing_module(self):\n-        # The generate RPC method requires the wallet to be compiled\n-        self.skip_if_no_wallet()\n+        self.extra_args = [[], []]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n         # RPC methods with and without the -deprecatedrpc flags. For example:\n         #\n-        # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n-        # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n-        # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n-\n-        self.log.info(\"Test generate RPC\")\n-        assert_raises_rpc_error(-32, 'The wallet generate rpc method is deprecated', self.nodes[0].rpc.generate, 1)\n-        self.nodes[1].generate(1)\n+        # In set_test_params:\n+        # self.extra_args = [[], [\"-deprecatedrpc=generate\"]]\n+        #\n+        # In run_test:\n+        # self.log.info(\"Test generate RPC\")\n+        # assert_raises_rpc_error(-32, 'The wallet generate rpc method is deprecated', self.nodes[0].rpc.generate, 1)\n+        # self.nodes[1].generate(1)\n+        self.log.info(\"No tested deprecated RPC methods\")\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "20268c6d767b4c212504aeb3f55ecf31789ec12e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDI2OGM2ZDc2N2I0YzIxMjUwNGFlYjNmNTVlY2YzMTc4OWVjMTJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-28T14:38:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-02-28T14:39:01Z"
      },
      "message": "Merge #15489: doc: Update release process for snap package\n\nfa466cbc5016aa8dff40e63a273a077f76c1cdcb doc: Update release process for snap package (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 44c083a9de96b8f128e32597071c5101b1f90a0396170955f4d8b21e46ad7bfad1e0e43a955ae1dd2968aa266ff6b5d4c80115a4a1e13a4073549d48278c4c90",
      "tree": {
        "sha": "6da9e4311f1def6305e62b269bce8c9f3bf4fc53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6da9e4311f1def6305e62b269bce8c9f3bf4fc53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20268c6d767b4c212504aeb3f55ecf31789ec12e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlx38oUACgkQHkrtYphs\n0l34Dwf+LrKZXsDridET4V+5LouK1WF1NELw48D993Nh1482SDpD6ciNx82sWh5P\ndoiY0d5fZJdnh/jfTSIewhsq2uDEzsopZWYDrMM2rHJ9ClbGnqCpwyaAd0IBlZZc\nQIe/Cwd5dwUy/Q6U+qwUGvk6eT9kSztKbXufgPFRYAKIUHIU+GbUS5poeclOhg/8\nhkJ5inGh0gEWWUZK4x93AZzeCyfFMHPxQ90ACpj3fPbCtJujvjV4QX5oIDhniNCi\nnz5kVU+j69Di8z8RQopoXI2hw7AXU693/E4cHS3tdoYwRKiYIvNlmwqNa6cY2/pS\nHzMlihc0VGiNQv5lx1qSqpqPfaoT6Q==\n=M8iK\n-----END PGP SIGNATURE-----",
        "payload": "tree 6da9e4311f1def6305e62b269bce8c9f3bf4fc53\nparent a0d4e79b4dbbfda027054c991705313fcf04135c\nparent fa466cbc5016aa8dff40e63a273a077f76c1cdcb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551364687 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551364741 +0100\n\nMerge #15489: doc: Update release process for snap package\n\nfa466cbc5016aa8dff40e63a273a077f76c1cdcb doc: Update release process for snap package (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 44c083a9de96b8f128e32597071c5101b1f90a0396170955f4d8b21e46ad7bfad1e0e43a955ae1dd2968aa266ff6b5d4c80115a4a1e13a4073549d48278c4c90\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20268c6d767b4c212504aeb3f55ecf31789ec12e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20268c6d767b4c212504aeb3f55ecf31789ec12e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20268c6d767b4c212504aeb3f55ecf31789ec12e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0d4e79b4dbbfda027054c991705313fcf04135c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d4e79b4dbbfda027054c991705313fcf04135c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0d4e79b4dbbfda027054c991705313fcf04135c"
      },
      {
        "sha": "fa466cbc5016aa8dff40e63a273a077f76c1cdcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa466cbc5016aa8dff40e63a273a077f76c1cdcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa466cbc5016aa8dff40e63a273a077f76c1cdcb"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 34,
      "deletions": 10
    },
    "files": [
      {
        "sha": "eb1f5ad222fca0857eb16be127b4adb5bb78bae5",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20268c6d767b4c212504aeb3f55ecf31789ec12e/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20268c6d767b4c212504aeb3f55ecf31789ec12e/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=20268c6d767b4c212504aeb3f55ecf31789ec12e",
        "patch": "@@ -291,24 +291,48 @@ bitcoin.org (see below for bitcoin.org update instructions).\n   - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n     as update the OS download links. Ping @saivann/@harding (saivann/harding on Freenode) in case anything goes wrong\n \n-- Announce the release:\n-\n-  - bitcoin-dev and bitcoin-core-dev mailing list\n-\n-  - Bitcoin Core announcements list https://bitcoincore.org/en/list/announcements/join/\n+- Update other repositories and websites for new version\n \n   - bitcoincore.org blog post\n \n   - bitcoincore.org RPC documentation update\n \n-  - Update title of #bitcoin on Freenode IRC\n+  - Update packaging repo\n \n-  - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out itself\n+      - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n+\n+      - Create a new branch for the major release \"0.xx\" (used to build the snap package)\n+\n+      - Notify MarcoFalke so that he can start building the snap package\n+\n+        - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging (Click \"Import Now\" to fetch the branch)\n+        - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging/+ref/0.xx (Click \"Create snap package\")\n+        - Name it \"bitcoin-core-snap-0.xx\"\n+        - Leave owner and series as-is\n+        - Select architectures that are compiled via gitian\n+        - Leave \"automatically build when branch changes\" unticked\n+        - Tick \"automatically upload to store\"\n+        - Put \"bitcoin-core\" in the registered store package name field\n+        - Tick the \"edge\" box\n+        - Put \"0.xx\" in the track field\n+        - Click \"create snap package\"\n+        - Click \"Request builds\" for every new release on this branch (after updating the snapcraft.yml in the branch to reflect the latest gitian results)\n+        - Promote release on https://snapcraft.io/bitcoin-core/releases if it passes sanity checks\n \n-  - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n+  - This repo\n \n-  - Archive release notes for the new version to `doc/release-notes/` (branch `master` and branch of the release)\n+      - Archive release notes for the new version to `doc/release-notes/` (branch `master` and branch of the release)\n \n-  - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new) with a link to the archived release notes.\n+      - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new) with a link to the archived release notes.\n+\n+- Announce the release:\n+\n+  - bitcoin-dev and bitcoin-core-dev mailing list\n+\n+  - Bitcoin Core announcements list https://bitcoincore.org/en/list/announcements/join/\n+\n+  - Update title of #bitcoin on Freenode IRC\n+\n+  - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out itself\n \n   - Celebrate"
      }
    ]
  },
  {
    "sha": "4a5e52cb51c2981914edb9e048e2c25461cf68df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTVlNTJjYjUxYzI5ODE5MTRlZGI5ZTA0OGUyYzI1NDYxY2Y2OGRm",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-28T18:30:07Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-28T18:30:07Z"
      },
      "message": "msvc: Use a single file to specify the include path",
      "tree": {
        "sha": "36a86d1432bac144c98818d97445307dd648bab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36a86d1432bac144c98818d97445307dd648bab9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a5e52cb51c2981914edb9e048e2c25461cf68df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a5e52cb51c2981914edb9e048e2c25461cf68df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a5e52cb51c2981914edb9e048e2c25461cf68df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a5e52cb51c2981914edb9e048e2c25461cf68df/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20268c6d767b4c212504aeb3f55ecf31789ec12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20268c6d767b4c212504aeb3f55ecf31789ec12e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20268c6d767b4c212504aeb3f55ecf31789ec12e"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 1,
      "deletions": 64
    },
    "files": [
      {
        "sha": "368fe7ead5f2a3b4594b98df04f094e3eac5469e",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -146,7 +146,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -164,7 +163,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -180,7 +178,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -198,7 +195,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "6b668054a398d5152d8e9f011b7339d01947c158",
        "filename": "build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -113,7 +113,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -131,7 +130,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -147,7 +145,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -165,7 +162,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "1d0174e31948a753a34cc3d706e38d4d570c5c64",
        "filename": "build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -116,7 +116,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -134,7 +133,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -150,7 +148,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -168,7 +165,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "fa86da7bae7b8ed4f2e62b5f0da796704647b884",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -134,7 +134,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -152,7 +151,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -168,7 +166,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -186,7 +183,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "bb212af52e5c55734056c9b7254be358cb409fec",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -79,7 +79,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -96,7 +95,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -115,7 +113,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -138,7 +135,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "889dc6c2ade3e3f4ef575d9f60ec58efa0dc3c20",
        "filename": "build_msvc/common.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/common.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/common.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.vcxproj?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -24,6 +24,7 @@\n       <DisableSpecificWarnings>4018;4244;4267;4715;4805;</DisableSpecificWarnings>\n       <TreatWarningAsError>true</TreatWarningAsError>\n       <PreprocessorDefinitions>_WIN32_WINNT=0x0601;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n   </ItemDefinitionGroup>\n </Project>"
      },
      {
        "sha": "5849e463a631ec965ecc5492e5e93f61b73f7c92",
        "filename": "build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -99,7 +99,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -116,7 +115,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -131,7 +129,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -148,7 +145,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "292e193f5de02236ff09a3e55debfef6d1fed080",
        "filename": "build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -91,7 +91,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n@@ -109,7 +108,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n@@ -129,7 +127,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n@@ -151,7 +148,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>"
      },
      {
        "sha": "e7002036adfe597b46f7a2f88b076889c5ffd332",
        "filename": "build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -89,7 +89,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -104,7 +103,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -121,7 +119,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -140,7 +137,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "48a117bcfe24f033347c77ba164bd5c429002d77",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -91,7 +91,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -106,7 +105,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -124,7 +122,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -143,7 +140,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "dbd91cf4db23d22a8be996b620e11f67a42316b5",
        "filename": "build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -92,7 +92,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -112,7 +111,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -134,7 +132,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -158,7 +155,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "33f4054546b7cfbeef05483db011fef2d48d14f1",
        "filename": "build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -97,7 +97,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n@@ -113,7 +112,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n@@ -131,7 +129,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n@@ -151,7 +148,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>"
      },
      {
        "sha": "187d95568798f71dd471cdd19f4f2ef32f4dc2b4",
        "filename": "build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -97,7 +97,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -113,7 +112,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -131,7 +129,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -151,7 +148,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>"
      },
      {
        "sha": "c877a280c094dbe678b9d011204c4b33671dbc7c",
        "filename": "build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -97,7 +97,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -113,7 +112,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -131,7 +129,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -151,7 +148,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>"
      },
      {
        "sha": "a32aafbd74514c6ca25f42479614d22690528e22",
        "filename": "build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -126,7 +126,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -143,7 +142,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -162,7 +160,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -183,7 +180,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "d05a03699ff0a5848fb14e4d95c6b7144fa28aa3",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -135,7 +135,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -152,7 +151,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -170,7 +168,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -190,7 +187,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "a2f565904989de9d569af30b61f379d2e660b4b5",
        "filename": "build_msvc/testconsensus/testconsensus.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/testconsensus/testconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a5e52cb51c2981914edb9e048e2c25461cf68df/build_msvc/testconsensus/testconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.vcxproj?ref=4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "patch": "@@ -95,7 +95,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -110,7 +109,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -129,7 +127,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -148,7 +145,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      }
    ]
  },
  {
    "sha": "29c24b05fb71a5577af9f58298493c1f2d489069",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWMyNGIwNWZiNzFhNTU3N2FmOWY1ODI5ODQ5M2MxZjJkNDg5MDY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-28T20:13:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-28T20:13:43Z"
      },
      "message": "Merge #15503: msvc: Use a single file to specify the include path\n\n4a5e52cb51 msvc: Use a single file to specify the include path (Chun Kuan Lee)\n\nPull request description:\n\n  Specify the include files in 1 line and 1 file instead of 64 lines and 16 files.\n\n  Also, this could avoid MSVC and autoconf include path inconsistency.\n\nTree-SHA512: e2e283913d8118d70fd94b0fb42c3b629b0d9d94aa08a4f625945992fda830c94ecdde8dc7647e28c4f35f8466de3b38cfd7ed7ca78d611612b3b49784fa3745",
      "tree": {
        "sha": "36a86d1432bac144c98818d97445307dd648bab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36a86d1432bac144c98818d97445307dd648bab9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29c24b05fb71a5577af9f58298493c1f2d489069",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJceED4AAoJENLqSFDnUoslh54P+wYiu14FyA0v8DfxmFw8IvP+\nEpfEWl1c+v/FPx4QTx8ZdyKH1eWoWdXQxL0F+BGBv7twvJ4Oa94Jk4RSwxt7ln7R\nuCcqRDGfYRHGj6uurizg33c8QE3QMqVKJaI8Io43J5jfA4pl4jTcwARdBsCfT3zl\n2otyRsyfYmlEUpiXvxnmoezumAdhCf1uHMRbMCChFl1Ig0pT07x/TVO6zAWOWTbm\n2wkI7NpbOV/2oeFk14wJwgKZovnvWkFZFr8x5bF0gEUWOtS/YH2FbgUdeqYwdS1s\nK1CmES7nD+Kame5FiffQmiSP/Z2fwjPGY3VU84d+06ghQNezt5Ls8BNyBreLqc0K\n+n2yCrtZrj2bKnaiizRGRYutYzUa3E11vlPaLyX+mbNt1ZzUlH63iHmLaD7ZMiaP\nvWyKY9iaGam+u7USL/kZJy1q7Wm6XRqN9Gvfw819rg2+CNLS09V0/edbjTDjblGb\n1yEF6GirvqyO/Z+XhWYfJPXvhgXxTfPnjnNQpZ6RUnlcY2VsCCfUyxYPefXjDRli\nqB31oKUhyN9eCaItN+PCLVV2cuXTaYwVAjZRZgEdsgFKgys8HNrnQYbrh9XGo1EK\nlSX53uBgAYyQULEQhjl1yjElG9EWXJb3XcR9YpJKk0flebONggR6Qdx34NLUjOWB\nOVB0JfdxaBwK7IPsYL53\n=aK2T\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPgahZLPOk5TYNHScBRzxMAHuYYAay88v+9zQc9CFOdsCP/wEA3ZHo5BI/A5\nxaf2443ecXwI8BCO1g5jmWDtDXQA5gw1/BOTCPEEXHhA+vAI97P7M5/kGO4Ag9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BAOpJ05lfhEwBU8cyw6wNulCPEEXHhA+fAIbcGnA/WDEugAg9/jDS75DI4jImh0\ndHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23/8BARIqK71ajDoK02pd8O\nAgnYCPEEXHhA+fAIBo4w3/mCIPMAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRj\nLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQuKXQzOlc+kromgpJIMxp/wjx\nBFx4QPnwCJEpm4po5jFsAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 36a86d1432bac144c98818d97445307dd648bab9\nparent 20268c6d767b4c212504aeb3f55ecf31789ec12e\nparent 4a5e52cb51c2981914edb9e048e2c25461cf68df\nauthor MarcoFalke <falke.marco@gmail.com> 1551384818 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551384823 -0500\n\nMerge #15503: msvc: Use a single file to specify the include path\n\n4a5e52cb51 msvc: Use a single file to specify the include path (Chun Kuan Lee)\n\nPull request description:\n\n  Specify the include files in 1 line and 1 file instead of 64 lines and 16 files.\n\n  Also, this could avoid MSVC and autoconf include path inconsistency.\n\nTree-SHA512: e2e283913d8118d70fd94b0fb42c3b629b0d9d94aa08a4f625945992fda830c94ecdde8dc7647e28c4f35f8466de3b38cfd7ed7ca78d611612b3b49784fa3745\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c24b05fb71a5577af9f58298493c1f2d489069",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29c24b05fb71a5577af9f58298493c1f2d489069",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c24b05fb71a5577af9f58298493c1f2d489069/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20268c6d767b4c212504aeb3f55ecf31789ec12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20268c6d767b4c212504aeb3f55ecf31789ec12e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20268c6d767b4c212504aeb3f55ecf31789ec12e"
      },
      {
        "sha": "4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a5e52cb51c2981914edb9e048e2c25461cf68df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a5e52cb51c2981914edb9e048e2c25461cf68df"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 1,
      "deletions": 64
    },
    "files": [
      {
        "sha": "368fe7ead5f2a3b4594b98df04f094e3eac5469e",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -146,7 +146,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -164,7 +163,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -180,7 +178,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -198,7 +195,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "6b668054a398d5152d8e9f011b7339d01947c158",
        "filename": "build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -113,7 +113,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -131,7 +130,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -147,7 +145,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -165,7 +162,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "1d0174e31948a753a34cc3d706e38d4d570c5c64",
        "filename": "build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -116,7 +116,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -134,7 +133,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -150,7 +148,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -168,7 +165,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "fa86da7bae7b8ed4f2e62b5f0da796704647b884",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -134,7 +134,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -152,7 +151,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -168,7 +166,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -186,7 +183,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "bb212af52e5c55734056c9b7254be358cb409fec",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -79,7 +79,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -96,7 +95,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -115,7 +113,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -138,7 +135,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "889dc6c2ade3e3f4ef575d9f60ec58efa0dc3c20",
        "filename": "build_msvc/common.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/common.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/common.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.vcxproj?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -24,6 +24,7 @@\n       <DisableSpecificWarnings>4018;4244;4267;4715;4805;</DisableSpecificWarnings>\n       <TreatWarningAsError>true</TreatWarningAsError>\n       <PreprocessorDefinitions>_WIN32_WINNT=0x0601;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n   </ItemDefinitionGroup>\n </Project>"
      },
      {
        "sha": "5849e463a631ec965ecc5492e5e93f61b73f7c92",
        "filename": "build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -99,7 +99,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -116,7 +115,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -131,7 +129,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -148,7 +145,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "292e193f5de02236ff09a3e55debfef6d1fed080",
        "filename": "build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -91,7 +91,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n@@ -109,7 +108,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n@@ -129,7 +127,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n@@ -151,7 +148,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>"
      },
      {
        "sha": "e7002036adfe597b46f7a2f88b076889c5ffd332",
        "filename": "build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -89,7 +89,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -104,7 +103,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -121,7 +119,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -140,7 +137,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "48a117bcfe24f033347c77ba164bd5c429002d77",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -91,7 +91,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -106,7 +105,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -124,7 +122,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -143,7 +140,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "dbd91cf4db23d22a8be996b620e11f67a42316b5",
        "filename": "build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -92,7 +92,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -112,7 +111,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -134,7 +132,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -158,7 +155,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "33f4054546b7cfbeef05483db011fef2d48d14f1",
        "filename": "build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -97,7 +97,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n@@ -113,7 +112,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n@@ -131,7 +129,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>\n@@ -151,7 +148,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n     </ClCompile>"
      },
      {
        "sha": "187d95568798f71dd471cdd19f4f2ef32f4dc2b4",
        "filename": "build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet_tool/libbitcoin_wallet_tool.vcxproj.in?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -97,7 +97,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -113,7 +112,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -131,7 +129,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -151,7 +148,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>"
      },
      {
        "sha": "c877a280c094dbe678b9d011204c4b33671dbc7c",
        "filename": "build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -97,7 +97,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -113,7 +112,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -131,7 +129,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>\n@@ -151,7 +148,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n     </ClCompile>"
      },
      {
        "sha": "a32aafbd74514c6ca25f42479614d22690528e22",
        "filename": "build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -126,7 +126,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -143,7 +142,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -162,7 +160,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n@@ -183,7 +180,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\secp256k1\\include;</AdditionalIncludeDirectories>\n       <ExceptionHandling>Sync</ExceptionHandling>\n       <SuppressStartupBanner>false</SuppressStartupBanner>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>"
      },
      {
        "sha": "d05a03699ff0a5848fb14e4d95c6b7144fa28aa3",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -135,7 +135,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -152,7 +151,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -170,7 +168,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -190,7 +187,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      },
      {
        "sha": "a2f565904989de9d569af30b61f379d2e660b4b5",
        "filename": "build_msvc/testconsensus/testconsensus.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/testconsensus/testconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c24b05fb71a5577af9f58298493c1f2d489069/build_msvc/testconsensus/testconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.vcxproj?ref=29c24b05fb71a5577af9f58298493c1f2d489069",
        "patch": "@@ -95,7 +95,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -110,7 +109,6 @@\n       <Optimization>Disabled</Optimization>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -129,7 +127,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>\n@@ -148,7 +145,6 @@\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n     </ClCompile>\n     <Link>"
      }
    ]
  },
  {
    "sha": "7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWE2YThhZWZiYjIwMTNlZjNkYzg3ZWNiZGY1ZDk0N2Q0YjQxM2Fm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T21:41:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T21:00:09Z"
      },
      "message": "Add ParseRange function to parse args of the form int/[int,int]",
      "tree": {
        "sha": "f0eec090a9f4d18a90e5508a24e1df53bca3e1de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0eec090a9f4d18a90e5508a24e1df53bca3e1de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29c24b05fb71a5577af9f58298493c1f2d489069",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c24b05fb71a5577af9f58298493c1f2d489069",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29c24b05fb71a5577af9f58298493c1f2d489069"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7fb139f93c05fc5176a034954ad165508d51a8ec",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
        "patch": "@@ -523,3 +523,17 @@ std::string RPCArg::ToString(const bool oneline) const\n     }\n     assert(false);\n }\n+\n+std::pair<int64_t, int64_t> ParseRange(const UniValue& value)\n+{\n+    if (value.isNum()) {\n+        return {0, value.get_int64()};\n+    }\n+    if (value.isArray() && value.size() == 2 && value[0].isNum() && value[1].isNum()) {\n+        int64_t low = value[0].get_int64();\n+        int64_t high = value[1].get_int64();\n+        if (low > high) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range specified as [begin,end] must not have begin after end\");\n+        return {low, high};\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified as end or as [begin,end]\");\n+}"
      },
      {
        "sha": "f11998bafaa3b4c6166d2bcebf8bc1e1ecb29d72",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
        "patch": "@@ -38,6 +38,9 @@ unsigned int ParseConfirmTarget(const UniValue& value);\n RPCErrorCode RPCErrorFromTransactionError(TransactionError terr);\n UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string = \"\");\n \n+//! Parse a JSON range specified as int64, or [int64, int64]\n+std::pair<int64_t, int64_t> ParseRange(const UniValue& value);\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,"
      }
    ]
  },
  {
    "sha": "6b9f45e81bfe7472493b6df66133c929780ef2fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjlmNDVlODFiZmU3NDcyNDkzYjZkZjY2MTMzYzkyOTc4MGVmMmZi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T21:45:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T21:00:13Z"
      },
      "message": "Support ranges arguments in RPC help",
      "tree": {
        "sha": "65fbf15c855f34860d2f7e653210b0a0da4c4074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65fbf15c855f34860d2f7e653210b0a0da4c4074"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b9f45e81bfe7472493b6df66133c929780ef2fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9f45e81bfe7472493b6df66133c929780ef2fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b9f45e81bfe7472493b6df66133c929780ef2fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9f45e81bfe7472493b6df66133c929780ef2fb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7aa6a8aefbb2013ef3dc87ecbdf5d947d4b413af"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "40ac13318631c6fe21593124321c04b4a4b6afc1",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9f45e81bfe7472493b6df66133c929780ef2fb/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9f45e81bfe7472493b6df66133c929780ef2fb/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=6b9f45e81bfe7472493b6df66133c929780ef2fb",
        "patch": "@@ -200,6 +200,7 @@ struct Sections {\n         case RPCArg::Type::STR:\n         case RPCArg::Type::NUM:\n         case RPCArg::Type::AMOUNT:\n+        case RPCArg::Type::RANGE:\n         case RPCArg::Type::BOOL: {\n             if (outer_type == OuterType::NAMED_ARG) return; // Nothing more to do for non-recursive types on first recursion\n             auto left = indent;\n@@ -405,6 +406,10 @@ std::string RPCArg::ToDescriptionString() const\n             ret += \"numeric or string\";\n             break;\n         }\n+        case Type::RANGE: {\n+            ret += \"numeric or array\";\n+            break;\n+        }\n         case Type::BOOL: {\n             ret += \"boolean\";\n             break;\n@@ -464,6 +469,8 @@ std::string RPCArg::ToStringObj(const bool oneline) const\n         return res + \"\\\"hex\\\"\";\n     case Type::NUM:\n         return res + \"n\";\n+    case Type::RANGE:\n+        return res + \"n or [n,n]\";\n     case Type::AMOUNT:\n         return res + \"amount\";\n     case Type::BOOL:\n@@ -494,6 +501,7 @@ std::string RPCArg::ToString(const bool oneline) const\n         return \"\\\"\" + m_name + \"\\\"\";\n     }\n     case Type::NUM:\n+    case Type::RANGE:\n     case Type::AMOUNT:\n     case Type::BOOL: {\n         return m_name;"
      },
      {
        "sha": "f1bd2c89dfc500905202c35dc8a28003a7dff66e",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9f45e81bfe7472493b6df66133c929780ef2fb/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9f45e81bfe7472493b6df66133c929780ef2fb/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=6b9f45e81bfe7472493b6df66133c929780ef2fb",
        "patch": "@@ -51,6 +51,7 @@ struct RPCArg {\n         OBJ_USER_KEYS, //!< Special type where the user must set the keys e.g. to define multiple addresses; as opposed to e.g. an options object where the keys are predefined\n         AMOUNT,        //!< Special type representing a floating point amount (can be either NUM or STR)\n         STR_HEX,       //!< Special type that is a STR with only hex chars\n+        RANGE,         //!< Special type that is a NUM or [NUM,NUM]\n     };\n \n     enum class Optional {"
      }
    ]
  },
  {
    "sha": "45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTY2MDExNjMxMWRjNGNiYjczZTJkZGVjYjFkMGNjNDA3ZDdhZWI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T21:51:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T21:01:44Z"
      },
      "message": "Add support for stop/[start,stop] ranges to scantxoutset",
      "tree": {
        "sha": "5dfa43ef7ee6460064d784980a3fb0e0798708f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5dfa43ef7ee6460064d784980a3fb0e0798708f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b9f45e81bfe7472493b6df66133c929780ef2fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9f45e81bfe7472493b6df66133c929780ef2fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b9f45e81bfe7472493b6df66133c929780ef2fb"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7e8e5e07d08c49370153036588bde9be2f06b675",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
        "patch": "@@ -2159,7 +2159,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                                 {\n                                     {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n-                                    {\"range\", RPCArg::Type::NUM, /* default */ \"1000\", \"Up to what child index HD chains should be explored\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n                                 },\n                             },\n                         },\n@@ -2216,7 +2216,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             std::string desc_str;\n-            int range = 1000;\n+            std::pair<int64_t, int64_t> range = {0, 1000};\n             if (scanobject.isStr()) {\n                 desc_str = scanobject.get_str();\n             } else if (scanobject.isObject()) {\n@@ -2225,8 +2225,8 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 desc_str = desc_uni.get_str();\n                 UniValue range_uni = find_value(scanobject, \"range\");\n                 if (!range_uni.isNull()) {\n-                    range = range_uni.get_int();\n-                    if (range < 0 || range > 1000000) throw JSONRPCError(RPC_INVALID_PARAMETER, \"range out of range\");\n+                    range = ParseRange(range_uni);\n+                    if (range.first < 0 || (range.second >> 31) != 0 || range.second >= range.first + 1000000) throw JSONRPCError(RPC_INVALID_PARAMETER, \"range out of range\");\n                 }\n             } else {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n@@ -2237,8 +2237,11 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             if (!desc) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor '%s'\", desc_str));\n             }\n-            if (!desc->IsRange()) range = 0;\n-            for (int i = 0; i <= range; ++i) {\n+            if (!desc->IsRange()) {\n+                range.first = 0;\n+                range.second = 0;\n+            }\n+            for (int i = range.first; i <= range.second; ++i) {\n                 std::vector<CScript> scripts;\n                 if (!desc->Expand(i, provider, scripts, provider)) {\n                     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));"
      },
      {
        "sha": "18258f5df375fbce80f19ecc5ba51056109e9e7e",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
        "patch": "@@ -95,6 +95,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1499}])['total_amount'], Decimal(\"12.288\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": [1500,1500]}])['total_amount'], Decimal(\"16.384\"))\n \n         # Test the reported descriptors for a few matches\n         assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/*)\", \"range\": 1499}])), [\"pkh([0c5f9a1e/0'/0'/0]026dbd8b2315f296d36e6b6920b1579ca75569464875c7ebe869b536a7d9503c8c)#dzxw429x\", \"pkh([0c5f9a1e/0'/0'/1]033e6f25d76c00bedb3a8993c7d5739ee806397f0529b1b31dda31ef890f19a60c)#43rvceed\"])"
      }
    ]
  },
  {
    "sha": "1675b7ce5559d4796c81cb18a522d242be34d996",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjc1YjdjZTU1NTlkNDc5NmM4MWNiMThhNTIyZDI0MmJlMzRkOTk2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T21:59:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T21:05:10Z"
      },
      "message": "Use stop/[start,stop] notation in importmulti desc range",
      "tree": {
        "sha": "811c9bae203da8a0fe558ecd38963613985d5f11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/811c9bae203da8a0fe558ecd38963613985d5f11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1675b7ce5559d4796c81cb18a522d242be34d996",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1675b7ce5559d4796c81cb18a522d242be34d996",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1675b7ce5559d4796c81cb18a522d242be34d996",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1675b7ce5559d4796c81cb18a522d242be34d996/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45660116311dc4cbb73e2ddecb1d0cc407d7aeb7"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 7,
      "deletions": 15
    },
    "files": [
      {
        "sha": "5b0592e06d8238328d16f28365baad0455813b18",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1675b7ce5559d4796c81cb18a522d242be34d996/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1675b7ce5559d4796c81cb18a522d242be34d996/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=1675b7ce5559d4796c81cb18a522d242be34d996",
        "patch": "@@ -1132,13 +1132,10 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n         if (!data.exists(\"range\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n         }\n-        const UniValue& range = data[\"range\"];\n-        range_start = range.exists(\"start\") ? range[\"start\"].get_int64() : 0;\n-        if (!range.exists(\"end\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range for descriptor must be specified\");\n-        }\n-        range_end = range[\"end\"].get_int64();\n-        if (range_end < range_start || range_start < 0) {\n+        auto range = ParseRange(data[\"range\"]);\n+        range_start = range.first;\n+        range_end = range.second;\n+        if (range_start < 0 || (range_end >> 31) != 0 || range_end - range_start >= 1000000) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid descriptor range specified\");\n         }\n     }\n@@ -1373,12 +1370,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                             {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"range\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n-                                        {\n-                                            {\"start\", RPCArg::Type::NUM, /* default */ \"0\", \"Start of the range to import\"},\n-                                            {\"end\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"End of the range to import (inclusive)\"},\n-                                        }\n-                                    },\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n                                     {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n                                     {\"watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n                                     {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},"
      },
      {
        "sha": "c6d0425f223e3d4685c461d33b9f4516e83f989c",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1675b7ce5559d4796c81cb18a522d242be34d996/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1675b7ce5559d4796c81cb18a522d242be34d996/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=1675b7ce5559d4796c81cb18a522d242be34d996",
        "patch": "@@ -584,7 +584,7 @@ def run_test(self):\n         self.log.info(\"Should import the ranged descriptor with specified range as solvable\")\n         self.test_importmulti({\"desc\": descsum_create(desc),\n                                \"timestamp\": \"now\",\n-                               \"range\": {\"end\": 1}},\n+                               \"range\": 1},\n                               success=True,\n                               warnings=[\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\"])\n         for address in addresses:\n@@ -807,7 +807,7 @@ def run_test(self):\n                 'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n                 'keypool': True,\n                 'timestamp': 'now',\n-                'range' : {'start': 0, 'end': 4}\n+                'range' : [0, 4],\n             }]\n         )\n         for i in range(0, 5):"
      }
    ]
  },
  {
    "sha": "aeb7fbfd69d08639eb340d679c0451b2dbba5887",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWI3ZmJmZDY5ZDA4NjM5ZWIzNDBkNjc5YzA0NTFiMmRiYmE1ODg3",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-28T18:44:01Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2019-02-28T23:24:19Z"
      },
      "message": "appveyor: Don't build debug libraries instead of \"build and delete\"",
      "tree": {
        "sha": "0736754a3d6d64e8dc855ea0b072754b7d22373f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0736754a3d6d64e8dc855ea0b072754b7d22373f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeb7fbfd69d08639eb340d679c0451b2dbba5887",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb7fbfd69d08639eb340d679c0451b2dbba5887",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb7fbfd69d08639eb340d679c0451b2dbba5887",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb7fbfd69d08639eb340d679c0451b2dbba5887/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20268c6d767b4c212504aeb3f55ecf31789ec12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20268c6d767b4c212504aeb3f55ecf31789ec12e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20268c6d767b4c212504aeb3f55ecf31789ec12e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ac39fe235b58563fe0ecb90be258c1ce9d67fc3b",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb7fbfd69d08639eb340d679c0451b2dbba5887/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb7fbfd69d08639eb340d679c0451b2dbba5887/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=aeb7fbfd69d08639eb340d679c0451b2dbba5887",
        "patch": "@@ -11,15 +11,15 @@ environment:\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n cache:\n-- C:\\tools\\vcpkg\\installed -> appveyor.yml\n-- C:\\Users\\appveyor\\clcache -> appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n+- C:\\tools\\vcpkg\\installed -> .appveyor.yml\n+- C:\\Users\\appveyor\\clcache -> .appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n install:\n - cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n # - cmd: pip install zmq\n+- cmd: echo set(VCPKG_BUILD_TYPE release) >> C:\\tools\\vcpkg\\triplets\\%PLATFORM%-windows-static.cmake\n - cmd: vcpkg remove --outdated --recurse\n - cmd: vcpkg install --triplet %PLATFORM%-windows-static %PACKAGES% > NUL\n-- cmd: del /s /q C:\\Tools\\vcpkg\\installed\\%PLATFORM%-windows-static\\debug # Remove unused debug library\n before_build:\n - ps:  clcache -M 536870912\n - cmd: python build_msvc\\msvc-autogen.py"
      }
    ]
  },
  {
    "sha": "fa852f0e8d35ec520e34ef4206573da025986862",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTg1MmYwZThkMzVlYzUyMGUzNGVmNDIwNjU3M2RhMDI1OTg2ODYy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-28T23:42:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-28T23:35:09Z"
      },
      "message": "test: Bump timeout on tests that timeout on windows",
      "tree": {
        "sha": "d4407978acd28a044dd2f98876471d07c18fc1dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4407978acd28a044dd2f98876471d07c18fc1dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa852f0e8d35ec520e34ef4206573da025986862",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJceHAtAAoJEM4rdWl+aaVIlbYL/2ou0Pa0e00Bm+DHcnnqXJSg\nC4jDMF8ov9W+qFaYjtS9QQYmK5wOEmQUoP2eOAUBylaJzAXc5CEs86TjTTtuoLiS\nihJ94W2PT0RWaGD4TLYFw1ef2KkXgmhy5dLBLS3FypRmkC5XGkrIDiNnKL8K2uEz\nMHZE71KXTvlr40kAdM7zOACdhI96xqYoByR8camjGH6vrC6iQ9hw3gU+fCrVbpKs\nOImiyS08Xo7GoriLRk/qLu8a15qtaBnoGjp5Uyf1NhUH8bnsFpyJIoUdrseT6QeX\nvigFlilKfkn5vhKpOAtIiseeC7Y6XxkHpa2oQ7k4U0NfMmblOEs3fABQGz9kg+iN\nyMEZBMA5j6BqfaQ35z//hJ2Fz3lizCZe6fdCgELXl2UAd4xgRoGRlG8x1CsWGtrl\nr6Yh0WARiY2oHKcMXldSXK4JbyneYZOi4FzYyx5/xi3jg2kz9S9O7553Rft3j1aP\nDctpcVtSokD24p6KLKYwE+1x+tQJfabxdCuIv7hsVg==\n=wE7h\n-----END PGP SIGNATURE-----",
        "payload": "tree d4407978acd28a044dd2f98876471d07c18fc1dd\nparent 20268c6d767b4c212504aeb3f55ecf31789ec12e\nauthor MarcoFalke <falke.marco@gmail.com> 1551397377 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551396909 -0500\n\ntest: Bump timeout on tests that timeout on windows\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa852f0e8d35ec520e34ef4206573da025986862",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa852f0e8d35ec520e34ef4206573da025986862",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa852f0e8d35ec520e34ef4206573da025986862/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20268c6d767b4c212504aeb3f55ecf31789ec12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20268c6d767b4c212504aeb3f55ecf31789ec12e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20268c6d767b4c212504aeb3f55ecf31789ec12e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0eb3dd440bcbf6d861e356ec3f06d94bc5f85a9f",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa852f0e8d35ec520e34ef4206573da025986862/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa852f0e8d35ec520e34ef4206573da025986862/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=fa852f0e8d35ec520e34ef4206573da025986862",
        "patch": "@@ -180,7 +180,7 @@ def run_test(self):\n         for i in range(2202):\n             p2p1.send_message(msg_block(self.blocks[i]))\n         # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n-        p2p1.sync_with_ping(150)\n+        p2p1.sync_with_ping(200)\n         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n         # Send blocks to node2. Block 102 will be rejected."
      },
      {
        "sha": "96c5e49b0e031eb5ed957ca45786f31c3a90de25",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa852f0e8d35ec520e34ef4206573da025986862/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa852f0e8d35ec520e34ef4206573da025986862/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fa852f0e8d35ec520e34ef4206573da025986862",
        "patch": "@@ -60,6 +60,7 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n         self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "8ff9498ef3d361f39072945ca9b3af5d1b399c11",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa852f0e8d35ec520e34ef4206573da025986862/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa852f0e8d35ec520e34ef4206573da025986862/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=fa852f0e8d35ec520e34ef4206573da025986862",
        "patch": "@@ -47,6 +47,7 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-whitelist=127.0.0.1', '-par=1', '-enablebip61']]  # Use only one script thread to get the exact reject reason for testing\n         self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTI1M2Y2ZWJmMmM5YTEyZjVjYjJiNGM5ZjU3NTE3OGQwNThhNjEy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-27T22:11:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-03-01T05:40:09Z"
      },
      "message": "Make deriveaddresses use stop/[start,stop] notation for ranges",
      "tree": {
        "sha": "4ca902fff36f7ee9db11c46d422921c7855f1fdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ca902fff36f7ee9db11c46d422921c7855f1fdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1675b7ce5559d4796c81cb18a522d242be34d996",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1675b7ce5559d4796c81cb18a522d242be34d996",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1675b7ce5559d4796c81cb18a522d242be34d996"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 24,
      "deletions": 21
    },
    "files": [
      {
        "sha": "765fd772fe796db4ca763f913d943546f84029d2",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
        "patch": "@@ -185,7 +185,7 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n \n UniValue deriveaddresses(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.empty() || request.params.size() > 3) {\n+    if (request.fHelp || request.params.empty() || request.params.size() > 2) {\n         throw std::runtime_error(\n             RPCHelpMan{\"deriveaddresses\",\n             {\"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n@@ -199,37 +199,37 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"},\n             {\n                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n-                {\"begin\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n-                {\"end\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n+                {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n             },\n             RPCResult{\n                 \"[ address ] (array) the derived addresses\\n\"\n             },\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n-                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\\\" 0 2\")\n+                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\\\" \\\"[0,2]\\\"\")\n             }}.ToString()\n         );\n     }\n \n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType()}); // Range argument is checked later\n     const std::string desc_str = request.params[0].get_str();\n \n-    int range_begin = 0;\n-    int range_end = 0;\n+    int64_t range_begin = 0;\n+    int64_t range_end = 0;\n \n-    if (request.params.size() >= 2) {\n-        if (request.params.size() == 2) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n-        }\n-        range_begin = request.params[1].get_int();\n-        range_end = request.params[2].get_int();\n-        if (range_begin < 0) {\n+    if (request.params.size() >= 2 && !request.params[1].isNull()) {\n+        auto range = ParseRange(request.params[1]);\n+        if (range.first < 0) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should be greater or equal than 0\");\n         }\n-        if (range_begin > range_end) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range end should be equal to or greater than begin\");\n+        if ((range.second >> 31) != 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range is too high\");\n+        }\n+        if (range.second >= range.first + 1000000) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range is too large\");\n         }\n+        range_begin = range.first;\n+        range_end = range.second;\n     }\n \n     FlatSigningProvider provider;"
      },
      {
        "sha": "185dffd51c8a530f3b3108c6beb637d20a011c11",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
        "patch": "@@ -27,17 +27,20 @@ def run_test(self):\n         assert_equal(self.nodes[0].deriveaddresses(descriptor_pubkey), [address])\n \n         ranged_descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)#kft60nuy\"\n-        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 0, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n+        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, [1, 2]), [\"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n+        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n \n-        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"), 0, 2)\n+        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"), [0, 2])\n \n         assert_raises_rpc_error(-8, \"Range must be specified for a ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"))\n \n-        assert_raises_rpc_error(-8, \"Missing range end parameter\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 0)\n+        assert_raises_rpc_error(-8, \"End of range is too high\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 10000000000)\n \n-        assert_raises_rpc_error(-8, \"Range end should be equal to or greater than begin\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 2, 0)\n+        assert_raises_rpc_error(-8, \"Range is too large\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), [1000000000, 2000000000])\n \n-        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), -1, 0)\n+        assert_raises_rpc_error(-8, \"Range specified as [begin,end] must not have begin after end\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), [2, 0])\n+\n+        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), [-1, 0])\n \n         combo_descriptor = descsum_create(\"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\")\n         assert_equal(self.nodes[0].deriveaddresses(combo_descriptor), [\"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", \"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", address, \"2NDvEwGfpEqJWfybzpKPHF2XH3jwoQV3D7x\"])"
      }
    ]
  },
  {
    "sha": "07cae5287c4409e9e597b891899403220905881d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2NhZTUyODdjNDQwOWU5ZTU5N2I4OTE4OTk0MDMyMjA5MDU4ODFk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-01T12:14:08Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-01T12:14:08Z"
      },
      "message": "[wallet] remove unused GetScriptForMining",
      "tree": {
        "sha": "946edef7cce7a9a07a74b7c2e7d93a1f43a0656d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/946edef7cce7a9a07a74b7c2e7d93a1f43a0656d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07cae5287c4409e9e597b891899403220905881d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlx5IhAACgkQV/+b28ww\nEAl8UQ//Shrb4SUHfDI+K3qBM+ozdpGPwjgZsTDk1l5kZ9fNk+Dhn/5oDoaVDTpa\nF6VXkEo2hE0mp4k97LVJ9um2q7VcXjbr4KBCX0tk7gGlTdPI8zxdvB8eVUq6PJAK\nRQ8heP9N9uwoHlATtPvuKQ3X3knnWOv3pSQQ/DNtK54BlECKhKUEGNMB92iN6FuM\nKK2nWKWoIAX8BLjrB6xVBrIXrM5adu1cNFgweFHJtnlMhrXla5n0nFtXWuPG+4JR\ns5ZjKsIIw0SkGtD33GiUDAUQSm9gqat4c2z5nZNBh7bwFnkqIQwTbnXQLYRwdNd0\naRSucR7YEgXrgu8kWWm5gpU90S2ExoVFXpbGpm1fhZHHwymGnzmiIw3mhcAKqXsq\nZAQNgqbHoGKSvxS2iO3BLs/jQ8v6zM7dMovOHqqzHG6BUYLSbluMiqfjPbd8dRo1\nmWYxHbDl0oIfigtVicDlOKgi87j7AZVTz+s0FcgxawsjeGWQPP5GTySdhrLsGRJy\nRieSauwToLBc2QEPYkJpSCDLVmZBjvQxInvWJnGoxZOH/AFmrUYFxKzBZ7qvgVvO\no2/8h8Dm1c6BCZIXPDW3Qkm96kcEUnjWuyLUy8J8gZG94XxaOy9ANBj8t3JKUIF/\n/3z/XNrUkt1Cl1/Fm8OC/5qlzR2aeDdX2aQjfpjiCT5vfHaYHCY=\n=17I9\n-----END PGP SIGNATURE-----",
        "payload": "tree 946edef7cce7a9a07a74b7c2e7d93a1f43a0656d\nparent 8bb3e4c487500a580e3e18791b1f4e7dcdd35442\nauthor Sjors Provoost <sjors@sprovoost.nl> 1551442448 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1551442448 +0100\n\n[wallet] remove unused GetScriptForMining\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07cae5287c4409e9e597b891899403220905881d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07cae5287c4409e9e597b891899403220905881d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07cae5287c4409e9e597b891899403220905881d/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bb3e4c487500a580e3e18791b1f4e7dcdd35442",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bb3e4c487500a580e3e18791b1f4e7dcdd35442"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 0,
      "deletions": 13
    },
    "files": [
      {
        "sha": "cee31d5ac27bc3433607ee9e29e8bc978e5cb44e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07cae5287c4409e9e597b891899403220905881d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07cae5287c4409e9e597b891899403220905881d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=07cae5287c4409e9e597b891899403220905881d",
        "patch": "@@ -3819,17 +3819,6 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n     }\n }\n \n-void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n-{\n-    std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);\n-    CPubKey pubkey;\n-    if (!rKey->GetReservedKey(pubkey))\n-        return;\n-\n-    script = rKey;\n-    script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-}\n-\n void CWallet::LockCoin(const COutPoint& output)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins"
      },
      {
        "sha": "5173f957c72ae4af78dc3bd230278d51ac4149ba",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07cae5287c4409e9e597b891899403220905881d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07cae5287c4409e9e597b891899403220905881d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=07cae5287c4409e9e597b891899403220905881d",
        "patch": "@@ -1065,8 +1065,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     const std::string& GetLabelName(const CScript& scriptPubKey) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n-\n     unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n     {\n         AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool"
      }
    ]
  },
  {
    "sha": "e8612adc5d074f1e571bd20de97e909615cd00a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODYxMmFkYzVkMDc0ZjFlNTcxYmQyMGRlOTdlOTA5NjE1Y2QwMGE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-01T14:04:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-01T14:04:36Z"
      },
      "message": "Merge #15507: test: Bump timeout on tests that timeout on windows\n\nfa852f0e8d test: Bump timeout on tests that timeout on windows (MarcoFalke)\n\nPull request description:\n\n  Those tests build a ton of blocks and time out for me on Windows with:\n\n  ```\n  test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 60.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)\n\nTree-SHA512: a8fffeaddd02c051fbcc04bfac69f6ed826b8f16616e3b2e210a469d07c3e5706baab8121f1cd7ed265481de3a6197cf371513e2afbe506cf13b1dabfe3a0005",
      "tree": {
        "sha": "f22fe59e0096015b40bee1072907cb7575c254cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f22fe59e0096015b40bee1072907cb7575c254cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8612adc5d074f1e571bd20de97e909615cd00a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJceTv0AAoJENLqSFDnUoslcGUP/ibuV1Vnl5x4ZnbDxdtrcNJ9\nwkM8e/wzE7gK0qB7VuamgCEyyUcWdMc1XykiAl94lpsbnu7rIMWraluWajxKL1nE\nPvv8B9e7uJNrubMZVq2o+V+rTqcFSfm+lkWIW94szaTs5JnN5KI31urHoliCem+k\nIVSL2Oq1ohIxGWkxMMSc1Tl9bNvyF5MF6Z7r+YCMBB+ysO4Ialub8n6e71fgG/xe\n+HRJY8DUikM02C/avK7PyJCbKnZhjygLqW0pYEhW5x0P5Dqm4h3DwsMiLpd0jQ9D\nyAtIiAy4MPDh9O+OgisonweW5Vyaj2Yy0qb9scwJpf6PcvUORIYtYXtMWz4RSO4z\nWImewRGyh3wsfUcxhQojAh7tKYi/P8UqxtlKw64nDNeQ/QLEzGX2yir1LpHILvi6\n8/XhbWhZ+QSNWI8tWgdp35cW8BTNWOqhWphdEpSne47j8YoVcnxw0dWkW8tEuN7X\nr+diRk/v/kM3DlQljnsXET6RWVPYOZ0yPlsnzM3Wdc/P/t+F/dwCId9doe7ywP7h\npqD/ecTm5XyJOfRYFJVN8GeuQTCw3nVIrWTHg0Inayws/MYtCKw5kW2fPpavyxpC\n+DlZj4fpksXq1HCg3jcPOBdk/beGBZbYXbZCt4cc1EyUTAaMMCahWKX95kQSbhVS\n/j4Io7E75BldvX08KrJS\n=c8F0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEdZT5N1M4OWuuLNjOGBXERREC+iTCPxnJOA1VIBZgoICP/wEHPnoTSufg65\neWwK0jkVT+II8QRceTv28AibuA7SMDN/lgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQhNmpoKPF47NuXPEj\n/555tAjxBFx5O/bwCFOa1t8ji8XEAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t//AQrtGU2cscaRpYP7AE0ShNtwjxBFx5O/bwCLFN\n/lF+AyuxAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDgC24epzc477aYs3GTmppBCPAQEESmcNZ1lGThMgDSDa7N\nCgjxBFx5O/bwCM1zhH6f0GwQAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f22fe59e0096015b40bee1072907cb7575c254cc\nparent 29c24b05fb71a5577af9f58298493c1f2d489069\nparent fa852f0e8d35ec520e34ef4206573da025986862\nauthor MarcoFalke <falke.marco@gmail.com> 1551449073 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551449076 -0500\n\nMerge #15507: test: Bump timeout on tests that timeout on windows\n\nfa852f0e8d test: Bump timeout on tests that timeout on windows (MarcoFalke)\n\nPull request description:\n\n  Those tests build a ton of blocks and time out for me on Windows with:\n\n  ```\n  test_framework.authproxy.JSONRPCException: 'generatetoaddress' RPC took longer than 60.000000 seconds. Consider using larger timeout for calls that take longer to return. (-344)\n\nTree-SHA512: a8fffeaddd02c051fbcc04bfac69f6ed826b8f16616e3b2e210a469d07c3e5706baab8121f1cd7ed265481de3a6197cf371513e2afbe506cf13b1dabfe3a0005\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8612adc5d074f1e571bd20de97e909615cd00a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8612adc5d074f1e571bd20de97e909615cd00a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8612adc5d074f1e571bd20de97e909615cd00a8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29c24b05fb71a5577af9f58298493c1f2d489069",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c24b05fb71a5577af9f58298493c1f2d489069",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29c24b05fb71a5577af9f58298493c1f2d489069"
      },
      {
        "sha": "fa852f0e8d35ec520e34ef4206573da025986862",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa852f0e8d35ec520e34ef4206573da025986862",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa852f0e8d35ec520e34ef4206573da025986862"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0eb3dd440bcbf6d861e356ec3f06d94bc5f85a9f",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8612adc5d074f1e571bd20de97e909615cd00a8/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8612adc5d074f1e571bd20de97e909615cd00a8/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=e8612adc5d074f1e571bd20de97e909615cd00a8",
        "patch": "@@ -180,7 +180,7 @@ def run_test(self):\n         for i in range(2202):\n             p2p1.send_message(msg_block(self.blocks[i]))\n         # Syncing 2200 blocks can take a while on slow systems. Give it plenty of time to sync.\n-        p2p1.sync_with_ping(150)\n+        p2p1.sync_with_ping(200)\n         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n         # Send blocks to node2. Block 102 will be rejected."
      },
      {
        "sha": "96c5e49b0e031eb5ed957ca45786f31c3a90de25",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8612adc5d074f1e571bd20de97e909615cd00a8/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8612adc5d074f1e571bd20de97e909615cd00a8/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=e8612adc5d074f1e571bd20de97e909615cd00a8",
        "patch": "@@ -60,6 +60,7 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n         self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "8ff9498ef3d361f39072945ca9b3af5d1b399c11",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8612adc5d074f1e571bd20de97e909615cd00a8/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8612adc5d074f1e571bd20de97e909615cd00a8/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=e8612adc5d074f1e571bd20de97e909615cd00a8",
        "patch": "@@ -47,6 +47,7 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-whitelist=127.0.0.1', '-par=1', '-enablebip61']]  # Use only one script thread to get the exact reject reason for testing\n         self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  },
  {
    "sha": "a6d7026a45c915794338c178b7f95d5c1f8e977f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmQ3MDI2YTQ1YzkxNTc5NDMzOGMxNzhiN2Y5NWQ1YzFmOGU5Nzdm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-01T14:13:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-01T14:13:18Z"
      },
      "message": "Merge #15497: rpc: Consistent range arguments in scantxoutset/importmulti/deriveaddresses\n\nca253f6ebf Make deriveaddresses use stop/[start,stop] notation for ranges (Pieter Wuille)\n1675b7ce55 Use stop/[start,stop] notation in importmulti desc range (Pieter Wuille)\n4566011631 Add support for stop/[start,stop] ranges to scantxoutset (Pieter Wuille)\n6b9f45e81b Support ranges arguments in RPC help (Pieter Wuille)\n7aa6a8aefb Add ParseRange function to parse args of the form int/[int,int] (Pieter Wuille)\n\nPull request description:\n\n  This introduces a consistent notation for RPC arguments in `scantxoutset`, `importmulti`, and `deriveaddresses`, either:\n  * `\"range\" : int` to just specify the end of the range\n  * `\"range\" : [int,int]` to specify both the begin and the end of the range.\n\n  For `scantxoutset`, this is a backward compatible new feature. For the two other RPCs, it's an incompatible change, but neither of them has been in a release so far. Because of that non-released reason, this only makes sense in 0.18, in my opinion.\n\n  I suggest this as an alternative to #15496, which only makes `deriveaddresses` compatible with `importmulti`, but not with the existing `scantxoutset` RPC. I also think `[int,int]` is more convenient than `{\"start\":int,\"stop\":int}`.\n\n  I realize this is technically a feature added to `scantxoutset` after the feature freeze. If desired, I'll drop the `scantxoutset` changes.\n\nTree-SHA512: 1cbebb90cf34f106786dbcec7afbf3f43fb8b7e46cc7e6763faf1bc1babf12375a1b3c3cf86ee83c21ed2171d99b5a2f60331850bc613db25538c38b6a056676",
      "tree": {
        "sha": "3b6eedfa8dc44000116f027ab7b3e3f22a3473d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b6eedfa8dc44000116f027ab7b3e3f22a3473d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d7026a45c915794338c178b7f95d5c1f8e977f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJceT3/AAoJENLqSFDnUoslRhgP/1/CV7JPN8GUOTLMLBUsuCRa\nGqW/t298JO/pzqXyBALGl/LJXN2XBMK75a2ZzR5V4oCAG7N1keJEd33VO/fPAnKA\nszrlvTgqC8yIU/E3GJ3/uTSsN7+RKlR6crIdh9XA0YbVBCadotQVeMED9c589tm3\nm4fFczGn4cK2qIW8G71uFZZyiYMcuXyasb9fFvBlYZyjqzztvze9P/d3MhGCWjaI\nr5bOWFReUjb+rgfL4dpwLfCaEucynzQj0hayWym0iESTMXyEnGhP6CmfgcS/FUUU\n2j4GZQ8/pVXno+1AuT2NSJ9MOZU3JHfzcpTJtO3HcamoMqGtK59zpMFVwR85VFzM\nR3mbSoFtc9ZZgFeoK7eWi4d70uH57Q0QOn+NiOkSfq7yHP9OjJti2u9BlEt4YQMD\n00RtJTyxDZ+bI8YwTq5cyuTt6KzqVG9wHjZHaQ4+yxbB4Df7D/tpVwnq0msCff5t\n58A3hPKDeZyQ+N+PMDweKlVwLPrxNxS9gGASamP9AWhu2fbKcpJfGW1ohyjM1DM5\n695skPmMywDdBmpJuOIgkhdgqbydLw1Kq5kVE0sghtLv1co0CTF3JWh9fObeDA37\nWhuc+1AR3wX88C62UXLyBW8Q6qUM1LjkOKUBGJR4SAsiplCrkkji2htGSgSjQmiF\no9WzDZNiKGvY0zhyPNgw\n=rWNz\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFHKaG1qaMHGF76UJd9X91oK+FxILZhAFKe+P7EzGfZVCP/wEEtrNexiHpDh\nRa3Np5A3hyEI8QRceT4B8AhoT7x9Jts4QQCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQTwRDFgY9szrp1acq\n7cHViAjxBFx5PgHwCLEJOpA2iD61AIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t//AQaKETKqO32EOQc63kH2mKzgjxBFx5PgHwCC/O\nf/rBuLR3AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BCmbjmifSUE4DBNmo8VoJcsCPAQG6+DF9RJLZek8pE7/i0y\nggjxBFx5PgHwCCRakfq/PQR1AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 3b6eedfa8dc44000116f027ab7b3e3f22a3473d4\nparent e8612adc5d074f1e571bd20de97e909615cd00a8\nparent ca253f6ebf2c9a12f5cb2b4c9f575178d058a612\nauthor MarcoFalke <falke.marco@gmail.com> 1551449585 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551449598 -0500\n\nMerge #15497: rpc: Consistent range arguments in scantxoutset/importmulti/deriveaddresses\n\nca253f6ebf Make deriveaddresses use stop/[start,stop] notation for ranges (Pieter Wuille)\n1675b7ce55 Use stop/[start,stop] notation in importmulti desc range (Pieter Wuille)\n4566011631 Add support for stop/[start,stop] ranges to scantxoutset (Pieter Wuille)\n6b9f45e81b Support ranges arguments in RPC help (Pieter Wuille)\n7aa6a8aefb Add ParseRange function to parse args of the form int/[int,int] (Pieter Wuille)\n\nPull request description:\n\n  This introduces a consistent notation for RPC arguments in `scantxoutset`, `importmulti`, and `deriveaddresses`, either:\n  * `\"range\" : int` to just specify the end of the range\n  * `\"range\" : [int,int]` to specify both the begin and the end of the range.\n\n  For `scantxoutset`, this is a backward compatible new feature. For the two other RPCs, it's an incompatible change, but neither of them has been in a release so far. Because of that non-released reason, this only makes sense in 0.18, in my opinion.\n\n  I suggest this as an alternative to #15496, which only makes `deriveaddresses` compatible with `importmulti`, but not with the existing `scantxoutset` RPC. I also think `[int,int]` is more convenient than `{\"start\":int,\"stop\":int}`.\n\n  I realize this is technically a feature added to `scantxoutset` after the feature freeze. If desired, I'll drop the `scantxoutset` changes.\n\nTree-SHA512: 1cbebb90cf34f106786dbcec7afbf3f43fb8b7e46cc7e6763faf1bc1babf12375a1b3c3cf86ee83c21ed2171d99b5a2f60331850bc613db25538c38b6a056676\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d7026a45c915794338c178b7f95d5c1f8e977f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d7026a45c915794338c178b7f95d5c1f8e977f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d7026a45c915794338c178b7f95d5c1f8e977f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8612adc5d074f1e571bd20de97e909615cd00a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8612adc5d074f1e571bd20de97e909615cd00a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8612adc5d074f1e571bd20de97e909615cd00a8"
      },
      {
        "sha": "ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 67,
      "deletions": 42
    },
    "files": [
      {
        "sha": "7e8e5e07d08c49370153036588bde9be2f06b675",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "patch": "@@ -2159,7 +2159,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n                                 {\n                                     {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n-                                    {\"range\", RPCArg::Type::NUM, /* default */ \"1000\", \"Up to what child index HD chains should be explored\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n                                 },\n                             },\n                         },\n@@ -2216,7 +2216,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             std::string desc_str;\n-            int range = 1000;\n+            std::pair<int64_t, int64_t> range = {0, 1000};\n             if (scanobject.isStr()) {\n                 desc_str = scanobject.get_str();\n             } else if (scanobject.isObject()) {\n@@ -2225,8 +2225,8 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 desc_str = desc_uni.get_str();\n                 UniValue range_uni = find_value(scanobject, \"range\");\n                 if (!range_uni.isNull()) {\n-                    range = range_uni.get_int();\n-                    if (range < 0 || range > 1000000) throw JSONRPCError(RPC_INVALID_PARAMETER, \"range out of range\");\n+                    range = ParseRange(range_uni);\n+                    if (range.first < 0 || (range.second >> 31) != 0 || range.second >= range.first + 1000000) throw JSONRPCError(RPC_INVALID_PARAMETER, \"range out of range\");\n                 }\n             } else {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n@@ -2237,8 +2237,11 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             if (!desc) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor '%s'\", desc_str));\n             }\n-            if (!desc->IsRange()) range = 0;\n-            for (int i = 0; i <= range; ++i) {\n+            if (!desc->IsRange()) {\n+                range.first = 0;\n+                range.second = 0;\n+            }\n+            for (int i = range.first; i <= range.second; ++i) {\n                 std::vector<CScript> scripts;\n                 if (!desc->Expand(i, provider, scripts, provider)) {\n                     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));"
      },
      {
        "sha": "765fd772fe796db4ca763f913d943546f84029d2",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "patch": "@@ -185,7 +185,7 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n \n UniValue deriveaddresses(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.empty() || request.params.size() > 3) {\n+    if (request.fHelp || request.params.empty() || request.params.size() > 2) {\n         throw std::runtime_error(\n             RPCHelpMan{\"deriveaddresses\",\n             {\"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n@@ -199,37 +199,37 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"},\n             {\n                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n-                {\"begin\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n-                {\"end\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n+                {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n             },\n             RPCResult{\n                 \"[ address ] (array) the derived addresses\\n\"\n             },\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n-                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\\\" 0 2\")\n+                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#trd0mf0l\\\" \\\"[0,2]\\\"\")\n             }}.ToString()\n         );\n     }\n \n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType()}); // Range argument is checked later\n     const std::string desc_str = request.params[0].get_str();\n \n-    int range_begin = 0;\n-    int range_end = 0;\n+    int64_t range_begin = 0;\n+    int64_t range_end = 0;\n \n-    if (request.params.size() >= 2) {\n-        if (request.params.size() == 2) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n-        }\n-        range_begin = request.params[1].get_int();\n-        range_end = request.params[2].get_int();\n-        if (range_begin < 0) {\n+    if (request.params.size() >= 2 && !request.params[1].isNull()) {\n+        auto range = ParseRange(request.params[1]);\n+        if (range.first < 0) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should be greater or equal than 0\");\n         }\n-        if (range_begin > range_end) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range end should be equal to or greater than begin\");\n+        if ((range.second >> 31) != 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range is too high\");\n+        }\n+        if (range.second >= range.first + 1000000) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range is too large\");\n         }\n+        range_begin = range.first;\n+        range_end = range.second;\n     }\n \n     FlatSigningProvider provider;"
      },
      {
        "sha": "40ac13318631c6fe21593124321c04b4a4b6afc1",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "patch": "@@ -200,6 +200,7 @@ struct Sections {\n         case RPCArg::Type::STR:\n         case RPCArg::Type::NUM:\n         case RPCArg::Type::AMOUNT:\n+        case RPCArg::Type::RANGE:\n         case RPCArg::Type::BOOL: {\n             if (outer_type == OuterType::NAMED_ARG) return; // Nothing more to do for non-recursive types on first recursion\n             auto left = indent;\n@@ -405,6 +406,10 @@ std::string RPCArg::ToDescriptionString() const\n             ret += \"numeric or string\";\n             break;\n         }\n+        case Type::RANGE: {\n+            ret += \"numeric or array\";\n+            break;\n+        }\n         case Type::BOOL: {\n             ret += \"boolean\";\n             break;\n@@ -464,6 +469,8 @@ std::string RPCArg::ToStringObj(const bool oneline) const\n         return res + \"\\\"hex\\\"\";\n     case Type::NUM:\n         return res + \"n\";\n+    case Type::RANGE:\n+        return res + \"n or [n,n]\";\n     case Type::AMOUNT:\n         return res + \"amount\";\n     case Type::BOOL:\n@@ -494,6 +501,7 @@ std::string RPCArg::ToString(const bool oneline) const\n         return \"\\\"\" + m_name + \"\\\"\";\n     }\n     case Type::NUM:\n+    case Type::RANGE:\n     case Type::AMOUNT:\n     case Type::BOOL: {\n         return m_name;\n@@ -523,3 +531,17 @@ std::string RPCArg::ToString(const bool oneline) const\n     }\n     assert(false);\n }\n+\n+std::pair<int64_t, int64_t> ParseRange(const UniValue& value)\n+{\n+    if (value.isNum()) {\n+        return {0, value.get_int64()};\n+    }\n+    if (value.isArray() && value.size() == 2 && value[0].isNum() && value[1].isNum()) {\n+        int64_t low = value[0].get_int64();\n+        int64_t high = value[1].get_int64();\n+        if (low > high) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range specified as [begin,end] must not have begin after end\");\n+        return {low, high};\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified as end or as [begin,end]\");\n+}"
      },
      {
        "sha": "f1bd2c89dfc500905202c35dc8a28003a7dff66e",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "patch": "@@ -38,6 +38,9 @@ unsigned int ParseConfirmTarget(const UniValue& value);\n RPCErrorCode RPCErrorFromTransactionError(TransactionError terr);\n UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string = \"\");\n \n+//! Parse a JSON range specified as int64, or [int64, int64]\n+std::pair<int64_t, int64_t> ParseRange(const UniValue& value);\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,\n@@ -48,6 +51,7 @@ struct RPCArg {\n         OBJ_USER_KEYS, //!< Special type where the user must set the keys e.g. to define multiple addresses; as opposed to e.g. an options object where the keys are predefined\n         AMOUNT,        //!< Special type representing a floating point amount (can be either NUM or STR)\n         STR_HEX,       //!< Special type that is a STR with only hex chars\n+        RANGE,         //!< Special type that is a NUM or [NUM,NUM]\n     };\n \n     enum class Optional {"
      },
      {
        "sha": "5b0592e06d8238328d16f28365baad0455813b18",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d7026a45c915794338c178b7f95d5c1f8e977f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "patch": "@@ -1132,13 +1132,10 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n         if (!data.exists(\"range\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor is ranged, please specify the range\");\n         }\n-        const UniValue& range = data[\"range\"];\n-        range_start = range.exists(\"start\") ? range[\"start\"].get_int64() : 0;\n-        if (!range.exists(\"end\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"End of range for descriptor must be specified\");\n-        }\n-        range_end = range[\"end\"].get_int64();\n-        if (range_end < range_start || range_start < 0) {\n+        auto range = ParseRange(data[\"range\"]);\n+        range_start = range.first;\n+        range_end = range.second;\n+        if (range_start < 0 || (range_end >> 31) != 0 || range_end - range_start >= 1000000) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid descriptor range specified\");\n         }\n     }\n@@ -1373,12 +1370,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                             {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"\"},\n                                         }\n                                     },\n-                                    {\"range\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the start and end of the range to import\",\n-                                        {\n-                                            {\"start\", RPCArg::Type::NUM, /* default */ \"0\", \"Start of the range to import\"},\n-                                            {\"end\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"End of the range to import (inclusive)\"},\n-                                        }\n-                                    },\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n                                     {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be treated as not incoming payments (also known as change)\"},\n                                     {\"watchonly\", RPCArg::Type::BOOL, /* default */ \"false\", \"Stating whether matching outputs should be considered watchonly.\"},\n                                     {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},"
      },
      {
        "sha": "185dffd51c8a530f3b3108c6beb637d20a011c11",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d7026a45c915794338c178b7f95d5c1f8e977f/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d7026a45c915794338c178b7f95d5c1f8e977f/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "patch": "@@ -27,17 +27,20 @@ def run_test(self):\n         assert_equal(self.nodes[0].deriveaddresses(descriptor_pubkey), [address])\n \n         ranged_descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)#kft60nuy\"\n-        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 0, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n+        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, [1, 2]), [\"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n+        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n \n-        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"), 0, 2)\n+        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"), [0, 2])\n \n         assert_raises_rpc_error(-8, \"Range must be specified for a ranged descriptor\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"))\n \n-        assert_raises_rpc_error(-8, \"Missing range end parameter\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 0)\n+        assert_raises_rpc_error(-8, \"End of range is too high\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 10000000000)\n \n-        assert_raises_rpc_error(-8, \"Range end should be equal to or greater than begin\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), 2, 0)\n+        assert_raises_rpc_error(-8, \"Range is too large\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), [1000000000, 2000000000])\n \n-        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), -1, 0)\n+        assert_raises_rpc_error(-8, \"Range specified as [begin,end] must not have begin after end\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), [2, 0])\n+\n+        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, descsum_create(\"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"), [-1, 0])\n \n         combo_descriptor = descsum_create(\"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\")\n         assert_equal(self.nodes[0].deriveaddresses(combo_descriptor), [\"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", \"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", address, \"2NDvEwGfpEqJWfybzpKPHF2XH3jwoQV3D7x\"])"
      },
      {
        "sha": "18258f5df375fbce80f19ecc5ba51056109e9e7e",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d7026a45c915794338c178b7f95d5c1f8e977f/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d7026a45c915794338c178b7f95d5c1f8e977f/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "patch": "@@ -95,6 +95,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1499}])['total_amount'], Decimal(\"12.288\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": [1500,1500]}])['total_amount'], Decimal(\"16.384\"))\n \n         # Test the reported descriptors for a few matches\n         assert_equal(descriptors(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/*)\", \"range\": 1499}])), [\"pkh([0c5f9a1e/0'/0'/0]026dbd8b2315f296d36e6b6920b1579ca75569464875c7ebe869b536a7d9503c8c)#dzxw429x\", \"pkh([0c5f9a1e/0'/0'/1]033e6f25d76c00bedb3a8993c7d5739ee806397f0529b1b31dda31ef890f19a60c)#43rvceed\"])"
      },
      {
        "sha": "c6d0425f223e3d4685c461d33b9f4516e83f989c",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d7026a45c915794338c178b7f95d5c1f8e977f/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d7026a45c915794338c178b7f95d5c1f8e977f/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "patch": "@@ -584,7 +584,7 @@ def run_test(self):\n         self.log.info(\"Should import the ranged descriptor with specified range as solvable\")\n         self.test_importmulti({\"desc\": descsum_create(desc),\n                                \"timestamp\": \"now\",\n-                               \"range\": {\"end\": 1}},\n+                               \"range\": 1},\n                               success=True,\n                               warnings=[\"Some private keys are missing, outputs will be considered watchonly. If this is intentional, specify the watchonly flag.\"])\n         for address in addresses:\n@@ -807,7 +807,7 @@ def run_test(self):\n                 'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n                 'keypool': True,\n                 'timestamp': 'now',\n-                'range' : {'start': 0, 'end': 4}\n+                'range' : [0, 4],\n             }]\n         )\n         for i in range(0, 5):"
      }
    ]
  },
  {
    "sha": "9586157c0f9c12d3cfa55926ccc6c022324fa60a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTg2MTU3YzBmOWMxMmQzY2ZhNTU5MjZjY2M2YzAyMjMyNGZhNjBh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-01T12:45:16Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-03-01T14:34:43Z"
      },
      "message": "[rpc] deriveaddresses: add range to CRPCConvertParam",
      "tree": {
        "sha": "b953862801a999d2ac0a8bf921d9c63b1968e607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b953862801a999d2ac0a8bf921d9c63b1968e607"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9586157c0f9c12d3cfa55926ccc6c022324fa60a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlx5QwoACgkQV/+b28ww\nEAlCcA//YeZQu7sU3ojA08UaxiyY9KMyxMlBlicBpoGWbMzi6E2Z4V94MOgLG2iZ\nl6CIA1xd5AjL3j4CsrzgQUVSDGFr8TRkKUIj51e12Tk9rJQd+eomGbw3xp+ThO5k\n/V1w47VT8yp3EhClfX9J/wyiSbp7vKIesJHFWWcBzikJgKrZdK+j5DpK5eXTzlBG\nO9tlJpiPriK29Nmsd2+Ix4s2gkEAAyph9VzRy0BqVt8D+gWtbYb1NxQUOSI4AZNB\n4rwN4RJwEM1gKWIygKQr5ct16LifBrHpwdx0Awluv9yaNCDFHRijtcZ+PDKhTx4I\nDFEZuD6mMidkyQ+PRCC8TreDX7lAyqhbIa3wt6naeHoA8HCgUrVB9uIxk0jMDGtT\nXaumFCUEPCmFnr5/u7A2FdzYB+kBfMnaUiPQ3H+idO9toLUj/zRfgjbw4C04g+TA\nxG6yUjvwXUwWcc0OUtCI5bHZMtDfdtdTu872vlDEt/3nEoinVCXZVKdeGkHenAVy\npew3uvxA+wQmGois9OnYFfo5rbs5QUfvh5SJMO8oNklChBMV3AMxEIGuVQ0yo2JR\ndZ3HFBXvstAbcX4uVFvGFQW5cd5RJCtskqqn0BzpsIhRTZE/URgpTHna6wjjGitx\ncT2c/DhGMaTJABVfRu/ktvqTCzXjV/EXbdhefjQPFoMOeQma9LE=\n=zBDz\n-----END PGP SIGNATURE-----",
        "payload": "tree b953862801a999d2ac0a8bf921d9c63b1968e607\nparent ca253f6ebf2c9a12f5cb2b4c9f575178d058a612\nauthor Sjors Provoost <sjors@sprovoost.nl> 1551444316 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1551450883 +0100\n\n[rpc] deriveaddresses: add range to CRPCConvertParam\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9586157c0f9c12d3cfa55926ccc6c022324fa60a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9586157c0f9c12d3cfa55926ccc6c022324fa60a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9586157c0f9c12d3cfa55926ccc6c022324fa60a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca253f6ebf2c9a12f5cb2b4c9f575178d058a612"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "82424ab5213fb435207848b7f5c2a424a057bc3c",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9586157c0f9c12d3cfa55926ccc6c022324fa60a/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9586157c0f9c12d3cfa55926ccc6c022324fa60a/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=9586157c0f9c12d3cfa55926ccc6c022324fa60a",
        "patch": "@@ -68,8 +68,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n     { \"sendmany\", 5 , \"replaceable\" },\n     { \"sendmany\", 6 , \"conf_target\" },\n-    { \"deriveaddresses\", 1, \"begin\" },\n-    { \"deriveaddresses\", 2, \"end\" },\n+    { \"deriveaddresses\", 1, \"range\" },\n     { \"scantxoutset\", 1, \"scanobjects\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },"
      },
      {
        "sha": "822a0beef90b14fcc24c4ae22d5e6aa928ebef69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9586157c0f9c12d3cfa55926ccc6c022324fa60a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9586157c0f9c12d3cfa55926ccc6c022324fa60a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=9586157c0f9c12d3cfa55926ccc6c022324fa60a",
        "patch": "@@ -603,7 +603,7 @@ static const CRPCCommand commands[] =\n     { \"control\",            \"logging\",                &logging,                {\"include\", \"exclude\"}},\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} },\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n-    { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"begin\", \"end\"} },\n+    { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"range\"} },\n     { \"util\",               \"getdescriptorinfo\",      &getdescriptorinfo,      {\"descriptor\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },"
      }
    ]
  },
  {
    "sha": "dc251de6a5c421cc9234ec9c1c2002e264e5add5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzI1MWRlNmE1YzQyMWNjOTIzNGVjOWMxYzIwMDJlMjY0ZTVhZGQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-01T14:47:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-01T14:47:56Z"
      },
      "message": "Merge #15506: appveyor: fix cache issue and reduce dependencies build time\n\naeb7fbfd69 appveyor: Don't build debug libraries instead of \"build and delete\" (Chun Kuan Lee)\n\nPull request description:\n\n  - fix  the filename typo on `appveyor.yml`. Maybe it's the reason that appveyor cache does not work properly.\n  - Build release dependency libraries only. We build both release and debug on master. This could save ~5 mins.\n\nTree-SHA512: 68cdaeab98a658ebcb6159ee3f2d53376496d63b21c91291a95ad2495181de9bb12bd0fbf31672dbe72222b6368ce088b6a06592db365fc247c86bc5ba79905b",
      "tree": {
        "sha": "80c0783bc5ab216f371e3377dd4af6ededfc65cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80c0783bc5ab216f371e3377dd4af6ededfc65cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc251de6a5c421cc9234ec9c1c2002e264e5add5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJceUYcAAoJENLqSFDnUoslzDcQAIHiv53tDdJxznNGivAP8ONa\n6K5GHUQ73dXjirt58FTbyRnvpx2/nLM4a3eHiRkse4IidytnyHm4pWejVTgeCa24\nXdD1764a+tqYgxcPtgZaoVl7qR0ggFIU7CRbDk86Pe0AyNTt3ODkiiru7Z/Hevn+\npnb2w4jgzXxmt52f3dI+9N/6GRBtOUip3tMCXL92+sYA6uK3P2nGAMErFG32COVK\nMk9OUmozYayxfj8ONP73OabPX7Q4snLRztJ7fAtwtyWh7gANB375z1RFLn51pgFh\nRrQe1v2DI34QNpE+/ztPoKfPGgAUt8njOTa6Mdegjb974bcEZVWioudgafmvlE1/\ng8yKwvgTq3C5RJeti3rjeyiG+UCBPUHhZWGxhBzS7j6QJhlKD/VjPf0bR0ePNwEp\nmX7TlyF8OmzG9YVPk9BX/g6xBNXiz/wsjMvObUhnjXa8qgZilJ2606S1LiMGPgcM\nHpON/H7WND8+djH+Cle1vfjUyXVmFoi2mTgGjupAbHdCGMT3FkEJ7k0tCgrkRE5E\nhxNuTHbkrlA9yGwnLHMJH4yup2FI4dJbNxxx26zzElpzlqsQflyXyDBTCWr7iQj7\n2T7ws+ltTOeAXKCuOWE8+tyM6MuKP65qBga0DCoEFZ5ItTPIxViXT5dr8l2WHbsZ\nmEmIvgkTT7MXlQ5f1up+\n=4U4H\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEErapix8ejD/HJfoc+Sd9Mzo1JYP7CauBKisn5DJh6ECP/wEGbq8NEsYQXX\nj53DdR9reUUI8BAhDvFNbLvqToY68qSefLM9CPEgKGF/JfhWGpr5IO0TypzgAWIk\nfhZkTdFPGbDGubCqVZQI8QRceUYf8Ai5M6FFZk15iQCD3+MNLvkMjikoaHR0cHM6\nLy9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEI1ew5vreAC03Wa5\njrKVj1cI8QRceUYf8AgOnbXq0lR3jwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2Fs\nZW5kYXIuY2F0YWxsYXh5LmNvbf/wEJedjFW0ttp0iPD/VS9icdII8QRceUYf8AhC\neA3jjQQokACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3Bl\nbnRpbWVzdGFtcHMub3Jn8BClBPPe3Eais5b8Sr/zPkcoCPEEXHlGH/AIiINP4ys+\nQpwAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 80c0783bc5ab216f371e3377dd4af6ededfc65cb\nparent a6d7026a45c915794338c178b7f95d5c1f8e977f\nparent aeb7fbfd69d08639eb340d679c0451b2dbba5887\nauthor MarcoFalke <falke.marco@gmail.com> 1551451672 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551451676 -0500\n\nMerge #15506: appveyor: fix cache issue and reduce dependencies build time\n\naeb7fbfd69 appveyor: Don't build debug libraries instead of \"build and delete\" (Chun Kuan Lee)\n\nPull request description:\n\n  - fix  the filename typo on `appveyor.yml`. Maybe it's the reason that appveyor cache does not work properly.\n  - Build release dependency libraries only. We build both release and debug on master. This could save ~5 mins.\n\nTree-SHA512: 68cdaeab98a658ebcb6159ee3f2d53376496d63b21c91291a95ad2495181de9bb12bd0fbf31672dbe72222b6368ce088b6a06592db365fc247c86bc5ba79905b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc251de6a5c421cc9234ec9c1c2002e264e5add5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc251de6a5c421cc9234ec9c1c2002e264e5add5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc251de6a5c421cc9234ec9c1c2002e264e5add5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d7026a45c915794338c178b7f95d5c1f8e977f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d7026a45c915794338c178b7f95d5c1f8e977f"
      },
      {
        "sha": "aeb7fbfd69d08639eb340d679c0451b2dbba5887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb7fbfd69d08639eb340d679c0451b2dbba5887",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb7fbfd69d08639eb340d679c0451b2dbba5887"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ac39fe235b58563fe0ecb90be258c1ce9d67fc3b",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc251de6a5c421cc9234ec9c1c2002e264e5add5/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc251de6a5c421cc9234ec9c1c2002e264e5add5/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=dc251de6a5c421cc9234ec9c1c2002e264e5add5",
        "patch": "@@ -11,15 +11,15 @@ environment:\n   PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n   PYTHONUTF8: 1\n cache:\n-- C:\\tools\\vcpkg\\installed -> appveyor.yml\n-- C:\\Users\\appveyor\\clcache -> appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n+- C:\\tools\\vcpkg\\installed -> .appveyor.yml\n+- C:\\Users\\appveyor\\clcache -> .appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n install:\n - cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n # Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n # - cmd: pip install zmq\n+- cmd: echo set(VCPKG_BUILD_TYPE release) >> C:\\tools\\vcpkg\\triplets\\%PLATFORM%-windows-static.cmake\n - cmd: vcpkg remove --outdated --recurse\n - cmd: vcpkg install --triplet %PLATFORM%-windows-static %PACKAGES% > NUL\n-- cmd: del /s /q C:\\Tools\\vcpkg\\installed\\%PLATFORM%-windows-static\\debug # Remove unused debug library\n before_build:\n - ps:  clcache -M 536870912\n - cmd: python build_msvc\\msvc-autogen.py"
      }
    ]
  },
  {
    "sha": "f13ad1cae04fc1c364b7704a7434a69f0147a2ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTNhZDFjYWUwNGZjMWMzNjRiNzcwNGE3NDM0YTY5ZjAxNDdhMmFk",
    "commit": {
      "author": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-03-01T15:19:56Z"
      },
      "committer": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-03-01T15:20:57Z"
      },
      "message": "modify test for memory locked in case locking pages failed at some point",
      "tree": {
        "sha": "b2ac34ab1f8d194df9731d33d7fd9a80f7546728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2ac34ab1f8d194df9731d33d7fd9a80f7546728"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f13ad1cae04fc1c364b7704a7434a69f0147a2ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13ad1cae04fc1c364b7704a7434a69f0147a2ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f13ad1cae04fc1c364b7704a7434a69f0147a2ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13ad1cae04fc1c364b7704a7434a69f0147a2ad/comments",
    "author": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fa85ebd1c2d7579ea005300e9101fbb48805c2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa85ebd1c2d7579ea005300e9101fbb48805c2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa85ebd1c2d7579ea005300e9101fbb48805c2f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7bf8e68176b1b6120bc733704626f66e7919a626",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13ad1cae04fc1c364b7704a7434a69f0147a2ad/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13ad1cae04fc1c364b7704a7434a69f0147a2ad/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=f13ad1cae04fc1c364b7704a7434a69f0147a2ad",
        "patch": "@@ -10,6 +10,7 @@\n     assert_raises_rpc_error,\n     assert_equal,\n     assert_greater_than,\n+    assert_greater_than_or_equal,\n )\n \n from test_framework.authproxy import JSONRPCException\n@@ -27,7 +28,8 @@ def run_test(self):\n         assert_greater_than(memory['used'], 0)\n         assert_greater_than(memory['free'], 0)\n         assert_greater_than(memory['total'], 0)\n-        assert_greater_than(memory['locked'], 0)\n+        # assert_greater_than_or_equal() for locked in case locking pages failed at some point\n+        assert_greater_than_or_equal(memory['locked'], 0)\n         assert_greater_than(memory['chunks_used'], 0)\n         assert_greater_than(memory['chunks_free'], 0)\n         assert_equal(memory['used'] + memory['free'], memory['total'])"
      }
    ]
  },
  {
    "sha": "f9dbb319d26f41c2b0b56982a79639844ddf1e9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWRiYjMxOWQyNmY0MWMyYjBiNTY5ODJhNzk2Mzk4NDRkZGYxZTlk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-01T18:54:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-01T18:54:20Z"
      },
      "message": "Merge #15485: add rpc_misc.py, mv test getmemoryinfo, add test mallocinfo\n\nf13ad1cae0 modify test for memory locked in case locking pages failed at some point (Adam Jonas)\n2fa85ebd1c add rpc_misc.py, mv test getmemoryinfo, add test mallocinfo (Adam Jonas)\n\nPull request description:\n\n  Creating the `rpc_misc.py` functional test file to add space for adding tests to a file that doesn't have a lot of coverage.\n    - Removing the `getmemoryinfo()` smoke test from wallet basic rather than moving it to keep the wallet decoupled. Feel like testing for reasonable memory allocation values should suffice.\n    - Adding coverage for `mallocinfo()`. Introduced standard lib XML parser since the function exports an XML string that describes the current state of the memory-allocation implementation in the caller.\n\nTree-SHA512: ced30115622916c88d1e729969ee331272ec9f2881eb36dee4bb7331bf633a6810a57fed63a0cfaf86de698edb5162e6a035efd07c89ece1df56b69d61288072",
      "tree": {
        "sha": "1d92c204ea47ca90580298d4714690ca379aabc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d92c204ea47ca90580298d4714690ca379aabc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9dbb319d26f41c2b0b56982a79639844ddf1e9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJceX/cAAoJENLqSFDnUosl69wQAKwnXLY8Nmo2rsETFX8lu1/K\nr76UoQonKCuE8zLRLcJsqXcnxQOB19WcfhVhxrIw3ZRloITu8J6KuoAx/5rZ6oI+\nERtbWQRV80KBBJNQ3/izLBgAhtrv2Xyr+/+xJvWqsm7giPIO30pcX0pxh0mBRBGR\nPAa6nIP08V4+jab0iDyU5Hq0mD182LGRQK/i2Vkj5oodB+pfofZGUr4axsVU/ieY\n709Ls6klibjk8aAtUpgDfZR72P5tc+zG/6lxrBuB7Qu1BQ9vLvjpJAn+JIFZGIy7\nTYkilo9U4epD1kvS0eOa93vY7PezifM/PEL5cJnPOLi/uteMiDp7NbrKF815GDz8\nwEhn9KPt36bWmsAs8WMcT2v+y0Wkg+ZOeJp3MnP+FnmKtwSpNDPMJgE9+A9/6uCw\nofUcEWUtmEgI6NmxzaAFw4WokdJnUwElvMDU6zVd4BXaDRsFWneI+1lvgTBHAami\nXqbGkvrRzbyzCyL84A27y83utlGtQeNNkXEIHYPFE/z0ESjG8cwqpgVfSW6JVmDy\nM7clfE4AE1gI+1QfOM7+u7DRGyYd4xwvuCIo0GtAzqHOI5otlz+P8BZdp18RpUrH\nXmZ+LVUwELTKhkygn2xVM0z2mFbgeLPK9xLTFmeSGdZrOnK0cHGUb4sdHk7ai72F\nBXur9o5Wtsf9CCIzUQb9\n=LXYI\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJs2cs06jIZUGoQxWs6WcVw0DxKxWMVFVB4nOTSbKhHbCP/wEGBbG7cgBJeb\nKVCom16v6H8I8QRceX/e8AgTTw7JRAVUqgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQtNu5fxFpWLekFz9K\nLMdapAjxBFx5f97wCO7GLKTjsKh0AIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t//AQwQIoBk3omHDENU3SrraahgjwEMGcp7ANWxvP\nqvYfHiv8CXQI8QRceX/g8Aiwf1llVa461wCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQ2MMdE5U61R5wxt99I0AgcAjx\nBFx5f97wCN1V6tBsx51yAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 1d92c204ea47ca90580298d4714690ca379aabc5\nparent dc251de6a5c421cc9234ec9c1c2002e264e5add5\nparent f13ad1cae04fc1c364b7704a7434a69f0147a2ad\nauthor MarcoFalke <falke.marco@gmail.com> 1551466455 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551466460 -0500\n\nMerge #15485: add rpc_misc.py, mv test getmemoryinfo, add test mallocinfo\n\nf13ad1cae0 modify test for memory locked in case locking pages failed at some point (Adam Jonas)\n2fa85ebd1c add rpc_misc.py, mv test getmemoryinfo, add test mallocinfo (Adam Jonas)\n\nPull request description:\n\n  Creating the `rpc_misc.py` functional test file to add space for adding tests to a file that doesn't have a lot of coverage.\n    - Removing the `getmemoryinfo()` smoke test from wallet basic rather than moving it to keep the wallet decoupled. Feel like testing for reasonable memory allocation values should suffice.\n    - Adding coverage for `mallocinfo()`. Introduced standard lib XML parser since the function exports an XML string that describes the current state of the memory-allocation implementation in the caller.\n\nTree-SHA512: ced30115622916c88d1e729969ee331272ec9f2881eb36dee4bb7331bf633a6810a57fed63a0cfaf86de698edb5162e6a035efd07c89ece1df56b69d61288072\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9dbb319d26f41c2b0b56982a79639844ddf1e9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9dbb319d26f41c2b0b56982a79639844ddf1e9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9dbb319d26f41c2b0b56982a79639844ddf1e9d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc251de6a5c421cc9234ec9c1c2002e264e5add5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc251de6a5c421cc9234ec9c1c2002e264e5add5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc251de6a5c421cc9234ec9c1c2002e264e5add5"
      },
      {
        "sha": "f13ad1cae04fc1c364b7704a7434a69f0147a2ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13ad1cae04fc1c364b7704a7434a69f0147a2ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f13ad1cae04fc1c364b7704a7434a69f0147a2ad"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 51,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7bf8e68176b1b6120bc733704626f66e7919a626",
        "filename": "test/functional/rpc_misc.py",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9dbb319d26f41c2b0b56982a79639844ddf1e9d/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9dbb319d26f41c2b0b56982a79639844ddf1e9d/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=f9dbb319d26f41c2b0b56982a79639844ddf1e9d",
        "patch": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPC misc output.\"\"\"\n+import xml.etree.ElementTree as ET\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+)\n+\n+from test_framework.authproxy import JSONRPCException\n+\n+\n+class RpcMiscTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"test getmemoryinfo\")\n+        memory = node.getmemoryinfo()['locked']\n+        assert_greater_than(memory['used'], 0)\n+        assert_greater_than(memory['free'], 0)\n+        assert_greater_than(memory['total'], 0)\n+        # assert_greater_than_or_equal() for locked in case locking pages failed at some point\n+        assert_greater_than_or_equal(memory['locked'], 0)\n+        assert_greater_than(memory['chunks_used'], 0)\n+        assert_greater_than(memory['chunks_free'], 0)\n+        assert_equal(memory['used'] + memory['free'], memory['total'])\n+\n+        self.log.info(\"test mallocinfo\")\n+        try:\n+            mallocinfo = node.getmemoryinfo(mode=\"mallocinfo\")\n+            self.log.info('getmemoryinfo(mode=\"mallocinfo\") call succeeded')\n+            tree = ET.fromstring(mallocinfo)\n+            assert_equal(tree.tag, 'malloc')\n+        except JSONRPCException:\n+            self.log.info('getmemoryinfo(mode=\"mallocinfo\") not available')\n+            assert_raises_rpc_error(-8, 'mallocinfo is only available when compiled with glibc 2.10+', node.getmemoryinfo, mode=\"mallocinfo\")\n+\n+        assert_raises_rpc_error(-8, \"unknown mode foobar\", node.getmemoryinfo, mode=\"foobar\")\n+\n+if __name__ == '__main__':\n+    RpcMiscTest().main()"
      },
      {
        "sha": "bb9ac58e46c945609403af7b2bd82b3045819935",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9dbb319d26f41c2b0b56982a79639844ddf1e9d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9dbb319d26f41c2b0b56982a79639844ddf1e9d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f9dbb319d26f41c2b0b56982a79639844ddf1e9d",
        "patch": "@@ -110,6 +110,7 @@\n     'wallet_txn_clone.py',\n     'wallet_txn_clone.py --segwit',\n     'rpc_getchaintips.py',\n+    'rpc_misc.py',\n     'interface_rest.py',\n     'mempool_spend_coinbase.py',\n     'mempool_reorg.py',"
      },
      {
        "sha": "0477164b6bc0146ea13e4e9dbe64a864d02eec9c",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9dbb319d26f41c2b0b56982a79639844ddf1e9d/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9dbb319d26f41c2b0b56982a79639844ddf1e9d/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=f9dbb319d26f41c2b0b56982a79639844ddf1e9d",
        "patch": "@@ -11,7 +11,6 @@\n     assert_array_result,\n     assert_equal,\n     assert_fee_amount,\n-    assert_greater_than,\n     assert_raises_rpc_error,\n     connect_nodes_bi,\n     sync_blocks,\n@@ -84,13 +83,8 @@ def run_test(self):\n         assert_equal(txout['value'], 50)\n \n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n-        # Locked memory should increase to sign transactions\n-        self.log.info(\"test getmemoryinfo\")\n-        memory_before = self.nodes[0].getmemoryinfo()\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         mempool_txid = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n-        memory_after = self.nodes[0].getmemoryinfo()\n-        assert_greater_than(memory_after['locked']['used'], memory_before['locked']['used'])\n \n         self.log.info(\"test gettxout (second part)\")\n         # utxo spent in mempool should be visible if you exclude mempool"
      }
    ]
  },
  {
    "sha": "37f236acc6de08745118ac6cb4268bb5206e67c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2YyMzZhY2M2ZGUwODc0NTExOGFjNmNiNDI2OGJiNTIwNmU2N2M2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-03-02T09:04:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-03-02T09:11:35Z"
      },
      "message": "Merge #15510: [rpc] deriveaddresses: add range to CRPCConvertParam\n\n9586157c0f9c12d3cfa55926ccc6c022324fa60a [rpc] deriveaddresses: add range to CRPCConvertParam (Sjors Provoost)\n\nPull request description:\n\n  Missing from #15497\n\nTree-SHA512: 469de3f896bcd3435a480685e5257c51ba895df0311329d5e5a3cb2e1894e5358324473d998ea45221776aefe8836a7af6c4f12198a36d2d10bf6761991cfd60",
      "tree": {
        "sha": "fdf15f5fc73e9b240b8e7136e916e0caddc8adae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdf15f5fc73e9b240b8e7136e916e0caddc8adae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37f236acc6de08745118ac6cb4268bb5206e67c6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlx6SMcACgkQHkrtYphs\n0l0g5Af+Ks9bQvLGVGJamacXzdvJS0dVXqXchqNmb79CcPy/Ya09MESydN+TJMGD\nGW05o4f01PER5GRoV6gjpNGwk3CvF9PIi5FP6Cc/oswkxFfEEzXtUD63bK7CeeAU\n0zCTw4UyedczmUf1/mh7Lalg0s8mtzDh7yeGMdVo8C93W/WoaVwaTfShDxMAdxyS\nPMfEHV1i2wk1CbSqpiVDR6mxwFxvK4nRPeaQSBKMAbmQnnmXLUCm9IyF4ppDTOqY\nSGmsU+etH8Q2r0/c/Vk55lGB6ObnZRLRCgpkEeh1Nh938NCsPu6x/3WOlCTAgEo+\nb0Fokiw7WcrVuTbpaII0VQRJqEjM2Q==\n=H3eu\n-----END PGP SIGNATURE-----",
        "payload": "tree fdf15f5fc73e9b240b8e7136e916e0caddc8adae\nparent f9dbb319d26f41c2b0b56982a79639844ddf1e9d\nparent 9586157c0f9c12d3cfa55926ccc6c022324fa60a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551517450 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551517895 +0100\n\nMerge #15510: [rpc] deriveaddresses: add range to CRPCConvertParam\n\n9586157c0f9c12d3cfa55926ccc6c022324fa60a [rpc] deriveaddresses: add range to CRPCConvertParam (Sjors Provoost)\n\nPull request description:\n\n  Missing from #15497\n\nTree-SHA512: 469de3f896bcd3435a480685e5257c51ba895df0311329d5e5a3cb2e1894e5358324473d998ea45221776aefe8836a7af6c4f12198a36d2d10bf6761991cfd60\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37f236acc6de08745118ac6cb4268bb5206e67c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37f236acc6de08745118ac6cb4268bb5206e67c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37f236acc6de08745118ac6cb4268bb5206e67c6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9dbb319d26f41c2b0b56982a79639844ddf1e9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9dbb319d26f41c2b0b56982a79639844ddf1e9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9dbb319d26f41c2b0b56982a79639844ddf1e9d"
      },
      {
        "sha": "9586157c0f9c12d3cfa55926ccc6c022324fa60a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9586157c0f9c12d3cfa55926ccc6c022324fa60a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9586157c0f9c12d3cfa55926ccc6c022324fa60a"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "82424ab5213fb435207848b7f5c2a424a057bc3c",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37f236acc6de08745118ac6cb4268bb5206e67c6/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37f236acc6de08745118ac6cb4268bb5206e67c6/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=37f236acc6de08745118ac6cb4268bb5206e67c6",
        "patch": "@@ -68,8 +68,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n     { \"sendmany\", 5 , \"replaceable\" },\n     { \"sendmany\", 6 , \"conf_target\" },\n-    { \"deriveaddresses\", 1, \"begin\" },\n-    { \"deriveaddresses\", 2, \"end\" },\n+    { \"deriveaddresses\", 1, \"range\" },\n     { \"scantxoutset\", 1, \"scanobjects\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },"
      },
      {
        "sha": "822a0beef90b14fcc24c4ae22d5e6aa928ebef69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37f236acc6de08745118ac6cb4268bb5206e67c6/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37f236acc6de08745118ac6cb4268bb5206e67c6/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=37f236acc6de08745118ac6cb4268bb5206e67c6",
        "patch": "@@ -603,7 +603,7 @@ static const CRPCCommand commands[] =\n     { \"control\",            \"logging\",                &logging,                {\"include\", \"exclude\"}},\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} },\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n-    { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"begin\", \"end\"} },\n+    { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"range\"} },\n     { \"util\",               \"getdescriptorinfo\",      &getdescriptorinfo,      {\"descriptor\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },"
      }
    ]
  },
  {
    "sha": "10c7642a57b2834251448ba08b1b0c25850c4a31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGM3NjQyYTU3YjI4MzQyNTE0NDhiYTA4YjFiMGMyNTg1MGM0YTMx",
    "commit": {
      "author": {
        "name": "marcuswin",
        "email": "46599751+marcuswin@users.noreply.github.com",
        "date": "2019-02-14T10:48:53Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-03-02T09:42:33Z"
      },
      "message": "docs: Update Transifex links",
      "tree": {
        "sha": "ee9fad40aac69bf51b704fbfc3a052afaa4989ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee9fad40aac69bf51b704fbfc3a052afaa4989ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10c7642a57b2834251448ba08b1b0c25850c4a31",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlx6UBMACgkQLuufXMCV\nJsEKrhAAjgD7iN/ukspaWScByDu4CFIORZTuRMEDfETe3cyDMkfSQTL5Gt8XDEke\nOSfoe1ExPwEgr/Hs4Ea8aussC9JIPENBBDEgQNqygY63+PkLHkSttzS7Dq+GLqij\nG6XYfWj7/zvfTZrmOC1JkUgmMlj5a848OC3GkWajtZQeCWXMXJdzrgAkzH9kqnxC\nHSSa70KlS55HYS6WR9qsEP7fNly6INFswOvP5H6mjVZqe1bRjQN2iQPngL2QEHS/\nGrWeGIoRUub3X4lJA5pXpe3TIaPmP3k9CxtC17MEBIkmRPM7TRR5MSotFKVVO3Wu\nWfzC6q63n78LwaWucydWSSuH2YJnfkL3p2ELt6MU9eVChX0WRYT3o87z9keZhN+R\nT3bTaZVvUyOMHTLbQeX7Zr8WSnJ5BLFZvAhI7GmmIOFiGofrj9qSlrcbbNKiCF+F\nwm5mc3168QuWhOxt/lptaqv5wIkUbm6TN1Idjr0K7zLRYeJl5fiao7uwNeAlc1Mf\nDVOLmUAJbaEGbOin8Ff/6iJ30TkH9GXGLi9dB5XQYI2s+xufw0mGhsbzo46yWkfL\nq4BTymaowEwhM5GAew0T6I7vNdTWkbqKbxQuPdjJ6fUAZfI1SwqL1Wiz+QDF/dx+\nKOxJe4tiwb81guRiYQoMsvT0yrQW8e8hyZeYei1Dbd16PH0py4g=\n=0hOa\n-----END PGP SIGNATURE-----",
        "payload": "tree ee9fad40aac69bf51b704fbfc3a052afaa4989ca\nparent 37f236acc6de08745118ac6cb4268bb5206e67c6\nauthor marcuswin <46599751+marcuswin@users.noreply.github.com> 1550141333 +0300\ncommitter fanquake <fanquake@gmail.com> 1551519753 +0800\n\ndocs: Update Transifex links\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c7642a57b2834251448ba08b1b0c25850c4a31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10c7642a57b2834251448ba08b1b0c25850c4a31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c7642a57b2834251448ba08b1b0c25850c4a31/comments",
    "author": {
      "login": "marcuswin",
      "id": 46599751,
      "node_id": "MDQ6VXNlcjQ2NTk5NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/46599751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcuswin",
      "html_url": "https://github.com/marcuswin",
      "followers_url": "https://api.github.com/users/marcuswin/followers",
      "following_url": "https://api.github.com/users/marcuswin/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcuswin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcuswin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcuswin/subscriptions",
      "organizations_url": "https://api.github.com/users/marcuswin/orgs",
      "repos_url": "https://api.github.com/users/marcuswin/repos",
      "events_url": "https://api.github.com/users/marcuswin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcuswin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37f236acc6de08745118ac6cb4268bb5206e67c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37f236acc6de08745118ac6cb4268bb5206e67c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37f236acc6de08745118ac6cb4268bb5206e67c6"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "db79043665c820200816ab10350cb2a251b85cd2",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c7642a57b2834251448ba08b1b0c25850c4a31/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c7642a57b2834251448ba08b1b0c25850c4a31/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=10c7642a57b2834251448ba08b1b0c25850c4a31",
        "patch": "@@ -66,7 +66,7 @@ Translations\n ------------\n \n Changes to translations as well as new translations can be submitted to\n-[Bitcoin Core's Transifex page](https://www.transifex.com/projects/p/bitcoin/).\n+[Bitcoin Core's Transifex page](https://www.transifex.com/bitcoin/bitcoin/).\n \n Translations are periodically pulled from Transifex and merged into the git repository. See the\n [translation process](doc/translation_process.md) for details on how this works."
      },
      {
        "sha": "2662eea8fc1261e53fe7df23e3c3d1f4b8587b05",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c7642a57b2834251448ba08b1b0c25850c4a31/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c7642a57b2834251448ba08b1b0c25850c4a31/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=10c7642a57b2834251448ba08b1b0c25850c4a31",
        "patch": "@@ -144,7 +144,7 @@ For example, to describe a function use:\n  */\n bool function(int arg1, const char *arg2)\n ```\n-A complete list of `@xxx` commands can be found at http://www.stack.nl/~dimitri/doxygen/manual/commands.html.\n+A complete list of `@xxx` commands can be found at http://www.doxygen.nl/manual/commands.html.\n As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this case), you don't\n *need* to provide any commands for a comment to be valid; just a description text is fine.\n \n@@ -185,7 +185,7 @@ Not OK (used plenty in the current source, but not picked up):\n //\n ```\n \n-A full list of comment syntaxes picked up by Doxygen can be found at https://www.stack.nl/~dimitri/doxygen/manual/docblocks.html,\n+A full list of comment syntaxes picked up by Doxygen can be found at http://www.doxygen.nl/manual/docblocks.html,\n but the above styles are favored.\n \n Documentation can be generated with `make docs` and cleaned up with `make clean-docs`. The resulting files are located in `doc/doxygen/html`; open `index.html` to view the homepage."
      },
      {
        "sha": "03b3121ecb21c6bbdd07008e287cb3e47115f8b8",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c7642a57b2834251448ba08b1b0c25850c4a31/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c7642a57b2834251448ba08b1b0c25850c4a31/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=10c7642a57b2834251448ba08b1b0c25850c4a31",
        "patch": "@@ -380,4 +380,4 @@ Credits\n Thanks to everyone who directly contributed to this release:\n \n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "b9a10b65271be4c0565eedb1d88b04fab43665c5",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c7642a57b2834251448ba08b1b0c25850c4a31/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c7642a57b2834251448ba08b1b0c25850c4a31/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=10c7642a57b2834251448ba08b1b0c25850c4a31",
        "patch": "@@ -8,7 +8,7 @@ Transifex is setup to monitor the GitHub repo for updates, and when code contain\n \n Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n-See the [Transifex Bitcoin project](https://www.transifex.com/projects/p/bitcoin/) to assist in translations. You should also join the translation mailing list for announcements - see details below.\n+See the [Transifex Bitcoin project](https://www.transifex.com/bitcoin/bitcoin/) to assist in translations. You should also join the translation mailing list for announcements - see details below.\n \n ### Writing code with translations\n We use automated scripts to help extract translations in both Qt, and non-Qt source files. It is rarely necessary to manually edit the files in `src/qt/locale/`. The translation source files must adhere to the following format:\n@@ -43,7 +43,7 @@ git commit\n ### Creating a Transifex account\n Visit the [Transifex Signup](https://www.transifex.com/signup/) page to create an account. Take note of your username and password, as they will be required to configure the command-line tool.\n \n-You can find the Bitcoin translation project at [https://www.transifex.com/projects/p/bitcoin/](https://www.transifex.com/projects/p/bitcoin/).\n+You can find the Bitcoin translation project at [https://www.transifex.com/bitcoin/bitcoin/](https://www.transifex.com/bitcoin/bitcoin/).\n \n ### Installing the Transifex client command-line tool\n The client is used to fetch updated translations. If you are having problems, or need more details, see [https://docs.transifex.com/client/installing-the-client](https://docs.transifex.com/client/installing-the-client)"
      }
    ]
  },
  {
    "sha": "c9985c84f9c1d493320283bffc5f1ea99e0d0014",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTk4NWM4NGY5YzFkNDkzMzIwMjgzYmZmYzVmMWVhOTllMGQwMDE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-03-02T13:28:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-03-02T13:28:48Z"
      },
      "message": "build: Bump version to 0.18.99\n\nNow that 0.18 branch has been split off, master is 0.18.99 (pre-0.19).\n\nAlso clean out release notes.\n\nTree-SHA512: ed5ca8bed37027aa852ba16f3f1e7fcd4ebaf74fa77a2a265cb33a9c710511019c577fae7a3b1e33259e245274d5cd4601d4774948396d0cf299b38ba634346a",
      "tree": {
        "sha": "f706b052b416dcf37eeed72e4df7bf05ceeda2de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f706b052b416dcf37eeed72e4df7bf05ceeda2de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9985c84f9c1d493320283bffc5f1ea99e0d0014",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlx6hRAACgkQHkrtYphs\n0l2Wuwf9E9JyM6xbQ2bVBWzhF7oO9Y4IxXCdaVwylHdtw1SLkv+kuIvjn1r4mLXT\nyXecxCXreG+DqN721/olDBW/Pe2R990IFNYbkWcJ4WQbZQUwrP8/scSLywYAqkyk\nJjRRtJeXqziijQujcJ5t/c16Y/oDfnR41qEaURWJYtPpidq12akPW8OHvgla1AKD\nrqT35Imku5gAUARn7Fswq038j12XGW9eA6BfCNJ4EJ/1VN6HKerym5uU1pABv2wm\n/lMBO0dbMeh7Qrh1lNuyPG6dy/49IQ9Jdae8JA2uDh0fI7uUO2rIQ0RRFaD+j+lL\nyg6PxXeTU0aPMVQjWFGNpDDhAuomyg==\n=L7pG\n-----END PGP SIGNATURE-----",
        "payload": "tree f706b052b416dcf37eeed72e4df7bf05ceeda2de\nparent 37f236acc6de08745118ac6cb4268bb5206e67c6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551533289 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551533328 +0100\n\nbuild: Bump version to 0.18.99\n\nNow that 0.18 branch has been split off, master is 0.18.99 (pre-0.19).\n\nAlso clean out release notes.\n\nTree-SHA512: ed5ca8bed37027aa852ba16f3f1e7fcd4ebaf74fa77a2a265cb33a9c710511019c577fae7a3b1e33259e245274d5cd4601d4774948396d0cf299b38ba634346a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9985c84f9c1d493320283bffc5f1ea99e0d0014",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9985c84f9c1d493320283bffc5f1ea99e0d0014",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9985c84f9c1d493320283bffc5f1ea99e0d0014/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37f236acc6de08745118ac6cb4268bb5206e67c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37f236acc6de08745118ac6cb4268bb5206e67c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37f236acc6de08745118ac6cb4268bb5206e67c6"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 4,
      "deletions": 302
    },
    "files": [
      {
        "sha": "984c595eadc4b29411be86ac08467af295715d42",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9985c84f9c1d493320283bffc5f1ea99e0d0014/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9985c84f9c1d493320283bffc5f1ea99e0d0014/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c9985c84f9c1d493320283bffc5f1ea99e0d0014",
        "patch": "@@ -1,7 +1,7 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 17)\n+define(_CLIENT_VERSION_MINOR, 18)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_RC, 0)"
      },
      {
        "sha": "51094ebcb80b04cd6e7166c24bef24561f34315f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 301,
        "changes": 304,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9985c84f9c1d493320283bffc5f1ea99e0d0014/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9985c84f9c1d493320283bffc5f1ea99e0d0014/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=c9985c84f9c1d493320283bffc5f1ea99e0d0014",
        "patch": "@@ -66,313 +66,15 @@ platform.\n Notable changes\n ===============\n \n-Mining\n-------\n-\n-- Calls to `getblocktemplate` will fail if the segwit rule is not specified.\n-  Calling `getblocktemplate` without segwit specified is almost certainly\n-  a misconfiguration since doing so results in lower rewards for the miner.\n-  Failed calls will produce an error message describing how to enable the\n-  segwit rule.\n-\n-Configuration option changes\n-----------------------------\n-\n-- A warning is printed if an unrecognized section name is used in the\n-  configuration file.  Recognized sections are `[test]`, `[main]`, and\n-  `[regtest]`.\n-\n-- Four new options are available for configuring the maximum number of\n-  messages that ZMQ will queue in memory (the \"high water mark\") before\n-  dropping additional messages.  The default value is 1,000, the same as\n-  was used for previous releases.  See the [ZMQ\n-  documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/zmq.md#usage)\n-  for details.\n-\n-- The `enablebip61` option (introduced in Bitcoin Core 0.17.0) is\n-  used to toggle sending of BIP 61 reject messages. Reject messages have no use\n-  case on the P2P network and are only logged for debugging by most network\n-  nodes. The option will now by default be off for improved privacy and security\n-  as well as reduced upload usage. The option can explicitly be turned on for\n-  local-network debugging purposes.\n-\n-- The `rpcallowip` option can no longer be used to automatically listen\n-  on all network interfaces.  Instead, the `rpcbind` parameter must also\n-  be used to specify the IP addresses to listen on.  Listening for RPC\n-  commands over a public network connection is insecure and should be\n-  disabled, so a warning is now printed if a user selects such a\n-  configuration.  If you need to expose RPC in order to use a tool\n-  like Docker, ensure you only bind RPC to your localhost, e.g. `docker\n-  run [...] -p 127.0.0.1:8332:8332` (this is an extra `:8332` over the\n-  normal Docker port specification).\n-\n-- The `rpcpassword` option now causes a startup error if the password\n-  set in the configuration file contains a hash character (#), as it's\n-  ambiguous whether the hash character is meant for the password or as a\n-  comment.\n-\n-- The `whitelistforcerelay` option is used to relay transactions from\n-  whitelisted peers even when not accepted to the mempool. This option now\n-  defaults to being off, so that changes in policy and disconnect/ban behavior\n-  will not cause a node that is whitelisting another to be dropped by peers.\n-  Users can still explicitly enable this behavior with the command line option\n-  (and may want to consider [contacting](https://bitcoincore.org/en/contact/)\n-  the Bitcoin Core project to let us know about their\n-  use-case, as this feature could be deprecated in the future).\n-\n-Documentation\n--------------\n-\n-- A new short\n-  [document](https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md)\n-  about the JSON-RPC interface describes cases where the results of an\n-  RPC might contain inconsistencies between data sourced from different\n-  subsystems, such as wallet state and mempool state.  A note is added\n-  to the [REST interface documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md)\n-  indicating that the same rules apply.\n-\n-- Further information is added to the [JSON-RPC\n-  documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md)\n-  about how to secure this interface.\n-\n-- A new [document](https://github.com/bitcoin/bitcoin/blob/master/doc/bitcoin-conf.md)\n-  about the `bitcoin.conf` file describes how to use it to configure\n-  Bitcoin Core.\n-\n-- A new document introduces Bitcoin Core's BIP174\n-  [Partially-Signed Bitcoin Transactions (PSBT)](https://github.com/bitcoin/bitcoin/blob/master/doc/psbt.md)\n-  interface, which is used to allow multiple programs to collaboratively\n-  work to create, sign, and broadcast new transactions.  This is useful\n-  for offline (cold storage) wallets, multisig wallets, coinjoin\n-  implementations, and many other cases where two or more programs need\n-  to interact to generate a complete transaction.\n-\n-- The [output script descriptor](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)\n-  documentation has been updated with information about new features in\n-  this still-developing language for describing the output scripts that\n-  a wallet or other program wants to receive notifications for, such as\n-  which addresses it wants to know received payments.  The language is\n-  currently used in the `scantxoutset` RPC and is expected to be adapted\n-  to other RPCs and to the underlying wallet structure.\n-\n-Build system changes\n---------------------\n-\n-- A new `--disable-bip70` option may be passed to `./configure` to\n-  prevent Bitcoin-Qt from being built with support for the BIP70 payment\n-  protocol or from linking libssl.  As the payment protocol has exposed\n-  Bitcoin Core to libssl vulnerabilities in the past, builders who don't\n-  need BIP70 support are encouraged to use this option to reduce their\n-  exposure to future vulnerabilities.\n-\n-Deprecated or removed RPCs\n---------------------------\n-\n-- The `signrawtransaction` RPC is removed after being deprecated and\n-  hidden behind a special configuration option in version 0.17.0.\n-\n-- The 'account' API is removed after being deprecated in v0.17.  The\n-  'label' API was introduced in v0.17 as a replacement for accounts.\n-  See the [release notes from v0.17](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md#label-and-account-apis-for-wallet)\n-  for a full description of the changes from the 'account' API to the\n-  'label' API.\n-\n-- The `addwitnessaddress` RPC is removed after being deprecated in\n-  version 0.13.0.\n-\n-- The wallet's `generate` RPC method is deprecated and will be fully\n-  removed in a subsequent major version.  This RPC is only used for\n-  testing, but its implementation reached across multiple subsystems\n-  (wallet and mining), so it is being deprecated to simplify the\n-  wallet-node interface.  Projects that are using `generate` for testing\n-  purposes should transition to using the `generatetoaddress` RPC, which\n-  does not require or use the wallet component. Calling\n-  `generatetoaddress` with an address returned by the `getnewaddress`\n-  RPC gives the same functionality as the old `generate` RPC.  To\n-  continue using `generate` in this version, restart bitcoind with the\n-  `-deprecatedrpc=generate` configuration option.\n-\n-New RPCs\n---------\n-\n-- The `getnodeaddresses` RPC returns peer addresses known to this\n-  node. It may be used to find nodes to connect to without using a DNS\n-  seeder.\n-\n-- The `listwalletdir` RPC returns a list of wallets in the wallet\n-  directory (either the default wallet directory or the directory\n-  configured by the `-walletdir` parameter).\n-\n-- The `getrpcinfo` returns runtime details of the RPC server. At the\n-  moment, it returns an array of the currently active commands and how\n-  long they've been running.\n-\n-Updated RPCs\n-------------\n-\n-Note: some low-level RPC changes mainly useful for testing are described\n-in the Low-level Changes section below.\n-\n-- The `getpeerinfo` RPC now returns an additional `minfeefilter` field\n-  set to the peer's BIP133 fee filter.  You can use this to detect that\n-  you have peers that are willing to accept transactions below the\n-  default minimum relay fee.\n-\n-- The mempool RPCs, such as `getrawmempool` with `verbose=true`, now\n-  return an additional \"bip125-replaceable\" value indicating whether the\n-  transaction (or its unconfirmed ancestors) opts-in to asking nodes and\n-  miners to replace it with a higher-feerate transaction spending any of\n-  the same inputs.\n-\n-- The `settxfee` RPC previously silently ignored attempts to set the fee\n-  below the allowed minimums.  It now prints a warning.  The special\n-  value of \"0\" may still be used to request the minimum value.\n-\n-- The `getaddressinfo` RPC now provides an `ischange` field indicating\n-  whether the wallet used the address in a change output.\n-\n-- The `importmulti` RPC has been updated to support P2WSH, P2WPKH,\n-  P2SH-P2WPKH, and P2SH-P2WSH. Requests for P2WSH and P2SH-P2WSH accept\n-  an additional `witnessscript` parameter.\n-\n-- The `importmulti` RPC now returns an additional `warnings` field for\n-  each request with an array of strings explaining when fields are being\n-  ignored or are inconsistent, if there are any.\n-\n-- The `getaddressinfo` RPC now returns an additional `solvable` boolean\n-  field when Bitcoin Core knows enough about the address's scriptPubKey,\n-  optional redeemScript, and optional witnessScript in order for the\n-  wallet to be able to generate an unsigned input spending funds sent to\n-  that address.\n-\n-- The `getaddressinfo`, `listunspent`, and `scantxoutset` RPCs now\n-  return an additional `desc` field that contains an output descriptor\n-  containing all key paths and signing information for the address\n-  (except for the private key).  The `desc` field is only returned for\n-  `getaddressinfo` and `listunspent` when the address is solvable.\n-\n-- The `importprivkey` RPC will preserve previously-set labels for\n-  addresses or public keys corresponding to the private key being\n-  imported.  For example, if you imported a watch-only address with the\n-  label \"cold wallet\" in earlier releases of Bitcoin Core, subsequently\n-  importing the private key would default to resetting the address's\n-  label to the default empty-string label (\"\").  In this release, the\n-  previous label of \"cold wallet\" will be retained.  If you optionally\n-  specify any label besides the default when calling `importprivkey`,\n-  the new label will be applied to the address.\n-\n-- See the [Mining](#mining) section for changes to `getblocktemplate`.\n-\n-- The `getmininginfo` RPC now omits `currentblockweight` and `currentblocktx`\n-  when a block was never assembled via RPC on this node.\n-\n-- The `getrawtransaction` RPC & REST endpoints no longer check the\n-  unspent UTXO set for a transaction. The remaining behaviors are as\n-  follows: 1. If a blockhash is provided, check the corresponding block.\n-  2. If no blockhash is provided, check the mempool. 3. If no blockhash\n-  is provided but txindex is enabled, also check txindex.\n-\n-- The `unloadwallet` RPC is now synchronous, meaning it will not return\n-  until the wallet is fully unloaded.\n-\n-REST changes\n+Example item\n ------------\n \n-- A new `/rest/blockhashbyheight/` endpoint is added for fetching the\n-  hash of the block in the current best blockchain based on its height\n-  (how many blocks it is after the Genesis Block).\n-\n-Graphical User Interface (GUI)\n-------------------------------\n-\n-- A new Window menu is added alongside the existing File, Settings, and\n-  Help menus.  Several items from the other menus that opened new\n-  windows have been moved to this new Window menu.\n-\n-- In the Send tab, the checkbox for \"pay only the required fee\"\n-  has been removed.  Instead, the user can simply decrease the value in\n-  the Custom Feerate field all the way down to the node's configured\n-  minimum relay fee.\n-\n-- In the Overview tab, the watch-only balance will be the only\n-  balance shown if the wallet was created using the `createwallet` RPC\n-  and the `disable_private_keys` parameter was set to true.\n-\n-- The launch-on-startup option is no longer available on macOS if\n-  compiled with macosx min version greater than 10.11 (use\n-  CXXFLAGS=\"-mmacosx-version-min=10.11\"\n-  CFLAGS=\"-mmacosx-version-min=10.11\" for setting the deployment\n-  sdk version)\n-\n-Tools\n-----\n-\n-- A new `bitcoin-wallet` tool is now distributed alongside Bitcoin\n-  Core's other executables.  Without needing to use any RPCs, this tool\n-  can currently create a new wallet file or display some basic\n-  information about an existing wallet, such as whether the wallet is\n-  encrypted, whether it uses an HD seed, how many transactions it\n-  contains, and how many address book entries it has.\n \n Low-level changes\n =================\n \n-RPC\n----\n-\n-- The `submitblock` RPC previously returned the reason a rejected block\n-  was invalid the first time it processed that block but returned a\n-  generic \"duplicate\" rejection message on subsequent occasions it\n-  processed the same block.  It now always returns the fundamental\n-  reason for rejecting an invalid block and only returns \"duplicate\" for\n-  valid blocks it has already accepted.\n-\n-- A new `submitheader` RPC allows submitting block headers independently\n-  from their block.  This is likely only useful for testing.\n-\n-Configuration\n--------------\n-\n-- The `-usehd` configuration option was removed in version 0.16. From\n-  that version onwards, all new wallets created are hierarchical\n-  deterministic wallets. This release makes specifying `-usehd` an\n-  invalid configuration option.\n-\n-Network\n--------\n-\n-- This release allows peers that your node automatically disconnected\n-  for misbehavior (e.g. sending invalid data) to reconnect to your node\n-  if you have unused incoming connection slots.  If your slots fill up,\n-  a misbehaving node will be disconnected to make room for nodes without\n-  a history of problems (unless the misbehaving node helps your node in\n-  some other way, such as by connecting to a part of the Internet from\n-  which you don't have many other peers).  Previously, Bitcoin Core\n-  banned the IP addresses of misbehaving peers for a period of time\n-  (default of 1 day); this was easily circumvented by attackers with\n-  multiple IP addresses.  If you manually ban a peer, such as by using\n-  the `setban` RPC, all connections from that peer will still be\n-  rejected.\n-\n-Security\n---------\n-\n-- This release changes the Random Number Generator (RNG) used from\n-  OpenSSL to Bitcoin Core's own implementation, although entropy\n-  gathered by Bitcoin Core is fed out to OpenSSL and then read back in\n-  when the program needs strong randomness.  This moves Bitcoin Core a\n-  little closer to no longer needing to depend on OpenSSL, a dependency\n-  that has caused security issues in the past.\n-\n-Changes for particular platforms\n---------------------------------\n-\n-- On macOS, Bitcoin Core now opts out of application CPU throttling\n-  (\"app nap\") during initial blockchain download, when catching up from\n-  over 100 blocks behind the current chain tip, or when reindexing chain\n-  data.  This helps prevent these operations from taking an excessively\n-  long time because the operating system is attempting to conserve\n-  power.\n+Example item\n+------------\n \n Credits\n ======="
      }
    ]
  },
  {
    "sha": "e47d8a1b7c8b6471ced5770668202db90502405a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDdkOGExYjdjOGI2NDcxY2VkNTc3MDY2ODIwMmRiOTA1MDI0MDVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:23:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:23:50Z"
      },
      "message": "Merge #15514: docs: Update Transifex links\n\n10c7642a57 docs: Update Transifex links (marcuswin)\n\nPull request description:\n\n  Rebased, finished and squashed #15406.\n\nTree-SHA512: 118f3d4701eeba998de35ffe7664bf82336e0db2c6062b050f8b91d035e4b2537b8fc790a85cfe28d90b736b6c596695d40c003cb158a22ed9e9acf711cda5cc",
      "tree": {
        "sha": "a03c90c08dba2424e4ec10944a3638e4711d5e38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a03c90c08dba2424e4ec10944a3638e4711d5e38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e47d8a1b7c8b6471ced5770668202db90502405a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcepH2AAoJENLqSFDnUoslHocP/RbB/USQPtdrP7xgV8Zi6mW6\nU2IxkrAy5X68mZsHA8+ovWgyaHn2rln4zoTOtrKpuE2jHj8vZLs22NdbRQZh0HnE\nS+u2yfAoTQWW/16LaXs3SWQ/vvZTCZk8Yn8OLLvhxeXwqp1E56JJPUwRs/DLpv2J\n8wTlbcV6S7LmkoMVmRbOy+FdR47vaGKV87HkZ4c3CHhQ7EpfR7YVtNTGMD6cjwGC\nMcshI6yz37JPtenMMBdoKQN+JWkzh5jAitgUINXGIpIkucxBAb8FqfBbqUYs0pCg\npTjTEu3eW8qGJQYqrOpy3nJMd2/CjdtOW5tSeYQoXC9MU+WyUVmL191dOQaYRUXS\n+oSOxn2iFf+j/MaMEDfcpltth1g2QVO+MKdJ1EXzmJpXqMCgR+kKMowh/uT1rHAW\nLHSSd+OvDeHFy1ImVy7xZkiKJO/UrVxzeykdeoj/bPC1fHtjx8l4y3qAjlh1J067\nG3I5L+LwK3nfKlex7i9OdOveFKIXHv1XspCg+DhHDxFn7HTtJWvEEqCdC4mLI4/6\nBU90MoiyyXlXYmnf9CORMIRqEeY4xsry+SG3mF1KrsXJJoIDHKcVc1t3mljnQa60\nR+pi/9F1eHdP2WbuA2oHPJhIjksKpBwY+/1/3Szv0HeZAiZE5/aFCYL/vAcXXOcp\nGEtqXxlaXT8rIfALCpoS\n=FyXQ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIC8AszWtQYqcNKR/qxQUzGFWAY3hKpb0Rnwwy3N3N1d4CP/wEAr7gy9iCAbZ\nZVk8ds1JPhII8BC/6Yz1fXPRZM+s5uIA8w1OCPEEXHqR+vAIFhzsRBMUkgwAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BBDABX5x6j7DCivw/WAJmuACPEEXHqR+fAI0f7DeHJ2Q6AAg9/jDS75DI4jImh0\ndHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23/8BCWrF/CSWawEo0PHuDy\ndTGpCPEEXHqR+fAIImpDtfkNMEkAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5j\nYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEMcp1Gfuosk0kyvjNDePkZQI8QRc\nepH48AiQcTTTD/WukQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a03c90c08dba2424e4ec10944a3638e4711d5e38\nparent c9985c84f9c1d493320283bffc5f1ea99e0d0014\nparent 10c7642a57b2834251448ba08b1b0c25850c4a31\nauthor MarcoFalke <falke.marco@gmail.com> 1551536621 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551536630 -0500\n\nMerge #15514: docs: Update Transifex links\n\n10c7642a57 docs: Update Transifex links (marcuswin)\n\nPull request description:\n\n  Rebased, finished and squashed #15406.\n\nTree-SHA512: 118f3d4701eeba998de35ffe7664bf82336e0db2c6062b050f8b91d035e4b2537b8fc790a85cfe28d90b736b6c596695d40c003cb158a22ed9e9acf711cda5cc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47d8a1b7c8b6471ced5770668202db90502405a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e47d8a1b7c8b6471ced5770668202db90502405a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47d8a1b7c8b6471ced5770668202db90502405a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9985c84f9c1d493320283bffc5f1ea99e0d0014",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9985c84f9c1d493320283bffc5f1ea99e0d0014",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9985c84f9c1d493320283bffc5f1ea99e0d0014"
      },
      {
        "sha": "10c7642a57b2834251448ba08b1b0c25850c4a31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c7642a57b2834251448ba08b1b0c25850c4a31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10c7642a57b2834251448ba08b1b0c25850c4a31"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "db79043665c820200816ab10350cb2a251b85cd2",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47d8a1b7c8b6471ced5770668202db90502405a/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47d8a1b7c8b6471ced5770668202db90502405a/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=e47d8a1b7c8b6471ced5770668202db90502405a",
        "patch": "@@ -66,7 +66,7 @@ Translations\n ------------\n \n Changes to translations as well as new translations can be submitted to\n-[Bitcoin Core's Transifex page](https://www.transifex.com/projects/p/bitcoin/).\n+[Bitcoin Core's Transifex page](https://www.transifex.com/bitcoin/bitcoin/).\n \n Translations are periodically pulled from Transifex and merged into the git repository. See the\n [translation process](doc/translation_process.md) for details on how this works."
      },
      {
        "sha": "2662eea8fc1261e53fe7df23e3c3d1f4b8587b05",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47d8a1b7c8b6471ced5770668202db90502405a/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47d8a1b7c8b6471ced5770668202db90502405a/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=e47d8a1b7c8b6471ced5770668202db90502405a",
        "patch": "@@ -144,7 +144,7 @@ For example, to describe a function use:\n  */\n bool function(int arg1, const char *arg2)\n ```\n-A complete list of `@xxx` commands can be found at http://www.stack.nl/~dimitri/doxygen/manual/commands.html.\n+A complete list of `@xxx` commands can be found at http://www.doxygen.nl/manual/commands.html.\n As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this case), you don't\n *need* to provide any commands for a comment to be valid; just a description text is fine.\n \n@@ -185,7 +185,7 @@ Not OK (used plenty in the current source, but not picked up):\n //\n ```\n \n-A full list of comment syntaxes picked up by Doxygen can be found at https://www.stack.nl/~dimitri/doxygen/manual/docblocks.html,\n+A full list of comment syntaxes picked up by Doxygen can be found at http://www.doxygen.nl/manual/docblocks.html,\n but the above styles are favored.\n \n Documentation can be generated with `make docs` and cleaned up with `make clean-docs`. The resulting files are located in `doc/doxygen/html`; open `index.html` to view the homepage."
      },
      {
        "sha": "ebcdcda30667d39f25f13baa8ba0dd3045ab9bf1",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47d8a1b7c8b6471ced5770668202db90502405a/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47d8a1b7c8b6471ced5770668202db90502405a/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=e47d8a1b7c8b6471ced5770668202db90502405a",
        "patch": "@@ -82,4 +82,4 @@ Credits\n Thanks to everyone who directly contributed to this release:\n \n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/bitcoin/bitcoin/)."
      },
      {
        "sha": "b9a10b65271be4c0565eedb1d88b04fab43665c5",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47d8a1b7c8b6471ced5770668202db90502405a/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47d8a1b7c8b6471ced5770668202db90502405a/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=e47d8a1b7c8b6471ced5770668202db90502405a",
        "patch": "@@ -8,7 +8,7 @@ Transifex is setup to monitor the GitHub repo for updates, and when code contain\n \n Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n-See the [Transifex Bitcoin project](https://www.transifex.com/projects/p/bitcoin/) to assist in translations. You should also join the translation mailing list for announcements - see details below.\n+See the [Transifex Bitcoin project](https://www.transifex.com/bitcoin/bitcoin/) to assist in translations. You should also join the translation mailing list for announcements - see details below.\n \n ### Writing code with translations\n We use automated scripts to help extract translations in both Qt, and non-Qt source files. It is rarely necessary to manually edit the files in `src/qt/locale/`. The translation source files must adhere to the following format:\n@@ -43,7 +43,7 @@ git commit\n ### Creating a Transifex account\n Visit the [Transifex Signup](https://www.transifex.com/signup/) page to create an account. Take note of your username and password, as they will be required to configure the command-line tool.\n \n-You can find the Bitcoin translation project at [https://www.transifex.com/projects/p/bitcoin/](https://www.transifex.com/projects/p/bitcoin/).\n+You can find the Bitcoin translation project at [https://www.transifex.com/bitcoin/bitcoin/](https://www.transifex.com/bitcoin/bitcoin/).\n \n ### Installing the Transifex client command-line tool\n The client is used to fetch updated translations. If you are having problems, or need more details, see [https://docs.transifex.com/client/installing-the-client](https://docs.transifex.com/client/installing-the-client)"
      }
    ]
  },
  {
    "sha": "9e3122de054a377089a9ea226acf20274b8f7974",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTMxMjJkZTA1NGEzNzcwODlhOWVhMjI2YWNmMjAyNzRiOGY3OTc0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:43:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:43:39Z"
      },
      "message": "Merge #15492: [rpc] remove deprecated generate method\n\n07cae5287c [wallet] remove unused GetScriptForMining (Sjors Provoost)\n8bb3e4c487 [rpc] remove deprecated generate method (Sjors Provoost)\n\nPull request description:\n\n  As announced in v0.18, the wallet generate rpc method is deprecated and will be fully removed in v0.19.\n\n  Clients should transition to using the node rpc method `generatetoaddress`.\n\nTree-SHA512: 9e5e913b59f3e18440b2b7b356124c7b87ad19f81a1ab6ada06a6c396b84e734895465f569296f1ba8c12abf74863bab5fd77765c9e806c239713aa83a59485f",
      "tree": {
        "sha": "1333f8726d7a5eddb1e8714a069d4c44aa6b5ea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1333f8726d7a5eddb1e8714a069d4c44aa6b5ea2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e3122de054a377089a9ea226acf20274b8f7974",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcepacAAoJENLqSFDnUoslTD4P/ij0qBIpdlqZw+O/1EdEr4Qy\nnxaA0vzfr5gC0twcuMuiahAhHXFxy8jgaYpR9nWF+BKbbJ1Vgcz30ObxiQfMe+KM\nWsKzww/N5H2+YqTIcY2GRtIPBdECgByAj/waS36sWP69kUz56MjMZCxxH7QZ0ql4\nvcIAXyRmSKTn1NVItr0iaRBdrvjGeWhDluK3gIbLbhBrnAOHx2UUtzktaCqHRtAx\n3Rzfaj8gzGiIo6wG+1saXpSZYfLYCp/LnKwJPnRnthKlHchgxldQLEQIqtEIUAd1\nNmfWZTxd01t4Ws40g8rSlAcEjR1ai90tjeioiY1/8P9O8bcv+hgMkV8EW4f816oe\n4nJ2f03M8fT9j/fxgMA5dhbx9XHBicT3elwK2+fWaV3AC6YcCx512BSx4GiglBwx\nSyFYd+ZKAhVNkNzjMmcHaxz8NhXdhHLQl3/ZKTgWwB9kxu3YFETFzUdUtiX2tZkF\nVvlnaAU7iPhR0kta/ef3010P+TYfiHLAQqxjx/rxPfsrkbzYxL8HnDVW9MAMjx4C\nPqueNrfhuVFoHue+Eb583B4VmWWbs5oXjRykxbB5SNwIEWQi6Ta1zD6+iIrNJBH4\nOL6Vm63EFXbG8odWt+wU1FnnFjxOT7IkiZ2Dtw7RmzwA4AZ+u86RxQjlEMxep5Y/\n09yXgjopr4Ua221qrvV+\n=A9wD\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMtGXMVcbCN6pWEnJZGcwBHJ7C6gU2R8aICMfyCMJ6prCP/wEAbhstvgE85C\nBlRqp7jR34cI8QRcepae8Aip1h5nUfDT1ACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEDxZLW5ic9a1dJieP0de\nolEI8QRcepae8AizNiX1SNR59ACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQU8I0FC+ZaCRRau6Jdtqx1wjw\nEMEGB7bF7AIKFmmLRErvSJYI8QRcepaf8Aiq9ZIUnDJhfACD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQ9hqYWWW0V3MT\nxpEJYgMYGwjxBFx6lp3wCKsoeiT6hiSeAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 1333f8726d7a5eddb1e8714a069d4c44aa6b5ea2\nparent e47d8a1b7c8b6471ced5770668202db90502405a\nparent 07cae5287c4409e9e597b891899403220905881d\nauthor MarcoFalke <falke.marco@gmail.com> 1551537812 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551537819 -0500\n\nMerge #15492: [rpc] remove deprecated generate method\n\n07cae5287c [wallet] remove unused GetScriptForMining (Sjors Provoost)\n8bb3e4c487 [rpc] remove deprecated generate method (Sjors Provoost)\n\nPull request description:\n\n  As announced in v0.18, the wallet generate rpc method is deprecated and will be fully removed in v0.19.\n\n  Clients should transition to using the node rpc method `generatetoaddress`.\n\nTree-SHA512: 9e5e913b59f3e18440b2b7b356124c7b87ad19f81a1ab6ada06a6c396b84e734895465f569296f1ba8c12abf74863bab5fd77765c9e806c239713aa83a59485f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3122de054a377089a9ea226acf20274b8f7974",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3122de054a377089a9ea226acf20274b8f7974",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3122de054a377089a9ea226acf20274b8f7974/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e47d8a1b7c8b6471ced5770668202db90502405a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47d8a1b7c8b6471ced5770668202db90502405a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e47d8a1b7c8b6471ced5770668202db90502405a"
      },
      {
        "sha": "07cae5287c4409e9e597b891899403220905881d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07cae5287c4409e9e597b891899403220905881d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07cae5287c4409e9e597b891899403220905881d"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 21,
      "deletions": 86
    },
    "files": [
      {
        "sha": "1149eb0dbcc76c11f2aa0da1a7c9a3365fcfb5a3",
        "filename": "doc/release-notes-15492.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3122de054a377089a9ea226acf20274b8f7974/doc/release-notes-15492.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3122de054a377089a9ea226acf20274b8f7974/doc/release-notes-15492.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15492.md?ref=9e3122de054a377089a9ea226acf20274b8f7974",
        "patch": "@@ -0,0 +1,11 @@\n+Deprecated or removed RPCs\n+--------------------------\n+- The wallet's `generate` RPC method was deprecated in v0.18 and has now\n+  been fully removed.  This RPC is only used for\n+  testing, but its implementation reached across multiple subsystems\n+  (wallet and mining), so it has been removed to simplify the\n+  wallet-node interface.  Projects that are using `generate` for testing\n+  purposes should transition to using the `generatetoaddress` RPC, which\n+  does not require or use the wallet component. Calling\n+  `generatetoaddress` with an address returned by the `getnewaddress`\n+  RPC gives the same functionality as the old `generate` RPC."
      },
      {
        "sha": "a266580b3d1eef457f1599e0a399c532703f4657",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3122de054a377089a9ea226acf20274b8f7974/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3122de054a377089a9ea226acf20274b8f7974/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=9e3122de054a377089a9ea226acf20274b8f7974",
        "patch": "@@ -28,8 +28,6 @@ class CRPCConvertParam\n static const CRPCConvertParam vRPCConvertParams[] =\n {\n     { \"setmocktime\", 0, \"timestamp\" },\n-    { \"generate\", 0, \"nblocks\" },\n-    { \"generate\", 1, \"maxtries\" },\n     { \"generatetoaddress\", 0, \"nblocks\" },\n     { \"generatetoaddress\", 2, \"maxtries\" },\n     { \"getnetworkhashps\", 0, \"nblocks\" },"
      },
      {
        "sha": "47790fbf923d3cce7eafa9822eb64b6f2d396322",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 58,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3122de054a377089a9ea226acf20274b8f7974/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3122de054a377089a9ea226acf20274b8f7974/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9e3122de054a377089a9ea226acf20274b8f7974",
        "patch": "@@ -19,7 +19,6 @@\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n-#include <rpc/mining.h>\n #include <rpc/rawtransaction.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -3358,62 +3357,6 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n-UniValue generate(const JSONRPCRequest& request)\n-{\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n-            RPCHelpMan{\"generate\",\n-                \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\",\n-                {\n-                    {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n-                    {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n-                },\n-                RPCResult{\n-            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n-                },\n-                RPCExamples{\n-            \"\\nGenerate 11 blocks\\n\"\n-            + HelpExampleCli(\"generate\", \"11\")\n-                },\n-            }.ToString());\n-    }\n-\n-    if (!IsDeprecatedRPCEnabled(\"generate\")) {\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"The wallet generate rpc method is deprecated and will be fully removed in v0.19. \"\n-            \"To use generate in v0.18, restart bitcoind with -deprecatedrpc=generate.\\n\"\n-            \"Clients should transition to using the node rpc method generatetoaddress\\n\");\n-    }\n-\n-    int num_generate = request.params[0].get_int();\n-    uint64_t max_tries = 1000000;\n-    if (!request.params[1].isNull()) {\n-        max_tries = request.params[1].get_int();\n-    }\n-\n-    std::shared_ptr<CReserveScript> coinbase_script;\n-    pwallet->GetScriptForMining(coinbase_script);\n-\n-    // If the keypool is exhausted, no script is returned at all.  Catch this.\n-    if (!coinbase_script) {\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n-    }\n-\n-    //throw an error if no script was provided\n-    if (coinbase_script->reserveScript.empty()) {\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available\");\n-    }\n-\n-    return generateBlocks(coinbase_script, num_generate, max_tries, true);\n-}\n-\n UniValue rescanblockchain(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -4156,7 +4099,6 @@ UniValue importmulti(const JSONRPCRequest& request);\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n-    { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n     { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n     { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n     { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },"
      },
      {
        "sha": "cee31d5ac27bc3433607ee9e29e8bc978e5cb44e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3122de054a377089a9ea226acf20274b8f7974/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3122de054a377089a9ea226acf20274b8f7974/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9e3122de054a377089a9ea226acf20274b8f7974",
        "patch": "@@ -3819,17 +3819,6 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n     }\n }\n \n-void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n-{\n-    std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);\n-    CPubKey pubkey;\n-    if (!rKey->GetReservedKey(pubkey))\n-        return;\n-\n-    script = rKey;\n-    script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-}\n-\n void CWallet::LockCoin(const COutPoint& output)\n {\n     AssertLockHeld(cs_wallet); // setLockedCoins"
      },
      {
        "sha": "5173f957c72ae4af78dc3bd230278d51ac4149ba",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3122de054a377089a9ea226acf20274b8f7974/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3122de054a377089a9ea226acf20274b8f7974/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9e3122de054a377089a9ea226acf20274b8f7974",
        "patch": "@@ -1065,8 +1065,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     const std::string& GetLabelName(const CScript& scriptPubKey) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n-\n     unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n     {\n         AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool"
      },
      {
        "sha": "530f457ae7b3f9a0bd9ca57be84c491c792ed2ee",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3122de054a377089a9ea226acf20274b8f7974/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3122de054a377089a9ea226acf20274b8f7974/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=9e3122de054a377089a9ea226acf20274b8f7974",
        "patch": "@@ -4,29 +4,26 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_rpc_error\n+# from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=generate\"]]\n-\n-    def skip_test_if_missing_module(self):\n-        # The generate RPC method requires the wallet to be compiled\n-        self.skip_if_no_wallet()\n+        self.extra_args = [[], []]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n         # RPC methods with and without the -deprecatedrpc flags. For example:\n         #\n-        # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n-        # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n-        # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n-\n-        self.log.info(\"Test generate RPC\")\n-        assert_raises_rpc_error(-32, 'The wallet generate rpc method is deprecated', self.nodes[0].rpc.generate, 1)\n-        self.nodes[1].generate(1)\n+        # In set_test_params:\n+        # self.extra_args = [[], [\"-deprecatedrpc=generate\"]]\n+        #\n+        # In run_test:\n+        # self.log.info(\"Test generate RPC\")\n+        # assert_raises_rpc_error(-32, 'The wallet generate rpc method is deprecated', self.nodes[0].rpc.generate, 1)\n+        # self.nodes[1].generate(1)\n+        self.log.info(\"No tested deprecated RPC methods\")\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "80112b17e75bf0dfa413fc0cc10f50d8ba9710f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDExMmIxN2U3NWJmMGRmYTQxM2ZjMGNjMTBmNTBkOGJhOTcxMGY2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:46:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:46:25Z"
      },
      "message": "Merge #15296: tests: Add script checking for deterministic line coverage in unit tests\n\n43206239a8 tests: Add script checking for deterministic line coverage (practicalswift)\n\nPull request description:\n\n  Add script checking for deterministic line coverage in unit tests.\n\n  Context: #14343 (\"coverage reports non-deterministic\")\n\n  When the coverage is deterministic this script can be invoked from Travis to guard against regressions, but left inactive for now.\n\n  Output in case of determinism:\n\n  ```\n  $ contrib/test_deterministic_coverage.sh 2\n  [2019-01-30 20:08:46] Measuring coverage, run #1 of 2\n  [2019-01-30 20:10:45] Measuring coverage, run #2 of 2\n\n  Coverage test passed: Deterministic coverage across 2 runs.\n  ```\n\n  Output in case of non-determinism:\n\n  ```\n  $ contrib/test_deterministic_coverage.sh 2\n  [2019-01-30 20:08:46] Measuring coverage, run #1 of 2\n  [2019-01-30 20:10:45] Measuring coverage, run #2 of 2\n\n  The line coverage is non-deterministic between runs.\n\n  The test suite must be deterministic in the sense that the set of lines executed at least\n  once must be identical between runs. This is a neccessary condition for meaningful coverage\n  measuring.\n\n  --- gcovr.run-1.txt   2019-01-30 23:14:07.419418694 +0100\n  +++ gcovr.run-2.txt   2019-01-30 23:15:57.998811282 +0100\n  @@ -471,7 +471,7 @@\n   test/crypto_tests.cpp                        270     270   100%\n   test/cuckoocache_tests.cpp                   142     142   100%\n   test/dbwrapper_tests.cpp                     148     148   100%\n  -test/denialofservice_tests.cpp               225     225   100%\n  +test/denialofservice_tests.cpp               225     224    99%   363\n   test/descriptor_tests.cpp                    116     116   100%\n   test/fs_tests.cpp                             24       3    12%   14,16-17,19-20,23,25-26,29,31-32,35-36,39,41-42,45-46,49,51-52\n   test/getarg_tests.cpp                        111     111   100%\n  @@ -585,5 +585,5 @@\n   zmq/zmqpublishnotifier.h                       5       0     0%   12,31,37,43,49\n   zmq/zmqrpc.cpp                                21       0     0%   16,18,20,22,33-35,38-45,49,52,56,60,62-63\n   ------------------------------------------------------------------------------\n  -TOTAL                                      61561   27606    44%\n  +TOTAL                                      61561   27605    44%\n   ------------------------------------------------------------------------------\n\n  ```\n\n  In this case line 363 of `test/denialofservice_tests.cpp` was executed only in the second run. Non-determinism detected!\n\nTree-SHA512: 03f45590e70a87146f89aa7838beeff0925d7fd303697ff03e0e69f8a5861694be5f0dd10cb0020e3e3d40c9cf662f71dfcd838f6affb31bd5212314e0a4e3a9",
      "tree": {
        "sha": "fbe5da7c4d05a04df06faa8766600ffdfd07f945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbe5da7c4d05a04df06faa8766600ffdfd07f945"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80112b17e75bf0dfa413fc0cc10f50d8ba9710f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcepdBAAoJENLqSFDnUoslVUEP/j4OGlgvvBJ4i1MPi9cpxqBj\nTj8E22rvqODD85lCJ1qI9COH/gGPvThMRsD+y28jXM49EjtHhR41l6Jyb4nNbplY\nCL2S9e44nuOJUDpD70zav6Mt0v0LmDEyrfPRw+OJ8i851b3PUJmIIHXlZlNb6E6J\nPejG1lCiDHft/ztXisl3rfn8vTvrEPyK91nrojuolaScj1CxjrxqT1/xBqRTAHdf\nkgKX6f3FhznZkakQmFEGgbGZuXDQldYEEmAogXcRswZxriyvAFyG/YSiVNQKHNUy\nFlGXJwUD8KrZUdgs0cbusmYGJgr4gXbvIkpXlcSNwFCRAd/CdU5SmShZ0n209Ki8\n7k56TBlCyj5Yh4fsocB79M+xuidgOphUkfYxbFRDJSMjXE5rRSGNraefx2/r650J\nPaBqoDCYC0tbAPpaacowW2ptwFNi+KuTFy2bsp4VyV0IZZUF1C2mGyey+8IyaGNM\nIypSWOO7GTPeiup66hJ/xAUZpqXod3axipOusOWkoFC3+2Sb1+LmBZzVPC2Fz5lT\n/Qm99cLFTFwzlf79vQ7UH+UrCr6y80M+C7FQUKJfJWueV4SHYepSkjWZxsMmoFoO\nSO/ALnm06nFxbi8C+wS4T7/FURLKHBY5H6Jxmz3AjX1aGY/zLJtPVhsooLBR45fP\njNb5mg0h7Fq+E7PyJHwK\n=F9IO\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEnQu1Mi5KT+IdTdHqeHEpUHxLsTKCKn5QZI/JDzSeT3CP/wEAfr5rY6LFSp\nMud2Lr8bDsEI8BBukRp/4AVODId6ZBGO/qE0CPEEXHqXRPAI0FpKfX0UiWIAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BCE1uS8rZ0z2cRF4ELSBB+QCPEEXHqXRPAIsH58jelRLrAAg9/jDS75DI4sK2h0\ndHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmf/8BDJlg2H\nK5EDhrYeXImTDOTUCPEEXHqXRPAIhWyjQifA+zMAg9/jDS75DI4jImh0dHBzOi8v\nYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wENSilNYu2dSED3vHdn3jSjYI8QRc\nepdE8Aj0VMVc7l5I0gCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree fbe5da7c4d05a04df06faa8766600ffdfd07f945\nparent 9e3122de054a377089a9ea226acf20274b8f7974\nparent 43206239a8fab767849129368560afc4ac901047\nauthor MarcoFalke <falke.marco@gmail.com> 1551537974 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551537985 -0500\n\nMerge #15296: tests: Add script checking for deterministic line coverage in unit tests\n\n43206239a8 tests: Add script checking for deterministic line coverage (practicalswift)\n\nPull request description:\n\n  Add script checking for deterministic line coverage in unit tests.\n\n  Context: #14343 (\"coverage reports non-deterministic\")\n\n  When the coverage is deterministic this script can be invoked from Travis to guard against regressions, but left inactive for now.\n\n  Output in case of determinism:\n\n  ```\n  $ contrib/test_deterministic_coverage.sh 2\n  [2019-01-30 20:08:46] Measuring coverage, run #1 of 2\n  [2019-01-30 20:10:45] Measuring coverage, run #2 of 2\n\n  Coverage test passed: Deterministic coverage across 2 runs.\n  ```\n\n  Output in case of non-determinism:\n\n  ```\n  $ contrib/test_deterministic_coverage.sh 2\n  [2019-01-30 20:08:46] Measuring coverage, run #1 of 2\n  [2019-01-30 20:10:45] Measuring coverage, run #2 of 2\n\n  The line coverage is non-deterministic between runs.\n\n  The test suite must be deterministic in the sense that the set of lines executed at least\n  once must be identical between runs. This is a neccessary condition for meaningful coverage\n  measuring.\n\n  --- gcovr.run-1.txt   2019-01-30 23:14:07.419418694 +0100\n  +++ gcovr.run-2.txt   2019-01-30 23:15:57.998811282 +0100\n  @@ -471,7 +471,7 @@\n   test/crypto_tests.cpp                        270     270   100%\n   test/cuckoocache_tests.cpp                   142     142   100%\n   test/dbwrapper_tests.cpp                     148     148   100%\n  -test/denialofservice_tests.cpp               225     225   100%\n  +test/denialofservice_tests.cpp               225     224    99%   363\n   test/descriptor_tests.cpp                    116     116   100%\n   test/fs_tests.cpp                             24       3    12%   14,16-17,19-20,23,25-26,29,31-32,35-36,39,41-42,45-46,49,51-52\n   test/getarg_tests.cpp                        111     111   100%\n  @@ -585,5 +585,5 @@\n   zmq/zmqpublishnotifier.h                       5       0     0%   12,31,37,43,49\n   zmq/zmqrpc.cpp                                21       0     0%   16,18,20,22,33-35,38-45,49,52,56,60,62-63\n   ------------------------------------------------------------------------------\n  -TOTAL                                      61561   27606    44%\n  +TOTAL                                      61561   27605    44%\n   ------------------------------------------------------------------------------\n\n  ```\n\n  In this case line 363 of `test/denialofservice_tests.cpp` was executed only in the second run. Non-determinism detected!\n\nTree-SHA512: 03f45590e70a87146f89aa7838beeff0925d7fd303697ff03e0e69f8a5861694be5f0dd10cb0020e3e3d40c9cf662f71dfcd838f6affb31bd5212314e0a4e3a9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80112b17e75bf0dfa413fc0cc10f50d8ba9710f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80112b17e75bf0dfa413fc0cc10f50d8ba9710f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80112b17e75bf0dfa413fc0cc10f50d8ba9710f6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e3122de054a377089a9ea226acf20274b8f7974",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3122de054a377089a9ea226acf20274b8f7974",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3122de054a377089a9ea226acf20274b8f7974"
      },
      {
        "sha": "43206239a8fab767849129368560afc4ac901047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43206239a8fab767849129368560afc4ac901047",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43206239a8fab767849129368560afc4ac901047"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 151,
      "deletions": 0
    },
    "files": [
      {
        "sha": "16d03e1fffc749fc29afebc181e3561012bd1517",
        "filename": "contrib/devtools/test_deterministic_coverage.sh",
        "status": "added",
        "additions": 151,
        "deletions": 0,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80112b17e75bf0dfa413fc0cc10f50d8ba9710f6/contrib/devtools/test_deterministic_coverage.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80112b17e75bf0dfa413fc0cc10f50d8ba9710f6/contrib/devtools/test_deterministic_coverage.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test_deterministic_coverage.sh?ref=80112b17e75bf0dfa413fc0cc10f50d8ba9710f6",
        "patch": "@@ -0,0 +1,151 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Test for deterministic coverage across unit test runs.\n+\n+export LC_ALL=C\n+\n+# Use GCOV_EXECUTABLE=\"gcov\" if compiling with gcc.\n+# Use GCOV_EXECUTABLE=\"llvm-cov gcov\" if compiling with clang.\n+GCOV_EXECUTABLE=\"gcov\"\n+\n+# Disable tests known to cause non-deterministic behaviour and document the source or point of non-determinism.\n+NON_DETERMINISTIC_TESTS=(\n+    \"coinselector_tests/knapsack_solver_test\"                 # coinselector_tests.cpp: if (equal_sets(setCoinsRet, setCoinsRet2))\n+    \"denialofservice_tests/DoS_mapOrphans\"                    # denialofservice_tests.cpp: it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    \"fs_tests/fsbridge_fstream\"                               # deterministic test failure?\n+    \"miner_tests/CreateNewBlock_validity\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"scheduler_tests/manythreads\"                             # scheduler.cpp: CScheduler::serviceQueue()\n+    \"scheduler_tests/singlethreadedscheduler_ordered\"         # scheduler.cpp: CScheduler::serviceQueue()\n+    \"tx_validationcache_tests/checkinputs_test\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"tx_validationcache_tests/tx_mempool_block_doublespend\"   # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txindex_tests/txindex_initial_sync\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txvalidation_tests/tx_mempool_reject_coinbase\"           # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"validation_block_tests/processnewblock_signals_ordering\" # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/coin_mark_dirty_immature_credit\"            # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/dummy_input_size_test\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importmulti_rescan\"                         # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importwallet_rescan\"                        # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/ListCoins\"                                  # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/scan_for_wallet_transactions\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/wallet_disableprivkeys\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+)\n+\n+TEST_BITCOIN_BINARY=\"src/test/test_bitcoin\"\n+\n+print_usage() {\n+    echo \"Usage: $0 [custom test filter (default: all but known non-deterministic tests)] [number of test runs (default: 2)]\"\n+}\n+\n+N_TEST_RUNS=2\n+BOOST_TEST_RUN_FILTERS=\"\"\n+if [[ $# != 0 ]]; then\n+    if [[ $1 == \"--help\" ]]; then\n+        print_usage\n+        exit\n+    fi\n+    PARSED_ARGUMENTS=0\n+    if [[ $1 =~ [a-z] ]]; then\n+        BOOST_TEST_RUN_FILTERS=$1\n+        PARSED_ARGUMENTS=$((PARSED_ARGUMENTS + 1))\n+        shift\n+    fi\n+    if [[ $1 =~ ^[0-9]+$ ]]; then\n+        N_TEST_RUNS=$1\n+        PARSED_ARGUMENTS=$((PARSED_ARGUMENTS + 1))\n+        shift\n+    fi\n+    if [[ ${PARSED_ARGUMENTS} == 0 || $# -gt 2 || ${N_TEST_RUNS} -lt 2 ]]; then\n+        print_usage\n+        exit\n+    fi\n+fi\n+if [[ ${BOOST_TEST_RUN_FILTERS} == \"\" ]]; then\n+    BOOST_TEST_RUN_FILTERS=\"$(IFS=\":\"; echo \"!${NON_DETERMINISTIC_TESTS[*]}\" | sed 's/:/:!/g')\"\n+else\n+    echo \"Using Boost test filter: ${BOOST_TEST_RUN_FILTERS}\"\n+    echo\n+fi\n+\n+if ! command -v gcov > /dev/null; then\n+    echo \"Error: gcov not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if ! command -v gcovr > /dev/null; then\n+    echo \"Error: gcovr not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if [[ ! -e ${TEST_BITCOIN_BINARY} ]]; then\n+    echo \"Error: Executable ${TEST_BITCOIN_BINARY} not found. Run \\\"./configure --enable-lcov\\\" and compile.\"\n+    exit 1\n+fi\n+\n+get_file_suffix_count() {\n+    find src/ -type f -name \"*.$1\" | wc -l\n+}\n+\n+if [[ $(get_file_suffix_count gcno) == 0 ]]; then\n+    echo \"Error: Could not find any *.gcno files. The *.gcno files are generated by the compiler. Run \\\"./configure --enable-lcov\\\" and re-compile.\"\n+    exit 1\n+fi\n+\n+get_covr_filename() {\n+    echo \"gcovr.run-$1.txt\"\n+}\n+\n+TEST_RUN_ID=0\n+while [[ ${TEST_RUN_ID} -lt ${N_TEST_RUNS} ]]; do\n+    TEST_RUN_ID=$((TEST_RUN_ID + 1))\n+    echo \"[$(date +\"%Y-%m-%d %H:%M:%S\")] Measuring coverage, run #${TEST_RUN_ID} of ${N_TEST_RUNS}\"\n+    find src/ -type f -name \"*.gcda\" -exec rm {} \\;\n+    if [[ $(get_file_suffix_count gcda) != 0 ]]; then\n+        echo \"Error: Stale *.gcda files found. Exiting.\"\n+        exit 1\n+    fi\n+    TEST_OUTPUT_TEMPFILE=$(mktemp)\n+    if ! BOOST_TEST_RUN_FILTERS=\"${BOOST_TEST_RUN_FILTERS}\" ${TEST_BITCOIN_BINARY} > \"${TEST_OUTPUT_TEMPFILE}\" 2>&1; then\n+        cat \"${TEST_OUTPUT_TEMPFILE}\"\n+        rm \"${TEST_OUTPUT_TEMPFILE}\"\n+        exit 1\n+    fi\n+    rm \"${TEST_OUTPUT_TEMPFILE}\"\n+    if [[ $(get_file_suffix_count gcda) == 0 ]]; then\n+        echo \"Error: Running the test suite did not create any *.gcda files. The gcda files are generated when the instrumented test programs are executed. Run \\\"./configure --enable-lcov\\\" and re-compile.\"\n+        exit 1\n+    fi\n+    GCOVR_TEMPFILE=$(mktemp)\n+    if ! gcovr --gcov-executable \"${GCOV_EXECUTABLE}\" -r src/ > \"${GCOVR_TEMPFILE}\"; then\n+        echo \"Error: gcovr failed. Output written to ${GCOVR_TEMPFILE}. Exiting.\"\n+        exit 1\n+    fi\n+    GCOVR_FILENAME=$(get_covr_filename ${TEST_RUN_ID})\n+    mv \"${GCOVR_TEMPFILE}\" \"${GCOVR_FILENAME}\"\n+    if grep -E \"^TOTAL *0 *0 \" \"${GCOVR_FILENAME}\"; then\n+        echo \"Error: Spurious gcovr output. Make sure the correct GCOV_EXECUTABLE variable is set in $0 (\\\"gcov\\\" for gcc, \\\"llvm-cov gcov\\\" for clang).\"\n+        exit 1\n+    fi\n+    if [[ ${TEST_RUN_ID} != 1 ]]; then\n+        COVERAGE_DIFF=$(diff -u \"$(get_covr_filename 1)\" \"${GCOVR_FILENAME}\")\n+        if [[ ${COVERAGE_DIFF} != \"\" ]]; then\n+            echo\n+            echo \"The line coverage is non-deterministic between runs. Exiting.\"\n+            echo\n+            echo \"The test suite must be deterministic in the sense that the set of lines executed at least\"\n+            echo \"once must be identical between runs. This is a necessary condition for meaningful\"\n+            echo \"coverage measuring.\"\n+            echo\n+            echo \"${COVERAGE_DIFF}\"\n+            exit 1\n+        fi\n+        rm \"${GCOVR_FILENAME}\"\n+    fi\n+done\n+\n+echo\n+echo \"Coverage test passed: Deterministic coverage across ${N_TEST_RUNS} runs.\"\n+exit"
      }
    ]
  },
  {
    "sha": "849f37fa22b039246bd9e154ab83a4031d13a7c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDlmMzdmYTIyYjAzOTI0NmJkOWUxNTRhYjgzYTQwMzFkMTNhN2Mx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:55:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:55:09Z"
      },
      "message": "Merge #15338: ci: Build and run tests once on freebsd\n\nfa1d400003 cirrus ci: Inital config (MarcoFalke)\n\nPull request description:\n\n  Could be activated through https://github.com/marketplace/cirrus-ci\n\nTree-SHA512: 3a25ad2a58249463e97a3b31122581d5d382fa1d9c830f36c72ca6211b0822950e56ea754a6bddc8f79af21d1fe3469caee9efe0e90411a9c6a59cb98c09f845",
      "tree": {
        "sha": "6a14c655d4dad111fee041383caf9c5d184348bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a14c655d4dad111fee041383caf9c5d184348bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/849f37fa22b039246bd9e154ab83a4031d13a7c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJceplNAAoJENLqSFDnUosl9HgP/RXkL66atJoLTfBI7JTX7M6E\nWo+SBuo8NIFRTgSnnP9DJ+gLAMVtaqpIUB6ZUcHaxrYEB+l7gkg9f6kezaognMcx\n/3GVcQOvQWZaDFnngf7FeCDa98kXN5SAEBEb+lgmd68K/JW3Shg6mhvuXlhmgzlX\nzDaVdNCS0a+izvalkxk/rWV6+M3B/9Ad9tV88/xLo4yTt0WQidgNkBEV9a5/3p2F\n6+HU65ZaUIfyHm32nUYTdsfgfJce4JscvTzwD0e6q/bFt8V5PJuNdh6ZF7lElxFT\nM0XmwGDsjCgkkjOduwZlkX4VmWHDn3VKbHhTfJRq4KDlFWlgC9EisZJ8AzOJMK/R\nYrfDKuCSvidzaj7JvJ4U83jlhgjKERm/FW2QoD1tms96Z6wND0M5ReY1vsEPz1wu\n/zy3Zt7GJ8vj90VFp4xzNp1XYSS6BOUNSU1PhxVAyBJVnMBqAwBvqocsngNW13rv\nuMAsKdIWO5EUewzWN9Qg89cVCBUQCbusoxXzqG4wL9DRZZHjOjkmtc0q9DpmO8mx\n3nKtVekBiY4Ytef5oKBk5g4EKgot6FZri/zSmkd4AWrEsvsNF5kW6FJ+B6+sQrE4\nAkK+obgtC0xE18KylEZLGEnmTLrLoFEKKPv8ebCZmon3hWe2Ui/NMlv2MC7viora\nTO8vTnzh4eRDYWIkjqtY\n=rsiL\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGMzUVONzcPR65lQDBgvWEAK4OMpJDUHSRLYvUH6vnP/CP/wECK1f8/XiyqA\nXQfyK7bGOhMI8QRceplQ8Ajl7Y7S4xtHegCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQVPSzblVIWwLBKe61\nlKMorQjxBFx6mU/wCBrxCIpVP1L+AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQYE8dbdyHGXNfmo/Rzo8C+gjw\nEAXF4NsYaYQhw8AsblsFXJ0I8QRceplQ8Ajb9AUsYt/nAQCD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQnjbpgbQwOppL\nD8gwh80INQjxBFx6mVDwCNizh6L4aowSAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6a14c655d4dad111fee041383caf9c5d184348bb\nparent 80112b17e75bf0dfa413fc0cc10f50d8ba9710f6\nparent fa1d400003e96ed320da88e8d6129e665da901b5\nauthor MarcoFalke <falke.marco@gmail.com> 1551538505 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551538509 -0500\n\nMerge #15338: ci: Build and run tests once on freebsd\n\nfa1d400003 cirrus ci: Inital config (MarcoFalke)\n\nPull request description:\n\n  Could be activated through https://github.com/marketplace/cirrus-ci\n\nTree-SHA512: 3a25ad2a58249463e97a3b31122581d5d382fa1d9c830f36c72ca6211b0822950e56ea754a6bddc8f79af21d1fe3469caee9efe0e90411a9c6a59cb98c09f845\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/849f37fa22b039246bd9e154ab83a4031d13a7c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/849f37fa22b039246bd9e154ab83a4031d13a7c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/849f37fa22b039246bd9e154ab83a4031d13a7c1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80112b17e75bf0dfa413fc0cc10f50d8ba9710f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80112b17e75bf0dfa413fc0cc10f50d8ba9710f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80112b17e75bf0dfa413fc0cc10f50d8ba9710f6"
      },
      {
        "sha": "fa1d400003e96ed320da88e8d6129e665da901b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d400003e96ed320da88e8d6129e665da901b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1d400003e96ed320da88e8d6129e665da901b5"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9104a0a3d1de5ef880bdde0e69fbeacb344008d4",
        "filename": ".cirrus.yml",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/849f37fa22b039246bd9e154ab83a4031d13a7c1/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/849f37fa22b039246bd9e154ab83a4031d13a7c1/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=849f37fa22b039246bd9e154ab83a4031d13a7c1",
        "patch": "@@ -0,0 +1,26 @@\n+task:\n+  name: \"FreeBsd 12.0 amd64  [GOAL: install]  [no depends, only system libs]\"\n+  freebsd_instance:\n+    image: freebsd-12-0-release-amd64\n+  ccache_cache:\n+    folder: \"/tmp/ccache_dir\"\n+  env:\n+    MAKEJOBS: \"-j3\"\n+    CONFIGURE_OPTS: \"--disable-dependency-tracking\"\n+    GOAL: \"install\"\n+    CCACHE_SIZE: \"200M\"\n+    CCACHE_COMPRESS: 1\n+    CCACHE_DIR: \"/tmp/ccache_dir\"\n+  install_script:\n+    - pkg install -y autoconf automake boost-libs git gmake libevent libtool openssl pkgconf python3 ccache\n+    - ./contrib/install_db4.sh $(pwd)\n+    - ccache --max-size=${CCACHE_SIZE}\n+  configure_script:\n+    - ./autogen.sh\n+    - ./configure ${CONFIGURE_OPTS} BDB_LIBS=\"-L$(pwd)/db4/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I$(pwd)/db4/include\" || ( cat config.log && false)\n+  make_script:\n+    - gmake ${MAKEJOBS} ${GOAL} || ( echo \"Build failure. Verbose build follows.\" && gmake ${GOAL} V=1 ; false )\n+  check_script:\n+    - gmake check ${MAKEJOBS} VERBOSE=1\n+  functional_test_script:\n+    - ./test/functional/test_runner.py --ci --combinedlogslen=1000 --quiet --failfast"
      }
    ]
  },
  {
    "sha": "789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODliMGJiZjJhZmNiYWE1Y2UyYjk5OTQ1YWE0YjAyODY2YTYxOTcy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:59:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T14:59:18Z"
      },
      "message": "Merge #15335: Fix lack of warning of unrecognized section names\n\n1a7ba84e11 Fix lack of warning of unrecognized section names (Akio Nakamura)\n\nPull request description:\n\n  In #14708, It was introduced that to warn when unrecognized section names are exist in the config file.\n  But ```m_config_sections.clear()```  in ```ArgsManager::ReadConfigStream()``` is called every time when reading each configuration file, so it can warn about only last reading file if ```includeconf``` exists.\n\n  This PR fix lack of warning by collecting all section names by moving ```m_config_sections.clear()```  to ```ArgsManager::ReadConfigFiles()``` .\n  Also add a test code to confirm this situation.\n\nTree-SHA512: 26aa0cbe3e4ae2e58cbe73d4492ee5cf465fd4c3e5df2c8ca7e282b627df9e637267af1e3816386b1dc6db2398b31936925ce0e432219fec3a9b3398f01e3e65",
      "tree": {
        "sha": "3d7ea837b88a8fae4dd96ef88106e44d499a513c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d7ea837b88a8fae4dd96ef88106e44d499a513c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJceppGAAoJENLqSFDnUosleEMQAJt9CvQXI7azhqMpaRNiphDc\nS1rGHRRZc+EF2Yxu9/gU6U5H/UFXZU7l/EfOFn9Z+fz/3xMGkj7RHPrCBXYwSD2i\nx3R1x6ceXqzD/DJrEXwPZpcKmsizXBkyqci9rSlfMY09Nh5bsn9ajUoICKtfrLYn\nOtxzZLf3UEVesX/wDMBHsspyHHbeTwxVwPSGRVgLKUd+3chBonBQJmXkEx1i5sDm\nwCieRyRLlcAgSDNn970sBKZEm2oeUO6BaDWcuYq5r3c8J/6Q7GdeMP8UpwlUCdkU\nN/5JBBuuwAccFKnNYqQaJEeNtXKaqTaEDpe53w8Y8uCmpejrjRDB/A7+wSDJsW8N\nWjETxOD3XK2ze/KKavuD5J0VY4/EF+S02BI7P/ojo2jCAcc7Dou0r3uJQHs65LqB\nC8q12T+dkIEIDBcEPgw/g/DtxFhqRFfL9OFfxpUWVKU0SDbbzKilySIuUbhtLKKC\naH5br3hDZh0QRcihhLiqWfmy58BGXEgEVmmwerU4n9UoXT4ntdv5X9neIF/xLDzO\nVpeNJtaUuVhsEd8Cjd9+lOTXoKjvDlgDLz73fMV/+KVE6DEDVOUDBdV+dtPyhQRb\neshDPSU0EzEiWavctIl7Krm82apq2CDge6pFJWmDREGI8ywsm6QTqgYxCLnXO495\n68qx952TNogJ+1NyvbE2\n=WsSi\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMSrZkEyfhmOjEtLjyRNbbCetUiRiZT1afMV/aXsW/pJCP/wED1HhbYpgw5q\noY8VcPlMlpoI8QRceppI8Aiq8zLJ6/mhQQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEGP3nN2wdRXlhVnvbC3NksgI8CBJl2bJ\nTqjqaDq6MFC5wuWjUtFjLvrXQnPbAjJRouRLIQjxBFx6mkjwCF8peOkbNakMAIPf\n4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMu\nb3Jn//AQdq1KslFp5gebypu+6xtAJgjwEAj53KznTNgfk5cAAG/hoAkI8SCYKstF\n952z3DczGtyYUgCIGz4m+cddXtC7pJRazDtjrgjxBFx6mknwCJDATycHJTFeAIPf\n4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n8BDLocH3COe4OHz6scuWAW4uCPAgMYH9O2i8ifSC6yrCMKoFkAelODQ0UABUqYJ5\nU96ON2sI8QRceppI8AhVZu8SPQIf7gCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5i\ndGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 3d7ea837b88a8fae4dd96ef88106e44d499a513c\nparent 849f37fa22b039246bd9e154ab83a4031d13a7c1\nparent 1a7ba84e1194aeeb3c2fc9d79337a84586b834fd\nauthor MarcoFalke <falke.marco@gmail.com> 1551538749 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551538758 -0500\n\nMerge #15335: Fix lack of warning of unrecognized section names\n\n1a7ba84e11 Fix lack of warning of unrecognized section names (Akio Nakamura)\n\nPull request description:\n\n  In #14708, It was introduced that to warn when unrecognized section names are exist in the config file.\n  But ```m_config_sections.clear()```  in ```ArgsManager::ReadConfigStream()``` is called every time when reading each configuration file, so it can warn about only last reading file if ```includeconf``` exists.\n\n  This PR fix lack of warning by collecting all section names by moving ```m_config_sections.clear()```  to ```ArgsManager::ReadConfigFiles()``` .\n  Also add a test code to confirm this situation.\n\nTree-SHA512: 26aa0cbe3e4ae2e58cbe73d4492ee5cf465fd4c3e5df2c8ca7e282b627df9e637267af1e3816386b1dc6db2398b31936925ce0e432219fec3a9b3398f01e3e65\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "849f37fa22b039246bd9e154ab83a4031d13a7c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/849f37fa22b039246bd9e154ab83a4031d13a7c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/849f37fa22b039246bd9e154ab83a4031d13a7c1"
      },
      {
        "sha": "1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a7ba84e1194aeeb3c2fc9d79337a84586b834fd"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 36,
      "deletions": 24
    },
    "files": [
      {
        "sha": "e0da9620309b2861618cae101f711f6ecc3fefdd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
        "patch": "@@ -839,7 +839,7 @@ void InitParameterInteraction()\n \n     // Warn if unrecognized section name are present in the config file.\n     for (const auto& section : gArgs.GetUnrecognizedSections()) {\n-        InitWarning(strprintf(_(\"Section [%s] is not recognized.\"), section));\n+        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\"), section.m_file, section.m_line, section.m_name));\n     }\n }\n "
      },
      {
        "sha": "e17ae7103b3402591429a869d93eafa1a903dd4a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
        "patch": "@@ -180,9 +180,10 @@ struct TestArgsManager : public ArgsManager\n         {\n             LOCK(cs_args);\n             m_config_args.clear();\n+            m_config_sections.clear();\n         }\n         std::string error;\n-        BOOST_REQUIRE(ReadConfigStream(streamConfig, error));\n+        BOOST_REQUIRE(ReadConfigStream(streamConfig, \"\", error));\n     }\n     void SetNetworkOnlyArg(const std::string arg)\n     {"
      },
      {
        "sha": "5ae06048940f97c4421b837886fa8635b3353857",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
        "patch": "@@ -353,23 +353,19 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     return unsuitables;\n }\n \n-\n-const std::set<std::string> ArgsManager::GetUnrecognizedSections() const\n+const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const\n {\n     // Section names to be recognized in the config file.\n     static const std::set<std::string> available_sections{\n         CBaseChainParams::REGTEST,\n         CBaseChainParams::TESTNET,\n         CBaseChainParams::MAIN\n     };\n-    std::set<std::string> diff;\n \n     LOCK(cs_args);\n-    std::set_difference(\n-        m_config_sections.begin(), m_config_sections.end(),\n-        available_sections.begin(), available_sections.end(),\n-        std::inserter(diff, diff.end()));\n-    return diff;\n+    std::list<SectionInfo> unrecognized = m_config_sections;\n+    unrecognized.remove_if([](const SectionInfo& appeared){ return available_sections.find(appeared.m_name) != available_sections.end(); });\n+    return unrecognized;\n }\n \n void ArgsManager::SelectConfigNetwork(const std::string& network)\n@@ -793,7 +789,7 @@ static std::string TrimString(const std::string& str, const std::string& pattern\n     return str.substr(front, end - front + 1);\n }\n \n-static bool GetConfigOptions(std::istream& stream, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::set<std::string>& sections)\n+static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)\n {\n     std::string str, prefix;\n     std::string::size_type pos;\n@@ -809,7 +805,7 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n         if (!str.empty()) {\n             if (*str.begin() == '[' && *str.rbegin() == ']') {\n                 const std::string section = str.substr(1, str.size() - 2);\n-                sections.insert(section);\n+                sections.emplace_back(SectionInfo{section, filepath, linenr});\n                 prefix = section + '.';\n             } else if (*str.begin() == '-') {\n                 error = strprintf(\"parse error on line %i: %s, options in configuration file must be specified without leading -\", linenr, str);\n@@ -822,8 +818,8 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n                     return false;\n                 }\n                 options.emplace_back(name, value);\n-                if ((pos = name.rfind('.')) != std::string::npos) {\n-                    sections.insert(name.substr(0, pos));\n+                if ((pos = name.rfind('.')) != std::string::npos && prefix.length() <= pos) {\n+                    sections.emplace_back(SectionInfo{name.substr(0, pos), filepath, linenr});\n                 }\n             } else {\n                 error = strprintf(\"parse error on line %i: %s\", linenr, str);\n@@ -838,12 +834,11 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n     return true;\n }\n \n-bool ArgsManager::ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys)\n+bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys)\n {\n     LOCK(cs_args);\n     std::vector<std::pair<std::string, std::string>> options;\n-    m_config_sections.clear();\n-    if (!GetConfigOptions(stream, error, options, m_config_sections)) {\n+    if (!GetConfigOptions(stream, filepath, error, options, m_config_sections)) {\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {\n@@ -874,14 +869,15 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n     {\n         LOCK(cs_args);\n         m_config_args.clear();\n+        m_config_sections.clear();\n     }\n \n     const std::string confPath = GetArg(\"-conf\", BITCOIN_CONF_FILENAME);\n     fsbridge::ifstream stream(GetConfigFile(confPath));\n \n     // ok to not have a config file\n     if (stream.good()) {\n-        if (!ReadConfigStream(stream, error, ignore_invalid_keys)) {\n+        if (!ReadConfigStream(stream, confPath, error, ignore_invalid_keys)) {\n             return false;\n         }\n         // if there is an -includeconf in the override args, but it is empty, that means the user\n@@ -912,7 +908,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n             for (const std::string& to_include : includeconf) {\n                 fsbridge::ifstream include_config(GetConfigFile(to_include));\n                 if (include_config.good()) {\n-                    if (!ReadConfigStream(include_config, error, ignore_invalid_keys)) {\n+                    if (!ReadConfigStream(include_config, to_include, error, ignore_invalid_keys)) {\n                         return false;\n                     }\n                     LogPrintf(\"Included configuration file %s\\n\", to_include.c_str());"
      },
      {
        "sha": "6899e38c9e089b20f620b2cf340ef50fe9cfc239",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
        "patch": "@@ -127,6 +127,13 @@ enum class OptionsCategory {\n     HIDDEN // Always the last option to avoid printing these in the help\n };\n \n+struct SectionInfo\n+{\n+    std::string m_name;\n+    std::string m_file;\n+    int m_line;\n+};\n+\n class ArgsManager\n {\n protected:\n@@ -147,9 +154,9 @@ class ArgsManager\n     std::string m_network GUARDED_BY(cs_args);\n     std::set<std::string> m_network_only_args GUARDED_BY(cs_args);\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n-    std::set<std::string> m_config_sections GUARDED_BY(cs_args);\n+    std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n-    NODISCARD bool ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys = false);\n+    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n public:\n     ArgsManager();\n@@ -173,7 +180,7 @@ class ArgsManager\n     /**\n      * Log warnings for unrecognized section names in the config file.\n      */\n-    const std::set<std::string> GetUnrecognizedSections() const;\n+    const std::list<SectionInfo> GetUnrecognizedSections() const;\n \n     /**\n      * Return a vector of strings of the given argument"
      },
      {
        "sha": "460e664c48894ced3c8998b98c725767e33ee0fd",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789b0bbf2afcbaa5ce2b99945aa4b02866a61972/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
        "patch": "@@ -41,13 +41,21 @@ def test_config_file_parser(self):\n             conf.write('server=1\\nrpcuser=someuser\\n[main]\\nrpcpassword=some#pass')\n         self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 4, using # in rpcpassword can be ambiguous and should be avoided')\n \n+        inc_conf_file2_path = os.path.join(self.nodes[0].datadir, 'include2.conf')\n+        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+            conf.write('includeconf={}\\n'.format(inc_conf_file2_path))\n+\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n-            conf.write('testnot.datadir=1\\n[testnet]\\n')\n+            conf.write('testnot.datadir=1\\n')\n+        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n+            conf.write('[testnet]\\n')\n         self.restart_node(0)\n-        self.nodes[0].stop_node(expected_stderr='Warning: Section [testnet] is not recognized.' + os.linesep + 'Warning: Section [testnot] is not recognized.')\n+        self.nodes[0].stop_node(expected_stderr='Warning: ' + inc_conf_file_path + ':1 Section [testnot] is not recognized.' + os.linesep + 'Warning: ' + inc_conf_file2_path + ':1 Section [testnet] is not recognized.')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('')  # clear\n+        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n+            conf.write('')  # clear\n \n     def run_test(self):\n         self.stop_node(0)"
      }
    ]
  },
  {
    "sha": "2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDQ2ZjFiZTBjM2M4YjcyODdhYTFmNjJiYjFmNWI0YThkMDBmZjZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-03-02T22:03:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-03-02T22:20:38Z"
      },
      "message": "Merge #15118: Refactor block file logic\n\n04cca330944f859b4ed68cb8da8a79f5206fd630 Style cleanup. (Jim Posen)\n4c01e4e159db82ce4b2acce75f709cac996367d7 flatfile: Unit tests for FlatFileSeq methods. (Jim Posen)\n65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0 scripted-diff: Rename CBlockDiskPos to FlatFilePos. (Jim Posen)\nd6d8a78f26f52fdfe43293686135e2fc6919926c Move CDiskBlockPos from chain to flatfile. (Jim Posen)\ne0380933e3745214331d358bda8c5e79299c84d2 validation: Refactor file flush logic into FlatFileSeq. (Jim Posen)\n992404b31ed2f8cabeed59d074552f0ae10fda94 validation: Refactor block file pre-allocation into FlatFileSeq. (Jim Posen)\ne2d2abb99fe353ffc2ff3bc1ff578fad31065335 validation: Refactor OpenDiskFile into method on FlatFileSeq. (Jim Posen)\n9183d6ef656c8f3ed406821b99827f9b5f047665 validation: Extract basic block file logic into FlatFileSeq class. (Jim Posen)\n62e7addb632cad77cbd5fbccbaee51c7b32505d0 util: Move CheckDiskSpace to util. (Jim Posen)\n\nPull request description:\n\n  This cleans up and refactors block file helpers so that they may be used by the block filter indexer. Per [design discussion](https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451252591) about storing BIP 157 block filters, it has been suggested that they are stored in the same way as block and undo data. This refactor is sufficient to simplify file operations for this use case, though in the future perhaps more pruning-related logic ought to be moved into the new classes.\n\n  The basic abstraction is a `FlatFileSeq` which manages access to a sequence of numbered files into which raw data is written.\n\nTree-SHA512: b2108756777f2dad8964a1a2ef2764486e708a4a4a8cfac47b5de8bcb0625388964438eb096b10cfd9ea39212c299b5cb32fa943e768db2333cf49ea7def157e",
      "tree": {
        "sha": "74cdf9b2bd2d72f4fd3da0c18cda1a41e8e77c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74cdf9b2bd2d72f4fd3da0c18cda1a41e8e77c66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlx7AbYACgkQHkrtYphs\n0l2A3gf/RGWYE8dgEDz6SHjGgRqDmgS8v0ad/Dv3Il1O7i9hKbALhgr7XeqteCfG\npScG8+HTiPb+ytVbXpFfFc9O3gJ9BJIBlAaQU9f0huT2GfIPNTcsT0BNS4HleNsO\n0vJyCCJ42xg4DbaHEilcta2RV3SUhc/Gw2y2AnYAmQNuOH+4x5LtaKIW0n9wdVbx\ncoOI+3/ouCOY9kiwm2sBn5pzA9t5wVbDtzLvysPZnw1SCL5JSksql7f5eQSZS0gK\nb/hq+Lh6JIeHC3av63veqK1us1rUnJzgzs2S/6yWBXUaVsT8Cwi5fpLM4qCVQggj\nKEzlQ5g6sXh78Wzu17pl/WaxxstWEA==\n=z98q\n-----END PGP SIGNATURE-----",
        "payload": "tree 74cdf9b2bd2d72f4fd3da0c18cda1a41e8e77c66\nparent 789b0bbf2afcbaa5ce2b99945aa4b02866a61972\nparent 04cca330944f859b4ed68cb8da8a79f5206fd630\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551564201 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551565238 +0100\n\nMerge #15118: Refactor block file logic\n\n04cca330944f859b4ed68cb8da8a79f5206fd630 Style cleanup. (Jim Posen)\n4c01e4e159db82ce4b2acce75f709cac996367d7 flatfile: Unit tests for FlatFileSeq methods. (Jim Posen)\n65a489e93d181d3c0f7a9cf79f7c11ff8cf2b0f0 scripted-diff: Rename CBlockDiskPos to FlatFilePos. (Jim Posen)\nd6d8a78f26f52fdfe43293686135e2fc6919926c Move CDiskBlockPos from chain to flatfile. (Jim Posen)\ne0380933e3745214331d358bda8c5e79299c84d2 validation: Refactor file flush logic into FlatFileSeq. (Jim Posen)\n992404b31ed2f8cabeed59d074552f0ae10fda94 validation: Refactor block file pre-allocation into FlatFileSeq. (Jim Posen)\ne2d2abb99fe353ffc2ff3bc1ff578fad31065335 validation: Refactor OpenDiskFile into method on FlatFileSeq. (Jim Posen)\n9183d6ef656c8f3ed406821b99827f9b5f047665 validation: Extract basic block file logic into FlatFileSeq class. (Jim Posen)\n62e7addb632cad77cbd5fbccbaee51c7b32505d0 util: Move CheckDiskSpace to util. (Jim Posen)\n\nPull request description:\n\n  This cleans up and refactors block file helpers so that they may be used by the block filter indexer. Per [design discussion](https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451252591) about storing BIP 157 block filters, it has been suggested that they are stored in the same way as block and undo data. This refactor is sufficient to simplify file operations for this use case, though in the future perhaps more pruning-related logic ought to be moved into the new classes.\n\n  The basic abstraction is a `FlatFileSeq` which manages access to a sequence of numbered files into which raw data is written.\n\nTree-SHA512: b2108756777f2dad8964a1a2ef2764486e708a4a4a8cfac47b5de8bcb0625388964438eb096b10cfd9ea39212c299b5cb32fa943e768db2333cf49ea7def157e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789b0bbf2afcbaa5ce2b99945aa4b02866a61972",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/789b0bbf2afcbaa5ce2b99945aa4b02866a61972"
      },
      {
        "sha": "04cca330944f859b4ed68cb8da8a79f5206fd630",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04cca330944f859b4ed68cb8da8a79f5206fd630",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04cca330944f859b4ed68cb8da8a79f5206fd630"
      }
    ],
    "stats": {
      "total": 598,
      "additions": 417,
      "deletions": 181
    },
    "files": [
      {
        "sha": "2e297d3dac7dfacd15d0cd2c08405e36a9da897f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -128,6 +128,7 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n+  flatfile.h \\\n   fs.h \\\n   httprpc.h \\\n   httpserver.h \\\n@@ -247,6 +248,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   checkpoints.cpp \\\n   consensus/tx_verify.cpp \\\n+  flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   index/base.cpp \\"
      },
      {
        "sha": "09fef5a1ddf5ecf7db901fca01566777d4cfe09f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -83,6 +83,7 @@ BITCOIN_TESTS =\\\n   test/cuckoocache_tests.cpp \\\n   test/denialofservice_tests.cpp \\\n   test/descriptor_tests.cpp \\\n+  test/flatfile_tests.cpp \\\n   test/fs_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\"
      },
      {
        "sha": "2b6d2d082cb237dd82bcb2015d225e0fb5fe53fb",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 44,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <arith_uint256.h>\n #include <consensus/params.h>\n+#include <flatfile.h>\n #include <primitives/block.h>\n #include <tinyformat.h>\n #include <uint256.h>\n@@ -90,46 +91,6 @@ class CBlockFileInfo\n      }\n };\n \n-struct CDiskBlockPos\n-{\n-    int nFile;\n-    unsigned int nPos;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nPos));\n-    }\n-\n-    CDiskBlockPos() {\n-        SetNull();\n-    }\n-\n-    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n-        nFile = nFileIn;\n-        nPos = nPosIn;\n-    }\n-\n-    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return (a.nFile == b.nFile && a.nPos == b.nPos);\n-    }\n-\n-    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return !(a == b);\n-    }\n-\n-    void SetNull() { nFile = -1; nPos = 0; }\n-    bool IsNull() const { return (nFile == -1); }\n-\n-    std::string ToString() const\n-    {\n-        return strprintf(\"CDiskBlockPos(nFile=%i, nPos=%i)\", nFile, nPos);\n-    }\n-\n-};\n-\n enum BlockStatus: uint32_t {\n     //! Unused.\n     BLOCK_VALID_UNKNOWN      =    0,\n@@ -266,17 +227,17 @@ class CBlockIndex\n         nNonce         = block.nNonce;\n     }\n \n-    CDiskBlockPos GetBlockPos() const {\n-        CDiskBlockPos ret;\n+    FlatFilePos GetBlockPos() const {\n+        FlatFilePos ret;\n         if (nStatus & BLOCK_HAVE_DATA) {\n             ret.nFile = nFile;\n             ret.nPos  = nDataPos;\n         }\n         return ret;\n     }\n \n-    CDiskBlockPos GetUndoPos() const {\n-        CDiskBlockPos ret;\n+    FlatFilePos GetUndoPos() const {\n+        FlatFilePos ret;\n         if (nStatus & BLOCK_HAVE_UNDO) {\n             ret.nFile = nFile;\n             ret.nPos  = nUndoPos;"
      },
      {
        "sha": "8a8f7b681c5209f1768d6f8e30004d87aad7d91c",
        "filename": "src/flatfile.cpp",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdexcept>\n+\n+#include <flatfile.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+#include <util/system.h>\n+\n+FlatFileSeq::FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size) :\n+    m_dir(std::move(dir)),\n+    m_prefix(prefix),\n+    m_chunk_size(chunk_size)\n+{\n+    if (chunk_size == 0) {\n+        throw std::invalid_argument(\"chunk_size must be positive\");\n+    }\n+}\n+\n+std::string FlatFilePos::ToString() const\n+{\n+    return strprintf(\"FlatFilePos(nFile=%i, nPos=%i)\", nFile, nPos);\n+}\n+\n+fs::path FlatFileSeq::FileName(const FlatFilePos& pos) const\n+{\n+    return m_dir / strprintf(\"%s%05u.dat\", m_prefix, pos.nFile);\n+}\n+\n+FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool read_only)\n+{\n+    if (pos.IsNull()) {\n+        return nullptr;\n+    }\n+    fs::path path = FileName(pos);\n+    fs::create_directories(path.parent_path());\n+    FILE* file = fsbridge::fopen(path, read_only ? \"rb\": \"rb+\");\n+    if (!file && !read_only)\n+        file = fsbridge::fopen(path, \"wb+\");\n+    if (!file) {\n+        LogPrintf(\"Unable to open file %s\\n\", path.string());\n+        return nullptr;\n+    }\n+    if (pos.nPos && fseek(file, pos.nPos, SEEK_SET)) {\n+        LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+        fclose(file);\n+        return nullptr;\n+    }\n+    return file;\n+}\n+\n+size_t FlatFileSeq::Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space)\n+{\n+    out_of_space = false;\n+\n+    unsigned int n_old_chunks = (pos.nPos + m_chunk_size - 1) / m_chunk_size;\n+    unsigned int n_new_chunks = (pos.nPos + add_size + m_chunk_size - 1) / m_chunk_size;\n+    if (n_new_chunks > n_old_chunks) {\n+        size_t old_size = pos.nPos;\n+        size_t new_size = n_new_chunks * m_chunk_size;\n+        size_t inc_size = new_size - old_size;\n+\n+        if (CheckDiskSpace(m_dir, inc_size)) {\n+            FILE *file = Open(pos);\n+            if (file) {\n+                LogPrintf(\"Pre-allocating up to position 0x%x in %s%05u.dat\\n\", new_size, m_prefix, pos.nFile);\n+                AllocateFileRange(file, pos.nPos, inc_size);\n+                fclose(file);\n+                return inc_size;\n+            }\n+        } else {\n+            out_of_space = true;\n+        }\n+    }\n+    return 0;\n+}\n+\n+bool FlatFileSeq::Flush(const FlatFilePos& pos, bool finalize)\n+{\n+    FILE* file = Open(FlatFilePos(pos.nFile, 0)); // Avoid fseek to nPos\n+    if (!file) {\n+        return error(\"%s: failed to open file %d\", __func__, pos.nFile);\n+    }\n+    if (finalize && !TruncateFile(file, pos.nPos)) {\n+        fclose(file);\n+        return error(\"%s: failed to truncate file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file)) {\n+        fclose(file);\n+        return error(\"%s: failed to commit file %d\", __func__, pos.nFile);\n+    }\n+\n+    fclose(file);\n+    return true;\n+}"
      },
      {
        "sha": "374ceff411b49ebc5a61db77859d4aab3504f5fd",
        "filename": "src/flatfile.h",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_FLATFILE_H\n+#define BITCOIN_FLATFILE_H\n+\n+#include <string>\n+\n+#include <fs.h>\n+#include <serialize.h>\n+\n+struct FlatFilePos\n+{\n+    int nFile;\n+    unsigned int nPos;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n+        READWRITE(VARINT(nPos));\n+    }\n+\n+    FlatFilePos() : nFile(-1), nPos(0) {}\n+\n+    FlatFilePos(int nFileIn, unsigned int nPosIn) :\n+        nFile(nFileIn),\n+        nPos(nPosIn)\n+    {}\n+\n+    friend bool operator==(const FlatFilePos &a, const FlatFilePos &b) {\n+        return (a.nFile == b.nFile && a.nPos == b.nPos);\n+    }\n+\n+    friend bool operator!=(const FlatFilePos &a, const FlatFilePos &b) {\n+        return !(a == b);\n+    }\n+\n+    void SetNull() { nFile = -1; nPos = 0; }\n+    bool IsNull() const { return (nFile == -1); }\n+\n+    std::string ToString() const;\n+};\n+\n+/**\n+ * FlatFileSeq represents a sequence of numbered files storing raw data. This class facilitates\n+ * access to and efficient management of these files.\n+ */\n+class FlatFileSeq\n+{\n+private:\n+    const fs::path m_dir;\n+    const char* const m_prefix;\n+    const size_t m_chunk_size;\n+\n+public:\n+    /**\n+     * Constructor\n+     *\n+     * @param dir The base directory that all files live in.\n+     * @param prefix A short prefix given to all file names.\n+     * @param chunk_size Disk space is pre-allocated in multiples of this amount.\n+     */\n+    FlatFileSeq(fs::path dir, const char* prefix, size_t chunk_size);\n+\n+    /** Get the name of the file at the given position. */\n+    fs::path FileName(const FlatFilePos& pos) const;\n+\n+    /** Open a handle to the file at the given position. */\n+    FILE* Open(const FlatFilePos& pos, bool read_only = false);\n+\n+    /**\n+     * Allocate additional space in a file after the given starting position. The amount allocated\n+     * will be the minimum multiple of the sequence chunk size greater than add_size.\n+     *\n+     * @param[in] pos The starting position that bytes will be allocated after.\n+     * @param[in] add_size The minimum number of bytes to be allocated.\n+     * @param[out] out_of_space Whether the allocation failed due to insufficient disk space.\n+     * @return The number of bytes successfully allocated.\n+     */\n+    size_t Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space);\n+\n+    /**\n+     * Commit a file to disk, and optionally truncate off extra pre-allocated bytes if final.\n+     *\n+     * @param[in] pos The first unwritten position in the file to be flushed.\n+     * @param[in] finalize True if no more data will be written to this file.\n+     * @return true on success, false on failure.\n+     */\n+    bool Flush(const FlatFilePos& pos, bool finalize = false);\n+};\n+\n+#endif // BITCOIN_FLATFILE_H"
      },
      {
        "sha": "7367ec7cb653e077a1765130b032696ca6c92e36",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -16,27 +16,27 @@ constexpr char DB_TXINDEX_BLOCK = 'T';\n \n std::unique_ptr<TxIndex> g_txindex;\n \n-struct CDiskTxPos : public CDiskBlockPos\n+struct CDiskTxPos : public FlatFilePos\n {\n     unsigned int nTxOffset; // after header\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CDiskBlockPos, *this);\n+        READWRITEAS(FlatFilePos, *this);\n         READWRITE(VARINT(nTxOffset));\n     }\n \n-    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n+    CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {\n     }\n \n     CDiskTxPos() {\n         SetNull();\n     }\n \n     void SetNull() {\n-        CDiskBlockPos::SetNull();\n+        FlatFilePos::SetNull();\n         nTxOffset = 0;\n     }\n };"
      },
      {
        "sha": "ee9a451d0be6b2dd77bd5e3076c073da5fe4618c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -668,8 +668,8 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     if (fReindex) {\n         int nFile = 0;\n         while (true) {\n-            CDiskBlockPos pos(nFile, 0);\n-            if (!fs::exists(GetBlockPosFilename(pos, \"blk\")))\n+            FlatFilePos pos(nFile, 0);\n+            if (!fs::exists(GetBlockPosFilename(pos)))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);\n             if (!file)\n@@ -1669,11 +1669,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n     // ********************************************************* Step 11: import blocks\n \n-    if (!CheckDiskSpace(/* additional_bytes */ 0, /* blocks_dir */ false)) {\n+    if (!CheckDiskSpace(GetDataDir())) {\n         InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n         return false;\n     }\n-    if (!CheckDiskSpace(/* additional_bytes */ 0, /* blocks_dir */ true)) {\n+    if (!CheckDiskSpace(GetBlocksDir())) {\n         InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n         return false;\n     }"
      },
      {
        "sha": "079a09f8f90aabd7f73ae3821d2de2a1ae87fbf4",
        "filename": "src/test/flatfile_tests.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/test/flatfile_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/test/flatfile_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/flatfile_tests.cpp?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -0,0 +1,123 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <flatfile.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(flatfile_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(flatfile_filename)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+\n+    FlatFilePos pos(456, 789);\n+\n+    FlatFileSeq seq1(data_dir, \"a\", 16 * 1024);\n+    BOOST_CHECK_EQUAL(seq1.FileName(pos), data_dir / \"a00456.dat\");\n+\n+    FlatFileSeq seq2(data_dir / \"a\", \"b\", 16 * 1024);\n+    BOOST_CHECK_EQUAL(seq2.FileName(pos), data_dir / \"a\" / \"b00456.dat\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(flatfile_open)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+    FlatFileSeq seq(data_dir, \"a\", 16 * 1024);\n+\n+    std::string line1(\"A purely peer-to-peer version of electronic cash would allow online \"\n+                      \"payments to be sent directly from one party to another without going \"\n+                      \"through a financial institution.\");\n+    std::string line2(\"Digital signatures provide part of the solution, but the main benefits are \"\n+                      \"lost if a trusted third party is still required to prevent double-spending.\");\n+\n+    size_t pos1 = 0;\n+    size_t pos2 = pos1 + GetSerializeSize(line1, CLIENT_VERSION);\n+\n+    // Write first line to file.\n+    {\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos1)), SER_DISK, CLIENT_VERSION);\n+        file << LIMITED_STRING(line1, 256);\n+    }\n+\n+    // Attempt to append to file opened in read-only mode.\n+    {\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos2), true), SER_DISK, CLIENT_VERSION);\n+        BOOST_CHECK_THROW(file << LIMITED_STRING(line2, 256), std::ios_base::failure);\n+    }\n+\n+    // Append second line to file.\n+    {\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos2)), SER_DISK, CLIENT_VERSION);\n+        file << LIMITED_STRING(line2, 256);\n+    }\n+\n+    // Read text from file in read-only mode.\n+    {\n+        std::string text;\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos1), true), SER_DISK, CLIENT_VERSION);\n+\n+        file >> LIMITED_STRING(text, 256);\n+        BOOST_CHECK_EQUAL(text, line1);\n+\n+        file >> LIMITED_STRING(text, 256);\n+        BOOST_CHECK_EQUAL(text, line2);\n+    }\n+\n+    // Read text from file with position offset.\n+    {\n+        std::string text;\n+        CAutoFile file(seq.Open(FlatFilePos(0, pos2)), SER_DISK, CLIENT_VERSION);\n+\n+        file >> LIMITED_STRING(text, 256);\n+        BOOST_CHECK_EQUAL(text, line2);\n+    }\n+\n+    // Ensure another file in the sequence has no data.\n+    {\n+        std::string text;\n+        CAutoFile file(seq.Open(FlatFilePos(1, pos2)), SER_DISK, CLIENT_VERSION);\n+        BOOST_CHECK_THROW(file >> LIMITED_STRING(text, 256), std::ios_base::failure);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(flatfile_allocate)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+    FlatFileSeq seq(data_dir, \"a\", 100);\n+\n+    bool out_of_space;\n+\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 0), 1, out_of_space), 100);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 0))), 100);\n+    BOOST_CHECK(!out_of_space);\n+\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 1, out_of_space), 0);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 100);\n+    BOOST_CHECK(!out_of_space);\n+\n+    BOOST_CHECK_EQUAL(seq.Allocate(FlatFilePos(0, 99), 2, out_of_space), 101);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 99))), 200);\n+    BOOST_CHECK(!out_of_space);\n+}\n+\n+BOOST_AUTO_TEST_CASE(flatfile_flush)\n+{\n+    auto data_dir = SetDataDir(\"flatfile_test\");\n+    FlatFileSeq seq(data_dir, \"a\", 100);\n+\n+    bool out_of_space;\n+    seq.Allocate(FlatFilePos(0, 0), 1, out_of_space);\n+\n+    // Flush without finalize should not truncate file.\n+    seq.Flush(FlatFilePos(0, 1));\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 100);\n+\n+    // Flush with finalize should truncate file.\n+    seq.Flush(FlatFilePos(0, 1), true);\n+    BOOST_CHECK_EQUAL(fs::file_size(seq.FileName(FlatFilePos(0, 1))), 1);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9594dd81bf7b8748865e3ba655d240d5b08c3cf8",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -135,6 +135,14 @@ bool DirIsWritable(const fs::path& directory)\n     return true;\n }\n \n+bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes)\n+{\n+    constexpr uint64_t min_disk_space = 52428800; // 50 MiB\n+\n+    uint64_t free_bytes_available = fs::space(dir).available;\n+    return free_bytes_available >= min_disk_space + additional_bytes;\n+}\n+\n /**\n  * Interpret a string argument as a boolean.\n  *"
      },
      {
        "sha": "54eb88e261de501f1666cf0ef66ec4294a32397d",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -72,6 +72,7 @@ bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name);\n bool DirIsWritable(const fs::path& directory);\n+bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes = 0);\n \n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks."
      },
      {
        "sha": "358992b74d1672c333271d980ea5204f369f5cc1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 119,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -15,6 +15,7 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n+#include <flatfile.h>\n #include <hash.h>\n #include <index/txindex.h>\n #include <policy/fees.h>\n@@ -165,7 +166,7 @@ class CChainState {\n      * that it doesn't descend from an invalid block, and then add it to mapBlockIndex.\n      */\n     bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n@@ -204,7 +205,7 @@ class CChainState {\n \n     void InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n \n     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -317,7 +318,9 @@ static bool FlushStateToDisk(const CChainParams& chainParams, CValidationState &\n static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n-static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly = false);\n+static FlatFileSeq BlockFileSeq();\n+static FlatFileSeq UndoFileSeq();\n \n bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n@@ -1042,7 +1045,7 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n // CBlock and CBlockIndex\n //\n \n-static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n+static bool WriteBlockToDisk(const CBlock& block, FlatFilePos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1063,7 +1066,7 @@ static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMes\n     return true;\n }\n \n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n {\n     block.SetNull();\n \n@@ -1089,7 +1092,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n \n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n-    CDiskBlockPos blockPos;\n+    FlatFilePos blockPos;\n     {\n         LOCK(cs_main);\n         blockPos = pindex->GetBlockPos();\n@@ -1103,9 +1106,9 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n     return true;\n }\n \n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start)\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start)\n {\n-    CDiskBlockPos hpos = pos;\n+    FlatFilePos hpos = pos;\n     hpos.nPos -= 8; // Seek back 8 bytes for meta header\n     CAutoFile filein(OpenBlockFile(hpos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull()) {\n@@ -1140,7 +1143,7 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos,\n \n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)\n {\n-    CDiskBlockPos block_pos;\n+    FlatFilePos block_pos;\n     {\n         LOCK(cs_main);\n         block_pos = pindex->GetBlockPos();\n@@ -1452,7 +1455,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n \n namespace {\n \n-bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)\n+bool UndoWriteToDisk(const CBlockUndo& blockundo, FlatFilePos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1481,7 +1484,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n \n static bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n-    CDiskBlockPos pos = pindex->GetUndoPos();\n+    FlatFilePos pos = pindex->GetUndoPos();\n     if (pos.IsNull()) {\n         return error(\"%s: no undo data available\", __func__);\n     }\n@@ -1627,37 +1630,24 @@ void static FlushBlockFile(bool fFinalize = false)\n {\n     LOCK(cs_LastBlockFile);\n \n-    CDiskBlockPos posOld(nLastBlockFile, 0);\n-    bool status = true;\n-\n-    FILE *fileOld = OpenBlockFile(posOld);\n-    if (fileOld) {\n-        if (fFinalize)\n-            status &= TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nSize);\n-        status &= FileCommit(fileOld);\n-        fclose(fileOld);\n-    }\n-\n-    fileOld = OpenUndoFile(posOld);\n-    if (fileOld) {\n-        if (fFinalize)\n-            status &= TruncateFile(fileOld, vinfoBlockFile[nLastBlockFile].nUndoSize);\n-        status &= FileCommit(fileOld);\n-        fclose(fileOld);\n-    }\n+    FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n+    FlatFilePos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n \n+    bool status = true;\n+    status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n+    status &= UndoFileSeq().Flush(undo_pos_old, fFinalize);\n     if (!status) {\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\n     }\n }\n \n-static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n+static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize);\n \n static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n {\n     // Write undo information to disk\n     if (pindex->GetUndoPos().IsNull()) {\n-        CDiskBlockPos _pos;\n+        FlatFilePos _pos;\n         if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, CLIENT_VERSION) + 40))\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n@@ -2134,8 +2124,9 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         // Write blocks and block index to disk.\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n-            if (!CheckDiskSpace(0, true))\n-                return state.Error(\"out of disk space\");\n+            if (!CheckDiskSpace(GetBlocksDir())) {\n+                return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+            }\n             // First make sure all block and undo data is flushed to disk.\n             FlushBlockFile();\n             // Then update all block file information (which may refer to block and undo files).\n@@ -2168,8 +2159,9 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             // twice (once in the log, and once in the tables). This is already\n             // an overestimation, as most will delete an existing entry or\n             // overwrite one. Still, use a conservative safety factor of 2.\n-            if (!CheckDiskSpace(48 * 2 * 2 * pcoinsTip->GetCacheSize()))\n-                return state.Error(\"out of disk space\");\n+            if (!CheckDiskSpace(GetDataDir(), 48 * 2 * 2 * pcoinsTip->GetCacheSize())) {\n+                return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+            }\n             // Flush the chainstate (which may refer to block index entries).\n             if (!pcoinsTip->Flush())\n                 return AbortNode(state, \"Failed to write to coin database\");\n@@ -2922,7 +2914,7 @@ CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n@@ -2968,7 +2960,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     }\n }\n \n-static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n+static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -3003,54 +2995,37 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n         vinfoBlockFile[nFile].nSize += nAddSize;\n \n     if (!fKnown) {\n-        unsigned int nOldChunks = (pos.nPos + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n-        unsigned int nNewChunks = (vinfoBlockFile[nFile].nSize + BLOCKFILE_CHUNK_SIZE - 1) / BLOCKFILE_CHUNK_SIZE;\n-        if (nNewChunks > nOldChunks) {\n-            if (fPruneMode)\n-                fCheckForPruning = true;\n-            if (CheckDiskSpace(nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos, true)) {\n-                FILE *file = OpenBlockFile(pos);\n-                if (file) {\n-                    LogPrintf(\"Pre-allocating up to position 0x%x in blk%05u.dat\\n\", nNewChunks * BLOCKFILE_CHUNK_SIZE, pos.nFile);\n-                    AllocateFileRange(file, pos.nPos, nNewChunks * BLOCKFILE_CHUNK_SIZE - pos.nPos);\n-                    fclose(file);\n-                }\n-            }\n-            else\n-                return error(\"out of disk space\");\n+        bool out_of_space;\n+        size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n+        if (out_of_space) {\n+            return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+        }\n+        if (bytes_allocated != 0 && fPruneMode) {\n+            fCheckForPruning = true;\n         }\n     }\n \n     setDirtyFileInfo.insert(nFile);\n     return true;\n }\n \n-static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize)\n+static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize)\n {\n     pos.nFile = nFile;\n \n     LOCK(cs_LastBlockFile);\n \n-    unsigned int nNewSize;\n     pos.nPos = vinfoBlockFile[nFile].nUndoSize;\n-    nNewSize = vinfoBlockFile[nFile].nUndoSize += nAddSize;\n+    vinfoBlockFile[nFile].nUndoSize += nAddSize;\n     setDirtyFileInfo.insert(nFile);\n \n-    unsigned int nOldChunks = (pos.nPos + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n-    unsigned int nNewChunks = (nNewSize + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n-    if (nNewChunks > nOldChunks) {\n-        if (fPruneMode)\n-            fCheckForPruning = true;\n-        if (CheckDiskSpace(nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos, true)) {\n-            FILE *file = OpenUndoFile(pos);\n-            if (file) {\n-                LogPrintf(\"Pre-allocating up to position 0x%x in rev%05u.dat\\n\", nNewChunks * UNDOFILE_CHUNK_SIZE, pos.nFile);\n-                AllocateFileRange(file, pos.nPos, nNewChunks * UNDOFILE_CHUNK_SIZE - pos.nPos);\n-                fclose(file);\n-            }\n-        }\n-        else\n-            return state.Error(\"out of disk space\");\n+    bool out_of_space;\n+    size_t bytes_allocated = UndoFileSeq().Allocate(pos, nAddSize, out_of_space);\n+    if (out_of_space) {\n+        return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+    }\n+    if (bytes_allocated != 0 && fPruneMode) {\n+        fCheckForPruning = true;\n     }\n \n     return true;\n@@ -3435,26 +3410,26 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidatio\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const CDiskBlockPos* dbp) {\n+static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const FlatFilePos* dbp) {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n-    CDiskBlockPos blockPos;\n+    FlatFilePos blockPos;\n     if (dbp != nullptr)\n         blockPos = *dbp;\n     if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {\n         error(\"%s: FindBlockPos failed\", __func__);\n-        return CDiskBlockPos();\n+        return FlatFilePos();\n     }\n     if (dbp == nullptr) {\n         if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {\n             AbortNode(\"Failed to write block\");\n-            return CDiskBlockPos();\n+            return FlatFilePos();\n         }\n     }\n     return blockPos;\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3516,7 +3491,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        CDiskBlockPos blockPos = SaveBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n         if (blockPos.IsNull()) {\n             state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n             return false;\n@@ -3647,9 +3622,9 @@ void PruneOneBlockFile(const int fileNumber)\n void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n-        CDiskBlockPos pos(*it, 0);\n-        fs::remove(GetBlockPosFilename(pos, \"blk\"));\n-        fs::remove(GetBlockPosFilename(pos, \"rev\"));\n+        FlatFilePos pos(*it, 0);\n+        fs::remove(BlockFileSeq().FileName(pos));\n+        fs::remove(UndoFileSeq().FileName(pos));\n         LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n     }\n }\n@@ -3757,52 +3732,28 @@ static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfte\n            nLastBlockWeCanPrune, count);\n }\n \n-bool CheckDiskSpace(uint64_t nAdditionalBytes, bool blocks_dir)\n+static FlatFileSeq BlockFileSeq()\n {\n-    uint64_t nFreeBytesAvailable = fs::space(blocks_dir ? GetBlocksDir() : GetDataDir()).available;\n-\n-    // Check for nMinDiskSpace bytes (currently 50MB)\n-    if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n-        return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n-\n-    return true;\n+    return FlatFileSeq(GetBlocksDir(), \"blk\", BLOCKFILE_CHUNK_SIZE);\n }\n \n-static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n+static FlatFileSeq UndoFileSeq()\n {\n-    if (pos.IsNull())\n-        return nullptr;\n-    fs::path path = GetBlockPosFilename(pos, prefix);\n-    fs::create_directories(path.parent_path());\n-    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n-    if (!file && !fReadOnly)\n-        file = fsbridge::fopen(path, \"wb+\");\n-    if (!file) {\n-        LogPrintf(\"Unable to open file %s\\n\", path.string());\n-        return nullptr;\n-    }\n-    if (pos.nPos) {\n-        if (fseek(file, pos.nPos, SEEK_SET)) {\n-            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n-            fclose(file);\n-            return nullptr;\n-        }\n-    }\n-    return file;\n+    return FlatFileSeq(GetBlocksDir(), \"rev\", UNDOFILE_CHUNK_SIZE);\n }\n \n-FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n-    return OpenDiskFile(pos, \"blk\", fReadOnly);\n+FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly) {\n+    return BlockFileSeq().Open(pos, fReadOnly);\n }\n \n /** Open an undo file (rev?????.dat) */\n-static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n-    return OpenDiskFile(pos, \"rev\", fReadOnly);\n+static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly) {\n+    return UndoFileSeq().Open(pos, fReadOnly);\n }\n \n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n+fs::path GetBlockPosFilename(const FlatFilePos &pos)\n {\n-    return GetBlocksDir() / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n+    return BlockFileSeq().FileName(pos);\n }\n \n CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)\n@@ -3909,7 +3860,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_RE\n     }\n     for (std::set<int>::iterator it = setBlkDataFiles.begin(); it != setBlkDataFiles.end(); it++)\n     {\n-        CDiskBlockPos pos(*it, 0);\n+        FlatFilePos pos(*it, 0);\n         if (CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION).IsNull()) {\n             return false;\n         }\n@@ -4342,7 +4293,7 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n \n     try {\n         const CBlock& block = chainparams.GenesisBlock();\n-        CDiskBlockPos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n         if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);\n         CBlockIndex *pindex = AddToBlockIndex(block);\n@@ -4359,10 +4310,10 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return g_chainstate.LoadGenesisBlock(chainparams);\n }\n \n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos *dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n-    static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n+    static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;\n     int64_t nStart = GetTimeMillis();\n \n     int nLoaded = 0;\n@@ -4448,9 +4399,9 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 while (!queue.empty()) {\n                     uint256 head = queue.front();\n                     queue.pop_front();\n-                    std::pair<std::multimap<uint256, CDiskBlockPos>::iterator, std::multimap<uint256, CDiskBlockPos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n+                    std::pair<std::multimap<uint256, FlatFilePos>::iterator, std::multimap<uint256, FlatFilePos>::iterator> range = mapBlocksUnknownParent.equal_range(head);\n                     while (range.first != range.second) {\n-                        std::multimap<uint256, CDiskBlockPos>::iterator it = range.first;\n+                        std::multimap<uint256, FlatFilePos>::iterator it = range.first;\n                         std::shared_ptr<CBlock> pblockrecursive = std::make_shared<CBlock>();\n                         if (ReadBlockFromDisk(*pblockrecursive, it->second, chainparams.GetConsensus()))\n                         {"
      },
      {
        "sha": "4ef82ee2c70702c94d85451cd64bd878703f5429",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "patch": "@@ -181,9 +181,6 @@ extern arith_uint256 nMinimumChainWork;\n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n \n-/** Minimum disk space required - used in CheckDiskSpace() */\n-static const uint64_t nMinDiskSpace = 52428800;\n-\n /** Pruning-related variables and constants */\n /** True if any block files have ever been pruned. */\n extern bool fHavePruned;\n@@ -245,14 +242,12 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  */\n bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);\n \n-/** Check whether enough disk space is available for an incoming block */\n-bool CheckDiskSpace(uint64_t nAdditionalBytes = 0, bool blocks_dir = false);\n /** Open a block file (blk?????.dat) */\n-FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+fs::path GetBlockPosFilename(const FlatFilePos &pos);\n /** Import blocks from an external file */\n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n+bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos *dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk,\n@@ -391,9 +386,9 @@ void InitScriptExecutionCache();\n \n \n /** Functions for disk access for blocks */\n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+bool ReadBlockFromDisk(CBlock& block, const FlatFilePos& pos, const Consensus::Params& consensusParams);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, const CMessageHeader::MessageStartChars& message_start);\n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n \n /** Functions for validating blocks and updating the block tree */"
      }
    ]
  },
  {
    "sha": "fa3148aacbea0e1a0ba8016b66b8d6b876c267b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMxNDhhYWNiZWEwZTFhMGJhODAxNmI2NmI4ZDZiODc2YzI2N2Iy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-03T16:22:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-03T16:37:40Z"
      },
      "message": "doc: Remove ppa from linux build instructions",
      "tree": {
        "sha": "cdd9c9304f0eab3dca067c71fc37eb16315277fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdd9c9304f0eab3dca067c71fc37eb16315277fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3148aacbea0e1a0ba8016b66b8d6b876c267b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcfALUAAoJEM4rdWl+aaVIPu0L/iMEx1JPYUNs/9IDYYScBQFK\nYn4hEOlmQkmWujqbZFYGDJipBHGboY9diMWrKI4Hft8qUZSG5hZ+/x+3Q0QWUbvs\nCrOEX1yXDYcUhsY5dGsAlE+Rhn4yVqt3u4QvIdC3rD3d6bzO/AnN8fCEvbzftU6J\nNwrlSzfdOsGTRFdzWaVrP50VFUXYTUnrkV5FhM7sEpMYa/zqNY2iY6X7cOCEVgRc\nM9IvqYPapBHinOfIenQ+noLAHN3nAP2MW9Ta+pBZ/QAyR4Ussl8TMcyQhmUVUFY5\n2RMVHsQoOBsl+X/c1Jhkq/2cBt4Vt7t8ovE42ygPj5JiVNplhSNjIMPEHbouaHLK\n3XJhxDU5EbjJr4tDf1bOrAxIzxZ2dJBNOTIl2Zr1RV3bG5572qKqqtip6R8vbpZv\nLZKHbKMMPKUUrbutJChbZS5bZszaafzQmlV8FsUPP80Z3kHpUKfqNHdHg5ldZuK+\nK2ez0sZSpHMSVB7dornN2cEU2oDGocuoGfnZq2lYWA==\n=voLN\n-----END PGP SIGNATURE-----",
        "payload": "tree cdd9c9304f0eab3dca067c71fc37eb16315277fc\nparent 77fcf252f65e7005da13784333147439fd432af6\nauthor MarcoFalke <falke.marco@gmail.com> 1551630156 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551631060 -0500\n\ndoc: Remove ppa from linux build instructions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3148aacbea0e1a0ba8016b66b8d6b876c267b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3148aacbea0e1a0ba8016b66b8d6b876c267b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3148aacbea0e1a0ba8016b66b8d6b876c267b2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77fcf252f65e7005da13784333147439fd432af6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77fcf252f65e7005da13784333147439fd432af6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77fcf252f65e7005da13784333147439fd432af6"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "da65bc347a16ef0e3a753d7685fcb9a786812d37",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3148aacbea0e1a0ba8016b66b8d6b876c267b2/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3148aacbea0e1a0ba8016b66b8d6b876c267b2/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=fa3148aacbea0e1a0ba8016b66b8d6b876c267b2",
        "patch": "@@ -78,19 +78,13 @@ Now, you can either build from self-compiled [depends](/depends/README.md) or in\n \n BerkeleyDB is required for the wallet.\n \n-**For Ubuntu only:** db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n-You can add the repository and install using the following commands:\n-\n-    sudo apt-get install software-properties-common\n-    sudo add-apt-repository ppa:bitcoin/bitcoin\n-    sudo apt-get update\n-    sudo apt-get install libdb4.8-dev libdb4.8++-dev\n-\n Ubuntu and Debian have their own libdb-dev and libdb++-dev packages, but these will install\n BerkeleyDB 5.1 or later. This will break binary wallet compatibility with the distributed executables, which\n are based on BerkeleyDB 4.8. If you do not care about wallet compatibility,\n pass `--with-incompatible-bdb` to configure.\n \n+Otherwise, you can build from self-compiled `depends` (see above).\n+\n To build Bitcoin Core without wallet, see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)\n \n "
      }
    ]
  },
  {
    "sha": "57acfcb9fd051556fc1f68ba49f109512c0cc846",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2FjZmNiOWZkMDUxNTU2ZmMxZjY4YmE0OWYxMDk1MTJjMGNjODQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-03-04T12:10:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-03-04T12:10:23Z"
      },
      "message": "Merge #15518: doc: Remove ppa from linux build instructions\n\nfa3148aacbea0e1a0ba8016b66b8d6b876c267b2 doc: Remove ppa from linux build instructions (MarcoFalke)\n\nPull request description:\n\n  bdb (5.x) is provided by the vanilla Debian/Ubuntu package manager.\n\n  If someone needs bdb4.8, they can use `./depends` or `./contrib/install_db4.sh`.\n\n  I don't think we need a forth way to install bdb. Those ppa instructions only leads to confusion for debian users: Closes #3757\n\nTree-SHA512: 54620c28dfd63f0e30f1b0f4f4f4dcb66a5bbdd3ec60621860b005eee0a70fc6a5f3babdc5719ba5d3abda7fefc720eb1d8c70633b8a20a269ebc46e6206c781",
      "tree": {
        "sha": "60a4ed8225783ebac3ee1efefa889491dfc64899",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60a4ed8225783ebac3ee1efefa889491dfc64899"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57acfcb9fd051556fc1f68ba49f109512c0cc846",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlx9Fa8ACgkQHkrtYphs\n0l0QCQgAkWNai1JcJuxoeWGRsWO4kLdmGOwyGJO5A+cSN+dH1/HkkPdEKzWLEHSR\n2zKD7HVtUPpgadLPKt9HwonSlDNQQGoggmwtRR9HTrUUQLSiOfAuDouJM4arsJWw\nSoygC3ctXUWfFaXgFhEvZfD2d3ivTPRBy0W/yks9HXmMT9eQxO0a8+kC/exINWg0\nQ5AeudriwCdUr8Vftq4f1AF+zBzxT/P0378Jb1yfh873yhactmyu5m8b3nAKrxeV\n6EtSurFcPrxd5JVoBLOIWWYr7bm8+/rX8JDERl5GyowZ9wcQzpbM6cZ2ZxPUiICG\nvg5TfXiQzZ+m8e56e/useBYS8Ihiog==\n=2Tr0\n-----END PGP SIGNATURE-----",
        "payload": "tree 60a4ed8225783ebac3ee1efefa889491dfc64899\nparent 2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e\nparent fa3148aacbea0e1a0ba8016b66b8d6b876c267b2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1551701402 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1551701423 +0100\n\nMerge #15518: doc: Remove ppa from linux build instructions\n\nfa3148aacbea0e1a0ba8016b66b8d6b876c267b2 doc: Remove ppa from linux build instructions (MarcoFalke)\n\nPull request description:\n\n  bdb (5.x) is provided by the vanilla Debian/Ubuntu package manager.\n\n  If someone needs bdb4.8, they can use `./depends` or `./contrib/install_db4.sh`.\n\n  I don't think we need a forth way to install bdb. Those ppa instructions only leads to confusion for debian users: Closes #3757\n\nTree-SHA512: 54620c28dfd63f0e30f1b0f4f4f4dcb66a5bbdd3ec60621860b005eee0a70fc6a5f3babdc5719ba5d3abda7fefc720eb1d8c70633b8a20a269ebc46e6206c781\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57acfcb9fd051556fc1f68ba49f109512c0cc846",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57acfcb9fd051556fc1f68ba49f109512c0cc846",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57acfcb9fd051556fc1f68ba49f109512c0cc846/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e"
      },
      {
        "sha": "fa3148aacbea0e1a0ba8016b66b8d6b876c267b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3148aacbea0e1a0ba8016b66b8d6b876c267b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3148aacbea0e1a0ba8016b66b8d6b876c267b2"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "da65bc347a16ef0e3a753d7685fcb9a786812d37",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57acfcb9fd051556fc1f68ba49f109512c0cc846/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57acfcb9fd051556fc1f68ba49f109512c0cc846/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=57acfcb9fd051556fc1f68ba49f109512c0cc846",
        "patch": "@@ -78,19 +78,13 @@ Now, you can either build from self-compiled [depends](/depends/README.md) or in\n \n BerkeleyDB is required for the wallet.\n \n-**For Ubuntu only:** db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n-You can add the repository and install using the following commands:\n-\n-    sudo apt-get install software-properties-common\n-    sudo add-apt-repository ppa:bitcoin/bitcoin\n-    sudo apt-get update\n-    sudo apt-get install libdb4.8-dev libdb4.8++-dev\n-\n Ubuntu and Debian have their own libdb-dev and libdb++-dev packages, but these will install\n BerkeleyDB 5.1 or later. This will break binary wallet compatibility with the distributed executables, which\n are based on BerkeleyDB 4.8. If you do not care about wallet compatibility,\n pass `--with-incompatible-bdb` to configure.\n \n+Otherwise, you can build from self-compiled `depends` (see above).\n+\n To build Bitcoin Core without wallet, see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)\n \n "
      }
    ]
  },
  {
    "sha": "45f434f44d0b55d137eaebb8c0486f9cebabc869",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWY0MzRmNDRkMGI1NWQxMzdlYWViYjhjMDQ4NmY5Y2ViYWJjODY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-04T18:13:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-04T18:13:36Z"
      },
      "message": "Merge #15288: Remove wallet -> node global function calls\n\nf7efd87c8f Change brace formatting (Russell Yanofsky)\na1df1b48a8 Remove use of IsInitialBlockDownload in wallet code (Russell Yanofsky)\n1106a6fde4 Remove use of uiInterface.LoadWallet in wallet code (Russell Yanofsky)\n318f41fb2c circular-dependencies: Avoid treating some .h/.cpp files as a unit (Russell Yanofsky)\nd02b34c8a8 Remove use of AcceptToMemoryPool in wallet code (Russell Yanofsky)\ne2c8ba9f6e Remove uses of InitMessage/Warning/Error in wallet code (Russell Yanofsky)\nc5e59a96a8 Remove uses of GetAdjustedTime in wallet code (Russell Yanofsky)\n6d6bcc77c0 Remove use of g_connman / PushInventory in wallet code (Russell Yanofsky)\n00dfb2a440 Remove uses of g_connman in wallet code (Russell Yanofsky)\ncc3836e8f9 Remove uses of fPruneMode in wallet code (Russell Yanofsky)\ncc02c796d3 Remove uses of fee globals in wallet code (Russell Yanofsky)\n1fb0a4a04e Remove use of CalculateMemPoolAncestors in wallet code (Russell Yanofsky)\ncd32160af0 Remove use of GetTransactionAncestry in wallet code (Russell Yanofsky)\n291276f7f4 Remove use of GetCountWithDescendants in wallet code (Russell Yanofsky)\nbdc6628683 Remove use of IsRBFOptIn in wallet code (Russell Yanofsky)\n80f52a2267 Remove uses of CheckFinalTx in wallet code (Russell Yanofsky)\n\nPull request description:\n\n  This change removes wallet calls to node functions that access global chain and mempool state.\n\n  This is the next step in the larger #10973 refactoring change, which removes all other accesses to node global variables from wallet code. Doing this is useful to provide a better defined interface between the wallet and node, and necessary to allow wallet and node code to run in separate processes in #10102.\n\nTree-SHA512: 40dbaf1f59fb22b32e70b054b30ba5638d638aa3240fa30e0f721d53c721cd6138a7ab4d423a24d7d2fda0b956e68d44c733abc2c9259c3d6c9fd6d4be89aa23",
      "tree": {
        "sha": "9ab40a819ccf523042a40be61476f04494ae59ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ab40a819ccf523042a40be61476f04494ae59ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45f434f44d0b55d137eaebb8c0486f9cebabc869",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcfWrRAAoJENLqSFDnUosl1BAP/0NcCqBVIZBoUbDs9EqikZvf\njv6rJseaydI3REvVGPaJgUXbXbrnA513koWkF4WSe3S4K88ZSLZ+oHluzmQksUtV\nsQkge0D3s9duabcbmxivLYlK4bhGNpqbumvJi8EsVnTJmOlPWTNH+wQ51F8QYh7L\nucGuwhC9j2+vX95fZgKWaiSUBVkFLApTnzNpgmRABQ+LZq2nRx5MdfjUo84g7cnY\n5E9t4AUWnscDTqNmbgLovQnvdx4beC7yiUr6gga1LkXP/C20QCDRu8yS0QSPtxIB\nPolVqYGUxEAHtbnYu3F7h11ejNCaty9G2PRJhoXoQCLD9BWu7+6fK2IMN0bQhuHy\ng9g/HDlMvTXQQmE+cbxMnfP6Bb4aVF7WKIZLzhndHY1tZ75/MSid8Xhaayb+duo0\nPKQbQqtmLeQUrjVuW44U/AbI9uXV7NH7vTa3pIc+vRXOPXxDDgaVrwcHBALmH2Fp\ngrlLOKFcgaGz9EGJm56lHPngR6KywIJwPn2KEoC3nq7iR1vZqIjaWHK2FTeA69v0\nYYnJG9Gk9HAVIjS3FcAigJA2M9yLaAJAq4AJ3Jb8VK1vcUcO9KGPS3hjG89ZOwD/\njYibTwNOQV1FVnx1wk6/rd41dLrOcAXIYZmGu1ndwpW1MGWN5gBkc+b91naNW+jr\nOCXKe1oVd1HwUg5pjqpn\n=C5Gh\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHV2rhWbY07OrLNKoyjK4DR3CrjYZOCTWd2LuYf8cic+CP/wEFVBrjII+jmi\nzgS4HEwFQDcI8QRcfWrT8AigJXcA6choswCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEHXm6QuwKeJnMJBrO7SCe8UI8QRcfWrT\n8AhrOXGQzzLMYwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQl0qsqEfDGl/VUF+o9xkDLgjxBFx9atPwCJx2\n3CmNn0AoAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BDFG0FnoKpRsKVh31WdrzlXCPAQMDcdPX4kE8lsVO111IpY\nUgjxBFx9atPwCFpGnCxxQzG/AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 9ab40a819ccf523042a40be61476f04494ae59ec\nparent 57acfcb9fd051556fc1f68ba49f109512c0cc846\nparent f7efd87c8fb49f82e268a95e989909d453500e2b\nauthor MarcoFalke <falke.marco@gmail.com> 1551723201 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551723216 -0500\n\nMerge #15288: Remove wallet -> node global function calls\n\nf7efd87c8f Change brace formatting (Russell Yanofsky)\na1df1b48a8 Remove use of IsInitialBlockDownload in wallet code (Russell Yanofsky)\n1106a6fde4 Remove use of uiInterface.LoadWallet in wallet code (Russell Yanofsky)\n318f41fb2c circular-dependencies: Avoid treating some .h/.cpp files as a unit (Russell Yanofsky)\nd02b34c8a8 Remove use of AcceptToMemoryPool in wallet code (Russell Yanofsky)\ne2c8ba9f6e Remove uses of InitMessage/Warning/Error in wallet code (Russell Yanofsky)\nc5e59a96a8 Remove uses of GetAdjustedTime in wallet code (Russell Yanofsky)\n6d6bcc77c0 Remove use of g_connman / PushInventory in wallet code (Russell Yanofsky)\n00dfb2a440 Remove uses of g_connman in wallet code (Russell Yanofsky)\ncc3836e8f9 Remove uses of fPruneMode in wallet code (Russell Yanofsky)\ncc02c796d3 Remove uses of fee globals in wallet code (Russell Yanofsky)\n1fb0a4a04e Remove use of CalculateMemPoolAncestors in wallet code (Russell Yanofsky)\ncd32160af0 Remove use of GetTransactionAncestry in wallet code (Russell Yanofsky)\n291276f7f4 Remove use of GetCountWithDescendants in wallet code (Russell Yanofsky)\nbdc6628683 Remove use of IsRBFOptIn in wallet code (Russell Yanofsky)\n80f52a2267 Remove uses of CheckFinalTx in wallet code (Russell Yanofsky)\n\nPull request description:\n\n  This change removes wallet calls to node functions that access global chain and mempool state.\n\n  This is the next step in the larger #10973 refactoring change, which removes all other accesses to node global variables from wallet code. Doing this is useful to provide a better defined interface between the wallet and node, and necessary to allow wallet and node code to run in separate processes in #10102.\n\nTree-SHA512: 40dbaf1f59fb22b32e70b054b30ba5638d638aa3240fa30e0f721d53c721cd6138a7ab4d423a24d7d2fda0b956e68d44c733abc2c9259c3d6c9fd6d4be89aa23\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f434f44d0b55d137eaebb8c0486f9cebabc869",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45f434f44d0b55d137eaebb8c0486f9cebabc869",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f434f44d0b55d137eaebb8c0486f9cebabc869/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57acfcb9fd051556fc1f68ba49f109512c0cc846",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57acfcb9fd051556fc1f68ba49f109512c0cc846",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57acfcb9fd051556fc1f68ba49f109512c0cc846"
      },
      {
        "sha": "f7efd87c8fb49f82e268a95e989909d453500e2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7efd87c8fb49f82e268a95e989909d453500e2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7efd87c8fb49f82e268a95e989909d453500e2b"
      }
    ],
    "stats": {
      "total": 454,
      "additions": 298,
      "deletions": 156
    },
    "files": [
      {
        "sha": "2e4657f1dd5433ad130f06cdf4d1c64a33f75960",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -8,9 +8,18 @@\n     'core_write.cpp': 'core_io.cpp',\n }\n \n+# Directories with header-based modules, where the assumption that .cpp files\n+# define functions and variables declared in corresponding .h files is\n+# incorrect.\n+HEADER_MODULE_PATHS = [\n+    'interfaces/'\n+]\n+\n def module_name(path):\n     if path in MAPPING:\n         path = MAPPING[path]\n+    if any(path.startswith(dirpath) for dirpath in HEADER_MODULE_PATHS):\n+        return path\n     if path.endswith(\".h\"):\n         return path[:-2]\n     if path.endswith(\".c\"):"
      },
      {
        "sha": "14db96325335f49d4a7152d6ae64e5aaab8af27e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -568,12 +568,14 @@ bitcoin_wallet_LDADD = \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_ZMQ) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\\n-  $(LIBSECP256K1)\n+  $(LIBSECP256K1) \\\n+  $(LIBUNIVALUE)\n \n-bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS) $(ZMQ_LIBS)\n #\n \n # bitcoinconsensus library #"
      },
      {
        "sha": "77fb416b9c6bdde3cf0bb533e108f5dd2e21b038",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -57,7 +57,7 @@ if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n endif\n \n-bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)"
      },
      {
        "sha": "fb634e73da99e80b6f17918549351b2419611c71",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -6,8 +6,19 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <interfaces/wallet.h>\n+#include <net.h>\n+#include <policy/fees.h>\n+#include <policy/policy.h>\n+#include <policy/rbf.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <protocol.h>\n #include <sync.h>\n+#include <threadsafety.h>\n+#include <timedata.h>\n+#include <txmempool.h>\n+#include <ui_interface.h>\n #include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -132,6 +143,17 @@ class LockImpl : public Chain::Lock\n         }\n         return nullopt;\n     }\n+    bool checkFinalTx(const CTransaction& tx) override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        return CheckFinalTx(tx);\n+    }\n+    bool submitToMemoryPool(CTransactionRef tx, CAmount absurd_fee, CValidationState& state) override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        return AcceptToMemoryPool(::mempool, state, tx, nullptr /* missing inputs */, nullptr /* txn replaced */,\n+            false /* bypass limits */, absurd_fee);\n+    }\n };\n \n class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>\n@@ -177,6 +199,61 @@ class ChainImpl : public Chain\n         LOCK(cs_main);\n         return GuessVerificationProgress(Params().TxData(), LookupBlockIndex(block_hash));\n     }\n+    RBFTransactionState isRBFOptIn(const CTransaction& tx) override\n+    {\n+        LOCK(::mempool.cs);\n+        return IsRBFOptIn(tx, ::mempool);\n+    }\n+    bool hasDescendantsInMempool(const uint256& txid) override\n+    {\n+        LOCK(::mempool.cs);\n+        auto it_mp = ::mempool.mapTx.find(txid);\n+        return it_mp != ::mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1;\n+    }\n+    void relayTransaction(const uint256& txid) override\n+    {\n+        CInv inv(MSG_TX, txid);\n+        g_connman->ForEachNode([&inv](CNode* node) { node->PushInventory(inv); });\n+    }\n+    void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) override\n+    {\n+        ::mempool.GetTransactionAncestry(txid, ancestors, descendants);\n+    }\n+    bool checkChainLimits(CTransactionRef tx) override\n+    {\n+        LockPoints lp;\n+        CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n+        CTxMemPool::setEntries ancestors;\n+        auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        std::string unused_error_string;\n+        LOCK(::mempool.cs);\n+        return ::mempool.CalculateMemPoolAncestors(entry, ancestors, limit_ancestor_count, limit_ancestor_size,\n+            limit_descendant_count, limit_descendant_size, unused_error_string);\n+    }\n+    CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc) override\n+    {\n+        return ::feeEstimator.estimateSmartFee(num_blocks, calc, conservative);\n+    }\n+    unsigned int estimateMaxBlocks() override\n+    {\n+        return ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    }\n+    CFeeRate mempoolMinFee() override\n+    {\n+        return ::mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    }\n+    CAmount maxTxFee() override { return ::maxTxFee; }\n+    bool getPruneMode() override { return ::fPruneMode; }\n+    bool p2pEnabled() override { return g_connman != nullptr; }\n+    bool isInitialBlockDownload() override { return IsInitialBlockDownload(); }\n+    int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n+    void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n+    void initWarning(const std::string& message) override { InitWarning(message); }\n+    void initError(const std::string& message) override { InitError(message); }\n+    void loadWallet(std::unique_ptr<Wallet> wallet) override { ::uiInterface.LoadWallet(wallet); }\n };\n \n } // namespace"
      },
      {
        "sha": "60f8570e3666a22cc2456a13e8929d504b493646",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 69,
        "deletions": 1,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -5,20 +5,27 @@\n #ifndef BITCOIN_INTERFACES_CHAIN_H\n #define BITCOIN_INTERFACES_CHAIN_H\n \n-#include <optional.h>\n+#include <optional.h>               // For Optional and nullopt\n+#include <policy/rbf.h>             // For RBFTransactionState\n+#include <primitives/transaction.h> // For CTransactionRef\n \n #include <memory>\n+#include <stddef.h>\n #include <stdint.h>\n #include <string>\n #include <vector>\n \n class CBlock;\n class CScheduler;\n+class CValidationState;\n class uint256;\n struct CBlockLocator;\n+struct FeeCalculation;\n \n namespace interfaces {\n \n+class Wallet;\n+\n //! Interface for giving wallet processes access to blockchain state.\n class Chain\n {\n@@ -102,6 +109,13 @@ class Chain\n         //! is guaranteed to be an ancestor of the block used to create the\n         //! locator.\n         virtual Optional<int> findLocatorFork(const CBlockLocator& locator) = 0;\n+\n+        //! Check if transaction will be final given chain height current time.\n+        virtual bool checkFinalTx(const CTransaction& tx) = 0;\n+\n+        //! Add transaction to memory pool if the transaction fee is below the\n+        //! amount specified by absurd_fee (as a safeguard). */\n+        virtual bool submitToMemoryPool(CTransactionRef tx, CAmount absurd_fee, CValidationState& state) = 0;\n     };\n \n     //! Return Lock interface. Chain is locked when this is called, and\n@@ -127,6 +141,60 @@ class Chain\n     //! Estimate fraction of total transactions verified if blocks up to\n     //! the specified block hash are verified.\n     virtual double guessVerificationProgress(const uint256& block_hash) = 0;\n+\n+    //! Check if transaction is RBF opt in.\n+    virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;\n+\n+    //! Check if transaction has descendants in mempool.\n+    virtual bool hasDescendantsInMempool(const uint256& txid) = 0;\n+\n+    //! Relay transaction.\n+    virtual void relayTransaction(const uint256& txid) = 0;\n+\n+    //! Calculate mempool ancestor and descendant counts for the given transaction.\n+    virtual void getTransactionAncestry(const uint256& txid, size_t& ancestors, size_t& descendants) = 0;\n+\n+    //! Check chain limits.\n+    virtual bool checkChainLimits(CTransactionRef tx) = 0;\n+\n+    //! Estimate smart fee.\n+    virtual CFeeRate estimateSmartFee(int num_blocks, bool conservative, FeeCalculation* calc = nullptr) = 0;\n+\n+    //! Fee estimator max target.\n+    virtual unsigned int estimateMaxBlocks() = 0;\n+\n+    //! Pool min fee.\n+    virtual CFeeRate mempoolMinFee() = 0;\n+\n+    //! Get node max tx fee setting (-maxtxfee).\n+    //! This could be replaced by a per-wallet max fee, as proposed at\n+    //! https://github.com/bitcoin/bitcoin/issues/15355\n+    //! But for the time being, wallets call this to access the node setting.\n+    virtual CAmount maxTxFee() = 0;\n+\n+    //! Check if pruning is enabled.\n+    virtual bool getPruneMode() = 0;\n+\n+    //! Check if p2p enabled.\n+    virtual bool p2pEnabled() = 0;\n+\n+    // Check if in IBD.\n+    virtual bool isInitialBlockDownload() = 0;\n+\n+    //! Get adjusted time.\n+    virtual int64_t getAdjustedTime() = 0;\n+\n+    //! Send init message.\n+    virtual void initMessage(const std::string& message) = 0;\n+\n+    //! Send init warning.\n+    virtual void initWarning(const std::string& message) = 0;\n+\n+    //! Send init error.\n+    virtual void initError(const std::string& message) = 0;\n+\n+    //! Send wallet load notification to the GUI.\n+    virtual void loadWallet(std::unique_ptr<Wallet> wallet) = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "6f7dce0c24686eaa7014e16014d42facc1f39894",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -275,7 +275,7 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n     {\n-        return MakeHandler(::uiInterface.LoadWallet_connect([fn](std::shared_ptr<CWallet> wallet) { fn(MakeWallet(wallet)); }));\n+        return MakeHandler(::uiInterface.LoadWallet_connect([fn](std::unique_ptr<Wallet>& wallet) { fn(std::move(wallet)); }));\n     }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {"
      },
      {
        "sha": "7abbee0912f0d2f54cf1f35f3e431e0ca7ceb933",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -56,7 +56,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n         auto locked_chain = m_wallet.chain().lock();\n         LOCK(m_wallet.cs_wallet);\n         CValidationState state;\n-        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, g_connman.get(), state)) {\n+        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, state)) {\n             reject_reason = state.GetRejectReason();\n             return false;\n         }\n@@ -99,7 +99,7 @@ WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, co\n //! Construct wallet tx status struct.\n WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n+    LockAnnotation lock(::cs_main); // Temporary, for mapBlockIndex below. Removed in upcoming commit.\n \n     WalletTxStatus result;\n     auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n@@ -109,7 +109,7 @@ WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const C\n     result.depth_in_main_chain = wtx.GetDepthInMainChain(locked_chain);\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n-    result.is_final = CheckFinalTx(*wtx.tx);\n+    result.is_final = locked_chain.checkFinalTx(*wtx.tx);\n     result.is_trusted = wtx.IsTrusted(locked_chain);\n     result.is_abandoned = wtx.isAbandoned();\n     result.is_coinbase = wtx.IsCoinBase();\n@@ -457,7 +457,7 @@ class WalletImpl : public Wallet\n     {\n         FeeCalculation fee_calc;\n         CAmount result;\n-        result = GetMinimumFee(*m_wallet, tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc);\n+        result = GetMinimumFee(*m_wallet, tx_bytes, coin_control, &fee_calc);\n         if (returned_target) *returned_target = fee_calc.returnedTarget;\n         if (reason) *reason = fee_calc.reason;\n         return result;"
      },
      {
        "sha": "f2acb8fbf59773ff556698fb1986158b3a1f9036",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -843,7 +843,8 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n     bool conservative = true;\n     if (!request.params[1].isNull()) {\n         FeeEstimateMode fee_mode;\n@@ -915,7 +916,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n+    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0], max_target);\n     double threshold = 0.95;\n     if (!request.params[1].isNull()) {\n         threshold = request.params[1].get_real();"
      },
      {
        "sha": "10979b43b0661b82bf6ee2053f29e33f28a934b8",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -4,11 +4,9 @@\n \n #include <key_io.h>\n #include <keystore.h>\n-#include <policy/fees.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n-#include <validation.h>\n \n InitInterfaces* g_rpc_interfaces = nullptr;\n \n@@ -130,10 +128,9 @@ UniValue DescribeAddress(const CTxDestination& dest)\n     return boost::apply_visitor(DescribeAddressVisitor(), dest);\n }\n \n-unsigned int ParseConfirmTarget(const UniValue& value)\n+unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target)\n {\n     int target = value.get_int();\n-    unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     if (target < 1 || (unsigned int)target > max_target) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid conf_target, must be between %u - %u\", 1, max_target));\n     }"
      },
      {
        "sha": "e4cc1fde441a9ea0d676c5bb84ef16d7dad465cf",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -33,7 +33,7 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n UniValue DescribeAddress(const CTxDestination& dest);\n \n //! Parse a confirm target option and raise an RPC error if it is invalid.\n-unsigned int ParseConfirmTarget(const UniValue& value);\n+unsigned int ParseConfirmTarget(const UniValue& value, unsigned int max_target);\n \n RPCErrorCode RPCErrorFromTransactionError(TransactionError terr);\n UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_string = \"\");"
      },
      {
        "sha": "16ab24686b11799c7268e9cfa70b7da51be04463",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -52,7 +52,7 @@ void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_s\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }\n-void CClientUIInterface::LoadWallet(std::shared_ptr<CWallet> wallet) { return g_ui_signals.LoadWallet(wallet); }\n+void CClientUIInterface::LoadWallet(std::unique_ptr<interfaces::Wallet>& wallet) { return g_ui_signals.LoadWallet(wallet); }\n void CClientUIInterface::ShowProgress(const std::string& title, int nProgress, bool resume_possible) { return g_ui_signals.ShowProgress(title, nProgress, resume_possible); }\n void CClientUIInterface::NotifyBlockTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyBlockTip(b, i); }\n void CClientUIInterface::NotifyHeaderTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyHeaderTip(b, i); }"
      },
      {
        "sha": "f1aebce3bb48a518fa7fe457816f0d06738f222f",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -11,14 +11,17 @@\n #include <stdint.h>\n #include <string>\n \n-class CWallet;\n class CBlockIndex;\n namespace boost {\n namespace signals2 {\n class connection;\n }\n } // namespace boost\n \n+namespace interfaces {\n+class Wallet;\n+} // namespace interfaces\n+\n /** General change type (added, updated, removed). */\n enum ChangeType\n {\n@@ -102,7 +105,7 @@ class CClientUIInterface\n     ADD_SIGNALS_DECL_WRAPPER(NotifyAlertChanged, void, );\n \n     /** A wallet has been loaded. */\n-    ADD_SIGNALS_DECL_WRAPPER(LoadWallet, void, std::shared_ptr<CWallet> wallet);\n+    ADD_SIGNALS_DECL_WRAPPER(LoadWallet, void, std::unique_ptr<interfaces::Wallet>& wallet);\n \n     /**\n      * Show progress e.g. for verifychain."
      },
      {
        "sha": "a1c3a21d4b186e61b974d9fcd39036c8e98ecaca",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -27,9 +27,7 @@ static feebumper::Result PreconditionChecks(interfaces::Chain::Lock& locked_chai\n     }\n \n     {\n-        LOCK(mempool.cs);\n-        auto it_mp = mempool.mapTx.find(wtx.GetHash());\n-        if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n+        if (wallet->chain().hasDescendantsInMempool(wtx.GetHash())) {\n             errors.push_back(\"Transaction has descendants in the mempool\");\n             return feebumper::Result::INVALID_PARAMETER;\n         }\n@@ -146,7 +144,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         new_fee = total_fee;\n         nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n     } else {\n-        new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, nullptr /* FeeCalculation */);\n         nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n@@ -197,7 +195,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n \n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n-    if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet, ::feeEstimator))) {\n+    if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet))) {\n         wallet->WalletLogPrintf(\"Bumping fee and discarding dust output\\n\");\n         new_fee += poutput->nValue;\n         mtx.vout.erase(mtx.vout.begin() + nOutput);\n@@ -247,7 +245,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n \n     CReserveKey reservekey(wallet);\n     CValidationState state;\n-    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, reservekey, g_connman.get(), state)) {\n+    if (!wallet->CommitTransaction(tx, std::move(mapValue), oldWtx.vOrderForm, reservekey, state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n         errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;"
      },
      {
        "sha": "545adaebc18c97450343fa3dd7706354c3ea3bac",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -6,7 +6,6 @@\n #include <wallet/fees.h>\n \n #include <policy/policy.h>\n-#include <txmempool.h>\n #include <util/system.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n@@ -19,9 +18,9 @@ CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes)\n }\n \n \n-CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)\n+CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, FeeCalculation* feeCalc)\n {\n-    CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, pool, estimator, feeCalc).GetFee(nTxBytes);\n+    CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, feeCalc).GetFee(nTxBytes);\n     // Always obey the maximum\n     if (fee_needed > maxTxFee) {\n         fee_needed = maxTxFee;\n@@ -35,7 +34,7 @@ CFeeRate GetRequiredFeeRate(const CWallet& wallet)\n     return std::max(wallet.m_min_fee, ::minRelayTxFee);\n }\n \n-CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)\n+CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, FeeCalculation* feeCalc)\n {\n     /* User control of how to calculate fee uses the following parameter precedence:\n        1. coin_control.m_feerate\n@@ -64,7 +63,7 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n         if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n         else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n \n-        feerate_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate);\n+        feerate_needed = wallet.chain().estimateSmartFee(target, conservative_estimate, feeCalc);\n         if (feerate_needed == CFeeRate(0)) {\n             // if we don't have enough data for estimateSmartFee, then use fallback fee\n             feerate_needed = wallet.m_fallback_fee;\n@@ -74,7 +73,7 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n             if (wallet.m_fallback_fee == CFeeRate(0)) return feerate_needed;\n         }\n         // Obey mempool min fee when using smart fee estimation\n-        CFeeRate min_mempool_feerate = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        CFeeRate min_mempool_feerate = wallet.chain().mempoolMinFee();\n         if (feerate_needed < min_mempool_feerate) {\n             feerate_needed = min_mempool_feerate;\n             if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n@@ -90,10 +89,10 @@ CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_contr\n     return feerate_needed;\n }\n \n-CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator)\n+CFeeRate GetDiscardRate(const CWallet& wallet)\n {\n-    unsigned int highest_target = estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n-    CFeeRate discard_rate = estimator.estimateSmartFee(highest_target, nullptr /* FeeCalculation */, false /* conservative */);\n+    unsigned int highest_target = wallet.chain().estimateMaxBlocks();\n+    CFeeRate discard_rate = wallet.chain().estimateSmartFee(highest_target, false /* conservative */);\n     // Don't let discard_rate be greater than longest possible fee estimate if we get a valid fee estimate\n     discard_rate = (discard_rate == CFeeRate(0)) ? wallet.m_discard_rate : std::min(discard_rate, wallet.m_discard_rate);\n     // Discard rate must be at least dustRelayFee"
      },
      {
        "sha": "434f211dc243c15be2c05e981497267eec766d99",
        "filename": "src/wallet/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.h?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -8,10 +8,8 @@\n \n #include <amount.h>\n \n-class CBlockPolicyEstimator;\n class CCoinControl;\n class CFeeRate;\n-class CTxMemPool;\n class CWallet;\n struct FeeCalculation;\n \n@@ -25,7 +23,7 @@ CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes);\n  * Estimate the minimum fee considering user set parameters\n  * and the required fee\n  */\n-CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);\n+CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, FeeCalculation* feeCalc);\n \n /**\n  * Return the minimum required feerate taking into account the\n@@ -37,11 +35,11 @@ CFeeRate GetRequiredFeeRate(const CWallet& wallet);\n  * Estimate the minimum fee rate considering user set parameters\n  * and the required fee\n  */\n-CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);\n+CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, FeeCalculation* feeCalc);\n \n /**\n  * Return the maximum feerate for discarding change.\n  */\n-CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator);\n+CFeeRate GetDiscardRate(const CWallet& wallet);\n \n #endif // BITCOIN_WALLET_FEES_H"
      },
      {
        "sha": "7ad343c15fc873d5317151566416c8d87f67fe9e",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -138,12 +138,15 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n         if (error || !fs::exists(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            return false;\n         } else if (!fs::is_directory(wallet_dir)) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            return false;\n         // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version\n         } else if (!wallet_dir.is_absolute()) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            return false;\n         }\n         gArgs.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n     }\n@@ -164,14 +167,15 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         WalletLocation location(wallet_file);\n \n         if (!wallet_paths.insert(location.GetPath()).second) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+            chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+            return false;\n         }\n \n         std::string error_string;\n         std::string warning_string;\n         bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warning_string);\n-        if (!error_string.empty()) InitError(error_string);\n-        if (!warning_string.empty()) InitWarning(warning_string);\n+        if (!error_string.empty()) chain.initError(error_string);\n+        if (!warning_string.empty()) chain.initWarning(warning_string);\n         if (!verify_success) return false;\n     }\n "
      },
      {
        "sha": "684d900478924a81acce9a196376c32b0e804d37",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -157,8 +157,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (!request.params[2].isNull())\n             fRescan = request.params[2].get_bool();\n \n-        if (fRescan && fPruneMode)\n+        if (fRescan && pwallet->chain().getPruneMode()) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+        }\n \n         if (fRescan && !reserver.reserve()) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n@@ -313,8 +314,9 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n+    if (fRescan && pwallet->chain().getPruneMode()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     if (fRescan && !reserver.reserve()) {\n@@ -501,8 +503,9 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n-    if (fRescan && fPruneMode)\n+    if (fRescan && pwallet->chain().getPruneMode()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     if (fRescan && !reserver.reserve()) {\n@@ -562,8 +565,9 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    if (fPruneMode)\n+    if (pwallet->chain().getPruneMode()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n+    }\n \n     WalletRescanReserver reserver(pwallet);\n     if (!reserver.reserve()) {"
      },
      {
        "sha": "31a3209a49e770843f48990be6fd79f7b51d2cbd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -123,8 +123,7 @@ static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& lo\n     // Add opt-in RBF status\n     std::string rbfStatus = \"no\";\n     if (confirms <= 0) {\n-        LOCK(mempool.cs);\n-        RBFTransactionState rbfState = IsRBFOptIn(*wtx.tx, mempool);\n+        RBFTransactionState rbfState = chain.isRBFOptIn(*wtx.tx);\n         if (rbfState == RBFTransactionState::UNKNOWN)\n             rbfStatus = \"unknown\";\n         else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125)\n@@ -318,7 +317,7 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n     if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    if (pwallet->GetBroadcastTransactions() && !g_connman) {\n+    if (pwallet->GetBroadcastTransactions() && !pwallet->chain().p2pEnabled()) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n@@ -340,7 +339,7 @@ static CTransactionRef SendMoney(interfaces::Chain::Lock& locked_chain, CWallet\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, reservekey, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, reservekey, state)) {\n         strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n@@ -424,7 +423,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n     }\n \n     if (!request.params[6].isNull()) {\n-        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6], pwallet->chain().estimateMaxBlocks());\n     }\n \n     if (!request.params[7].isNull()) {\n@@ -606,7 +605,6 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -629,8 +627,9 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n             continue;\n+        }\n \n         for (const CTxOut& txout : wtx.tx->vout)\n             if (txout.scriptPubKey == scriptPubKey)\n@@ -678,7 +677,6 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n@@ -695,8 +693,9 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n     CAmount nAmount = 0;\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain->checkFinalTx(*wtx.tx)) {\n             continue;\n+        }\n \n         for (const CTxOut& txout : wtx.tx->vout)\n         {\n@@ -860,7 +859,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    if (pwallet->GetBroadcastTransactions() && !g_connman) {\n+    if (pwallet->GetBroadcastTransactions() && !pwallet->chain().p2pEnabled()) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n@@ -886,7 +885,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     }\n \n     if (!request.params[6].isNull()) {\n-        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6]);\n+        coin_control.m_confirm_target = ParseConfirmTarget(request.params[6], pwallet->chain().estimateMaxBlocks());\n     }\n \n     if (!request.params[7].isNull()) {\n@@ -948,7 +947,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n-    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, keyChange, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */, keyChange, state)) {\n         strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n@@ -1050,8 +1049,6 @@ struct tallyitem\n \n static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n-\n     // Minimum confirmations\n     int nMinDepth = 1;\n     if (!params[0].isNull())\n@@ -1082,8 +1079,9 @@ static UniValue ListReceived(interfaces::Chain::Lock& locked_chain, CWallet * co\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         const CWalletTx& wtx = pairWtx.second;\n \n-        if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n+        if (wtx.IsCoinBase() || !locked_chain.checkFinalTx(*wtx.tx)) {\n             continue;\n+        }\n \n         int nDepth = wtx.GetDepthInMainChain(locked_chain);\n         if (nDepth < nMinDepth)\n@@ -2694,8 +2692,9 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n              }.ToString()\n             );\n \n-    if (!g_connman)\n+    if (!pwallet->chain().p2pEnabled()) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n@@ -2704,7 +2703,7 @@ static UniValue resendwallettransactions(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\");\n     }\n \n-    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(*locked_chain, GetTime(), g_connman.get());\n+    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(*locked_chain, GetTime());\n     UniValue result(UniValue::VARR);\n     for (const uint256& txid : txids)\n     {\n@@ -2993,7 +2992,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             if (options.exists(\"feeRate\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate\");\n             }\n-            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"]);\n+            coinControl.m_confirm_target = ParseConfirmTarget(options[\"conf_target\"], pwallet->chain().estimateMaxBlocks());\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (options.exists(\"feeRate\")) {\n@@ -3283,7 +3282,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n         } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n-            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"]);\n+            coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"], pwallet->chain().estimateMaxBlocks());\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n             if (totalFee <= 0) {\n@@ -3837,7 +3836,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n             }.ToString());\n     }\n \n-    if (IsInitialBlockDownload()) {\n+    if (pwallet->chain().isInitialBlockDownload()) {\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");\n     }\n "
      },
      {
        "sha": "af57dbf5f6dbe25ab9d24f69a4edc29ac82c1742",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -368,7 +368,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         CCoinControl dummy;\n         BOOST_CHECK(wallet->CreateTransaction(*m_locked_chain, {recipient}, tx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n-        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservekey, nullptr, state));\n+        BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, reservekey, state));\n         CMutableTransaction blocktx;\n         {\n             LOCK(wallet->cs_wallet);"
      },
      {
        "sha": "02f3a265d9b0841f98eb3355b04141dfbf48133b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 80,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -12,6 +12,7 @@\n #include <consensus/validation.h>\n #include <fs.h>\n #include <interfaces/chain.h>\n+#include <interfaces/wallet.h>\n #include <key.h>\n #include <key_io.h>\n #include <keystore.h>\n@@ -940,7 +941,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     wtx.BindWallet(this);\n     bool fInsertedNew = ret.second;\n     if (fInsertedNew) {\n-        wtx.nTimeReceived = GetAdjustedTime();\n+        wtx.nTimeReceived = chain().getAdjustedTime();\n         wtx.nOrderPos = IncOrderPosNext(&batch);\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         wtx.nTimeSmart = ComputeTimeSmart(wtx);\n@@ -1886,25 +1887,21 @@ void CWallet::ReacceptWalletTransactions()\n     for (const std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n         CValidationState state;\n-        wtx.AcceptToMemoryPool(*locked_chain, maxTxFee, state);\n+        wtx.AcceptToMemoryPool(*locked_chain, state);\n     }\n }\n \n-bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CConnman* connman)\n+bool CWalletTx::RelayWalletTransaction(interfaces::Chain::Lock& locked_chain)\n {\n     assert(pwallet->GetBroadcastTransactions());\n     if (!IsCoinBase() && !isAbandoned() && GetDepthInMainChain(locked_chain) == 0)\n     {\n         CValidationState state;\n         /* GetDepthInMainChain already catches known conflicts. */\n-        if (InMempool() || AcceptToMemoryPool(locked_chain, maxTxFee, state)) {\n+        if (InMempool() || AcceptToMemoryPool(locked_chain, state)) {\n             pwallet->WalletLogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n-            if (connman) {\n-                CInv inv(MSG_TX, GetHash());\n-                connman->ForEachNode([&inv](CNode* pnode)\n-                {\n-                    pnode->PushInventory(inv);\n-                });\n+            if (pwallet->chain().p2pEnabled()) {\n+                pwallet->chain().relayTransaction(GetHash());\n                 return true;\n             }\n         }\n@@ -2075,11 +2072,10 @@ bool CWalletTx::InMempool() const\n \n bool CWalletTx::IsTrusted(interfaces::Chain::Lock& locked_chain) const\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n-\n     // Quick answer in most cases\n-    if (!CheckFinalTx(*tx))\n+    if (!locked_chain.checkFinalTx(*tx)) {\n         return false;\n+    }\n     int nDepth = GetDepthInMainChain(locked_chain);\n     if (nDepth >= 1)\n         return true;\n@@ -2115,7 +2111,7 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime, CConnman* connman)\n+std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime)\n {\n     std::vector<uint256> result;\n \n@@ -2134,8 +2130,9 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::\n     for (const std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n-        if (wtx.RelayWalletTransaction(locked_chain, connman))\n+        if (wtx.RelayWalletTransaction(locked_chain)) {\n             result.push_back(wtx.GetHash());\n+        }\n     }\n     return result;\n }\n@@ -2159,7 +2156,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n     // Rebroadcast unconfirmed txes older than 5 minutes before the last\n     // block was found:\n     auto locked_chain = chain().assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n-    std::vector<uint256> relayed = ResendWalletTransactionsBefore(*locked_chain, nBestBlockTime-5*60, connman);\n+    std::vector<uint256> relayed = ResendWalletTransactionsBefore(*locked_chain, nBestBlockTime-5*60);\n     if (!relayed.empty())\n         WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n }\n@@ -2263,15 +2260,14 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n // trusted.\n CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth) const\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n     auto locked_chain = chain().lock();\n     LOCK(cs_wallet);\n \n     CAmount balance = 0;\n     for (const auto& entry : mapWallet) {\n         const CWalletTx& wtx = entry.second;\n         const int depth = wtx.GetDepthInMainChain(*locked_chain);\n-        if (depth < 0 || !CheckFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase(*locked_chain)) {\n+        if (depth < 0 || !locked_chain->checkFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase(*locked_chain)) {\n             continue;\n         }\n \n@@ -2325,8 +2321,9 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         const uint256& wtxid = entry.first;\n         const CWalletTx* pcoin = &entry.second;\n \n-        if (!CheckFinalTx(*pcoin->tx))\n+        if (!locked_chain.checkFinalTx(*pcoin->tx)) {\n             continue;\n+        }\n \n         if (pcoin->IsImmatureCoinBase(locked_chain))\n             continue;\n@@ -2488,10 +2485,10 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         FeeCalculation feeCalc;\n         CCoinControl temp;\n         temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, ::mempool, ::feeEstimator, &feeCalc);\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n         // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this, ::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n         // Filter by the min conf specs and add to utxo_pool and calculate effective value\n         for (OutputGroup& group : groups) {\n@@ -2861,10 +2858,10 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n \n-            CFeeRate discard_rate = GetDiscardRate(*this, ::feeEstimator);\n+            CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n \n             nFeeRet = 0;\n             bool pick_new_inputs = true;\n@@ -2997,7 +2994,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     return false;\n                 }\n \n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n                 if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n                     // eventually allow a fallback fee\n                     strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n@@ -3025,7 +3022,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     // change output. Only try this once.\n                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n                         unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, ::mempool, ::feeEstimator, nullptr);\n+                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n                         CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n                             pick_new_inputs = false;\n@@ -3130,16 +3127,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n     if (gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n-        LockPoints lp;\n-        CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n-        CTxMemPool::setEntries setAncestors;\n-        size_t nLimitAncestors = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        size_t nLimitAncestorSize = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000;\n-        size_t nLimitDescendants = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        size_t nLimitDescendantSize = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000;\n-        std::string errString;\n-        LOCK(::mempool.cs);\n-        if (!::mempool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants, nLimitDescendantSize, errString)) {\n+        if (!chain().checkChainLimits(tx)) {\n             strFailReason = _(\"Transaction has too long of a mempool chain\");\n             return false;\n         }\n@@ -3159,7 +3147,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n+bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state)\n {\n     {\n         auto locked_chain = chain().lock();\n@@ -3196,11 +3184,11 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtx.AcceptToMemoryPool(*locked_chain, maxTxFee, state)) {\n+            if (!wtx.AcceptToMemoryPool(*locked_chain, state)) {\n                 WalletLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n-                wtx.RelayWalletTransaction(*locked_chain, connman);\n+                wtx.RelayWalletTransaction(*locked_chain);\n             }\n         }\n     }\n@@ -4092,17 +4080,17 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     std::vector<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n-        uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n+        chain.initMessage(_(\"Zapping all transactions from wallet...\"));\n \n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n             return nullptr;\n         }\n     }\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+    chain.initMessage(_(\"Loading wallet...\"));\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n@@ -4113,26 +4101,26 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n-            InitWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                         \" or address book entries might be missing or incorrect.\"),\n+            chain.initWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+                                          \" or address book entries might be missing or incorrect.\"),\n                 walletFile));\n         }\n         else if (nLoadWalletRet == DBErrors::TOO_NEW) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n         {\n-            InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n+            chain.initError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n             return nullptr;\n         }\n         else {\n-            InitError(strprintf(_(\"Error loading %s\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s\"), walletFile));\n             return nullptr;\n         }\n     }\n@@ -4151,7 +4139,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n-            InitError(_(\"Cannot downgrade wallet\"));\n+            chain.initError(_(\"Cannot downgrade wallet\"));\n             return nullptr;\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n@@ -4164,7 +4152,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n         int max_version = walletInstance->nWalletVersion;\n         if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >=FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            InitError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n+            chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n             return nullptr;\n         }\n \n@@ -4192,7 +4180,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n             if (!walletInstance->TopUpKeyPool()) {\n-                InitError(_(\"Unable to generate keys\"));\n+                chain.initError(_(\"Unable to generate keys\"));\n                 return nullptr;\n             }\n         }\n@@ -4216,42 +4204,42 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // Top up the keypool\n         if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n-            InitError(_(\"Unable to generate initial keys\"));\n+            chain.initError(_(\"Unable to generate initial keys\"));\n             return nullptr;\n         }\n \n         auto locked_chain = chain.assumeLocked();  // Temporary. Removed in upcoming lock cleanup\n         walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n-        InitError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile));\n+        chain.initError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile));\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         LOCK(walletInstance->cs_KeyStore);\n         if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n-            InitWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n+            chain.initWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n         }\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n-        InitError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n+        chain.initError(strprintf(\"Unknown address type '%s'\", gArgs.GetArg(\"-addresstype\", \"\")));\n         return nullptr;\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n-        InitError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n+        chain.initError(strprintf(\"Unknown change type '%s'\", gArgs.GetArg(\"-changetype\", \"\")));\n         return nullptr;\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n-            InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n+            chain.initError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n             return nullptr;\n         }\n         if (n > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n-                        _(\"This is the minimum transaction fee you pay on every transaction.\"));\n+            chain.initWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n+                              _(\"This is the minimum transaction fee you pay on every transaction.\"));\n         }\n         walletInstance->m_min_fee = CFeeRate(n);\n     }\n@@ -4260,41 +4248,41 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n-                        _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n+            chain.initWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n+                              _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         }\n         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n         walletInstance->m_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n     }\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n-                        _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n+            chain.initWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n+                              _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n         }\n         walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n     }\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n-            InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n+            chain.initError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n-                        _(\"This is the transaction fee you will pay if you send a transaction.\"));\n+            chain.initWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n+                              _(\"This is the transaction fee you will pay if you send a transaction.\"));\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < ::minRelayTxFee) {\n-            InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+            chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n                 gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n             return nullptr;\n         }\n@@ -4335,20 +4323,19 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n         //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n-        if (fPruneMode)\n-        {\n+        if (chain.getPruneMode()) {\n             int block_height = *tip_height;\n             while (block_height > 0 && locked_chain->haveBlockOnDisk(block_height - 1) && rescan_height != block_height) {\n                 --block_height;\n             }\n \n             if (rescan_height != block_height) {\n-                InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+                chain.initError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n                 return nullptr;\n             }\n         }\n \n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        chain.initMessage(_(\"Rescanning...\"));\n         walletInstance->WalletLogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", *tip_height - rescan_height, rescan_height);\n \n         // No need to read and scan block if block was created before\n@@ -4363,7 +4350,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         {\n             WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), {} /* stop block */, reserver, true /* update */).status)) {\n-                InitError(_(\"Failed to rescan the wallet during initialization\"));\n+                chain.initError(_(\"Failed to rescan the wallet during initialization\"));\n                 return nullptr;\n             }\n         }\n@@ -4396,7 +4383,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    uiInterface.LoadWallet(walletInstance);\n+    chain.loadWallet(interfaces::MakeWallet(walletInstance));\n \n     // Register with the validation interface. It's ok to do this after rescan since we're still holding cs_main.\n     RegisterValidationInterface(walletInstance.get());\n@@ -4479,17 +4466,14 @@ bool CMerkleTx::IsImmatureCoinBase(interfaces::Chain::Lock& locked_chain) const\n     return GetBlocksToMaturity(locked_chain) > 0;\n }\n \n-bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state)\n+bool CWalletTx::AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for AcceptToMemoryPool below. Removed in upcoming commit.\n-\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors\n     // because we think that this newly generated transaction's change is\n     // unavailable as we're not yet aware that it is in the mempool.\n-    bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n+    bool ret = locked_chain.submitToMemoryPool(tx, pwallet->chain().maxTxFee(), state);\n     fInMempool |= ret;\n     return ret;\n }\n@@ -4520,7 +4504,7 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n             CInputCoin input_coin = output.GetInputCoin();\n \n             size_t ancestors, descendants;\n-            mempool.GetTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+            chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n             if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n                 // Limit output groups to no more than 10 entries, to protect\n                 // against inadvertently creating a too-large transaction"
      },
      {
        "sha": "51e3edac34e234305dd4885f59340e40a22c6b0d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f434f44d0b55d137eaebb8c0486f9cebabc869/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "patch": "@@ -100,8 +100,6 @@ class CCoinControl;\n class COutput;\n class CReserveKey;\n class CScript;\n-class CTxMemPool;\n-class CBlockPolicyEstimator;\n class CWalletTx;\n struct FeeCalculation;\n enum class FeeEstimateMode;\n@@ -537,10 +535,10 @@ class CWalletTx : public CMerkleTx\n     int64_t GetTxTime() const;\n \n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n-    bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain, CConnman* connman);\n+    bool RelayWalletTransaction(interfaces::Chain::Lock& locked_chain);\n \n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, const CAmount& nAbsurdFee, CValidationState& state);\n+    bool AcceptToMemoryPool(interfaces::Chain::Lock& locked_chain, CValidationState& state);\n \n     // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n     // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The annotation\n@@ -946,7 +944,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n-    std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime, CConnman* connman);\n+    std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime);\n     CAmount GetBalance(const isminefilter& filter=ISMINE_SPENDABLE, const int min_depth=0) const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n@@ -971,7 +969,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool CreateTransaction(interfaces::Chain::Lock& locked_chain, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n-    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n+    bool CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm, CReserveKey& reservekey, CValidationState& state);\n \n     bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n     {"
      }
    ]
  },
  {
    "sha": "14023c966c51a0a14a2e4477fbe3e5d810f91076",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDAyM2M5NjZjNTFhMGExNGEyZTQ0NzdmYmUzZTVkODEwZjkxMDc2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-04T18:39:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-04T18:39:09Z"
      },
      "message": "Merge #15479: test: Add .style.yapf\n\nfa45123f66 test: Add .style.yapf (MarcoFalke)\n\nPull request description:\n\n  This can *optionally* be used to format any added code before submitting a pull. I use this heavily and wouldn't want to hold it back from others, now that yapf is referred to in https://github.com/bitcoin/bitcoin/blob/master/doc/productivity.md#format-python-diffs-with-yapf-diffpy\n\nTree-SHA512: 0f3d8bcbb76a710d9faa1226202073e8d967a82a05fc002cd10305ff58b382f5ff3df96a6faaec5bd01613d41f5fc2343e4999fb1217bf1f24f6da186d572ca1",
      "tree": {
        "sha": "f0a1c6cd7dbfe55b56e6e0c70f373f326129056c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0a1c6cd7dbfe55b56e6e0c70f373f326129056c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14023c966c51a0a14a2e4477fbe3e5d810f91076",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcfXDNAAoJENLqSFDnUoslwFAQAIcicTenc4/xjIcyrqSmsC99\nVJ0qpamDhL1w8eCZlTU+dSwJr3e5HPyHOWcYqi/76YocJdbbLRhkabktKkp7wDEo\nmLgNYH04e7X9NTBZ3LdpO66YoaHScJlcbxbVkLMqgUilHh8Sm21U1+Re6H8o+2Pr\nOAHn9EMGqxfMi80R/W6/UYB26GN5ePerziEFm/IoC+8jwCdSrH+43jecAE3V7fcc\ntFSUnfbTp9mJ/ntUaiULcLHxpGnBV2kX0L2hHopnRvW12u64smV7UAUVoWwgaAB6\nFbZLSgCRnridgIsufvfwTcDMHdXdDNpy2thHK5BqDGRfv6iDyNKXuhV2vp0jCZs8\nxocL+pdgc9laeiqJQRq7IHKRhniBEAlE2A0RZYixxuP68E4Tk1exG4XfEakhbiFx\n3+jLKN6B+hdq6eKPU2a3hybid0CqwaG15NjIzBIUk1lZbaV7Ea8MV+4mItvXAdSt\nKmQ645A2NqRNUSKtWA1M7GMTTbGtu68U0h/IUjyHSawZuBV59o8dJ3aKfA8vUJlL\niDo57aOx48jk4OyLv22VHaQOAICXqzWjy0KVySX4+G8KM1rnzkGl/kIEb86813t7\nZp9/ZnqbKCT/sDk8pFIXTdJ1/CZepNoPkKbLwgT4nPnBiNWAYg0jOfaWSL3+sfk0\nxuMtsdL8F+r04fHpTRZd\n=9FJp\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFtTF2wRMjh25cWzm33RO0br28pfpp61JYncgHYukxmmCP/wEFN+6dIqGe0B\nFMwV9eZw0pwI8QRcfXDQ8AjuUTtkfx0VnwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEHctBZRxf0Hj6gb/+qjz\nX+AI8BADNwJcYWxnP7d3ooo6oxLyCPEEXH1w0fAITM3lQmpkBtQAg9/jDS75DI4p\nKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BCbLLNU\nFiYoFoKqRfyFDIW3CPEEXH1w0PAIvuf6nV9Zo1kAg9/jDS75DI4jImh0dHBzOi8v\nYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wEPZhJ6zbSt8VVFhTNUheQskI8QRc\nfXDQ8AjUfVqN86dylACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f0a1c6cd7dbfe55b56e6e0c70f373f326129056c\nparent 45f434f44d0b55d137eaebb8c0486f9cebabc869\nparent fa45123f66f42efc32bebae39bd1296908aaabdc\nauthor MarcoFalke <falke.marco@gmail.com> 1551724740 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551724749 -0500\n\nMerge #15479: test: Add .style.yapf\n\nfa45123f66 test: Add .style.yapf (MarcoFalke)\n\nPull request description:\n\n  This can *optionally* be used to format any added code before submitting a pull. I use this heavily and wouldn't want to hold it back from others, now that yapf is referred to in https://github.com/bitcoin/bitcoin/blob/master/doc/productivity.md#format-python-diffs-with-yapf-diffpy\n\nTree-SHA512: 0f3d8bcbb76a710d9faa1226202073e8d967a82a05fc002cd10305ff58b382f5ff3df96a6faaec5bd01613d41f5fc2343e4999fb1217bf1f24f6da186d572ca1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14023c966c51a0a14a2e4477fbe3e5d810f91076",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14023c966c51a0a14a2e4477fbe3e5d810f91076",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14023c966c51a0a14a2e4477fbe3e5d810f91076/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f434f44d0b55d137eaebb8c0486f9cebabc869",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45f434f44d0b55d137eaebb8c0486f9cebabc869"
      },
      {
        "sha": "fa45123f66f42efc32bebae39bd1296908aaabdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa45123f66f42efc32bebae39bd1296908aaabdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa45123f66f42efc32bebae39bd1296908aaabdc"
      }
    ],
    "stats": {
      "total": 261,
      "additions": 261,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe6227baf66b7c25de1195d9242a14b365f2be14",
        "filename": ".style.yapf",
        "status": "added",
        "additions": 261,
        "deletions": 0,
        "changes": 261,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14023c966c51a0a14a2e4477fbe3e5d810f91076/.style.yapf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14023c966c51a0a14a2e4477fbe3e5d810f91076/.style.yapf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.style.yapf?ref=14023c966c51a0a14a2e4477fbe3e5d810f91076",
        "patch": "@@ -0,0 +1,261 @@\n+[style]\n+# Align closing bracket with visual indentation.\n+align_closing_bracket_with_visual_indent=True\n+\n+# Allow dictionary keys to exist on multiple lines. For example:\n+#\n+#   x = {\n+#       ('this is the first element of a tuple',\n+#        'this is the second element of a tuple'):\n+#            value,\n+#   }\n+allow_multiline_dictionary_keys=False\n+\n+# Allow lambdas to be formatted on more than one line.\n+allow_multiline_lambdas=False\n+\n+# Allow splits before the dictionary value.\n+allow_split_before_dict_value=True\n+\n+# Number of blank lines surrounding top-level function and class\n+# definitions.\n+blank_lines_around_top_level_definition=2\n+\n+# Insert a blank line before a class-level docstring.\n+blank_line_before_class_docstring=False\n+\n+# Insert a blank line before a module docstring.\n+blank_line_before_module_docstring=False\n+\n+# Insert a blank line before a 'def' or 'class' immediately nested\n+# within another 'def' or 'class'. For example:\n+#\n+#   class Foo:\n+#                      # <------ this blank line\n+#     def method():\n+#       ...\n+blank_line_before_nested_class_or_def=False\n+\n+# Do not split consecutive brackets. Only relevant when\n+# dedent_closing_brackets is set. For example:\n+#\n+#    call_func_that_takes_a_dict(\n+#        {\n+#            'key1': 'value1',\n+#            'key2': 'value2',\n+#        }\n+#    )\n+#\n+# would reformat to:\n+#\n+#    call_func_that_takes_a_dict({\n+#        'key1': 'value1',\n+#        'key2': 'value2',\n+#    })\n+coalesce_brackets=False\n+\n+# The column limit.\n+column_limit=79\n+\n+# The style for continuation alignment. Possible values are:\n+#\n+# - SPACE: Use spaces for continuation alignment. This is default behavior.\n+# - FIXED: Use fixed number (CONTINUATION_INDENT_WIDTH) of columns\n+#   (ie: CONTINUATION_INDENT_WIDTH/INDENT_WIDTH tabs) for continuation\n+#   alignment.\n+# - LESS: Slightly left if cannot vertically align continuation lines with\n+#   indent characters.\n+# - VALIGN-RIGHT: Vertically align continuation lines with indent\n+#   characters. Slightly right (one more indent character) if cannot\n+#   vertically align continuation lines with indent characters.\n+#\n+# For options FIXED, and VALIGN-RIGHT are only available when USE_TABS is\n+# enabled.\n+continuation_align_style=SPACE\n+\n+# Indent width used for line continuations.\n+continuation_indent_width=4\n+\n+# Put closing brackets on a separate line, dedented, if the bracketed\n+# expression can't fit in a single line. Applies to all kinds of brackets,\n+# including function definitions and calls. For example:\n+#\n+#   config = {\n+#       'key1': 'value1',\n+#       'key2': 'value2',\n+#   }        # <--- this bracket is dedented and on a separate line\n+#\n+#   time_series = self.remote_client.query_entity_counters(\n+#       entity='dev3246.region1',\n+#       key='dns.query_latency_tcp',\n+#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n+#       start_ts=now()-timedelta(days=3),\n+#       end_ts=now(),\n+#   )        # <--- this bracket is dedented and on a separate line\n+dedent_closing_brackets=False\n+\n+# Disable the heuristic which places each list element on a separate line\n+# if the list is comma-terminated.\n+disable_ending_comma_heuristic=False\n+\n+# Place each dictionary entry onto its own line.\n+each_dict_entry_on_separate_line=True\n+\n+# The regex for an i18n comment. The presence of this comment stops\n+# reformatting of that line, because the comments are required to be\n+# next to the string they translate.\n+i18n_comment=\n+\n+# The i18n function call names. The presence of this function stops\n+# reformattting on that line, because the string it has cannot be moved\n+# away from the i18n comment.\n+i18n_function_call=\n+\n+# Indent the dictionary value if it cannot fit on the same line as the\n+# dictionary key. For example:\n+#\n+#   config = {\n+#       'key1':\n+#           'value1',\n+#       'key2': value1 +\n+#               value2,\n+#   }\n+indent_dictionary_value=False\n+\n+# The number of columns to use for indentation.\n+indent_width=4\n+\n+# Join short lines into one line. E.g., single line 'if' statements.\n+join_multiple_lines=True\n+\n+# Do not include spaces around selected binary operators. For example:\n+#\n+#   1 + 2 * 3 - 4 / 5\n+#\n+# will be formatted as follows when configured with \"*,/\":\n+#\n+#   1 + 2*3 - 4/5\n+#\n+no_spaces_around_selected_binary_operators=\n+\n+# Use spaces around default or named assigns.\n+spaces_around_default_or_named_assign=False\n+\n+# Use spaces around the power operator.\n+spaces_around_power_operator=False\n+\n+# The number of spaces required before a trailing comment.\n+spaces_before_comment=2\n+\n+# Insert a space between the ending comma and closing bracket of a list,\n+# etc.\n+space_between_ending_comma_and_closing_bracket=True\n+\n+# Split before arguments\n+split_all_comma_separated_values=False\n+\n+# Split before arguments if the argument list is terminated by a\n+# comma.\n+split_arguments_when_comma_terminated=False\n+\n+# Set to True to prefer splitting before '&', '|' or '^' rather than\n+# after.\n+split_before_bitwise_operator=True\n+\n+# Split before the closing bracket if a list or dict literal doesn't fit on\n+# a single line.\n+split_before_closing_bracket=True\n+\n+# Split before a dictionary or set generator (comp_for). For example, note\n+# the split before the 'for':\n+#\n+#   foo = {\n+#       variable: 'Hello world, have a nice day!'\n+#       for variable in bar if variable != 42\n+#   }\n+split_before_dict_set_generator=True\n+\n+# Split before the '.' if we need to split a longer expression:\n+#\n+#   foo = ('This is a really long string: {}, {}, {}, {}'.format(a, b, c, d))\n+#\n+# would reformat to something like:\n+#\n+#   foo = ('This is a really long string: {}, {}, {}, {}'\n+#          .format(a, b, c, d))\n+split_before_dot=False\n+\n+# Split after the opening paren which surrounds an expression if it doesn't\n+# fit on a single line.\n+split_before_expression_after_opening_paren=False\n+\n+# If an argument / parameter list is going to be split, then split before\n+# the first argument.\n+split_before_first_argument=False\n+\n+# Set to True to prefer splitting before 'and' or 'or' rather than\n+# after.\n+split_before_logical_operator=True\n+\n+# Split named assignments onto individual lines.\n+split_before_named_assigns=True\n+\n+# Set to True to split list comprehensions and generators that have\n+# non-trivial expressions and multiple clauses before each of these\n+# clauses. For example:\n+#\n+#   result = [\n+#       a_long_var + 100 for a_long_var in xrange(1000)\n+#       if a_long_var % 10]\n+#\n+# would reformat to something like:\n+#\n+#   result = [\n+#       a_long_var + 100\n+#       for a_long_var in xrange(1000)\n+#       if a_long_var % 10]\n+split_complex_comprehension=False\n+\n+# The penalty for splitting right after the opening bracket.\n+split_penalty_after_opening_bracket=30\n+\n+# The penalty for splitting the line after a unary operator.\n+split_penalty_after_unary_operator=10000\n+\n+# The penalty for splitting right before an if expression.\n+split_penalty_before_if_expr=0\n+\n+# The penalty of splitting the line around the '&', '|', and '^'\n+# operators.\n+split_penalty_bitwise_operator=300\n+\n+# The penalty for splitting a list comprehension or generator\n+# expression.\n+split_penalty_comprehension=80\n+\n+# The penalty for characters over the column limit.\n+split_penalty_excess_character=7000\n+\n+# The penalty incurred by adding a line split to the unwrapped line. The\n+# more line splits added the higher the penalty.\n+split_penalty_for_added_line_split=30\n+\n+# The penalty of splitting a list of \"import as\" names. For example:\n+#\n+#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n+#                                                             long_argument_2,\n+#                                                             long_argument_3)\n+#\n+# would reformat to something like:\n+#\n+#   from a_very_long_or_indented_module_name_yada_yad import (\n+#       long_argument_1, long_argument_2, long_argument_3)\n+split_penalty_import_names=0\n+\n+# The penalty of splitting the line around the 'and' and 'or'\n+# operators.\n+split_penalty_logical_operator=300\n+\n+# Use the Tab character for indentation.\n+use_tabs=False\n+"
      }
    ]
  }
]