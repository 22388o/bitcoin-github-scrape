[
  {
    "sha": "ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzEzYjRiM2VlNmE3OTU5ZTZkY2JiNGFkMmMyYmIyMDBmMmRmMzIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-07T22:48:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:00:38Z"
      },
      "message": "Introduce new serialization macros without casts\n\nThis new approach uses a static method which takes the object as\na argument. This has the advantage that its constness can be a\ntemplate parameter, allowing a single implementation that sees the\nobject as const for serialization and non-const for deserialization,\nwithout casts.\n\nMore boilerplate is included in the new macro as well.",
      "tree": {
        "sha": "a9a7595ae18527643bdd5a434cb8ce3d6ebc66cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9a7595ae18527643bdd5a434cb8ce3d6ebc66cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f8dbcd655479ce2e564a8b17139aca19888ca79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f8dbcd655479ce2e564a8b17139aca19888ca79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f8dbcd655479ce2e564a8b17139aca19888ca79"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c9e994f84406ef907c5ec03ebfe603ff61ea5eac",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323",
        "patch": "@@ -199,6 +199,30 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n         SerializationOp(s, CSerActionUnserialize());                  \\\n     }\n \n+/**\n+ * Implement the Serialize and Unserialize methods by delegating to a single templated\n+ * static method that takes the to-be-(de)serialized object as a parameter. This approach\n+ * has the advantage that the constness of the object becomes a template parameter, and\n+ * thus allows a single implementation that sees the object as const for serializing\n+ * and non-const for deserializing, without casts.\n+ */\n+#define SERIALIZE_METHODS(cls, obj)                                                 \\\n+    template<typename Stream>                                                       \\\n+    void Serialize(Stream& s) const                                                 \\\n+    {                                                                               \\\n+        static_assert(std::is_same<const cls&, decltype(*this)>::value, \"Serialize type mismatch\"); \\\n+        SerializationOps(*this, s, CSerActionSerialize());                          \\\n+    }                                                                               \\\n+    template<typename Stream>                                                       \\\n+    void Unserialize(Stream& s)                                                     \\\n+    {                                                                               \\\n+        static_assert(std::is_same<cls&, decltype(*this)>::value, \"Unserialize type mismatch\"); \\\n+        SerializationOps(*this, s, CSerActionUnserialize());                        \\\n+    }                                                                               \\\n+    template<typename Stream, typename Type, typename Operation>                    \\\n+    static inline void SerializationOps(Type& obj, Stream& s, Operation ser_action) \\\n+\n+\n #ifndef CHAR_EQUALS_INT8\n template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } // TODO Get rid of bare char\n #endif"
      }
    ]
  },
  {
    "sha": "1172a90823597d84afca680f9e7eaa7e7b01821b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTcyYTkwODIzNTk3ZDg0YWZjYTY4MGY5ZTdlYWE3ZTdiMDE4MjFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-17T21:48:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Add Wrap helper",
      "tree": {
        "sha": "c51668774b86361ad50c569a5c258a525a68db0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c51668774b86361ad50c569a5c258a525a68db0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1172a90823597d84afca680f9e7eaa7e7b01821b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1172a90823597d84afca680f9e7eaa7e7b01821b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1172a90823597d84afca680f9e7eaa7e7b01821b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1172a90823597d84afca680f9e7eaa7e7b01821b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec13b4b3ee6a7959e6dcbb4ad2c2bb200f2df323"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4909eb559ee92ee1f67f350c5f82658047f94e04",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1172a90823597d84afca680f9e7eaa7e7b01821b/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1172a90823597d84afca680f9e7eaa7e7b01821b/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=1172a90823597d84afca680f9e7eaa7e7b01821b",
        "patch": "@@ -442,6 +442,10 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n+/** Wrap a serializable object with a serialization wrapper. */\n+template<typename W, typename T>\n+static inline typename W::template Wrapper<typename std::remove_reference<T>::type> Wrap(T&& t) { return typename W::template Wrapper<typename std::remove_reference<T>::type>(t); }\n+\n #define VARINT(obj, ...) WrapVarInt<__VA_ARGS__>(REF(obj))\n #define COMPACTSIZE(obj) CCompactSize(REF(obj))\n #define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))"
      }
    ]
  },
  {
    "sha": "4033cf76dbaf55dd145c06b05d33a907e423ef44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDMzY2Y3NmRiYWY1NWRkMTQ1YzA2YjA1ZDMzYTkwN2U0MjNlZjQ0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T00:12:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Generalize CompactSize wrapper\n\nThis makes it const-correct and usable for other integer types.",
      "tree": {
        "sha": "c183b4d850a23abe404f2148a27e38e9e0fd3a15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c183b4d850a23abe404f2148a27e38e9e0fd3a15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4033cf76dbaf55dd145c06b05d33a907e423ef44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4033cf76dbaf55dd145c06b05d33a907e423ef44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4033cf76dbaf55dd145c06b05d33a907e423ef44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4033cf76dbaf55dd145c06b05d33a907e423ef44/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1172a90823597d84afca680f9e7eaa7e7b01821b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1172a90823597d84afca680f9e7eaa7e7b01821b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1172a90823597d84afca680f9e7eaa7e7b01821b"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 29,
      "deletions": 14
    },
    "files": [
      {
        "sha": "93bbd5d96f62e02724fa19be21796d414083b274",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 29,
        "deletions": 14,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4033cf76dbaf55dd145c06b05d33a907e423ef44/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4033cf76dbaf55dd145c06b05d33a907e423ef44/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=4033cf76dbaf55dd145c06b05d33a907e423ef44",
        "patch": "@@ -447,7 +447,7 @@ template<typename W, typename T>\n static inline typename W::template Wrapper<typename std::remove_reference<T>::type> Wrap(T&& t) { return typename W::template Wrapper<typename std::remove_reference<T>::type>(t); }\n \n #define VARINT(obj, ...) WrapVarInt<__VA_ARGS__>(REF(obj))\n-#define COMPACTSIZE(obj) CCompactSize(REF(obj))\n+#define COMPACTSIZE(obj) Wrap<CompactSize>(obj)\n #define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n \n template<VarIntMode Mode, typename I>\n@@ -503,22 +503,37 @@ class BigEndian\n     }\n };\n \n-class CCompactSize\n+/** Serialization wrapper class for integers in CompactSize format. */\n+struct CompactSize\n {\n-protected:\n-    uint64_t &n;\n-public:\n-    explicit CCompactSize(uint64_t& nIn) : n(nIn) { }\n+    template<typename I>\n+    class Wrapper\n+    {\n+    protected:\n+        I &m_n;\n+    public:\n+        explicit Wrapper(I& n) : m_n(n)\n+        {\n+            static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+            static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n+        }\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteCompactSize<Stream>(s, n);\n-    }\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            uint64_t n = ReadCompactSize<Stream>(s);\n+            if (n > std::numeric_limits<I>::max()) {\n+                throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n+            }\n+            m_n = n;\n+        }\n \n-    template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadCompactSize<Stream>(s);\n-    }\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            WriteCompactSize<Stream>(s, m_n);\n+        }\n+    };\n };\n \n template<size_t Limit>"
      }
    ]
  },
  {
    "sha": "3ab37ade277fec207d0f11d6ad1434d41d566b13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWIzN2FkZTI3N2ZlYzIwN2QwZjExZDZhZDE0MzRkNDFkNTY2YjEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T00:15:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Generalize VarInt wrappers",
      "tree": {
        "sha": "d2f069ac4ccf8fc9c7609bd7bda1288045b14565",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2f069ac4ccf8fc9c7609bd7bda1288045b14565"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ab37ade277fec207d0f11d6ad1434d41d566b13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab37ade277fec207d0f11d6ad1434d41d566b13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ab37ade277fec207d0f11d6ad1434d41d566b13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab37ade277fec207d0f11d6ad1434d41d566b13/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4033cf76dbaf55dd145c06b05d33a907e423ef44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4033cf76dbaf55dd145c06b05d33a907e423ef44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4033cf76dbaf55dd145c06b05d33a907e423ef44"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 22,
      "deletions": 18
    },
    "files": [
      {
        "sha": "1959bdff389bd62b55dc7968619c56803cb76131",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ab37ade277fec207d0f11d6ad1434d41d566b13/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ab37ade277fec207d0f11d6ad1434d41d566b13/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=3ab37ade277fec207d0f11d6ad1434d41d566b13",
        "patch": "@@ -446,27 +446,34 @@ I ReadVarInt(Stream& is)\n template<typename W, typename T>\n static inline typename W::template Wrapper<typename std::remove_reference<T>::type> Wrap(T&& t) { return typename W::template Wrapper<typename std::remove_reference<T>::type>(t); }\n \n-#define VARINT(obj, ...) WrapVarInt<__VA_ARGS__>(REF(obj))\n+#define VARINT(obj, ...) Wrap<VarIntFormat<__VA_ARGS__>>(obj)\n #define COMPACTSIZE(obj) Wrap<CompactSize>(obj)\n #define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n \n-template<VarIntMode Mode, typename I>\n-class CVarInt\n+/** Serialization wrapper class for integers in VarInt format. */\n+template<VarIntMode Mode=VarIntMode::DEFAULT>\n+struct VarIntFormat\n {\n-protected:\n-    I &n;\n-public:\n-    explicit CVarInt(I& nIn) : n(nIn) { }\n+    template<typename I>\n+    class Wrapper\n+    {\n+    protected:\n+        I &m_n;\n+    public:\n+        explicit Wrapper(I& n) : m_n(n) { }\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,Mode,I>(s, n);\n-    }\n+        template<typename Stream>\n+        void Serialize(Stream &s) const\n+        {\n+            WriteVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s, m_n);\n+        }\n \n-    template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,Mode,I>(s);\n-    }\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            m_n = ReadVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s);\n+        }\n+    };\n };\n \n /** Serialization wrapper class for big-endian integers.\n@@ -565,9 +572,6 @@ class LimitedString\n     }\n };\n \n-template<VarIntMode Mode=VarIntMode::DEFAULT, typename I>\n-CVarInt<Mode, I> WrapVarInt(I& n) { return CVarInt<Mode, I>{n}; }\n-\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n "
      }
    ]
  },
  {
    "sha": "4a74724256b19265c2627b2d1de2e3a9af55e93b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTc0NzI0MjU2YjE5MjY1YzI2MjdiMmQxZGUyZTNhOWFmNTVlOTNi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T00:35:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Generalize LimitedString wrapper",
      "tree": {
        "sha": "b3fdb3bed0d7ac584d81c7b9fa40c862fe0fa0f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3fdb3bed0d7ac584d81c7b9fa40c862fe0fa0f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a74724256b19265c2627b2d1de2e3a9af55e93b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a74724256b19265c2627b2d1de2e3a9af55e93b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a74724256b19265c2627b2d1de2e3a9af55e93b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a74724256b19265c2627b2d1de2e3a9af55e93b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ab37ade277fec207d0f11d6ad1434d41d566b13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab37ade277fec207d0f11d6ad1434d41d566b13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ab37ade277fec207d0f11d6ad1434d41d566b13"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 27,
      "deletions": 23
    },
    "files": [
      {
        "sha": "2027e9338f3f2cd1bf9a75a561348c6d27b69852",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 27,
        "deletions": 23,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a74724256b19265c2627b2d1de2e3a9af55e93b/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a74724256b19265c2627b2d1de2e3a9af55e93b/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=4a74724256b19265c2627b2d1de2e3a9af55e93b",
        "patch": "@@ -448,7 +448,7 @@ static inline typename W::template Wrapper<typename std::remove_reference<T>::ty\n \n #define VARINT(obj, ...) Wrap<VarIntFormat<__VA_ARGS__>>(obj)\n #define COMPACTSIZE(obj) Wrap<CompactSize>(obj)\n-#define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n+#define LIMITED_STRING(obj,n) Wrap<LimitedString<n>>(obj)\n \n /** Serialization wrapper class for integers in VarInt format. */\n template<VarIntMode Mode=VarIntMode::DEFAULT>\n@@ -543,33 +543,37 @@ struct CompactSize\n     };\n };\n \n+/** Serialization wrapper class for strings of limited length. */\n template<size_t Limit>\n-class LimitedString\n+struct LimitedString\n {\n-protected:\n-    std::string& string;\n-public:\n-    explicit LimitedString(std::string& _string) : string(_string) {}\n-\n-    template<typename Stream>\n-    void Unserialize(Stream& s)\n+    template<typename T>\n+    class Wrapper\n     {\n-        size_t size = ReadCompactSize(s);\n-        if (size > Limit) {\n-            throw std::ios_base::failure(\"String length limit exceeded\");\n+    protected:\n+        T& m_string;\n+    public:\n+        explicit Wrapper(T& string) : m_string(string) {}\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            size_t size = ReadCompactSize(s);\n+            if (size > Limit) {\n+                throw std::ios_base::failure(\"String length limit exceeded\");\n+            }\n+            m_string.resize(size);\n+            if (size != 0) {\n+                s.read(&m_string[0], size);\n+            }\n         }\n-        string.resize(size);\n-        if (size != 0)\n-            s.read((char*)string.data(), size);\n-    }\n \n-    template<typename Stream>\n-    void Serialize(Stream& s) const\n-    {\n-        WriteCompactSize(s, string.size());\n-        if (!string.empty())\n-            s.write((char*)string.data(), string.size());\n-    }\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            s << m_string;\n+        }\n+    };\n };\n \n template<typename I>"
      }
    ]
  },
  {
    "sha": "12a6df7c59846f82ba646a4ea1d2a275dda85120",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmE2ZGY3YzU5ODQ2ZjgyYmE2NDZhNGVhMWQyYTI3NWRkYTg1MTIw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T20:31:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Generalize BigEndian serialization wrapper",
      "tree": {
        "sha": "10f09465fcef3c090568bc99aba1d03b24527804",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10f09465fcef3c090568bc99aba1d03b24527804"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12a6df7c59846f82ba646a4ea1d2a275dda85120",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a6df7c59846f82ba646a4ea1d2a275dda85120",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12a6df7c59846f82ba646a4ea1d2a275dda85120",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a6df7c59846f82ba646a4ea1d2a275dda85120/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a74724256b19265c2627b2d1de2e3a9af55e93b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a74724256b19265c2627b2d1de2e3a9af55e93b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a74724256b19265c2627b2d1de2e3a9af55e93b"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 22,
      "deletions": 23
    },
    "files": [
      {
        "sha": "5bd2923dbe845f26c16d96be8bd86dd00c293b01",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12a6df7c59846f82ba646a4ea1d2a275dda85120/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12a6df7c59846f82ba646a4ea1d2a275dda85120/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=12a6df7c59846f82ba646a4ea1d2a275dda85120",
        "patch": "@@ -165,7 +165,7 @@ class CService : public CNetAddr\n         template <typename Stream, typename Operation>\n         inline void SerializationOp(Stream& s, Operation ser_action) {\n             READWRITE(ip);\n-            READWRITE(WrapBigEndian(port));\n+            READWRITE(Wrap<BigEndian>(port));\n         }\n };\n "
      },
      {
        "sha": "73545670c6070d97f9b3173b59684b83206599a1",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 21,
        "deletions": 22,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12a6df7c59846f82ba646a4ea1d2a275dda85120/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12a6df7c59846f82ba646a4ea1d2a275dda85120/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=12a6df7c59846f82ba646a4ea1d2a275dda85120",
        "patch": "@@ -485,29 +485,31 @@ struct VarIntFormat\n  *\n  * Only 16-bit types are supported for now.\n  */\n-template<typename I>\n-class BigEndian\n+struct BigEndian\n {\n-protected:\n-    I& m_val;\n-public:\n-    explicit BigEndian(I& val) : m_val(val)\n+    template<typename I> class Wrapper\n     {\n-        static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n-        static_assert(sizeof(I) == 2 && std::numeric_limits<I>::min() == 0 && std::numeric_limits<I>::max() == std::numeric_limits<uint16_t>::max(), \"Unsupported BigEndian size\");\n-    }\n+    protected:\n+        I& m_val;\n+    public:\n+        explicit Wrapper(I& val) : m_val(val)\n+        {\n+            static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n+            static_assert(sizeof(I) == 2 && std::numeric_limits<I>::min() == 0 && std::numeric_limits<I>::max() == std::numeric_limits<uint16_t>::max(), \"Unsupported BigEndian size\");\n+        }\n \n-    template<typename Stream>\n-    void Serialize(Stream& s) const\n-    {\n-        ser_writedata16be(s, m_val);\n-    }\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata16be(s, m_val);\n+        }\n \n-    template<typename Stream>\n-    void Unserialize(Stream& s)\n-    {\n-        m_val = ser_readdata16be(s);\n-    }\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            m_val = ser_readdata16be(s);\n+        }\n+    };\n };\n \n /** Serialization wrapper class for integers in CompactSize format. */\n@@ -576,9 +578,6 @@ struct LimitedString\n     };\n };\n \n-template<typename I>\n-BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n-\n /**\n  * Forward declarations\n  */"
      }
    ]
  },
  {
    "sha": "4c91d6b6f738c37d63132e9690c3315673d6be8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzkxZDZiNmY3MzhjMzdkNjMxMzJlOTY5MGMzMzE1NjczZDZiZThh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-20T19:32:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert wrapper",
      "tree": {
        "sha": "d83f32f64c2bce09783d0563067f4749b91266e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d83f32f64c2bce09783d0563067f4749b91266e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c91d6b6f738c37d63132e9690c3315673d6be8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c91d6b6f738c37d63132e9690c3315673d6be8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c91d6b6f738c37d63132e9690c3315673d6be8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c91d6b6f738c37d63132e9690c3315673d6be8a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12a6df7c59846f82ba646a4ea1d2a275dda85120",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a6df7c59846f82ba646a4ea1d2a275dda85120",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12a6df7c59846f82ba646a4ea1d2a275dda85120"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 27,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c01bfc7c6f8ffcc9a91edb0c2f7964b73f226b45",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c91d6b6f738c37d63132e9690c3315673d6be8a/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c91d6b6f738c37d63132e9690c3315673d6be8a/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=4c91d6b6f738c37d63132e9690c3315673d6be8a",
        "patch": "@@ -336,9 +336,7 @@ class CAddress : public CService\n         if ((s.GetType() & SER_DISK) ||\n             (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH)))\n             READWRITE(nTime);\n-        uint64_t nServicesInt = nServices;\n-        READWRITE(nServicesInt);\n-        nServices = static_cast<ServiceFlags>(nServicesInt);\n+        READWRITE(Wrap<Convert<uint64_t>>(nServices));\n         READWRITEAS(CService, *this);\n     }\n "
      },
      {
        "sha": "2014b7bf9afa67e9fadc7e7c31edd0103aecf81f",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c91d6b6f738c37d63132e9690c3315673d6be8a/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c91d6b6f738c37d63132e9690c3315673d6be8a/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=4c91d6b6f738c37d63132e9690c3315673d6be8a",
        "patch": "@@ -578,6 +578,32 @@ struct LimitedString\n     };\n };\n \n+template<typename F> struct Convert\n+{\n+    template<typename T> class Wrapper\n+    {\n+    protected:\n+        T& m_val;\n+    public:\n+        explicit Wrapper(T& val) : m_val(val) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            F tmp(m_val);\n+            s << tmp;\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            F tmp;\n+            s >> tmp;\n+            m_val = T(tmp);\n+        }\n+    };\n+};\n+\n /**\n  * Forward declarations\n  */"
      }
    ]
  },
  {
    "sha": "880151f7ab105ebb7223780b543cfc293be5c037",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODAxNTFmN2FiMTA1ZWJiNzIyMzc4MGI1NDNjZmMyOTNiZTVjMDM3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-06T18:25:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Add a constant for the maximum vector allocation (5 Mbyte)",
      "tree": {
        "sha": "eafe9455cd05c2bb57cb26680daa194fb8028d2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eafe9455cd05c2bb57cb26680daa194fb8028d2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/880151f7ab105ebb7223780b543cfc293be5c037",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/880151f7ab105ebb7223780b543cfc293be5c037",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/880151f7ab105ebb7223780b543cfc293be5c037",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/880151f7ab105ebb7223780b543cfc293be5c037/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c91d6b6f738c37d63132e9690c3315673d6be8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c91d6b6f738c37d63132e9690c3315673d6be8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c91d6b6f738c37d63132e9690c3315673d6be8a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "de1075af13e649b34fc640fcf75c7ea01e59778f",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/880151f7ab105ebb7223780b543cfc293be5c037/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/880151f7ab105ebb7223780b543cfc293be5c037/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=880151f7ab105ebb7223780b543cfc293be5c037",
        "patch": "@@ -25,6 +25,9 @@\n \n static const unsigned int MAX_SIZE = 0x02000000;\n \n+/** Maximum amount of memory to allocate at once when deserializing vectors. */\n+static const unsigned int MAX_VECTOR_ALLOCATE = 5000000;\n+\n /**\n  * Dummy data type to identify deserializing constructors.\n  *\n@@ -761,7 +764,7 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)\n     unsigned int nMid = 0;\n     while (nMid < nSize)\n     {\n-        nMid += 5000000 / sizeof(T);\n+        nMid += MAX_VECTOR_ALLOCATE / sizeof(T);\n         if (nMid > nSize)\n             nMid = nSize;\n         v.resize_uninitialized(nMid);\n@@ -841,7 +844,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)\n     unsigned int nMid = 0;\n     while (nMid < nSize)\n     {\n-        nMid += 5000000 / sizeof(T);\n+        nMid += MAX_VECTOR_ALLOCATE / sizeof(T);\n         if (nMid > nSize)\n             nMid = nSize;\n         v.resize(nMid);"
      }
    ]
  },
  {
    "sha": "a268f6b8f906a57c2cf984db228663ce22ab77cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjY4ZjZiOGY5MDZhNTdjMmNmOTg0ZGIyMjg2NjNjZTIyYWI3N2Ni",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-10T05:45:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Add custom vector-element serialization wrapper\n\nThis allows a very compact notation for serialization of vectors whose\nelements are not serialized using their default encoding.",
      "tree": {
        "sha": "1d6a19125b3288c36134369fcfa08a545c5c0626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d6a19125b3288c36134369fcfa08a545c5c0626"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a268f6b8f906a57c2cf984db228663ce22ab77cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a268f6b8f906a57c2cf984db228663ce22ab77cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a268f6b8f906a57c2cf984db228663ce22ab77cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a268f6b8f906a57c2cf984db228663ce22ab77cb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "880151f7ab105ebb7223780b543cfc293be5c037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/880151f7ab105ebb7223780b543cfc293be5c037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/880151f7ab105ebb7223780b543cfc293be5c037"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 59,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b3898c2b95e6342530e713756aae4d9fde8d476d",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a268f6b8f906a57c2cf984db228663ce22ab77cb/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a268f6b8f906a57c2cf984db228663ce22ab77cb/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=a268f6b8f906a57c2cf984db228663ce22ab77cb",
        "patch": "@@ -607,6 +607,65 @@ template<typename F> struct Convert\n     };\n };\n \n+/** Serialization wrapper for custom-element vectors.\n+ *\n+ * This allows (de)serialization of vectors of type V while using a custom\n+ * serializer W for the entries inside.\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Wrap<VectorApply<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const operator[].\n+ */\n+template<class W>\n+struct VectorApply\n+{\n+    template<typename V> class Wrapper\n+    {\n+    protected:\n+        typedef typename V::value_type value_type;\n+        V& m_vector;\n+    public:\n+        explicit Wrapper(V& vector) : m_vector(vector) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            WriteCompactSize(s, m_vector.size());\n+            for (size_t i = 0; i < m_vector.size(); ++i) {\n+                s << typename W::template Wrapper<const value_type>(m_vector[i]);\n+            }\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            m_vector.clear();\n+            size_t size = ReadCompactSize(s);\n+            size_t allocated = 0;\n+            while (allocated < size) {\n+                // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+                // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+                // X MiB of data to make us allocate X+5 Mib.\n+                allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(value_type));\n+                m_vector.reserve(allocated);\n+                while (m_vector.size() < allocated) {\n+                    value_type val;\n+                    typename W::template Wrapper<value_type> elem(val);\n+                    s >> elem;\n+                    m_vector.push_back(std::move(val));\n+                }\n+            }\n+        }\n+    };\n+};\n+\n /**\n  * Forward declarations\n  */"
      }
    ]
  },
  {
    "sha": "a5f5e86798b10540e409ce0957f20efa970b0327",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWY1ZTg2Nzk4YjEwNTQwZTQwOWNlMDk1N2YyMGVmYTk3MGIwMzI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-07T22:49:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert primitives to new serialization",
      "tree": {
        "sha": "34ae0c6952f5a9aee712a8fe71ab725c3103d03a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34ae0c6952f5a9aee712a8fe71ab725c3103d03a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5f5e86798b10540e409ce0957f20efa970b0327",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5e86798b10540e409ce0957f20efa970b0327",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5f5e86798b10540e409ce0957f20efa970b0327",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5e86798b10540e409ce0957f20efa970b0327/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a268f6b8f906a57c2cf984db228663ce22ab77cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a268f6b8f906a57c2cf984db228663ce22ab77cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a268f6b8f906a57c2cf984db228663ce22ab77cb"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 20,
      "deletions": 62
    },
    "files": [
      {
        "sha": "ef2845d3f9fa9e76bc7be420ebdee701fecc640f",
        "filename": "src/flatfile.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f5e86798b10540e409ce0957f20efa970b0327/src/flatfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f5e86798b10540e409ce0957f20efa970b0327/src/flatfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.h?ref=a5f5e86798b10540e409ce0957f20efa970b0327",
        "patch": "@@ -16,12 +16,10 @@ struct FlatFilePos\n     int nFile;\n     unsigned int nPos;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nPos));\n+    SERIALIZE_METHODS(FlatFilePos, obj)\n+    {\n+        READWRITE(VARINT(obj.nFile, VarIntMode::NONNEGATIVE_SIGNED));\n+        READWRITE(VARINT(obj.nPos));\n     }\n \n     FlatFilePos() : nFile(-1), nPos(0) {}"
      },
      {
        "sha": "f2c3d66ebd01c49c8704ae46eff70531a5bc40bb",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f5e86798b10540e409ce0957f20efa970b0327/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f5e86798b10540e409ce0957f20efa970b0327/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=a5f5e86798b10540e409ce0957f20efa970b0327",
        "patch": "@@ -39,14 +39,7 @@ struct DBVal {\n     uint256 header;\n     FlatFilePos pos;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(hash);\n-        READWRITE(header);\n-        READWRITE(pos);\n-    }\n+    SERIALIZE_METHODS(DBVal, obj) { READWRITE(obj.hash, obj.header, obj.pos); }\n };\n \n struct DBHeightKey {\n@@ -78,17 +71,14 @@ struct DBHashKey {\n \n     explicit DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(DBHashKey, obj) {\n         char prefix = DB_BLOCK_HASH;\n         READWRITE(prefix);\n         if (prefix != DB_BLOCK_HASH) {\n             throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n         }\n \n-        READWRITE(hash);\n+        READWRITE(obj.hash);\n     }\n };\n "
      },
      {
        "sha": "ceca17a61dd3795db659e229c340a2f55af4fc7b",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 10,
        "deletions": 21,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f5e86798b10540e409ce0957f20efa970b0327/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f5e86798b10540e409ce0957f20efa970b0327/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=a5f5e86798b10540e409ce0957f20efa970b0327",
        "patch": "@@ -33,16 +33,9 @@ class CBlockHeader\n         SetNull();\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(hashPrevBlock);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n+    SERIALIZE_METHODS(CBlockHeader, obj)\n+    {\n+        READWRITE(obj.nVersion, obj.hashPrevBlock, obj.hashMerkleRoot, obj.nTime, obj.nBits, obj.nNonce);\n     }\n \n     void SetNull()\n@@ -89,12 +82,10 @@ class CBlock : public CBlockHeader\n         *(static_cast<CBlockHeader*>(this)) = header;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CBlockHeader, *this);\n-        READWRITE(vtx);\n+    SERIALIZE_METHODS(CBlock, obj)\n+    {\n+        READWRITEAS(CBlockHeader, obj);\n+        READWRITE(obj.vtx);\n     }\n \n     void SetNull()\n@@ -131,14 +122,12 @@ struct CBlockLocator\n \n     explicit CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(CBlockLocator, obj)\n+    {\n         int nVersion = s.GetVersion();\n         if (!(s.GetType() & SER_GETHASH))\n             READWRITE(nVersion);\n-        READWRITE(vHave);\n+        READWRITE(obj.vHave);\n     }\n \n     void SetNull()"
      },
      {
        "sha": "d080cf876b163d0c8acb3dfa4476a75df1160270",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 22,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5f5e86798b10540e409ce0957f20efa970b0327/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5f5e86798b10540e409ce0957f20efa970b0327/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=a5f5e86798b10540e409ce0957f20efa970b0327",
        "patch": "@@ -26,13 +26,7 @@ class COutPoint\n     COutPoint(): n(NULL_INDEX) { }\n     COutPoint(const uint256& hashIn, uint32_t nIn): hash(hashIn), n(nIn) { }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(hash);\n-        READWRITE(n);\n-    }\n+    SERIALIZE_METHODS(COutPoint, obj) { READWRITE(obj.hash, obj.n); }\n \n     void SetNull() { hash.SetNull(); n = NULL_INDEX; }\n     bool IsNull() const { return (hash.IsNull() && n == NULL_INDEX); }\n@@ -103,14 +97,7 @@ class CTxIn\n     explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n     CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(prevout);\n-        READWRITE(scriptSig);\n-        READWRITE(nSequence);\n-    }\n+    SERIALIZE_METHODS(CTxIn, obj) { READWRITE(obj.prevout, obj.scriptSig, obj.nSequence); }\n \n     friend bool operator==(const CTxIn& a, const CTxIn& b)\n     {\n@@ -143,13 +130,7 @@ class CTxOut\n \n     CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nValue);\n-        READWRITE(scriptPubKey);\n-    }\n+    SERIALIZE_METHODS(CTxOut, obj) { READWRITE(obj.nValue, obj.scriptPubKey); }\n \n     void SetNull()\n     {"
      }
    ]
  },
  {
    "sha": "56dcf6926f499f3196f39f98314b8db58389799d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmRjZjY5MjZmNDk5ZjMxOTZmMzlmOTgzMTRiOGRiNTgzODk3OTlk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-07T23:08:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert addrdb/addrman to new serialization",
      "tree": {
        "sha": "0799f679c1cc8649bd8db1997ccc374b245b98e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0799f679c1cc8649bd8db1997ccc374b245b98e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56dcf6926f499f3196f39f98314b8db58389799d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56dcf6926f499f3196f39f98314b8db58389799d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56dcf6926f499f3196f39f98314b8db58389799d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56dcf6926f499f3196f39f98314b8db58389799d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5f5e86798b10540e409ce0957f20efa970b0327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5f5e86798b10540e409ce0957f20efa970b0327",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5f5e86798b10540e409ce0957f20efa970b0327"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 6,
      "deletions": 18
    },
    "files": [
      {
        "sha": "c6d4307d694985482a211efb7fe6850b9071f66e",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56dcf6926f499f3196f39f98314b8db58389799d/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56dcf6926f499f3196f39f98314b8db58389799d/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=56dcf6926f499f3196f39f98314b8db58389799d",
        "patch": "@@ -49,15 +49,7 @@ class CBanEntry\n         banReason = ban_reason_in;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(nCreateTime);\n-        READWRITE(nBanUntil);\n-        READWRITE(banReason);\n-    }\n+    SERIALIZE_METHODS(CBanEntry, obj) { READWRITE(obj.nVersion, obj.nCreateTime, obj.nBanUntil, obj.banReason); }\n \n     void SetNull()\n     {"
      },
      {
        "sha": "c001d59da56a135a2def2560c5c56f1a12d5484c",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56dcf6926f499f3196f39f98314b8db58389799d/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56dcf6926f499f3196f39f98314b8db58389799d/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=56dcf6926f499f3196f39f98314b8db58389799d",
        "patch": "@@ -53,14 +53,10 @@ class CAddrInfo : public CAddress\n \n public:\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CAddress, *this);\n-        READWRITE(source);\n-        READWRITE(nLastSuccess);\n-        READWRITE(nAttempts);\n+    SERIALIZE_METHODS(CAddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n     }\n \n     CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)\n@@ -294,7 +290,7 @@ class CAddrMan\n      * This format is more complex, but significantly smaller (at most 1.5 MiB), and supports\n      * changes to the ADDRMAN_ parameters without breaking the on-disk structure.\n      *\n-     * We don't use ADD_SERIALIZE_METHODS since the serialization and deserialization code has\n+     * We don't use SERIALIZE_METHODS since the serialization and deserialization code has\n      * very little in common.\n      */\n     template<typename Stream>"
      }
    ]
  },
  {
    "sha": "fb47327a8a4bdbf2982501d3b992571fb3b5a19b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjQ3MzI3YThhNGJkYmYyOTgyNTAxZDNiOTkyNTcxZmIzYjVhMTli",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T02:06:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert blockencodings to new serialization",
      "tree": {
        "sha": "16a948467654e69435dfa37e2bca9f12bae71772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16a948467654e69435dfa37e2bca9f12bae71772"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb47327a8a4bdbf2982501d3b992571fb3b5a19b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb47327a8a4bdbf2982501d3b992571fb3b5a19b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb47327a8a4bdbf2982501d3b992571fb3b5a19b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb47327a8a4bdbf2982501d3b992571fb3b5a19b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56dcf6926f499f3196f39f98314b8db58389799d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56dcf6926f499f3196f39f98314b8db58389799d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56dcf6926f499f3196f39f98314b8db58389799d"
      }
    ],
    "stats": {
      "total": 227,
      "additions": 107,
      "deletions": 120
    },
    "files": [
      {
        "sha": "fbdf5ed749ce82ecab1c1d246539843e9c50e73b",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb47327a8a4bdbf2982501d3b992571fb3b5a19b/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb47327a8a4bdbf2982501d3b992571fb3b5a19b/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=fb47327a8a4bdbf2982501d3b992571fb3b5a19b",
        "patch": "@@ -83,7 +83,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n     for (size_t i = 0; i < cmpctblock.shorttxids.size(); i++) {\n         while (txn_available[i + index_offset])\n             index_offset++;\n-        shorttxids[cmpctblock.shorttxids[i]] = i + index_offset;\n+        shorttxids[cmpctblock.shorttxids[i]] = uint16_t(i + index_offset);\n         // To determine the chance that the number of entries in a bucket exceeds N,\n         // we use the fact that the number of elements in a single bucket is\n         // binomially distributed (with n = the number of shorttxids S, and p ="
      },
      {
        "sha": "a244f5f7a09e000e0678a0a24085eb370e1ec2a2",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 103,
        "deletions": 102,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb47327a8a4bdbf2982501d3b992571fb3b5a19b/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb47327a8a4bdbf2982501d3b992571fb3b5a19b/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=fb47327a8a4bdbf2982501d3b992571fb3b5a19b",
        "patch": "@@ -11,18 +11,81 @@\n class CTxMemPool;\n \n // Dumb helper to handle CTransaction compression at serialize-time\n-struct TransactionCompressor {\n-private:\n-    CTransactionRef& tx;\n-public:\n-    explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+struct TransactionCompression\n+{\n+    template<typename T>\n+    struct Wrapper {\n+    private:\n+        T& tx;\n+    public:\n+        explicit Wrapper(T& txIn) : tx(txIn) {}\n+        SERIALIZE_METHODS(Wrapper, obj) { READWRITE(obj.tx); }\n+    };\n+};\n \n-    ADD_SERIALIZE_METHODS;\n+struct Uint48\n+{\n+    template<typename I>\n+    struct Wrapper {\n+    private:\n+        I& m_int;\n+    public:\n+        explicit Wrapper(I& i) : m_int(i)\n+        {\n+            static_assert(std::is_unsigned<I>::value, \"Uint48 needs an unsigned integer\");\n+            static_assert(sizeof(I) >= 6, \"Uint48 needs a 48+ bit type\");\n+        }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(tx); //TODO: Compress tx encoding\n-    }\n+        template <typename Stream> void Serialize(Stream& s) const\n+        {\n+            uint32_t lsb = m_int & 0xffffffff;\n+            uint16_t msb = (m_int >> 32) & 0xffff;\n+            s << lsb << msb;\n+        }\n+\n+        template <typename Stream> void Unserialize(Stream& s)\n+        {\n+            uint32_t lsb;\n+            uint16_t msb;\n+            s >> lsb >> msb;\n+            m_int = (uint64_t(msb) << 32) | uint64_t(lsb);\n+        }\n+    };\n+};\n+\n+/** Vector-wrapper (compatible with VectorApply) to differentially encode values. */\n+struct Differential\n+{\n+    template<typename V>\n+    struct Wrapper {\n+    private:\n+        V& m_v;\n+\n+    public:\n+        typedef typename V::value_type value_type;\n+\n+        explicit Wrapper(V& v) : m_v(v) {}\n+        size_t size() const { return m_v.size(); }\n+        void clear() { m_v.clear(); }\n+        void reserve(size_t size) { m_v.reserve(size); }\n+\n+        value_type operator[](size_t pos) const\n+        {\n+            if (pos == 0) return m_v[0];\n+            return m_v[pos] - (m_v[pos - 1] + 1);\n+        }\n+\n+        void push_back(value_type val)\n+        {\n+            if (m_v.size() == 0) {\n+                m_v.push_back(val);\n+            } else {\n+                value_type add = val + (m_v.back() + 1);\n+                if (add <= val) throw std::ios_base::failure(\"differential value overflow\");\n+                m_v.push_back(add);\n+            }\n+        }\n+    };\n };\n \n class BlockTransactionsRequest {\n@@ -31,39 +94,9 @@ class BlockTransactionsRequest {\n     uint256 blockhash;\n     std::vector<uint16_t> indexes;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n-        uint64_t indexes_size = (uint64_t)indexes.size();\n-        READWRITE(COMPACTSIZE(indexes_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (indexes.size() < indexes_size) {\n-                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n-                for (; i < indexes.size(); i++) {\n-                    uint64_t index = 0;\n-                    READWRITE(COMPACTSIZE(index));\n-                    if (index > std::numeric_limits<uint16_t>::max())\n-                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n-                    indexes[i] = index;\n-                }\n-            }\n-\n-            int32_t offset = 0;\n-            for (size_t j = 0; j < indexes.size(); j++) {\n-                if (int32_t(indexes[j]) + offset > std::numeric_limits<uint16_t>::max())\n-                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-                indexes[j] = indexes[j] + offset;\n-                offset = int32_t(indexes[j]) + 1;\n-            }\n-        } else {\n-            for (size_t i = 0; i < indexes.size(); i++) {\n-                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n-                READWRITE(COMPACTSIZE(index));\n-            }\n-        }\n+    SERIALIZE_METHODS(BlockTransactionsRequest, obj)\n+    {\n+        READWRITE(obj.blockhash, Wrap<VectorApply<CompactSize>>(Wrap<Differential>(obj.indexes)));\n     }\n };\n \n@@ -77,24 +110,9 @@ class BlockTransactions {\n     explicit BlockTransactions(const BlockTransactionsRequest& req) :\n         blockhash(req.blockhash), txn(req.indexes.size()) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(blockhash);\n-        uint64_t txn_size = (uint64_t)txn.size();\n-        READWRITE(COMPACTSIZE(txn_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (txn.size() < txn_size) {\n-                txn.resize(std::min((uint64_t)(1000 + txn.size()), txn_size));\n-                for (; i < txn.size(); i++)\n-                    READWRITE(TransactionCompressor(txn[i]));\n-            }\n-        } else {\n-            for (size_t i = 0; i < txn.size(); i++)\n-                READWRITE(TransactionCompressor(txn[i]));\n-        }\n+    SERIALIZE_METHODS(BlockTransactions, obj)\n+    {\n+        READWRITE(obj.blockhash, Wrap<VectorApply<TransactionCompression>>(obj.txn));\n     }\n };\n \n@@ -105,16 +123,21 @@ struct PrefilledTransaction {\n     uint16_t index;\n     CTransactionRef tx;\n \n-    ADD_SERIALIZE_METHODS;\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << COMPACTSIZE(index) << Wrap<TransactionCompression>(tx);\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        uint64_t idx = index;\n-        READWRITE(COMPACTSIZE(idx));\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        uint64_t idx;\n+        s >> COMPACTSIZE(idx);\n         if (idx > std::numeric_limits<uint16_t>::max())\n             throw std::ios_base::failure(\"index overflowed 16-bits\");\n         index = idx;\n-        READWRITE(TransactionCompressor(tx));\n+        s >> Wrap<TransactionCompression>(tx);\n     }\n };\n \n@@ -153,43 +176,21 @@ class CBlockHeaderAndShortTxIDs {\n \n     size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-\n-        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n-        READWRITE(COMPACTSIZE(shorttxids_size));\n-        if (ser_action.ForRead()) {\n-            size_t i = 0;\n-            while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n-                for (; i < shorttxids.size(); i++) {\n-                    uint32_t lsb = 0; uint16_t msb = 0;\n-                    READWRITE(lsb);\n-                    READWRITE(msb);\n-                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-                }\n-            }\n-        } else {\n-            for (size_t i = 0; i < shorttxids.size(); i++) {\n-                uint32_t lsb = shorttxids[i] & 0xffffffff;\n-                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-                READWRITE(lsb);\n-                READWRITE(msb);\n-            }\n-        }\n-\n-        READWRITE(prefilledtxn);\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << header << nonce << Wrap<VectorApply<Uint48>>(shorttxids) << prefilledtxn;\n+    }\n \n-        if (BlockTxCount() > std::numeric_limits<uint16_t>::max())\n+    template <typename Stream>\n+    inline void Unserialize(Stream& s)\n+    {\n+        static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+        s >> header >> nonce >> Wrap<VectorApply<Uint48>>(shorttxids) >> prefilledtxn;\n+        if (BlockTxCount() > std::numeric_limits<uint16_t>::max()) {\n             throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n-\n-        if (ser_action.ForRead())\n-            FillShortTxIDSelector();\n+        }\n+        FillShortTxIDSelector();\n     }\n };\n "
      },
      {
        "sha": "e007c7e99a251d48ed9d3f1c3c864450641976a5",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 17,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb47327a8a4bdbf2982501d3b992571fb3b5a19b/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb47327a8a4bdbf2982501d3b992571fb3b5a19b/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=fb47327a8a4bdbf2982501d3b992571fb3b5a19b",
        "patch": "@@ -132,23 +132,9 @@ class TestHeaderAndShortIDs {\n         return base.GetShortID(txhash);\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(nonce);\n-        size_t shorttxids_size = shorttxids.size();\n-        READWRITE(VARINT(shorttxids_size));\n-        shorttxids.resize(shorttxids_size);\n-        for (size_t i = 0; i < shorttxids.size(); i++) {\n-            uint32_t lsb = shorttxids[i] & 0xffffffff;\n-            uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n-            READWRITE(lsb);\n-            READWRITE(msb);\n-            shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n-        }\n-        READWRITE(prefilledtxn);\n+    SERIALIZE_METHODS(TestHeaderAndShortIDs, obj)\n+    {\n+        READWRITE(obj.header, obj.nonce, Wrap<VectorApply<Uint48>>(obj.shorttxids), obj.prefilledtxn);\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "c16c306c9723101627c74213a13077db7cd6d6f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTZjMzA2Yzk3MjMxMDE2MjdjNzQyMTNhMTMwNzdkYjdjZDZkNmY3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T03:09:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert merkleblock/bloom to new serialization",
      "tree": {
        "sha": "b9a1f115f415e85c3b21f4087c8f25e7e20250d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9a1f115f415e85c3b21f4087c8f25e7e20250d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c16c306c9723101627c74213a13077db7cd6d6f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c16c306c9723101627c74213a13077db7cd6d6f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c16c306c9723101627c74213a13077db7cd6d6f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c16c306c9723101627c74213a13077db7cd6d6f7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb47327a8a4bdbf2982501d3b992571fb3b5a19b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb47327a8a4bdbf2982501d3b992571fb3b5a19b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb47327a8a4bdbf2982501d3b992571fb3b5a19b"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 25,
      "deletions": 36
    },
    "files": [
      {
        "sha": "f5221b532942e2ea23bdcc45eef1aaac8197249d",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c16c306c9723101627c74213a13077db7cd6d6f7/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c16c306c9723101627c74213a13077db7cd6d6f7/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=c16c306c9723101627c74213a13077db7cd6d6f7",
        "patch": "@@ -66,15 +66,7 @@ class CBloomFilter\n     CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweak, unsigned char nFlagsIn);\n     CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vData);\n-        READWRITE(nHashFuncs);\n-        READWRITE(nTweak);\n-        READWRITE(nFlags);\n-    }\n+    SERIALIZE_METHODS(CBloomFilter, obj) { READWRITE(obj.vData, obj.nHashFuncs, obj.nTweak, obj.nFlags); }\n \n     void insert(const std::vector<unsigned char>& vKey);\n     void insert(const COutPoint& outpoint);"
      },
      {
        "sha": "9771d15a6838c881a4a19ed21e901c600aeb8ce1",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 24,
        "deletions": 27,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c16c306c9723101627c74213a13077db7cd6d6f7/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c16c306c9723101627c74213a13077db7cd6d6f7/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=c16c306c9723101627c74213a13077db7cd6d6f7",
        "patch": "@@ -81,27 +81,31 @@ class CPartialMerkleTree\n \n public:\n \n-    /** serialization implementation */\n-    ADD_SERIALIZE_METHODS;\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        s << nTransactions;\n+        s << vHash;\n+        std::vector<unsigned char> vBytes;\n+        vBytes.resize((vBits.size()+7)/8);\n+        for (unsigned int p = 0; p < vBits.size(); p++) {\n+            vBytes[p / 8] |= vBits[p] << (p % 8);\n+        }\n+        s << vBytes;\n+    }\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nTransactions);\n-        READWRITE(vHash);\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        s >> nTransactions;\n+        s >> vHash;\n         std::vector<unsigned char> vBytes;\n-        if (ser_action.ForRead()) {\n-            READWRITE(vBytes);\n-            CPartialMerkleTree &us = *(const_cast<CPartialMerkleTree*>(this));\n-            us.vBits.resize(vBytes.size() * 8);\n-            for (unsigned int p = 0; p < us.vBits.size(); p++)\n-                us.vBits[p] = (vBytes[p / 8] & (1 << (p % 8))) != 0;\n-            us.fBad = false;\n-        } else {\n-            vBytes.resize((vBits.size()+7)/8);\n-            for (unsigned int p = 0; p < vBits.size(); p++)\n-                vBytes[p / 8] |= vBits[p] << (p % 8);\n-            READWRITE(vBytes);\n+        s >> vBytes;\n+        vBits.resize(vBytes.size() * 8);\n+        for (unsigned int p = 0; p < vBits.size(); p++) {\n+            vBits[p] = (vBytes[p / 8] & (1 << (p % 8))) != 0;\n         }\n+        fBad = false;\n     }\n \n     /** Construct a partial merkle tree from a list of transaction ids, and a mask that selects a subset of them */\n@@ -157,17 +161,10 @@ class CMerkleBlock\n \n     CMerkleBlock() {}\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(header);\n-        READWRITE(txn);\n-    }\n-\n-private:\n     // Combined constructor to consolidate code\n     CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids);\n+\n+    SERIALIZE_METHODS(CMerkleBlock, obj) { READWRITE(obj.header, obj.txn); }\n };\n \n #endif // BITCOIN_MERKLEBLOCK_H"
      }
    ]
  },
  {
    "sha": "5906323ee7eff9b092ec5267f65e9f1160ca626e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTA2MzIzZWU3ZWZmOWIwOTJlYzUyNjdmNjVlOWYxMTYwY2E2MjZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T03:27:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert chain to new serialization",
      "tree": {
        "sha": "85f3021275bf5dbdc9826e5fb3b9bb77983ae995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85f3021275bf5dbdc9826e5fb3b9bb77983ae995"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5906323ee7eff9b092ec5267f65e9f1160ca626e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5906323ee7eff9b092ec5267f65e9f1160ca626e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5906323ee7eff9b092ec5267f65e9f1160ca626e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5906323ee7eff9b092ec5267f65e9f1160ca626e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c16c306c9723101627c74213a13077db7cd6d6f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c16c306c9723101627c74213a13077db7cd6d6f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c16c306c9723101627c74213a13077db7cd6d6f7"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 26,
      "deletions": 30
    },
    "files": [
      {
        "sha": "cd9a462efe94e3a1312e6a3011f744e1700b543d",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 26,
        "deletions": 30,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5906323ee7eff9b092ec5267f65e9f1160ca626e/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5906323ee7eff9b092ec5267f65e9f1160ca626e/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=5906323ee7eff9b092ec5267f65e9f1160ca626e",
        "patch": "@@ -48,17 +48,15 @@ class CBlockFileInfo\n     uint64_t nTimeFirst;       //!< earliest time of block in file\n     uint64_t nTimeLast;        //!< latest time of block in file\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT(nBlocks));\n-        READWRITE(VARINT(nSize));\n-        READWRITE(VARINT(nUndoSize));\n-        READWRITE(VARINT(nHeightFirst));\n-        READWRITE(VARINT(nHeightLast));\n-        READWRITE(VARINT(nTimeFirst));\n-        READWRITE(VARINT(nTimeLast));\n+    SERIALIZE_METHODS(CBlockFileInfo, obj)\n+    {\n+        READWRITE(VARINT(obj.nBlocks));\n+        READWRITE(VARINT(obj.nSize));\n+        READWRITE(VARINT(obj.nUndoSize));\n+        READWRITE(VARINT(obj.nHeightFirst));\n+        READWRITE(VARINT(obj.nHeightLast));\n+        READWRITE(VARINT(obj.nTimeFirst));\n+        READWRITE(VARINT(obj.nTimeLast));\n     }\n \n      void SetNull() {\n@@ -332,31 +330,29 @@ class CDiskBlockIndex : public CBlockIndex\n         hashPrev = (pprev ? pprev->GetBlockHash() : uint256());\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(CDiskBlockIndex, obj)\n+    {\n         int _nVersion = s.GetVersion();\n         if (!(s.GetType() & SER_GETHASH))\n             READWRITE(VARINT(_nVersion, VarIntMode::NONNEGATIVE_SIGNED));\n \n-        READWRITE(VARINT(nHeight, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nStatus));\n-        READWRITE(VARINT(nTx));\n-        if (nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n-            READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        if (nStatus & BLOCK_HAVE_DATA)\n-            READWRITE(VARINT(nDataPos));\n-        if (nStatus & BLOCK_HAVE_UNDO)\n-            READWRITE(VARINT(nUndoPos));\n+        READWRITE(VARINT(obj.nHeight, VarIntMode::NONNEGATIVE_SIGNED));\n+        READWRITE(VARINT(obj.nStatus));\n+        READWRITE(VARINT(obj.nTx));\n+        if (obj.nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n+            READWRITE(VARINT(obj.nFile, VarIntMode::NONNEGATIVE_SIGNED));\n+        if (obj.nStatus & BLOCK_HAVE_DATA)\n+            READWRITE(VARINT(obj.nDataPos));\n+        if (obj.nStatus & BLOCK_HAVE_UNDO)\n+            READWRITE(VARINT(obj.nUndoPos));\n \n         // block header\n-        READWRITE(this->nVersion);\n-        READWRITE(hashPrev);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n+        READWRITE(obj.nVersion);\n+        READWRITE(obj.hashPrev);\n+        READWRITE(obj.hashMerkleRoot);\n+        READWRITE(obj.nTime);\n+        READWRITE(obj.nBits);\n+        READWRITE(obj.nNonce);\n     }\n \n     uint256 GetBlockHash() const"
      }
    ]
  },
  {
    "sha": "83ae3eaad492f92197a9654d7f345c438e98a2b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2FlM2VhYWQ0OTJmOTIxOTdhOTY1NGQ3ZjM0NWM0MzhlOThhMmIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T21:02:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert feerate to new serialization",
      "tree": {
        "sha": "2e82926b43a1c28ca4e58c22900b47d73f5ef132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e82926b43a1c28ca4e58c22900b47d73f5ef132"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83ae3eaad492f92197a9654d7f345c438e98a2b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ae3eaad492f92197a9654d7f345c438e98a2b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83ae3eaad492f92197a9654d7f345c438e98a2b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ae3eaad492f92197a9654d7f345c438e98a2b2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5906323ee7eff9b092ec5267f65e9f1160ca626e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5906323ee7eff9b092ec5267f65e9f1160ca626e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5906323ee7eff9b092ec5267f65e9f1160ca626e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "61fa80c13033ffc9f26db264297a5bd42a43c7bd",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83ae3eaad492f92197a9654d7f345c438e98a2b2/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83ae3eaad492f92197a9654d7f345c438e98a2b2/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=83ae3eaad492f92197a9654d7f345c438e98a2b2",
        "patch": "@@ -48,12 +48,7 @@ class CFeeRate\n     CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n     std::string ToString() const;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nSatoshisPerK);\n-    }\n+    SERIALIZE_METHODS(CFeeRate, obj) { READWRITE(obj.nSatoshisPerK); }\n };\n \n #endif //  BITCOIN_POLICY_FEERATE_H"
      }
    ]
  },
  {
    "sha": "bef9d84c98de0bf6f38d0d0868c2f13413f17ee8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWY5ZDg0Yzk4ZGUwYmY2ZjM4ZDBkMDg2OGMyZjEzNDEzZjE3ZWU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T21:12:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert protocol/net to new serialization",
      "tree": {
        "sha": "3ee6370c1bcb76a8905547db60a6062a775fb053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ee6370c1bcb76a8905547db60a6062a775fb053"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bef9d84c98de0bf6f38d0d0868c2f13413f17ee8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef9d84c98de0bf6f38d0d0868c2f13413f17ee8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bef9d84c98de0bf6f38d0d0868c2f13413f17ee8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef9d84c98de0bf6f38d0d0868c2f13413f17ee8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83ae3eaad492f92197a9654d7f345c438e98a2b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ae3eaad492f92197a9654d7f345c438e98a2b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83ae3eaad492f92197a9654d7f345c438e98a2b2"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 11,
      "deletions": 27
    },
    "files": [
      {
        "sha": "9efc89a2c237959ac23f186a96be3d30cc099e4a",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 11,
        "deletions": 27,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bef9d84c98de0bf6f38d0d0868c2f13413f17ee8/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bef9d84c98de0bf6f38d0d0868c2f13413f17ee8/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=bef9d84c98de0bf6f38d0d0868c2f13413f17ee8",
        "patch": "@@ -42,15 +42,9 @@ class CMessageHeader\n     std::string GetCommand() const;\n     bool IsValid(const MessageStartChars& messageStart) const;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+    SERIALIZE_METHODS(CMessageHeader, obj)\n     {\n-        READWRITE(pchMessageStart);\n-        READWRITE(pchCommand);\n-        READWRITE(nMessageSize);\n-        READWRITE(pchChecksum);\n+        READWRITE(obj.pchMessageStart, obj.pchCommand, obj.nMessageSize, obj.pchChecksum);\n     }\n \n     char pchMessageStart[MESSAGE_START_SIZE];\n@@ -323,21 +317,18 @@ class CAddress : public CService\n \n     void Init();\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+    SERIALIZE_METHODS(Caddress, obj)\n     {\n-        if (ser_action.ForRead())\n-            Init();\n         int nVersion = s.GetVersion();\n-        if (s.GetType() & SER_DISK)\n+        if (s.GetType() & SER_DISK) {\n             READWRITE(nVersion);\n+        }\n         if ((s.GetType() & SER_DISK) ||\n-            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH)))\n-            READWRITE(nTime);\n-        READWRITE(Wrap<Convert<uint64_t>>(nServices));\n-        READWRITEAS(CService, *this);\n+            (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            READWRITE(obj.nTime);\n+        }\n+        READWRITE(Wrap<Convert<uint64_t>>(obj.nServices));\n+        READWRITEAS(CService, obj);\n     }\n \n     // TODO: make private (improves encapsulation)\n@@ -376,14 +367,7 @@ class CInv\n     CInv();\n     CInv(int typeIn, const uint256& hashIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(type);\n-        READWRITE(hash);\n-    }\n+    SERIALIZE_METHODS(CInv, obj) { READWRITE(obj.type, obj.hash); }\n \n     friend bool operator<(const CInv& a, const CInv& b);\n "
      }
    ]
  },
  {
    "sha": "82d4504dd83e59a7afbae9000abc56acb7466dea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmQ0NTA0ZGQ4M2U1OWE3YWZiYWU5MDAwYWJjNTZhY2I3NDY2ZGVh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-09T00:03:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert compressor/txdb/coins/undo/script to new serialization",
      "tree": {
        "sha": "3e78d1389b0a0c12702075ab707926ff7b03ac13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e78d1389b0a0c12702075ab707926ff7b03ac13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82d4504dd83e59a7afbae9000abc56acb7466dea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82d4504dd83e59a7afbae9000abc56acb7466dea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82d4504dd83e59a7afbae9000abc56acb7466dea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82d4504dd83e59a7afbae9000abc56acb7466dea/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bef9d84c98de0bf6f38d0d0868c2f13413f17ee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bef9d84c98de0bf6f38d0d0868c2f13413f17ee8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bef9d84c98de0bf6f38d0d0868c2f13413f17ee8"
      }
    ],
    "stats": {
      "total": 295,
      "additions": 125,
      "deletions": 170
    },
    "files": [
      {
        "sha": "fe71676938b05105b3fe3b5b987ef125e19ca361",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d4504dd83e59a7afbae9000abc56acb7466dea/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d4504dd83e59a7afbae9000abc56acb7466dea/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=82d4504dd83e59a7afbae9000abc56acb7466dea",
        "patch": "@@ -25,7 +25,7 @@\n  *\n  * Serialized format:\n  * - VARINT((coinbase ? 1 : 0) | (height << 1))\n- * - the non-spent CTxOut (via CTxOutCompressor)\n+ * - the non-spent CTxOut (via TxOutCompress)\n  */\n class Coin\n {\n@@ -61,7 +61,7 @@ class Coin\n         assert(!IsSpent());\n         uint32_t code = nHeight * 2 + fCoinBase;\n         ::Serialize(s, VARINT(code));\n-        ::Serialize(s, CTxOutCompressor(REF(out)));\n+        ::Serialize(s, Wrap<TxOutCompression>(out));\n     }\n \n     template<typename Stream>\n@@ -70,7 +70,7 @@ class Coin\n         ::Unserialize(s, VARINT(code));\n         nHeight = code >> 1;\n         fCoinBase = code & 1;\n-        ::Unserialize(s, CTxOutCompressor(out));\n+        ::Unserialize(s, Wrap<TxOutCompression>(out));\n     }\n \n     bool IsSpent() const {"
      },
      {
        "sha": "95b8b15a8f3e795e80f441989ab4f188a6956b86",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 76,
        "deletions": 65,
        "changes": 141,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d4504dd83e59a7afbae9000abc56acb7466dea/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d4504dd83e59a7afbae9000abc56acb7466dea/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=82d4504dd83e59a7afbae9000abc56acb7466dea",
        "patch": "@@ -11,10 +11,6 @@\n #include <serialize.h>\n #include <span.h>\n \n-class CKeyID;\n-class CPubKey;\n-class CScriptID;\n-\n bool CompressScript(const CScript& script, std::vector<unsigned char> &out);\n unsigned int GetSpecialScriptSize(unsigned int nSize);\n bool DecompressScript(CScript& script, unsigned int nSize, const std::vector<unsigned char> &out);\n@@ -33,79 +29,94 @@ uint64_t DecompressAmount(uint64_t nAmount);\n  *  Other scripts up to 121 bytes require 1 byte + script length. Above\n  *  that, scripts up to 16505 bytes require 2 bytes + script length.\n  */\n-class CScriptCompressor\n+struct ScriptCompression\n {\n-private:\n-    /**\n-     * make this static for now (there are only 6 special scripts defined)\n-     * this can potentially be extended together with a new nVersion for\n-     * transactions, in which case this value becomes dependent on nVersion\n-     * and nHeight of the enclosing transaction.\n-     */\n-    static const unsigned int nSpecialScripts = 6;\n+    template<typename S>\n+    class Wrapper\n+    {\n+    private:\n+        /**\n+         * make this static for now (there are only 6 special scripts defined)\n+         * this can potentially be extended together with a new nVersion for\n+         * transactions, in which case this value becomes dependent on nVersion\n+         * and nHeight of the enclosing transaction.\n+         */\n+        static const unsigned int nSpecialScripts = 6;\n+\n+        S &script;\n+    public:\n+        explicit Wrapper(S &scriptIn) : script(scriptIn) { }\n \n-    CScript &script;\n-public:\n-    explicit CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n+        template<typename Stream>\n+        void Serialize(Stream &s) const {\n+            std::vector<unsigned char> compr;\n+            if (CompressScript(script, compr)) {\n+                s << MakeSpan(compr);\n+                return;\n+            }\n+            unsigned int nSize = script.size() + nSpecialScripts;\n+            s << VARINT(nSize);\n+            s << MakeSpan(script);\n+        }\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        std::vector<unsigned char> compr;\n-        if (CompressScript(script, compr)) {\n-            s << MakeSpan(compr);\n-            return;\n+        template<typename Stream>\n+        void Unserialize(Stream &s) {\n+            unsigned int nSize = 0;\n+            s >> VARINT(nSize);\n+            if (nSize < nSpecialScripts) {\n+                std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+                s >> MakeSpan(vch);\n+                DecompressScript(script, nSize, vch);\n+                return;\n+            }\n+            nSize -= nSpecialScripts;\n+            if (nSize > MAX_SCRIPT_SIZE) {\n+                // Overly long script, replace with a short invalid one\n+                script << OP_RETURN;\n+                s.ignore(nSize);\n+            } else {\n+                script.resize(nSize);\n+                s >> MakeSpan(script);\n+            }\n         }\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        s << VARINT(nSize);\n-        s << MakeSpan(script);\n-    }\n+    };\n+};\n \n-    template<typename Stream>\n-    void Unserialize(Stream &s) {\n-        unsigned int nSize = 0;\n-        s >> VARINT(nSize);\n-        if (nSize < nSpecialScripts) {\n-            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n-            s >> MakeSpan(vch);\n-            DecompressScript(script, nSize, vch);\n-            return;\n+struct AmountCompression\n+{\n+    template<typename I>\n+    class Wrapper\n+    {\n+        I& m_val;\n+    public:\n+        explicit Wrapper(I& val) : m_val(val) {}\n+        template<typename Stream> void Serialize(Stream& s) const\n+        {\n+            s << VARINT(CompressAmount(m_val));\n         }\n-        nSize -= nSpecialScripts;\n-        if (nSize > MAX_SCRIPT_SIZE) {\n-            // Overly long script, replace with a short invalid one\n-            script << OP_RETURN;\n-            s.ignore(nSize);\n-        } else {\n-            script.resize(nSize);\n-            s >> MakeSpan(script);\n+        template<typename Stream> void Unserialize(Stream& s)\n+        {\n+            uint64_t v;\n+            s >> VARINT(v);\n+            m_val = DecompressAmount(v);\n         }\n-    }\n+    };\n };\n \n /** wrapper for CTxOut that provides a more compact serialization */\n-class CTxOutCompressor\n+struct TxOutCompression\n {\n-private:\n-    CTxOut &txout;\n-\n-public:\n-    explicit CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (!ser_action.ForRead()) {\n-            uint64_t nVal = CompressAmount(txout.nValue);\n-            READWRITE(VARINT(nVal));\n-        } else {\n-            uint64_t nVal = 0;\n-            READWRITE(VARINT(nVal));\n-            txout.nValue = DecompressAmount(nVal);\n+    template<typename O>\n+    class Wrapper\n+    {\n+    private:\n+        O &txout;\n+    public:\n+        Wrapper(O &txoutIn) : txout(txoutIn) { }\n+        SERIALIZE_METHODS(Wrapper, obj) {\n+            READWRITE(Wrap<AmountCompression>(obj.txout.nValue), Wrap<ScriptCompression>(obj.txout.scriptPubKey));\n         }\n-        CScriptCompressor cscript(REF(txout.scriptPubKey));\n-        READWRITE(cscript);\n-    }\n+    };\n };\n \n #endif // BITCOIN_COMPRESSOR_H"
      },
      {
        "sha": "4626395ef0595e4182780a93db7122c444d07b86",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d4504dd83e59a7afbae9000abc56acb7466dea/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d4504dd83e59a7afbae9000abc56acb7466dea/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=82d4504dd83e59a7afbae9000abc56acb7466dea",
        "patch": "@@ -21,12 +21,10 @@ struct CDiskTxPos : public FlatFilePos\n {\n     unsigned int nTxOffset; // after header\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(FlatFilePos, *this);\n-        READWRITE(VARINT(nTxOffset));\n+    SERIALIZE_METHODS(CDiskTxPos, obj)\n+    {\n+        READWRITEAS(FlatFilePos, obj);\n+        READWRITE(VARINT(obj.nTxOffset));\n     }\n \n     CDiskTxPos(const FlatFilePos &blockIn, unsigned int nTxOffsetIn) : FlatFilePos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {"
      },
      {
        "sha": "df88a7aa60ea26c6d8622128a7e846667552baf8",
        "filename": "src/node/utxo_snapshot.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d4504dd83e59a7afbae9000abc56acb7466dea/src/node/utxo_snapshot.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d4504dd83e59a7afbae9000abc56acb7466dea/src/node/utxo_snapshot.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/utxo_snapshot.h?ref=82d4504dd83e59a7afbae9000abc56acb7466dea",
        "patch": "@@ -35,14 +35,11 @@ class SnapshotMetadata\n             m_coins_count(coins_count),\n             m_nchaintx(nchaintx) { }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+    SERIALIZE_METHODS(SnapshotMetadata, obj)\n     {\n-        READWRITE(m_base_blockhash);\n-        READWRITE(m_coins_count);\n-        READWRITE(m_nchaintx);\n+        READWRITE(obj.m_base_blockhash);\n+        READWRITE(obj.m_coins_count);\n+        READWRITE(obj.m_nchaintx);\n     }\n \n };"
      },
      {
        "sha": "dad10b0bb3d335d1454d10da34580b38e9d5ed1b",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d4504dd83e59a7afbae9000abc56acb7466dea/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d4504dd83e59a7afbae9000abc56acb7466dea/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=82d4504dd83e59a7afbae9000abc56acb7466dea",
        "patch": "@@ -317,7 +317,7 @@ class CAddress : public CService\n \n     void Init();\n \n-    SERIALIZE_METHODS(Caddress, obj)\n+    SERIALIZE_METHODS(CAddress, obj)\n     {\n         int nVersion = s.GetVersion();\n         if (s.GetType() & SER_DISK) {"
      },
      {
        "sha": "e3dd57ddc98ff38f195d3ca24308e36236971c8d",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d4504dd83e59a7afbae9000abc56acb7466dea/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d4504dd83e59a7afbae9000abc56acb7466dea/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=82d4504dd83e59a7afbae9000abc56acb7466dea",
        "patch": "@@ -412,12 +412,7 @@ class CScript : public CScriptBase\n     CScript(std::vector<unsigned char>::const_iterator pbegin, std::vector<unsigned char>::const_iterator pend) : CScriptBase(pbegin, pend) { }\n     CScript(const unsigned char* pbegin, const unsigned char* pend) : CScriptBase(pbegin, pend) { }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CScriptBase, *this);\n-    }\n+    SERIALIZE_METHODS(CScript, obj) { READWRITEAS(CScriptBase, obj); }\n \n     CScript& operator+=(const CScript& b)\n     {"
      },
      {
        "sha": "6fdbaabc12b2221b0e48bf58eb28d4eb083058bb",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d4504dd83e59a7afbae9000abc56acb7466dea/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d4504dd83e59a7afbae9000abc56acb7466dea/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=82d4504dd83e59a7afbae9000abc56acb7466dea",
        "patch": "@@ -206,7 +206,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         DeserializeFromFuzzingInput(buffer, dbi);\n #elif TXOUTCOMPRESSOR_DESERIALIZE\n         CTxOut to;\n-        CTxOutCompressor toc(to);\n+        auto toc = Wrap<TxOutCompression>(to);\n         DeserializeFromFuzzingInput(buffer, toc);\n #elif BLOCKTRANSACTIONS_DESERIALIZE\n         BlockTransactions bt;"
      },
      {
        "sha": "6160b843f42c6c78cc63e619b5928d378f846663",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 14,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d4504dd83e59a7afbae9000abc56acb7466dea/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d4504dd83e59a7afbae9000abc56acb7466dea/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=82d4504dd83e59a7afbae9000abc56acb7466dea",
        "patch": "@@ -36,19 +36,7 @@ struct CoinEntry {\n     char key;\n     explicit CoinEntry(const COutPoint* ptr) : outpoint(const_cast<COutPoint*>(ptr)), key(DB_COIN)  {}\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        s << key;\n-        s << outpoint->hash;\n-        s << VARINT(outpoint->n);\n-    }\n-\n-    template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        s >> key;\n-        s >> outpoint->hash;\n-        s >> VARINT(outpoint->n);\n-    }\n+    SERIALIZE_METHODS(CoinEntry, obj) { READWRITE(obj.key, obj.outpoint->hash, VARINT(obj.outpoint->n)); }\n };\n \n }\n@@ -336,7 +324,7 @@ class CCoins\n         vout.assign(vAvail.size(), CTxOut());\n         for (unsigned int i = 0; i < vAvail.size(); i++) {\n             if (vAvail[i])\n-                ::Unserialize(s, CTxOutCompressor(vout[i]));\n+                ::Unserialize(s, Wrap<TxOutCompression>(vout[i]));\n         }\n         // coinbase height\n         ::Unserialize(s, VARINT(nHeight, VarIntMode::NONNEGATIVE_SIGNED));"
      },
      {
        "sha": "5fe76ee571acee20039ebf61224bc45fed54e75e",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 33,
        "deletions": 67,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82d4504dd83e59a7afbae9000abc56acb7466dea/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82d4504dd83e59a7afbae9000abc56acb7466dea/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=82d4504dd83e59a7afbae9000abc56acb7466dea",
        "patch": "@@ -20,81 +20,52 @@\n  *  zero. This is compatible with older versions which expect to see\n  *  the transaction version there.\n  */\n-class TxInUndoSerializer\n+struct TxInUndo\n {\n-    const Coin* txout;\n-\n-public:\n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1u : 0u)));\n-        if (txout->nHeight > 0) {\n-            // Required to maintain compatibility with older undo format.\n-            ::Serialize(s, (unsigned char)0);\n+    template<typename C>\n+    class Wrapper\n+    {\n+        C& txout;\n+\n+    public:\n+        template<typename Stream>\n+        void Serialize(Stream &s) const {\n+            ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1u : 0u)));\n+            if (txout.nHeight > 0) {\n+                // Required to maintain compatibility with older undo format.\n+                ::Serialize(s, (unsigned char)0);\n+            }\n+            ::Serialize(s, Wrap<TxOutCompression>(txout.out));\n         }\n-        ::Serialize(s, CTxOutCompressor(REF(txout->out)));\n-    }\n-\n-    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n-};\n \n-class TxInUndoDeserializer\n-{\n-    Coin* txout;\n-\n-public:\n-    template<typename Stream>\n-    void Unserialize(Stream &s) {\n-        unsigned int nCode = 0;\n-        ::Unserialize(s, VARINT(nCode));\n-        txout->nHeight = nCode / 2;\n-        txout->fCoinBase = nCode & 1;\n-        if (txout->nHeight > 0) {\n-            // Old versions stored the version number for the last spend of\n-            // a transaction's outputs. Non-final spends were indicated with\n-            // height = 0.\n-            unsigned int nVersionDummy;\n-            ::Unserialize(s, VARINT(nVersionDummy));\n+        template<typename Stream>\n+        void Unserialize(Stream &s) {\n+            unsigned int nCode = 0;\n+            ::Unserialize(s, VARINT(nCode));\n+            txout.nHeight = nCode / 2;\n+            txout.fCoinBase = nCode & 1;\n+            if (txout.nHeight > 0) {\n+                // Old versions stored the version number for the last spend of\n+                // a transaction's outputs. Non-final spends were indicated with\n+                // height = 0.\n+                unsigned int nVersionDummy;\n+                ::Unserialize(s, VARINT(nVersionDummy));\n+            }\n+            ::Unserialize(s, Wrap<TxOutCompression>(txout.out));\n         }\n-        ::Unserialize(s, CTxOutCompressor(REF(txout->out)));\n-    }\n \n-    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n+        explicit Wrapper(C& coin) : txout(coin) {}\n+    };\n };\n \n-static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), PROTOCOL_VERSION);\n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n-\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n     std::vector<Coin> vprevout;\n \n-    template <typename Stream>\n-    void Serialize(Stream& s) const {\n-        // TODO: avoid reimplementing vector serializer\n-        uint64_t count = vprevout.size();\n-        ::Serialize(s, COMPACTSIZE(REF(count)));\n-        for (const auto& prevout : vprevout) {\n-            ::Serialize(s, TxInUndoSerializer(&prevout));\n-        }\n-    }\n-\n-    template <typename Stream>\n-    void Unserialize(Stream& s) {\n-        // TODO: avoid reimplementing vector deserializer\n-        uint64_t count = 0;\n-        ::Unserialize(s, COMPACTSIZE(count));\n-        if (count > MAX_INPUTS_PER_BLOCK) {\n-            throw std::ios_base::failure(\"Too many input undo records\");\n-        }\n-        vprevout.resize(count);\n-        for (auto& prevout : vprevout) {\n-            ::Unserialize(s, TxInUndoDeserializer(&prevout));\n-        }\n-    }\n+    SERIALIZE_METHODS(CTxUndo, obj) { READWRITE(Wrap<VectorApply<TxInUndo>>(obj.vprevout)); }\n };\n \n /** Undo information for a CBlock */\n@@ -103,12 +74,7 @@ class CBlockUndo\n public:\n     std::vector<CTxUndo> vtxundo; // for all but the coinbase\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vtxundo);\n-    }\n+    SERIALIZE_METHODS(CBlockUndo, obj) { READWRITE(obj.vtxundo); }\n };\n \n #endif // BITCOIN_UNDO_H"
      }
    ]
  },
  {
    "sha": "a4687632d51aec4829d493bc42142ac7f807647d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDY4NzYzMmQ1MWFlYzQ4MjlkNDkzYmM0MjE0MmFjN2Y4MDc2NDdk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-09T00:58:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert Qt to new serialization",
      "tree": {
        "sha": "7619a580fc8efad0880fa222abcecc505814146a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7619a580fc8efad0880fa222abcecc505814146a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4687632d51aec4829d493bc42142ac7f807647d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4687632d51aec4829d493bc42142ac7f807647d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4687632d51aec4829d493bc42142ac7f807647d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4687632d51aec4829d493bc42142ac7f807647d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82d4504dd83e59a7afbae9000abc56acb7466dea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82d4504dd83e59a7afbae9000abc56acb7466dea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82d4504dd83e59a7afbae9000abc56acb7466dea"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 60,
      "deletions": 37
    },
    "files": [
      {
        "sha": "5643ee3b1a8c903793105a985034c6e604bef469",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4687632d51aec4829d493bc42142ac7f807647d/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4687632d51aec4829d493bc42142ac7f807647d/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=a4687632d51aec4829d493bc42142ac7f807647d",
        "patch": "@@ -13,6 +13,30 @@\n \n class WalletModel;\n \n+//! Wrapper class to serialize QDateTime objects as 32-bit time_t.\n+struct AsTimeT\n+{\n+    template<typename Q>\n+    class Wrapper\n+    {\n+    private:\n+        Q& m_qdatetime;\n+    public:\n+        Wrapper(Q& qdatetime) : m_qdatetime(qdatetime) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const { s << (uint32_t)m_qdatetime.toTime_t(); }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            uint32_t timeval;\n+            s >> timeval;\n+            m_qdatetime = QDateTime::fromTime_t(timeval);\n+        }\n+    };\n+};\n+\n class RecentRequestEntry\n {\n public:\n@@ -24,19 +48,9 @@ class RecentRequestEntry\n     QDateTime date;\n     SendCoinsRecipient recipient;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        unsigned int nDate = date.toTime_t();\n-\n-        READWRITE(this->nVersion);\n-        READWRITE(id);\n-        READWRITE(nDate);\n-        READWRITE(recipient);\n-\n-        if (ser_action.ForRead())\n-            date = QDateTime::fromTime_t(nDate);\n+    SERIALIZE_METHODS(RecentRequestEntry, obj)\n+    {\n+        READWRITE(obj.nVersion, obj.id, Wrap<AsTimeT>(obj.date), obj.recipient);\n     }\n };\n "
      },
      {
        "sha": "85f737f4edda2dbd9491fb33b651c5a07a5d4ad7",
        "filename": "src/qt/sendcoinsrecipient.h",
        "status": "modified",
        "additions": 33,
        "deletions": 24,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4687632d51aec4829d493bc42142ac7f807647d/src/qt/sendcoinsrecipient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4687632d51aec4829d493bc42142ac7f807647d/src/qt/sendcoinsrecipient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsrecipient.h?ref=a4687632d51aec4829d493bc42142ac7f807647d",
        "patch": "@@ -16,6 +16,30 @@\n \n #include <QString>\n \n+//! Wrapper class to serialize QString objects as std::strings.\n+struct AsStdString\n+{\n+    template<typename Q>\n+    class Wrapper\n+    {\n+    private:\n+        Q& m_qstring;\n+    public:\n+        Wrapper(Q& qstring) : m_qstring(qstring) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const { s << m_qstring.toStdString(); }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            std::string str;\n+            s >> str;\n+            m_qstring = QString::fromStdString(std::move(str));\n+        }\n+    };\n+};\n+\n class SendCoinsRecipient\n {\n public:\n@@ -44,30 +68,15 @@ class SendCoinsRecipient\n     static const int CURRENT_VERSION = 1;\n     int nVersion;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        std::string sAddress = address.toStdString();\n-        std::string sLabel = label.toStdString();\n-        std::string sMessage = message.toStdString();\n-        std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n-\n-        READWRITE(this->nVersion);\n-        READWRITE(sAddress);\n-        READWRITE(sLabel);\n-        READWRITE(amount);\n-        READWRITE(sMessage);\n-        READWRITE(sPaymentRequest);\n-        READWRITE(sAuthenticatedMerchant);\n-\n-        if (ser_action.ForRead())\n-        {\n-            address = QString::fromStdString(sAddress);\n-            label = QString::fromStdString(sLabel);\n-            message = QString::fromStdString(sMessage);\n-            authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n-        }\n+    SERIALIZE_METHODS(SendCoinsRecipient, obj)\n+    {\n+        READWRITE(obj.nVersion);\n+        READWRITE(Wrap<AsStdString>(obj.address));\n+        READWRITE(Wrap<AsStdString>(obj.label));\n+        READWRITE(obj.amount);\n+        READWRITE(Wrap<AsStdString>(obj.message));\n+        READWRITE(obj.sPaymentRequest);\n+        READWRITE(Wrap<AsStdString>(obj.authenticatedMerchant));\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "a9b5fd17c174882628d59b9e2e08ab9bed781e2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWI1ZmQxN2MxNzQ4ODI2MjhkNTliOWUyZTA4YWI5YmVkNzgxZTJh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-09T01:01:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert rest to new serialization",
      "tree": {
        "sha": "ddc14d36cbc069a882cf48728b3d303ae02b87b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddc14d36cbc069a882cf48728b3d303ae02b87b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9b5fd17c174882628d59b9e2e08ab9bed781e2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b5fd17c174882628d59b9e2e08ab9bed781e2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9b5fd17c174882628d59b9e2e08ab9bed781e2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b5fd17c174882628d59b9e2e08ab9bed781e2a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4687632d51aec4829d493bc42142ac7f807647d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4687632d51aec4829d493bc42142ac7f807647d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4687632d51aec4829d493bc42142ac7f807647d"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 2,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ee422ea5ffcbea879e487f4f372902237c1becd9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b5fd17c174882628d59b9e2e08ab9bed781e2a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b5fd17c174882628d59b9e2e08ab9bed781e2a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=a9b5fd17c174882628d59b9e2e08ab9bed781e2a",
        "patch": "@@ -49,18 +49,13 @@ struct CCoin {\n     uint32_t nHeight;\n     CTxOut out;\n \n-    ADD_SERIALIZE_METHODS;\n-\n     CCoin() : nHeight(0) {}\n     explicit CCoin(Coin&& in) : nHeight(in.nHeight), out(std::move(in.out)) {}\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+    SERIALIZE_METHODS(CCoin, obj)\n     {\n         uint32_t nTxVerDummy = 0;\n-        READWRITE(nTxVerDummy);\n-        READWRITE(nHeight);\n-        READWRITE(out);\n+        READWRITE(nTxVerDummy, obj.nHeight, obj.out);\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "db380b4dd830fde6c9f482f1964bcd7986e3af77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjM4MGI0ZGQ4MzBmZGU2YzlmNDgyZjE5NjRiY2Q3OTg2ZTNhZjc3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-09T01:18:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert dbwrapper tests to new serialization",
      "tree": {
        "sha": "c887a99274fa9c40beb75ea0042aec592947ccf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c887a99274fa9c40beb75ea0042aec592947ccf9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db380b4dd830fde6c9f482f1964bcd7986e3af77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db380b4dd830fde6c9f482f1964bcd7986e3af77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db380b4dd830fde6c9f482f1964bcd7986e3af77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db380b4dd830fde6c9f482f1964bcd7986e3af77/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9b5fd17c174882628d59b9e2e08ab9bed781e2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b5fd17c174882628d59b9e2e08ab9bed781e2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9b5fd17c174882628d59b9e2e08ab9bed781e2a"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 19,
      "deletions": 17
    },
    "files": [
      {
        "sha": "7d3c59077da2d9a13ced8c2c1ca1c1107b3c80e4",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db380b4dd830fde6c9f482f1964bcd7986e3af77/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db380b4dd830fde6c9f482f1964bcd7986e3af77/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=db380b4dd830fde6c9f482f1964bcd7986e3af77",
        "patch": "@@ -331,24 +331,26 @@ struct StringContentsSerializer {\n     }\n     StringContentsSerializer& operator+=(const StringContentsSerializer& s) { return *this += s.str; }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead()) {\n-            str.clear();\n-            char c = 0;\n-            while (true) {\n-                try {\n-                    READWRITE(c);\n-                    str.push_back(c);\n-                } catch (const std::ios_base::failure&) {\n-                    break;\n-                }\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        for (size_t i = 0; i < str.size(); i++) {\n+            s << str[i];\n+        }\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        str.clear();\n+        char c = 0;\n+        while (true) {\n+            try {\n+                s >> c;\n+                str.push_back(c);\n+            } catch (const std::ios_base::failure&) {\n+                break;\n             }\n-        } else {\n-            for (size_t i = 0; i < str.size(); i++)\n-                READWRITE(str[i]);\n         }\n     }\n };"
      }
    ]
  },
  {
    "sha": "085e60a5f03961cce309c06d251fc92165a469f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODVlNjBhNWYwMzk2MWNjZTMwOWMwNmQyNTFmYzkyMTY1YTQ2OWY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-09T01:21:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert serialize_tests/streams_tests to new serialization",
      "tree": {
        "sha": "23d0aa362f33a8d706b5f8578d2c6aa6454785f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23d0aa362f33a8d706b5f8578d2c6aa6454785f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/085e60a5f03961cce309c06d251fc92165a469f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/085e60a5f03961cce309c06d251fc92165a469f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/085e60a5f03961cce309c06d251fc92165a469f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/085e60a5f03961cce309c06d251fc92165a469f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db380b4dd830fde6c9f482f1964bcd7986e3af77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db380b4dd830fde6c9f482f1964bcd7986e3af77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db380b4dd830fde6c9f482f1964bcd7986e3af77"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 10,
      "deletions": 13
    },
    "files": [
      {
        "sha": "5e9269378b04c721dbd657a77d5e2b5c098a9218",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/085e60a5f03961cce309c06d251fc92165a469f8/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/085e60a5f03961cce309c06d251fc92165a469f8/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=085e60a5f03961cce309c06d251fc92165a469f8",
        "patch": "@@ -29,15 +29,13 @@ class CSerializeMethodsTestSingle\n         memcpy(charstrval, charstrvalin, sizeof(charstrval));\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(intval);\n-        READWRITE(boolval);\n-        READWRITE(stringval);\n-        READWRITE(charstrval);\n-        READWRITE(txval);\n+    SERIALIZE_METHODS(CSerializeMethodsTestSingle, obj)\n+    {\n+        READWRITE(obj.intval);\n+        READWRITE(obj.boolval);\n+        READWRITE(obj.stringval);\n+        READWRITE(obj.charstrval);\n+        READWRITE(obj.txval);\n     }\n \n     bool operator==(const CSerializeMethodsTestSingle& rhs)\n@@ -54,11 +52,10 @@ class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle\n {\n public:\n     using CSerializeMethodsTestSingle::CSerializeMethodsTestSingle;\n-    ADD_SERIALIZE_METHODS;\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(intval, boolval, stringval, charstrval, txval);\n+    SERIALIZE_METHODS(CSerializeMethodsTestMany, obj)\n+    {\n+        READWRITE(obj.intval, obj.boolval, obj.stringval, obj.charstrval, obj.txval);\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmZmNzJjN2FiOGFhNTdiM2JkOTRjOTU2M2JjNmQzYTI0ZTBmOTlj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-09T06:20:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert wallet/walletdb/crypter to new serialization",
      "tree": {
        "sha": "1a67bd15ddc8a6b12eb8f48bc855e8721a43f145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a67bd15ddc8a6b12eb8f48bc855e8721a43f145"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "085e60a5f03961cce309c06d251fc92165a469f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/085e60a5f03961cce309c06d251fc92165a469f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/085e60a5f03961cce309c06d251fc92165a469f8"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 50,
      "deletions": 70
    },
    "files": [
      {
        "sha": "a318ff0f9da8148e55f1bccc4621c0756b74e325",
        "filename": "src/script/keyorigin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/script/keyorigin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/script/keyorigin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/keyorigin.h?ref=06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
        "patch": "@@ -18,13 +18,7 @@ struct KeyOriginInfo\n         return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(fingerprint);\n-        READWRITE(path);\n-    }\n+    SERIALIZE_METHODS(KeyOriginInfo, obj) { READWRITE(obj.fingerprint, obj.path); }\n \n     void clear()\n     {"
      },
      {
        "sha": "f2df786e2e7c05e0f444c7ea4d57d0c833171a6c",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
        "patch": "@@ -43,15 +43,9 @@ class CMasterKey\n     //! such as the various parameters to scrypt\n     std::vector<unsigned char> vchOtherDerivationParameters;\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vchCryptedKey);\n-        READWRITE(vchSalt);\n-        READWRITE(nDerivationMethod);\n-        READWRITE(nDeriveIterations);\n-        READWRITE(vchOtherDerivationParameters);\n+    SERIALIZE_METHODS(CMasterKey, obj)\n+    {\n+        READWRITE(obj.vchCryptedKey, obj.vchSalt, obj.nDerivationMethod, obj.nDeriveIterations, obj.vchOtherDerivationParameters);\n     }\n \n     CMasterKey()"
      },
      {
        "sha": "9a854437ebb0bee4ba6748f0b893ea706164564b",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 29,
        "deletions": 28,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
        "patch": "@@ -100,36 +100,37 @@ class CKeyPool\n     CKeyPool();\n     CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-        if (ser_action.ForRead()) {\n-            try {\n-                READWRITE(fInternal);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as external address if we can't read the internal boolean\n-                   (this will be the case for any wallet before the HD chain split version) */\n-                fInternal = false;\n-            }\n-            try {\n-                READWRITE(m_pre_split);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as postsplit address if we can't read the m_pre_split boolean\n-                   (this will be the case for any wallet that upgrades to HD chain split)*/\n-                m_pre_split = false;\n-            }\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s << nVersion;\n+        }\n+        s << nTime << vchPubKey << fInternal << m_pre_split;\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        int nVersion;\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s >> nVersion;\n+        }\n+        s >> nTime >> vchPubKey;\n+        try {\n+            s >> fInternal;\n+        } catch (std::ios_base::failure&) {\n+            /* flag as external address if we can't read the internal boolean\n+               (this will be the case for any wallet before the HD chain split version) */\n+            fInternal = false;\n         }\n-        else {\n-            READWRITE(fInternal);\n-            READWRITE(m_pre_split);\n+        try {\n+            s >> m_pre_split;\n+        } catch (std::ios_base::failure&) {\n+            /* flag as external address if we can't read the internal boolean\n+               (this will be the case for any wallet before the HD chain split version) */\n+            m_pre_split = false;\n         }\n     }\n };"
      },
      {
        "sha": "78a77e34d827e3e63a15042f522768e090724187",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
        "patch": "@@ -228,15 +228,13 @@ struct COutputEntry\n class CMerkleTx\n {\n public:\n-    template<typename Stream>\n-    void Unserialize(Stream& s)\n+    SERIALIZE_METHODS(CMerkleTx, obj)\n     {\n         CTransactionRef tx;\n         uint256 hashBlock;\n-        std::vector<uint256> vMerkleBranch;\n+        std::vector<uint256> vMerkleBranch; // For compatibility with older versions.\n         int nIndex;\n-\n-        s >> tx >> hashBlock >> vMerkleBranch >> nIndex;\n+        READWRITE(tx, hashBlock, vMerkleBranch, nIndex);\n     }\n };\n "
      },
      {
        "sha": "92e2321afeb9d014eb194a50ea6a126af67990b2",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 14,
        "deletions": 21,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
        "patch": "@@ -92,15 +92,13 @@ class CHDChain\n     int nVersion;\n \n     CHDChain() { SetNull(); }\n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n+\n+    SERIALIZE_METHODS(CHDChain, obj)\n     {\n-        READWRITE(this->nVersion);\n-        READWRITE(nExternalChainCounter);\n-        READWRITE(seed_id);\n-        if (this->nVersion >= VERSION_HD_CHAIN_SPLIT)\n-            READWRITE(nInternalChainCounter);\n+        READWRITE(obj.nVersion, obj.nExternalChainCounter, obj.seed_id);\n+        if (obj.nVersion >= VERSION_HD_CHAIN_SPLIT) {\n+            READWRITE(obj.nInternalChainCounter);\n+        }\n     }\n \n     void SetNull()\n@@ -136,21 +134,16 @@ class CKeyMetadata\n         nCreateTime = nCreateTime_;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(nCreateTime);\n-        if (this->nVersion >= VERSION_WITH_HDDATA)\n-        {\n-            READWRITE(hdKeypath);\n-            READWRITE(hd_seed_id);\n+    SERIALIZE_METHODS(CKeyMetadata, obj)\n+    {\n+        READWRITE(obj.nVersion, obj.nCreateTime);\n+        if (obj.nVersion >= VERSION_WITH_HDDATA) {\n+            READWRITE(obj.hdKeypath, obj.hd_seed_id);\n         }\n-        if (this->nVersion >= VERSION_WITH_KEY_ORIGIN)\n+        if (obj.nVersion >= VERSION_WITH_KEY_ORIGIN)\n         {\n-            READWRITE(key_origin);\n-            READWRITE(has_key_origin);\n+            READWRITE(obj.key_origin);\n+            READWRITE(obj.has_key_origin);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "566e0ec1f73b287fbabb8296726fa6db7d595565",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjZlMGVjMWY3M2IyODdmYmFiYjgyOTY3MjZmYTZkYjdkNTk1NTY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-08T04:50:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert netaddress to new serialization",
      "tree": {
        "sha": "ef62f350b8018335ea8d090422bd9ba5029353a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef62f350b8018335ea8d090422bd9ba5029353a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/566e0ec1f73b287fbabb8296726fa6db7d595565",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/566e0ec1f73b287fbabb8296726fa6db7d595565",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/566e0ec1f73b287fbabb8296726fa6db7d595565",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/566e0ec1f73b287fbabb8296726fa6db7d595565/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06ff72c7ab8aa57b3bd94c9563bc6d3a24e0f99c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 7,
      "deletions": 20
    },
    "files": [
      {
        "sha": "575ae62df6b3ec2f89a1b5f63bdcd290476da1be",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 7,
        "deletions": 20,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/566e0ec1f73b287fbabb8296726fa6db7d595565/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/566e0ec1f73b287fbabb8296726fa6db7d595565/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=566e0ec1f73b287fbabb8296726fa6db7d595565",
        "patch": "@@ -88,12 +88,7 @@ class CNetAddr\n         friend bool operator!=(const CNetAddr& a, const CNetAddr& b) { return !(a == b); }\n         friend bool operator<(const CNetAddr& a, const CNetAddr& b);\n \n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(ip);\n-        }\n+        SERIALIZE_METHODS(CNetAddr, obj) { READWRITE(obj.ip); }\n \n         friend class CSubNet;\n };\n@@ -125,13 +120,11 @@ class CSubNet\n         friend bool operator!=(const CSubNet& a, const CSubNet& b) { return !(a == b); }\n         friend bool operator<(const CSubNet& a, const CSubNet& b);\n \n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(network);\n-            READWRITE(netmask);\n-            READWRITE(valid);\n+        SERIALIZE_METHODS(CSubNet, obj)\n+        {\n+            READWRITE(obj.network);\n+            READWRITE(obj.netmask);\n+            READWRITE(obj.valid);\n         }\n };\n \n@@ -160,13 +153,7 @@ class CService : public CNetAddr\n         CService(const struct in6_addr& ipv6Addr, unsigned short port);\n         explicit CService(const struct sockaddr_in6& addr);\n \n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action) {\n-            READWRITE(ip);\n-            READWRITE(Wrap<BigEndian>(port));\n-        }\n+        SERIALIZE_METHODS(CService, obj) { READWRITE(obj.ip, Wrap<BigEndian>(obj.port)); }\n };\n \n #endif // BITCOIN_NETADDRESS_H"
      }
    ]
  },
  {
    "sha": "13d00243356667021290dc3d294eb648da278f2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2QwMDI0MzM1NjY2NzAyMTI5MGRjM2QyOTRlYjY0OGRhMjc4ZjJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-11-15T20:06:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Convert prevector tests to new serialization",
      "tree": {
        "sha": "6cf42a1bc5a3eec4de244f59ed9171752b3cbfe9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cf42a1bc5a3eec4de244f59ed9171752b3cbfe9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13d00243356667021290dc3d294eb648da278f2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13d00243356667021290dc3d294eb648da278f2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13d00243356667021290dc3d294eb648da278f2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13d00243356667021290dc3d294eb648da278f2f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "566e0ec1f73b287fbabb8296726fa6db7d595565",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/566e0ec1f73b287fbabb8296726fa6db7d595565",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/566e0ec1f73b287fbabb8296726fa6db7d595565"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "42b351a72d4379a5b36f9d9511b52c0df41657e4",
        "filename": "src/bench/prevector.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13d00243356667021290dc3d294eb648da278f2f/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13d00243356667021290dc3d294eb648da278f2f/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=13d00243356667021290dc3d294eb648da278f2f",
        "patch": "@@ -20,9 +20,7 @@\n struct nontrivial_t {\n     int x;\n     nontrivial_t() :x(-1) {}\n-    ADD_SERIALIZE_METHODS\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {READWRITE(x);}\n+    SERIALIZE_METHODS(nontrivial_t, obj) { READWRITE(obj.x); }\n };\n static_assert(!IS_TRIVIALLY_CONSTRUCTIBLE<nontrivial_t>::value,\n               \"expected nontrivial_t to not be trivially constructible\");"
      }
    ]
  },
  {
    "sha": "a134037a1932e76f9fa7188362b99dff45ccee59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTM0MDM3YTE5MzJlNzZmOWZhNzE4ODM2MmI5OWRmZjQ1Y2NlZTU5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-09T06:42:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:01:35Z"
      },
      "message": "Remove old serialization primitives",
      "tree": {
        "sha": "f0b46cc89ff20e28995c61c176e2ee4ee5500e58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0b46cc89ff20e28995c61c176e2ee4ee5500e58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a134037a1932e76f9fa7188362b99dff45ccee59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a134037a1932e76f9fa7188362b99dff45ccee59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a134037a1932e76f9fa7188362b99dff45ccee59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a134037a1932e76f9fa7188362b99dff45ccee59/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13d00243356667021290dc3d294eb648da278f2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13d00243356667021290dc3d294eb648da278f2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13d00243356667021290dc3d294eb648da278f2f"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 1,
      "deletions": 37
    },
    "files": [
      {
        "sha": "972f8ff3447f055ad3e701b958de5743110f3d30",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 37,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a134037a1932e76f9fa7188362b99dff45ccee59/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a134037a1932e76f9fa7188362b99dff45ccee59/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=a134037a1932e76f9fa7188362b99dff45ccee59",
        "patch": "@@ -42,26 +42,6 @@ static const unsigned int MAX_VECTOR_ALLOCATE = 5000000;\n struct deserialize_type {};\n constexpr deserialize_type deserialize {};\n \n-/**\n- * Used to bypass the rule against non-const reference to temporary\n- * where it makes sense with wrappers.\n- */\n-template<typename T>\n-inline T& REF(const T& val)\n-{\n-    return const_cast<T&>(val);\n-}\n-\n-/**\n- * Used to acquire a non-const pointer \"this\" to generate bodies\n- * of const serialization operations from a template\n- */\n-template<typename T>\n-inline T* NCONST_PTR(const T* val)\n-{\n-    return const_cast<T*>(val);\n-}\n-\n //! Safely convert odd char pointer types to standard ones.\n inline char* CharCast(char* c) { return c; }\n inline char* CharCast(unsigned char* c) { return (char*)c; }\n@@ -186,22 +166,6 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n #define READWRITE(...) (::SerReadWriteMany(s, ser_action, __VA_ARGS__))\n #define READWRITEAS(type, obj) (::SerReadWriteMany(s, ser_action, ReadWriteAsHelper<type>(obj)))\n \n-/**\n- * Implement three methods for serializable objects. These are actually wrappers over\n- * \"SerializationOp\" template, which implements the body of each class' serialization\n- * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n- * added as members.\n- */\n-#define ADD_SERIALIZE_METHODS                                         \\\n-    template<typename Stream>                                         \\\n-    void Serialize(Stream& s) const {                                 \\\n-        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize());  \\\n-    }                                                                 \\\n-    template<typename Stream>                                         \\\n-    void Unserialize(Stream& s) {                                     \\\n-        SerializationOp(s, CSerActionUnserialize());                  \\\n-    }\n-\n /**\n  * Implement the Serialize and Unserialize methods by delegating to a single templated\n  * static method that takes the to-be-(de)serialized object as a parameter. This approach\n@@ -1028,7 +992,7 @@ void Unserialize(Stream& is, std::shared_ptr<const T>& p)\n \n \n /**\n- * Support for ADD_SERIALIZE_METHODS and READWRITE macro\n+ * Support for SERIALIZE_METHODS and READWRITE macro.\n  */\n struct CSerActionSerialize\n {"
      }
    ]
  },
  {
    "sha": "f4ca9782d6092ace8988b2716c374f1046487219",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGNhOTc4MmQ2MDkyYWNlODk4OGIyNzE2YzM3NGYxMDQ2NDg3MjE5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-07T18:55:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-13T18:15:51Z"
      },
      "message": "Switch to different wrapping model + different differential vector",
      "tree": {
        "sha": "9eea39578ec507ebeef924d2b6ce3f0a77ba4f8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9eea39578ec507ebeef924d2b6ce3f0a77ba4f8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4ca9782d6092ace8988b2716c374f1046487219",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4ca9782d6092ace8988b2716c374f1046487219",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4ca9782d6092ace8988b2716c374f1046487219",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4ca9782d6092ace8988b2716c374f1046487219/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a134037a1932e76f9fa7188362b99dff45ccee59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a134037a1932e76f9fa7188362b99dff45ccee59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a134037a1932e76f9fa7188362b99dff45ccee59"
      }
    ],
    "stats": {
      "total": 672,
      "additions": 283,
      "deletions": 389
    },
    "files": [
      {
        "sha": "99a560a7e34d569455b2a85d604c988fbbe1ac5c",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 51,
        "deletions": 69,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -13,79 +13,61 @@ class CTxMemPool;\n // Dumb helper to handle CTransaction compression at serialize-time\n struct TransactionCompression\n {\n-    template<typename T>\n-    struct Wrapper {\n-    private:\n-        T& tx;\n-    public:\n-        explicit Wrapper(T& txIn) : tx(txIn) {}\n-        SERIALIZE_METHODS(Wrapper, obj) { READWRITE(obj.tx); }\n-    };\n+    template<typename Stream> void Ser(Stream& s, const CTransactionRef& tx) { s << tx; }\n+    template<typename Stream> void Unser(Stream& s, CTransactionRef& tx) { s >> tx; }\n };\n \n struct Uint48\n {\n-    template<typename I>\n-    struct Wrapper {\n-    private:\n-        I& m_int;\n-    public:\n-        explicit Wrapper(I& i) : m_int(i)\n-        {\n-            static_assert(std::is_unsigned<I>::value, \"Uint48 needs an unsigned integer\");\n-            static_assert(sizeof(I) >= 6, \"Uint48 needs a 48+ bit type\");\n-        }\n+    template <typename Stream, typename I> void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48 needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48 needs a 48+ bit type\");\n \n-        template <typename Stream> void Serialize(Stream& s) const\n-        {\n-            uint32_t lsb = m_int & 0xffffffff;\n-            uint16_t msb = (m_int >> 32) & 0xffff;\n-            s << lsb << msb;\n-        }\n+        uint32_t lsb = v & 0xffffffff;\n+        uint16_t msb = (v >> 32) & 0xffff;\n+        s << lsb << msb;\n+    }\n \n-        template <typename Stream> void Unserialize(Stream& s)\n-        {\n-            uint32_t lsb;\n-            uint16_t msb;\n-            s >> lsb >> msb;\n-            m_int = (uint64_t(msb) << 32) | uint64_t(lsb);\n-        }\n-    };\n+    template <typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"Uint48 needs an unsigned integer\");\n+        static_assert(sizeof(I) >= 6, \"Uint48 needs a 48+ bit type\");\n+\n+        uint32_t lsb;\n+        uint16_t msb;\n+        s >> lsb >> msb;\n+        v = (uint64_t(msb) << 32) | uint64_t(lsb);\n+    }\n };\n \n-/** Vector-wrapper (compatible with VectorApply) to differentially encode values. */\n-struct Differential\n+template<typename I>\n+struct DifferentialSerTransform\n {\n-    template<typename V>\n-    struct Wrapper {\n-    private:\n-        V& m_v;\n-\n-    public:\n-        typedef typename V::value_type value_type;\n-\n-        explicit Wrapper(V& v) : m_v(v) {}\n-        size_t size() const { return m_v.size(); }\n-        void clear() { m_v.clear(); }\n-        void reserve(size_t size) { m_v.reserve(size); }\n-\n-        value_type operator[](size_t pos) const\n-        {\n-            if (pos == 0) return m_v[0];\n-            return m_v[pos] - (m_v[pos - 1] + 1);\n-        }\n+    I m_subtract = 0;\n \n-        void push_back(value_type val)\n-        {\n-            if (m_v.size() == 0) {\n-                m_v.push_back(val);\n-            } else {\n-                value_type add = val + (m_v.back() + 1);\n-                if (add <= val) throw std::ios_base::failure(\"differential value overflow\");\n-                m_v.push_back(add);\n-            }\n-        }\n-    };\n+    I operator()(I val)\n+    {\n+        I tmp = val - m_subtract;\n+        m_subtract = I(val + 1);\n+        return tmp;\n+    }\n+};\n+\n+template<typename I>\n+struct DifferentialUnserTransform\n+{\n+    bool m_first = true;\n+    I m_add = 0;\n+\n+    I operator()(I val)\n+    {\n+        I tmp = I(val + m_add);\n+        if (!m_first && tmp <= val) throw std::ios_base::failure(\"differential value overflow\");\n+        m_first = false;\n+        m_add = I(tmp + 1);\n+        return tmp;\n+    }\n };\n \n class BlockTransactionsRequest {\n@@ -96,7 +78,7 @@ class BlockTransactionsRequest {\n \n     SERIALIZE_METHODS(BlockTransactionsRequest, obj)\n     {\n-        READWRITE(obj.blockhash, Wrap<VectorApply<CompactSize>>(Wrap<Differential>(obj.indexes)));\n+        READWRITE(obj.blockhash, Using<VectorUsing<CompactSizeFormatter, DifferentialSerTransform<uint16_t>, DifferentialUnserTransform<uint16_t>>>(obj.indexes));\n     }\n };\n \n@@ -112,7 +94,7 @@ class BlockTransactions {\n \n     SERIALIZE_METHODS(BlockTransactions, obj)\n     {\n-        READWRITE(obj.blockhash, Wrap<VectorApply<TransactionCompression>>(obj.txn));\n+        READWRITE(obj.blockhash, Using<VectorUsing<TransactionCompression>>(obj.txn));\n     }\n };\n \n@@ -126,7 +108,7 @@ struct PrefilledTransaction {\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s << COMPACTSIZE(index) << Wrap<TransactionCompression>(tx);\n+        s << COMPACTSIZE(index) << Using<TransactionCompression>(tx);\n     }\n \n     template<typename Stream>\n@@ -137,7 +119,7 @@ struct PrefilledTransaction {\n         if (idx > std::numeric_limits<uint16_t>::max())\n             throw std::ios_base::failure(\"index overflowed 16-bits\");\n         index = idx;\n-        s >> Wrap<TransactionCompression>(tx);\n+        s >> Using<TransactionCompression>(tx);\n     }\n };\n \n@@ -179,14 +161,14 @@ class CBlockHeaderAndShortTxIDs {\n     template <typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s << header << nonce << Wrap<VectorApply<Uint48>>(shorttxids) << prefilledtxn;\n+        s << header << nonce << Using<VectorUsing<Uint48>>(shorttxids) << prefilledtxn;\n     }\n \n     template <typename Stream>\n     inline void Unserialize(Stream& s)\n     {\n         static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n-        s >> header >> nonce >> Wrap<VectorApply<Uint48>>(shorttxids) >> prefilledtxn;\n+        s >> header >> nonce >> Using<VectorUsing<Uint48>>(shorttxids) >> prefilledtxn;\n         if (BlockTxCount() > std::numeric_limits<uint16_t>::max()) {\n             throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n         }"
      },
      {
        "sha": "c434cc0fa86ece4d594a4be1b90e091bf0358fa3",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 7,
        "deletions": 18,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -333,26 +333,15 @@ class CDiskBlockIndex : public CBlockIndex\n     SERIALIZE_METHODS(CDiskBlockIndex, obj)\n     {\n         int _nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(VARINT(_nVersion, VarIntMode::NONNEGATIVE_SIGNED));\n-\n-        READWRITE(VARINT(obj.nHeight, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(obj.nStatus));\n-        READWRITE(VARINT(obj.nTx));\n-        if (obj.nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n-            READWRITE(VARINT(obj.nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        if (obj.nStatus & BLOCK_HAVE_DATA)\n-            READWRITE(VARINT(obj.nDataPos));\n-        if (obj.nStatus & BLOCK_HAVE_UNDO)\n-            READWRITE(VARINT(obj.nUndoPos));\n+        if (!(s.GetType() & SER_GETHASH)) READWRITE(VARINT(_nVersion, VarIntMode::NONNEGATIVE_SIGNED));\n+\n+        READWRITE(VARINT(obj.nHeight, VarIntMode::NONNEGATIVE_SIGNED), VARINT(obj.nStatus), VARINT(obj.nTx));\n+        if (obj.nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO)) READWRITE(VARINT(obj.nFile, VarIntMode::NONNEGATIVE_SIGNED));\n+        if (obj.nStatus & BLOCK_HAVE_DATA) READWRITE(VARINT(obj.nDataPos));\n+        if (obj.nStatus & BLOCK_HAVE_UNDO) READWRITE(VARINT(obj.nUndoPos));\n \n         // block header\n-        READWRITE(obj.nVersion);\n-        READWRITE(obj.hashPrev);\n-        READWRITE(obj.hashMerkleRoot);\n-        READWRITE(obj.nTime);\n-        READWRITE(obj.nBits);\n-        READWRITE(obj.nNonce);\n+        READWRITE(obj.nVersion, obj.hashPrev, obj.hashMerkleRoot, obj.nTime, obj.nBits, obj.nNonce);\n     }\n \n     uint256 GetBlockHash() const"
      },
      {
        "sha": "686b42d059a5286a1788105f4b02628d333cd63b",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -61,7 +61,7 @@ class Coin\n         assert(!IsSpent());\n         uint32_t code = nHeight * 2 + fCoinBase;\n         ::Serialize(s, VARINT(code));\n-        ::Serialize(s, Wrap<TxOutCompression>(out));\n+        ::Serialize(s, Using<TxOutCompression>(out));\n     }\n \n     template<typename Stream>\n@@ -70,7 +70,7 @@ class Coin\n         ::Unserialize(s, VARINT(code));\n         nHeight = code >> 1;\n         fCoinBase = code & 1;\n-        ::Unserialize(s, Wrap<TxOutCompression>(out));\n+        ::Unserialize(s, Using<TxOutCompression>(out));\n     }\n \n     bool IsSpent() const {"
      },
      {
        "sha": "233bc221d7a0ac818e78f6e8ff19f2faa01bae39",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 53,
        "deletions": 71,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -31,92 +31,74 @@ uint64_t DecompressAmount(uint64_t nAmount);\n  */\n struct ScriptCompression\n {\n-    template<typename S>\n-    class Wrapper\n-    {\n-    private:\n-        /**\n-         * make this static for now (there are only 6 special scripts defined)\n-         * this can potentially be extended together with a new nVersion for\n-         * transactions, in which case this value becomes dependent on nVersion\n-         * and nHeight of the enclosing transaction.\n-         */\n-        static const unsigned int nSpecialScripts = 6;\n-\n-        S &script;\n-    public:\n-        explicit Wrapper(S &scriptIn) : script(scriptIn) { }\n+    /**\n+     * make this static for now (there are only 6 special scripts defined)\n+     * this can potentially be extended together with a new nVersion for\n+     * transactions, in which case this value becomes dependent on nVersion\n+     * and nHeight of the enclosing transaction.\n+     */\n+    static const unsigned int nSpecialScripts = 6;\n \n-        template<typename Stream>\n-        void Serialize(Stream &s) const {\n-            std::vector<unsigned char> compr;\n-            if (CompressScript(script, compr)) {\n-                s << MakeSpan(compr);\n-                return;\n-            }\n-            unsigned int nSize = script.size() + nSpecialScripts;\n-            s << VARINT(nSize);\n-            s << MakeSpan(script);\n+    template<typename Stream>\n+    void Ser(Stream &s, const CScript& script) {\n+        std::vector<unsigned char> compr;\n+        if (CompressScript(script, compr)) {\n+            s << MakeSpan(compr);\n+            return;\n         }\n+        unsigned int nSize = script.size() + nSpecialScripts;\n+        s << VARINT(nSize);\n+        s << MakeSpan(script);\n+    }\n \n-        template<typename Stream>\n-        void Unserialize(Stream &s) {\n-            unsigned int nSize = 0;\n-            s >> VARINT(nSize);\n-            if (nSize < nSpecialScripts) {\n-                std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n-                s >> MakeSpan(vch);\n-                DecompressScript(script, nSize, vch);\n-                return;\n-            }\n-            nSize -= nSpecialScripts;\n-            if (nSize > MAX_SCRIPT_SIZE) {\n-                // Overly long script, replace with a short invalid one\n-                script << OP_RETURN;\n-                s.ignore(nSize);\n-            } else {\n-                script.resize(nSize);\n-                s >> MakeSpan(script);\n-            }\n+    template<typename Stream>\n+    void Unser(Stream &s, CScript& script) {\n+        unsigned int nSize = 0;\n+        s >> VARINT(nSize);\n+        if (nSize < nSpecialScripts) {\n+            std::vector<unsigned char> vch(GetSpecialScriptSize(nSize), 0x00);\n+            s >> MakeSpan(vch);\n+            DecompressScript(script, nSize, vch);\n+            return;\n+        }\n+        nSize -= nSpecialScripts;\n+        if (nSize > MAX_SCRIPT_SIZE) {\n+            // Overly long script, replace with a short invalid one\n+            script << OP_RETURN;\n+            s.ignore(nSize);\n+        } else {\n+            script.resize(nSize);\n+            s >> MakeSpan(script);\n         }\n-    };\n+    }\n };\n \n struct AmountCompression\n {\n-    template<typename I>\n-    class Wrapper\n+    template<typename Stream, typename I> void Ser(Stream& s, I val)\n     {\n-        I& m_val;\n-    public:\n-        explicit Wrapper(I& val) : m_val(val) {}\n-        template<typename Stream> void Serialize(Stream& s) const\n-        {\n-            s << VARINT(CompressAmount(m_val));\n-        }\n-        template<typename Stream> void Unserialize(Stream& s)\n-        {\n-            uint64_t v;\n-            s >> VARINT(v);\n-            m_val = DecompressAmount(v);\n-        }\n-    };\n+        s << VARINT(CompressAmount(val));\n+    }\n+    template<typename Stream, typename I> void Unser(Stream& s, I& val)\n+    {\n+        uint64_t v;\n+        s >> VARINT(v);\n+        val = DecompressAmount(v);\n+    }\n };\n \n /** wrapper for CTxOut that provides a more compact serialization */\n struct TxOutCompression\n {\n-    template<typename O>\n-    class Wrapper\n+    template<typename Stream> void Ser(Stream& s, const CTxOut& txout)\n     {\n-    private:\n-        O &txout;\n-    public:\n-        Wrapper(O &txoutIn) : txout(txoutIn) { }\n-        SERIALIZE_METHODS(Wrapper, obj) {\n-            READWRITE(Wrap<AmountCompression>(obj.txout.nValue), Wrap<ScriptCompression>(obj.txout.scriptPubKey));\n-        }\n-    };\n+        s << Using<AmountCompression>(txout.nValue) << Using<ScriptCompression>(txout.scriptPubKey);\n+    }\n+\n+    template<typename Stream> void Unser(Stream& s, CTxOut& txout)\n+    {\n+        s >> Using<AmountCompression>(txout.nValue) >> Using<ScriptCompression>(txout.scriptPubKey);\n+    }\n };\n \n #endif // BITCOIN_COMPRESSOR_H"
      },
      {
        "sha": "de729ca7f9e188807a7a19a06e81434a511ee4dc",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -153,7 +153,7 @@ class CService : public CNetAddr\n         CService(const struct in6_addr& ipv6Addr, unsigned short port);\n         explicit CService(const struct sockaddr_in6& addr);\n \n-        SERIALIZE_METHODS(CService, obj) { READWRITE(obj.ip, Wrap<BigEndian>(obj.port)); }\n+        SERIALIZE_METHODS(CService, obj) { READWRITE(obj.ip, Using<BigEndian>(obj.port)); }\n };\n \n #endif // BITCOIN_NETADDRESS_H"
      },
      {
        "sha": "713fe1570e27c51d86a67b99c86f354ef8a22d91",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -327,7 +327,7 @@ class CAddress : public CService\n             (nVersion >= CADDR_TIME_VERSION && !(s.GetType() & SER_GETHASH))) {\n             READWRITE(obj.nTime);\n         }\n-        READWRITE(Wrap<Convert<uint64_t>>(obj.nServices));\n+        READWRITE(Using<Convert<uint64_t>>(obj.nServices));\n         READWRITEAS(CService, obj);\n     }\n "
      },
      {
        "sha": "2f6784da6320ecc9eb9bbf9a0de380ba075e0a04",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 8,
        "deletions": 20,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -13,28 +13,16 @@\n \n class WalletModel;\n \n-//! Wrapper class to serialize QDateTime objects as 32-bit time_t.\n+//! Formatter class to serialize QDateTime objects as 32-bit time_t.\n struct AsTimeT\n {\n-    template<typename Q>\n-    class Wrapper\n+    template<typename Stream> static void Ser(Stream& s, const QDateTime& q) { s << (uint32_t)q.toTime_t(); }\n+    template<typename Stream> static void Unser(Stream& s, QDateTime& q)\n     {\n-    private:\n-        Q& m_qdatetime;\n-    public:\n-        Wrapper(Q& qdatetime) : m_qdatetime(qdatetime) {}\n-\n-        template<typename Stream>\n-        void Serialize(Stream& s) const { s << (uint32_t)m_qdatetime.toTime_t(); }\n-\n-        template<typename Stream>\n-        void Unserialize(Stream& s)\n-        {\n-            uint32_t timeval;\n-            s >> timeval;\n-            m_qdatetime = QDateTime::fromTime_t(timeval);\n-        }\n-    };\n+        uint32_t timeval;\n+        s >> timeval;\n+        q = QDateTime::fromTime_t(timeval);\n+    }\n };\n \n class RecentRequestEntry\n@@ -50,7 +38,7 @@ class RecentRequestEntry\n \n     SERIALIZE_METHODS(RecentRequestEntry, obj)\n     {\n-        READWRITE(obj.nVersion, obj.id, Wrap<AsTimeT>(obj.date), obj.recipient);\n+        READWRITE(obj.nVersion, obj.id, Using<AsTimeT>(obj.date), obj.recipient);\n     }\n };\n "
      },
      {
        "sha": "d54ca1b4d0a272c3e06da445692591859179734c",
        "filename": "src/qt/sendcoinsrecipient.h",
        "status": "modified",
        "additions": 11,
        "deletions": 23,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/qt/sendcoinsrecipient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/qt/sendcoinsrecipient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsrecipient.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -16,28 +16,16 @@\n \n #include <QString>\n \n-//! Wrapper class to serialize QString objects as std::strings.\n+//! Formatter class to serialize QString objects as std::strings.\n struct AsStdString\n {\n-    template<typename Q>\n-    class Wrapper\n+    template<typename Stream> static void Ser(Stream& s, const QString& q) { s << q.toStdString(); }\n+    template<typename Stream> static void Unser(Stream& s, QString& q)\n     {\n-    private:\n-        Q& m_qstring;\n-    public:\n-        Wrapper(Q& qstring) : m_qstring(qstring) {}\n-\n-        template<typename Stream>\n-        void Serialize(Stream& s) const { s << m_qstring.toStdString(); }\n-\n-        template<typename Stream>\n-        void Unserialize(Stream& s)\n-        {\n-            std::string str;\n-            s >> str;\n-            m_qstring = QString::fromStdString(std::move(str));\n-        }\n-    };\n+        std::string str;\n+        s >> str;\n+        q = QString::fromStdString(std::move(str));\n+    }\n };\n \n class SendCoinsRecipient\n@@ -71,12 +59,12 @@ class SendCoinsRecipient\n     SERIALIZE_METHODS(SendCoinsRecipient, obj)\n     {\n         READWRITE(obj.nVersion);\n-        READWRITE(Wrap<AsStdString>(obj.address));\n-        READWRITE(Wrap<AsStdString>(obj.label));\n+        READWRITE(Using<AsStdString>(obj.address));\n+        READWRITE(Using<AsStdString>(obj.label));\n         READWRITE(obj.amount);\n-        READWRITE(Wrap<AsStdString>(obj.message));\n+        READWRITE(Using<AsStdString>(obj.message));\n         READWRITE(obj.sPaymentRequest);\n-        READWRITE(Wrap<AsStdString>(obj.authenticatedMerchant));\n+        READWRITE(Using<AsStdString>(obj.authenticatedMerchant));\n     }\n };\n "
      },
      {
        "sha": "127287cb69897d28eb50762fa41cd8786879c4d6",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 122,
        "deletions": 148,
        "changes": 270,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -409,38 +409,40 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n+template<typename Formatter, typename T>\n+class Wrapper\n+{\n+protected:\n+    T& m_object;\n+public:\n+    explicit Wrapper(T& obj) : m_object(obj) {}\n+    template<typename Stream> void Serialize(Stream &s) const { Formatter().Ser(s, m_object); }\n+    template<typename Stream> void Unserialize(Stream &s) { Formatter().Unser(s, m_object); }\n+};\n+\n /** Wrap a serializable object with a serialization wrapper. */\n-template<typename W, typename T>\n-static inline typename W::template Wrapper<typename std::remove_reference<T>::type> Wrap(T&& t) { return typename W::template Wrapper<typename std::remove_reference<T>::type>(t); }\n+template<typename Formatter, typename T>\n+static inline Wrapper<Formatter, typename std::remove_reference<T>::type> Using(T&& t) { return Wrapper<Formatter, typename std::remove_reference<T>::type>(t); }\n \n-#define VARINT(obj, ...) Wrap<VarIntFormat<__VA_ARGS__>>(obj)\n-#define COMPACTSIZE(obj) Wrap<CompactSize>(obj)\n-#define LIMITED_STRING(obj,n) Wrap<LimitedString<n>>(obj)\n+#define VARINT(obj, ...) Using<VarIntFormatter<__VA_ARGS__>>(obj)\n+#define COMPACTSIZE(obj) Using<CompactSizeFormatter>(obj)\n+#define LIMITED_STRING(obj,n) Using<LimitedStringFormatter<n>>(obj)\n \n /** Serialization wrapper class for integers in VarInt format. */\n template<VarIntMode Mode=VarIntMode::DEFAULT>\n-struct VarIntFormat\n+struct VarIntFormatter\n {\n-    template<typename I>\n-    class Wrapper\n+    template<typename Stream, typename I>\n+    void Ser(Stream &s, I v)\n     {\n-    protected:\n-        I &m_n;\n-    public:\n-        explicit Wrapper(I& n) : m_n(n) { }\n-\n-        template<typename Stream>\n-        void Serialize(Stream &s) const\n-        {\n-            WriteVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s, m_n);\n-        }\n+        WriteVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s, v);\n+    }\n \n-        template<typename Stream>\n-        void Unserialize(Stream& s)\n-        {\n-            m_n = ReadVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s);\n-        }\n-    };\n+    template<typename Stream, typename I>\n+    void Unser(Stream& s, I& v)\n+    {\n+        v = ReadVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s);\n+    }\n };\n \n /** Serialization wrapper class for big-endian integers.\n@@ -454,123 +456,102 @@ struct VarIntFormat\n  */\n struct BigEndian\n {\n-    template<typename I> class Wrapper\n+\n+    template<typename Stream, typename I>\n+    void Ser(Stream& s, I v)\n     {\n-    protected:\n-        I& m_val;\n-    public:\n-        explicit Wrapper(I& val) : m_val(val)\n-        {\n-            static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n-            static_assert(sizeof(I) == 2 && std::numeric_limits<I>::min() == 0 && std::numeric_limits<I>::max() == std::numeric_limits<uint16_t>::max(), \"Unsupported BigEndian size\");\n-        }\n+        static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n+        static_assert(sizeof(I) == 2 && std::numeric_limits<I>::min() == 0 && std::numeric_limits<I>::max() == std::numeric_limits<uint16_t>::max(), \"Unsupported BigEndian size\");\n \n-        template<typename Stream>\n-        void Serialize(Stream& s) const\n-        {\n-            ser_writedata16be(s, m_val);\n-        }\n+        ser_writedata16be(s, v);\n+    }\n \n-        template<typename Stream>\n-        void Unserialize(Stream& s)\n-        {\n-            m_val = ser_readdata16be(s);\n-        }\n-    };\n+    template<typename Stream, typename I>\n+    void Unser(Stream& s, I& v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"BigEndian type must be unsigned integer\");\n+        static_assert(sizeof(I) == 2 && std::numeric_limits<I>::min() == 0 && std::numeric_limits<I>::max() == std::numeric_limits<uint16_t>::max(), \"Unsupported BigEndian size\");\n+\n+        v = ser_readdata16be(s);\n+    }\n };\n \n /** Serialization wrapper class for integers in CompactSize format. */\n-struct CompactSize\n+struct CompactSizeFormatter\n {\n-    template<typename I>\n-    class Wrapper\n+\n+    template<typename Stream, typename I>\n+    void Unser(Stream& s, I& v)\n     {\n-    protected:\n-        I &m_n;\n-    public:\n-        explicit Wrapper(I& n) : m_n(n)\n-        {\n-            static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n-            static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n-        }\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n \n-        template<typename Stream>\n-        void Unserialize(Stream& s)\n-        {\n-            uint64_t n = ReadCompactSize<Stream>(s);\n-            if (n > std::numeric_limits<I>::max()) {\n-                throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n-            }\n-            m_n = n;\n+        uint64_t n = ReadCompactSize<Stream>(s);\n+        if (n > std::numeric_limits<I>::max()) {\n+            throw std::ios_base::failure(\"CompactSize exceeds limit of type\");\n         }\n+        v = n;\n+    }\n \n-        template<typename Stream>\n-        void Serialize(Stream& s) const\n-        {\n-            WriteCompactSize<Stream>(s, m_n);\n-        }\n-    };\n+    template<typename Stream, typename I>\n+    void Ser(Stream& s, I v)\n+    {\n+        static_assert(std::is_unsigned<I>::value, \"CompactSize only supported for unsigned integers\");\n+        static_assert(std::numeric_limits<I>::max() <= std::numeric_limits<uint64_t>::max(), \"CompactSize only supports 64-bit integers and below\");\n+\n+        WriteCompactSize<Stream>(s, v);\n+    }\n };\n \n /** Serialization wrapper class for strings of limited length. */\n template<size_t Limit>\n-struct LimitedString\n+struct LimitedStringFormatter\n {\n-    template<typename T>\n-    class Wrapper\n+    template<typename Stream>\n+    void Unser(Stream& s, std::string& str)\n     {\n-    protected:\n-        T& m_string;\n-    public:\n-        explicit Wrapper(T& string) : m_string(string) {}\n-\n-        template<typename Stream>\n-        void Unserialize(Stream& s)\n-        {\n-            size_t size = ReadCompactSize(s);\n-            if (size > Limit) {\n-                throw std::ios_base::failure(\"String length limit exceeded\");\n-            }\n-            m_string.resize(size);\n-            if (size != 0) {\n-                s.read(&m_string[0], size);\n-            }\n+        size_t size = ReadCompactSize(s);\n+        if (size > Limit) {\n+            throw std::ios_base::failure(\"String length limit exceeded\");\n         }\n-\n-        template<typename Stream>\n-        void Serialize(Stream& s) const\n-        {\n-            s << m_string;\n+        str.resize(size);\n+        if (size != 0) {\n+            s.read((char*)str.data(), size);\n         }\n+    }\n+\n+    template<typename Stream>\n+    void Ser(Stream& s, const std::string& str)\n+    {\n+        s << str;\n     };\n };\n \n template<typename F> struct Convert\n {\n-    template<typename T> class Wrapper\n+    template<typename Stream, typename T>\n+    void Ser(Stream& s, const T& v)\n     {\n-    protected:\n-        T& m_val;\n-    public:\n-        explicit Wrapper(T& val) : m_val(val) {}\n-\n-        template<typename Stream>\n-        void Serialize(Stream& s) const\n-        {\n-            F tmp(m_val);\n-            s << tmp;\n-        }\n+        F tmp(v);\n+        s << tmp;\n+    }\n \n-        template<typename Stream>\n-        void Unserialize(Stream& s)\n-        {\n-            F tmp;\n-            s >> tmp;\n-            m_val = T(tmp);\n-        }\n+    template<typename Stream, typename T>\n+    void Unser(Stream& s, T& v)\n+    {\n+        F tmp;\n+        s >> tmp;\n+        v = T(tmp);\n     };\n };\n \n+/** Identity functor. Identical to C++20's std::identity. */\n+struct Identity\n+{\n+    template<typename T>\n+    constexpr T&& operator()(T&& t) const noexcept { return std::forward<T>(t); }\n+};\n+\n /** Serialization wrapper for custom-element vectors.\n  *\n  * This allows (de)serialization of vectors of type V while using a custom\n@@ -579,52 +560,45 @@ template<typename F> struct Convert\n  * Example:\n  *   struct X {\n  *     std::vector<uint64_t> v;\n- *     SERIALIZE_METHODS(X, obj) { READWRITE(Wrap<VectorApply<VarInt>>(obj.v)); }\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorUsing<VarInt>>(obj.v)); }\n  *   };\n  * will define a struct that contains a vector of uint64_t, which is serialized\n  * as a vector of VarInt-encoded integers.\n  *\n  * V is not required to be an std::vector type. It works for any class that\n- * exposes a value_type, size, reserve, push_back, and const operator[].\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n  */\n-template<class W>\n-struct VectorApply\n+template<class Formatter, class SerTrans = Identity, class UnserTrans = Identity>\n+struct VectorUsing\n {\n-    template<typename V> class Wrapper\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n     {\n-    protected:\n-        typedef typename V::value_type value_type;\n-        V& m_vector;\n-    public:\n-        explicit Wrapper(V& vector) : m_vector(vector) {}\n-\n-        template<typename Stream>\n-        void Serialize(Stream& s) const\n-        {\n-            WriteCompactSize(s, m_vector.size());\n-            for (size_t i = 0; i < m_vector.size(); ++i) {\n-                s << typename W::template Wrapper<const value_type>(m_vector[i]);\n-            }\n+        SerTrans trans;\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(trans(elem));\n         }\n+    }\n \n-        template<typename Stream>\n-        void Unserialize(Stream& s)\n-        {\n-            m_vector.clear();\n-            size_t size = ReadCompactSize(s);\n-            size_t allocated = 0;\n-            while (allocated < size) {\n-                // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n-                // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n-                // X MiB of data to make us allocate X+5 Mib.\n-                allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(value_type));\n-                m_vector.reserve(allocated);\n-                while (m_vector.size() < allocated) {\n-                    value_type val;\n-                    typename W::template Wrapper<value_type> elem(val);\n-                    s >> elem;\n-                    m_vector.push_back(std::move(val));\n-                }\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        UnserTrans trans;\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));\n+            v.reserve(allocated);\n+            while (v.size() < allocated) {\n+                typename V::value_type val;\n+                auto wrapped = Using<Formatter>(val);\n+                s >> wrapped;\n+                v.push_back(trans(std::move(val)));\n             }\n         }\n     };"
      },
      {
        "sha": "b7c79d6f57e0a0b82a97abdd32a81b47def1e264",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -134,7 +134,7 @@ class TestHeaderAndShortIDs {\n \n     SERIALIZE_METHODS(TestHeaderAndShortIDs, obj)\n     {\n-        READWRITE(obj.header, obj.nonce, Wrap<VectorApply<Uint48>>(obj.shorttxids), obj.prefilledtxn);\n+        READWRITE(obj.header, obj.nonce, Using<VectorUsing<Uint48>>(obj.shorttxids), obj.prefilledtxn);\n     }\n };\n "
      },
      {
        "sha": "f06f339b9d01dbff1b72374866b77438d2424708",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -206,7 +206,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         DeserializeFromFuzzingInput(buffer, dbi);\n #elif TXOUTCOMPRESSOR_DESERIALIZE\n         CTxOut to;\n-        auto toc = Wrap<TxOutCompression>(to);\n+        auto toc = Using<TxOutCompression>(to);\n         DeserializeFromFuzzingInput(buffer, toc);\n #elif BLOCKTRANSACTIONS_DESERIALIZE\n         BlockTransactions bt;"
      },
      {
        "sha": "dc9ffac7d6bede20d5ca6cf9256f3f727ff2f90e",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -324,7 +324,7 @@ class CCoins\n         vout.assign(vAvail.size(), CTxOut());\n         for (unsigned int i = 0; i < vAvail.size(); i++) {\n             if (vAvail[i])\n-                ::Unserialize(s, Wrap<TxOutCompression>(vout[i]));\n+                ::Unserialize(s, Using<TxOutCompression>(vout[i]));\n         }\n         // coinbase height\n         ::Unserialize(s, VARINT(nHeight, VarIntMode::NONNEGATIVE_SIGNED));"
      },
      {
        "sha": "f4a977acf3c5bb9e5251ba71dcf9dc21503589b4",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 24,
        "deletions": 33,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4ca9782d6092ace8988b2716c374f1046487219/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4ca9782d6092ace8988b2716c374f1046487219/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=f4ca9782d6092ace8988b2716c374f1046487219",
        "patch": "@@ -13,7 +13,7 @@\n #include <serialize.h>\n #include <version.h>\n \n-/** Undo information for a CTxIn\n+/** Formatter for undo information for a CTxIn\n  *\n  *  Contains the prevout's CTxOut being spent, and its metadata as well\n  *  (coinbase or not, height). The serialization contains a dummy value of\n@@ -22,40 +22,31 @@\n  */\n struct TxInUndo\n {\n-    template<typename C>\n-    class Wrapper\n-    {\n-        C& txout;\n-\n-    public:\n-        template<typename Stream>\n-        void Serialize(Stream &s) const {\n-            ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1u : 0u)));\n-            if (txout.nHeight > 0) {\n-                // Required to maintain compatibility with older undo format.\n-                ::Serialize(s, (unsigned char)0);\n-            }\n-            ::Serialize(s, Wrap<TxOutCompression>(txout.out));\n+    template<typename Stream>\n+    void Ser(Stream &s, const Coin& txout) {\n+        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1u : 0u)));\n+        if (txout.nHeight > 0) {\n+            // Required to maintain compatibility with older undo format.\n+            ::Serialize(s, (unsigned char)0);\n         }\n+        ::Serialize(s, Using<TxOutCompression>(txout.out));\n+    }\n \n-        template<typename Stream>\n-        void Unserialize(Stream &s) {\n-            unsigned int nCode = 0;\n-            ::Unserialize(s, VARINT(nCode));\n-            txout.nHeight = nCode / 2;\n-            txout.fCoinBase = nCode & 1;\n-            if (txout.nHeight > 0) {\n-                // Old versions stored the version number for the last spend of\n-                // a transaction's outputs. Non-final spends were indicated with\n-                // height = 0.\n-                unsigned int nVersionDummy;\n-                ::Unserialize(s, VARINT(nVersionDummy));\n-            }\n-            ::Unserialize(s, Wrap<TxOutCompression>(txout.out));\n+    template<typename Stream>\n+    void Unser(Stream &s, Coin& txout) {\n+        unsigned int nCode = 0;\n+        ::Unserialize(s, VARINT(nCode));\n+        txout.nHeight = nCode / 2;\n+        txout.fCoinBase = nCode & 1;\n+        if (txout.nHeight > 0) {\n+            // Old versions stored the version number for the last spend of\n+            // a transaction's outputs. Non-final spends were indicated with\n+            // height = 0.\n+            unsigned int nVersionDummy;\n+            ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-\n-        explicit Wrapper(C& coin) : txout(coin) {}\n-    };\n+        ::Unserialize(s, Using<TxOutCompression>(txout.out));\n+    }\n };\n \n /** Undo information for a CTransaction */\n@@ -65,7 +56,7 @@ class CTxUndo\n     // undo information for all txins\n     std::vector<Coin> vprevout;\n \n-    SERIALIZE_METHODS(CTxUndo, obj) { READWRITE(Wrap<VectorApply<TxInUndo>>(obj.vprevout)); }\n+    SERIALIZE_METHODS(CTxUndo, obj) { READWRITE(Using<VectorUsing<TxInUndo>>(obj.vprevout)); }\n };\n \n /** Undo information for a CBlock */"
      }
    ]
  }
]